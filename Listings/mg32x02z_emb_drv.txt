; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_emb_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_emb_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_emb_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_EMB_DRV.c]
                          THUMB

                          AREA ||i.EMB_AddressDataBusMode_Config||, CODE, READONLY, ALIGN=2

                  EMB_AddressDataBusMode_Config PROC
;;;129     */
;;;130    void EMB_AddressDataBusMode_Config( EMB_AddressDataTypeDef* EMB_AddressDataMode)
000000  490a              LDR      r1,|L1.44|
;;;131    {
;;;132        EMB->CR0.W = EMB->CR0.W & (~(EMB_CR0_BUS_MDS_mask_w | 
000002  6909              LDR      r1,[r1,#0x10]
000004  4a0a              LDR      r2,|L1.48|
000006  4011              ANDS     r1,r1,r2
000008  4a08              LDR      r2,|L1.44|
00000a  6111              STR      r1,[r2,#0x10]
;;;133                                     EMB_CR0_ADR_SEL_mask_w | 
;;;134                                     EMB_CR0_ADR_TWO_mask_w | 
;;;135                                     EMB_CR0_ALE2_MDS_mask_w |
;;;136                                     0));
;;;137        EMB->CR0.W = EMB->CR0.W | (EMB_AddressDataMode->EMB_AddressBit | 
00000c  8801              LDRH     r1,[r0,#0]
00000e  8842              LDRH     r2,[r0,#2]
000010  4311              ORRS     r1,r1,r2
000012  8882              LDRH     r2,[r0,#4]
000014  4311              ORRS     r1,r1,r2
000016  6882              LDR      r2,[r0,#8]
000018  4311              ORRS     r1,r1,r2
00001a  22ff              MOVS     r2,#0xff
00001c  3201              ADDS     r2,#1
00001e  4311              ORRS     r1,r1,r2
000020  4a02              LDR      r2,|L1.44|
000022  6912              LDR      r2,[r2,#0x10]
000024  4311              ORRS     r1,r1,r2
000026  4a01              LDR      r2,|L1.44|
000028  6111              STR      r1,[r2,#0x10]
;;;138                                   EMB_AddressDataMode->EMB_BusMode |
;;;139                                   EMB_AddressDataMode->EMB_ALE2_EN | 
;;;140                                   EMB_AddressDataMode->EMB_ALE2Mode |
;;;141                                   0x00000100);
;;;142    }
00002a  4770              BX       lr
;;;143    
                          ENDP

                  |L1.44|
                          DCD      0x4d020000
                  |L1.48|
                          DCD      0xfeffc3ff

                          AREA ||i.EMB_GetSingleFlagStatus||, CODE, READONLY, ALIGN=2

                  EMB_GetSingleFlagStatus PROC
;;;306     */ 
;;;307    DRV_Return EMB_GetSingleFlagStatus(uint32_t EMB_Flag)
000000  4601              MOV      r1,r0
;;;308    {
;;;309        if((EMB->STA.W & EMB_Flag)!=EMB_Flag)
000002  4804              LDR      r0,|L2.20|
000004  6800              LDR      r0,[r0,#0]
000006  4008              ANDS     r0,r0,r1
000008  4288              CMP      r0,r1
00000a  d001              BEQ      |L2.16|
;;;310        {
;;;311            return(DRV_UnHappened);
00000c  2000              MOVS     r0,#0
                  |L2.14|
;;;312        }
;;;313        else
;;;314        {
;;;315            return(DRV_Happened);
;;;316        }
;;;317    }
00000e  4770              BX       lr
                  |L2.16|
000010  2001              MOVS     r0,#1                 ;315
000012  e7fc              B        |L2.14|
;;;318    
                          ENDP

                  |L2.20|
                          DCD      0x4d020000

                          AREA ||i.EMB_IT_Cmd||, CODE, READONLY, ALIGN=2

                  EMB_IT_Cmd PROC
;;;256     */
;;;257    void EMB_IT_Cmd(uint32_t EMB_IT, FunctionalState EMB_IT_State)
000000  2900              CMP      r1,#0
;;;258    {
;;;259        if(EMB_IT_State==DISABLE)
000002  d105              BNE      |L3.16|
;;;260    	{
;;;261            EMB->INT.W &=  (~EMB_IT);
000004  4a05              LDR      r2,|L3.28|
000006  6852              LDR      r2,[r2,#4]
000008  4382              BICS     r2,r2,r0
00000a  4b04              LDR      r3,|L3.28|
00000c  605a              STR      r2,[r3,#4]
00000e  e004              B        |L3.26|
                  |L3.16|
;;;262    	}
;;;263    	else
;;;264    	{
;;;265    		EMB->INT.W |= EMB_IT;
000010  4a02              LDR      r2,|L3.28|
000012  6852              LDR      r2,[r2,#4]
000014  4302              ORRS     r2,r2,r0
000016  4b01              LDR      r3,|L3.28|
000018  605a              STR      r2,[r3,#4]
                  |L3.26|
;;;266    	}
;;;267    }
00001a  4770              BX       lr
;;;268    
                          ENDP

                  |L3.28|
                          DCD      0x4d020000

                          AREA ||i.EMB_SendSignalStatus_SW||, CODE, READONLY, ALIGN=2

                  EMB_SendSignalStatus_SW PROC
;;;514     */
;;;515    DRV_Return EMB_SendSignalStatus_SW(uint32_t EMB_SWSignal ,BitAction EMB_SWSingal_Status)
000000  4602              MOV      r2,r0
;;;516    {
;;;517        if((EMB_SWSignal & (~EMB_CMP_SWO))!=0)
000002  2301              MOVS     r3,#1
000004  065b              LSLS     r3,r3,#25
000006  4610              MOV      r0,r2
000008  4398              BICS     r0,r0,r3
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L4.18|
;;;518        {
;;;519            return(DRV_Failure);
00000e  2001              MOVS     r0,#1
                  |L4.16|
;;;520        }
;;;521    
;;;522        if(EMB_SWSingal_Status==ENABLE)
;;;523        {
;;;524            EMB->CR1.W |= EMB_SWSignal;
;;;525        }
;;;526        else
;;;527        {
;;;528            EMB->CR1.W &= (~EMB_SWSignal);
;;;529        }
;;;530        return(DRV_Success);
;;;531    }
000010  4770              BX       lr
                  |L4.18|
000012  2901              CMP      r1,#1                 ;522
000014  d105              BNE      |L4.34|
000016  4806              LDR      r0,|L4.48|
000018  6940              LDR      r0,[r0,#0x14]         ;524
00001a  4310              ORRS     r0,r0,r2              ;524
00001c  4b04              LDR      r3,|L4.48|
00001e  6158              STR      r0,[r3,#0x14]         ;524
000020  e004              B        |L4.44|
                  |L4.34|
000022  4803              LDR      r0,|L4.48|
000024  6940              LDR      r0,[r0,#0x14]         ;528
000026  4390              BICS     r0,r0,r2              ;528
000028  4b01              LDR      r3,|L4.48|
00002a  6158              STR      r0,[r3,#0x14]         ;528
                  |L4.44|
00002c  2000              MOVS     r0,#0                 ;530
00002e  e7ef              B        |L4.16|
;;;532    
                          ENDP

                  |L4.48|
                          DCD      0x4d020000

                          AREA ||i.EMB_SignalInverse_Cmd||, CODE, READONLY, ALIGN=2

                  EMB_SignalInverse_Cmd PROC
;;;431     */
;;;432    DRV_Return EMB_SignalInverse_Cmd(uint32_t EMD_InverseSignal , FunctionalState EMB_InverseSignal_Status)
000000  4602              MOV      r2,r0
;;;433    {
;;;434        if((EMD_InverseSignal & (~EMB_CMP_INV))!=0)
000002  2308              MOVS     r3,#8
000004  4610              MOV      r0,r2
000006  4398              BICS     r0,r0,r3
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L5.16|
;;;435        {
;;;436            return(DRV_Failure);
00000c  2001              MOVS     r0,#1
                  |L5.14|
;;;437        }    
;;;438        
;;;439        if(EMB_InverseSignal_Status == ENABLE)
;;;440        {
;;;441            EMB->CR1.W |= EMD_InverseSignal;
;;;442        }
;;;443        else
;;;444        {
;;;445            EMB->CR1.W &= (~EMD_InverseSignal);
;;;446        }
;;;447        return(DRV_Success);
;;;448    }
00000e  4770              BX       lr
                  |L5.16|
000010  2901              CMP      r1,#1                 ;439
000012  d105              BNE      |L5.32|
000014  4806              LDR      r0,|L5.48|
000016  6940              LDR      r0,[r0,#0x14]         ;441
000018  4310              ORRS     r0,r0,r2              ;441
00001a  4b05              LDR      r3,|L5.48|
00001c  6158              STR      r0,[r3,#0x14]         ;441
00001e  e004              B        |L5.42|
                  |L5.32|
000020  4803              LDR      r0,|L5.48|
000022  6940              LDR      r0,[r0,#0x14]         ;445
000024  4390              BICS     r0,r0,r2              ;445
000026  4b02              LDR      r3,|L5.48|
000028  6158              STR      r0,[r3,#0x14]         ;445
                  |L5.42|
00002a  2000              MOVS     r0,#0                 ;447
00002c  e7ef              B        |L5.14|
;;;449    /**
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      0x4d020000

                          AREA ||i.EMB_SignalSWAP_Cmd||, CODE, READONLY, ALIGN=2

                  EMB_SignalSWAP_Cmd PROC
;;;390     */
;;;391    DRV_Return EMB_SignalSWAP_Cmd(uint32_t EMB_SWAPSignal , FunctionalState EMB_SWAPSignal_Status)
000000  4602              MOV      r2,r0
;;;392    {
;;;393        if((EMB_SWAPSignal & (~EMB_CMP_BSWP))!=0)
000002  23ff              MOVS     r3,#0xff
000004  3301              ADDS     r3,#1
000006  4610              MOV      r0,r2
000008  4398              BICS     r0,r0,r3
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L6.18|
;;;394        {
;;;395            return(DRV_Failure);
00000e  2001              MOVS     r0,#1
                  |L6.16|
;;;396        }
;;;397    
;;;398        if(EMB_SWAPSignal_Status==ENABLE)
;;;399        {
;;;400            EMB->CR1.W |=EMB_SWAPSignal;
;;;401        }
;;;402        else
;;;403        {
;;;404            EMB->CR1.W &= (~EMB_SWAPSignal);
;;;405        }
;;;406        return(DRV_Success);
;;;407    } 
000010  4770              BX       lr
                  |L6.18|
000012  2901              CMP      r1,#1                 ;398
000014  d105              BNE      |L6.34|
000016  4806              LDR      r0,|L6.48|
000018  6940              LDR      r0,[r0,#0x14]         ;400
00001a  4310              ORRS     r0,r0,r2              ;400
00001c  4b04              LDR      r3,|L6.48|
00001e  6158              STR      r0,[r3,#0x14]         ;400
000020  e004              B        |L6.44|
                  |L6.34|
000022  4803              LDR      r0,|L6.48|
000024  6940              LDR      r0,[r0,#0x14]         ;404
000026  4390              BICS     r0,r0,r2              ;404
000028  4b01              LDR      r3,|L6.48|
00002a  6158              STR      r0,[r3,#0x14]         ;404
                  |L6.44|
00002c  2000              MOVS     r0,#0                 ;406
00002e  e7ef              B        |L6.16|
;;;408    
                          ENDP

                  |L6.48|
                          DCD      0x4d020000

                          AREA ||i.EMB_SignalSW_Cmd||, CODE, READONLY, ALIGN=2

                  EMB_SignalSW_Cmd PROC
;;;472     */
;;;473    DRV_Return EMB_SignalSW_Cmd(uint32_t EMB_SWSignal ,FunctionalState EMB_SignalSW_Status)
000000  4602              MOV      r2,r0
;;;474    {
;;;475        if((EMB_SWSignal & (~EMB_CMP_SWEN))!=0)
000002  2301              MOVS     r3,#1
000004  061b              LSLS     r3,r3,#24
000006  4610              MOV      r0,r2
000008  4398              BICS     r0,r0,r3
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L7.18|
;;;476        {
;;;477            return(DRV_Failure);
00000e  2001              MOVS     r0,#1
                  |L7.16|
;;;478        }
;;;479        if(EMB_SignalSW_Status==ENABLE)
;;;480        {
;;;481            EMB->CR1.W |= EMB_SWSignal;
;;;482        }
;;;483        else
;;;484        {
;;;485            EMB->CR1.W &= (~EMB_SWSignal);
;;;486        }
;;;487        return(DRV_Success);
;;;488    }
000010  4770              BX       lr
                  |L7.18|
000012  2901              CMP      r1,#1                 ;479
000014  d105              BNE      |L7.34|
000016  4806              LDR      r0,|L7.48|
000018  6940              LDR      r0,[r0,#0x14]         ;481
00001a  4310              ORRS     r0,r0,r2              ;481
00001c  4b04              LDR      r3,|L7.48|
00001e  6158              STR      r0,[r3,#0x14]         ;481
000020  e004              B        |L7.44|
                  |L7.34|
000022  4803              LDR      r0,|L7.48|
000024  6940              LDR      r0,[r0,#0x14]         ;485
000026  4390              BICS     r0,r0,r2              ;485
000028  4b01              LDR      r3,|L7.48|
00002a  6158              STR      r0,[r3,#0x14]         ;485
                  |L7.44|
00002c  2000              MOVS     r0,#0                 ;487
00002e  e7ef              B        |L7.16|
;;;489    
                          ENDP

                  |L7.48|
                          DCD      0x4d020000

                          AREA ||i.EMB_WriteMode_Select||, CODE, READONLY, ALIGN=2

                  EMB_WriteMode_Select PROC
;;;161     */
;;;162    void EMB_WriteMode_Select(EMB_WriteMode_TypeDef EMB_WriteMode)
000000  4a06              LDR      r2,|L8.28|
;;;163    {
;;;164        uint8_t tmp;
;;;165        
;;;166        tmp = (EMB->CR0.W  & (~(EMB_CR0_WEN_mask_w)));
000002  6912              LDR      r2,[r2,#0x10]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  b2d1              UXTB     r1,r2
;;;167        tmp = tmp | EMB_WriteMode;
00000a  460a              MOV      r2,r1
00000c  4302              ORRS     r2,r2,r0
00000e  4611              MOV      r1,r2
;;;168        EMB->CR0.W = EMB->CR0.W | tmp;
000010  4a02              LDR      r2,|L8.28|
000012  6912              LDR      r2,[r2,#0x10]
000014  430a              ORRS     r2,r2,r1
000016  4b01              LDR      r3,|L8.28|
000018  611a              STR      r2,[r3,#0x10]
;;;169    }
00001a  4770              BX       lr
;;;170    ///@}
                          ENDP

                  |L8.28|
                          DCD      0x4d020000

                          AREA ||i.EMB_Cmd||, COMGROUP=EMB_Cmd, CODE, READONLY, ALIGN=2

                  EMB_Cmd PROC
;;;56      */
;;;57     __INLINE void EMB_Cmd(FunctionalState EMB_EN)
000000  4904              LDR      r1,|L55.20|
;;;58     {
;;;59         EMB->CR0.MBIT.EN = EMB_EN;
000002  7c09              LDRB     r1,[r1,#0x10]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  07c2              LSLS     r2,r0,#31
00000a  0fd2              LSRS     r2,r2,#31
00000c  4311              ORRS     r1,r1,r2
00000e  4a01              LDR      r2,|L55.20|
000010  7411              STRB     r1,[r2,#0x10]
;;;60     }
000012  4770              BX       lr
;;;61     
                          ENDP

                  |L55.20|
                          DCD      0x4d020000

                          AREA ||i.EMB_Synchonous_Cmd||, COMGROUP=EMB_Synchonous_Cmd, CODE, READONLY, ALIGN=2

                  EMB_Synchonous_Cmd PROC
;;;80      */
;;;81     __INLINE void EMB_Synchonous_Cmd(FunctionalState EMB_SYNC_Cmd)
000000  4905              LDR      r1,|L62.24|
;;;82     {
;;;83         EMB->CR0.MBIT.SYNC_EN = EMB_SYNC_Cmd;
000002  7c09              LDRB     r1,[r1,#0x10]
000004  2208              MOVS     r2,#8
000006  4391              BICS     r1,r1,r2
000008  00c2              LSLS     r2,r0,#3
00000a  2308              MOVS     r3,#8
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L62.24|
000012  7411              STRB     r1,[r2,#0x10]
;;;84     }
000014  4770              BX       lr
;;;85     #endif
                          ENDP

000016  0000              DCW      0x0000
                  |L62.24|
                          DCD      0x4d020000

                          AREA ||i.EMB_AccessTime_Config||, COMGROUP=EMB_AccessTime_Config, CODE, READONLY, ALIGN=2

                  EMB_AccessTime_Config PROC
;;;212     */
;;;213    __INLINE void EMB_AccessTime_Config(EMB_TimeStateTypeDef* EMB_TimeState)
000000  8882              LDRH     r2,[r0,#4]
;;;214    {
;;;215        EMB->CR2.W = (EMB_TimeState->EMB_ACCH | 
000002  68c1              LDR      r1,[r0,#0xc]
000004  4311              ORRS     r1,r1,r2
000006  6882              LDR      r2,[r0,#8]
000008  4311              ORRS     r1,r1,r2
00000a  7802              LDRB     r2,[r0,#0]
00000c  4311              ORRS     r1,r1,r2
00000e  8842              LDRH     r2,[r0,#2]
000010  4311              ORRS     r1,r1,r2
000012  7842              LDRB     r2,[r0,#1]
000014  4311              ORRS     r1,r1,r2
000016  4a01              LDR      r2,|L69.28|
000018  6191              STR      r1,[r2,#0x18]
;;;216                      EMB_TimeState->EMB_ACCS | 
;;;217                      EMB_TimeState->EMB_ACCW | 
;;;218                      EMB_TimeState->EMB_ALES | 
;;;219                      EMB_TimeState->EMB_ALEH |
;;;220                      EMB_TimeState->EMB_ALEW | 
;;;221                      0);
;;;222    }
00001a  4770              BX       lr
;;;223    
                          ENDP

                  |L69.28|
                          DCD      0x4d020000

                          AREA ||i.EMB_ITEA_Cmd||, COMGROUP=EMB_ITEA_Cmd, CODE, READONLY, ALIGN=2

                  EMB_ITEA_Cmd PROC
;;;284     */
;;;285    __INLINE void EMB_ITEA_Cmd(FunctionalState EMB_ITEA_State)
000000  4904              LDR      r1,|L76.20|
;;;286    {
;;;287         EMB->INT.MBIT.IEA = EMB_ITEA_State;
000002  7909              LDRB     r1,[r1,#4]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  07c2              LSLS     r2,r0,#31
00000a  0fd2              LSRS     r2,r2,#31
00000c  4311              ORRS     r1,r1,r2
00000e  4a01              LDR      r2,|L76.20|
000010  7111              STRB     r1,[r2,#4]
;;;288    }
000012  4770              BX       lr
;;;289     
                          ENDP

                  |L76.20|
                          DCD      0x4d020000

                          AREA ||i.EMB_GetAllFlagStatus||, COMGROUP=EMB_GetAllFlagStatus, CODE, READONLY, ALIGN=2

                  EMB_GetAllFlagStatus PROC
;;;331     */ 
;;;332    __INLINE uint32_t EMB_GetAllFlagStatus(void)
000000  4801              LDR      r0,|L83.8|
;;;333    {
;;;334        return(EMB->STA.W);
000002  6800              LDR      r0,[r0,#0]
;;;335    }
000004  4770              BX       lr
;;;336    
                          ENDP

000006  0000              DCW      0x0000
                  |L83.8|
                          DCD      0x4d020000

                          AREA ||i.EMB_ClearFlag||, COMGROUP=EMB_ClearFlag, CODE, READONLY, ALIGN=2

                  EMB_ClearFlag PROC
;;;353     */ 
;;;354    __INLINE void EMB_ClearFlag(uint32_t EMB_Flag)
000000  4901              LDR      r1,|L90.8|
;;;355    {
;;;356        EMB->STA.W = EMB_Flag;
000002  6008              STR      r0,[r1,#0]
;;;357    
;;;358    }
000004  4770              BX       lr
;;;359    
                          ENDP

000006  0000              DCW      0x0000
                  |L90.8|
                          DCD      0x4d020000

                          AREA ||i.EMB_MWESignal_Select||, COMGROUP=EMB_MWESignal_Select, CODE, READONLY, ALIGN=2

                  EMB_MWESignal_Select PROC
;;;553     */
;;;554    __INLINE void EMB_MWESignal_Select(EMB_MWE_TypeDef EMB_MWE)
000000  4905              LDR      r1,|L97.24|
;;;555    {
;;;556        EMB->CR1.MBIT.WE_MUX = EMB_MWE;
000002  7dc9              LDRB     r1,[r1,#0x17]
000004  22c0              MOVS     r2,#0xc0
000006  4391              BICS     r1,r1,r2
000008  0182              LSLS     r2,r0,#6
00000a  23c0              MOVS     r3,#0xc0
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L97.24|
000012  75d1              STRB     r1,[r2,#0x17]
;;;557    }
000014  4770              BX       lr
;;;558    
                          ENDP

000016  0000              DCW      0x0000
                  |L97.24|
                          DCD      0x4d020000

                          AREA ||i.EMB_MOESignal_Select||, COMGROUP=EMB_MOESignal_Select, CODE, READONLY, ALIGN=2

                  EMB_MOESignal_Select PROC
;;;577     */
;;;578    __INLINE void EMB_MOESignal_Select(EMB_MOE_TypeDef EMB_MOE)
000000  4905              LDR      r1,|L104.24|
;;;579    {
;;;580        EMB->CR1.MBIT.OE_MUX = EMB_MOE;
000002  7dc9              LDRB     r1,[r1,#0x17]
000004  2230              MOVS     r2,#0x30
000006  4391              BICS     r1,r1,r2
000008  0102              LSLS     r2,r0,#4
00000a  2330              MOVS     r3,#0x30
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L104.24|
000012  75d1              STRB     r1,[r2,#0x17]
;;;581    }
000014  4770              BX       lr
;;;582    
                          ENDP

000016  0000              DCW      0x0000
                  |L104.24|
                          DCD      0x4d020000

                          AREA ||i.EMB_MCLKPreescaler_Select||, COMGROUP=EMB_MCLKPreescaler_Select, CODE, READONLY, ALIGN=2

                  EMB_MCLKPreescaler_Select PROC
;;;596     */
;;;597    __INLINE void EMB_MCLKPreescaler_Select(EMB_MCLK_TypeDef EMB_MCLK)
000000  4905              LDR      r1,|L111.24|
;;;598    {
;;;599        EMB->CLK.MBIT.CK_PSC = EMB_MCLK;
000002  7a09              LDRB     r1,[r1,#8]
000004  2270              MOVS     r2,#0x70
000006  4391              BICS     r1,r1,r2
000008  0102              LSLS     r2,r0,#4
00000a  2370              MOVS     r3,#0x70
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L111.24|
000012  7211              STRB     r1,[r2,#8]
;;;600    }
000014  4770              BX       lr
;;;601    
                          ENDP

000016  0000              DCW      0x0000
                  |L111.24|
                          DCD      0x4d020000

                          AREA ||i.EMB_WESignalMode_Select||, COMGROUP=EMB_WESignalMode_Select, CODE, READONLY, ALIGN=2

                  EMB_WESignalMode_Select PROC
;;;618     */
;;;619    __INLINE void EMB_WESignalMode_Select(EMB_RWSignalMode_TypeDef EMB_WE)
000000  4905              LDR      r1,|L118.24|
;;;620    {
;;;621        EMB->CR0.MBIT.WE_CTL = EMB_WE;
000002  7cc9              LDRB     r1,[r1,#0x13]
000004  2208              MOVS     r2,#8
000006  4391              BICS     r1,r1,r2
000008  00c2              LSLS     r2,r0,#3
00000a  2308              MOVS     r3,#8
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L118.24|
000012  74d1              STRB     r1,[r2,#0x13]
;;;622    }
000014  4770              BX       lr
;;;623    
                          ENDP

000016  0000              DCW      0x0000
                  |L118.24|
                          DCD      0x4d020000

                          AREA ||i.EMB_OESignalMode_Select||, COMGROUP=EMB_OESignalMode_Select, CODE, READONLY, ALIGN=2

                  EMB_OESignalMode_Select PROC
;;;639     */
;;;640    __INLINE void EMB_OESignalMode_Select(EMB_RWSignalMode_TypeDef EMB_OE)
000000  4905              LDR      r1,|L125.24|
;;;641    {
;;;642        EMB->CR0.MBIT.OE_CTL = EMB_OE;
000002  7cc9              LDRB     r1,[r1,#0x13]
000004  2204              MOVS     r2,#4
000006  4391              BICS     r1,r1,r2
000008  0082              LSLS     r2,r0,#2
00000a  2304              MOVS     r3,#4
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L125.24|
000012  74d1              STRB     r1,[r2,#0x13]
;;;643    }
000014  4770              BX       lr
;;;644    
                          ENDP

000016  0000              DCW      0x0000
                  |L125.24|
                          DCD      0x4d020000

                          AREA ||i.EMB_CEMode_Select||, COMGROUP=EMB_CEMode_Select, CODE, READONLY, ALIGN=2

                  EMB_CEMode_Select PROC
;;;662     */
;;;663    __INLINE void EMB_CEMode_Select(EMB_CEMode_TypeDef EMB_CE)
000000  4904              LDR      r1,|L132.20|
;;;664    {
;;;665        EMB->CR0.MBIT.CE_MDS = EMB_CE;
000002  7c89              LDRB     r1,[r1,#0x12]
000004  0889              LSRS     r1,r1,#2
000006  0089              LSLS     r1,r1,#2
000008  0782              LSLS     r2,r0,#30
00000a  0f92              LSRS     r2,r2,#30
00000c  4311              ORRS     r1,r1,r2
00000e  4a01              LDR      r2,|L132.20|
000010  7491              STRB     r1,[r2,#0x12]
;;;666    }
000012  4770              BX       lr
;;;667    
                          ENDP

                  |L132.20|
                          DCD      0x4d020000

                          AREA ||i.EMB_MA1SignalOutputPin_Select||, COMGROUP=EMB_MA1SignalOutputPin_Select, CODE, READONLY, ALIGN=2

                  EMB_MA1SignalOutputPin_Select PROC
;;;685     */
;;;686    __INLINE void EMB_MA1SignalOutputPin_Select(EMB_MA1OutputPin_TypeDef EMB_MA1_PIN)
000000  4905              LDR      r1,|L139.24|
;;;687    {
;;;688        EMB->CR1.MBIT.MAM1_SEL = EMB_MA1_PIN;
000002  7d49              LDRB     r1,[r1,#0x15]
000004  2230              MOVS     r2,#0x30
000006  4391              BICS     r1,r1,r2
000008  0102              LSLS     r2,r0,#4
00000a  2330              MOVS     r3,#0x30
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L139.24|
000012  7551              STRB     r1,[r2,#0x15]
;;;689    }
000014  4770              BX       lr
;;;690    
                          ENDP

000016  0000              DCW      0x0000
                  |L139.24|
                          DCD      0x4d020000

                          AREA ||i.EMB_DMA_Cmd||, COMGROUP=EMB_DMA_Cmd, CODE, READONLY, ALIGN=2

                  EMB_DMA_Cmd PROC
;;;715     */
;;;716    __INLINE void EMB_DMA_Cmd( FunctionalState EMB_DMAState)
000000  4905              LDR      r1,|L146.24|
;;;717    {
;;;718        EMB->CR0.MBIT.DMA_EN = EMB_DMAState;
000002  7cc9              LDRB     r1,[r1,#0x13]
000004  2280              MOVS     r2,#0x80
000006  4391              BICS     r1,r1,r2
000008  01c2              LSLS     r2,r0,#7
00000a  2380              MOVS     r3,#0x80
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L146.24|
000012  74d1              STRB     r1,[r2,#0x13]
;;;719    }
000014  4770              BX       lr
;;;720     
                          ENDP

000016  0000              DCW      0x0000
                  |L146.24|
                          DCD      0x4d020000

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_EMB_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_EMB_DRV_c_78504acf____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_EMB_DRV_c_78504acf____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_EMB_DRV_c_78504acf____REVSH|
#line 496
|__asm___18_MG32x02z_EMB_DRV_c_78504acf____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
