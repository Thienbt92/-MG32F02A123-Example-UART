L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_EXIC_DRV.c"
N
N
N
N
N
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_EXIC_DRV.c
N * @brief       The code is EXIC driver C file.
N *
N * @par         Project
N *              MG32x02z
N * @version     V1.12
N * @date        2021/04/21
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2017 MegaWin Technology Co., Ltd.
N *              All rights reserved.
N * 
N ******************************************************************************* 
N * @par Disclaimer
N * The Demo software is provided "AS IS" without any warranty, either
N * expressed or implied, including, but not limited to, the implied warranties
N * of merchantability and fitness for a particular purpose. The author will
N * not be liable for any special, incidental, consequential or indirect
N * damages due to loss of data or any other reason.
N * These statements agree with the world wide and local dictated laws about
N * authorship and violence against these laws.
N *******************************************************************************
N *******************************************************************************
N */
N 
N 
N 
N
N
N#include "MG32x02z_EXIC_DRV.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z_EXIC_DRV.h" 1
N
N
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_EXIC_DRV.H
N *
N * @brief       This file contains all the functions prototypes for the EXIC
N *              firmware library.
N *
N * @par         Project
N *              MG32x02z
N * @version     V1.12
N * @date        2021/04/21
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2017 MegaWin Technology Co., Ltd.
N *              All rights reserved.
N *
N ******************************************************************************
N * @par 		Disclaimer 
N *		The Demo software is provided "AS IS"  without any warranty, either 
N *		expressed or implied, including, but not limited to, the implied warranties 
N *		of merchantability and fitness for a particular purpose.  The author will 
N *		not be liable for any special, incidental, consequential or indirect 
N *		damages due to loss of data or any other reason. 
N *		These statements agree with the world wide and local dictated laws about 
N *		authorship and violence against these laws. 
N ******************************************************************************
N ******************************************************************************
N */
N
N#ifndef __MG32x02z_EXIC_DRV_H
N#define __MG32x02z_EXIC_DRV_H
N
N
N#include "MG32x02z__Common_DRV.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z__Common_DRV.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z__Common_DRV.h
N *
N * @brief       This is the C code format driver head file.
N *
N * @par         Project
N *              MG32x02z
N * @version     V1.14
N * @date        2019/04/15
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2017 MegaWin Technology Co., Ltd.
N *              All rights reserved.
N *
N ******************************************************************************
N * @par 		Disclaimer 
N *		The Demo software is provided "AS IS"  without any warranty, either 
N *		expressed or implied, including, but not limited to, the implied warranties 
N *		of merchantability and fitness for a particular purpose.  The author will 
N *		not be liable for any special, incidental, consequential or indirect 
N *		damages due to loss of data or any other reason. 
N *		These statements agree with the world wide and local dictated laws about 
N *		authorship and violence against these laws. 
N ******************************************************************************
N ******************************************************************************
N */ 
N
N
N
N#ifndef _MG32x02z_Common_DRV_H
N#define _MG32x02z_Common_DRV_H
N#define _MG32x02z_Common_DRV_H_VER                            0.1      /*!< File Version */
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N
N#include "stdint.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 41 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z__Common_DRV.h" 2
N#include "stdio.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060044
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 42 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z__Common_DRV.h" 2
N#include "string.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060044
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 43 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z__Common_DRV.h" 2
N#include "MG32x02z.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z.h
N *
N * @brief       MG32x02z Device Peripheral Access Layer Header File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:41 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z_H
N#define _MG32x02z_H
N#define _MG32x02z_H_VER                             3.9     /*!< File Version */
N
N
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N *************************************************
N *  Chip definitions
N *************************************************
N */
N// Chip Generation
N#if defined(MG32F02A132) || defined(MG32F02A072) || defined(MA862)
X#if 1L || 0L || 0L
N  #define MG32_1ST
N#elif defined(MG32F02A032)
S  #define MG32_2ND
S#elif defined(MG32F02A128) || defined(MG32F02U128) || defined(MG32F02A064) || defined(MG32F02U064)
S  #define MG32_3RD
S#elif defined(MG32F02V032)
S  #define MG32_4TH
N#endif
N
N#if defined(MG32F02U128) || defined(MG32F02U064)
X#if 0L || 0L
S  #define USB_TYPE    1
N#else
N  #define USB_TYPE    0
N#endif
N    
N
N/**
N *************************************************
N *  ARM CPU Configuration Setting
N *************************************************
N */
N#define __CM0_REV                 0 /*!< Core Revision r0p0                             */
N#define __MPU_PRESENT             0 /*!< Chip do not provide MPU                       */
N#define __NVIC_PRIO_BITS          2 /*!< Chip uses 2 Bits for the Priority Levels      */
N#define __Vendor_SysTickConfig    0 /*!< Set to 1 if different SysTick Config is used   */
N
N/**
N ******************************************************************************
N * @enum        IRQn
N *              Interrupt Number Definition
N ******************************************************************************
N */
Ntypedef enum IRQn
N{
N/******  Cortex-M0 Processor Exceptions Numbers Definitions *****************************************/
N    NMI_IRQn                    = -14 , /*!<  ;Non Maskable Interrupt                               */
N    HardFault_IRQn              = -13 , /*!<  ;Cortex-M0 Hard Fault Interrupt                       */
N    SVC_IRQn                    = -5 ,  /*!<  ;Cortex-M0 SV Call Interrupt                          */
N    PendSV_IRQn                 = -2 ,  /*!<  ;Cortex-M0 Pend SV Interrupt                          */
N    SysTick_IRQn                = -1 ,  /*!<  ;Cortex-M0 System Tick Interrupt                      */
N/******  Peripheral Interrupt Numbers Definitions ***************************************************/
N    WWDT_IRQn                   =  0 ,  /*!<  ;Window Watchdog                                      */
N    SYS_IRQn                    =  1 ,  /*!<  ;System global Interrupt                              */
N    EXINT0_IRQn                 =  3 ,  /*!<  ;EXIC EXINT0 (PA)                                     */
N    EXINT1_IRQn                 =  4 ,  /*!<  ;EXIC EXINT1 (PB)                                     */
N    EXINT2_IRQn                 =  5 ,  /*!<  ;EXIC EXINT2 (PC)                                     */
N    EXINT3_IRQn                 =  6 ,  /*!<  ;EXIC EXINT3/EXINT4 (PD/PE)                           */
N    COMP_IRQn                   =  7 ,  /*!<  ;Analog Comparators global Interrupt                  */
N    DMA_IRQn                    =  8 ,  /*!<  ;DMA all channel global Interrupt                     */
N    ADC_IRQn                    =  10 , /*!<  ;ADC                                                  */
N    DAC_IRQn                    =  11 , /*!<  ;DAC                                                  */
N    TM0x_IRQn                   =  12 , /*!<  ;Timer TM0x global Interrupt                          */
N    TM10_IRQn                   =  13 , /*!<  ;Timer TM10                                           */
N    TM1x_IRQn                   =  14 , /*!<  ;Timer TM16 ... global Interrupt                      */
N    TM20_IRQn                   =  15 , /*!<  ;Timer TM20                                           */
N    TM2x_IRQn                   =  16 , /*!<  ;Timer TM26 ... global Interrupt                      */
N    TM3x_IRQn                   =  17 , /*!<  ;Timer TM3x global Interrupt                          */
N    URT0_IRQn                   =  20 , /*!<  ;UART URT0                                            */
N    URT123_IRQn                 =  21 , /*!<  ;UART URT1/2/3 global Interrupt                       */
N    URT4x_IRQn                  =  22 , /*!<  ;UART URT4/5/6/7 global Interrupt                     */
N    SPI0_IRQn                   =  24 , /*!<  ;SPI0                                                 */
N    I2C0_IRQn                   =  28 , /*!<  ;I2C0                                                 */
N    I2Cx_IRQn                   =  29 , /*!<  ;I2C1 ... global Interrupt                            */
N    USB_IRQn                    =  30 , /*!<  ;USB                                                  */
N    APX_IRQn                    =  31 , /*!<  ;APX                                                  */
N} IRQn_Type;                    /*!< Interrupt Number Definition */
N
N
N#include "core_cm0.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\core_cm0.h" 1
N/**************************************************************************//**
N * @file     core_cm0.h
N * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
N * @version  V5.0.8
N * @date     21. August 2019
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S  #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__clang__)
X#elif 0L
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM0_H_GENERIC
N#define __CORE_CM0_H_GENERIC
N
N#include <stdint.h>
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex_M0
N  @{
N */
N
N#include "cmsis_version.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\cmsis_version.h" 1
N/**************************************************************************//**
N * @file     cmsis_version.h
N * @brief    CMSIS Core(M) Version definitions
N * @version  V5.0.4
N * @date     23. July 2019
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2019 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S  #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__clang__)
X#elif 0L
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CMSIS_VERSION_H
N#define __CMSIS_VERSION_H
N
N/*  CMSIS Version definitions */
N#define __CM_CMSIS_VERSION_MAIN  ( 5U)                                      /*!< [31:16] CMSIS Core(M) main version */
N#define __CM_CMSIS_VERSION_SUB   ( 4U)                                      /*!< [15:0]  CMSIS Core(M) sub version */
N#define __CM_CMSIS_VERSION       ((__CM_CMSIS_VERSION_MAIN << 16U) | \
N                                   __CM_CMSIS_VERSION_SUB           )       /*!< CMSIS Core(M) version number */
X#define __CM_CMSIS_VERSION       ((__CM_CMSIS_VERSION_MAIN << 16U) |                                    __CM_CMSIS_VERSION_SUB           )        
N#endif
L 64 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\core_cm0.h" 2
N 
N/*  CMSIS CM0 definitions */
N#define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] CMSIS HAL main version */
N#define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  CMSIS HAL sub version */
N#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
N                                    __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL version number */
X#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) |                                     __CM0_CMSIS_VERSION_SUB           )   
N
N#define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    This core does not support an FPU at all
N*/
N#define __FPU_USED       0U
N
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 0L
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
N  #endif
N
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_FP
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TI_ARM__ )
S  #if defined __TI_VFP_SUPPORT__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
N#endif
N
N#include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\cmsis_compiler.h" 1
N/**************************************************************************//**
N * @file     cmsis_compiler.h
N * @brief    CMSIS compiler generic header file
N * @version  V5.1.0
N * @date     09. October 2018
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_COMPILER_H
N#define __CMSIS_COMPILER_H
N
N#include <stdint.h>
N
N/*
N * Arm Compiler 4/5
N */
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS compiler ARMCC (Arm Compiler 5) header file
N * @version  V5.2.1
N * @date     26. March 2020
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2020 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060960 < 400677)
S  #error "Please use Arm Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* CMSIS compiler control architecture macros */
N#if ((defined (__TARGET_ARCH_6_M  ) && (__TARGET_ARCH_6_M   == 1)) || \
N     (defined (__TARGET_ARCH_6S_M ) && (__TARGET_ARCH_6S_M  == 1))   )
X#if ((0L && (__TARGET_ARCH_6_M   == 1)) ||      (1L && (1  == 1))   )
N  #define __ARM_ARCH_6M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7_M ) && (__TARGET_ARCH_7_M  == 1))
X#if (0L && (__TARGET_ARCH_7_M  == 1))
S  #define __ARM_ARCH_7M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7E_M) && (__TARGET_ARCH_7E_M == 1))
X#if (0L && (__TARGET_ARCH_7E_M == 1))
S  #define __ARM_ARCH_7EM__          1
N#endif
N
N  /* __ARM_ARCH_8M_BASE__  not applicable */
N  /* __ARM_ARCH_8M_MAIN__  not applicable */
N  /* __ARM_ARCH_8_1M_MAIN__  not applicable */
N
N/* CMSIS compiler control DSP macros */
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S  #define __ARM_FEATURE_DSP         1
N#endif
N
N/* CMSIS compiler specific defines */
N#ifndef   __ASM
N  #define __ASM                                  __asm
N#endif
N#ifndef   __INLINE
N  #define __INLINE                               __inline
N#endif
N#ifndef   __STATIC_INLINE
N  #define __STATIC_INLINE                        static __inline
N#endif
N#ifndef   __STATIC_FORCEINLINE                 
N  #define __STATIC_FORCEINLINE                   static __forceinline
N#endif           
N#ifndef   __NO_RETURN
N  #define __NO_RETURN                            __declspec(noreturn)
N#endif
N#ifndef   __USED
N  #define __USED                                 __attribute__((used))
N#endif
N#ifndef   __WEAK
N  #define __WEAK                                 __attribute__((weak))
N#endif
N#ifndef   __PACKED
N  #define __PACKED                               __attribute__((packed))
N#endif
N#ifndef   __PACKED_STRUCT
N  #define __PACKED_STRUCT                        __packed struct
N#endif
N#ifndef   __PACKED_UNION
N  #define __PACKED_UNION                         __packed union
N#endif
N#ifndef   __UNALIGNED_UINT32        /* deprecated */
N  #define __UNALIGNED_UINT32(x)                  (*((__packed uint32_t *)(x)))
N#endif
N#ifndef   __UNALIGNED_UINT16_WRITE
N  #define __UNALIGNED_UINT16_WRITE(addr, val)    ((*((__packed uint16_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT16_READ
N  #define __UNALIGNED_UINT16_READ(addr)          (*((const __packed uint16_t *)(addr)))
N#endif
N#ifndef   __UNALIGNED_UINT32_WRITE
N  #define __UNALIGNED_UINT32_WRITE(addr, val)    ((*((__packed uint32_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT32_READ
N  #define __UNALIGNED_UINT32_READ(addr)          (*((const __packed uint32_t *)(addr)))
N#endif
N#ifndef   __ALIGNED
N  #define __ALIGNED(x)                           __attribute__((aligned(x)))
N#endif
N#ifndef   __RESTRICT
N  #define __RESTRICT                             __restrict
N#endif
N#ifndef   __COMPILER_BARRIER
N  #define __COMPILER_BARRIER()                   __memory_changed()
N#endif
N
N/* #########################  Startup and Lowlevel Init  ######################## */
N
N#ifndef __PROGRAM_START
N#define __PROGRAM_START           __main
N#endif
N
N#ifndef __INITIAL_SP
N#define __INITIAL_SP              Image$$ARM_LIB_STACK$$ZI$$Limit
N#endif
N
N#ifndef __STACK_LIMIT
N#define __STACK_LIMIT             Image$$ARM_LIB_STACK$$ZI$$Base
N#endif
N
N#ifndef __VECTOR_TABLE
N#define __VECTOR_TABLE            __Vectors
N#endif
N
N#ifndef __VECTOR_TABLE_ATTRIBUTE
N#define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section("RESET")))
N#endif
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/**
N  \brief   Enable IRQ Interrupts
N  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __enable_irq();     */
N
N
N/**
N  \brief   Disable IRQ Interrupts
N  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Enable FIQ
S  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __enable_fault_irq                __enable_fiq
S
S
S/**
S  \brief   Disable FIQ
S  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __disable_fault_irq               __disable_fiq
S
S
S/**
S  \brief   Get Base Priority
S  \details Returns the current value of the Base Priority register.
S  \return               Base Priority register value
S */
S__STATIC_INLINE uint32_t  __get_BASEPRI(void)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  return(__regBasePri);
S}
S
S
S/**
S  \brief   Set Base Priority
S  \details Assigns the given value to the Base Priority register.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  __regBasePri = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Set Base Priority with condition
S  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
S           or the new value increases the BASEPRI priority level.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
S{
S  register uint32_t __regBasePriMax      __ASM("basepri_max");
S  __regBasePriMax = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Get Fault Mask
S  \details Returns the current value of the Fault Mask register.
S  \return               Fault Mask register value
S */
S__STATIC_INLINE uint32_t __get_FAULTMASK(void)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  return(__regFaultMask);
S}
S
S
S/**
S  \brief   Set Fault Mask
S  \details Assigns the given value to the Fault Mask register.
S  \param [in]    faultMask  Fault Mask value to set
S */
S__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  __regFaultMask = (faultMask & (uint32_t)1U);
S}
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N
N/**
N  \brief   Get FPSCR
N  \details Returns the current value of the Floating Point Status/Control register.
N  \return               Floating Point Status/Control register value
N */
N__STATIC_INLINE uint32_t __get_FPSCR(void)
Xstatic __inline uint32_t __get_FPSCR(void)
N{
N#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
N     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((0L && (__FPU_PRESENT == 1U)) &&      (1L && (0U    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
N#else
N   return(0U);
N#endif
N}
N
N
N/**
N  \brief   Set FPSCR
N  \details Assigns the given value to the Floating Point Status/Control register.
N  \param [in]    fpscr  Floating Point Status/Control value to set
N */
N__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
Xstatic __inline void __set_FPSCR(uint32_t fpscr)
N{
N#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
N     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((0L && (__FPU_PRESENT == 1U)) &&      (1L && (0U    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
N#else
N  (void)fpscr;
N#endif
N}
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB()                           __isb(0xF)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB()                           __dsb(0xF)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB()                           __dmb(0xF)
N
N                  
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x78563412.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 0x34127856.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For example, 0x0080 becomes 0x8000.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int16_t __REVSH(int16_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int16_t __REVSH(int16_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    op1  Value to rotate
N  \param [in]    op2  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S  #define __RBIT                          __rbit
N#else
N__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
X__attribute__((always_inline)) static __inline uint32_t __RBIT(uint32_t value)
N{
N  uint32_t result;
N  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
N
N  result = value;                      /* r will be reversed bits of v; first get LSB of v */
N  for (value >>= 1U; value != 0U; value >>= 1U)
N  {
N    result <<= 1U;
N    result |= value & 1U;
N    s--;
N  }
N  result <<= s;                        /* shift when v's highest bits are zero */
N  return result;
N}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   LDR Exclusive (8 bit)
S  \details Executes a exclusive LDR instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
S#else
S  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (16 bit)
S  \details Executes a exclusive LDR instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
S#else
S  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (32 bit)
S  \details Executes a exclusive LDR instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
S#else
S  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (8 bit)
S  \details Executes a exclusive STR instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (16 bit)
S  \details Executes a exclusive STR instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (32 bit)
S  \details Executes a exclusive STR instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   Remove the exclusive lock
S  \details Removes the exclusive lock which is created by LDREX.
S */
S#define __CLREX                           __clrex
S
S
S/**
S  \brief   Signed Saturate
S  \details Saturates a signed value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (1..32)
S  \return             Saturated value
S */
S#define __SSAT                            __ssat
S
S
S/**
S  \brief   Unsigned Saturate
S  \details Saturates an unsigned value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (0..31)
S  \return             Saturated value
S */
S#define __USAT                            __usat
S
S
S/**
S  \brief   Rotate Right with Extend (32 bit)
S  \details Moves each bit of a bitstring right by one bit.
S           The carry input is shifted in at the left end of the bitstring.
S  \param [in]    value  Value to rotate
S  \return               Rotated value
S */
S#ifndef __NO_EMBEDDED_ASM
S__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
S{
S  rrx r0, r0
S  bx lr
S}
S#endif
S
S
S/**
S  \brief   LDRT Unprivileged (8 bit)
S  \details Executes a Unprivileged LDRT instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (16 bit)
S  \details Executes a Unprivileged LDRT instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (32 bit)
S  \details Executes a Unprivileged LDRT instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
S
S
S/**
S  \brief   STRT Unprivileged (8 bit)
S  \details Executes a Unprivileged STRT instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRBT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (16 bit)
S  \details Executes a Unprivileged STRT instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRHT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (32 bit)
S  \details Executes a Unprivileged STRT instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRT(value, ptr)                __strt(value, ptr)
S
N#else  /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#else   
N
N/**
N  \brief   Signed Saturate
N  \details Saturates a signed value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (1..32)
N  \return             Saturated value
N */
N__attribute__((always_inline)) __STATIC_INLINE int32_t __SSAT(int32_t val, uint32_t sat)
X__attribute__((always_inline)) static __inline int32_t __SSAT(int32_t val, uint32_t sat)
N{
N  if ((sat >= 1U) && (sat <= 32U))
N  {
N    const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
N    const int32_t min = -1 - max ;
N    if (val > max)
N    {
N      return max;
N    }
N    else if (val < min)
N    {
N      return min;
N    }
N  }
N  return val;
N}
N
N/**
N  \brief   Unsigned Saturate
N  \details Saturates an unsigned value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (0..31)
N  \return             Saturated value
N */
N__attribute__((always_inline)) __STATIC_INLINE uint32_t __USAT(int32_t val, uint32_t sat)
X__attribute__((always_inline)) static __inline uint32_t __USAT(int32_t val, uint32_t sat)
N{
N  if (sat <= 31U)
N  {
N    const uint32_t max = ((1U << sat) - 1U);
N    if (val > (int32_t)max)
N    {
N      return max;
N    }
N    else if (val < 0)
N    {
N      return 0U;
N    }
N  }
N  return (uint32_t)val;
N}
N
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S#define __SADD8                           __sadd8
S#define __QADD8                           __qadd8
S#define __SHADD8                          __shadd8
S#define __UADD8                           __uadd8
S#define __UQADD8                          __uqadd8
S#define __UHADD8                          __uhadd8
S#define __SSUB8                           __ssub8
S#define __QSUB8                           __qsub8
S#define __SHSUB8                          __shsub8
S#define __USUB8                           __usub8
S#define __UQSUB8                          __uqsub8
S#define __UHSUB8                          __uhsub8
S#define __SADD16                          __sadd16
S#define __QADD16                          __qadd16
S#define __SHADD16                         __shadd16
S#define __UADD16                          __uadd16
S#define __UQADD16                         __uqadd16
S#define __UHADD16                         __uhadd16
S#define __SSUB16                          __ssub16
S#define __QSUB16                          __qsub16
S#define __SHSUB16                         __shsub16
S#define __USUB16                          __usub16
S#define __UQSUB16                         __uqsub16
S#define __UHSUB16                         __uhsub16
S#define __SASX                            __sasx
S#define __QASX                            __qasx
S#define __SHASX                           __shasx
S#define __UASX                            __uasx
S#define __UQASX                           __uqasx
S#define __UHASX                           __uhasx
S#define __SSAX                            __ssax
S#define __QSAX                            __qsax
S#define __SHSAX                           __shsax
S#define __USAX                            __usax
S#define __UQSAX                           __uqsax
S#define __UHSAX                           __uhsax
S#define __USAD8                           __usad8
S#define __USADA8                          __usada8
S#define __SSAT16                          __ssat16
S#define __USAT16                          __usat16
S#define __UXTB16                          __uxtb16
S#define __UXTAB16                         __uxtab16
S#define __SXTB16                          __sxtb16
S#define __SXTAB16                         __sxtab16
S#define __SMUAD                           __smuad
S#define __SMUADX                          __smuadx
S#define __SMLAD                           __smlad
S#define __SMLADX                          __smladx
S#define __SMLALD                          __smlald
S#define __SMLALDX                         __smlaldx
S#define __SMUSD                           __smusd
S#define __SMUSDX                          __smusdx
S#define __SMLSD                           __smlsd
S#define __SMLSDX                          __smlsdx
S#define __SMLSLD                          __smlsld
S#define __SMLSLDX                         __smlsldx
S#define __SEL                             __sel
S#define __QADD                            __qadd
S#define __QSUB                            __qsub
S
S#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
S                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
S
S#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
S                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
S
S#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
S                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
S
S#define __SXTB16_RORn(ARG1, ARG2)        __SXTB16(__ROR(ARG1, ARG2))
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 35 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\cmsis_compiler.h" 2
N
N
N/*
N * Arm Compiler 6.6 LTM (armclang)
N */
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050) && (__ARMCC_VERSION < 6100100)
S  #include "cmsis_armclang_ltm.h"
S
S  /*
S * Arm Compiler above 6.10.1 (armclang)
S */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6100100)
S  #include "cmsis_armclang.h"
S
S
S/*
S * GNU Compiler
S */
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S
S/*
S * IAR Compiler
S */
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iccarm.h>
S
S
S/*
S * TI Arm Compiler
S */
S#elif defined ( __TI_ARM__ )
S  #include <cmsis_ccs.h>
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __attribute__((packed))
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __attribute__((packed)) T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void*)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)                           __attribute__((aligned(x)))
S  #endif
S  #ifndef   __RESTRICT
S    #define __RESTRICT                             __restrict
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S/*
S * TASKING Compiler
S */
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __packed__
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __packed__
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __packed__
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __packed__ T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __align(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S/*
S * COSMIC Compiler
S */
S#elif defined ( __CSMC__ )
S   #include <cmsis_csm.h>
S
S #ifndef   __ASM
S    #define __ASM                                  _asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    // NO RETURN is automatically detected hence no warning here
S    #define __NO_RETURN
S  #endif
S  #ifndef   __USED
S    #warning No compiler specific solution for __USED. __USED is ignored.
S    #define __USED
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __weak
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               @packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        @packed struct
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         @packed union
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    @packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S#else
S  #error Unknown compiler.
N#endif
N
N
N#endif /* __CMSIS_COMPILER_H */
N
L 116 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\core_cm0.h" 2
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM0_H_DEPENDANT
N#define __CORE_CM0_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM0_REV
S    #define __CM0_REV               0x0000U
S    #warning "__CM0_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          2U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex_M0 */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
N    uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[1U];                
N        uint32_t RESERVED0[31U];
N  __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[1U];                
N        uint32_t RESERVED1[31U];
N  __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[1U];                
N        uint32_t RESERVED2[31U];
N  __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[1U];                
N        uint32_t RESERVED3[31U];
N        uint32_t RESERVED4[64U];
N  __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
X  volatile uint32_t IP[8U];                  
N}  NVIC_Type;
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N        uint32_t RESERVED0;
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N        uint32_t RESERVED1;
N  __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED */
X  volatile uint32_t SHP[2U];                 
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible over DAP and not via processor.
N            Therefore they are not covered by the Cortex-M0 header file.
N  @{
N */
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Core Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N#ifdef CMSIS_NVIC_VIRTUAL
S  #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
S    #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
S  #endif
S  #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
N#else
N  #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
N  #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
N  #define NVIC_EnableIRQ              __NVIC_EnableIRQ
N  #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
N  #define NVIC_DisableIRQ             __NVIC_DisableIRQ
N  #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
N  #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
N  #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
N/*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
N  #define NVIC_SetPriority            __NVIC_SetPriority
N  #define NVIC_GetPriority            __NVIC_GetPriority
N  #define NVIC_SystemReset            __NVIC_SystemReset
N#endif /* CMSIS_NVIC_VIRTUAL */
N
N#ifdef CMSIS_VECTAB_VIRTUAL
S  #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
S    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
S  #endif
S  #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
N#else
N  #define NVIC_SetVector              __NVIC_SetVector
N  #define NVIC_GetVector              __NVIC_GetVector
N#endif  /* (CMSIS_VECTAB_VIRTUAL) */
N
N#define NVIC_USER_IRQ_OFFSET          16
N
N
N/* The following EXC_RETURN values are saved the LR on exception entry */
N#define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */
N#define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */
N#define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */
N
N
N/* Interrupt Priorities are WORD accessible only under Armv6-M                  */
N/* The following MACROS handle generation of the register offset and byte masks */
N#define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
N#define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
N#define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
N
N#define __NVIC_SetPriorityGrouping(X) (void)(X)
N#define __NVIC_GetPriorityGrouping()  (0U)
N
N/**
N  \brief   Enable Interrupt
N  \details Enables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    __COMPILER_BARRIER();
X    __memory_changed();
N    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
N    __COMPILER_BARRIER();
X    __memory_changed();
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Enable status
N  \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt is not enabled.
N  \return             1  Interrupt is enabled.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Disable Interrupt
N  \details Disables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
N    __DSB();
X    __dsb(0xF);
N    __ISB();
X    __isb(0xF);
N  }
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the NVIC pending register and returns the pending bit for the specified device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N  \note    The priority cannot be set for every processor exception.
N */
N__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  = ((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N  else
N  {
N    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] = ((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[ ( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N  else
N  {
N    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N}
N
N
N/**
N  \brief   Encode Priority
N  \details Encodes the priority for an interrupt with the given priority group,
N           preemptive priority value, and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]     PriorityGroup  Used priority group.
N  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
N  \param [in]       SubPriority  Subpriority value (starting from 0).
N  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
N */
N__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(2)) ? (uint32_t)(2) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(2)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(2));
N
N  return (
N           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
N           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
N         );
N}
N
N
N/**
N  \brief   Decode Priority
N  \details Decodes an interrupt priority value with a given priority group to
N           preemptive priority value and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
N  \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC_GetPriority().
N  \param [in]     PriorityGroup  Used priority group.
N  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
N  \param [out]     pSubPriority  Subpriority value (starting from 0).
N */
N__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
Xstatic __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(2)) ? (uint32_t)(2) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(2)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(2));
N
N  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
N  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
N}
N
N
N
N/**
N  \brief   Set Interrupt Vector
N  \details Sets an interrupt vector in SRAM based interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N           Address 0 must be mapped to SRAM.
N  \param [in]   IRQn      Interrupt number
N  \param [in]   vector    Address of interrupt handler function
N */
N__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
Xstatic __inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
N{
N  uint32_t *vectors = (uint32_t *)(NVIC_USER_IRQ_OFFSET << 2);      /* point to 1st user interrupt */
X  uint32_t *vectors = (uint32_t *)(16 << 2);       
N  *(vectors + (int32_t)IRQn) = vector;                              /* use pointer arithmetic to access vector */
N  /* ARM Application Note 321 states that the M0 does not require the architectural barrier */
N}
N
N
N/**
N  \brief   Get Interrupt Vector
N  \details Reads an interrupt vector from interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn      Interrupt number.
N  \return                 Address of interrupt handler function
N */
N__STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
N{
N  uint32_t *vectors = (uint32_t *)(NVIC_USER_IRQ_OFFSET << 2);      /* point to 1st user interrupt */
X  uint32_t *vectors = (uint32_t *)(16 << 2);       
N  return *(vectors + (int32_t)IRQn);                                /* use pointer arithmetic to access vector */
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
X__declspec(noreturn) static __inline void __NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  __dsb(0xF);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FAUL << 16U) |
N                 SCB_AIRCR_SYSRESETREQ_Msk);
X                 (1UL << 2U));
N  __DSB();                                                          /* Ensure completion of memory access */
X  __dsb(0xF);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N/* ##########################  FPU functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_FpuFunctions FPU Functions
N  \brief    Function that provides FPU type.
N  @{
N */
N
N/**
N  \brief   get FPU type
N  \details returns the FPU type
N  \returns
N   - \b  0: No FPU
N   - \b  1: Single precision FPU
N   - \b  2: Double + Single precision FPU
N */
N__STATIC_INLINE uint32_t SCB_GetFPUType(void)
Xstatic __inline uint32_t SCB_GetFPUType(void)
N{
N    return 0U;           /* No FPU */
N}
N
N
N/*@} end of CMSIS_Core_FpuFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
X#if 1L && (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  __NVIC_SetPriority (SysTick_IRQn, (1UL << 2) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 107 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z.h" 2
N#include <stdint.h>
N
N/**
N *************************************************
N *  New type definitions
N *************************************************
N */
Ntypedef signed char boolean;		/*!< Boolean	*/
Ntypedef unsigned char byte;			/*!< Byte		*/
N//typedef signed char int8;
N//typedef signed char sint8;
N//typedef unsigned char uint8;
N//typedef signed short int16;
N//typedef signed short sint16;
N//typedef unsigned short uint16;
N//typedef signed int int16;
N//typedef signed int sint16;
N//typedef unsigned int uint16;
N//typedef signed long int32;
N//typedef signed long sint32;
N//typedef unsigned long uint32;
Ntypedef unsigned long long uint64;	/*!< Uint 64-bit	*/
Ntypedef float float32;				/*!< Float 32-bit	*/
Ntypedef double float64;				/*!< Float 64-bit	*/
N
N/**
N *************************************************
N *  @union		ctype
N *				Combined 32/16/8-bit type
N *************************************************
N */
Ntypedef union
N{								
N	__IO uint8_t    B[4];			/*!< Byte 8-bit 		*/
X	volatile uint8_t    B[4];			 
N	__IO uint16_t   H[2];			/*!< Half-Word 16-bit 	*/
X	volatile uint16_t   H[2];			 
N	__IO uint32_t   W;				/*!< Word 32-bit 		*/
X	volatile uint32_t   W;				 
N} ctype;
N
N
N/**
N *************************************************
N *  General definitions
N *************************************************
N */
N//#define     __I     volatile                /*!< defines 'read only' permissions		*/
N//#define     __O     volatile                /*!< defines 'write only' permissions		*/
N//#define     __IO    volatile                /*!< defines 'read / write' permissions	*/
N
N#define TRUE		1				/*!< True	*/
N#define FALSE		0				/*!< False	*/
N
N//#define ENABLE		1
N//#define DISABLE		0
N
N#define MASK8(val)  (((val) < 256) ? (val) : (val) < 65536 ? (val) >> 8 : (val) < 16777216 ?  (val) >> 16 : (val) >> 24)	/*!< Mask 8-bit		*/  
N#define MASK16(val)  (((val) < 65536) ? (val) : (val)>> 16) 																/*!< Mask 16-bit	*/
N
N/**
N ******************************************************************************
N * @enum        FunctionalState
N *              Enable/Disable
N ******************************************************************************
N */
Ntypedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;										/*!< Enable/Disable	*/
N/**
N ******************************************************************************
N * @enum        FlagStatus
N *              Clear/Se
N ******************************************************************************
N */
Ntypedef enum {CLR = 0, SET = !CLR} FlagStatus ,BitAction;											/*!< Clear/Set	*/
N/**
N ******************************************************************************
N * @enum        ITStatus
N *              None/Happened/Stable/Unstable
N ******************************************************************************
N */
Ntypedef enum {NONE = 0,  HAPPENED = !NONE, UNSTABLE = 0, STABLE = !UNSTABLE} ITStatus, CSCStatus;	/*!< None/Happened/Stable/Unstablee	*/       
N
N
N/**
N *************************************************
N *  Hardware Access
N *************************************************
N */
N 
N///**
N// * @brief  get register value
N// * @param  _reg : definitions of register name, like MODULE_REGNAME
N// */
N//#define HW_ReadReg(_reg)             (_reg)											/*!< Hardware Read Register */
N
N///**
N// * @brief  set register value
N// * @param  _reg : definitions of register name, like MODULE_REGNAME
N// * @param  _value : definitions of register value, like MODULE_REGNAME_xyz
N// */
N//#define HW_WriteReg(_reg, _value)     _reg = (_value)								/*!< Hardware Write Register */
N
N///**
N// * @brief  set register bits value =1
N// * @param  _reg : definitions of register name, like MODULE_REGNAME
N// * @param  _mask : definitions of register mask value, like MODULE_REGNAME_mask
N// */
N//#define HW_SetBit(_reg, _mask)		HW_WriteReg(_reg, (HW_ReadReg(_reg) | (_mask))) /*!< Hardware Set Register Bit */
N
N///**
N// * @brief  set register bits value =0
N// * @param  _reg : definitions of register name, like MODULE_REGNAME
N// * @param  _mask : definitions of register mask value, like MODULE_REGNAME_mask
N// */
N//#define HW_ClrBit(_reg, _mask)		HW_WriteReg(_reg, (HW_ReadReg(_reg) & ~(_mask)))    /*!< Hardware Clear Register Bit */
N
N/**
N * @brief  get register bit value
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  BIT : definitions of register mask value, like MODULE_REGNAME_mask
N */
N#define READ_BIT(REG, BIT)    ((REG) & (BIT))
N
N/**
N * @brief  clear register, value = 0
N * @param  REG : definitions of register name, like MODULE_REGNAME
N */
N#define CLEAR_REG(REG)        ((REG) = (0x0))                                       /*!< Hardware Clear Register */
N
N/**
N * @brief  set register value
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  VAL : definitions of register value, like MODULE_REGNAME_xyz
N */
N#define WRITE_REG(REG, VAL)   ((REG) = (VAL))                                       /*!< Hardware Write Register */
N
N/**
N * @brief  get register value
N * @param  REG : definitions of register name, like MODULE_REGNAME
N */
N#define READ_REG(REG)         ((REG))                                               /*!< Hardware Write Register */
N
N/**
N * @brief  set register bits value =1
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  BIT : definitions of register mask value, like MODULE_REGNAME_mask
N */
N#define SET_BIT(REG, BIT)     ((REG) |= (BIT))                                      /*!< Hardware Set Register Bit */
N
N/**
N * @brief  set register bits value =0
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  BIT : definitions of register mask value, like MODULE_REGNAME_mask
N */
N#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))                                     /*!< Hardware Clear Register Bit */
N
N/**
N * @brief  set register bits value =1
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  CLEARMASK : definitions of register mask value, like MODULE_REGNAME_mask
N * @param  SETMASK : definitions of register mask value, like MODULE_REGNAME_mask
N */
N#define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))  /*!< Hardware Register Modify */
N
N/**
N ******************************************************************************
N *
N *              Header Files Include
N *
N ******************************************************************************
N */
N//#include "MG32x02z__RegPointer.h"
N//#include "MG32x02z__RegAddress.h"
N//#include "MG32x02z_GPIO.h"
N//#include "MG32x02z_GPL.h"
N//#include "MG32x02z_DMA.h"
N//#include "MG32x02z_RST.h"
N//#include "MG32x02z_CSC.h"
N//#include "MG32x02z_PW.h"
N//#include "MG32x02z_SYS.h"
N//#include "MG32x02z_MEM.h"
N//#include "MG32x02z_EMB.h"
N//#include "MG32x02z_CFG.h"
N//#include "MG32x02z_EXIC.h"
N//#include "MG32x02z_I2C.h"
N//#include "MG32x02z_URT.h"
N//#include "MG32x02z_SPI.h"
N//#include "MG32x02z_TM.h"
N//#include "MG32x02z_ADC.h"
N//#include "MG32x02z_CMP.h"
N//#include "MG32x02z_DAC.h"
N//#include "MG32x02z_IWDT.h"
N//#include "MG32x02z_WWDT.h"
N//#include "MG32x02z_RTC.h"
N//#include "MG32x02z_APB.h"
N//#include "MG32x02z_CPU.h"
N
N#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050) /* ARM Compiler V6 */
X#if 1L && (5060960 >= 6010050)  
S  #ifndef __weak
S    #define __weak  __attribute__((weak))
S  #endif
S  #ifndef __packed
S    #define __packed  __attribute__((packed))
S  #endif
S#elif defined ( __GNUC__ ) && !defined (__CC_ARM) /* GNU Compiler */
X#elif 0L && !1L  
S  #ifndef __weak
S    #define __weak   __attribute__((weak))
S  #endif /* __weak */
S  #ifndef __packed
S    #define __packed __attribute__((__packed__))
S  #endif /* __packed */
N#endif /* __GNUC__ */
N
N/* Macro to get variable aligned on 4-bytes, for __ICCARM__ the directive "#pragma data_alignment=4" must be used instead */
N#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050) /* ARM Compiler V6 */
X#if 1L && (5060960 >= 6010050)  
S  #ifndef __ALIGN_BEGIN
S    #define __ALIGN_BEGIN
S  #endif
S  #ifndef __ALIGN_END
S    #define __ALIGN_END      __attribute__ ((aligned (4)))
S  #endif
S#elif defined ( __GNUC__ ) && !defined (__CC_ARM) /* GNU Compiler */
X#elif 0L && !1L  
S  #ifndef __ALIGN_END
S    #define __ALIGN_END    __attribute__ ((aligned (4)))
S  #endif /* __ALIGN_END */
S  #ifndef __ALIGN_BEGIN  
S    #define __ALIGN_BEGIN
S  #endif /* __ALIGN_BEGIN */
N#else
N  #ifndef __ALIGN_END
N    #define __ALIGN_END
N  #endif /* __ALIGN_END */
N  #ifndef __ALIGN_BEGIN      
N    #if defined   (__CC_ARM)      /* ARM Compiler V5*/
X    #if 1L       
N      #define __ALIGN_BEGIN    __align(4)  
N    #elif defined (__ICCARM__)    /* IAR Compiler */
S      #define __ALIGN_BEGIN 
N    #endif /* __CC_ARM */
N  #endif /* __ALIGN_BEGIN */
N#endif /* __GNUC__ */
N
N/** 
N  * @brief  __NOINLINE definition
N  */ 
N#if defined ( __CC_ARM   ) || (defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) || defined   (  __GNUC__  )
X#if 1L || (1L && (5060960 >= 6010050)) || 0L
N/* ARM V4/V5 and V6 & GNU Compiler
N   -------------------------------
N*/
N  #define __NOINLINE __attribute__ ( (noinline) )
N
N#elif defined ( __ICCARM__ )
S  /* ICCARM Compiler
S     ---------------
S  */
S  #define __NOINLINE _Pragma("optimize = no_inline")
S
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif  // _MG32x02z_H
N
N/*----------------------------------------------------------------------------*/
N/*                           End of file MG32x02z.h                           */
N/*----------------------------------------------------------------------------*/
L 44 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z__Common_DRV.h" 2
N
N
N
N     // Debug Configuration Setting
N#define MG_Debug	1				/*!< 0=Normal, 1=Debug for Test Chip    */
N
N
N/**
N * @enum		DRV_Return
N * @brief		General Driver return status
N */
Ntypedef enum 
N{
N    /* common status values */
N    DRV_Logic0 = 0,             /*!<                                    */
N    DRV_Logic1 = 1,             /*!< operation failed					*/
N    DRV_Low = 0,                /*!< operation failed					*/
N    DRV_High = 1,               /*!< operation failed					*/
N    DRV_Normal = 0,             /*!< operation failed					*/
N    DRV_UnHappened = 0,         /*!< operation failed					*/
N    DRV_Happened = 1,           /*!< operation failed					*/
N    DRV_Success = 0,            /*!< successful outcome					*/
N    DRV_Failure = 1,            /*!< operation failed					*/
N    DRV_False = 0,              /*!<                                    */
N    DRV_True = !DRV_False,      /*!<                                    */
N    DRV_Unready = 0,            /*!<                                    */
N    DRV_Ready = !DRV_Unready,   /*!<                                    */
N
N    /* For PW module */
N    PW_HighThreshold = 0,
N    PW_LowThreshold = 1,
N    PW_None = 0,
N    PW_Sleep = 1,
N    PW_Stop = 2,    
N
N    DRV_Completed,              /*!< operation failed					*/
N    DRV_TimeOut,                /*!< operation failed					*/
N    DRV_OverRange,
N    DRV_OutsideLow,
N    DRV_OutsideHigh,
N    DRV_Inside,
N    DRV_Busy,                   /*!<                                    */
N    DRV_OverFlow,               /*!<                                    */
N    DRV_UnderFlow,              /*!<                                    */
N//	DRV_ERR_INVALID_HANDLE,		/*!< invalid handle						*/
N//	DRV_ERR_INVALID_ID,			/*!< invalid identifier					*/
N//	DRV_ERR_INVALID_PARAM,		/*!< invalid parameter					*/
N//	DRV_ERR_INVALID_OP,			/*!< requested operation is invalid		*/
N//	DRV_ERR_MEMORY_ALLOC,		/*!< problem allocating memory			*/
N//	DRV_ERR_MEMORY_SIZE,		/*!< problem with the size of memory	*/
N//	DRV_ERR_RESOURCE_UNAVAILABLE,
N//	DRV_ERR_TIMEOUT,			/*!< timeout							*/
N//	DRV_ERR_MAX					/*!< Max error number*/
N
N//	DRV_WARN_NO_ACTION,			/* < the function completed successfully,*/
N	                                /* < but no action was taken            */
N//	DRV_WARN_PARAM_CLIPPED,		/*!< the function has completed			*/
N//									/*!< successfully, though a parameter was	*/
N//									/*!< clipped to within a valid range.		*/
N//	DRV_WARN_BUFFER_EMPTY,
N//	DRV_WARN_BUFFER_FULL,
N//	DRV_WARN_UNINITED,			/*!< driver has not been initialized yet */
N//	DRV_WARN_INITED,			/*!< driver has been initialized already */
N
N}DRV_Return;           /*!< Driver Return Status Definitions */
N
N
N
N/**
N * @enum		Protect_Type
N * @brief		TMx interrupt enable source  
N */
Ntypedef enum { 
N    RSTprotect = (uint32_t)0x4C00000C,
N    CSCprotect = (uint32_t)0x4C01000C,  
N    PWprotect = (uint32_t)0x4C02000C,
N    MEMprotect = (uint32_t)0x4D00000C,  
N    MEMsprotect = (uint32_t)0x4D00000E,
N    CFGprotect = (uint32_t)0x4FF0000C,
N    IWDTprotect = (uint32_t)0x5D00000C,  
N    WWDTprotect = (uint32_t)0x5D01000C,  
N    RTCprotect = (uint32_t)0x5D04000C,
N}Protect_Type;          /*!< Definitions for protection function */
N
N
N
N
N/**
N * @enum		Lock_Type
N * @brief		Lock Module. 
N */
Ntypedef enum{
N    RSTLock = (uint32_t)0x4C00000E,
N    IWDTLock = (uint32_t)0x5D00000E,  
N    RTCLock = (uint32_t)0x5D04000E,
N}Lock_Type;             /*!< Definitions for locked function */
N
N
N
N#if defined(IRQHandler_Middleware_Level_)
X#if 0L
S  #define InitTick(__TickClock__, __TickPriority__) MID_InitTick(__TickPriority__)
S  #define Delay         MID_Delay
S  #define GetTick       MID_GetTick
S  #define SuspendTick   MID_SuspendTick
S  #define ResumeTick    MID_ResumeTick
N#else
N  DRV_Return InitTick(uint32_t TickClock, uint32_t TickPriority);
N  void IncTick(void);
N  void Delay(__IO uint32_t DelayTime);
X  void Delay(volatile uint32_t DelayTime);
N  uint32_t GetTick(void);
N  void SuspendTick(void);
N  void ResumeTick(void);
N#endif
N
NDRV_Return ProtectModuleReg(Protect_Type Module);             /*!< Protect Module Register Write */
NDRV_Return UnProtectModuleReg(Protect_Type Module);           /*!< UnProtect Module Register Write */
NDRV_Return LockModuleReg(Lock_Type Module);                   /*!< Lock Module Register Write until Chip Reset */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
N
N
L 37 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z_EXIC_DRV.h" 2
N#include "MG32x02z__ExtraStruct.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z__ExtraStruct.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z__ExtraStruct.h
N *
N * @brief       MG32x02z Extra Structure Definition File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:42 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z__ExtraStruct_H
N#define _MG32x02z__ExtraStruct_H
N#define _MG32x02z__ExtraStruct_H_VER                3.9     /*!< File Version */
N
N/**
N ******************************************************************************
N *
N * @struct      DMAChannel_Struct
N *              DMAChannel  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  EN            :1;     //[0] DMA channel operation enable.
X            volatile uint8_t  EN            :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  HOLD          :1;     //[1] DMA channel operation hold enable
X            volatile uint8_t  HOLD          :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  LOOP          :1;     //[2] DMA destination or peripheral transfer address auto increased enable.
X            volatile uint8_t  LOOP          :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  ADSEL         :1;     //[3] DMA address increased mode select
X            volatile uint8_t  ADSEL         :1;     
N                                        //0 = Normal : sequential increment 1
N                                        //1 = SKIP3 : address increment from 0 to 1,2 then return 0
N            __I  uint8_t                :2;     //[5..4] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :1;     //[6] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  XMDS          :2;     //[9..8] DMA channel external pin trigger request mode select
X            volatile uint8_t  XMDS          :2;     
N                                        //0x0 = Disable : disable external request pin input
N                                        //0x1 = Single : single request mode
N                                        //0x2 = Block : block request mode
N                                        //0x3 = Demand : demand request mode(active high)
N            __IO uint8_t  PLS           :2;     //[11..10] DMA channel priority level select.
X            volatile uint8_t  PLS           :2;     
N                                        //0x0 = LV0 : lowest priority
N                                        //0x1 = LV1 : normal priority
N                                        //0x2 = LV2 : high priority
N                                        //0x3 = LV3 : highest priority
N            __IO uint8_t  BSIZE         :2;     //[13..12] DMA transfer burst size
X            volatile uint8_t  BSIZE         :2;     
N                                        //0x0 = One
N                                        //0x1 = Two
N                                        //0x2 = Reserved
N                                        //0x3 = Four
N            __I  uint8_t                :1;     //[14] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  REQ           :1;     //[15] DMA channel data transfer request enable
X            volatile uint8_t  REQ           :1;     
N                                        //0 = No : no effect
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[16] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CIE           :1;     //[17] DMA channel-x transfer complete interrupt enable.
X            volatile uint8_t  CIE           :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  HIE           :1;     //[18] DMA channel-x transfer half interrupt enable.
X            volatile uint8_t  HIE           :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  EIE           :1;     //[19] DMA channel-x transfer error interrupt enable.
X            volatile uint8_t  EIE           :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :4;     //[23..20] 
X            volatile const  uint8_t                :4;     
N            __I  uint8_t                :1;     //[24] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  TC2F          :1;     //[25] DMA channel-x transfer complete flag
X            volatile uint8_t  TC2F          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  TH2F          :1;     //[26] DMA channel-x transfer half flag
X            volatile uint8_t  TH2F          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  ERR2F         :1;     //[27] DMA channel-x transfer error flag
X            volatile uint8_t  ERR2F         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __I  uint8_t                :4;     //[31..28] 
X            volatile const  uint8_t                :4;     
N        }MBIT;
N    }A;                                 /*!< A          ~ Offset[0x20]  DMA channel-x control register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  SRC           :4;     //[3..0] DMA channel transfer peripheral source select
X            volatile uint8_t  SRC           :4;     
N            __I  uint8_t                :4;     //[7..4] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  DET           :4;     //[11..8] DMA channel transfer peripheral destination select
X            volatile uint8_t  DET           :4;     
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  SINC          :1;     //[16] DMA source or memory transfer address auto increased enable
X            volatile uint8_t  SINC          :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  DINC          :1;     //[17] DMA destination or peripheral transfer address auto increased enable
X            volatile uint8_t  DINC          :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SSYNC         :1;     //[18] DMA source process synchronization enable bit
X            volatile uint8_t  SSYNC         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  DSYNC         :1;     //[19] DMA destination process synchronization enable bit
X            volatile uint8_t  DSYNC         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[21..20] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :2;     //[23..22] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  XPIN          :1;     //[24] DMA channel external trigger pin select.
X            volatile uint8_t  XPIN          :1;     
N                                        //0x0 = TRG0 : DMA_TRG0 pin
N                                        //0x1 = TRG1 : DMA_TRG1 pin
N            __I  uint8_t                :7;     //[31..25] 
X            volatile const  uint8_t                :7;     
N        }MBIT;
N    }B;                                 /*!< B          ~ Offset[0x24]  DMA channel-x control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint16_t NUM           :16;    //[15..0] DMA transfer data count initial number
X            volatile uint16_t NUM           :16;    
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }NUM;                               /*!< NUM        ~ Offset[0x28]  DMA channel-x control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint16_t CNT           :16;    //[15..0] DMA transfer data count current value
X            volatile const  uint16_t CNT           :16;    
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CNT;                               /*!< CNT        ~ Offset[0x2C]  DMA channel-x control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t SSA           :32;    //[31..0] DMA source or memory transfer start address.
X            volatile uint32_t SSA           :32;    
N        }MBIT;
N    }SSA;                               /*!< SSA        ~ Offset[0x30]  DMA channel-x source start address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint32_t SCA           :32;    //[31..0] DMA source or memory transfer current address
X            volatile const  uint32_t SCA           :32;    
N        }MBIT;
N    }SCA;                               /*!< SCA        ~ Offset[0x34]  DMA channel-x source current address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t DSA           :32;    //[31..0] DMA destination or peripheral transfer start address.
X            volatile uint32_t DSA           :32;    
N        }MBIT;
N    }DSA;                               /*!< DSA        ~ Offset[0x38]  DMA channel-x destination start address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint32_t DCA           :32;    //[31..0] DMA destination or peripheral transfer current address
X            volatile const  uint32_t DCA           :32;    
N        }MBIT;
N    }DCA;                               /*!< DCA        ~ Offset[0x3C]  DMA channel-x destination current address register */
N
N} DMAChannel_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        DMAChannel  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define DMAChannel0_Base                ((uint32_t)0x4BF00020)              /*!< Direct Memory Access Channel Control */
N#define DMAChannel1_Base                ((uint32_t)0x4BF00040)              /*!< Direct Memory Access Channel Control */
N#define DMAChannel2_Base                ((uint32_t)0x4BF00060)              /*!< Direct Memory Access Channel Control */
N#define DMAChannel0                     ((DMAChannel_Struct*) DMAChannel0_Base)
N#define DMAChannel1                     ((DMAChannel_Struct*) DMAChannel1_Base)
N#define DMAChannel2                     ((DMAChannel_Struct*) DMAChannel2_Base)
N///@}
N/**
N ******************************************************************************
N *
N * @struct      CMPAC_Struct
N *              CMPAC  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  EN            :1;     //[0] Analog comparator CMPx power-on enable bit
X            volatile uint8_t  EN            :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[2] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  RES           :1;     //[3] CMPx compare response time select.
X            volatile uint8_t  RES           :1;     
N                                        //0x0 = 200ns 
N                                        //0x1 = 10us (5~10us)
N            __I  uint8_t                :2;     //[5..4] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  PMUX          :3;     //[10..8] CMPx Analog input positive channel selection.
X            volatile uint8_t  PMUX          :3;     
N                                        //0x0 =  IVREF
N                                        //0x1 = CMPx_I0
N                                        //0x2 = CMPx_I1
N                                        //0x3 = CMP_C0
N                                        //0x4 = CMP_C1
N                                        //0x5 = LDO_Core
N            __I  uint8_t                :1;     //[11] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  NMUX          :3;     //[14..12] CMPx Analog input negative channel selection.
X            volatile uint8_t  NMUX          :3;     
N                                        //0x0 =  IVREF
N                                        //0x1 = CMPx_I0
N                                        //0x2 = CMPx_I1
N                                        //0x3 = CMP_C0
N                                        //0x4 = CMP_C1
N                                        //0x5 = LDO_Core
N            __I  uint8_t                :1;     //[15] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  INV           :1;     //[16] CMPx analog comparator output signal polarity select.
X            volatile uint8_t  INV           :1;     
N                                        //0 = Positive
N                                        //1 = Negative
N            __IO uint8_t  PINV          :1;     //[17] CMPx output to pins' signal inverse enable.
X            volatile uint8_t  PINV          :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  FSEL          :2;     //[19..18] CMPx analog comparator output signal select with synchronized filter
X            volatile uint8_t  FSEL          :2;     
N                                        //0x0 = Bypass
N                                        //0x1 = CMP_CK : filter with CMP_CLK 
N                                        //0x2 = TM00_TRGO : filter with TM00_TRGO
N                                        //0x3 = TM01_TRGO : filter with TM01_TRGO
N            __IO uint8_t  FDIV          :2;     //[21..20] CMPx analog comparator output synchronized filter divider.
X            volatile uint8_t  FDIV          :2;     
N                                        //0x0 = DIV1 : divided by 1
N                                        //0x1 = DIV2 : divided by 2
N                                        //0x2 = DIV4 : divided by 4
N                                        //0x3 = DIV8 : divided by 8
N            __I  uint8_t                :2;     //[23..22] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :6;     //[29..24] 
X            volatile const  uint8_t                :6;     
N            __I  uint8_t                :2;     //[31..30] 
X            volatile const  uint8_t                :2;     
N        }MBIT;
N    }CR;                                /*!< CR         ~ Offset[0x10]  CMP Analog comparator-x control register */
N
N} CMPAC_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        CMPAC  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define CMPAC0_Base                     ((uint32_t)0x5C000010)              /*!< Analog Comparator Control */
N#define CMPAC1_Base                     ((uint32_t)0x5C000014)              /*!< Analog Comparator Control */
N#define CMPAC2_Base                     ((uint32_t)0x5C000018)              /*!< Analog Comparator Control */
N#define CMPAC3_Base                     ((uint32_t)0x5C00001C)              /*!< Analog Comparator Control */
N#define CMPAC0                          ((CMPAC_Struct*) CMPAC0_Base)
N#define CMPAC1                          ((CMPAC_Struct*) CMPAC1_Base)
N#define CMPAC2                          ((CMPAC_Struct*) CMPAC2_Base)
N#define CMPAC3                          ((CMPAC_Struct*) CMPAC3_Base)
N///@}
N/**
N ******************************************************************************
N *
N * @struct      OBM_Struct
N *              OBM  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  MDS           :2;     //[1..0] OBMx break operation mode select
X            volatile uint8_t  MDS           :2;     
N                                        //0x0 = AND : AND signal of all break channels' output
N                                        //0x1 = CLR : STA bit is cleared by falling edge of OR signal
N                                        //0x2 = SET : STA bit is set by falling edge of OR signal
N                                        //0x3 = TOGGLE : STA bit is toggle by falling edge of OR signal
N            __I  uint8_t                :2;     //[3..2] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  STA           :1;     //[4] OBMx break switching signal initial state
X            volatile uint8_t  STA           :1;     
N                                        //0 = 0 (Output 0)
N                                        //1 = 1 (Output 1)
N            __IO uint8_t  LCK           :1;     //[5] OBMx break switching signal initial state write control
X            volatile uint8_t  LCK           :1;     
N                                        //0 = Locked
N                                        //1 = Un-Locked
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  BKN0          :1;     //[8] OBMx break source-0 signal inverse enable bit.
X            volatile uint8_t  BKN0          :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __IO uint8_t  BKN1          :1;     //[9] OBMx break source-1 signal inverse enable bit.
X            volatile uint8_t  BKN1          :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __IO uint8_t  BKN2          :1;     //[10] OBMx break source-2 signal inverse enable bit.
X            volatile uint8_t  BKN2          :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __I  uint8_t                :5;     //[15..11] 
X            volatile const  uint8_t                :5;     
N            __IO uint8_t  BKS0          :4;     //[19..16] OBMx break signal source channel-0 select.
X            volatile uint8_t  BKS0          :4;     
N                                        //0x0 = BK0 : Output 1
N                                        //0x1 = BK1
N                                        //0x2 = BK2
N                                        //0x3 = BK3
N                                        //0x4 = BK4
N                                        //0x5 = BK5
N                                        //0x6 = BK6
N                                        //0x7 = BK7
N                                        //0x8 = BK8
N                                        //0x9 = BK9
N                                        //0xA = BK10
N                                        //0xB = BK11
N                                        //0xC = BK12
N                                        //0xD = BK13
N                                        //0xE = BK14
N                                        //0xF = BK15
N            __IO uint8_t  BKS1          :4;     //[23..20] OBMx break signal source channel-1 select.
X            volatile uint8_t  BKS1          :4;     
N                                        //0x0 = BK0 : Output 1
N                                        //0x1 = BK1
N                                        //0x2 = BK2
N                                        //0x3 = BK3
N                                        //0x4 = BK4
N                                        //0x5 = BK5
N                                        //0x6 = BK6
N                                        //0x7 = BK7
N                                        //0x8 = BK8
N                                        //0x9 = BK9
N                                        //0xA = BK10
N                                        //0xB = BK11
N                                        //0xC = BK12
N                                        //0xD = BK13
N                                        //0xE = BK14
N                                        //0xF = BK15
N            __IO uint8_t  BKS2          :4;     //[27..24] OBMx break signal source channel-2 select.
X            volatile uint8_t  BKS2          :4;     
N                                        //0x0 = BK0 : Output 1
N                                        //0x1 = BK1
N                                        //0x2 = BK2
N                                        //0x3 = BK3
N                                        //0x4 = BK4
N                                        //0x5 = BK5
N                                        //0x6 = BK6
N                                        //0x7 = BK7
N                                        //0x8 = BK8
N                                        //0x9 = BK9
N                                        //0xA = BK10
N                                        //0xB = BK11
N                                        //0xC = BK12
N                                        //0xD = BK13
N                                        //0xE = BK14
N                                        //0xF = BK15
N            __I  uint8_t                :4;     //[31..28] 
X            volatile const  uint8_t                :4;     
N        }MBIT;
N    }OBMx0;                             /*!< OBMx0      ~ Offset[0x20]  APB OBMx control register-0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  INV0          :1;     //[0] OBMx source channel-0 signal inverse enable bit.
X            volatile uint8_t  INV0          :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __IO uint8_t  INV1          :1;     //[1] OBMx source channel-1 signal inverse enable bit.
X            volatile uint8_t  INV1          :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __IO uint8_t  POL           :1;     //[2] OBMx output signal inverse enable bit.
X            volatile uint8_t  POL           :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  FCKS          :2;     //[5..4] OBMx output deglitch filter clock source select
X            volatile uint8_t  FCKS          :2;     
N                                        //0x0 = Disable
N                                        //0x1 = APB : CLK_APB
N                                        //0x2 = APB_DIV8 : CLK_APB divide by 8
N                                        //0x3 = TM00_TRGO
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __IO uint8_t  MUX0          :4;     //[19..16] OBMx output source channel-0 signal select.
X            volatile uint8_t  MUX0          :4;     
N                                        //0x0 = SR0 : Output 0
N                                        //0x1 = SR1
N                                        //0x2 = SR2
N                                        //0x3 = SR3
N                                        //0x4 = SR4
N                                        //0x5 = SR5
N                                        //0x6 = SR6
N                                        //0x7 = SR7
N                                        //0x8 = SR8
N                                        //0x9 = SR9
N                                        //0xA = SR10
N                                        //0xB = SR11
N                                        //0xC = SR12
N                                        //0xD = SR13
N                                        //0xE = SR14
N                                        //0xF = SR15
N            __IO uint8_t  MUX1          :4;     //[23..20] OBMx output source channel-1 signal select.
X            volatile uint8_t  MUX1          :4;     
N                                        //0x0 = SR0 : Output 0
N                                        //0x1 = SR1
N                                        //0x2 = SR2
N                                        //0x3 = SR3
N                                        //0x4 = SR4
N                                        //0x5 = SR5
N                                        //0x6 = SR6
N                                        //0x7 = SR7
N                                        //0x8 = SR8
N                                        //0x9 = SR9
N                                        //0xA = SR10
N                                        //0xB = SR11
N                                        //0xC = SR12
N                                        //0xD = SR13
N                                        //0xE = SR14
N                                        //0xF = SR15
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }OBMx1;                             /*!< OBMx1      ~ Offset[0x24]  APB OBMx control register-1 */
N
N} OBM_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        OBM  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define OBM0_Base                       ((uint32_t)0x5F000020)              /*!< APB OBM Control */
N#define OBM1_Base                       ((uint32_t)0x5F000028)              /*!< APB OBM Control */
N#define OBM0                            ((OBM_Struct*) OBM0_Base)
N#define OBM1                            ((OBM_Struct*) OBM1_Base)
N///@}
N
N/**
N ******************************************************************************
N *
N * @struct      EXIC_PX_Struct
N *              EXIC_PX  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PIN0_PF        :1;     /*!< [0] EXIC pin input interrupt pending flag x for external input interrupt pin of PX*/ 
X            volatile uint8_t  PIN0_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN1_PF        :1;     /*!< [1] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN1_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN2_PF        :1;     /*!< [2] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN2_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN3_PF        :1;     /*!< [3] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN3_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN4_PF        :1;     /*!< [4] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN4_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN5_PF        :1;     /*!< [5] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN5_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN6_PF        :1;     /*!< [6] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN6_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN7_PF        :1;     /*!< [7] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN7_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN8_PF        :1;     /*!< [8] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN8_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN9_PF        :1;     /*!< [9] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN9_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN10_PF       :1;     /*!< [10] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN10_PF       :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN11_PF       :1;     /*!< [11] Refer to EXIC_PX0_PF. */ 
X            volatile uint8_t  PIN11_PF       :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN12_PF       :1;     /*!< [12] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN12_PF       :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN13_PF       :1;     /*!< [13] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN13_PF       :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN14_PF       :1;     /*!< [14] Refer to EXIC_PX0_PF. */ 
X            volatile uint8_t  PIN14_PF       :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN15_PF       :1;     /*!< [15] Refer to EXIC_PX0_PF. */ 
X            volatile uint8_t  PIN15_PF       :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __I  uint16_t               :16;     /*!< [31..16] */ 
X            volatile const  uint16_t               :16;       
N        }MBIT;
N    }PF;                                        /*!< PX_PF      ~ Offset[0x20]  EXIC PX input interrupt pending flag register */                           
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PIN0_TRGS      :2;     /*!<[1..0] External interrupt pin edge/level trigger event select */ 
X            volatile uint8_t  PIN0_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN1_TRGS      :2;     /*!<[3..2] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN1_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN2_TRGS      :2;     /*!<[5..4] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN2_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN3_TRGS      :2;     /*!<[7..6] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN3_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN4_TRGS      :2;     /*!<[9..8] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN4_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN5_TRGS      :2;     /*!<[11..10] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN5_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN6_TRGS      :2;     /*!<[13..12] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN6_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN7_TRGS      :2;     /*!<[15..14] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN7_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN8_TRGS      :2;     /*!<[17..16] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN8_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN9_TRGS      :2;     /*!<[19..18] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN9_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN10_TRGS     :2;     /*!<[21..20] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN10_TRGS     :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN11_TRGS     :2;     /*!<[23..22] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN11_TRGS     :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN12_TRGS     :2;     /*!<[25..24] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN12_TRGS     :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN13_TRGS     :2;     /*!<[27..26] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN13_TRGS     :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN14_TRGS     :2;     /*!<[29..28] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN14_TRGS     :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN15_TRGS     :2;     /*!<[31..30] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN15_TRGS     :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N        }MBIT;
N    }TRGS;                                       /*!< PX_TRGS    ~ Offset[0x24]  EXIC PX Pad input trigger select register */        
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PIN0_OM        :1;    /*!<[0] External interrupt pin of PX OR mask bit x */
X            volatile uint8_t  PIN0_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN1_OM        :1;    /*!<[1] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN1_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN2_OM        :1;    /*!<[2] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN2_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN3_OM        :1;    /*!<[3] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN3_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN4_OM        :1;    /*!<[4] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN4_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN5_OM        :1;    /*!<[5] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN5_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN6_OM        :1;    /*!<[6] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN6_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN7_OM        :1;    /*!<[7] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN7_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN8_OM        :1;    /*!<[8] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN8_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN9_OM        :1;    /*!<[9] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN9_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN10_OM       :1;    /*!<[10] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN10_OM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN11_OM       :1;    /*!<[11] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN11_OM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN12_OM       :1;    /*!<[12] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN12_OM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN13_OM       :1;    /*!<[13] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN13_OM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN14_OM       :1;    /*!<[14] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN14_OM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN15_OM       :1;    /*!<[15] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN15_OM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN0_AM        :1;    /*!<[16] External interrupt pin of PX AND mask bit x */
X            volatile uint8_t  PIN0_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable  */
N            __IO uint8_t  PIN1_AM        :1;    /*!<[17] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN1_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN2_AM        :1;    /*!<[18] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN2_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN3_AM        :1;    /*!<[19] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN3_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN4_AM        :1;    /*!<[20] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN4_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN5_AM        :1;    /*!<[21] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN5_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN6_AM        :1;    /*!<[22] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN6_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN7_AM        :1;    /*!<[23] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN7_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN8_AM        :1;    /*!<[24] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN8_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN9_AM        :1;    /*!<[25] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN9_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN10_AM       :1;    /*!<[26] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN10_AM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN11_AM       :1;    /*!<[27] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN11_AM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN12_AM       :1;    /*!<[28] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN12_AM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN13_AM       :1;    /*!<[29] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN13_AM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN14_AM       :1;    /*!<[30] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN14_AM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN15_AM       :1;    /*!<[31] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN15_AM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable    */
N                                        
N        }MBIT;                                  
N    }MSK;                                       /*!< PX_MSK     ~ Offset[0x28]  EXIC PX AOI Mask register */
N}EXIC_PX_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        EXIC_PX  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define EXIC_PA_Base    ((uint32_t)(0x50000000+0x20))   /*!< EXIC PA Register Control Definitions base address*/
N#define EXIC_PB_Base    ((uint32_t)(0x50000000+0x30))   /*!< EXIC PB Register Control Definitions base address*/
N#define EXIC_PC_Base    ((uint32_t)(0x50000000+0x40))   /*!< EXIC PC Register Control Definitions bass address*/
N#define EXIC_PD_Base    ((uint32_t)(0x50000000+0x50))   /*!< EXIC PD Register Control Definitions bass address*/
N
N#define EXIC_PA         ((EXIC_PX_Struct*) EXIC_PA_Base)    /*!< EXIC PA Register Control Definitions */
N#define EXIC_PB         ((EXIC_PX_Struct*) EXIC_PB_Base)    /*!< EXIC PB Register Control Definitions */
N#define EXIC_PC         ((EXIC_PX_Struct*) EXIC_PC_Base)    /*!< EXIC PC Register Control Definitions */
N#define EXIC_PD         ((EXIC_PX_Struct*) EXIC_PD_Base)    /*!< EXIC PD Register Control Definitions */
N///@}
N
N
N#endif  // _MG32x02z__ExtraStruct_H
N
N/*----------------------------------------------------------------------------*/
N/*                    End of file MG32x02z__ExtraStruct.h                     */
N/*----------------------------------------------------------------------------*/
L 38 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z_EXIC_DRV.h" 2
N#include "MG32x02z_EXIC.h" 
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z_EXIC.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_EXIC.h
N *
N * @brief       MG32x02z EXIC Register Definitions Header File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:41 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z_EXIC_H
N#define _MG32x02z_EXIC_H
N#define _MG32x02z_EXIC_H_VER                        3.9     /*!< File Version */
N
N#if !(MG32x02z_H_VER == MG32x02z_EXIC_H_VER)
S    #error "MG32x02z_EXIC_H - Main/Module Version Mismatch !"
N#endif
N
N/**
N ******************************************************************************
N *
N * @struct      EXIC_Struct
N *              EXIC  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  PA_OF         :1;     //[0] External interrupt PAx OR path interrupt flag. (set and clear by hardware)
X            volatile const  uint8_t  PA_OF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  PA_AF         :1;     //[1] External interrupt PAx AND path interrupt flag 
X            volatile uint8_t  PA_AF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :2;     //[3..2] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t  PB_OF         :1;     //[4] External interrupt PBx OR path interrupt flag. (set and clear by hardware)
X            volatile const  uint8_t  PB_OF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  PB_AF         :1;     //[5] External interrupt PBx AND path interrupt flag
X            volatile uint8_t  PB_AF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t  PC_OF         :1;     //[8] External interrupt PCx OR path interrupt flag. (set and clear by hardware)
X            volatile const  uint8_t  PC_OF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  PC_AF         :1;     //[9] External interrupt PCx AND path interrupt flag
X            volatile uint8_t  PC_AF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :2;     //[11..10] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t  PD_OF         :1;     //[12] External interrupt PDx OR path interrupt flag. (set and clear by hardware)
X            volatile const  uint8_t  PD_OF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  PD_AF         :1;     //[13] External interrupt PDx AND path interrupt flag
X            volatile uint8_t  PD_AF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :2;     //[15..14] 
X            volatile const  uint8_t                :2;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }STA;                               /*!< STA        ~ Offset[0x00]  EXIC interrupt status register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PA_IEA        :1;     //[0] EXIC port PA external interrupt all enable
X            volatile uint8_t  PA_IEA        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  PB_IEA        :1;     //[1] EXIC port PB external interrupt all enable
X            volatile uint8_t  PB_IEA        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  PC_IEA        :1;     //[2] EXIC port PC external interrupt all enable
X            volatile uint8_t  PC_IEA        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  PD_IEA        :1;     //[3] EXIC port PD external interrupt all enable
X            volatile uint8_t  PD_IEA        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :4;     //[7..4] 
X            volatile const  uint8_t                :4;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint8_t                :8;     //[23..16] 
X            volatile const  uint8_t                :8;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }INT;                               /*!< INT        ~ Offset[0x04]  EXIC interrupt enable register */
N
N    __I uint32_t  RESERVED0[2];         /*!< RESERVED0  ~ Offset[0x08]  Reserved */
X    volatile const uint32_t  RESERVED0[2];          
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :1;     //[0] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  NMI_SW        :1;     //[1] Software NMI trigger bit. (set by software and clear by hardware)
X            volatile uint8_t  NMI_SW        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :6;     //[7..2] 
X            volatile const  uint8_t                :6;     
N            __IO uint8_t  EM_NMI        :1;     //[8] Interrupt event mask control bit for NMI.
X            volatile uint8_t  EM_NMI        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  EM_RXEV       :1;     //[9] Interrupt event mask control bit for RXEV.
X            volatile uint8_t  EM_RXEV       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __I  uint8_t                :6;     //[15..10] 
X            volatile const  uint8_t                :6;     
N            __I  uint8_t                :8;     //[23..16] 
X            volatile const  uint8_t                :8;     
N            __IO uint8_t  PA_AINV       :1;     //[24] External interrupt PAx AND path signal inverse enable bit.
X            volatile uint8_t  PA_AINV       :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __IO uint8_t  PB_AINV       :1;     //[25] External interrupt PBx AND path signal inverse enable bit.
X            volatile uint8_t  PB_AINV       :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __IO uint8_t  PC_AINV       :1;     //[26] External interrupt PCx AND path signal inverse enable bit.
X            volatile uint8_t  PC_AINV       :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __IO uint8_t  PD_AINV       :1;     //[27] External interrupt PDx AND path signal inverse enable bit.
X            volatile uint8_t  PD_AINV       :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __I  uint8_t                :4;     //[31..28] 
X            volatile const  uint8_t                :4;     
N        }MBIT;
N    }CR0;                               /*!< CR0        ~ Offset[0x10]  EXIC control register 0 */
N
N    __I uint32_t  RESERVED1[3];         /*!< RESERVED1  ~ Offset[0x14]  Reserved */
X    volatile const uint32_t  RESERVED1[3];          
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PA0_PF        :1;     //[0] EXIC pin input interrupt pending flag x for external input interrupt pin PAx
X            volatile uint8_t  PA0_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA1_PF        :1;     //[1] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA1_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA2_PF        :1;     //[2] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA2_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA3_PF        :1;     //[3] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA3_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA4_PF        :1;     //[4] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA4_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA5_PF        :1;     //[5] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA5_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA6_PF        :1;     //[6] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA6_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA7_PF        :1;     //[7] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA7_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA8_PF        :1;     //[8] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA8_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA9_PF        :1;     //[9] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA9_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA10_PF       :1;     //[10] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA10_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA11_PF       :1;     //[11] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA11_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA12_PF       :1;     //[12] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA12_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA13_PF       :1;     //[13] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA13_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA14_PF       :1;     //[14] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA14_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PA15_PF       :1;     //[15] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PA15_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }PA_PF;                             /*!< PA_PF      ~ Offset[0x20]  EXIC PA input interrupt pending flag register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PA0_TRGS      :2;     //[1..0] External interrupt pin edge/level trigger event select
X            volatile uint8_t  PA0_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA1_TRGS      :2;     //[3..2] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA1_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA2_TRGS      :2;     //[5..4] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA2_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA3_TRGS      :2;     //[7..6] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA3_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA4_TRGS      :2;     //[9..8] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA4_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA5_TRGS      :2;     //[11..10] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA5_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA6_TRGS      :2;     //[13..12] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA6_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA7_TRGS      :2;     //[15..14] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA7_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA8_TRGS      :2;     //[17..16] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA8_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA9_TRGS      :2;     //[19..18] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA9_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA10_TRGS     :2;     //[21..20] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA10_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA11_TRGS     :2;     //[23..22] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA11_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA12_TRGS     :2;     //[25..24] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA12_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA13_TRGS     :2;     //[27..26] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA13_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA14_TRGS     :2;     //[29..28] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA14_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PA15_TRGS     :2;     //[31..30] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PA15_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N        }MBIT;
N    }PA_TRGS;                           /*!< PA_TRGS    ~ Offset[0x24]  EXIC PA Pad input trigger select register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PA0_OM        :1;     //[0] External interrupt PAx OR mask bit x
X            volatile uint8_t  PA0_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA1_OM        :1;     //[1] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA1_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA2_OM        :1;     //[2] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA2_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA3_OM        :1;     //[3] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA3_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA4_OM        :1;     //[4] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA4_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA5_OM        :1;     //[5] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA5_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA6_OM        :1;     //[6] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA6_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA7_OM        :1;     //[7] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA7_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA8_OM        :1;     //[8] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA8_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA9_OM        :1;     //[9] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA9_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA10_OM       :1;     //[10] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA10_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA11_OM       :1;     //[11] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA11_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA12_OM       :1;     //[12] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA12_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA13_OM       :1;     //[13] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA13_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA14_OM       :1;     //[14] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA14_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA15_OM       :1;     //[15] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PA15_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA0_AM        :1;     //[16] External interrupt PAx AND mask bit x
X            volatile uint8_t  PA0_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable 
N            __IO uint8_t  PA1_AM        :1;     //[17] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA1_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA2_AM        :1;     //[18] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA2_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA3_AM        :1;     //[19] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA3_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA4_AM        :1;     //[20] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA4_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA5_AM        :1;     //[21] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA5_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA6_AM        :1;     //[22] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA6_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA7_AM        :1;     //[23] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA7_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA8_AM        :1;     //[24] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA8_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA9_AM        :1;     //[25] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA9_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA10_AM       :1;     //[26] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA10_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA11_AM       :1;     //[27] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA11_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA12_AM       :1;     //[28] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA12_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA13_AM       :1;     //[29] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA13_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA14_AM       :1;     //[30] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA14_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PA15_AM       :1;     //[31] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PA15_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N        }MBIT;
N    }PA_MSK;                            /*!< PA_MSK     ~ Offset[0x28]  EXIC PA AOI Mask register */
N
N    __I uint32_t  RESERVED2;            /*!< RESERVED2  ~ Offset[0x2C]  Reserved */
X    volatile const uint32_t  RESERVED2;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PB0_PF        :1;     //[0] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB0_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB1_PF        :1;     //[1] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB1_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB2_PF        :1;     //[2] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB2_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB3_PF        :1;     //[3] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB3_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB4_PF        :1;     //[4] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB4_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB5_PF        :1;     //[5] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB5_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB6_PF        :1;     //[6] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB6_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB7_PF        :1;     //[7] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB7_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB8_PF        :1;     //[8] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB8_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB9_PF        :1;     //[9] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB9_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB10_PF       :1;     //[10] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB10_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB11_PF       :1;     //[11] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB11_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB12_PF       :1;     //[12] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB12_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB13_PF       :1;     //[13] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB13_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB14_PF       :1;     //[14] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB14_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PB15_PF       :1;     //[15] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PB15_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }PB_PF;                             /*!< PB_PF      ~ Offset[0x30]  EXIC PB input interrupt pending flag register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PB0_TRGS      :2;     //[1..0] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB0_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB1_TRGS      :2;     //[3..2] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB1_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB2_TRGS      :2;     //[5..4] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB2_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB3_TRGS      :2;     //[7..6] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB3_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB4_TRGS      :2;     //[9..8] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB4_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB5_TRGS      :2;     //[11..10] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB5_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB6_TRGS      :2;     //[13..12] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB6_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB7_TRGS      :2;     //[15..14] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB7_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB8_TRGS      :2;     //[17..16] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB8_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB9_TRGS      :2;     //[19..18] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB9_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB10_TRGS     :2;     //[21..20] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB10_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB11_TRGS     :2;     //[23..22] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB11_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB12_TRGS     :2;     //[25..24] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB12_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB13_TRGS     :2;     //[27..26] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB13_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB14_TRGS     :2;     //[29..28] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB14_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PB15_TRGS     :2;     //[31..30] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PB15_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N        }MBIT;
N    }PB_TRGS;                           /*!< PB_TRGS    ~ Offset[0x34]  EXIC PB Pad input trigger select register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PB0_OM        :1;     //[0] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB0_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB1_OM        :1;     //[1] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB1_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB2_OM        :1;     //[2] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB2_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB3_OM        :1;     //[3] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB3_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB4_OM        :1;     //[4] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB4_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB5_OM        :1;     //[5] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB5_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB6_OM        :1;     //[6] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB6_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB7_OM        :1;     //[7] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB7_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB8_OM        :1;     //[8] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB8_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB9_OM        :1;     //[9] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB9_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB10_OM       :1;     //[10] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB10_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB11_OM       :1;     //[11] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB11_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB12_OM       :1;     //[12] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB12_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB13_OM       :1;     //[13] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB13_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB14_OM       :1;     //[14] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB14_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB15_OM       :1;     //[15] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PB15_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB0_AM        :1;     //[16] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB0_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB1_AM        :1;     //[17] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB1_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB2_AM        :1;     //[18] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB2_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB3_AM        :1;     //[19] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB3_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB4_AM        :1;     //[20] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB4_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB5_AM        :1;     //[21] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB5_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB6_AM        :1;     //[22] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB6_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB7_AM        :1;     //[23] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB7_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB8_AM        :1;     //[24] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB8_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB9_AM        :1;     //[25] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB9_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB10_AM       :1;     //[26] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB10_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB11_AM       :1;     //[27] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB11_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB12_AM       :1;     //[28] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB12_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB13_AM       :1;     //[29] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB13_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB14_AM       :1;     //[30] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB14_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PB15_AM       :1;     //[31] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PB15_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N        }MBIT;
N    }PB_MSK;                            /*!< PB_MSK     ~ Offset[0x38]  EXIC PB AOI Mask register */
N
N    __I uint32_t  RESERVED3;            /*!< RESERVED3  ~ Offset[0x3C]  Reserved */
X    volatile const uint32_t  RESERVED3;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PC0_PF        :1;     //[0] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC0_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC1_PF        :1;     //[1] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC1_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC2_PF        :1;     //[2] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC2_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC3_PF        :1;     //[3] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC3_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC4_PF        :1;     //[4] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC4_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC5_PF        :1;     //[5] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC5_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC6_PF        :1;     //[6] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC6_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC7_PF        :1;     //[7] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC7_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC8_PF        :1;     //[8] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC8_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC9_PF        :1;     //[9] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC9_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC10_PF       :1;     //[10] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC10_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC11_PF       :1;     //[11] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC11_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC12_PF       :1;     //[12] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC12_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC13_PF       :1;     //[13] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC13_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PC14_PF       :1;     //[14] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PC14_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __I  uint8_t                :1;     //[15] 
X            volatile const  uint8_t                :1;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }PC_PF;                             /*!< PC_PF      ~ Offset[0x40]  EXIC PC input interrupt pending flag register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PC0_TRGS      :2;     //[1..0] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC0_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC1_TRGS      :2;     //[3..2] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC1_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC2_TRGS      :2;     //[5..4] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC2_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC3_TRGS      :2;     //[7..6] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC3_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC4_TRGS      :2;     //[9..8] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC4_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC5_TRGS      :2;     //[11..10] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC5_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC6_TRGS      :2;     //[13..12] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC6_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC7_TRGS      :2;     //[15..14] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC7_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC8_TRGS      :2;     //[17..16] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC8_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC9_TRGS      :2;     //[19..18] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC9_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC10_TRGS     :2;     //[21..20] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC10_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC11_TRGS     :2;     //[23..22] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC11_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC12_TRGS     :2;     //[25..24] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC12_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC13_TRGS     :2;     //[27..26] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC13_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PC14_TRGS     :2;     //[29..28] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PC14_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __I  uint8_t                :2;     //[31..30] 
X            volatile const  uint8_t                :2;     
N        }MBIT;
N    }PC_TRGS;                           /*!< PC_TRGS    ~ Offset[0x44]  EXIC PC Pad input trigger select register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PC0_OM        :1;     //[0] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC0_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC1_OM        :1;     //[1] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC1_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC2_OM        :1;     //[2] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC2_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC3_OM        :1;     //[3] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC3_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC4_OM        :1;     //[4] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC4_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC5_OM        :1;     //[5] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC5_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC6_OM        :1;     //[6] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC6_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC7_OM        :1;     //[7] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC7_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC8_OM        :1;     //[8] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC8_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC9_OM        :1;     //[9] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC9_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC10_OM       :1;     //[10] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC10_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC11_OM       :1;     //[11] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC11_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC12_OM       :1;     //[12] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC12_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC13_OM       :1;     //[13] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC13_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC14_OM       :1;     //[14] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PC14_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[15] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  PC0_AM        :1;     //[16] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC0_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC1_AM        :1;     //[17] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC1_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC2_AM        :1;     //[18] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC2_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC3_AM        :1;     //[19] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC3_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC4_AM        :1;     //[20] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC4_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC5_AM        :1;     //[21] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC5_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC6_AM        :1;     //[22] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC6_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC7_AM        :1;     //[23] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC7_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC8_AM        :1;     //[24] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC8_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC9_AM        :1;     //[25] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC9_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC10_AM       :1;     //[26] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC10_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC11_AM       :1;     //[27] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC11_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC12_AM       :1;     //[28] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC12_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC13_AM       :1;     //[29] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC13_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PC14_AM       :1;     //[30] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PC14_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[31] 
X            volatile const  uint8_t                :1;     
N        }MBIT;
N    }PC_MSK;                            /*!< PC_MSK     ~ Offset[0x48]  EXIC  PC AOI Mask register */
N
N    __I uint32_t  RESERVED4;            /*!< RESERVED4  ~ Offset[0x4C]  Reserved */
X    volatile const uint32_t  RESERVED4;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PD0_PF        :1;     //[0] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD0_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD1_PF        :1;     //[1] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD1_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD2_PF        :1;     //[2] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD2_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD3_PF        :1;     //[3] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD3_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD4_PF        :1;     //[4] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD4_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD5_PF        :1;     //[5] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD5_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD6_PF        :1;     //[6] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD6_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD7_PF        :1;     //[7] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD7_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD8_PF        :1;     //[8] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD8_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD9_PF        :1;     //[9] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD9_PF        :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD10_PF       :1;     //[10] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD10_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD11_PF       :1;     //[11] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD11_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD12_PF       :1;     //[12] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD12_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD13_PF       :1;     //[13] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD13_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD14_PF       :1;     //[14] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD14_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __IO uint8_t  PD15_PF       :1;     //[15] Refer to EXIC_PA0_PF.
X            volatile uint8_t  PD15_PF       :1;     
N                                        //0 = Normal : No event occurred
N                                        //1 = Happened : Event happened
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }PD_PF;                             /*!< PD_PF      ~ Offset[0x50]  EXIC PD input interrupt pending flag register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PD0_TRGS      :2;     //[1..0] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD0_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD1_TRGS      :2;     //[3..2] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD1_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD2_TRGS      :2;     //[5..4] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD2_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD3_TRGS      :2;     //[7..6] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD3_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD4_TRGS      :2;     //[9..8] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD4_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD5_TRGS      :2;     //[11..10] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD5_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD6_TRGS      :2;     //[13..12] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD6_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD7_TRGS      :2;     //[15..14] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD7_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD8_TRGS      :2;     //[17..16] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD8_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD9_TRGS      :2;     //[19..18] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD9_TRGS      :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD10_TRGS     :2;     //[21..20] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD10_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD11_TRGS     :2;     //[23..22] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD11_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD12_TRGS     :2;     //[25..24] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD12_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD13_TRGS     :2;     //[27..26] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD13_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD14_TRGS     :2;     //[29..28] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD14_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N            __IO uint8_t  PD15_TRGS     :2;     //[31..30] Refer to EXIC_PA0_TRGS.
X            volatile uint8_t  PD15_TRGS     :2;     
N                                        //0x0 = No : No updated flag
N                                        //0x1 = Level
N                                        //0x2 = Edge
N                                        //0x3 = Dual-edge
N        }MBIT;
N    }PD_TRGS;                           /*!< PD_TRGS    ~ Offset[0x54]  EXIC PD Pad input trigger select register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PD0_OM        :1;     //[0] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD0_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD1_OM        :1;     //[1] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD1_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD2_OM        :1;     //[2] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD2_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD3_OM        :1;     //[3] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD3_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD4_OM        :1;     //[4] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD4_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD5_OM        :1;     //[5] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD5_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD6_OM        :1;     //[6] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD6_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD7_OM        :1;     //[7] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD7_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD8_OM        :1;     //[8] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD8_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD9_OM        :1;     //[9] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD9_OM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD10_OM       :1;     //[10] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD10_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD11_OM       :1;     //[11] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD11_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD12_OM       :1;     //[12] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD12_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD13_OM       :1;     //[13] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD13_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD14_OM       :1;     //[14] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD14_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD15_OM       :1;     //[15] Refer to EXIC_PA0_OM.
X            volatile uint8_t  PD15_OM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD0_AM        :1;     //[16] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD0_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD1_AM        :1;     //[17] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD1_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD2_AM        :1;     //[18] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD2_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD3_AM        :1;     //[19] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD3_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD4_AM        :1;     //[20] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD4_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD5_AM        :1;     //[21] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD5_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD6_AM        :1;     //[22] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD6_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD7_AM        :1;     //[23] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD7_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD8_AM        :1;     //[24] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD8_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD9_AM        :1;     //[25] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD9_AM        :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD10_AM       :1;     //[26] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD10_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD11_AM       :1;     //[27] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD11_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD12_AM       :1;     //[28] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD12_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD13_AM       :1;     //[29] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD13_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD14_AM       :1;     //[30] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD14_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N            __IO uint8_t  PD15_AM       :1;     //[31] Refer to EXIC_PA0_AM.
X            volatile uint8_t  PD15_AM       :1;     
N                                        //0 = Disable (Mask)
N                                        //1 = Enable
N        }MBIT;
N    }PD_MSK;                            /*!< PD_MSK     ~ Offset[0x58]  EXIC  PD AOI Mask register */
N
N    __I uint32_t  RESERVED5;            /*!< RESERVED5  ~ Offset[0x5C]  Reserved */
X    volatile const uint32_t  RESERVED5;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  ID0           :8;     //[7..0] Interrupt source-0 identity.
X            volatile const  uint8_t  ID0           :8;     
N                                        //0x1 = WWDT
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID1           :8;     //[15..8] Interrupt source-1 identity.
X            volatile const  uint8_t  ID1           :8;     
N                                        //0x1 = IWDT
N                                        //0x2 = PW
N                                        //0x4 = Reserved
N                                        //0x8 = RTC
N                                        //0x10 = CSC
N                                        //0x20 = APB
N                                        //0x40 = MEM
N                                        //0x80 = EMB
N            __I  uint8_t  ID2           :8;     //[23..16] Interrupt source-2 identity.
X            volatile const  uint8_t  ID2           :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID3           :8;     //[31..24] Interrupt source-3 identity.
X            volatile const  uint8_t  ID3           :8;     
N                                        //0x1 = EXINT0
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N        }MBIT;
N    }SRC0;                              /*!< SRC0       ~ Offset[0x60]  EXIC Interrupt source identity register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  ID4           :8;     //[7..0] Interrupt source-4 identity.
X            volatile const  uint8_t  ID4           :8;     
N                                        //0x1 = EXINT1
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID5           :8;     //[15..8] Interrupt source-5 identity.
X            volatile const  uint8_t  ID5           :8;     
N                                        //0x1 = EXINT2
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID6           :8;     //[23..16] Interrupt source-6 identity.
X            volatile const  uint8_t  ID6           :8;     
N                                        //0x1 = EXINT3
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID7           :8;     //[31..24] Interrupt source-7 identity.
X            volatile const  uint8_t  ID7           :8;     
N                                        //0x1 = CMP
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N        }MBIT;
N    }SRC1;                              /*!< SRC1       ~ Offset[0x64]  EXIC interrupt source identity register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  ID8           :8;     //[7..0] Interrupt source-8 identity.
X            volatile const  uint8_t  ID8           :8;     
N                                        //0x1 = DMA
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID9           :8;     //[15..8] Interrupt source-9 identity.
X            volatile const  uint8_t  ID9           :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID10          :8;     //[23..16] Interrupt source-10 identity.
X            volatile const  uint8_t  ID10          :8;     
N                                        //0x1 = ADC
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID11          :8;     //[31..24] Interrupt source-11 identity.
X            volatile const  uint8_t  ID11          :8;     
N                                        //0x1 = DAC
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N        }MBIT;
N    }SRC2;                              /*!< SRC2       ~ Offset[0x68]  EXIC interrupt source identity register 2 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  ID12          :8;     //[7..0] Interrupt source-12 identity.
X            volatile const  uint8_t  ID12          :8;     
N                                        //0x1 = TM00
N                                        //0x2 = TM01
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID13          :8;     //[15..8] Interrupt source-13 identity.
X            volatile const  uint8_t  ID13          :8;     
N                                        //0x1 = TM10
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID14          :8;     //[23..16] Interrupt source-14 identity.
X            volatile const  uint8_t  ID14          :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = TM16
N                                        //0x8 = Reserved
N            __I  uint8_t  ID15          :8;     //[31..24] Interrupt source-15 identity.
X            volatile const  uint8_t  ID15          :8;     
N                                        //0x1 = TM20
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N        }MBIT;
N    }SRC3;                              /*!< SRC3       ~ Offset[0x6C]  EXIC interrupt source identity register 3 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  ID16          :8;     //[7..0] Interrupt source-16 identity.
X            volatile const  uint8_t  ID16          :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = TM26
N                                        //0x8 = Reserved
N            __I  uint8_t  ID17          :8;     //[15..8] Interrupt source-17 identity.
X            volatile const  uint8_t  ID17          :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = TM36
N                                        //0x8 = Reserved
N            __I  uint8_t  ID18          :8;     //[23..16] Interrupt source-18 identity.
X            volatile const  uint8_t  ID18          :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID19          :8;     //[31..24] Interrupt source-19 identity.
X            volatile const  uint8_t  ID19          :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N        }MBIT;
N    }SRC4;                              /*!< SRC4       ~ Offset[0x70]  EXIC interrupt source identity register 4 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  ID20          :8;     //[7..0] Interrupt source-20 identity.
X            volatile const  uint8_t  ID20          :8;     
N                                        //0x1 = URT0
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID21          :8;     //[15..8] Interrupt source-21 identity.
X            volatile const  uint8_t  ID21          :8;     
N                                        //0x1 = URT1
N                                        //0x2 = URT2
N                                        //0x4 = URT3
N                                        //0x8 = Reserved
N            __I  uint8_t  ID22          :8;     //[23..16] Interrupt source-22 identity.
X            volatile const  uint8_t  ID22          :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID23          :8;     //[31..24] Interrupt source-23 identity.
X            volatile const  uint8_t  ID23          :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N        }MBIT;
N    }SRC5;                              /*!< SRC5       ~ Offset[0x74]  EXIC interrupt source identity register 5 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  ID24          :8;     //[7..0] Interrupt source-24 identity.
X            volatile const  uint8_t  ID24          :8;     
N                                        //0x1 = SPI0
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID25          :8;     //[15..8] Interrupt source-25 identity.
X            volatile const  uint8_t  ID25          :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID26          :8;     //[23..16] Interrupt source-26 identity.
X            volatile const  uint8_t  ID26          :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID27          :8;     //[31..24] Interrupt source-27 identity.
X            volatile const  uint8_t  ID27          :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N        }MBIT;
N    }SRC6;                              /*!< SRC6       ~ Offset[0x78]  EXIC interrupt source identity register 6 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  ID28          :8;     //[7..0] Interrupt source-28 identity.
X            volatile const  uint8_t  ID28          :8;     
N                                        //0x1 = I2C0
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID29          :8;     //[15..8] Interrupt source-29 identity.
X            volatile const  uint8_t  ID29          :8;     
N                                        //0x1 = I2C1
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID30          :8;     //[23..16] Interrupt source-30 identity.
X            volatile const  uint8_t  ID30          :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N            __I  uint8_t  ID31          :8;     //[31..24] Interrupt source-31 identity.
X            volatile const  uint8_t  ID31          :8;     
N                                        //0x1 = Reserved
N                                        //0x2 = Reserved
N                                        //0x4 = Reserved
N                                        //0x8 = Reserved
N        }MBIT;
N    }SRC7;                              /*!< SRC7       ~ Offset[0x7C]  EXIC interrupt source identity register 7 */
N
N} EXIC_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        EXIC  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define EXIC_Base                       ((uint32_t)0x50000000)              /*!< External Interrupt Controller */
N#define EXIC                            ((EXIC_Struct*) EXIC_Base)
N///@}
N
N/**
N ******************************************************************************
N *
N * @name        EXIC  [Register Definitions]
N *
N ******************************************************************************
N */
N/**
N ******************************************************************************
N * @name        EXIC_STA  [register's definitions]
N *              Offset[0x00]  EXIC interrupt status register (0x50000000)
N ******************************************************************************
N */
N///@{
N#define EXIC_STA_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_STA */
N#define EXIC_STA_PD_AF_mask_w                       ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define EXIC_STA_PD_AF_mask_h0                      ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_STA_PD_AF_mask_b1                      ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_STA_PD_AF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_STA_PD_AF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_STA_PD_AF_normal_b1                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_STA_PD_AF_happened_w                   ((uint32_t)0x00002000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_STA_PD_AF_happened_h0                  ((uint16_t)0x2000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_STA_PD_AF_happened_b1                  ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_STA_PD_OF_mask_w                       ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define EXIC_STA_PD_OF_mask_h0                      ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_STA_PD_OF_mask_b1                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_STA_PD_OF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_STA_PD_OF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_STA_PD_OF_normal_b1                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_STA_PD_OF_happened_w                   ((uint32_t)0x00001000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_STA_PD_OF_happened_h0                  ((uint16_t)0x1000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_STA_PD_OF_happened_b1                  ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_STA_PC_AF_mask_w                       ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define EXIC_STA_PC_AF_mask_h0                      ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_STA_PC_AF_mask_b1                      ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_STA_PC_AF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_STA_PC_AF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_STA_PC_AF_normal_b1                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_STA_PC_AF_happened_w                   ((uint32_t)0x00000200)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_STA_PC_AF_happened_h0                  ((uint16_t)0x0200)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_STA_PC_AF_happened_b1                  ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_STA_PC_OF_mask_w                       ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define EXIC_STA_PC_OF_mask_h0                      ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_STA_PC_OF_mask_b1                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_STA_PC_OF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_STA_PC_OF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_STA_PC_OF_normal_b1                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_STA_PC_OF_happened_w                   ((uint32_t)0x00000100)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_STA_PC_OF_happened_h0                  ((uint16_t)0x0100)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_STA_PC_OF_happened_b1                  ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_STA_PB_AF_mask_w                       ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define EXIC_STA_PB_AF_mask_h0                      ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_STA_PB_AF_mask_b0                      ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_STA_PB_AF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_STA_PB_AF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_STA_PB_AF_normal_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_STA_PB_AF_happened_w                   ((uint32_t)0x00000020)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_STA_PB_AF_happened_h0                  ((uint16_t)0x0020)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_STA_PB_AF_happened_b0                  ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_STA_PB_OF_mask_w                       ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define EXIC_STA_PB_OF_mask_h0                      ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_STA_PB_OF_mask_b0                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_STA_PB_OF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_STA_PB_OF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_STA_PB_OF_normal_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_STA_PB_OF_happened_w                   ((uint32_t)0x00000010)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_STA_PB_OF_happened_h0                  ((uint16_t)0x0010)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_STA_PB_OF_happened_b0                  ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_STA_PA_AF_mask_w                       ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define EXIC_STA_PA_AF_mask_h0                      ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_STA_PA_AF_mask_b0                      ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_STA_PA_AF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_STA_PA_AF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_STA_PA_AF_normal_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_STA_PA_AF_happened_w                   ((uint32_t)0x00000002)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_STA_PA_AF_happened_h0                  ((uint16_t)0x0002)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_STA_PA_AF_happened_b0                  ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_STA_PA_OF_mask_w                       ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define EXIC_STA_PA_OF_mask_h0                      ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_STA_PA_OF_mask_b0                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_STA_PA_OF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_STA_PA_OF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_STA_PA_OF_normal_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_STA_PA_OF_happened_w                   ((uint32_t)0x00000001)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_STA_PA_OF_happened_h0                  ((uint16_t)0x0001)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_STA_PA_OF_happened_b0                  ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_INT  [register's definitions]
N *              Offset[0x04]  EXIC interrupt enable register (0x50000004)
N ******************************************************************************
N */
N///@{
N#define EXIC_INT_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_INT */
N#define EXIC_INT_PD_IEA_mask_w                      ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define EXIC_INT_PD_IEA_mask_h0                     ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_INT_PD_IEA_mask_b0                     ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_INT_PD_IEA_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_INT_PD_IEA_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_INT_PD_IEA_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_INT_PD_IEA_enable_w                    ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_INT_PD_IEA_enable_h0                   ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_INT_PD_IEA_enable_b0                   ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_INT_PC_IEA_mask_w                      ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define EXIC_INT_PC_IEA_mask_h0                     ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_INT_PC_IEA_mask_b0                     ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_INT_PC_IEA_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_INT_PC_IEA_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_INT_PC_IEA_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_INT_PC_IEA_enable_w                    ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_INT_PC_IEA_enable_h0                   ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_INT_PC_IEA_enable_b0                   ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_INT_PB_IEA_mask_w                      ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define EXIC_INT_PB_IEA_mask_h0                     ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_INT_PB_IEA_mask_b0                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_INT_PB_IEA_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_INT_PB_IEA_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_INT_PB_IEA_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_INT_PB_IEA_enable_w                    ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_INT_PB_IEA_enable_h0                   ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_INT_PB_IEA_enable_b0                   ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_INT_PA_IEA_mask_w                      ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define EXIC_INT_PA_IEA_mask_h0                     ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_INT_PA_IEA_mask_b0                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_INT_PA_IEA_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_INT_PA_IEA_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_INT_PA_IEA_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_INT_PA_IEA_enable_w                    ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_INT_PA_IEA_enable_h0                   ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_INT_PA_IEA_enable_b0                   ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_CR0  [register's definitions]
N *              Offset[0x10]  EXIC control register 0 (0x50000010)
N ******************************************************************************
N */
N///@{
N#define EXIC_CR0_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_CR0 */
N#define EXIC_CR0_PD_AINV_mask_w                     ((uint32_t)0x08000000)  /*!< Bit Mask of 32bit */
N#define EXIC_CR0_PD_AINV_mask_h1                    ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_CR0_PD_AINV_mask_b3                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_CR0_PD_AINV_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_CR0_PD_AINV_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_CR0_PD_AINV_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_CR0_PD_AINV_enable_w                   ((uint32_t)0x08000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_CR0_PD_AINV_enable_h1                  ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_CR0_PD_AINV_enable_b3                  ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_CR0_PC_AINV_mask_w                     ((uint32_t)0x04000000)  /*!< Bit Mask of 32bit */
N#define EXIC_CR0_PC_AINV_mask_h1                    ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_CR0_PC_AINV_mask_b3                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_CR0_PC_AINV_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_CR0_PC_AINV_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_CR0_PC_AINV_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_CR0_PC_AINV_enable_w                   ((uint32_t)0x04000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_CR0_PC_AINV_enable_h1                  ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_CR0_PC_AINV_enable_b3                  ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_CR0_PB_AINV_mask_w                     ((uint32_t)0x02000000)  /*!< Bit Mask of 32bit */
N#define EXIC_CR0_PB_AINV_mask_h1                    ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_CR0_PB_AINV_mask_b3                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_CR0_PB_AINV_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_CR0_PB_AINV_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_CR0_PB_AINV_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_CR0_PB_AINV_enable_w                   ((uint32_t)0x02000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_CR0_PB_AINV_enable_h1                  ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_CR0_PB_AINV_enable_b3                  ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_CR0_PA_AINV_mask_w                     ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define EXIC_CR0_PA_AINV_mask_h1                    ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_CR0_PA_AINV_mask_b3                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_CR0_PA_AINV_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_CR0_PA_AINV_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_CR0_PA_AINV_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_CR0_PA_AINV_enable_w                   ((uint32_t)0x01000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_CR0_PA_AINV_enable_h1                  ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_CR0_PA_AINV_enable_b3                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_CR0_EM_RXEV_mask_w                     ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define EXIC_CR0_EM_RXEV_mask_h0                    ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_CR0_EM_RXEV_mask_b1                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_CR0_EM_RXEV_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_CR0_EM_RXEV_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_CR0_EM_RXEV_disable_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_CR0_EM_RXEV_enable_w                   ((uint32_t)0x00000200)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_CR0_EM_RXEV_enable_h0                  ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_CR0_EM_RXEV_enable_b1                  ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_CR0_EM_NMI_mask_w                      ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define EXIC_CR0_EM_NMI_mask_h0                     ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_CR0_EM_NMI_mask_b1                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_CR0_EM_NMI_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_CR0_EM_NMI_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_CR0_EM_NMI_disable_b1                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_CR0_EM_NMI_enable_w                    ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_CR0_EM_NMI_enable_h0                   ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_CR0_EM_NMI_enable_b1                   ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_CR0_NMI_SW_mask_w                      ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define EXIC_CR0_NMI_SW_mask_h0                     ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_CR0_NMI_SW_mask_b0                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_CR0_NMI_SW_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_CR0_NMI_SW_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_CR0_NMI_SW_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_CR0_NMI_SW_enable_w                    ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_CR0_NMI_SW_enable_h0                   ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_CR0_NMI_SW_enable_b0                   ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_PA_PF  [register's definitions]
N *              Offset[0x20]  EXIC PA input interrupt pending flag register (0x50000020)
N ******************************************************************************
N */
N///@{
N#define EXIC_PA_PF_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_PA_PF */
N#define EXIC_PA_PF_PA15_PF_mask_w                   ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA15_PF_mask_h0                  ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA15_PF_mask_b1                  ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA15_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA15_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA15_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA15_PF_happened_w               ((uint32_t)0x00008000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA15_PF_happened_h0              ((uint16_t)0x8000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA15_PF_happened_b1              ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA14_PF_mask_w                   ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA14_PF_mask_h0                  ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA14_PF_mask_b1                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA14_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA14_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA14_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA14_PF_happened_w               ((uint32_t)0x00004000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA14_PF_happened_h0              ((uint16_t)0x4000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA14_PF_happened_b1              ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA13_PF_mask_w                   ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA13_PF_mask_h0                  ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA13_PF_mask_b1                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA13_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA13_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA13_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA13_PF_happened_w               ((uint32_t)0x00002000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA13_PF_happened_h0              ((uint16_t)0x2000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA13_PF_happened_b1              ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA12_PF_mask_w                   ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA12_PF_mask_h0                  ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA12_PF_mask_b1                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA12_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA12_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA12_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA12_PF_happened_w               ((uint32_t)0x00001000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA12_PF_happened_h0              ((uint16_t)0x1000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA12_PF_happened_b1              ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA11_PF_mask_w                   ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA11_PF_mask_h0                  ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA11_PF_mask_b1                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA11_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA11_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA11_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA11_PF_happened_w               ((uint32_t)0x00000800)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA11_PF_happened_h0              ((uint16_t)0x0800)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA11_PF_happened_b1              ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA10_PF_mask_w                   ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA10_PF_mask_h0                  ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA10_PF_mask_b1                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA10_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA10_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA10_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA10_PF_happened_w               ((uint32_t)0x00000400)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA10_PF_happened_h0              ((uint16_t)0x0400)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA10_PF_happened_b1              ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA9_PF_mask_w                    ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA9_PF_mask_h0                   ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA9_PF_mask_b1                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA9_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA9_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA9_PF_normal_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA9_PF_happened_w                ((uint32_t)0x00000200)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA9_PF_happened_h0               ((uint16_t)0x0200)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA9_PF_happened_b1               ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA8_PF_mask_w                    ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA8_PF_mask_h0                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA8_PF_mask_b1                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA8_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA8_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA8_PF_normal_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA8_PF_happened_w                ((uint32_t)0x00000100)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA8_PF_happened_h0               ((uint16_t)0x0100)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA8_PF_happened_b1               ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA7_PF_mask_w                    ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA7_PF_mask_h0                   ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA7_PF_mask_b0                   ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA7_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA7_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA7_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA7_PF_happened_w                ((uint32_t)0x00000080)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA7_PF_happened_h0               ((uint16_t)0x0080)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA7_PF_happened_b0               ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA6_PF_mask_w                    ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA6_PF_mask_h0                   ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA6_PF_mask_b0                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA6_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA6_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA6_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA6_PF_happened_w                ((uint32_t)0x00000040)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA6_PF_happened_h0               ((uint16_t)0x0040)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA6_PF_happened_b0               ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA5_PF_mask_w                    ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA5_PF_mask_h0                   ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA5_PF_mask_b0                   ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA5_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA5_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA5_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA5_PF_happened_w                ((uint32_t)0x00000020)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA5_PF_happened_h0               ((uint16_t)0x0020)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA5_PF_happened_b0               ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA4_PF_mask_w                    ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA4_PF_mask_h0                   ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA4_PF_mask_b0                   ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA4_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA4_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA4_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA4_PF_happened_w                ((uint32_t)0x00000010)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA4_PF_happened_h0               ((uint16_t)0x0010)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA4_PF_happened_b0               ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA3_PF_mask_w                    ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA3_PF_mask_h0                   ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA3_PF_mask_b0                   ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA3_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA3_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA3_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA3_PF_happened_w                ((uint32_t)0x00000008)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA3_PF_happened_h0               ((uint16_t)0x0008)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA3_PF_happened_b0               ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA2_PF_mask_w                    ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA2_PF_mask_h0                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA2_PF_mask_b0                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA2_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA2_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA2_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA2_PF_happened_w                ((uint32_t)0x00000004)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA2_PF_happened_h0               ((uint16_t)0x0004)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA2_PF_happened_b0               ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA1_PF_mask_w                    ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA1_PF_mask_h0                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA1_PF_mask_b0                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA1_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA1_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA1_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA1_PF_happened_w                ((uint32_t)0x00000002)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA1_PF_happened_h0               ((uint16_t)0x0002)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA1_PF_happened_b0               ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PA_PF_PA0_PF_mask_w                    ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_PF_PA0_PF_mask_h0                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_PF_PA0_PF_mask_b0                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_PF_PA0_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PA_PF_PA0_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PA_PF_PA0_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PA_PF_PA0_PF_happened_w                ((uint32_t)0x00000001)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PA_PF_PA0_PF_happened_h0               ((uint16_t)0x0001)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PA_PF_PA0_PF_happened_b0               ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_PA_TRGS  [register's definitions]
N *              Offset[0x24]  EXIC PA Pad input trigger select register (0x50000024)
N ******************************************************************************
N */
N///@{
N#define EXIC_PA_TRGS_default                        ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_PA_TRGS */
N#define EXIC_PA_TRGS_PA15_TRGS_mask_w               ((uint32_t)0xC0000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA15_TRGS_mask_h1              ((uint16_t)0xC000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA15_TRGS_mask_b3              ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA15_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA15_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA15_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA15_TRGS_level_w              ((uint32_t)0x40000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA15_TRGS_level_h1             ((uint16_t)0x4000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA15_TRGS_level_b3             ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA15_TRGS_edge_w               ((uint32_t)0x80000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA15_TRGS_edge_h1              ((uint16_t)0x8000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA15_TRGS_edge_b3              ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA15_TRGS_dual_edge_w          ((uint32_t)0xC0000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA15_TRGS_dual_edge_h1         ((uint16_t)0xC000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA15_TRGS_dual_edge_b3         ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA14_TRGS_mask_w               ((uint32_t)0x30000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA14_TRGS_mask_h1              ((uint16_t)0x3000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA14_TRGS_mask_b3              ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA14_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA14_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA14_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA14_TRGS_level_w              ((uint32_t)0x10000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA14_TRGS_level_h1             ((uint16_t)0x1000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA14_TRGS_level_b3             ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA14_TRGS_edge_w               ((uint32_t)0x20000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA14_TRGS_edge_h1              ((uint16_t)0x2000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA14_TRGS_edge_b3              ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA14_TRGS_dual_edge_w          ((uint32_t)0x30000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA14_TRGS_dual_edge_h1         ((uint16_t)0x3000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA14_TRGS_dual_edge_b3         ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA13_TRGS_mask_w               ((uint32_t)0x0C000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA13_TRGS_mask_h1              ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA13_TRGS_mask_b3              ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA13_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA13_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA13_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA13_TRGS_level_w              ((uint32_t)0x04000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA13_TRGS_level_h1             ((uint16_t)0x0400)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA13_TRGS_level_b3             ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA13_TRGS_edge_w               ((uint32_t)0x08000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA13_TRGS_edge_h1              ((uint16_t)0x0800)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA13_TRGS_edge_b3              ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA13_TRGS_dual_edge_w          ((uint32_t)0x0C000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA13_TRGS_dual_edge_h1         ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA13_TRGS_dual_edge_b3         ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA12_TRGS_mask_w               ((uint32_t)0x03000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA12_TRGS_mask_h1              ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA12_TRGS_mask_b3              ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA12_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA12_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA12_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA12_TRGS_level_w              ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA12_TRGS_level_h1             ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA12_TRGS_level_b3             ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA12_TRGS_edge_w               ((uint32_t)0x02000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA12_TRGS_edge_h1              ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA12_TRGS_edge_b3              ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA12_TRGS_dual_edge_w          ((uint32_t)0x03000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA12_TRGS_dual_edge_h1         ((uint16_t)0x0300)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA12_TRGS_dual_edge_b3         ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA11_TRGS_mask_w               ((uint32_t)0x00C00000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA11_TRGS_mask_h1              ((uint16_t)0x00C0)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA11_TRGS_mask_b2              ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA11_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA11_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA11_TRGS_no_b2                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA11_TRGS_level_w              ((uint32_t)0x00400000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA11_TRGS_level_h1             ((uint16_t)0x0040)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA11_TRGS_level_b2             ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA11_TRGS_edge_w               ((uint32_t)0x00800000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA11_TRGS_edge_h1              ((uint16_t)0x0080)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA11_TRGS_edge_b2              ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA11_TRGS_dual_edge_w          ((uint32_t)0x00C00000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA11_TRGS_dual_edge_h1         ((uint16_t)0x00C0)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA11_TRGS_dual_edge_b2         ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA10_TRGS_mask_w               ((uint32_t)0x00300000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA10_TRGS_mask_h1              ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA10_TRGS_mask_b2              ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA10_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA10_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA10_TRGS_no_b2                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA10_TRGS_level_w              ((uint32_t)0x00100000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA10_TRGS_level_h1             ((uint16_t)0x0010)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA10_TRGS_level_b2             ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA10_TRGS_edge_w               ((uint32_t)0x00200000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA10_TRGS_edge_h1              ((uint16_t)0x0020)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA10_TRGS_edge_b2              ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA10_TRGS_dual_edge_w          ((uint32_t)0x00300000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA10_TRGS_dual_edge_h1         ((uint16_t)0x0030)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA10_TRGS_dual_edge_b2         ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA9_TRGS_mask_w                ((uint32_t)0x000C0000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA9_TRGS_mask_h1               ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA9_TRGS_mask_b2               ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA9_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA9_TRGS_no_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA9_TRGS_no_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA9_TRGS_level_w               ((uint32_t)0x00040000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA9_TRGS_level_h1              ((uint16_t)0x0004)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA9_TRGS_level_b2              ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA9_TRGS_edge_w                ((uint32_t)0x00080000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA9_TRGS_edge_h1               ((uint16_t)0x0008)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA9_TRGS_edge_b2               ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA9_TRGS_dual_edge_w           ((uint32_t)0x000C0000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA9_TRGS_dual_edge_h1          ((uint16_t)0x000C)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA9_TRGS_dual_edge_b2          ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA8_TRGS_mask_w                ((uint32_t)0x00030000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA8_TRGS_mask_h1               ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA8_TRGS_mask_b2               ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA8_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA8_TRGS_no_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA8_TRGS_no_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA8_TRGS_level_w               ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA8_TRGS_level_h1              ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA8_TRGS_level_b2              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA8_TRGS_edge_w                ((uint32_t)0x00020000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA8_TRGS_edge_h1               ((uint16_t)0x0002)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA8_TRGS_edge_b2               ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA8_TRGS_dual_edge_w           ((uint32_t)0x00030000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA8_TRGS_dual_edge_h1          ((uint16_t)0x0003)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA8_TRGS_dual_edge_b2          ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA7_TRGS_mask_w                ((uint32_t)0x0000C000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA7_TRGS_mask_h0               ((uint16_t)0xC000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA7_TRGS_mask_b1               ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA7_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA7_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA7_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA7_TRGS_level_w               ((uint32_t)0x00004000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA7_TRGS_level_h0              ((uint16_t)0x4000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA7_TRGS_level_b1              ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA7_TRGS_edge_w                ((uint32_t)0x00008000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA7_TRGS_edge_h0               ((uint16_t)0x8000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA7_TRGS_edge_b1               ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA7_TRGS_dual_edge_w           ((uint32_t)0x0000C000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA7_TRGS_dual_edge_h0          ((uint16_t)0xC000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA7_TRGS_dual_edge_b1          ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA6_TRGS_mask_w                ((uint32_t)0x00003000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA6_TRGS_mask_h0               ((uint16_t)0x3000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA6_TRGS_mask_b1               ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA6_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA6_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA6_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA6_TRGS_level_w               ((uint32_t)0x00001000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA6_TRGS_level_h0              ((uint16_t)0x1000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA6_TRGS_level_b1              ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA6_TRGS_edge_w                ((uint32_t)0x00002000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA6_TRGS_edge_h0               ((uint16_t)0x2000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA6_TRGS_edge_b1               ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA6_TRGS_dual_edge_w           ((uint32_t)0x00003000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA6_TRGS_dual_edge_h0          ((uint16_t)0x3000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA6_TRGS_dual_edge_b1          ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA5_TRGS_mask_w                ((uint32_t)0x00000C00)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA5_TRGS_mask_h0               ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA5_TRGS_mask_b1               ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA5_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA5_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA5_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA5_TRGS_level_w               ((uint32_t)0x00000400)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA5_TRGS_level_h0              ((uint16_t)0x0400)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA5_TRGS_level_b1              ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA5_TRGS_edge_w                ((uint32_t)0x00000800)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA5_TRGS_edge_h0               ((uint16_t)0x0800)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA5_TRGS_edge_b1               ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA5_TRGS_dual_edge_w           ((uint32_t)0x00000C00)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA5_TRGS_dual_edge_h0          ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA5_TRGS_dual_edge_b1          ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA4_TRGS_mask_w                ((uint32_t)0x00000300)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA4_TRGS_mask_h0               ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA4_TRGS_mask_b1               ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA4_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA4_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA4_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA4_TRGS_level_w               ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA4_TRGS_level_h0              ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA4_TRGS_level_b1              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA4_TRGS_edge_w                ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA4_TRGS_edge_h0               ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA4_TRGS_edge_b1               ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA4_TRGS_dual_edge_w           ((uint32_t)0x00000300)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA4_TRGS_dual_edge_h0          ((uint16_t)0x0300)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA4_TRGS_dual_edge_b1          ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA3_TRGS_mask_w                ((uint32_t)0x000000C0)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA3_TRGS_mask_h0               ((uint16_t)0x00C0)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA3_TRGS_mask_b0               ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA3_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA3_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA3_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA3_TRGS_level_w               ((uint32_t)0x00000040)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA3_TRGS_level_h0              ((uint16_t)0x0040)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA3_TRGS_level_b0              ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA3_TRGS_edge_w                ((uint32_t)0x00000080)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA3_TRGS_edge_h0               ((uint16_t)0x0080)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA3_TRGS_edge_b0               ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA3_TRGS_dual_edge_w           ((uint32_t)0x000000C0)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA3_TRGS_dual_edge_h0          ((uint16_t)0x00C0)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA3_TRGS_dual_edge_b0          ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA2_TRGS_mask_w                ((uint32_t)0x00000030)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA2_TRGS_mask_h0               ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA2_TRGS_mask_b0               ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA2_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA2_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA2_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA2_TRGS_level_w               ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA2_TRGS_level_h0              ((uint16_t)0x0010)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA2_TRGS_level_b0              ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA2_TRGS_edge_w                ((uint32_t)0x00000020)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA2_TRGS_edge_h0               ((uint16_t)0x0020)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA2_TRGS_edge_b0               ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA2_TRGS_dual_edge_w           ((uint32_t)0x00000030)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA2_TRGS_dual_edge_h0          ((uint16_t)0x0030)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA2_TRGS_dual_edge_b0          ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA1_TRGS_mask_w                ((uint32_t)0x0000000C)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA1_TRGS_mask_h0               ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA1_TRGS_mask_b0               ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA1_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA1_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA1_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA1_TRGS_level_w               ((uint32_t)0x00000004)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA1_TRGS_level_h0              ((uint16_t)0x0004)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA1_TRGS_level_b0              ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA1_TRGS_edge_w                ((uint32_t)0x00000008)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA1_TRGS_edge_h0               ((uint16_t)0x0008)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA1_TRGS_edge_b0               ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA1_TRGS_dual_edge_w           ((uint32_t)0x0000000C)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA1_TRGS_dual_edge_h0          ((uint16_t)0x000C)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA1_TRGS_dual_edge_b0          ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PA_TRGS_PA0_TRGS_mask_w                ((uint32_t)0x00000003)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_TRGS_PA0_TRGS_mask_h0               ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_TRGS_PA0_TRGS_mask_b0               ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_TRGS_PA0_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PA_TRGS_PA0_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PA_TRGS_PA0_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PA_TRGS_PA0_TRGS_level_w               ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PA_TRGS_PA0_TRGS_level_h0              ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PA_TRGS_PA0_TRGS_level_b0              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PA_TRGS_PA0_TRGS_edge_w                ((uint32_t)0x00000002)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PA_TRGS_PA0_TRGS_edge_h0               ((uint16_t)0x0002)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PA_TRGS_PA0_TRGS_edge_b0               ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PA_TRGS_PA0_TRGS_dual_edge_w           ((uint32_t)0x00000003)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PA_TRGS_PA0_TRGS_dual_edge_h0          ((uint16_t)0x0003)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PA_TRGS_PA0_TRGS_dual_edge_b0          ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_PA_MSK  [register's definitions]
N *              Offset[0x28]  EXIC PA AOI Mask register (0x50000028)
N ******************************************************************************
N */
N///@{
N#define EXIC_PA_MSK_default                         ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_PA_MSK */
N#define EXIC_PA_MSK_PA15_AM_mask_w                  ((uint32_t)0x80000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA15_AM_mask_h1                 ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA15_AM_mask_b3                 ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA15_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA15_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA15_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA15_AM_enable_w                ((uint32_t)0x80000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA15_AM_enable_h1               ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA15_AM_enable_b3               ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA14_AM_mask_w                  ((uint32_t)0x40000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA14_AM_mask_h1                 ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA14_AM_mask_b3                 ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA14_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA14_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA14_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA14_AM_enable_w                ((uint32_t)0x40000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA14_AM_enable_h1               ((uint16_t)0x4000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA14_AM_enable_b3               ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA13_AM_mask_w                  ((uint32_t)0x20000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA13_AM_mask_h1                 ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA13_AM_mask_b3                 ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA13_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA13_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA13_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA13_AM_enable_w                ((uint32_t)0x20000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA13_AM_enable_h1               ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA13_AM_enable_b3               ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA12_AM_mask_w                  ((uint32_t)0x10000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA12_AM_mask_h1                 ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA12_AM_mask_b3                 ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA12_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA12_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA12_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA12_AM_enable_w                ((uint32_t)0x10000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA12_AM_enable_h1               ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA12_AM_enable_b3               ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA11_AM_mask_w                  ((uint32_t)0x08000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA11_AM_mask_h1                 ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA11_AM_mask_b3                 ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA11_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA11_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA11_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA11_AM_enable_w                ((uint32_t)0x08000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA11_AM_enable_h1               ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA11_AM_enable_b3               ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA10_AM_mask_w                  ((uint32_t)0x04000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA10_AM_mask_h1                 ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA10_AM_mask_b3                 ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA10_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA10_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA10_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA10_AM_enable_w                ((uint32_t)0x04000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA10_AM_enable_h1               ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA10_AM_enable_b3               ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA9_AM_mask_w                   ((uint32_t)0x02000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA9_AM_mask_h1                  ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA9_AM_mask_b3                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA9_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA9_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA9_AM_disable_b3               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA9_AM_enable_w                 ((uint32_t)0x02000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA9_AM_enable_h1                ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA9_AM_enable_b3                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA8_AM_mask_w                   ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA8_AM_mask_h1                  ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA8_AM_mask_b3                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA8_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA8_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA8_AM_disable_b3               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA8_AM_enable_w                 ((uint32_t)0x01000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA8_AM_enable_h1                ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA8_AM_enable_b3                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA7_AM_mask_w                   ((uint32_t)0x00800000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA7_AM_mask_h1                  ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA7_AM_mask_b2                  ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA7_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA7_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA7_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA7_AM_enable_w                 ((uint32_t)0x00800000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA7_AM_enable_h1                ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA7_AM_enable_b2                ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA6_AM_mask_w                   ((uint32_t)0x00400000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA6_AM_mask_h1                  ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA6_AM_mask_b2                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA6_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA6_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA6_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA6_AM_enable_w                 ((uint32_t)0x00400000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA6_AM_enable_h1                ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA6_AM_enable_b2                ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA5_AM_mask_w                   ((uint32_t)0x00200000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA5_AM_mask_h1                  ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA5_AM_mask_b2                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA5_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA5_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA5_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA5_AM_enable_w                 ((uint32_t)0x00200000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA5_AM_enable_h1                ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA5_AM_enable_b2                ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA4_AM_mask_w                   ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA4_AM_mask_h1                  ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA4_AM_mask_b2                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA4_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA4_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA4_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA4_AM_enable_w                 ((uint32_t)0x00100000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA4_AM_enable_h1                ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA4_AM_enable_b2                ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA3_AM_mask_w                   ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA3_AM_mask_h1                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA3_AM_mask_b2                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA3_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA3_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA3_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA3_AM_enable_w                 ((uint32_t)0x00080000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA3_AM_enable_h1                ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA3_AM_enable_b2                ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA2_AM_mask_w                   ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA2_AM_mask_h1                  ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA2_AM_mask_b2                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA2_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA2_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA2_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA2_AM_enable_w                 ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA2_AM_enable_h1                ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA2_AM_enable_b2                ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA1_AM_mask_w                   ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA1_AM_mask_h1                  ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA1_AM_mask_b2                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA1_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA1_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA1_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA1_AM_enable_w                 ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA1_AM_enable_h1                ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA1_AM_enable_b2                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA0_AM_mask_w                   ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA0_AM_mask_h1                  ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA0_AM_mask_b2                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA0_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA0_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA0_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA0_AM_enable_w                 ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA0_AM_enable_h1                ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA0_AM_enable_b2                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA15_OM_mask_w                  ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA15_OM_mask_h0                 ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA15_OM_mask_b1                 ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA15_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA15_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA15_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA15_OM_enable_w                ((uint32_t)0x00008000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA15_OM_enable_h0               ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA15_OM_enable_b1               ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA14_OM_mask_w                  ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA14_OM_mask_h0                 ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA14_OM_mask_b1                 ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA14_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA14_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA14_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA14_OM_enable_w                ((uint32_t)0x00004000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA14_OM_enable_h0               ((uint16_t)0x4000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA14_OM_enable_b1               ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA13_OM_mask_w                  ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA13_OM_mask_h0                 ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA13_OM_mask_b1                 ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA13_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA13_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA13_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA13_OM_enable_w                ((uint32_t)0x00002000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA13_OM_enable_h0               ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA13_OM_enable_b1               ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA12_OM_mask_w                  ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA12_OM_mask_h0                 ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA12_OM_mask_b1                 ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA12_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA12_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA12_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA12_OM_enable_w                ((uint32_t)0x00001000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA12_OM_enable_h0               ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA12_OM_enable_b1               ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA11_OM_mask_w                  ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA11_OM_mask_h0                 ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA11_OM_mask_b1                 ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA11_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA11_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA11_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA11_OM_enable_w                ((uint32_t)0x00000800)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA11_OM_enable_h0               ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA11_OM_enable_b1               ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA10_OM_mask_w                  ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA10_OM_mask_h0                 ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA10_OM_mask_b1                 ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA10_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA10_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA10_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA10_OM_enable_w                ((uint32_t)0x00000400)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA10_OM_enable_h0               ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA10_OM_enable_b1               ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA9_OM_mask_w                   ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA9_OM_mask_h0                  ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA9_OM_mask_b1                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA9_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA9_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA9_OM_disable_b1               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA9_OM_enable_w                 ((uint32_t)0x00000200)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA9_OM_enable_h0                ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA9_OM_enable_b1                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA8_OM_mask_w                   ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA8_OM_mask_h0                  ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA8_OM_mask_b1                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA8_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA8_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA8_OM_disable_b1               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA8_OM_enable_w                 ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA8_OM_enable_h0                ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA8_OM_enable_b1                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA7_OM_mask_w                   ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA7_OM_mask_h0                  ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA7_OM_mask_b0                  ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA7_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA7_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA7_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA7_OM_enable_w                 ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA7_OM_enable_h0                ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA7_OM_enable_b0                ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA6_OM_mask_w                   ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA6_OM_mask_h0                  ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA6_OM_mask_b0                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA6_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA6_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA6_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA6_OM_enable_w                 ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA6_OM_enable_h0                ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA6_OM_enable_b0                ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA5_OM_mask_w                   ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA5_OM_mask_h0                  ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA5_OM_mask_b0                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA5_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA5_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA5_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA5_OM_enable_w                 ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA5_OM_enable_h0                ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA5_OM_enable_b0                ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA4_OM_mask_w                   ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA4_OM_mask_h0                  ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA4_OM_mask_b0                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA4_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA4_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA4_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA4_OM_enable_w                 ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA4_OM_enable_h0                ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA4_OM_enable_b0                ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA3_OM_mask_w                   ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA3_OM_mask_h0                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA3_OM_mask_b0                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA3_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA3_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA3_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA3_OM_enable_w                 ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA3_OM_enable_h0                ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA3_OM_enable_b0                ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA2_OM_mask_w                   ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA2_OM_mask_h0                  ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA2_OM_mask_b0                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA2_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA2_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA2_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA2_OM_enable_w                 ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA2_OM_enable_h0                ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA2_OM_enable_b0                ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA1_OM_mask_w                   ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA1_OM_mask_h0                  ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA1_OM_mask_b0                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA1_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA1_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA1_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA1_OM_enable_w                 ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA1_OM_enable_h0                ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA1_OM_enable_b0                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PA_MSK_PA0_OM_mask_w                   ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define EXIC_PA_MSK_PA0_OM_mask_h0                  ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_PA_MSK_PA0_OM_mask_b0                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PA_MSK_PA0_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PA_MSK_PA0_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PA_MSK_PA0_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PA_MSK_PA0_OM_enable_w                 ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PA_MSK_PA0_OM_enable_h0                ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PA_MSK_PA0_OM_enable_b0                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_PB_PF  [register's definitions]
N *              Offset[0x30]  EXIC PB input interrupt pending flag register (0x50000030)
N ******************************************************************************
N */
N///@{
N#define EXIC_PB_PF_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_PB_PF */
N#define EXIC_PB_PF_PB15_PF_mask_w                   ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB15_PF_mask_h0                  ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB15_PF_mask_b1                  ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB15_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB15_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB15_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB15_PF_happened_w               ((uint32_t)0x00008000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB15_PF_happened_h0              ((uint16_t)0x8000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB15_PF_happened_b1              ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB14_PF_mask_w                   ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB14_PF_mask_h0                  ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB14_PF_mask_b1                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB14_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB14_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB14_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB14_PF_happened_w               ((uint32_t)0x00004000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB14_PF_happened_h0              ((uint16_t)0x4000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB14_PF_happened_b1              ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB13_PF_mask_w                   ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB13_PF_mask_h0                  ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB13_PF_mask_b1                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB13_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB13_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB13_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB13_PF_happened_w               ((uint32_t)0x00002000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB13_PF_happened_h0              ((uint16_t)0x2000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB13_PF_happened_b1              ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB12_PF_mask_w                   ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB12_PF_mask_h0                  ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB12_PF_mask_b1                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB12_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB12_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB12_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB12_PF_happened_w               ((uint32_t)0x00001000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB12_PF_happened_h0              ((uint16_t)0x1000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB12_PF_happened_b1              ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB11_PF_mask_w                   ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB11_PF_mask_h0                  ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB11_PF_mask_b1                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB11_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB11_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB11_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB11_PF_happened_w               ((uint32_t)0x00000800)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB11_PF_happened_h0              ((uint16_t)0x0800)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB11_PF_happened_b1              ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB10_PF_mask_w                   ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB10_PF_mask_h0                  ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB10_PF_mask_b1                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB10_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB10_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB10_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB10_PF_happened_w               ((uint32_t)0x00000400)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB10_PF_happened_h0              ((uint16_t)0x0400)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB10_PF_happened_b1              ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB9_PF_mask_w                    ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB9_PF_mask_h0                   ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB9_PF_mask_b1                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB9_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB9_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB9_PF_normal_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB9_PF_happened_w                ((uint32_t)0x00000200)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB9_PF_happened_h0               ((uint16_t)0x0200)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB9_PF_happened_b1               ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB8_PF_mask_w                    ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB8_PF_mask_h0                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB8_PF_mask_b1                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB8_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB8_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB8_PF_normal_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB8_PF_happened_w                ((uint32_t)0x00000100)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB8_PF_happened_h0               ((uint16_t)0x0100)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB8_PF_happened_b1               ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB7_PF_mask_w                    ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB7_PF_mask_h0                   ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB7_PF_mask_b0                   ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB7_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB7_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB7_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB7_PF_happened_w                ((uint32_t)0x00000080)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB7_PF_happened_h0               ((uint16_t)0x0080)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB7_PF_happened_b0               ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB6_PF_mask_w                    ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB6_PF_mask_h0                   ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB6_PF_mask_b0                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB6_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB6_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB6_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB6_PF_happened_w                ((uint32_t)0x00000040)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB6_PF_happened_h0               ((uint16_t)0x0040)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB6_PF_happened_b0               ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB5_PF_mask_w                    ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB5_PF_mask_h0                   ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB5_PF_mask_b0                   ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB5_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB5_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB5_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB5_PF_happened_w                ((uint32_t)0x00000020)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB5_PF_happened_h0               ((uint16_t)0x0020)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB5_PF_happened_b0               ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB4_PF_mask_w                    ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB4_PF_mask_h0                   ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB4_PF_mask_b0                   ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB4_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB4_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB4_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB4_PF_happened_w                ((uint32_t)0x00000010)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB4_PF_happened_h0               ((uint16_t)0x0010)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB4_PF_happened_b0               ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB3_PF_mask_w                    ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB3_PF_mask_h0                   ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB3_PF_mask_b0                   ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB3_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB3_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB3_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB3_PF_happened_w                ((uint32_t)0x00000008)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB3_PF_happened_h0               ((uint16_t)0x0008)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB3_PF_happened_b0               ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB2_PF_mask_w                    ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB2_PF_mask_h0                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB2_PF_mask_b0                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB2_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB2_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB2_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB2_PF_happened_w                ((uint32_t)0x00000004)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB2_PF_happened_h0               ((uint16_t)0x0004)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB2_PF_happened_b0               ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB1_PF_mask_w                    ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB1_PF_mask_h0                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB1_PF_mask_b0                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB1_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB1_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB1_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB1_PF_happened_w                ((uint32_t)0x00000002)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB1_PF_happened_h0               ((uint16_t)0x0002)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB1_PF_happened_b0               ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PB_PF_PB0_PF_mask_w                    ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_PF_PB0_PF_mask_h0                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_PF_PB0_PF_mask_b0                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_PF_PB0_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PB_PF_PB0_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PB_PF_PB0_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PB_PF_PB0_PF_happened_w                ((uint32_t)0x00000001)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PB_PF_PB0_PF_happened_h0               ((uint16_t)0x0001)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PB_PF_PB0_PF_happened_b0               ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_PB_TRGS  [register's definitions]
N *              Offset[0x34]  EXIC PB Pad input trigger select register (0x50000034)
N ******************************************************************************
N */
N///@{
N#define EXIC_PB_TRGS_default                        ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_PB_TRGS */
N#define EXIC_PB_TRGS_PB15_TRGS_mask_w               ((uint32_t)0xC0000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB15_TRGS_mask_h1              ((uint16_t)0xC000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB15_TRGS_mask_b3              ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB15_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB15_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB15_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB15_TRGS_level_w              ((uint32_t)0x40000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB15_TRGS_level_h1             ((uint16_t)0x4000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB15_TRGS_level_b3             ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB15_TRGS_edge_w               ((uint32_t)0x80000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB15_TRGS_edge_h1              ((uint16_t)0x8000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB15_TRGS_edge_b3              ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB15_TRGS_dual_edge_w          ((uint32_t)0xC0000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB15_TRGS_dual_edge_h1         ((uint16_t)0xC000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB15_TRGS_dual_edge_b3         ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB14_TRGS_mask_w               ((uint32_t)0x30000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB14_TRGS_mask_h1              ((uint16_t)0x3000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB14_TRGS_mask_b3              ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB14_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB14_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB14_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB14_TRGS_level_w              ((uint32_t)0x10000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB14_TRGS_level_h1             ((uint16_t)0x1000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB14_TRGS_level_b3             ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB14_TRGS_edge_w               ((uint32_t)0x20000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB14_TRGS_edge_h1              ((uint16_t)0x2000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB14_TRGS_edge_b3              ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB14_TRGS_dual_edge_w          ((uint32_t)0x30000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB14_TRGS_dual_edge_h1         ((uint16_t)0x3000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB14_TRGS_dual_edge_b3         ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB13_TRGS_mask_w               ((uint32_t)0x0C000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB13_TRGS_mask_h1              ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB13_TRGS_mask_b3              ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB13_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB13_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB13_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB13_TRGS_level_w              ((uint32_t)0x04000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB13_TRGS_level_h1             ((uint16_t)0x0400)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB13_TRGS_level_b3             ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB13_TRGS_edge_w               ((uint32_t)0x08000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB13_TRGS_edge_h1              ((uint16_t)0x0800)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB13_TRGS_edge_b3              ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB13_TRGS_dual_edge_w          ((uint32_t)0x0C000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB13_TRGS_dual_edge_h1         ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB13_TRGS_dual_edge_b3         ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB12_TRGS_mask_w               ((uint32_t)0x03000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB12_TRGS_mask_h1              ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB12_TRGS_mask_b3              ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB12_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB12_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB12_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB12_TRGS_level_w              ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB12_TRGS_level_h1             ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB12_TRGS_level_b3             ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB12_TRGS_edge_w               ((uint32_t)0x02000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB12_TRGS_edge_h1              ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB12_TRGS_edge_b3              ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB12_TRGS_dual_edge_w          ((uint32_t)0x03000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB12_TRGS_dual_edge_h1         ((uint16_t)0x0300)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB12_TRGS_dual_edge_b3         ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB11_TRGS_mask_w               ((uint32_t)0x00C00000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB11_TRGS_mask_h1              ((uint16_t)0x00C0)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB11_TRGS_mask_b2              ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB11_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB11_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB11_TRGS_no_b2                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB11_TRGS_level_w              ((uint32_t)0x00400000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB11_TRGS_level_h1             ((uint16_t)0x0040)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB11_TRGS_level_b2             ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB11_TRGS_edge_w               ((uint32_t)0x00800000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB11_TRGS_edge_h1              ((uint16_t)0x0080)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB11_TRGS_edge_b2              ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB11_TRGS_dual_edge_w          ((uint32_t)0x00C00000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB11_TRGS_dual_edge_h1         ((uint16_t)0x00C0)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB11_TRGS_dual_edge_b2         ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB10_TRGS_mask_w               ((uint32_t)0x00300000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB10_TRGS_mask_h1              ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB10_TRGS_mask_b2              ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB10_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB10_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB10_TRGS_no_b2                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB10_TRGS_level_w              ((uint32_t)0x00100000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB10_TRGS_level_h1             ((uint16_t)0x0010)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB10_TRGS_level_b2             ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB10_TRGS_edge_w               ((uint32_t)0x00200000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB10_TRGS_edge_h1              ((uint16_t)0x0020)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB10_TRGS_edge_b2              ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB10_TRGS_dual_edge_w          ((uint32_t)0x00300000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB10_TRGS_dual_edge_h1         ((uint16_t)0x0030)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB10_TRGS_dual_edge_b2         ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB9_TRGS_mask_w                ((uint32_t)0x000C0000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB9_TRGS_mask_h1               ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB9_TRGS_mask_b2               ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB9_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB9_TRGS_no_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB9_TRGS_no_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB9_TRGS_level_w               ((uint32_t)0x00040000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB9_TRGS_level_h1              ((uint16_t)0x0004)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB9_TRGS_level_b2              ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB9_TRGS_edge_w                ((uint32_t)0x00080000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB9_TRGS_edge_h1               ((uint16_t)0x0008)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB9_TRGS_edge_b2               ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB9_TRGS_dual_edge_w           ((uint32_t)0x000C0000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB9_TRGS_dual_edge_h1          ((uint16_t)0x000C)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB9_TRGS_dual_edge_b2          ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB8_TRGS_mask_w                ((uint32_t)0x00030000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB8_TRGS_mask_h1               ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB8_TRGS_mask_b2               ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB8_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB8_TRGS_no_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB8_TRGS_no_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB8_TRGS_level_w               ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB8_TRGS_level_h1              ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB8_TRGS_level_b2              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB8_TRGS_edge_w                ((uint32_t)0x00020000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB8_TRGS_edge_h1               ((uint16_t)0x0002)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB8_TRGS_edge_b2               ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB8_TRGS_dual_edge_w           ((uint32_t)0x00030000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB8_TRGS_dual_edge_h1          ((uint16_t)0x0003)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB8_TRGS_dual_edge_b2          ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB7_TRGS_mask_w                ((uint32_t)0x0000C000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB7_TRGS_mask_h0               ((uint16_t)0xC000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB7_TRGS_mask_b1               ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB7_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB7_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB7_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB7_TRGS_level_w               ((uint32_t)0x00004000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB7_TRGS_level_h0              ((uint16_t)0x4000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB7_TRGS_level_b1              ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB7_TRGS_edge_w                ((uint32_t)0x00008000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB7_TRGS_edge_h0               ((uint16_t)0x8000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB7_TRGS_edge_b1               ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB7_TRGS_dual_edge_w           ((uint32_t)0x0000C000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB7_TRGS_dual_edge_h0          ((uint16_t)0xC000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB7_TRGS_dual_edge_b1          ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB6_TRGS_mask_w                ((uint32_t)0x00003000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB6_TRGS_mask_h0               ((uint16_t)0x3000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB6_TRGS_mask_b1               ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB6_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB6_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB6_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB6_TRGS_level_w               ((uint32_t)0x00001000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB6_TRGS_level_h0              ((uint16_t)0x1000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB6_TRGS_level_b1              ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB6_TRGS_edge_w                ((uint32_t)0x00002000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB6_TRGS_edge_h0               ((uint16_t)0x2000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB6_TRGS_edge_b1               ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB6_TRGS_dual_edge_w           ((uint32_t)0x00003000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB6_TRGS_dual_edge_h0          ((uint16_t)0x3000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB6_TRGS_dual_edge_b1          ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB5_TRGS_mask_w                ((uint32_t)0x00000C00)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB5_TRGS_mask_h0               ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB5_TRGS_mask_b1               ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB5_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB5_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB5_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB5_TRGS_level_w               ((uint32_t)0x00000400)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB5_TRGS_level_h0              ((uint16_t)0x0400)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB5_TRGS_level_b1              ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB5_TRGS_edge_w                ((uint32_t)0x00000800)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB5_TRGS_edge_h0               ((uint16_t)0x0800)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB5_TRGS_edge_b1               ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB5_TRGS_dual_edge_w           ((uint32_t)0x00000C00)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB5_TRGS_dual_edge_h0          ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB5_TRGS_dual_edge_b1          ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB4_TRGS_mask_w                ((uint32_t)0x00000300)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB4_TRGS_mask_h0               ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB4_TRGS_mask_b1               ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB4_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB4_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB4_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB4_TRGS_level_w               ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB4_TRGS_level_h0              ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB4_TRGS_level_b1              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB4_TRGS_edge_w                ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB4_TRGS_edge_h0               ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB4_TRGS_edge_b1               ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB4_TRGS_dual_edge_w           ((uint32_t)0x00000300)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB4_TRGS_dual_edge_h0          ((uint16_t)0x0300)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB4_TRGS_dual_edge_b1          ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB3_TRGS_mask_w                ((uint32_t)0x000000C0)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB3_TRGS_mask_h0               ((uint16_t)0x00C0)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB3_TRGS_mask_b0               ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB3_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB3_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB3_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB3_TRGS_level_w               ((uint32_t)0x00000040)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB3_TRGS_level_h0              ((uint16_t)0x0040)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB3_TRGS_level_b0              ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB3_TRGS_edge_w                ((uint32_t)0x00000080)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB3_TRGS_edge_h0               ((uint16_t)0x0080)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB3_TRGS_edge_b0               ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB3_TRGS_dual_edge_w           ((uint32_t)0x000000C0)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB3_TRGS_dual_edge_h0          ((uint16_t)0x00C0)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB3_TRGS_dual_edge_b0          ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB2_TRGS_mask_w                ((uint32_t)0x00000030)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB2_TRGS_mask_h0               ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB2_TRGS_mask_b0               ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB2_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB2_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB2_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB2_TRGS_level_w               ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB2_TRGS_level_h0              ((uint16_t)0x0010)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB2_TRGS_level_b0              ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB2_TRGS_edge_w                ((uint32_t)0x00000020)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB2_TRGS_edge_h0               ((uint16_t)0x0020)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB2_TRGS_edge_b0               ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB2_TRGS_dual_edge_w           ((uint32_t)0x00000030)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB2_TRGS_dual_edge_h0          ((uint16_t)0x0030)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB2_TRGS_dual_edge_b0          ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB1_TRGS_mask_w                ((uint32_t)0x0000000C)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB1_TRGS_mask_h0               ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB1_TRGS_mask_b0               ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB1_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB1_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB1_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB1_TRGS_level_w               ((uint32_t)0x00000004)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB1_TRGS_level_h0              ((uint16_t)0x0004)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB1_TRGS_level_b0              ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB1_TRGS_edge_w                ((uint32_t)0x00000008)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB1_TRGS_edge_h0               ((uint16_t)0x0008)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB1_TRGS_edge_b0               ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB1_TRGS_dual_edge_w           ((uint32_t)0x0000000C)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB1_TRGS_dual_edge_h0          ((uint16_t)0x000C)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB1_TRGS_dual_edge_b0          ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PB_TRGS_PB0_TRGS_mask_w                ((uint32_t)0x00000003)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_TRGS_PB0_TRGS_mask_h0               ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_TRGS_PB0_TRGS_mask_b0               ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_TRGS_PB0_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PB_TRGS_PB0_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PB_TRGS_PB0_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PB_TRGS_PB0_TRGS_level_w               ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PB_TRGS_PB0_TRGS_level_h0              ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PB_TRGS_PB0_TRGS_level_b0              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PB_TRGS_PB0_TRGS_edge_w                ((uint32_t)0x00000002)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PB_TRGS_PB0_TRGS_edge_h0               ((uint16_t)0x0002)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PB_TRGS_PB0_TRGS_edge_b0               ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PB_TRGS_PB0_TRGS_dual_edge_w           ((uint32_t)0x00000003)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PB_TRGS_PB0_TRGS_dual_edge_h0          ((uint16_t)0x0003)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PB_TRGS_PB0_TRGS_dual_edge_b0          ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_PB_MSK  [register's definitions]
N *              Offset[0x38]  EXIC PB AOI Mask register (0x50000038)
N ******************************************************************************
N */
N///@{
N#define EXIC_PB_MSK_default                         ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_PB_MSK */
N#define EXIC_PB_MSK_PB15_AM_mask_w                  ((uint32_t)0x80000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB15_AM_mask_h1                 ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB15_AM_mask_b3                 ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB15_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB15_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB15_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB15_AM_enable_w                ((uint32_t)0x80000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB15_AM_enable_h1               ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB15_AM_enable_b3               ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB14_AM_mask_w                  ((uint32_t)0x40000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB14_AM_mask_h1                 ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB14_AM_mask_b3                 ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB14_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB14_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB14_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB14_AM_enable_w                ((uint32_t)0x40000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB14_AM_enable_h1               ((uint16_t)0x4000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB14_AM_enable_b3               ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB13_AM_mask_w                  ((uint32_t)0x20000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB13_AM_mask_h1                 ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB13_AM_mask_b3                 ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB13_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB13_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB13_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB13_AM_enable_w                ((uint32_t)0x20000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB13_AM_enable_h1               ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB13_AM_enable_b3               ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB12_AM_mask_w                  ((uint32_t)0x10000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB12_AM_mask_h1                 ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB12_AM_mask_b3                 ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB12_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB12_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB12_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB12_AM_enable_w                ((uint32_t)0x10000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB12_AM_enable_h1               ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB12_AM_enable_b3               ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB11_AM_mask_w                  ((uint32_t)0x08000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB11_AM_mask_h1                 ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB11_AM_mask_b3                 ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB11_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB11_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB11_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB11_AM_enable_w                ((uint32_t)0x08000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB11_AM_enable_h1               ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB11_AM_enable_b3               ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB10_AM_mask_w                  ((uint32_t)0x04000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB10_AM_mask_h1                 ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB10_AM_mask_b3                 ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB10_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB10_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB10_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB10_AM_enable_w                ((uint32_t)0x04000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB10_AM_enable_h1               ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB10_AM_enable_b3               ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB9_AM_mask_w                   ((uint32_t)0x02000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB9_AM_mask_h1                  ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB9_AM_mask_b3                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB9_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB9_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB9_AM_disable_b3               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB9_AM_enable_w                 ((uint32_t)0x02000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB9_AM_enable_h1                ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB9_AM_enable_b3                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB8_AM_mask_w                   ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB8_AM_mask_h1                  ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB8_AM_mask_b3                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB8_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB8_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB8_AM_disable_b3               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB8_AM_enable_w                 ((uint32_t)0x01000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB8_AM_enable_h1                ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB8_AM_enable_b3                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB7_AM_mask_w                   ((uint32_t)0x00800000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB7_AM_mask_h1                  ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB7_AM_mask_b2                  ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB7_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB7_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB7_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB7_AM_enable_w                 ((uint32_t)0x00800000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB7_AM_enable_h1                ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB7_AM_enable_b2                ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB6_AM_mask_w                   ((uint32_t)0x00400000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB6_AM_mask_h1                  ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB6_AM_mask_b2                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB6_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB6_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB6_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB6_AM_enable_w                 ((uint32_t)0x00400000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB6_AM_enable_h1                ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB6_AM_enable_b2                ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB5_AM_mask_w                   ((uint32_t)0x00200000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB5_AM_mask_h1                  ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB5_AM_mask_b2                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB5_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB5_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB5_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB5_AM_enable_w                 ((uint32_t)0x00200000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB5_AM_enable_h1                ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB5_AM_enable_b2                ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB4_AM_mask_w                   ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB4_AM_mask_h1                  ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB4_AM_mask_b2                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB4_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB4_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB4_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB4_AM_enable_w                 ((uint32_t)0x00100000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB4_AM_enable_h1                ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB4_AM_enable_b2                ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB3_AM_mask_w                   ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB3_AM_mask_h1                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB3_AM_mask_b2                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB3_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB3_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB3_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB3_AM_enable_w                 ((uint32_t)0x00080000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB3_AM_enable_h1                ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB3_AM_enable_b2                ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB2_AM_mask_w                   ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB2_AM_mask_h1                  ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB2_AM_mask_b2                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB2_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB2_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB2_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB2_AM_enable_w                 ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB2_AM_enable_h1                ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB2_AM_enable_b2                ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB1_AM_mask_w                   ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB1_AM_mask_h1                  ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB1_AM_mask_b2                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB1_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB1_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB1_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB1_AM_enable_w                 ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB1_AM_enable_h1                ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB1_AM_enable_b2                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB0_AM_mask_w                   ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB0_AM_mask_h1                  ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB0_AM_mask_b2                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB0_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB0_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB0_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB0_AM_enable_w                 ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB0_AM_enable_h1                ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB0_AM_enable_b2                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB15_OM_mask_w                  ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB15_OM_mask_h0                 ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB15_OM_mask_b1                 ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB15_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB15_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB15_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB15_OM_enable_w                ((uint32_t)0x00008000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB15_OM_enable_h0               ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB15_OM_enable_b1               ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB14_OM_mask_w                  ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB14_OM_mask_h0                 ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB14_OM_mask_b1                 ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB14_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB14_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB14_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB14_OM_enable_w                ((uint32_t)0x00004000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB14_OM_enable_h0               ((uint16_t)0x4000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB14_OM_enable_b1               ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB13_OM_mask_w                  ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB13_OM_mask_h0                 ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB13_OM_mask_b1                 ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB13_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB13_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB13_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB13_OM_enable_w                ((uint32_t)0x00002000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB13_OM_enable_h0               ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB13_OM_enable_b1               ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB12_OM_mask_w                  ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB12_OM_mask_h0                 ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB12_OM_mask_b1                 ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB12_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB12_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB12_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB12_OM_enable_w                ((uint32_t)0x00001000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB12_OM_enable_h0               ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB12_OM_enable_b1               ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB11_OM_mask_w                  ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB11_OM_mask_h0                 ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB11_OM_mask_b1                 ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB11_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB11_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB11_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB11_OM_enable_w                ((uint32_t)0x00000800)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB11_OM_enable_h0               ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB11_OM_enable_b1               ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB10_OM_mask_w                  ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB10_OM_mask_h0                 ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB10_OM_mask_b1                 ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB10_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB10_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB10_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB10_OM_enable_w                ((uint32_t)0x00000400)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB10_OM_enable_h0               ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB10_OM_enable_b1               ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB9_OM_mask_w                   ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB9_OM_mask_h0                  ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB9_OM_mask_b1                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB9_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB9_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB9_OM_disable_b1               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB9_OM_enable_w                 ((uint32_t)0x00000200)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB9_OM_enable_h0                ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB9_OM_enable_b1                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB8_OM_mask_w                   ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB8_OM_mask_h0                  ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB8_OM_mask_b1                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB8_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB8_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB8_OM_disable_b1               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB8_OM_enable_w                 ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB8_OM_enable_h0                ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB8_OM_enable_b1                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB7_OM_mask_w                   ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB7_OM_mask_h0                  ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB7_OM_mask_b0                  ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB7_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB7_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB7_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB7_OM_enable_w                 ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB7_OM_enable_h0                ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB7_OM_enable_b0                ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB6_OM_mask_w                   ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB6_OM_mask_h0                  ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB6_OM_mask_b0                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB6_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB6_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB6_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB6_OM_enable_w                 ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB6_OM_enable_h0                ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB6_OM_enable_b0                ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB5_OM_mask_w                   ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB5_OM_mask_h0                  ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB5_OM_mask_b0                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB5_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB5_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB5_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB5_OM_enable_w                 ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB5_OM_enable_h0                ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB5_OM_enable_b0                ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB4_OM_mask_w                   ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB4_OM_mask_h0                  ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB4_OM_mask_b0                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB4_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB4_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB4_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB4_OM_enable_w                 ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB4_OM_enable_h0                ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB4_OM_enable_b0                ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB3_OM_mask_w                   ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB3_OM_mask_h0                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB3_OM_mask_b0                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB3_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB3_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB3_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB3_OM_enable_w                 ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB3_OM_enable_h0                ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB3_OM_enable_b0                ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB2_OM_mask_w                   ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB2_OM_mask_h0                  ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB2_OM_mask_b0                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB2_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB2_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB2_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB2_OM_enable_w                 ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB2_OM_enable_h0                ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB2_OM_enable_b0                ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB1_OM_mask_w                   ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB1_OM_mask_h0                  ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB1_OM_mask_b0                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB1_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB1_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB1_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB1_OM_enable_w                 ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB1_OM_enable_h0                ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB1_OM_enable_b0                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PB_MSK_PB0_OM_mask_w                   ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define EXIC_PB_MSK_PB0_OM_mask_h0                  ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_PB_MSK_PB0_OM_mask_b0                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PB_MSK_PB0_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PB_MSK_PB0_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PB_MSK_PB0_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PB_MSK_PB0_OM_enable_w                 ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PB_MSK_PB0_OM_enable_h0                ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PB_MSK_PB0_OM_enable_b0                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_PC_PF  [register's definitions]
N *              Offset[0x40]  EXIC PC input interrupt pending flag register (0x50000040)
N ******************************************************************************
N */
N///@{
N#define EXIC_PC_PF_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_PC_PF */
N#define EXIC_PC_PF_PC14_PF_mask_w                   ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC14_PF_mask_h0                  ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC14_PF_mask_b1                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC14_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC14_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC14_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC14_PF_happened_w               ((uint32_t)0x00004000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC14_PF_happened_h0              ((uint16_t)0x4000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC14_PF_happened_b1              ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC13_PF_mask_w                   ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC13_PF_mask_h0                  ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC13_PF_mask_b1                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC13_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC13_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC13_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC13_PF_happened_w               ((uint32_t)0x00002000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC13_PF_happened_h0              ((uint16_t)0x2000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC13_PF_happened_b1              ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC12_PF_mask_w                   ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC12_PF_mask_h0                  ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC12_PF_mask_b1                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC12_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC12_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC12_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC12_PF_happened_w               ((uint32_t)0x00001000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC12_PF_happened_h0              ((uint16_t)0x1000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC12_PF_happened_b1              ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC11_PF_mask_w                   ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC11_PF_mask_h0                  ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC11_PF_mask_b1                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC11_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC11_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC11_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC11_PF_happened_w               ((uint32_t)0x00000800)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC11_PF_happened_h0              ((uint16_t)0x0800)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC11_PF_happened_b1              ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC10_PF_mask_w                   ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC10_PF_mask_h0                  ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC10_PF_mask_b1                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC10_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC10_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC10_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC10_PF_happened_w               ((uint32_t)0x00000400)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC10_PF_happened_h0              ((uint16_t)0x0400)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC10_PF_happened_b1              ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC9_PF_mask_w                    ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC9_PF_mask_h0                   ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC9_PF_mask_b1                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC9_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC9_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC9_PF_normal_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC9_PF_happened_w                ((uint32_t)0x00000200)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC9_PF_happened_h0               ((uint16_t)0x0200)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC9_PF_happened_b1               ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC8_PF_mask_w                    ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC8_PF_mask_h0                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC8_PF_mask_b1                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC8_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC8_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC8_PF_normal_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC8_PF_happened_w                ((uint32_t)0x00000100)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC8_PF_happened_h0               ((uint16_t)0x0100)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC8_PF_happened_b1               ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC7_PF_mask_w                    ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC7_PF_mask_h0                   ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC7_PF_mask_b0                   ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC7_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC7_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC7_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC7_PF_happened_w                ((uint32_t)0x00000080)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC7_PF_happened_h0               ((uint16_t)0x0080)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC7_PF_happened_b0               ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC6_PF_mask_w                    ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC6_PF_mask_h0                   ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC6_PF_mask_b0                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC6_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC6_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC6_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC6_PF_happened_w                ((uint32_t)0x00000040)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC6_PF_happened_h0               ((uint16_t)0x0040)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC6_PF_happened_b0               ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC5_PF_mask_w                    ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC5_PF_mask_h0                   ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC5_PF_mask_b0                   ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC5_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC5_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC5_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC5_PF_happened_w                ((uint32_t)0x00000020)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC5_PF_happened_h0               ((uint16_t)0x0020)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC5_PF_happened_b0               ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC4_PF_mask_w                    ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC4_PF_mask_h0                   ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC4_PF_mask_b0                   ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC4_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC4_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC4_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC4_PF_happened_w                ((uint32_t)0x00000010)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC4_PF_happened_h0               ((uint16_t)0x0010)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC4_PF_happened_b0               ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC3_PF_mask_w                    ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC3_PF_mask_h0                   ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC3_PF_mask_b0                   ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC3_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC3_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC3_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC3_PF_happened_w                ((uint32_t)0x00000008)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC3_PF_happened_h0               ((uint16_t)0x0008)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC3_PF_happened_b0               ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC2_PF_mask_w                    ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC2_PF_mask_h0                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC2_PF_mask_b0                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC2_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC2_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC2_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC2_PF_happened_w                ((uint32_t)0x00000004)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC2_PF_happened_h0               ((uint16_t)0x0004)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC2_PF_happened_b0               ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC1_PF_mask_w                    ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC1_PF_mask_h0                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC1_PF_mask_b0                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC1_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC1_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC1_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC1_PF_happened_w                ((uint32_t)0x00000002)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC1_PF_happened_h0               ((uint16_t)0x0002)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC1_PF_happened_b0               ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PC_PF_PC0_PF_mask_w                    ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_PF_PC0_PF_mask_h0                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_PF_PC0_PF_mask_b0                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_PF_PC0_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PC_PF_PC0_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PC_PF_PC0_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PC_PF_PC0_PF_happened_w                ((uint32_t)0x00000001)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PC_PF_PC0_PF_happened_h0               ((uint16_t)0x0001)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PC_PF_PC0_PF_happened_b0               ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_PC_TRGS  [register's definitions]
N *              Offset[0x44]  EXIC PC Pad input trigger select register (0x50000044)
N ******************************************************************************
N */
N///@{
N#define EXIC_PC_TRGS_default                        ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_PC_TRGS */
N#define EXIC_PC_TRGS_PC14_TRGS_mask_w               ((uint32_t)0x30000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC14_TRGS_mask_h1              ((uint16_t)0x3000)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC14_TRGS_mask_b3              ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC14_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC14_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC14_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC14_TRGS_level_w              ((uint32_t)0x10000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC14_TRGS_level_h1             ((uint16_t)0x1000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC14_TRGS_level_b3             ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC14_TRGS_edge_w               ((uint32_t)0x20000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC14_TRGS_edge_h1              ((uint16_t)0x2000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC14_TRGS_edge_b3              ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC14_TRGS_dual_edge_w          ((uint32_t)0x30000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC14_TRGS_dual_edge_h1         ((uint16_t)0x3000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC14_TRGS_dual_edge_b3         ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC13_TRGS_mask_w               ((uint32_t)0x0C000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC13_TRGS_mask_h1              ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC13_TRGS_mask_b3              ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC13_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC13_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC13_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC13_TRGS_level_w              ((uint32_t)0x04000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC13_TRGS_level_h1             ((uint16_t)0x0400)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC13_TRGS_level_b3             ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC13_TRGS_edge_w               ((uint32_t)0x08000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC13_TRGS_edge_h1              ((uint16_t)0x0800)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC13_TRGS_edge_b3              ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC13_TRGS_dual_edge_w          ((uint32_t)0x0C000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC13_TRGS_dual_edge_h1         ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC13_TRGS_dual_edge_b3         ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC12_TRGS_mask_w               ((uint32_t)0x03000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC12_TRGS_mask_h1              ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC12_TRGS_mask_b3              ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC12_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC12_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC12_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC12_TRGS_level_w              ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC12_TRGS_level_h1             ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC12_TRGS_level_b3             ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC12_TRGS_edge_w               ((uint32_t)0x02000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC12_TRGS_edge_h1              ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC12_TRGS_edge_b3              ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC12_TRGS_dual_edge_w          ((uint32_t)0x03000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC12_TRGS_dual_edge_h1         ((uint16_t)0x0300)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC12_TRGS_dual_edge_b3         ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC11_TRGS_mask_w               ((uint32_t)0x00C00000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC11_TRGS_mask_h1              ((uint16_t)0x00C0)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC11_TRGS_mask_b2              ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC11_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC11_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC11_TRGS_no_b2                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC11_TRGS_level_w              ((uint32_t)0x00400000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC11_TRGS_level_h1             ((uint16_t)0x0040)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC11_TRGS_level_b2             ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC11_TRGS_edge_w               ((uint32_t)0x00800000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC11_TRGS_edge_h1              ((uint16_t)0x0080)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC11_TRGS_edge_b2              ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC11_TRGS_dual_edge_w          ((uint32_t)0x00C00000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC11_TRGS_dual_edge_h1         ((uint16_t)0x00C0)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC11_TRGS_dual_edge_b2         ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC10_TRGS_mask_w               ((uint32_t)0x00300000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC10_TRGS_mask_h1              ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC10_TRGS_mask_b2              ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC10_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC10_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC10_TRGS_no_b2                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC10_TRGS_level_w              ((uint32_t)0x00100000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC10_TRGS_level_h1             ((uint16_t)0x0010)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC10_TRGS_level_b2             ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC10_TRGS_edge_w               ((uint32_t)0x00200000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC10_TRGS_edge_h1              ((uint16_t)0x0020)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC10_TRGS_edge_b2              ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC10_TRGS_dual_edge_w          ((uint32_t)0x00300000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC10_TRGS_dual_edge_h1         ((uint16_t)0x0030)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC10_TRGS_dual_edge_b2         ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC9_TRGS_mask_w                ((uint32_t)0x000C0000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC9_TRGS_mask_h1               ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC9_TRGS_mask_b2               ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC9_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC9_TRGS_no_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC9_TRGS_no_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC9_TRGS_level_w               ((uint32_t)0x00040000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC9_TRGS_level_h1              ((uint16_t)0x0004)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC9_TRGS_level_b2              ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC9_TRGS_edge_w                ((uint32_t)0x00080000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC9_TRGS_edge_h1               ((uint16_t)0x0008)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC9_TRGS_edge_b2               ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC9_TRGS_dual_edge_w           ((uint32_t)0x000C0000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC9_TRGS_dual_edge_h1          ((uint16_t)0x000C)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC9_TRGS_dual_edge_b2          ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC8_TRGS_mask_w                ((uint32_t)0x00030000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC8_TRGS_mask_h1               ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC8_TRGS_mask_b2               ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC8_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC8_TRGS_no_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC8_TRGS_no_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC8_TRGS_level_w               ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC8_TRGS_level_h1              ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC8_TRGS_level_b2              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC8_TRGS_edge_w                ((uint32_t)0x00020000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC8_TRGS_edge_h1               ((uint16_t)0x0002)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC8_TRGS_edge_b2               ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC8_TRGS_dual_edge_w           ((uint32_t)0x00030000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC8_TRGS_dual_edge_h1          ((uint16_t)0x0003)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC8_TRGS_dual_edge_b2          ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC7_TRGS_mask_w                ((uint32_t)0x0000C000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC7_TRGS_mask_h0               ((uint16_t)0xC000)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC7_TRGS_mask_b1               ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC7_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC7_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC7_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC7_TRGS_level_w               ((uint32_t)0x00004000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC7_TRGS_level_h0              ((uint16_t)0x4000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC7_TRGS_level_b1              ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC7_TRGS_edge_w                ((uint32_t)0x00008000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC7_TRGS_edge_h0               ((uint16_t)0x8000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC7_TRGS_edge_b1               ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC7_TRGS_dual_edge_w           ((uint32_t)0x0000C000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC7_TRGS_dual_edge_h0          ((uint16_t)0xC000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC7_TRGS_dual_edge_b1          ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC6_TRGS_mask_w                ((uint32_t)0x00003000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC6_TRGS_mask_h0               ((uint16_t)0x3000)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC6_TRGS_mask_b1               ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC6_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC6_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC6_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC6_TRGS_level_w               ((uint32_t)0x00001000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC6_TRGS_level_h0              ((uint16_t)0x1000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC6_TRGS_level_b1              ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC6_TRGS_edge_w                ((uint32_t)0x00002000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC6_TRGS_edge_h0               ((uint16_t)0x2000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC6_TRGS_edge_b1               ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC6_TRGS_dual_edge_w           ((uint32_t)0x00003000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC6_TRGS_dual_edge_h0          ((uint16_t)0x3000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC6_TRGS_dual_edge_b1          ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC5_TRGS_mask_w                ((uint32_t)0x00000C00)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC5_TRGS_mask_h0               ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC5_TRGS_mask_b1               ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC5_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC5_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC5_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC5_TRGS_level_w               ((uint32_t)0x00000400)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC5_TRGS_level_h0              ((uint16_t)0x0400)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC5_TRGS_level_b1              ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC5_TRGS_edge_w                ((uint32_t)0x00000800)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC5_TRGS_edge_h0               ((uint16_t)0x0800)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC5_TRGS_edge_b1               ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC5_TRGS_dual_edge_w           ((uint32_t)0x00000C00)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC5_TRGS_dual_edge_h0          ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC5_TRGS_dual_edge_b1          ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC4_TRGS_mask_w                ((uint32_t)0x00000300)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC4_TRGS_mask_h0               ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC4_TRGS_mask_b1               ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC4_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC4_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC4_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC4_TRGS_level_w               ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC4_TRGS_level_h0              ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC4_TRGS_level_b1              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC4_TRGS_edge_w                ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC4_TRGS_edge_h0               ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC4_TRGS_edge_b1               ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC4_TRGS_dual_edge_w           ((uint32_t)0x00000300)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC4_TRGS_dual_edge_h0          ((uint16_t)0x0300)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC4_TRGS_dual_edge_b1          ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC3_TRGS_mask_w                ((uint32_t)0x000000C0)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC3_TRGS_mask_h0               ((uint16_t)0x00C0)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC3_TRGS_mask_b0               ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC3_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC3_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC3_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC3_TRGS_level_w               ((uint32_t)0x00000040)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC3_TRGS_level_h0              ((uint16_t)0x0040)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC3_TRGS_level_b0              ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC3_TRGS_edge_w                ((uint32_t)0x00000080)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC3_TRGS_edge_h0               ((uint16_t)0x0080)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC3_TRGS_edge_b0               ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC3_TRGS_dual_edge_w           ((uint32_t)0x000000C0)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC3_TRGS_dual_edge_h0          ((uint16_t)0x00C0)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC3_TRGS_dual_edge_b0          ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC2_TRGS_mask_w                ((uint32_t)0x00000030)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC2_TRGS_mask_h0               ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC2_TRGS_mask_b0               ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC2_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC2_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC2_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC2_TRGS_level_w               ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC2_TRGS_level_h0              ((uint16_t)0x0010)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC2_TRGS_level_b0              ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC2_TRGS_edge_w                ((uint32_t)0x00000020)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC2_TRGS_edge_h0               ((uint16_t)0x0020)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC2_TRGS_edge_b0               ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC2_TRGS_dual_edge_w           ((uint32_t)0x00000030)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC2_TRGS_dual_edge_h0          ((uint16_t)0x0030)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC2_TRGS_dual_edge_b0          ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC1_TRGS_mask_w                ((uint32_t)0x0000000C)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC1_TRGS_mask_h0               ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC1_TRGS_mask_b0               ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC1_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC1_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC1_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC1_TRGS_level_w               ((uint32_t)0x00000004)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC1_TRGS_level_h0              ((uint16_t)0x0004)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC1_TRGS_level_b0              ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC1_TRGS_edge_w                ((uint32_t)0x00000008)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC1_TRGS_edge_h0               ((uint16_t)0x0008)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC1_TRGS_edge_b0               ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC1_TRGS_dual_edge_w           ((uint32_t)0x0000000C)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC1_TRGS_dual_edge_h0          ((uint16_t)0x000C)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC1_TRGS_dual_edge_b0          ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PC_TRGS_PC0_TRGS_mask_w                ((uint32_t)0x00000003)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_TRGS_PC0_TRGS_mask_h0               ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_TRGS_PC0_TRGS_mask_b0               ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_TRGS_PC0_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PC_TRGS_PC0_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PC_TRGS_PC0_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PC_TRGS_PC0_TRGS_level_w               ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PC_TRGS_PC0_TRGS_level_h0              ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PC_TRGS_PC0_TRGS_level_b0              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PC_TRGS_PC0_TRGS_edge_w                ((uint32_t)0x00000002)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PC_TRGS_PC0_TRGS_edge_h0               ((uint16_t)0x0002)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PC_TRGS_PC0_TRGS_edge_b0               ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PC_TRGS_PC0_TRGS_dual_edge_w           ((uint32_t)0x00000003)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PC_TRGS_PC0_TRGS_dual_edge_h0          ((uint16_t)0x0003)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PC_TRGS_PC0_TRGS_dual_edge_b0          ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_PC_MSK  [register's definitions]
N *              Offset[0x48]  EXIC  PC AOI Mask register (0x50000048)
N ******************************************************************************
N */
N///@{
N#define EXIC_PC_MSK_default                         ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_PC_MSK */
N#define EXIC_PC_MSK_PC14_AM_mask_w                  ((uint32_t)0x40000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC14_AM_mask_h1                 ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC14_AM_mask_b3                 ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC14_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC14_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC14_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC14_AM_enable_w                ((uint32_t)0x40000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC14_AM_enable_h1               ((uint16_t)0x4000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC14_AM_enable_b3               ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC13_AM_mask_w                  ((uint32_t)0x20000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC13_AM_mask_h1                 ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC13_AM_mask_b3                 ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC13_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC13_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC13_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC13_AM_enable_w                ((uint32_t)0x20000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC13_AM_enable_h1               ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC13_AM_enable_b3               ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC12_AM_mask_w                  ((uint32_t)0x10000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC12_AM_mask_h1                 ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC12_AM_mask_b3                 ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC12_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC12_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC12_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC12_AM_enable_w                ((uint32_t)0x10000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC12_AM_enable_h1               ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC12_AM_enable_b3               ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC11_AM_mask_w                  ((uint32_t)0x08000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC11_AM_mask_h1                 ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC11_AM_mask_b3                 ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC11_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC11_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC11_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC11_AM_enable_w                ((uint32_t)0x08000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC11_AM_enable_h1               ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC11_AM_enable_b3               ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC10_AM_mask_w                  ((uint32_t)0x04000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC10_AM_mask_h1                 ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC10_AM_mask_b3                 ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC10_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC10_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC10_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC10_AM_enable_w                ((uint32_t)0x04000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC10_AM_enable_h1               ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC10_AM_enable_b3               ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC9_AM_mask_w                   ((uint32_t)0x02000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC9_AM_mask_h1                  ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC9_AM_mask_b3                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC9_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC9_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC9_AM_disable_b3               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC9_AM_enable_w                 ((uint32_t)0x02000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC9_AM_enable_h1                ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC9_AM_enable_b3                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC8_AM_mask_w                   ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC8_AM_mask_h1                  ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC8_AM_mask_b3                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC8_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC8_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC8_AM_disable_b3               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC8_AM_enable_w                 ((uint32_t)0x01000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC8_AM_enable_h1                ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC8_AM_enable_b3                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC7_AM_mask_w                   ((uint32_t)0x00800000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC7_AM_mask_h1                  ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC7_AM_mask_b2                  ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC7_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC7_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC7_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC7_AM_enable_w                 ((uint32_t)0x00800000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC7_AM_enable_h1                ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC7_AM_enable_b2                ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC6_AM_mask_w                   ((uint32_t)0x00400000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC6_AM_mask_h1                  ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC6_AM_mask_b2                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC6_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC6_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC6_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC6_AM_enable_w                 ((uint32_t)0x00400000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC6_AM_enable_h1                ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC6_AM_enable_b2                ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC5_AM_mask_w                   ((uint32_t)0x00200000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC5_AM_mask_h1                  ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC5_AM_mask_b2                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC5_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC5_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC5_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC5_AM_enable_w                 ((uint32_t)0x00200000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC5_AM_enable_h1                ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC5_AM_enable_b2                ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC4_AM_mask_w                   ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC4_AM_mask_h1                  ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC4_AM_mask_b2                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC4_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC4_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC4_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC4_AM_enable_w                 ((uint32_t)0x00100000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC4_AM_enable_h1                ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC4_AM_enable_b2                ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC3_AM_mask_w                   ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC3_AM_mask_h1                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC3_AM_mask_b2                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC3_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC3_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC3_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC3_AM_enable_w                 ((uint32_t)0x00080000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC3_AM_enable_h1                ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC3_AM_enable_b2                ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC2_AM_mask_w                   ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC2_AM_mask_h1                  ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC2_AM_mask_b2                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC2_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC2_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC2_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC2_AM_enable_w                 ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC2_AM_enable_h1                ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC2_AM_enable_b2                ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC1_AM_mask_w                   ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC1_AM_mask_h1                  ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC1_AM_mask_b2                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC1_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC1_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC1_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC1_AM_enable_w                 ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC1_AM_enable_h1                ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC1_AM_enable_b2                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC0_AM_mask_w                   ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC0_AM_mask_h1                  ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC0_AM_mask_b2                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC0_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC0_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC0_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC0_AM_enable_w                 ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC0_AM_enable_h1                ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC0_AM_enable_b2                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC14_OM_mask_w                  ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC14_OM_mask_h0                 ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC14_OM_mask_b1                 ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC14_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC14_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC14_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC14_OM_enable_w                ((uint32_t)0x00004000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC14_OM_enable_h0               ((uint16_t)0x4000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC14_OM_enable_b1               ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC13_OM_mask_w                  ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC13_OM_mask_h0                 ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC13_OM_mask_b1                 ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC13_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC13_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC13_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC13_OM_enable_w                ((uint32_t)0x00002000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC13_OM_enable_h0               ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC13_OM_enable_b1               ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC12_OM_mask_w                  ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC12_OM_mask_h0                 ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC12_OM_mask_b1                 ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC12_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC12_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC12_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC12_OM_enable_w                ((uint32_t)0x00001000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC12_OM_enable_h0               ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC12_OM_enable_b1               ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC11_OM_mask_w                  ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC11_OM_mask_h0                 ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC11_OM_mask_b1                 ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC11_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC11_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC11_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC11_OM_enable_w                ((uint32_t)0x00000800)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC11_OM_enable_h0               ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC11_OM_enable_b1               ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC10_OM_mask_w                  ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC10_OM_mask_h0                 ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC10_OM_mask_b1                 ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC10_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC10_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC10_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC10_OM_enable_w                ((uint32_t)0x00000400)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC10_OM_enable_h0               ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC10_OM_enable_b1               ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC9_OM_mask_w                   ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC9_OM_mask_h0                  ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC9_OM_mask_b1                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC9_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC9_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC9_OM_disable_b1               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC9_OM_enable_w                 ((uint32_t)0x00000200)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC9_OM_enable_h0                ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC9_OM_enable_b1                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC8_OM_mask_w                   ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC8_OM_mask_h0                  ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC8_OM_mask_b1                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC8_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC8_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC8_OM_disable_b1               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC8_OM_enable_w                 ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC8_OM_enable_h0                ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC8_OM_enable_b1                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC7_OM_mask_w                   ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC7_OM_mask_h0                  ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC7_OM_mask_b0                  ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC7_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC7_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC7_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC7_OM_enable_w                 ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC7_OM_enable_h0                ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC7_OM_enable_b0                ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC6_OM_mask_w                   ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC6_OM_mask_h0                  ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC6_OM_mask_b0                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC6_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC6_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC6_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC6_OM_enable_w                 ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC6_OM_enable_h0                ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC6_OM_enable_b0                ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC5_OM_mask_w                   ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC5_OM_mask_h0                  ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC5_OM_mask_b0                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC5_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC5_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC5_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC5_OM_enable_w                 ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC5_OM_enable_h0                ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC5_OM_enable_b0                ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC4_OM_mask_w                   ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC4_OM_mask_h0                  ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC4_OM_mask_b0                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC4_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC4_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC4_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC4_OM_enable_w                 ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC4_OM_enable_h0                ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC4_OM_enable_b0                ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC3_OM_mask_w                   ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC3_OM_mask_h0                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC3_OM_mask_b0                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC3_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC3_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC3_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC3_OM_enable_w                 ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC3_OM_enable_h0                ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC3_OM_enable_b0                ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC2_OM_mask_w                   ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC2_OM_mask_h0                  ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC2_OM_mask_b0                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC2_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC2_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC2_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC2_OM_enable_w                 ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC2_OM_enable_h0                ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC2_OM_enable_b0                ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC1_OM_mask_w                   ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC1_OM_mask_h0                  ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC1_OM_mask_b0                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC1_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC1_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC1_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC1_OM_enable_w                 ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC1_OM_enable_h0                ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC1_OM_enable_b0                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PC_MSK_PC0_OM_mask_w                   ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define EXIC_PC_MSK_PC0_OM_mask_h0                  ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_PC_MSK_PC0_OM_mask_b0                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PC_MSK_PC0_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PC_MSK_PC0_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PC_MSK_PC0_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PC_MSK_PC0_OM_enable_w                 ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PC_MSK_PC0_OM_enable_h0                ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PC_MSK_PC0_OM_enable_b0                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_PD_PF  [register's definitions]
N *              Offset[0x50]  EXIC PD input interrupt pending flag register (0x50000050)
N ******************************************************************************
N */
N///@{
N#define EXIC_PD_PF_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_PD_PF */
N#define EXIC_PD_PF_PD15_PF_mask_w                   ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD15_PF_mask_h0                  ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD15_PF_mask_b1                  ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD15_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD15_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD15_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD15_PF_happened_w               ((uint32_t)0x00008000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD15_PF_happened_h0              ((uint16_t)0x8000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD15_PF_happened_b1              ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD14_PF_mask_w                   ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD14_PF_mask_h0                  ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD14_PF_mask_b1                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD14_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD14_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD14_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD14_PF_happened_w               ((uint32_t)0x00004000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD14_PF_happened_h0              ((uint16_t)0x4000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD14_PF_happened_b1              ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD13_PF_mask_w                   ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD13_PF_mask_h0                  ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD13_PF_mask_b1                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD13_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD13_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD13_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD13_PF_happened_w               ((uint32_t)0x00002000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD13_PF_happened_h0              ((uint16_t)0x2000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD13_PF_happened_b1              ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD12_PF_mask_w                   ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD12_PF_mask_h0                  ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD12_PF_mask_b1                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD12_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD12_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD12_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD12_PF_happened_w               ((uint32_t)0x00001000)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD12_PF_happened_h0              ((uint16_t)0x1000)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD12_PF_happened_b1              ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD11_PF_mask_w                   ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD11_PF_mask_h0                  ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD11_PF_mask_b1                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD11_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD11_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD11_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD11_PF_happened_w               ((uint32_t)0x00000800)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD11_PF_happened_h0              ((uint16_t)0x0800)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD11_PF_happened_b1              ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD10_PF_mask_w                   ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD10_PF_mask_h0                  ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD10_PF_mask_b1                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD10_PF_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD10_PF_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD10_PF_normal_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD10_PF_happened_w               ((uint32_t)0x00000400)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD10_PF_happened_h0              ((uint16_t)0x0400)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD10_PF_happened_b1              ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD9_PF_mask_w                    ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD9_PF_mask_h0                   ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD9_PF_mask_b1                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD9_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD9_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD9_PF_normal_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD9_PF_happened_w                ((uint32_t)0x00000200)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD9_PF_happened_h0               ((uint16_t)0x0200)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD9_PF_happened_b1               ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD8_PF_mask_w                    ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD8_PF_mask_h0                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD8_PF_mask_b1                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD8_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD8_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD8_PF_normal_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD8_PF_happened_w                ((uint32_t)0x00000100)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD8_PF_happened_h0               ((uint16_t)0x0100)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD8_PF_happened_b1               ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD7_PF_mask_w                    ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD7_PF_mask_h0                   ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD7_PF_mask_b0                   ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD7_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD7_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD7_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD7_PF_happened_w                ((uint32_t)0x00000080)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD7_PF_happened_h0               ((uint16_t)0x0080)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD7_PF_happened_b0               ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD6_PF_mask_w                    ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD6_PF_mask_h0                   ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD6_PF_mask_b0                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD6_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD6_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD6_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD6_PF_happened_w                ((uint32_t)0x00000040)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD6_PF_happened_h0               ((uint16_t)0x0040)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD6_PF_happened_b0               ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD5_PF_mask_w                    ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD5_PF_mask_h0                   ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD5_PF_mask_b0                   ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD5_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD5_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD5_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD5_PF_happened_w                ((uint32_t)0x00000020)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD5_PF_happened_h0               ((uint16_t)0x0020)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD5_PF_happened_b0               ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD4_PF_mask_w                    ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD4_PF_mask_h0                   ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD4_PF_mask_b0                   ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD4_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD4_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD4_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD4_PF_happened_w                ((uint32_t)0x00000010)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD4_PF_happened_h0               ((uint16_t)0x0010)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD4_PF_happened_b0               ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD3_PF_mask_w                    ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD3_PF_mask_h0                   ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD3_PF_mask_b0                   ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD3_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD3_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD3_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD3_PF_happened_w                ((uint32_t)0x00000008)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD3_PF_happened_h0               ((uint16_t)0x0008)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD3_PF_happened_b0               ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD2_PF_mask_w                    ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD2_PF_mask_h0                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD2_PF_mask_b0                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD2_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD2_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD2_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD2_PF_happened_w                ((uint32_t)0x00000004)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD2_PF_happened_h0               ((uint16_t)0x0004)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD2_PF_happened_b0               ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD1_PF_mask_w                    ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD1_PF_mask_h0                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD1_PF_mask_b0                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD1_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD1_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD1_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD1_PF_happened_w                ((uint32_t)0x00000002)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD1_PF_happened_h0               ((uint16_t)0x0002)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD1_PF_happened_b0               ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define EXIC_PD_PF_PD0_PF_mask_w                    ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_PF_PD0_PF_mask_h0                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_PF_PD0_PF_mask_b0                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_PF_PD0_PF_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define EXIC_PD_PF_PD0_PF_normal_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define EXIC_PD_PF_PD0_PF_normal_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define EXIC_PD_PF_PD0_PF_happened_w                ((uint32_t)0x00000001)  /*!< Bit Value =(1):Happened of 32bit */
N#define EXIC_PD_PF_PD0_PF_happened_h0               ((uint16_t)0x0001)      /*!< Bit Value =(1):Happened of 16bit */
N#define EXIC_PD_PF_PD0_PF_happened_b0               ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_PD_TRGS  [register's definitions]
N *              Offset[0x54]  EXIC PD Pad input trigger select register (0x50000054)
N ******************************************************************************
N */
N///@{
N#define EXIC_PD_TRGS_default                        ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_PD_TRGS */
N#define EXIC_PD_TRGS_PD15_TRGS_mask_w               ((uint32_t)0xC0000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD15_TRGS_mask_h1              ((uint16_t)0xC000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD15_TRGS_mask_b3              ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD15_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD15_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD15_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD15_TRGS_level_w              ((uint32_t)0x40000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD15_TRGS_level_h1             ((uint16_t)0x4000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD15_TRGS_level_b3             ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD15_TRGS_edge_w               ((uint32_t)0x80000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD15_TRGS_edge_h1              ((uint16_t)0x8000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD15_TRGS_edge_b3              ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD15_TRGS_dual_edge_w          ((uint32_t)0xC0000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD15_TRGS_dual_edge_h1         ((uint16_t)0xC000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD15_TRGS_dual_edge_b3         ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD14_TRGS_mask_w               ((uint32_t)0x30000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD14_TRGS_mask_h1              ((uint16_t)0x3000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD14_TRGS_mask_b3              ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD14_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD14_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD14_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD14_TRGS_level_w              ((uint32_t)0x10000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD14_TRGS_level_h1             ((uint16_t)0x1000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD14_TRGS_level_b3             ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD14_TRGS_edge_w               ((uint32_t)0x20000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD14_TRGS_edge_h1              ((uint16_t)0x2000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD14_TRGS_edge_b3              ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD14_TRGS_dual_edge_w          ((uint32_t)0x30000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD14_TRGS_dual_edge_h1         ((uint16_t)0x3000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD14_TRGS_dual_edge_b3         ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD13_TRGS_mask_w               ((uint32_t)0x0C000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD13_TRGS_mask_h1              ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD13_TRGS_mask_b3              ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD13_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD13_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD13_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD13_TRGS_level_w              ((uint32_t)0x04000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD13_TRGS_level_h1             ((uint16_t)0x0400)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD13_TRGS_level_b3             ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD13_TRGS_edge_w               ((uint32_t)0x08000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD13_TRGS_edge_h1              ((uint16_t)0x0800)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD13_TRGS_edge_b3              ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD13_TRGS_dual_edge_w          ((uint32_t)0x0C000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD13_TRGS_dual_edge_h1         ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD13_TRGS_dual_edge_b3         ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD12_TRGS_mask_w               ((uint32_t)0x03000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD12_TRGS_mask_h1              ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD12_TRGS_mask_b3              ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD12_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD12_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD12_TRGS_no_b3                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD12_TRGS_level_w              ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD12_TRGS_level_h1             ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD12_TRGS_level_b3             ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD12_TRGS_edge_w               ((uint32_t)0x02000000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD12_TRGS_edge_h1              ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD12_TRGS_edge_b3              ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD12_TRGS_dual_edge_w          ((uint32_t)0x03000000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD12_TRGS_dual_edge_h1         ((uint16_t)0x0300)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD12_TRGS_dual_edge_b3         ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD11_TRGS_mask_w               ((uint32_t)0x00C00000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD11_TRGS_mask_h1              ((uint16_t)0x00C0)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD11_TRGS_mask_b2              ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD11_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD11_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD11_TRGS_no_b2                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD11_TRGS_level_w              ((uint32_t)0x00400000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD11_TRGS_level_h1             ((uint16_t)0x0040)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD11_TRGS_level_b2             ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD11_TRGS_edge_w               ((uint32_t)0x00800000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD11_TRGS_edge_h1              ((uint16_t)0x0080)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD11_TRGS_edge_b2              ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD11_TRGS_dual_edge_w          ((uint32_t)0x00C00000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD11_TRGS_dual_edge_h1         ((uint16_t)0x00C0)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD11_TRGS_dual_edge_b2         ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD10_TRGS_mask_w               ((uint32_t)0x00300000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD10_TRGS_mask_h1              ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD10_TRGS_mask_b2              ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD10_TRGS_no_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD10_TRGS_no_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD10_TRGS_no_b2                ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD10_TRGS_level_w              ((uint32_t)0x00100000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD10_TRGS_level_h1             ((uint16_t)0x0010)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD10_TRGS_level_b2             ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD10_TRGS_edge_w               ((uint32_t)0x00200000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD10_TRGS_edge_h1              ((uint16_t)0x0020)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD10_TRGS_edge_b2              ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD10_TRGS_dual_edge_w          ((uint32_t)0x00300000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD10_TRGS_dual_edge_h1         ((uint16_t)0x0030)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD10_TRGS_dual_edge_b2         ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD9_TRGS_mask_w                ((uint32_t)0x000C0000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD9_TRGS_mask_h1               ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD9_TRGS_mask_b2               ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD9_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD9_TRGS_no_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD9_TRGS_no_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD9_TRGS_level_w               ((uint32_t)0x00040000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD9_TRGS_level_h1              ((uint16_t)0x0004)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD9_TRGS_level_b2              ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD9_TRGS_edge_w                ((uint32_t)0x00080000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD9_TRGS_edge_h1               ((uint16_t)0x0008)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD9_TRGS_edge_b2               ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD9_TRGS_dual_edge_w           ((uint32_t)0x000C0000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD9_TRGS_dual_edge_h1          ((uint16_t)0x000C)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD9_TRGS_dual_edge_b2          ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD8_TRGS_mask_w                ((uint32_t)0x00030000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD8_TRGS_mask_h1               ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD8_TRGS_mask_b2               ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD8_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD8_TRGS_no_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD8_TRGS_no_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD8_TRGS_level_w               ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD8_TRGS_level_h1              ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD8_TRGS_level_b2              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD8_TRGS_edge_w                ((uint32_t)0x00020000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD8_TRGS_edge_h1               ((uint16_t)0x0002)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD8_TRGS_edge_b2               ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD8_TRGS_dual_edge_w           ((uint32_t)0x00030000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD8_TRGS_dual_edge_h1          ((uint16_t)0x0003)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD8_TRGS_dual_edge_b2          ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD7_TRGS_mask_w                ((uint32_t)0x0000C000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD7_TRGS_mask_h0               ((uint16_t)0xC000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD7_TRGS_mask_b1               ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD7_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD7_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD7_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD7_TRGS_level_w               ((uint32_t)0x00004000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD7_TRGS_level_h0              ((uint16_t)0x4000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD7_TRGS_level_b1              ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD7_TRGS_edge_w                ((uint32_t)0x00008000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD7_TRGS_edge_h0               ((uint16_t)0x8000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD7_TRGS_edge_b1               ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD7_TRGS_dual_edge_w           ((uint32_t)0x0000C000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD7_TRGS_dual_edge_h0          ((uint16_t)0xC000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD7_TRGS_dual_edge_b1          ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD6_TRGS_mask_w                ((uint32_t)0x00003000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD6_TRGS_mask_h0               ((uint16_t)0x3000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD6_TRGS_mask_b1               ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD6_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD6_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD6_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD6_TRGS_level_w               ((uint32_t)0x00001000)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD6_TRGS_level_h0              ((uint16_t)0x1000)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD6_TRGS_level_b1              ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD6_TRGS_edge_w                ((uint32_t)0x00002000)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD6_TRGS_edge_h0               ((uint16_t)0x2000)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD6_TRGS_edge_b1               ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD6_TRGS_dual_edge_w           ((uint32_t)0x00003000)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD6_TRGS_dual_edge_h0          ((uint16_t)0x3000)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD6_TRGS_dual_edge_b1          ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD5_TRGS_mask_w                ((uint32_t)0x00000C00)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD5_TRGS_mask_h0               ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD5_TRGS_mask_b1               ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD5_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD5_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD5_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD5_TRGS_level_w               ((uint32_t)0x00000400)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD5_TRGS_level_h0              ((uint16_t)0x0400)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD5_TRGS_level_b1              ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD5_TRGS_edge_w                ((uint32_t)0x00000800)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD5_TRGS_edge_h0               ((uint16_t)0x0800)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD5_TRGS_edge_b1               ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD5_TRGS_dual_edge_w           ((uint32_t)0x00000C00)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD5_TRGS_dual_edge_h0          ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD5_TRGS_dual_edge_b1          ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD4_TRGS_mask_w                ((uint32_t)0x00000300)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD4_TRGS_mask_h0               ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD4_TRGS_mask_b1               ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD4_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD4_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD4_TRGS_no_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD4_TRGS_level_w               ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD4_TRGS_level_h0              ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD4_TRGS_level_b1              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD4_TRGS_edge_w                ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD4_TRGS_edge_h0               ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD4_TRGS_edge_b1               ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD4_TRGS_dual_edge_w           ((uint32_t)0x00000300)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD4_TRGS_dual_edge_h0          ((uint16_t)0x0300)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD4_TRGS_dual_edge_b1          ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD3_TRGS_mask_w                ((uint32_t)0x000000C0)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD3_TRGS_mask_h0               ((uint16_t)0x00C0)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD3_TRGS_mask_b0               ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD3_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD3_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD3_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD3_TRGS_level_w               ((uint32_t)0x00000040)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD3_TRGS_level_h0              ((uint16_t)0x0040)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD3_TRGS_level_b0              ((uint8_t )0x40)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD3_TRGS_edge_w                ((uint32_t)0x00000080)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD3_TRGS_edge_h0               ((uint16_t)0x0080)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD3_TRGS_edge_b0               ((uint8_t )0x80)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD3_TRGS_dual_edge_w           ((uint32_t)0x000000C0)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD3_TRGS_dual_edge_h0          ((uint16_t)0x00C0)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD3_TRGS_dual_edge_b0          ((uint8_t )0xC0)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD2_TRGS_mask_w                ((uint32_t)0x00000030)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD2_TRGS_mask_h0               ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD2_TRGS_mask_b0               ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD2_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD2_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD2_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD2_TRGS_level_w               ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD2_TRGS_level_h0              ((uint16_t)0x0010)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD2_TRGS_level_b0              ((uint8_t )0x10)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD2_TRGS_edge_w                ((uint32_t)0x00000020)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD2_TRGS_edge_h0               ((uint16_t)0x0020)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD2_TRGS_edge_b0               ((uint8_t )0x20)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD2_TRGS_dual_edge_w           ((uint32_t)0x00000030)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD2_TRGS_dual_edge_h0          ((uint16_t)0x0030)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD2_TRGS_dual_edge_b0          ((uint8_t )0x30)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD1_TRGS_mask_w                ((uint32_t)0x0000000C)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD1_TRGS_mask_h0               ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD1_TRGS_mask_b0               ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD1_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD1_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD1_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD1_TRGS_level_w               ((uint32_t)0x00000004)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD1_TRGS_level_h0              ((uint16_t)0x0004)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD1_TRGS_level_b0              ((uint8_t )0x04)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD1_TRGS_edge_w                ((uint32_t)0x00000008)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD1_TRGS_edge_h0               ((uint16_t)0x0008)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD1_TRGS_edge_b0               ((uint8_t )0x08)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD1_TRGS_dual_edge_w           ((uint32_t)0x0000000C)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD1_TRGS_dual_edge_h0          ((uint16_t)0x000C)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD1_TRGS_dual_edge_b0          ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N#define EXIC_PD_TRGS_PD0_TRGS_mask_w                ((uint32_t)0x00000003)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_TRGS_PD0_TRGS_mask_h0               ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_TRGS_PD0_TRGS_mask_b0               ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_TRGS_PD0_TRGS_no_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define EXIC_PD_TRGS_PD0_TRGS_no_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define EXIC_PD_TRGS_PD0_TRGS_no_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define EXIC_PD_TRGS_PD0_TRGS_level_w               ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):Level of 32bit */
N#define EXIC_PD_TRGS_PD0_TRGS_level_h0              ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Level of 16bit */
N#define EXIC_PD_TRGS_PD0_TRGS_level_b0              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level of 8bit */
N#define EXIC_PD_TRGS_PD0_TRGS_edge_w                ((uint32_t)0x00000002)  /*!< Bit Value =(0x2):Edge of 32bit */
N#define EXIC_PD_TRGS_PD0_TRGS_edge_h0               ((uint16_t)0x0002)      /*!< Bit Value =(0x2):Edge of 16bit */
N#define EXIC_PD_TRGS_PD0_TRGS_edge_b0               ((uint8_t )0x02)        /*!< Bit Value =(0x2):Edge of 8bit */
N#define EXIC_PD_TRGS_PD0_TRGS_dual_edge_w           ((uint32_t)0x00000003)  /*!< Bit Value =(0x3):Dual-edge of 32bit */
N#define EXIC_PD_TRGS_PD0_TRGS_dual_edge_h0          ((uint16_t)0x0003)      /*!< Bit Value =(0x3):Dual-edge of 16bit */
N#define EXIC_PD_TRGS_PD0_TRGS_dual_edge_b0          ((uint8_t )0x03)        /*!< Bit Value =(0x3):Dual-edge of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_PD_MSK  [register's definitions]
N *              Offset[0x58]  EXIC  PD AOI Mask register (0x50000058)
N ******************************************************************************
N */
N///@{
N#define EXIC_PD_MSK_default                         ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_PD_MSK */
N#define EXIC_PD_MSK_PD15_AM_mask_w                  ((uint32_t)0x80000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD15_AM_mask_h1                 ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD15_AM_mask_b3                 ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD15_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD15_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD15_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD15_AM_enable_w                ((uint32_t)0x80000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD15_AM_enable_h1               ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD15_AM_enable_b3               ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD14_AM_mask_w                  ((uint32_t)0x40000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD14_AM_mask_h1                 ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD14_AM_mask_b3                 ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD14_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD14_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD14_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD14_AM_enable_w                ((uint32_t)0x40000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD14_AM_enable_h1               ((uint16_t)0x4000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD14_AM_enable_b3               ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD13_AM_mask_w                  ((uint32_t)0x20000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD13_AM_mask_h1                 ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD13_AM_mask_b3                 ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD13_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD13_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD13_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD13_AM_enable_w                ((uint32_t)0x20000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD13_AM_enable_h1               ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD13_AM_enable_b3               ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD12_AM_mask_w                  ((uint32_t)0x10000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD12_AM_mask_h1                 ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD12_AM_mask_b3                 ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD12_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD12_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD12_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD12_AM_enable_w                ((uint32_t)0x10000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD12_AM_enable_h1               ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD12_AM_enable_b3               ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD11_AM_mask_w                  ((uint32_t)0x08000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD11_AM_mask_h1                 ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD11_AM_mask_b3                 ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD11_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD11_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD11_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD11_AM_enable_w                ((uint32_t)0x08000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD11_AM_enable_h1               ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD11_AM_enable_b3               ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD10_AM_mask_w                  ((uint32_t)0x04000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD10_AM_mask_h1                 ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD10_AM_mask_b3                 ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD10_AM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD10_AM_disable_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD10_AM_disable_b3              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD10_AM_enable_w                ((uint32_t)0x04000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD10_AM_enable_h1               ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD10_AM_enable_b3               ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD9_AM_mask_w                   ((uint32_t)0x02000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD9_AM_mask_h1                  ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD9_AM_mask_b3                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD9_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD9_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD9_AM_disable_b3               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD9_AM_enable_w                 ((uint32_t)0x02000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD9_AM_enable_h1                ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD9_AM_enable_b3                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD8_AM_mask_w                   ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD8_AM_mask_h1                  ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD8_AM_mask_b3                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD8_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD8_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD8_AM_disable_b3               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD8_AM_enable_w                 ((uint32_t)0x01000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD8_AM_enable_h1                ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD8_AM_enable_b3                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD7_AM_mask_w                   ((uint32_t)0x00800000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD7_AM_mask_h1                  ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD7_AM_mask_b2                  ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD7_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD7_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD7_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD7_AM_enable_w                 ((uint32_t)0x00800000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD7_AM_enable_h1                ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD7_AM_enable_b2                ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD6_AM_mask_w                   ((uint32_t)0x00400000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD6_AM_mask_h1                  ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD6_AM_mask_b2                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD6_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD6_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD6_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD6_AM_enable_w                 ((uint32_t)0x00400000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD6_AM_enable_h1                ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD6_AM_enable_b2                ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD5_AM_mask_w                   ((uint32_t)0x00200000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD5_AM_mask_h1                  ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD5_AM_mask_b2                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD5_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD5_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD5_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD5_AM_enable_w                 ((uint32_t)0x00200000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD5_AM_enable_h1                ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD5_AM_enable_b2                ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD4_AM_mask_w                   ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD4_AM_mask_h1                  ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD4_AM_mask_b2                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD4_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD4_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD4_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD4_AM_enable_w                 ((uint32_t)0x00100000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD4_AM_enable_h1                ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD4_AM_enable_b2                ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD3_AM_mask_w                   ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD3_AM_mask_h1                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD3_AM_mask_b2                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD3_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD3_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD3_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD3_AM_enable_w                 ((uint32_t)0x00080000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD3_AM_enable_h1                ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD3_AM_enable_b2                ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD2_AM_mask_w                   ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD2_AM_mask_h1                  ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD2_AM_mask_b2                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD2_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD2_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD2_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD2_AM_enable_w                 ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD2_AM_enable_h1                ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD2_AM_enable_b2                ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD1_AM_mask_w                   ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD1_AM_mask_h1                  ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD1_AM_mask_b2                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD1_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD1_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD1_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD1_AM_enable_w                 ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD1_AM_enable_h1                ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD1_AM_enable_b2                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD0_AM_mask_w                   ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD0_AM_mask_h1                  ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD0_AM_mask_b2                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD0_AM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD0_AM_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD0_AM_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD0_AM_enable_w                 ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD0_AM_enable_h1                ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD0_AM_enable_b2                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD15_OM_mask_w                  ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD15_OM_mask_h0                 ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD15_OM_mask_b1                 ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD15_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD15_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD15_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD15_OM_enable_w                ((uint32_t)0x00008000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD15_OM_enable_h0               ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD15_OM_enable_b1               ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD14_OM_mask_w                  ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD14_OM_mask_h0                 ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD14_OM_mask_b1                 ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD14_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD14_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD14_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD14_OM_enable_w                ((uint32_t)0x00004000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD14_OM_enable_h0               ((uint16_t)0x4000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD14_OM_enable_b1               ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD13_OM_mask_w                  ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD13_OM_mask_h0                 ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD13_OM_mask_b1                 ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD13_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD13_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD13_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD13_OM_enable_w                ((uint32_t)0x00002000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD13_OM_enable_h0               ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD13_OM_enable_b1               ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD12_OM_mask_w                  ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD12_OM_mask_h0                 ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD12_OM_mask_b1                 ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD12_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD12_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD12_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD12_OM_enable_w                ((uint32_t)0x00001000)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD12_OM_enable_h0               ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD12_OM_enable_b1               ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD11_OM_mask_w                  ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD11_OM_mask_h0                 ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD11_OM_mask_b1                 ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD11_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD11_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD11_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD11_OM_enable_w                ((uint32_t)0x00000800)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD11_OM_enable_h0               ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD11_OM_enable_b1               ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD10_OM_mask_w                  ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD10_OM_mask_h0                 ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD10_OM_mask_b1                 ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD10_OM_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD10_OM_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD10_OM_disable_b1              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD10_OM_enable_w                ((uint32_t)0x00000400)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD10_OM_enable_h0               ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD10_OM_enable_b1               ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD9_OM_mask_w                   ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD9_OM_mask_h0                  ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD9_OM_mask_b1                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD9_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD9_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD9_OM_disable_b1               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD9_OM_enable_w                 ((uint32_t)0x00000200)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD9_OM_enable_h0                ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD9_OM_enable_b1                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD8_OM_mask_w                   ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD8_OM_mask_h0                  ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD8_OM_mask_b1                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD8_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD8_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD8_OM_disable_b1               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD8_OM_enable_w                 ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD8_OM_enable_h0                ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD8_OM_enable_b1                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD7_OM_mask_w                   ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD7_OM_mask_h0                  ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD7_OM_mask_b0                  ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD7_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD7_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD7_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD7_OM_enable_w                 ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD7_OM_enable_h0                ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD7_OM_enable_b0                ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD6_OM_mask_w                   ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD6_OM_mask_h0                  ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD6_OM_mask_b0                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD6_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD6_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD6_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD6_OM_enable_w                 ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD6_OM_enable_h0                ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD6_OM_enable_b0                ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD5_OM_mask_w                   ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD5_OM_mask_h0                  ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD5_OM_mask_b0                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD5_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD5_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD5_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD5_OM_enable_w                 ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD5_OM_enable_h0                ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD5_OM_enable_b0                ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD4_OM_mask_w                   ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD4_OM_mask_h0                  ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD4_OM_mask_b0                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD4_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD4_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD4_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD4_OM_enable_w                 ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD4_OM_enable_h0                ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD4_OM_enable_b0                ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD3_OM_mask_w                   ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD3_OM_mask_h0                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD3_OM_mask_b0                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD3_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD3_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD3_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD3_OM_enable_w                 ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD3_OM_enable_h0                ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD3_OM_enable_b0                ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD2_OM_mask_w                   ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD2_OM_mask_h0                  ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD2_OM_mask_b0                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD2_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD2_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD2_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD2_OM_enable_w                 ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD2_OM_enable_h0                ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD2_OM_enable_b0                ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD1_OM_mask_w                   ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD1_OM_mask_h0                  ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD1_OM_mask_b0                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD1_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD1_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD1_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD1_OM_enable_w                 ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD1_OM_enable_h0                ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD1_OM_enable_b0                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define EXIC_PD_MSK_PD0_OM_mask_w                   ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define EXIC_PD_MSK_PD0_OM_mask_h0                  ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define EXIC_PD_MSK_PD0_OM_mask_b0                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define EXIC_PD_MSK_PD0_OM_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define EXIC_PD_MSK_PD0_OM_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define EXIC_PD_MSK_PD0_OM_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define EXIC_PD_MSK_PD0_OM_enable_w                 ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define EXIC_PD_MSK_PD0_OM_enable_h0                ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define EXIC_PD_MSK_PD0_OM_enable_b0                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_SRC0  [register's definitions]
N *              Offset[0x60]  EXIC Interrupt source identity register 0 (0x50000060)
N ******************************************************************************
N */
N///@{
N#define EXIC_SRC0_default                           ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_SRC0 */
N#define EXIC_SRC0_ID3_mask_w                        ((uint32_t)0xFF000000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC0_ID3_mask_h1                       ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC0_ID3_mask_b3                       ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC0_ID3_exint0_w                      ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):EXINT0 of 32bit */
N#define EXIC_SRC0_ID3_exint0_h1                     ((uint16_t)0x0100)      /*!< Bit Value =(0x1):EXINT0 of 16bit */
N#define EXIC_SRC0_ID3_exint0_b3                     ((uint8_t )0x01)        /*!< Bit Value =(0x1):EXINT0 of 8bit */
N
N#define EXIC_SRC0_ID2_mask_w                        ((uint32_t)0x00FF0000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC0_ID2_mask_h1                       ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC0_ID2_mask_b2                       ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N#define EXIC_SRC0_ID1_mask_w                        ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC0_ID1_mask_h0                       ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC0_ID1_mask_b1                       ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC0_ID1_iwdt_w                        ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):IWDT of 32bit */
N#define EXIC_SRC0_ID1_iwdt_h0                       ((uint16_t)0x0100)      /*!< Bit Value =(0x1):IWDT of 16bit */
N#define EXIC_SRC0_ID1_iwdt_b1                       ((uint8_t )0x01)        /*!< Bit Value =(0x1):IWDT of 8bit */
N#define EXIC_SRC0_ID1_pw_w                          ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):PW of 32bit */
N#define EXIC_SRC0_ID1_pw_h0                         ((uint16_t)0x0200)      /*!< Bit Value =(0x2):PW of 16bit */
N#define EXIC_SRC0_ID1_pw_b1                         ((uint8_t )0x02)        /*!< Bit Value =(0x2):PW of 8bit */
N#define EXIC_SRC0_ID1_rtc_w                         ((uint32_t)0x00000800)  /*!< Bit Value =(0x8):RTC of 32bit */
N#define EXIC_SRC0_ID1_rtc_h0                        ((uint16_t)0x0800)      /*!< Bit Value =(0x8):RTC of 16bit */
N#define EXIC_SRC0_ID1_rtc_b1                        ((uint8_t )0x08)        /*!< Bit Value =(0x8):RTC of 8bit */
N#define EXIC_SRC0_ID1_csc_w                         ((uint32_t)0x00001000)  /*!< Bit Value =(0x10):CSC of 32bit */
N#define EXIC_SRC0_ID1_csc_h0                        ((uint16_t)0x1000)      /*!< Bit Value =(0x10):CSC of 16bit */
N#define EXIC_SRC0_ID1_csc_b1                        ((uint8_t )0x10)        /*!< Bit Value =(0x10):CSC of 8bit */
N#define EXIC_SRC0_ID1_apb_w                         ((uint32_t)0x00002000)  /*!< Bit Value =(0x20):APB of 32bit */
N#define EXIC_SRC0_ID1_apb_h0                        ((uint16_t)0x2000)      /*!< Bit Value =(0x20):APB of 16bit */
N#define EXIC_SRC0_ID1_apb_b1                        ((uint8_t )0x20)        /*!< Bit Value =(0x20):APB of 8bit */
N#define EXIC_SRC0_ID1_mem_w                         ((uint32_t)0x00004000)  /*!< Bit Value =(0x40):MEM of 32bit */
N#define EXIC_SRC0_ID1_mem_h0                        ((uint16_t)0x4000)      /*!< Bit Value =(0x40):MEM of 16bit */
N#define EXIC_SRC0_ID1_mem_b1                        ((uint8_t )0x40)        /*!< Bit Value =(0x40):MEM of 8bit */
N#define EXIC_SRC0_ID1_emb_w                         ((uint32_t)0x00008000)  /*!< Bit Value =(0x80):EMB of 32bit */
N#define EXIC_SRC0_ID1_emb_h0                        ((uint16_t)0x8000)      /*!< Bit Value =(0x80):EMB of 16bit */
N#define EXIC_SRC0_ID1_emb_b1                        ((uint8_t )0x80)        /*!< Bit Value =(0x80):EMB of 8bit */
N
N#define EXIC_SRC0_ID0_mask_w                        ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC0_ID0_mask_h0                       ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC0_ID0_mask_b0                       ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC0_ID0_wwdt_w                        ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):WWDT of 32bit */
N#define EXIC_SRC0_ID0_wwdt_h0                       ((uint16_t)0x0001)      /*!< Bit Value =(0x1):WWDT of 16bit */
N#define EXIC_SRC0_ID0_wwdt_b0                       ((uint8_t )0x01)        /*!< Bit Value =(0x1):WWDT of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_SRC1  [register's definitions]
N *              Offset[0x64]  EXIC interrupt source identity register 1 (0x50000064)
N ******************************************************************************
N */
N///@{
N#define EXIC_SRC1_default                           ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_SRC1 */
N#define EXIC_SRC1_ID7_mask_w                        ((uint32_t)0xFF000000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC1_ID7_mask_h1                       ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC1_ID7_mask_b3                       ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC1_ID7_cmp_w                         ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):CMP of 32bit */
N#define EXIC_SRC1_ID7_cmp_h1                        ((uint16_t)0x0100)      /*!< Bit Value =(0x1):CMP of 16bit */
N#define EXIC_SRC1_ID7_cmp_b3                        ((uint8_t )0x01)        /*!< Bit Value =(0x1):CMP of 8bit */
N
N#define EXIC_SRC1_ID6_mask_w                        ((uint32_t)0x00FF0000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC1_ID6_mask_h1                       ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC1_ID6_mask_b2                       ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC1_ID6_exint3_w                      ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):EXINT3 of 32bit */
N#define EXIC_SRC1_ID6_exint3_h1                     ((uint16_t)0x0001)      /*!< Bit Value =(0x1):EXINT3 of 16bit */
N#define EXIC_SRC1_ID6_exint3_b2                     ((uint8_t )0x01)        /*!< Bit Value =(0x1):EXINT3 of 8bit */
N
N#define EXIC_SRC1_ID5_mask_w                        ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC1_ID5_mask_h0                       ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC1_ID5_mask_b1                       ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC1_ID5_exint2_w                      ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):EXINT2 of 32bit */
N#define EXIC_SRC1_ID5_exint2_h0                     ((uint16_t)0x0100)      /*!< Bit Value =(0x1):EXINT2 of 16bit */
N#define EXIC_SRC1_ID5_exint2_b1                     ((uint8_t )0x01)        /*!< Bit Value =(0x1):EXINT2 of 8bit */
N
N#define EXIC_SRC1_ID4_mask_w                        ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC1_ID4_mask_h0                       ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC1_ID4_mask_b0                       ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC1_ID4_exint1_w                      ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):EXINT1 of 32bit */
N#define EXIC_SRC1_ID4_exint1_h0                     ((uint16_t)0x0001)      /*!< Bit Value =(0x1):EXINT1 of 16bit */
N#define EXIC_SRC1_ID4_exint1_b0                     ((uint8_t )0x01)        /*!< Bit Value =(0x1):EXINT1 of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_SRC2  [register's definitions]
N *              Offset[0x68]  EXIC interrupt source identity register 2 (0x50000068)
N ******************************************************************************
N */
N///@{
N#define EXIC_SRC2_default                           ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_SRC2 */
N#define EXIC_SRC2_ID11_mask_w                       ((uint32_t)0xFF000000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC2_ID11_mask_h1                      ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC2_ID11_mask_b3                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC2_ID11_dac_w                        ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):DAC of 32bit */
N#define EXIC_SRC2_ID11_dac_h1                       ((uint16_t)0x0100)      /*!< Bit Value =(0x1):DAC of 16bit */
N#define EXIC_SRC2_ID11_dac_b3                       ((uint8_t )0x01)        /*!< Bit Value =(0x1):DAC of 8bit */
N
N#define EXIC_SRC2_ID10_mask_w                       ((uint32_t)0x00FF0000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC2_ID10_mask_h1                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC2_ID10_mask_b2                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC2_ID10_adc_w                        ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):ADC of 32bit */
N#define EXIC_SRC2_ID10_adc_h1                       ((uint16_t)0x0001)      /*!< Bit Value =(0x1):ADC of 16bit */
N#define EXIC_SRC2_ID10_adc_b2                       ((uint8_t )0x01)        /*!< Bit Value =(0x1):ADC of 8bit */
N
N#define EXIC_SRC2_ID9_mask_w                        ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC2_ID9_mask_h0                       ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC2_ID9_mask_b1                       ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N#define EXIC_SRC2_ID8_mask_w                        ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC2_ID8_mask_h0                       ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC2_ID8_mask_b0                       ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC2_ID8_dma_w                         ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):DMA of 32bit */
N#define EXIC_SRC2_ID8_dma_h0                        ((uint16_t)0x0001)      /*!< Bit Value =(0x1):DMA of 16bit */
N#define EXIC_SRC2_ID8_dma_b0                        ((uint8_t )0x01)        /*!< Bit Value =(0x1):DMA of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_SRC3  [register's definitions]
N *              Offset[0x6C]  EXIC interrupt source identity register 3 (0x5000006C)
N ******************************************************************************
N */
N///@{
N#define EXIC_SRC3_default                           ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_SRC3 */
N#define EXIC_SRC3_ID15_mask_w                       ((uint32_t)0xFF000000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC3_ID15_mask_h1                      ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC3_ID15_mask_b3                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC3_ID15_tm20_w                       ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):TM20 of 32bit */
N#define EXIC_SRC3_ID15_tm20_h1                      ((uint16_t)0x0100)      /*!< Bit Value =(0x1):TM20 of 16bit */
N#define EXIC_SRC3_ID15_tm20_b3                      ((uint8_t )0x01)        /*!< Bit Value =(0x1):TM20 of 8bit */
N
N#define EXIC_SRC3_ID14_mask_w                       ((uint32_t)0x00FF0000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC3_ID14_mask_h1                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC3_ID14_mask_b2                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC3_ID14_tm16_w                       ((uint32_t)0x00040000)  /*!< Bit Value =(0x4):TM16 of 32bit */
N#define EXIC_SRC3_ID14_tm16_h1                      ((uint16_t)0x0004)      /*!< Bit Value =(0x4):TM16 of 16bit */
N#define EXIC_SRC3_ID14_tm16_b2                      ((uint8_t )0x04)        /*!< Bit Value =(0x4):TM16 of 8bit */
N
N#define EXIC_SRC3_ID13_mask_w                       ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC3_ID13_mask_h0                      ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC3_ID13_mask_b1                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC3_ID13_tm10_w                       ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):TM10 of 32bit */
N#define EXIC_SRC3_ID13_tm10_h0                      ((uint16_t)0x0100)      /*!< Bit Value =(0x1):TM10 of 16bit */
N#define EXIC_SRC3_ID13_tm10_b1                      ((uint8_t )0x01)        /*!< Bit Value =(0x1):TM10 of 8bit */
N
N#define EXIC_SRC3_ID12_mask_w                       ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC3_ID12_mask_h0                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC3_ID12_mask_b0                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC3_ID12_tm00_w                       ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):TM00 of 32bit */
N#define EXIC_SRC3_ID12_tm00_h0                      ((uint16_t)0x0001)      /*!< Bit Value =(0x1):TM00 of 16bit */
N#define EXIC_SRC3_ID12_tm00_b0                      ((uint8_t )0x01)        /*!< Bit Value =(0x1):TM00 of 8bit */
N#define EXIC_SRC3_ID12_tm01_w                       ((uint32_t)0x00000002)  /*!< Bit Value =(0x2):TM01 of 32bit */
N#define EXIC_SRC3_ID12_tm01_h0                      ((uint16_t)0x0002)      /*!< Bit Value =(0x2):TM01 of 16bit */
N#define EXIC_SRC3_ID12_tm01_b0                      ((uint8_t )0x02)        /*!< Bit Value =(0x2):TM01 of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_SRC4  [register's definitions]
N *              Offset[0x70]  EXIC interrupt source identity register 4 (0x50000070)
N ******************************************************************************
N */
N///@{
N#define EXIC_SRC4_default                           ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_SRC4 */
N#define EXIC_SRC4_ID19_mask_w                       ((uint32_t)0xFF000000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC4_ID19_mask_h1                      ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC4_ID19_mask_b3                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N#define EXIC_SRC4_ID18_mask_w                       ((uint32_t)0x00FF0000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC4_ID18_mask_h1                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC4_ID18_mask_b2                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N#define EXIC_SRC4_ID17_mask_w                       ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC4_ID17_mask_h0                      ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC4_ID17_mask_b1                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC4_ID17_tm36_w                       ((uint32_t)0x00000400)  /*!< Bit Value =(0x4):TM36 of 32bit */
N#define EXIC_SRC4_ID17_tm36_h0                      ((uint16_t)0x0400)      /*!< Bit Value =(0x4):TM36 of 16bit */
N#define EXIC_SRC4_ID17_tm36_b1                      ((uint8_t )0x04)        /*!< Bit Value =(0x4):TM36 of 8bit */
N
N#define EXIC_SRC4_ID16_mask_w                       ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC4_ID16_mask_h0                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC4_ID16_mask_b0                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC4_ID16_tm26_w                       ((uint32_t)0x00000004)  /*!< Bit Value =(0x4):TM26 of 32bit */
N#define EXIC_SRC4_ID16_tm26_h0                      ((uint16_t)0x0004)      /*!< Bit Value =(0x4):TM26 of 16bit */
N#define EXIC_SRC4_ID16_tm26_b0                      ((uint8_t )0x04)        /*!< Bit Value =(0x4):TM26 of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_SRC5  [register's definitions]
N *              Offset[0x74]  EXIC interrupt source identity register 5 (0x50000074)
N ******************************************************************************
N */
N///@{
N#define EXIC_SRC5_default                           ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_SRC5 */
N#define EXIC_SRC5_ID23_mask_w                       ((uint32_t)0xFF000000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC5_ID23_mask_h1                      ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC5_ID23_mask_b3                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N#define EXIC_SRC5_ID22_mask_w                       ((uint32_t)0x00FF0000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC5_ID22_mask_h1                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC5_ID22_mask_b2                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N#define EXIC_SRC5_ID21_mask_w                       ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC5_ID21_mask_h0                      ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC5_ID21_mask_b1                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC5_ID21_urt1_w                       ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):URT1 of 32bit */
N#define EXIC_SRC5_ID21_urt1_h0                      ((uint16_t)0x0100)      /*!< Bit Value =(0x1):URT1 of 16bit */
N#define EXIC_SRC5_ID21_urt1_b1                      ((uint8_t )0x01)        /*!< Bit Value =(0x1):URT1 of 8bit */
N#define EXIC_SRC5_ID21_urt2_w                       ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):URT2 of 32bit */
N#define EXIC_SRC5_ID21_urt2_h0                      ((uint16_t)0x0200)      /*!< Bit Value =(0x2):URT2 of 16bit */
N#define EXIC_SRC5_ID21_urt2_b1                      ((uint8_t )0x02)        /*!< Bit Value =(0x2):URT2 of 8bit */
N#define EXIC_SRC5_ID21_urt3_w                       ((uint32_t)0x00000400)  /*!< Bit Value =(0x4):URT3 of 32bit */
N#define EXIC_SRC5_ID21_urt3_h0                      ((uint16_t)0x0400)      /*!< Bit Value =(0x4):URT3 of 16bit */
N#define EXIC_SRC5_ID21_urt3_b1                      ((uint8_t )0x04)        /*!< Bit Value =(0x4):URT3 of 8bit */
N
N#define EXIC_SRC5_ID20_mask_w                       ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC5_ID20_mask_h0                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC5_ID20_mask_b0                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC5_ID20_urt0_w                       ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):URT0 of 32bit */
N#define EXIC_SRC5_ID20_urt0_h0                      ((uint16_t)0x0001)      /*!< Bit Value =(0x1):URT0 of 16bit */
N#define EXIC_SRC5_ID20_urt0_b0                      ((uint8_t )0x01)        /*!< Bit Value =(0x1):URT0 of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_SRC6  [register's definitions]
N *              Offset[0x78]  EXIC interrupt source identity register 6 (0x50000078)
N ******************************************************************************
N */
N///@{
N#define EXIC_SRC6_default                           ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_SRC6 */
N#define EXIC_SRC6_ID27_mask_w                       ((uint32_t)0xFF000000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC6_ID27_mask_h1                      ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC6_ID27_mask_b3                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N#define EXIC_SRC6_ID26_mask_w                       ((uint32_t)0x00FF0000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC6_ID26_mask_h1                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC6_ID26_mask_b2                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N#define EXIC_SRC6_ID25_mask_w                       ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC6_ID25_mask_h0                      ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC6_ID25_mask_b1                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N#define EXIC_SRC6_ID24_mask_w                       ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC6_ID24_mask_h0                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC6_ID24_mask_b0                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC6_ID24_spi0_w                       ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):SPI0 of 32bit */
N#define EXIC_SRC6_ID24_spi0_h0                      ((uint16_t)0x0001)      /*!< Bit Value =(0x1):SPI0 of 16bit */
N#define EXIC_SRC6_ID24_spi0_b0                      ((uint8_t )0x01)        /*!< Bit Value =(0x1):SPI0 of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        EXIC_SRC7  [register's definitions]
N *              Offset[0x7C]  EXIC interrupt source identity register 7 (0x5000007C)
N ******************************************************************************
N */
N///@{
N#define EXIC_SRC7_default                           ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of EXIC_SRC7 */
N#define EXIC_SRC7_ID31_mask_w                       ((uint32_t)0xFF000000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC7_ID31_mask_h1                      ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC7_ID31_mask_b3                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N#define EXIC_SRC7_ID30_mask_w                       ((uint32_t)0x00FF0000)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC7_ID30_mask_h1                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC7_ID30_mask_b2                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N#define EXIC_SRC7_ID29_mask_w                       ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC7_ID29_mask_h0                      ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC7_ID29_mask_b1                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC7_ID29_i2c1_w                       ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):I2C1 of 32bit */
N#define EXIC_SRC7_ID29_i2c1_h0                      ((uint16_t)0x0100)      /*!< Bit Value =(0x1):I2C1 of 16bit */
N#define EXIC_SRC7_ID29_i2c1_b1                      ((uint8_t )0x01)        /*!< Bit Value =(0x1):I2C1 of 8bit */
N
N#define EXIC_SRC7_ID28_mask_w                       ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define EXIC_SRC7_ID28_mask_h0                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define EXIC_SRC7_ID28_mask_b0                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define EXIC_SRC7_ID28_i2c0_w                       ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):I2C0 of 32bit */
N#define EXIC_SRC7_ID28_i2c0_h0                      ((uint16_t)0x0001)      /*!< Bit Value =(0x1):I2C0 of 16bit */
N#define EXIC_SRC7_ID28_i2c0_b0                      ((uint8_t )0x01)        /*!< Bit Value =(0x1):I2C0 of 8bit */
N
N///@}
N
N#endif  // _MG32x02z_EXIC_H
N
N/*----------------------------------------------------------------------------*/
N/*                        End of file MG32x02z_EXIC.h                         */
N/*----------------------------------------------------------------------------*/
L 39 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z_EXIC_DRV.h" 2
N
N
N
N///@{
N
N#define EXIC_PA_IT          EXIC_INT_PA_IEA_mask_w                                      /*!< External trigger interrupt flag Control Definitions */
N#define EXIC_PB_IT          EXIC_INT_PB_IEA_mask_w                                      /*!< External trigger interrupt flag Control Definitions */
N#define EXIC_PC_IT          EXIC_INT_PC_IEA_mask_w                                      /*!< External trigger interrupt flag Control Definitions */
N#define EXIC_PD_IT          EXIC_INT_PD_IEA_mask_w                                      /*!< External trigger interrupt flag Control Definitions */
N#if defined(EXIC_PE_Base)
X#if 0L
S#define EXIC_PE_IT          EXIC_INT_PE_IEA_mask_w                                      /*!< External trigger interrupt flag Control Definitions */ 
N#endif
N
N#define EXIC_PX_AF          EXIC_STA_PA_AF_mask_b0              /*!< Byte of PX_AF mask */                
N#define EXIC_PX_OF          EXIC_STA_PA_OF_mask_b0              /*!< Byte of PX_OF mask */                  
N#define EXIC_PX_ITF_Mask    EXIC_PX_AF | EXIC_PX_OF             /*!< Byte of EXIC PX interrupt flag mask */
N#define EXIC_PX_ITF_Shift   4
N
N#define EXIC_TRGS_PIN0      0x00000001      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN1      0x00000004      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN2      0x00000010      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN3      0x00000040      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN4      0x00000100      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN5      0x00000400      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN6      0x00001000      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN7      0x00004000      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN8      0x00010000      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN9      0x00040000      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN10     0x00100000      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN11     0x00400000      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN12     0x01000000      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN13     0x04000000      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN14     0x10000000      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_PIN15     0x40000000      /*!< External trigger mode of pin Control Definitions */
N#define EXIC_TRGS_ALL       0x55555555      /*!< External trigger mode of pin Control Definitions */
N                              
N#define EXIC_PX_PIN0        0x0001          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN1        0x0002          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN2        0x0004          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN3        0x0008          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN4        0x0010          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN5        0x0020          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN6        0x0040          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN7        0x0080          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN8        0x0100          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN9        0x0200          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN10       0x0400          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN11       0x0800          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN12       0x1000          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN13       0x2000          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN14       0x4000          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_PIN15       0x8000          /*!< External trigger Pin Control Definitions */
N#define EXIC_PX_AllPIN      0xFFFF          /*!< External trigger Pin Control Definitions */
N
N#define EXIC_ID_ADR_Base    0x50000060
N#define EXIC_ID_MAX         32
N
N
N
N/**
N *******************************************************************************
N * @brief  Read interrupt source-0 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID0_SOURCE()           (EXIC->SRC0.B[0])      /*!< Get Interrupt 0  identity.*/    
N/**
N *******************************************************************************
N * @brief  Read interrupt source-1 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID1_SOURCE()           (EXIC->SRC0.B[1])      /*!< Get Interrupt 1  identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-2 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID2_SOURCE()           (EXIC->SRC0.B[2])      /*!< Get Interrupt 2  identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-3 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID3_SOURCE()           (EXIC->SRC0.B[3])      /*!< Get Interrupt 3  identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-4 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID4_SOURCE()           (EXIC->SRC1.B[0])      /*!< Get Interrupt 4  identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-5 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID5_SOURCE()           (EXIC->SRC1.B[1])      /*!< Get Interrupt 5  identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-6 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID6_SOURCE()           (EXIC->SRC1.B[2])      /*!< Get Interrupt 6  identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-7 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID7_SOURCE()           (EXIC->SRC1.B[3])      /*!< Get Interrupt 7  identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-8 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID8_SOURCE()           (EXIC->SRC2.B[0])      /*!< Get Interrupt 8  identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-9 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID9_SOURCE()           (EXIC->SRC2.B[1])      /*!< Get Interrupt 9  identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-10 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID10_SOURCE()          (EXIC->SRC2.B[2])      /*!< Get Interrupt 10 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-11 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID11_SOURCE()          (EXIC->SRC2.B[3])      /*!< Get Interrupt 11 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-12 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID12_SOURCE()          (EXIC->SRC3.B[0])      /*!< Get Interrupt 12 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-13 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID13_SOURCE()          (EXIC->SRC3.B[1])      /*!< Get Interrupt 13 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-14 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID14_SOURCE()          (EXIC->SRC3.B[2])      /*!< Get Interrupt 14 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-15 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID15_SOURCE()          (EXIC->SRC3.B[3])      /*!< Get Interrupt 15 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-16 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID16_SOURCE()          (EXIC->SRC4.B[0])      /*!< Get Interrupt 16 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-17 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID17_SOURCE()          (EXIC->SRC4.B[1])      /*!< Get Interrupt 17 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-18 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID18_SOURCE()          (EXIC->SRC4.B[2])      /*!< Get Interrupt 18 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-19 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID19_SOURCE()          (EXIC->SRC4.B[3])      /*!< Get Interrupt 19 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-20 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID20_SOURCE()          (EXIC->SRC5.B[0])      /*!< Get Interrupt 20 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-21 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID21_SOURCE()          (EXIC->SRC5.B[1])      /*!< Get Interrupt 21 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-22 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID22_SOURCE()          (EXIC->SRC5.B[2])      /*!< Get Interrupt 22 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-23 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID23_SOURCE()          (EXIC->SRC5.B[3])      /*!< Get Interrupt 23 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-24 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID24_SOURCE()          (EXIC->SRC6.B[0])      /*!< Get Interrupt 24 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-25 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID25_SOURCE()          (EXIC->SRC6.B[1])      /*!< Get Interrupt 25 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-26 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID26_SOURCE()          (EXIC->SRC6.B[2])      /*!< Get Interrupt 26 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-27 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID27_SOURCE()          (EXIC->SRC6.B[3])      /*!< Get Interrupt 27 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-28 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID28_SOURCE()          (EXIC->SRC7.B[0])      /*!< Get Interrupt 28 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-29 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID29_SOURCE()          (EXIC->SRC7.B[1])      /*!< Get Interrupt 29 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-30 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID30_SOURCE()          (EXIC->SRC7.B[2])      /*!< Get Interrupt 30 identity.*/
N/**
N *******************************************************************************
N * @brief  Read interrupt source-31 identity.
N * @return No
N *******************************************************************************
N */
N#define __DRV_EXIC_GET_ID31_SOURCE()          (EXIC->SRC7.B[3])      /*!< Get Interrupt 31 identity.*/
N
N
N
N
N///@}
N
N
N/*! @enum   EXIC_TRGSMode_Typedef
N    @brief  External pin edge / level trigger event select definitions.
N*/
Ntypedef enum
N{
N	No_UpData_Flag  =   0,                  /*!< No external trgger function */
N    Level           =   1,                  /*!< External trigger event is level*/ 
N    Edge            =   2,                  /*!< External trigger event is edge*/
N    Dual_edge       =   3                   /*!< External trigger event is dual edge*/
N}EXIC_TRGSMode_Typedef;                              
N
N
N/*! @enum   EXIC_ITFlag_Typdef
N    @brief  Read / Clear interrupt flag of Port select definitions.
N*/
Ntypedef enum
N{
N    EXIC_PA_ITF    = 0,                     /*!< PortA*/                                               
N    EXIC_PB_ITF    = 1,                     /*!< PortB*/
N    EXIC_PC_ITF    = 2,                     /*!< PortC*/                    
N    EXIC_PD_ITF    = 3,                     /*!< PortD*/
N    #if defined(EXIC_PE_Base)
X    #if 0L
S        EXIC_PE_ITF    = 4,                 /*!< PortE*/
N    #endif
N}EXIC_ITFlag_Typdef;
N
N
N#if defined(EXIC_CR0_NMI_SEL_mask_w) && defined(EXIC_CR0_NMI_MUX_mask_w)
X#if 0L && 0L
S/** 
S * @enum	EXIC_NMIMUX_Typedef
S * @brief	Control NIM trigger source select.
S */
Stypedef enum
S{
S    EXIC_NMI_WWDT       = 0x00000000 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from WWDT */
S    EXIC_NMI_SYS        = 0x00000400 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from SYS */
S    EXIC_NMI_EXIN0      = 0x00000C00 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from EXINT0 */
S    EXIC_NMI_EXIN1      = 0x00001000 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from EXINT1 */
S    EXIC_NMI_EXIN2      = 0x00001400 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from EXINT2 */
S    EXIC_NMI_EXIN3      = 0x00001800 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from EXINT3 */
S    EXIC_NMI_COMP       = 0x00001C00 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from COMP */
S    EXIC_NMI_DMA        = 0x00002000 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from DMA */
S    EXIC_NMI_ADC        = 0x00002800 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from ADC */
S    EXIC_NMI_DAC        = 0x00002C00 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from DAC */
S    EXIC_NMI_TM00       = 0x00003000 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from TM00 */
S    EXIC_NMI_TM10       = 0x00003400 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from TM10 */
S    EXIC_NMI_TM16       = 0x00003800 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from TM16 */
S    EXIC_NMI_TM20       = 0x00003C00 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from TM20 */
S    EXIC_NMI_TM26       = 0x00004000 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from TM26 */
S    EXIC_NMI_TM36       = 0x00004400 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from TM36 */
S    EXIC_NMI_URT0       = 0x00005000 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from URT0 */
S    EXIC_NMI_URT123     = 0x00005400 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from URT123 */
S    EXIC_NMI_SPI0       = 0x00006000 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from SPI0 */
S    EXIC_NMI_I2C0       = 0x00007000 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from I2C0 */
S    EXIC_NMI_I2Cx       = 0x00007400 | EXIC_CR0_NMI_SEL_mask_w,    /*!< Trigger NMI source from I2Cx */
S    EXIC_NMI_NMI        = 0x00000000,
S}EXIC_NMIMUX_Typedef;
N#endif
N
N/** 
N * @struct	EXIC_TRGSTypeDef
N * @brief	Control external pin event flag.
N */
Ntypedef struct	
N{
N	uint32_t                  	EXIC_Pin;           /*!< Select external trigger pin.*/
N	EXIC_TRGSMode_Typedef       EXIC_TRGS_Mode;     /*!< Select external trigger mode.*/
N}EXIC_TRGSTypeDef;
N
N
N
N
N
Nvoid EXIC_PxTriggerITEA_Cmd(uint32_t EXIC_PX_IT, FunctionalState EXIC_IT_State);
Nuint16_t EXIC_GetPxAllTriggerEventFlagStatus(EXIC_PX_Struct* EXIC_PX);
Nuint8_t EXIC_GetPxAllTriggerITFlagStatus( EXIC_ITFlag_Typdef EXIC_PX_ITFlag);
NDRV_Return EXIC_GetPinxTriggerEventSingleFlagStatus(EXIC_PX_Struct* EXIC_PX , uint16_t EXIC_Pin_PF);
NDRV_Return EXIC_GetPxTriggerAndITFlagStatus( EXIC_ITFlag_Typdef EXIC_PX_ITFlag);
NDRV_Return EXIC_GetPxTriggerOrITFlagStatus( EXIC_ITFlag_Typdef EXIC_PX_ITFlag);
Nvoid EXIC_ClearPxTriggerEventFlag(EXIC_PX_Struct* EXIC_PX , uint16_t EXIC_Pin_PF);
Nvoid EXIC_ClearPxTriggerITFlag( EXIC_ITFlag_Typdef EXIC_PX , uint8_t EXIC_PX_ITFlag);
NDRV_Return EXIC_PxTriggerMode_Select(EXIC_PX_Struct* EXIC_PX ,EXIC_TRGSTypeDef* EXIC_PX_TRGS );
Nvoid EXIC_PxTriggerAndMask_Select(EXIC_PX_Struct* EXIC_PX , uint16_t  EXIC_MSK_PIN);
Nvoid EXIC_PxTriggerOrMask_Select(EXIC_PX_Struct* EXIC_PX , uint16_t  EXIC_MSK_PIN);
Nvoid EXIC_PxTriggerAndUnmatch_Cmd(uint32_t EXIC_PX_IT, FunctionalState PX_unMatch_Cmd);
Nuint8_t EXIC_GetITSourceID(IRQn_Type ITSourceNum);
Nvoid EXIC_RXEV_Cmd(FunctionalState RXEV_State);
Nvoid EXIC_NMI_Cmd(FunctionalState NMI_State);
Nvoid EXIC_NMITrigger_SW(void);
N#if defined(EXIC_CR0_NMI_SEL_mask_w) && defined(EXIC_CR0_NMI_MUX_mask_w)
X#if 0L && 0L
S    void EXIC_NMI_Select(EXIC_NMIMUX_Typedef);
N#endif
N
N
N#endif
N
N
N
N
N
N
N
N
L 38 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_EXIC_DRV.c" 2
N
N
N
N/**
N * @name	Mode
N *   		Triggle event of external interrupt set relationship driver.
N */ 
N///@{
N/**
N *******************************************************************************
N * @brief       External interrupt pin edge/level trigger event select.
N * @details  
N * @param[in]   EXIC_PX:
N * @param[in]   EXIC_PX_TRGS: 
N *  @arg\b      EXIC_Pin:
N *  @arg\b      EXIC_TRGS_Mode :
N *      \n      -No_UpData_Flag:
N *      \n      -Level         :
N *      \n      -Edge          :
N *      \n      -Dual_edge     :
N * @return      DRV_Return    
N *  @arg\b      DRV_ERR_FAILURE : EXIC TRGS source is fail.
N *  @arg\b      DRV_SUCCESS     : Configuration is success. 
N * @exception   No   
N * @note        Falling / Rising edge or H / L level is setted by PINX_Inverse of GPIO_PinMode_Config.
N * @par         Example
N * @code
N    EXIC_TRGSTypeDef EXIC_TRGS;
N    
N    EXIC_TRGS.EXIC_Pin = EXIC_TRGS_PIN0 | EXIC_TRGS_PIN1 | EXIC_TRGS_PIN2;
N    EXIC_TRGS.EXIC_TRGS_Mode = Edge;
N    EXIC_PxTriggerMode_Select(EXIC_PA,&EXIC_TRGS);
N * @endcode
N *******************************************************************************
N */
NDRV_Return EXIC_PxTriggerMode_Select(EXIC_PX_Struct* EXIC_PX ,EXIC_TRGSTypeDef* EXIC_PX_TRGS )
N{
N    uint32_t Tmp;
N    
N    if((EXIC_PX_TRGS->EXIC_Pin & (~EXIC_TRGS_ALL))!=0)
X    if((EXIC_PX_TRGS->EXIC_Pin & (~0x55555555))!=0)
N    {
N        return(DRV_Failure);
N    }
N    
N    Tmp = EXIC_PX->TRGS.W;
N    Tmp = Tmp & (~((EXIC_PX_TRGS->EXIC_Pin) * Dual_edge));
N    Tmp = Tmp | ((EXIC_PX_TRGS->EXIC_Pin) * (EXIC_PX_TRGS->EXIC_TRGS_Mode));
N    EXIC_PX->TRGS.W = Tmp;
N    return(DRV_Success);
N}
N
N
N/**
N *******************************************************************************
N * @brief       External interrupt Pinx of PX AND mask bit x.
N * @details  
N * @param[in]   EXIC_PX: Select EXIC Port
N * @param[in]   EXIC_MSK_PIN: Need to compare pin.
N * @return         
N * @exception   No   
N * @note        0 : don't care pin , 1 : need to compare pin.
N * @par         Example
N * @code
N    EXIC_PxTriggerAndMask_Select(EXIC_PA, (EXIC_PX_PIN0 | EXIC_PX_PIN1)); or EXIC_PxTriggerAndMask_Select(EXIC_PA , 0x0003);
N * @endcode
N *******************************************************************************
N */
Nvoid EXIC_PxTriggerAndMask_Select(EXIC_PX_Struct* EXIC_PX , uint16_t  EXIC_MSK_PIN)
N{
N    EXIC_PX->MSK.H[1] = EXIC_MSK_PIN;
N}
N
N
N/**
N *******************************************************************************
N * @brief       External interrupt Pinx of PX OR mask bit x. 
N * @details  
N * @param[in]   EXIC_PX: Select EXIC Port
N * @param[in]   EXIC_MSK_PIN: Need to compare pin. 
N * @return      
N * @exception   No   
N * @note
N * @par         Example
N * @code
N    EXIC_PxTriggerOrMask_Select(EXIC_PA, (EXIC_PX_PIN0 | EXIC_PX_PIN1));  or EXIC_PxTriggerOrMask_Select(EXIC_PA,0x0003);
N * @endcode
N *******************************************************************************
N */
Nvoid EXIC_PxTriggerOrMask_Select(EXIC_PX_Struct* EXIC_PX , uint16_t  EXIC_MSK_PIN)
N{
N    EXIC_PX->MSK.H[0] = EXIC_MSK_PIN;
N}
N
N
N
N/**
N *******************************************************************************
N * @brief       Select match or umatch (AND) to set PX AND interrupt flag.
N * @details  
N * @param[in]   EXIC_PX_IT: Select EXIC Port
N * @param[in]   PX_unMatch_Cmd: 
N *  @arg\b      DISABLE: When match (AND) event happen to set PX AND interrupt flag.
N *  @arg\b      ENABLE: When unmatch (AND) event happen to set PX AND interrupt flag.
N * @return      
N * @exception   No   
N * @note
N * @par         Example
N * @code
N    EXIC_PxTriggerAndUnmatch_Cmd( ( EXIC_PA_IT | EXIC_PB_IT) , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid EXIC_PxTriggerAndUnmatch_Cmd(uint32_t EXIC_PX_IT, FunctionalState PX_unMatch_Cmd)
N{
N    if(PX_unMatch_Cmd==ENABLE)
N    {
N        EXIC->CR0.B[3] = EXIC->CR0.B[3] | (uint8_t) EXIC_PX_IT;
X        ((EXIC_Struct*) ((uint32_t)0x50000000))->CR0.B[3] = ((EXIC_Struct*) ((uint32_t)0x50000000))->CR0.B[3] | (uint8_t) EXIC_PX_IT;
N    }
N    else
N    {
N        EXIC->CR0.B[3] = EXIC->CR0.B[3] & ((uint8_t) (~EXIC_PX_IT));
X        ((EXIC_Struct*) ((uint32_t)0x50000000))->CR0.B[3] = ((EXIC_Struct*) ((uint32_t)0x50000000))->CR0.B[3] & ((uint8_t) (~EXIC_PX_IT));
N    }
N}
N
N
N
N///@}
N
N
N
N/**
N * @name	Interrupt And Event.
N *   		Interrupt and event relationship driver.
N */ 
N///@{
N/**
N *******************************************************************************
N * @brief       EXIC port external interrupt all enable.
N * @details  
N * @param[in]   EXIC_PX_IT:
N * 	@arg\b		EXIC_PA_IT: EXIC port PA external interrupt.  
N *  @arg\b      EXIC_PB_IT: EXIC port PB external interrupt. 
N *  @arg\b      EXIC_PC_IT: EXIC port PC external interrupt.    
N *  @arg\b      EXIC_PD_IT: EXIC port PD external interrupt. 
N * @param[in]   EXIC_IT_State:
N *  @arg\b		ENABLE : Enable interrupt of EXIC_PX.
N *  @arg\b      DISABLE: Disable interrupt of EXIC_PX.
N * @return      
N * @exception   No   
N * @note
N * @par         Example
N * @code
N    EXIC_PxTriggerITEA_Cmd((EXIC_PA_IT | EXIC_PB_IT) , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid EXIC_PxTriggerITEA_Cmd(uint32_t EXIC_PX_IT, FunctionalState EXIC_IT_State)
N{    
N    if(EXIC_IT_State==ENABLE)
N    {
N        EXIC->INT.W = EXIC->INT.W | EXIC_PX_IT;
X        ((EXIC_Struct*) ((uint32_t)0x50000000))->INT.W = ((EXIC_Struct*) ((uint32_t)0x50000000))->INT.W | EXIC_PX_IT;
N    }
N    else
N    {
N        EXIC->INT.W = EXIC->INT.W & (~EXIC_PX_IT);
X        ((EXIC_Struct*) ((uint32_t)0x50000000))->INT.W = ((EXIC_Struct*) ((uint32_t)0x50000000))->INT.W & (~EXIC_PX_IT);
N    }
N} 
N
N/**
N *******************************************************************************
N * @brief       Read EXIC PX input interrupt pending flag.
N * @details  
N * @param[in]   EXIC_PX:
N * 	@arg\b		EXIC_PA: Read EXIC PA input interrupt pending flag.  
N *  @arg\b      EXIC_PB: Read EXIC PB input interrupt pending flag.  
N *  @arg\b      EXIC_PC: Read EXIC PC input interrupt pending flag.     
N *  @arg\b      EXIC_PD: Read EXIC PD input interrupt pending flag.  
N * @return      EXIC_PX_PF status.
N * @exception   No   
N * @note
N * @par         Example
N * @code
N    tmp = EXIC_GetPxAllTriggerEventFlagStatus(EXIC_PA);
N * @endcode
N *******************************************************************************
N */
Nuint16_t EXIC_GetPxAllTriggerEventFlagStatus(EXIC_PX_Struct* EXIC_PX)
N{
N    return(EXIC_PX->PF.W);
N}
N
N/**
N *******************************************************************************
N * @brief       Read EXIC PX input flag.
N * @details  
N * @param[in]   EXIC_PX_ITFlag:
N * 	@arg\b		EXIC_PA_ITF: Read EXIC PA input interrupt flag.  
N *  @arg\b      EXIC_PB_ITF: Read EXIC PB input interrupt flag.  
N *  @arg\b      EXIC_PC_ITF: Read EXIC PC input interrupt flag.     
N *  @arg\b      EXIC_PD_ITF: Read EXIC PD input interrupt flag.  
N * @return      EXIC_PX (EXIC_PA or EXIC_PB or EXIC_PC or EXIC_PD) all interrupt flag.
N * @exception   No   
N * @note
N * @par         Example
N * @code
N    tmp = EXIC_GetPxAllTriggerITFlagStatus(EXIC_PA_ITF);
N * @endcode
N *******************************************************************************
N */
Nuint8_t EXIC_GetPxAllTriggerITFlagStatus( EXIC_ITFlag_Typdef EXIC_PX_ITFlag)
N{
N    uint16_t Tmp;
N    
N    Tmp = EXIC->STA.H[0];
X    Tmp = ((EXIC_Struct*) ((uint32_t)0x50000000))->STA.H[0];
N    Tmp = EXIC->STA.H[0] >> (EXIC_PX_ITF_Shift * EXIC_PX_ITFlag);
X    Tmp = ((EXIC_Struct*) ((uint32_t)0x50000000))->STA.H[0] >> (4 * EXIC_PX_ITFlag);
N    Tmp = Tmp & EXIC_PX_ITF_Mask;
X    Tmp = Tmp & ((uint8_t )0x02) | ((uint8_t )0x01);
N    return(Tmp);
N}
N
N/**
N *******************************************************************************
N * @brief       Read EXIC Pin of PX input interrupt pending flag.
N * @details  
N * @param[in]   EXIC_PX: Want to read input interrupt pending flag of EXIC_PX.
N * 	@arg\b		EXIC_PA: Read EXIC pin of PA input interrupt pending flag.  
N *  @arg\b      EXIC_PB: Read EXIC pin of PB input interrupt pending flag.  
N *  @arg\b      EXIC_PC: Read EXIC pin of PC input interrupt pending flag.     
N *  @arg\b      EXIC_PD: Read EXIC pin of PD input interrupt pending flag. 
N * @param[in]   EXIC_Pin_PF: Want to read input interrupt pending flag of EXIC_Pin.
N *  @arg\b      (EXIC_PX_PIN0 ~ EXIC_PX_PIN15).
N * @return      EXIC_PX_PF status.
N * @exception   No   
N * @note        Only read one pin's PF status.
N * @par         Example
N * @code
N    tmp = EXIC_GetPinxTriggerEventSingleFlagStatus(EXIC_PA , EXIC_PX_PIN15);
N * @endcode
N *******************************************************************************
N */
NDRV_Return EXIC_GetPinxTriggerEventSingleFlagStatus(EXIC_PX_Struct* EXIC_PX , uint16_t EXIC_Pin_PF)
N{
N    if((EXIC_PX->PF.H[0]&EXIC_Pin_PF)==0)
N    {
N        return(DRV_UnHappened);
N    }
N    else
N    {
N        return(DRV_Happened);
N    } 
N}
N
N/**
N *******************************************************************************
N * @brief       Read EXIC Pin of PX external input AND interrupt flag.
N * @details  
N * @param[in]   EXIC_PX_ITFlag:
N * 	@arg\b		EXIC_PA_ITF: Read EXIC pin of PA input interrupt AND flag.  
N *  @arg\b      EXIC_PB_ITF: Read EXIC pin of PB input interrupt AND flag.  
N *  @arg\b      EXIC_PC_ITF: Read EXIC pin of PC input interrupt AND flag.     
N *  @arg\b      EXIC_PD_ITF: Read EXIC pin of PD input interrupt AND flag.  
N * @return      EXIC PX AND interrupt flag status.
N * @exception   No   
N * @note        
N * @par         Example
N * @code
N    tmp = EXIC_GetPxTriggerAndITFlagStatus(EXIC_PA_ITF);
N * @endcode
N *******************************************************************************
N */
NDRV_Return EXIC_GetPxTriggerAndITFlagStatus( EXIC_ITFlag_Typdef EXIC_PX_ITFlag)      
N{
N    uint32_t PX_AF_CMP;
N    
N    PX_AF_CMP = EXIC->STA.H[0];
X    PX_AF_CMP = ((EXIC_Struct*) ((uint32_t)0x50000000))->STA.H[0];
N    PX_AF_CMP = EXIC->STA.H[0] >> (EXIC_PX_ITF_Shift * EXIC_PX_ITFlag);
X    PX_AF_CMP = ((EXIC_Struct*) ((uint32_t)0x50000000))->STA.H[0] >> (4 * EXIC_PX_ITFlag);
N    PX_AF_CMP = PX_AF_CMP & EXIC_PX_AF;
X    PX_AF_CMP = PX_AF_CMP & ((uint8_t )0x02);
N    
N    if(PX_AF_CMP==0)
N    {
N        return(DRV_UnHappened);
N    }
N    else
N    {
N        return(DRV_Happened);
N    }
N}
N
N/**
N *******************************************************************************
N * @brief       Read EXIC Pin of PX external input OR interrupt flag.
N * @details  
N * @param[in]   EXIC_PX_ITFlag:
N * 	@arg\b		EXIC_PA_ITF: Read EXIC pin of PA input interrupt OR flag.  
N *  @arg\b      EXIC_PB_ITF: Read EXIC pin of PB input interrupt OR flag.  
N *  @arg\b      EXIC_PC_ITF: Read EXIC pin of PC input interrupt OR flag.     
N *  @arg\b      EXIC_PD_ITF: Read EXIC pin of PD input interrupt OR flag.  
N * @return      EXIC PX OR interrupt flag status.
N * @exception   No   
N * @note        
N * @par         Example
N * @code
N    tmp = EXIC_GetPxTriggerOrITFlagStatus(EXIC_PA_ITF);
N * @endcode
N *******************************************************************************
N */
NDRV_Return EXIC_GetPxTriggerOrITFlagStatus( EXIC_ITFlag_Typdef EXIC_PX_ITFlag)    
N{
N    uint32_t PX_OF_CMP;
N    
N    PX_OF_CMP = EXIC->STA.H[0];
X    PX_OF_CMP = ((EXIC_Struct*) ((uint32_t)0x50000000))->STA.H[0];
N    PX_OF_CMP = EXIC->STA.H[0] >> (EXIC_PX_ITF_Shift * EXIC_PX_ITFlag);
X    PX_OF_CMP = ((EXIC_Struct*) ((uint32_t)0x50000000))->STA.H[0] >> (4 * EXIC_PX_ITFlag);
N    PX_OF_CMP = PX_OF_CMP & EXIC_PX_OF;
X    PX_OF_CMP = PX_OF_CMP & ((uint8_t )0x01);
N    
N    if(PX_OF_CMP==0)
N    {
N        return(DRV_UnHappened);
N    }
N    else
N    {
N        return(DRV_Happened);
N    }
N}
N
N/**
N *******************************************************************************
N * @brief       Clear EXIC PX input interrupt pending flag.
N * @details  
N * @param[in]   EXIC_PX:
N * 	@arg\b		EXIC_PA_PF: EXIC PA input interrupt pending flag.  
N *  @arg\b      EXIC_PB_PF: EXIC PB input interrupt pending flag.  
N *  @arg\b      EXIC_PC_PF: EXIC PC input interrupt pending flag.     
N *  @arg\b      EXIC_PD_PF: EXIC PD input interrupt pending flag. 
N * @param[in]   EXIC_Pin_PF: (EXIC_PX_PIN0 ~ EXIC_PX_PIN15 or EXIC_PX_AllPIN ) Want to clear pf of Pin.
N * @return      
N * @exception   No  
N * @note
N * @par         Example
N * @code
N    EXIC_ClearPxTriggerEventFlag(EXIC_PA, (EXIC_PX_PIN0 | EXIC_PX_PIN1)); or EXIC_ClearPxTriggerEventFlag(EXIC_PA, 0x0003);                                                                        
N * @endcode
N *******************************************************************************
N */
Nvoid EXIC_ClearPxTriggerEventFlag(EXIC_PX_Struct* EXIC_PX , uint16_t EXIC_Pin_PF)
N{
N    EXIC_PX->PF.H[0] = EXIC_Pin_PF;
N}
N
N/**
N *******************************************************************************
N * @brief       Clear EXIC PX input interrupt flag.
N * @details  
N * @param[in]   EXIC_PX:
N * 	@arg\b		EXIC_PA_ITF: EXIC PA input interrupt flag.  
N *  @arg\b      EXIC_PB_ITF: EXIC PB input interrupt flag.  
N *  @arg\b      EXIC_PC_ITF: EXIC PC input interrupt flag.     
N *  @arg\b      EXIC_PD_ITF: EXIC PD input interrupt flag. 
N * @param[in]   EXIC_PX_ITFlag:
N *  @arg\b      EXIC_PX_AF: PX AND path interrupt flag.
N *  @arg\b      EXIC_PX_OF: PX OR path interrupt flag.
N * @exception   No  
N * @note
N * @par         Example
N * @code
N    EXIC_ClearPxTriggerITFlag(EXIC_PA_ITF,(EXIC_PX_AF|EXIC_PX_OF));                                                                      
N * @endcode
N *******************************************************************************
N */
Nvoid EXIC_ClearPxTriggerITFlag( EXIC_ITFlag_Typdef EXIC_PX , uint8_t EXIC_PX_ITFlag)
N{
N    uint16_t PX_ITF_CLR;
N    
N    PX_ITF_CLR = ( EXIC_PX_ITFlag << (EXIC_PX_ITF_Shift * EXIC_PX));
X    PX_ITF_CLR = ( EXIC_PX_ITFlag << (4 * EXIC_PX));
N    
N    EXIC->STA.H[0] = PX_ITF_CLR;
X    ((EXIC_Struct*) ((uint32_t)0x50000000))->STA.H[0] = PX_ITF_CLR;
N}
N
N
N/**
N *******************************************************************************
N * @brief       Get interrupt source-ITSourceNum identify.
N * @details  
N * @param[in]   ITSourceNum: Interrupt source number.
N * @return      Interrupt source-ITSourceNum idelntify.
N * @exception   No   
N * @note
N * @par         Example
N * @code
N    tmp = EXIC_GetITSourceID(1);
N * @endcode
N *******************************************************************************
N */
Nuint8_t EXIC_GetITSourceID(IRQn_Type ITSourceNum)
N{
N    uint8_t tmp;
N    
N
N    tmp = *((volatile uint8_t*)((uint32_t)EXIC_ID_ADR_Base + ITSourceNum));
X    tmp = *((volatile uint8_t*)((uint32_t)0x50000060 + ITSourceNum));
N    return(tmp);
N}
N
N/**
N *******************************************************************************
N * @brief       Interrupt event mask for RXEV.
N * @details  
N * @param[in]   RXEV_State:
N *  @arg\b      DISABLE: Interrupt event mask for RXEV.
N *  @arg\b      ENABLE: Interrupt event no mask for RXEV.
N * @return      
N * @exception   No    
N * @note
N * @par         Example
N * @code
N    EXIC_RXEV_Cmd(ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid EXIC_RXEV_Cmd(FunctionalState RXEV_State)
N{
N    EXIC->CR0.MBIT.EM_RXEV = RXEV_State;
X    ((EXIC_Struct*) ((uint32_t)0x50000000))->CR0.MBIT.EM_RXEV = RXEV_State;
N}
N
N
N
N/**
N *******************************************************************************
N * @brief       Interrupt event mask for NMI.
N * @details  
N * @param[in]   NMI_State: 
N *  @arg\b      DISABLE: Interrupt event mask for NMI.
N *  @arg\b      ENABLE : Interrupt event no mask for NMI.
N * @return      
N * @exception   No   
N * @note
N * @par         Example
N * @code
N    EXIC_NMI_Cmd(ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid EXIC_NMI_Cmd(FunctionalState NMI_State)
N{
N    EXIC->CR0.MBIT.EM_NMI = NMI_State;
X    ((EXIC_Struct*) ((uint32_t)0x50000000))->CR0.MBIT.EM_NMI = NMI_State;
N}
N
N
N/**
N *******************************************************************************
N * @brief       Software NMI trigger bit.
N * @details     The bit set by software and clear by hardware. 
N * @return      
N * @exception   No   
N * @note
N * @par         Example
N * @code
N    EXIC_NMITrigger_SW();
N * @endcode
N *******************************************************************************
N */
Nvoid EXIC_NMITrigger_SW(void)
N{
N    EXIC->CR0.MBIT.NMI_SW = ENABLE;
X    ((EXIC_Struct*) ((uint32_t)0x50000000))->CR0.MBIT.NMI_SW = ENABLE;
N}
N
N#if defined(EXIC_CR0_NMI_SEL_mask_w) && defined(EXIC_CR0_NMI_MUX_mask_w)
X#if 0L && 0L
S/**
S *******************************************************************************
S * @brief       NMI trigger source select
S * @details     The bit set by software and clear by hardware. 
S * @param[in]   NMIMUX_SEL: 
S *  @arg\b      EXIC_NMI_WWDT     
S *  @arg\b      EXIC_NMI_SYS      
S *  @arg\b      EXIC_NMI_Reserve0 
S *  @arg\b      EXIC_NMI_EXIN0    
S *  @arg\b      EXIC_NMI_EXIN1    
S *  @arg\b      EXIC_NMI_EXIN2    
S *  @arg\b      EXIC_NMI_EXIN3    
S *  @arg\b      EXIC_NMI_COMP     
S *  @arg\b      EXIC_NMI_DMA      
S *  @arg\b      EXIC_NMI_Reserve1 
S *  @arg\b      EXIC_NMI_ADC      
S *  @arg\b      EXIC_NMI_DAC      
S *  @arg\b      EXIC_NMI_TM00     
S *  @arg\b      EXIC_NMI_TM10     
S *  @arg\b      EXIC_NMI_TM16     
S *  @arg\b      EXIC_NMI_TM20     
S *  @arg\b      EXIC_NMI_TM26     
S *  @arg\b      EXIC_NMI_TM36     
S *  @arg\b      EXIC_NMI_Reserve2 
S *  @arg\b      EXIC_NMI_Reserve3 
S *  @arg\b      EXIC_NMI_URT0     
S *  @arg\b      EXIC_NMI_URT123   
S *  @arg\b      EXIC_NMI_Reserve4 
S *  @arg\b      EXIC_NMI_Reserve5 
S *  @arg\b      EXIC_NMI_SPI0     
S *  @arg\b      EXIC_NMI_Reserve6 
S *  @arg\b      EXIC_NMI_Reserve7 
S *  @arg\b      EXIC_NMI_Reserve8 
S *  @arg\b      EXIC_NMI_I2C0     
S *  @arg\b      EXIC_NMI_I2Cx     
S *  @arg\b      EXIC_NMI_Reserve9 
S *  @arg\b      EXIC_NMI_ReserveA 
S *  @arg\b      EXIC_NMI_NMI 
S * @return      
S * @exception   No   
S * @note
S * @par         Example
S * @code
S    EXIC_NMIMUX_SEL(EXIC_NMI_NMI);
S * @endcode
S *******************************************************************************
S */
Svoid EXIC_NMI_Select(EXIC_NMIMUX_Typedef NMIMUX_SEL)
S{
S    EXIC->CR0.W &= ~(EXIC_CR0_NMI_SEL_mask_w | EXIC_CR0_NMI_MUX_mask_w);
S    EXIC->CR0.W |= NMIMUX_SEL;    
S}
N#endif
N
N///@}
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
