; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_tm_mid.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_tm_mid.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_tm_mid.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_TM_MID.c]
                          THUMB

                          AREA ||i.MID_TM_8Bx2OC_DeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2OC_DeInit PROC
;;;856     */
;;;857    MID_StatusTypeDef MID_TM_8Bx2OC_DeInit(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;858    {
000002  4604              MOV      r4,r0
;;;859        mTM->State = MID_TM_STATE_BUSY;
000004  2100              MOVS     r1,#0
000006  2021              MOVS     r0,#0x21
000008  5501              STRB     r1,[r0,r4]
;;;860    
;;;861        /* Disable the TM Peripheral Clock */
;;;862        __DRV_TM_DISABLE(mTM);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  8e00              LDRH     r0,[r0,#0x30]
000010  2800              CMP      r0,#0
000012  d105              BNE      |L1.32|
000014  6820              LDR      r0,[r4,#0]
000016  6900              LDR      r0,[r0,#0x10]
000018  0880              LSRS     r0,r0,#2
00001a  0080              LSLS     r0,r0,#2
00001c  6821              LDR      r1,[r4,#0]
00001e  6108              STR      r0,[r1,#0x10]
                  |L1.32|
000020  bf00              NOP      
;;;863    
;;;864        /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;865        MID_TM_8Bx2OC_MspDeInit(mTM);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       MID_TM_8Bx2OC_MspDeInit
;;;866    
;;;867        /* Change TM state */
;;;868        mTM->State = MID_TM_STATE_RESET;
000028  2102              MOVS     r1,#2
00002a  2021              MOVS     r0,#0x21
00002c  5501              STRB     r1,[r0,r4]
;;;869    
;;;870        /* Release Lock */
;;;871        __MID_UNLOCK(mTM);
00002e  bf00              NOP      
000030  2100              MOVS     r1,#0
000032  2020              MOVS     r0,#0x20
000034  5501              STRB     r1,[r0,r4]
000036  bf00              NOP      
;;;872    
;;;873        return MID_SUCCESS;
000038  2000              MOVS     r0,#0
;;;874    }
00003a  bd10              POP      {r4,pc}
;;;875    
                          ENDP


                          AREA ||i.MID_TM_8Bx2OC_Init||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2OC_Init PROC
;;;818     */
;;;819    MID_StatusTypeDef MID_TM_8Bx2OC_Init(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;820    {
000002  4604              MOV      r4,r0
;;;821        if(mTM->State == MID_TM_STATE_RESET)
000004  2021              MOVS     r0,#0x21
000006  5d00              LDRB     r0,[r0,r4]
000008  2802              CMP      r0,#2
00000a  d105              BNE      |L2.24|
;;;822        {
;;;823            /* Allocate lock resource and initialize it */
;;;824            mTM->Lock = MID_UnLocked;
00000c  2100              MOVS     r1,#0
00000e  2020              MOVS     r0,#0x20
000010  5501              STRB     r1,[r0,r4]
;;;825    
;;;826            /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;827            MID_TM_8Bx2OC_MspInit(mTM);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       MID_TM_8Bx2OC_MspInit
                  |L2.24|
;;;828        }
;;;829    
;;;830        /* Set the TM state */
;;;831        mTM->State= MID_TM_STATE_BUSY;
000018  2100              MOVS     r1,#0
00001a  2021              MOVS     r0,#0x21
00001c  5501              STRB     r1,[r0,r4]
;;;832    
;;;833        /* Init the base time for the Output Compare */
;;;834        TM_Base_SetConfig(mTM->Instance,  &mTM->Init);
00001e  1d21              ADDS     r1,r4,#4
000020  6820              LDR      r0,[r4,#0]
000022  f7fffffe          BL       TM_Base_SetConfig
;;;835    
;;;836        /* Initialize the TM state*/
;;;837        mTM->State= MID_TM_STATE_READY;
000026  2101              MOVS     r1,#1
000028  2021              MOVS     r0,#0x21
00002a  5501              STRB     r1,[r0,r4]
;;;838    
;;;839        return MID_SUCCESS;
00002c  2000              MOVS     r0,#0
;;;840    }
00002e  bd10              POP      {r4,pc}
;;;841    
                          ENDP


                          AREA ||i.MID_TM_8Bx2OC_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2OC_MspDeInit PROC
;;;898     */
;;;899    __weak void MID_TM_8Bx2OC_MspDeInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;900    {
;;;901        /* Prevent unused argument(s) compilation warning */
;;;902        UNUSED(mTM);
;;;903        /* NOTE : This function Should not be modified, when the callback is needed,
;;;904                  the MID_TM_8Bx2OC_MspDeInit could be implemented in the user file
;;;905         */
;;;906    }
;;;907    
                          ENDP


                          AREA ||i.MID_TM_8Bx2OC_MspInit||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2OC_MspInit PROC
;;;882     */
;;;883    __weak void MID_TM_8Bx2OC_MspInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;884    {
;;;885        /* Prevent unused argument(s) compilation warning */
;;;886        UNUSED(mTM);
;;;887        /* NOTE : This function Should not be modified, when the callback is needed,
;;;888                  the MID_TM_8Bx2OC_MspInit could be implemented in the user file
;;;889         */
;;;890    }
;;;891    
                          ENDP


                          AREA ||i.MID_TM_8Bx2OC_Start||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2OC_Start PROC
;;;926     */
;;;927    MID_StatusTypeDef MID_TM_8Bx2OC_Start(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;928    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;929        /* Enable the Output compare channel */
;;;930        TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_8bitx2_OutputCompare);
000006  2203              MOVS     r2,#3
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;931    
;;;932        /* Enable the Peripheral */
;;;933        __DRV_TM_ENABLE(mTM);
000010  6820              LDR      r0,[r4,#0]
000012  6900              LDR      r0,[r0,#0x10]
000014  2103              MOVS     r1,#3
000016  4308              ORRS     r0,r0,r1
000018  6821              LDR      r1,[r4,#0]
00001a  6108              STR      r0,[r1,#0x10]
;;;934    
;;;935        /* Return function status */
;;;936        return MID_SUCCESS;
00001c  2000              MOVS     r0,#0
;;;937    }
00001e  bd30              POP      {r4,r5,pc}
;;;938    
                          ENDP


                          AREA ||i.MID_TM_8Bx2OC_Start_DMA||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2OC_Start_DMA PROC
;;;1117    */
;;;1118   MID_StatusTypeDef MID_TM_8Bx2OC_Start_DMA(TM_HandleTypeDef* mTM, uint32_t Channel, uint32_t* pData, uint16_t Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1119   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;1120       if((mTM->State) == (MID_TM_STATE_BUSY))
00000a  2021              MOVS     r0,#0x21
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2800              CMP      r0,#0
000010  d101              BNE      |L6.22|
;;;1121           return MID_BUSY;
000012  2002              MOVS     r0,#2
                  |L6.20|
;;;1122       else if((mTM->State) == (MID_TM_STATE_READY))
;;;1123       {
;;;1124           if(((uint32_t)pData == 0U) && (Length > 0U))
;;;1125               return MID_FAILURE;
;;;1126           else
;;;1127               mTM->State = MID_TM_STATE_BUSY;
;;;1128       }
;;;1129   
;;;1130       switch(Channel)
;;;1131       {
;;;1132       case MID_TM_Channel0:
;;;1133           /* Set the DMA Period elapsed callback */
;;;1134           mTM->hDMA[TM_DMA_ID_CC0]->XferCpltCallback = &TM_DMADelayPulseCplt;
;;;1135   
;;;1136           /* Set the DMA error callback */
;;;1137           mTM->hDMA[TM_DMA_ID_CC0]->XferErrorCallback = TM_DMAError ;
;;;1138   
;;;1139           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC0], (uint32_t)pData, NULL, Length);
;;;1140   
;;;1141           /* Enable the TM Capture/Compare 0 DMA request */
;;;1142           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH0_OC);
;;;1143           break;
;;;1144   
;;;1145       case MID_TM_Channel1:
;;;1146           /* Set the DMA Period elapsed callback */
;;;1147           mTM->hDMA[TM_DMA_ID_CC1]->XferCpltCallback = TM_DMADelayPulseCplt;
;;;1148   
;;;1149           /* Set the DMA error callback */
;;;1150           mTM->hDMA[TM_DMA_ID_CC1]->XferErrorCallback = TM_DMAError ;
;;;1151   
;;;1152           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC1], (uint32_t)pData, NULL, Length);
;;;1153   
;;;1154           /* Enable the TM Capture/Compare 1 DMA request */
;;;1155           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH1_OC);
;;;1156           break;
;;;1157   
;;;1158       case MID_TM_Channel2:
;;;1159           /* Set the DMA Period elapsed callback */
;;;1160           mTM->hDMA[TM_DMA_ID_CC2]->XferCpltCallback = TM_DMADelayPulseCplt;
;;;1161   
;;;1162           /* Set the DMA error callback */
;;;1163           mTM->hDMA[TM_DMA_ID_CC2]->XferErrorCallback = TM_DMAError ;
;;;1164   
;;;1165           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC2], (uint32_t)pData, NULL, Length);
;;;1166   
;;;1167           /* Enable the TM Capture/Compare 2 DMA request */
;;;1168           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH2_OC);
;;;1169           break;
;;;1170   
;;;1171       case MID_TM_Channel3:
;;;1172           // MG32x02z MCU don't support Channel3 for OC output
;;;1173           break;
;;;1174   
;;;1175       default:
;;;1176           break;
;;;1177       }
;;;1178   
;;;1179       /* Enable the Output compare channel */
;;;1180       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_8bitx2_OutputCompare);
;;;1181   
;;;1182       mTM->State = MID_TM_STATE_READY;
;;;1183   
;;;1184       /* Enable the Peripheral */
;;;1185       __DRV_TM_ENABLE(mTM);
;;;1186   
;;;1187       /* Return function status */
;;;1188       return MID_SUCCESS;
;;;1189   }
000014  bdf8              POP      {r3-r7,pc}
                  |L6.22|
000016  2021              MOVS     r0,#0x21              ;1122
000018  5d00              LDRB     r0,[r0,r4]            ;1122
00001a  2801              CMP      r0,#1                 ;1122
00001c  d107              BNE      |L6.46|
00001e  2d00              CMP      r5,#0                 ;1124
000020  d102              BNE      |L6.40|
000022  2f00              CMP      r7,#0                 ;1124
000024  d000              BEQ      |L6.40|
000026  e7f5              B        |L6.20|
                  |L6.40|
000028  2100              MOVS     r1,#0                 ;1127
00002a  2021              MOVS     r0,#0x21              ;1127
00002c  5501              STRB     r1,[r0,r4]            ;1127
                  |L6.46|
00002e  2e00              CMP      r6,#0                 ;1130
000030  d006              BEQ      |L6.64|
000032  2e01              CMP      r6,#1                 ;1130
000034  d018              BEQ      |L6.104|
000036  2e02              CMP      r6,#2                 ;1130
000038  d02a              BEQ      |L6.144|
00003a  2e03              CMP      r6,#3                 ;1130
00003c  d13d              BNE      |L6.186|
00003e  e03b              B        |L6.184|
                  |L6.64|
000040  4827              LDR      r0,|L6.224|
000042  6921              LDR      r1,[r4,#0x10]         ;1134
000044  62c8              STR      r0,[r1,#0x2c]         ;1134
000046  4827              LDR      r0,|L6.228|
000048  6921              LDR      r1,[r4,#0x10]         ;1137
00004a  6348              STR      r0,[r1,#0x34]         ;1137
00004c  463b              MOV      r3,r7                 ;1139
00004e  2200              MOVS     r2,#0                 ;1139
000050  4629              MOV      r1,r5                 ;1139
000052  6920              LDR      r0,[r4,#0x10]         ;1139
000054  f7fffffe          BL       MID_DMA_Start_IT
000058  6820              LDR      r0,[r4,#0]            ;1142
00005a  6b00              LDR      r0,[r0,#0x30]         ;1142
00005c  2101              MOVS     r1,#1                 ;1142
00005e  0609              LSLS     r1,r1,#24             ;1142
000060  4308              ORRS     r0,r0,r1              ;1142
000062  6821              LDR      r1,[r4,#0]            ;1142
000064  6308              STR      r0,[r1,#0x30]         ;1142
000066  e029              B        |L6.188|
                  |L6.104|
000068  491d              LDR      r1,|L6.224|
00006a  6960              LDR      r0,[r4,#0x14]         ;1147
00006c  62c1              STR      r1,[r0,#0x2c]         ;1147
00006e  491d              LDR      r1,|L6.228|
000070  6960              LDR      r0,[r4,#0x14]         ;1150
000072  6341              STR      r1,[r0,#0x34]         ;1150
000074  463b              MOV      r3,r7                 ;1152
000076  2200              MOVS     r2,#0                 ;1152
000078  4629              MOV      r1,r5                 ;1152
00007a  6960              LDR      r0,[r4,#0x14]         ;1152
00007c  f7fffffe          BL       MID_DMA_Start_IT
000080  6820              LDR      r0,[r4,#0]            ;1155
000082  6b00              LDR      r0,[r0,#0x30]         ;1155
000084  2101              MOVS     r1,#1                 ;1155
000086  0649              LSLS     r1,r1,#25             ;1155
000088  4308              ORRS     r0,r0,r1              ;1155
00008a  6821              LDR      r1,[r4,#0]            ;1155
00008c  6308              STR      r0,[r1,#0x30]         ;1155
00008e  e015              B        |L6.188|
                  |L6.144|
000090  4913              LDR      r1,|L6.224|
000092  69a0              LDR      r0,[r4,#0x18]         ;1160
000094  62c1              STR      r1,[r0,#0x2c]         ;1160
000096  4913              LDR      r1,|L6.228|
000098  69a0              LDR      r0,[r4,#0x18]         ;1163
00009a  6341              STR      r1,[r0,#0x34]         ;1163
00009c  463b              MOV      r3,r7                 ;1165
00009e  2200              MOVS     r2,#0                 ;1165
0000a0  4629              MOV      r1,r5                 ;1165
0000a2  69a0              LDR      r0,[r4,#0x18]         ;1165
0000a4  f7fffffe          BL       MID_DMA_Start_IT
0000a8  6820              LDR      r0,[r4,#0]            ;1168
0000aa  6b00              LDR      r0,[r0,#0x30]         ;1168
0000ac  2101              MOVS     r1,#1                 ;1168
0000ae  0689              LSLS     r1,r1,#26             ;1168
0000b0  4308              ORRS     r0,r0,r1              ;1168
0000b2  6821              LDR      r1,[r4,#0]            ;1168
0000b4  6308              STR      r0,[r1,#0x30]         ;1168
0000b6  e001              B        |L6.188|
                  |L6.184|
0000b8  e000              B        |L6.188|
                  |L6.186|
0000ba  bf00              NOP                            ;1176
                  |L6.188|
0000bc  bf00              NOP                            ;1143
0000be  2203              MOVS     r2,#3                 ;1180
0000c0  4631              MOV      r1,r6                 ;1180
0000c2  6820              LDR      r0,[r4,#0]            ;1180
0000c4  f7fffffe          BL       TM_CCxChannelCmd
0000c8  2101              MOVS     r1,#1                 ;1182
0000ca  2021              MOVS     r0,#0x21              ;1182
0000cc  5501              STRB     r1,[r0,r4]            ;1182
0000ce  6820              LDR      r0,[r4,#0]            ;1185
0000d0  6900              LDR      r0,[r0,#0x10]         ;1185
0000d2  2103              MOVS     r1,#3                 ;1185
0000d4  4308              ORRS     r0,r0,r1              ;1185
0000d6  6821              LDR      r1,[r4,#0]            ;1185
0000d8  6108              STR      r0,[r1,#0x10]         ;1185
0000da  2000              MOVS     r0,#0                 ;1188
0000dc  e79a              B        |L6.20|
;;;1190   
                          ENDP

0000de  0000              DCW      0x0000
                  |L6.224|
                          DCD      TM_DMADelayPulseCplt
                  |L6.228|
                          DCD      TM_DMAError

                          AREA ||i.MID_TM_8Bx2OC_Start_IT||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2OC_Start_IT PROC
;;;991     */
;;;992    MID_StatusTypeDef MID_TM_8Bx2OC_Start_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;993    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;994        switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L7.24|
00000a  2d01              CMP      r5,#1
00000c  d012              BEQ      |L7.52|
00000e  2d02              CMP      r5,#2
000010  d01e              BEQ      |L7.80|
000012  2d03              CMP      r5,#3
000014  d138              BNE      |L7.136|
000016  e029              B        |L7.108|
                  |L7.24|
;;;995        {
;;;996        case MID_TM_Channel0:
;;;997            /* Enable the TM Capture/Compare 0 interrupt */
;;;998            __DRV_TM_ENABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4308              ORRS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;999            __DRV_TM_ENABLE_ITEA(mTM);
000026  6820              LDR      r0,[r4,#0]
000028  6840              LDR      r0,[r0,#4]
00002a  2101              MOVS     r1,#1
00002c  4308              ORRS     r0,r0,r1
00002e  6821              LDR      r1,[r4,#0]
000030  6048              STR      r0,[r1,#4]
;;;1000           break;
000032  e02a              B        |L7.138|
                  |L7.52|
;;;1001   
;;;1002       case MID_TM_Channel1:
;;;1003           /* Enable the TM Capture/Compare 1 interrupt */
;;;1004           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC1);
000034  6820              LDR      r0,[r4,#0]
000036  6840              LDR      r0,[r0,#4]
000038  2101              MOVS     r1,#1
00003a  0249              LSLS     r1,r1,#9
00003c  4308              ORRS     r0,r0,r1
00003e  6821              LDR      r1,[r4,#0]
000040  6048              STR      r0,[r1,#4]
;;;1005           __DRV_TM_ENABLE_ITEA(mTM);
000042  6820              LDR      r0,[r4,#0]
000044  6840              LDR      r0,[r0,#4]
000046  2101              MOVS     r1,#1
000048  4308              ORRS     r0,r0,r1
00004a  6821              LDR      r1,[r4,#0]
00004c  6048              STR      r0,[r1,#4]
;;;1006           break;
00004e  e01c              B        |L7.138|
                  |L7.80|
;;;1007   
;;;1008       case MID_TM_Channel2:
;;;1009           /* Enable the TM Capture/Compare 2 interrupt */
;;;1010           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC2);
000050  6820              LDR      r0,[r4,#0]
000052  6840              LDR      r0,[r0,#4]
000054  2101              MOVS     r1,#1
000056  0289              LSLS     r1,r1,#10
000058  4308              ORRS     r0,r0,r1
00005a  6821              LDR      r1,[r4,#0]
00005c  6048              STR      r0,[r1,#4]
;;;1011           __DRV_TM_ENABLE_ITEA(mTM);
00005e  6820              LDR      r0,[r4,#0]
000060  6840              LDR      r0,[r0,#4]
000062  2101              MOVS     r1,#1
000064  4308              ORRS     r0,r0,r1
000066  6821              LDR      r1,[r4,#0]
000068  6048              STR      r0,[r1,#4]
;;;1012           break;
00006a  e00e              B        |L7.138|
                  |L7.108|
;;;1013   
;;;1014       case MID_TM_Channel3:
;;;1015           /* Enable the TM Capture/Compare 3 interrupt */
;;;1016           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC3);
00006c  6820              LDR      r0,[r4,#0]
00006e  6840              LDR      r0,[r0,#4]
000070  2101              MOVS     r1,#1
000072  02c9              LSLS     r1,r1,#11
000074  4308              ORRS     r0,r0,r1
000076  6821              LDR      r1,[r4,#0]
000078  6048              STR      r0,[r1,#4]
;;;1017           __DRV_TM_ENABLE_ITEA(mTM);
00007a  6820              LDR      r0,[r4,#0]
00007c  6840              LDR      r0,[r0,#4]
00007e  2101              MOVS     r1,#1
000080  4308              ORRS     r0,r0,r1
000082  6821              LDR      r1,[r4,#0]
000084  6048              STR      r0,[r1,#4]
;;;1018           break;
000086  e000              B        |L7.138|
                  |L7.136|
;;;1019   
;;;1020       default:
;;;1021           break;
000088  bf00              NOP      
                  |L7.138|
00008a  bf00              NOP                            ;1000
;;;1022       }
;;;1023   
;;;1024       /* Enable the Output compare channel */
;;;1025       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_8bitx2_OutputCompare);
00008c  2203              MOVS     r2,#3
00008e  4629              MOV      r1,r5
000090  6820              LDR      r0,[r4,#0]
000092  f7fffffe          BL       TM_CCxChannelCmd
;;;1026   
;;;1027       // __MID_TM_ENABLE(mTM);
;;;1028       __DRV_TM_ENABLE(mTM);
000096  6820              LDR      r0,[r4,#0]
000098  6900              LDR      r0,[r0,#0x10]
00009a  2103              MOVS     r1,#3
00009c  4308              ORRS     r0,r0,r1
00009e  6821              LDR      r1,[r4,#0]
0000a0  6108              STR      r0,[r1,#0x10]
;;;1029   
;;;1030       /* Return function status */
;;;1031       return MID_SUCCESS;
0000a2  2000              MOVS     r0,#0
;;;1032   }
0000a4  bd30              POP      {r4,r5,pc}
;;;1033   
                          ENDP


                          AREA ||i.MID_TM_8Bx2OC_Stop||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2OC_Stop PROC
;;;958     */
;;;959    MID_StatusTypeDef MID_TM_8Bx2OC_Stop(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;960    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;961        /* Disable the Output compare channel */
;;;962        TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;963    
;;;964        /* Disable the Peripheral */
;;;965        __DRV_TM_DISABLE(mTM);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  8e00              LDRH     r0,[r0,#0x30]
000016  2800              CMP      r0,#0
000018  d105              BNE      |L8.38|
00001a  6820              LDR      r0,[r4,#0]
00001c  6900              LDR      r0,[r0,#0x10]
00001e  0880              LSRS     r0,r0,#2
000020  0080              LSLS     r0,r0,#2
000022  6821              LDR      r1,[r4,#0]
000024  6108              STR      r0,[r1,#0x10]
                  |L8.38|
000026  bf00              NOP      
;;;966    
;;;967        /* Return function status */
;;;968        return MID_SUCCESS;
000028  2000              MOVS     r0,#0
;;;969    }
00002a  bd30              POP      {r4,r5,pc}
;;;970    
                          ENDP


                          AREA ||i.MID_TM_8Bx2OC_Stop_DMA||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2OC_Stop_DMA PROC
;;;1210    */
;;;1211   MID_StatusTypeDef MID_TM_8Bx2OC_Stop_DMA(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;1212   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1213       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L9.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L9.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L9.56|
000012  2d03              CMP      r5,#3
000014  d119              BNE      |L9.74|
000016  e017              B        |L9.72|
                  |L9.24|
;;;1214       {
;;;1215       case MID_TM_Channel0:
;;;1216           /* Disable the TM Capture/Compare 0 interrupt */
;;;1217           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH0_OC);
000018  6820              LDR      r0,[r4,#0]
00001a  6b00              LDR      r0,[r0,#0x30]
00001c  2101              MOVS     r1,#1
00001e  0609              LSLS     r1,r1,#24
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6308              STR      r0,[r1,#0x30]
;;;1218           break;
000026  e011              B        |L9.76|
                  |L9.40|
;;;1219   
;;;1220       case MID_TM_Channel1:
;;;1221           /* Disable the TM Capture/Compare 1 DMA request */
;;;1222           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH1_OC);
000028  6820              LDR      r0,[r4,#0]
00002a  6b00              LDR      r0,[r0,#0x30]
00002c  2101              MOVS     r1,#1
00002e  0649              LSLS     r1,r1,#25
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6308              STR      r0,[r1,#0x30]
;;;1223           break;
000036  e009              B        |L9.76|
                  |L9.56|
;;;1224   
;;;1225       case MID_TM_Channel2:
;;;1226           /* Disable the TM Capture/Compare 2 DMA request */
;;;1227           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH2_OC);
000038  6820              LDR      r0,[r4,#0]
00003a  6b00              LDR      r0,[r0,#0x30]
00003c  2101              MOVS     r1,#1
00003e  0689              LSLS     r1,r1,#26
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6308              STR      r0,[r1,#0x30]
;;;1228           break;
000046  e001              B        |L9.76|
                  |L9.72|
;;;1229   
;;;1230       case MID_TM_Channel3:
;;;1231           // MG32x02z MCU don't support Channel3 for OC output
;;;1232           break;
000048  e000              B        |L9.76|
                  |L9.74|
;;;1233   
;;;1234       default:
;;;1235           break;
00004a  bf00              NOP      
                  |L9.76|
00004c  bf00              NOP                            ;1218
;;;1236       }
;;;1237   
;;;1238       /* Disable the Output compare channel */
;;;1239       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
00004e  2200              MOVS     r2,#0
000050  4629              MOV      r1,r5
000052  6820              LDR      r0,[r4,#0]
000054  f7fffffe          BL       TM_CCxChannelCmd
;;;1240   
;;;1241       /* Disable the Peripheral */
;;;1242       __DRV_TM_DISABLE(mTM);
000058  bf00              NOP      
00005a  6820              LDR      r0,[r4,#0]
00005c  8e00              LDRH     r0,[r0,#0x30]
00005e  2800              CMP      r0,#0
000060  d105              BNE      |L9.110|
000062  6820              LDR      r0,[r4,#0]
000064  6900              LDR      r0,[r0,#0x10]
000066  0880              LSRS     r0,r0,#2
000068  0080              LSLS     r0,r0,#2
00006a  6821              LDR      r1,[r4,#0]
00006c  6108              STR      r0,[r1,#0x10]
                  |L9.110|
00006e  bf00              NOP      
;;;1243   
;;;1244       /* Change the mTM state */
;;;1245       mTM->State = MID_TM_STATE_READY;
000070  2101              MOVS     r1,#1
000072  2021              MOVS     r0,#0x21
000074  5501              STRB     r1,[r0,r4]
;;;1246   
;;;1247       /* Return function status */
;;;1248       return MID_SUCCESS;
000076  2000              MOVS     r0,#0
;;;1249   }
000078  bd30              POP      {r4,r5,pc}
;;;1250   ///@}
                          ENDP


                          AREA ||i.MID_TM_8Bx2OC_Stop_IT||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2OC_Stop_IT PROC
;;;1054    */
;;;1055   MID_StatusTypeDef MID_TM_8Bx2OC_Stop_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;1056   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1057       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L10.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L10.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L10.56|
000012  2d03              CMP      r5,#3
000014  d120              BNE      |L10.88|
000016  e017              B        |L10.72|
                  |L10.24|
;;;1058       {
;;;1059       case MID_TM_Channel0:
;;;1060           /* Enable the TM Capture/Compare 0 interrupt */
;;;1061           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;1062           break;
000026  e018              B        |L10.90|
                  |L10.40|
;;;1063   
;;;1064       case MID_TM_Channel1:
;;;1065           /* Enable the TM Capture/Compare 1 interrupt */
;;;1066           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC1);
000028  6820              LDR      r0,[r4,#0]
00002a  6840              LDR      r0,[r0,#4]
00002c  2101              MOVS     r1,#1
00002e  0249              LSLS     r1,r1,#9
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6048              STR      r0,[r1,#4]
;;;1067           break;
000036  e010              B        |L10.90|
                  |L10.56|
;;;1068   
;;;1069       case MID_TM_Channel2:
;;;1070           /* Enable the TM Capture/Compare 2 interrupt */
;;;1071           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC2);
000038  6820              LDR      r0,[r4,#0]
00003a  6840              LDR      r0,[r0,#4]
00003c  2101              MOVS     r1,#1
00003e  0289              LSLS     r1,r1,#10
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6048              STR      r0,[r1,#4]
;;;1072           break;
000046  e008              B        |L10.90|
                  |L10.72|
;;;1073   
;;;1074       case MID_TM_Channel3:
;;;1075           /* Enable the TM Capture/Compare 3 interrupt */
;;;1076           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC3);
000048  6820              LDR      r0,[r4,#0]
00004a  6840              LDR      r0,[r0,#4]
00004c  2101              MOVS     r1,#1
00004e  02c9              LSLS     r1,r1,#11
000050  4388              BICS     r0,r0,r1
000052  6821              LDR      r1,[r4,#0]
000054  6048              STR      r0,[r1,#4]
;;;1077           break;
000056  e000              B        |L10.90|
                  |L10.88|
;;;1078   
;;;1079       default:
;;;1080           break;
000058  bf00              NOP      
                  |L10.90|
00005a  bf00              NOP                            ;1062
;;;1081       }
;;;1082   
;;;1083       /* Enable the Output compare channel */
;;;1084       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
00005c  2200              MOVS     r2,#0
00005e  4629              MOV      r1,r5
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       TM_CCxChannelCmd
;;;1085   
;;;1086       /* Enable the Peripheral */
;;;1087       __DRV_TM_DISABLE(mTM);
000066  bf00              NOP      
000068  6820              LDR      r0,[r4,#0]
00006a  8e00              LDRH     r0,[r0,#0x30]
00006c  2800              CMP      r0,#0
00006e  d105              BNE      |L10.124|
000070  6820              LDR      r0,[r4,#0]
000072  6900              LDR      r0,[r0,#0x10]
000074  0880              LSRS     r0,r0,#2
000076  0080              LSLS     r0,r0,#2
000078  6821              LDR      r1,[r4,#0]
00007a  6108              STR      r0,[r1,#0x10]
                  |L10.124|
00007c  bf00              NOP      
;;;1088   
;;;1089       /* check IT for ITEA */
;;;1090       if((mTM->Instance->INT.W & 0xFFFFFFFE) == 0)
00007e  6820              LDR      r0,[r4,#0]
000080  6840              LDR      r0,[r0,#4]
000082  0840              LSRS     r0,r0,#1
000084  0040              LSLS     r0,r0,#1
000086  2800              CMP      r0,#0
000088  d10b              BNE      |L10.162|
;;;1091           __DRV_TM_DISABLE_ITEA(mTM);
00008a  bf00              NOP      
00008c  6820              LDR      r0,[r4,#0]
00008e  6840              LDR      r0,[r0,#4]
000090  2800              CMP      r0,#0
000092  d005              BEQ      |L10.160|
000094  6820              LDR      r0,[r4,#0]
000096  6840              LDR      r0,[r0,#4]
000098  0840              LSRS     r0,r0,#1
00009a  0040              LSLS     r0,r0,#1
00009c  6821              LDR      r1,[r4,#0]
00009e  6048              STR      r0,[r1,#4]
                  |L10.160|
0000a0  bf00              NOP      
                  |L10.162|
;;;1092   
;;;1093       /* Return function status */
;;;1094       return MID_SUCCESS;
0000a2  2000              MOVS     r0,#0
;;;1095   }
0000a4  bd30              POP      {r4,r5,pc}
;;;1096   
                          ENDP


                          AREA ||i.MID_TM_8Bx2PWM_DTG_DeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2PWM_DTG_DeInit PROC
;;;3100    */
;;;3101   MID_StatusTypeDef MID_TM_8Bx2PWM_DTG_DeInit(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;3102   {
000002  4604              MOV      r4,r0
;;;3103       mTM->State = MID_TM_STATE_BUSY;
000004  2100              MOVS     r1,#0
000006  2021              MOVS     r0,#0x21
000008  5501              STRB     r1,[r0,r4]
;;;3104   
;;;3105       /* Disable the TM Peripheral Clock */
;;;3106       __DRV_TM_DISABLE(mTM);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  8e00              LDRH     r0,[r0,#0x30]
000010  2800              CMP      r0,#0
000012  d105              BNE      |L11.32|
000014  6820              LDR      r0,[r4,#0]
000016  6900              LDR      r0,[r0,#0x10]
000018  0880              LSRS     r0,r0,#2
00001a  0080              LSLS     r0,r0,#2
00001c  6821              LDR      r1,[r4,#0]
00001e  6108              STR      r0,[r1,#0x10]
                  |L11.32|
000020  bf00              NOP      
;;;3107   
;;;3108       /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;3109       MID_TM_8Bx2PWM_DTG_MspDeInit(mTM);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       MID_TM_8Bx2PWM_DTG_MspDeInit
;;;3110   
;;;3111       /* Change TM state */
;;;3112       mTM->State = MID_TM_STATE_RESET;
000028  2102              MOVS     r1,#2
00002a  2021              MOVS     r0,#0x21
00002c  5501              STRB     r1,[r0,r4]
;;;3113   
;;;3114       /* Release Lock */
;;;3115       __MID_UNLOCK(mTM);
00002e  bf00              NOP      
000030  2100              MOVS     r1,#0
000032  2020              MOVS     r0,#0x20
000034  5501              STRB     r1,[r0,r4]
000036  bf00              NOP      
;;;3116   
;;;3117       return MID_SUCCESS;
000038  2000              MOVS     r0,#0
;;;3118   }
00003a  bd10              POP      {r4,pc}
;;;3119   
                          ENDP


                          AREA ||i.MID_TM_8Bx2PWM_DTG_Init||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2PWM_DTG_Init PROC
;;;3062    */
;;;3063   MID_StatusTypeDef MID_TM_8Bx2PWM_DTG_Init(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;3064   {
000002  4604              MOV      r4,r0
;;;3065   
;;;3066       if(mTM->State == MID_TM_STATE_RESET)
000004  2021              MOVS     r0,#0x21
000006  5d00              LDRB     r0,[r0,r4]
000008  2802              CMP      r0,#2
00000a  d105              BNE      |L12.24|
;;;3067       {
;;;3068           /* Allocate lock resource and initialize it */
;;;3069           mTM->Lock = MID_UnLocked;
00000c  2100              MOVS     r1,#0
00000e  2020              MOVS     r0,#0x20
000010  5501              STRB     r1,[r0,r4]
;;;3070   
;;;3071           /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;3072           MID_TM_8Bx2PWM_DTG_MspInit(mTM);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       MID_TM_8Bx2PWM_DTG_MspInit
                  |L12.24|
;;;3073       }
;;;3074   
;;;3075       /* Set the TM state */
;;;3076       mTM->State= MID_TM_STATE_BUSY;
000018  2100              MOVS     r1,#0
00001a  2021              MOVS     r0,#0x21
00001c  5501              STRB     r1,[r0,r4]
;;;3077   
;;;3078       /* Init the base time for the Output Compare */
;;;3079       TM_Base_SetConfig(mTM->Instance,  &mTM->Init);
00001e  1d21              ADDS     r1,r4,#4
000020  6820              LDR      r0,[r4,#0]
000022  f7fffffe          BL       TM_Base_SetConfig
;;;3080   
;;;3081       /* Initialize the TM state*/
;;;3082       mTM->State= MID_TM_STATE_READY;
000026  2101              MOVS     r1,#1
000028  2021              MOVS     r0,#0x21
00002a  5501              STRB     r1,[r0,r4]
;;;3083   
;;;3084       return MID_SUCCESS;
00002c  2000              MOVS     r0,#0
;;;3085   
;;;3086   }
00002e  bd10              POP      {r4,pc}
;;;3087   
                          ENDP


                          AREA ||i.MID_TM_8Bx2PWM_DTG_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2PWM_DTG_MspDeInit PROC
;;;3144    */
;;;3145   __weak void MID_TM_8Bx2PWM_DTG_MspDeInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;3146   {
;;;3147       /* Prevent unused argument(s) compilation warning */
;;;3148       UNUSED(mTM);
;;;3149       /* NOTE : This function Should not be modified, when the callback is needed,
;;;3150                 the MID_TM_8Bx2PWM_DTG_MspDeInit could be implemented in the user file
;;;3151        */
;;;3152   }
;;;3153   
                          ENDP


                          AREA ||i.MID_TM_8Bx2PWM_DTG_MspInit||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2PWM_DTG_MspInit PROC
;;;3127    */
;;;3128   __weak void MID_TM_8Bx2PWM_DTG_MspInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;3129   {
;;;3130       /* Prevent unused argument(s) compilation warning */
;;;3131       UNUSED(mTM);
;;;3132       /* NOTE : This function Should not be modified, when the callback is needed,
;;;3133                 the MID_TM_8Bx2PWM_DTG_MspInit could be implemented in the user file
;;;3134        */
;;;3135   }
;;;3136   
                          ENDP


                          AREA ||i.MID_TM_8Bx2PWM_DTG_Start||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2PWM_DTG_Start PROC
;;;3182    */
;;;3183   MID_StatusTypeDef MID_TM_8Bx2PWM_DTG_Start(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;3184   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3185   
;;;3186       /* Enable the Capture compare channel */
;;;3187       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_8bitx2_PWM_COMPLEMENT);
000006  2207              MOVS     r2,#7
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;3188   
;;;3189       // Enable Break Control for PWM mode 
;;;3190       if(mTM->Instance == TM36) 
000010  4908              LDR      r1,|L15.52|
000012  6820              LDR      r0,[r4,#0]
000014  4288              CMP      r0,r1
000016  d105              BNE      |L15.36|
;;;3191       {
;;;3192           // control TM36_BK_EN & TM36_BK_EN3
;;;3193           __DRV_TM_ENABLE_BREAK(mTM);
000018  6820              LDR      r0,[r4,#0]
00001a  6c80              LDR      r0,[r0,#0x48]
00001c  2109              MOVS     r1,#9
00001e  4308              ORRS     r0,r0,r1
000020  6821              LDR      r1,[r4,#0]
000022  6488              STR      r0,[r1,#0x48]
                  |L15.36|
;;;3194       }
;;;3195   
;;;3196       /* Enable the Peripheral */
;;;3197       __DRV_TM_ENABLE(mTM);
000024  6820              LDR      r0,[r4,#0]
000026  6900              LDR      r0,[r0,#0x10]
000028  2103              MOVS     r1,#3
00002a  4308              ORRS     r0,r0,r1
00002c  6821              LDR      r1,[r4,#0]
00002e  6108              STR      r0,[r1,#0x10]
;;;3198   
;;;3199       /* Return function status */
;;;3200       return MID_SUCCESS;
000030  2000              MOVS     r0,#0
;;;3201   }
000032  bd30              POP      {r4,r5,pc}
;;;3202   
                          ENDP

                  |L15.52|
                          DCD      0x56860000

                          AREA ||i.MID_TM_8Bx2PWM_DTG_Start_DMA||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2PWM_DTG_Start_DMA PROC
;;;3464    */
;;;3465   MID_StatusTypeDef MID_TM_8Bx2PWM_DTG_Start_DMA(TM_HandleTypeDef* mTM, uint32_t Channel, uint32_t* pData, uint16_t Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3466   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;3467       if((mTM->State) == (MID_TM_STATE_BUSY))
00000a  2021              MOVS     r0,#0x21
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2800              CMP      r0,#0
000010  d101              BNE      |L16.22|
;;;3468           return MID_BUSY;
000012  2002              MOVS     r0,#2
                  |L16.20|
;;;3469       else if((mTM->State) == (MID_TM_STATE_READY))
;;;3470       {
;;;3471           if(((uint32_t)pData == 0U) && (Length > 0U))
;;;3472               return MID_FAILURE;
;;;3473           else
;;;3474               mTM->State = MID_TM_STATE_BUSY;
;;;3475       }
;;;3476   
;;;3477       switch(Channel)
;;;3478       {
;;;3479       case MID_TM_Channel0:
;;;3480       {
;;;3481           /* Set the DMA Period elapsed callback */
;;;3482           mTM->hDMA[TM_DMA_ID_CC0]->XferCpltCallback = &TM_DMADelayPulseCplt;
;;;3483   
;;;3484           /* Set the DMA error callback */
;;;3485           mTM->hDMA[TM_DMA_ID_CC0]->XferErrorCallback = TM_DMAError ;
;;;3486   
;;;3487           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC0], (uint32_t)pData, NULL, Length);
;;;3488   
;;;3489           /* Enable the TM Capture/Compare 0 DMA request */
;;;3490           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH0_OC);
;;;3491       }
;;;3492       break;
;;;3493   
;;;3494       case MID_TM_Channel1:
;;;3495       {
;;;3496           /* Set the DMA Period elapsed callback */
;;;3497           mTM->hDMA[TM_DMA_ID_CC1]->XferCpltCallback = TM_DMADelayPulseCplt;
;;;3498   
;;;3499           /* Set the DMA error callback */
;;;3500           mTM->hDMA[TM_DMA_ID_CC1]->XferErrorCallback = TM_DMAError ;
;;;3501   
;;;3502           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC1], (uint32_t)pData, NULL, Length);
;;;3503   
;;;3504           /* Enable the TM Capture/Compare 1 DMA request */
;;;3505           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH1_OC);
;;;3506       }
;;;3507       break;
;;;3508   
;;;3509       case MID_TM_Channel2:
;;;3510       {
;;;3511           /* Set the DMA Period elapsed callback */
;;;3512           mTM->hDMA[TM_DMA_ID_CC2]->XferCpltCallback = TM_DMADelayPulseCplt;
;;;3513   
;;;3514           /* Set the DMA error callback */
;;;3515           mTM->hDMA[TM_DMA_ID_CC2]->XferErrorCallback = TM_DMAError ;
;;;3516           
;;;3517           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC2], (uint32_t)pData, NULL, Length);
;;;3518   
;;;3519           /* Enable the TM Capture/Compare 2 DMA request */
;;;3520           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH2_OC);
;;;3521       }
;;;3522       break;
;;;3523   
;;;3524       case MID_TM_Channel3:
;;;3525       {
;;;3526           // MG32x02z MCU don't support Channel3 for OC output
;;;3527           mTM->State = MID_TM_STATE_READY;
;;;3528           return MID_FAILURE;
;;;3529       }
;;;3530   
;;;3531       default:
;;;3532           break;
;;;3533       }
;;;3534   
;;;3535       /* Enable the Output compare channel */
;;;3536       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_8bitx2_PWM_COMPLEMENT);
;;;3537   
;;;3538       // Enable Break Control for PWM mode 
;;;3539       if(mTM->Instance == TM36) 
;;;3540       {
;;;3541           // control TM36_BK_EN & TM36_BK_EN3
;;;3542           __DRV_TM_ENABLE_BREAK(mTM);
;;;3543       }
;;;3544       
;;;3545       /* update state */
;;;3546       mTM->State = MID_TM_STATE_READY;
;;;3547   
;;;3548       /* Enable the Peripheral */
;;;3549       __DRV_TM_ENABLE(mTM);
;;;3550   
;;;3551       /* Return function status */
;;;3552       return MID_SUCCESS;
;;;3553   }
000014  bdf8              POP      {r3-r7,pc}
                  |L16.22|
000016  2021              MOVS     r0,#0x21              ;3469
000018  5d00              LDRB     r0,[r0,r4]            ;3469
00001a  2801              CMP      r0,#1                 ;3469
00001c  d107              BNE      |L16.46|
00001e  2d00              CMP      r5,#0                 ;3471
000020  d102              BNE      |L16.40|
000022  2f00              CMP      r7,#0                 ;3471
000024  d000              BEQ      |L16.40|
000026  e7f5              B        |L16.20|
                  |L16.40|
000028  2100              MOVS     r1,#0                 ;3474
00002a  2021              MOVS     r0,#0x21              ;3474
00002c  5501              STRB     r1,[r0,r4]            ;3474
                  |L16.46|
00002e  2e00              CMP      r6,#0                 ;3477
000030  d006              BEQ      |L16.64|
000032  2e01              CMP      r6,#1                 ;3477
000034  d018              BEQ      |L16.104|
000036  2e02              CMP      r6,#2                 ;3477
000038  d02a              BEQ      |L16.144|
00003a  2e03              CMP      r6,#3                 ;3477
00003c  d141              BNE      |L16.194|
00003e  e03b              B        |L16.184|
                  |L16.64|
000040  482e              LDR      r0,|L16.252|
000042  6921              LDR      r1,[r4,#0x10]         ;3482
000044  62c8              STR      r0,[r1,#0x2c]         ;3482
000046  482e              LDR      r0,|L16.256|
000048  6921              LDR      r1,[r4,#0x10]         ;3485
00004a  6348              STR      r0,[r1,#0x34]         ;3485
00004c  463b              MOV      r3,r7                 ;3487
00004e  2200              MOVS     r2,#0                 ;3487
000050  4629              MOV      r1,r5                 ;3487
000052  6920              LDR      r0,[r4,#0x10]         ;3487
000054  f7fffffe          BL       MID_DMA_Start_IT
000058  6820              LDR      r0,[r4,#0]            ;3490
00005a  6b00              LDR      r0,[r0,#0x30]         ;3490
00005c  2101              MOVS     r1,#1                 ;3490
00005e  0609              LSLS     r1,r1,#24             ;3490
000060  4308              ORRS     r0,r0,r1              ;3490
000062  6821              LDR      r1,[r4,#0]            ;3490
000064  6308              STR      r0,[r1,#0x30]         ;3490
000066  e02d              B        |L16.196|
                  |L16.104|
000068  4924              LDR      r1,|L16.252|
00006a  6960              LDR      r0,[r4,#0x14]         ;3497
00006c  62c1              STR      r1,[r0,#0x2c]         ;3497
00006e  4924              LDR      r1,|L16.256|
000070  6960              LDR      r0,[r4,#0x14]         ;3500
000072  6341              STR      r1,[r0,#0x34]         ;3500
000074  463b              MOV      r3,r7                 ;3502
000076  2200              MOVS     r2,#0                 ;3502
000078  4629              MOV      r1,r5                 ;3502
00007a  6960              LDR      r0,[r4,#0x14]         ;3502
00007c  f7fffffe          BL       MID_DMA_Start_IT
000080  6820              LDR      r0,[r4,#0]            ;3505
000082  6b00              LDR      r0,[r0,#0x30]         ;3505
000084  2101              MOVS     r1,#1                 ;3505
000086  0649              LSLS     r1,r1,#25             ;3505
000088  4308              ORRS     r0,r0,r1              ;3505
00008a  6821              LDR      r1,[r4,#0]            ;3505
00008c  6308              STR      r0,[r1,#0x30]         ;3505
00008e  e019              B        |L16.196|
                  |L16.144|
000090  491a              LDR      r1,|L16.252|
000092  69a0              LDR      r0,[r4,#0x18]         ;3512
000094  62c1              STR      r1,[r0,#0x2c]         ;3512
000096  491a              LDR      r1,|L16.256|
000098  69a0              LDR      r0,[r4,#0x18]         ;3515
00009a  6341              STR      r1,[r0,#0x34]         ;3515
00009c  463b              MOV      r3,r7                 ;3517
00009e  2200              MOVS     r2,#0                 ;3517
0000a0  4629              MOV      r1,r5                 ;3517
0000a2  69a0              LDR      r0,[r4,#0x18]         ;3517
0000a4  f7fffffe          BL       MID_DMA_Start_IT
0000a8  6820              LDR      r0,[r4,#0]            ;3520
0000aa  6b00              LDR      r0,[r0,#0x30]         ;3520
0000ac  2101              MOVS     r1,#1                 ;3520
0000ae  0689              LSLS     r1,r1,#26             ;3520
0000b0  4308              ORRS     r0,r0,r1              ;3520
0000b2  6821              LDR      r1,[r4,#0]            ;3520
0000b4  6308              STR      r0,[r1,#0x30]         ;3520
0000b6  e005              B        |L16.196|
                  |L16.184|
0000b8  2101              MOVS     r1,#1                 ;3527
0000ba  2021              MOVS     r0,#0x21              ;3527
0000bc  5501              STRB     r1,[r0,r4]            ;3527
0000be  2001              MOVS     r0,#1                 ;3528
0000c0  e7a8              B        |L16.20|
                  |L16.194|
0000c2  bf00              NOP                            ;3532
                  |L16.196|
0000c4  bf00              NOP                            ;3492
0000c6  2207              MOVS     r2,#7                 ;3536
0000c8  4631              MOV      r1,r6                 ;3536
0000ca  6820              LDR      r0,[r4,#0]            ;3536
0000cc  f7fffffe          BL       TM_CCxChannelCmd
0000d0  490c              LDR      r1,|L16.260|
0000d2  6820              LDR      r0,[r4,#0]            ;3539
0000d4  4288              CMP      r0,r1                 ;3539
0000d6  d105              BNE      |L16.228|
0000d8  6820              LDR      r0,[r4,#0]            ;3542
0000da  6c80              LDR      r0,[r0,#0x48]         ;3542
0000dc  2109              MOVS     r1,#9                 ;3542
0000de  4308              ORRS     r0,r0,r1              ;3542
0000e0  6821              LDR      r1,[r4,#0]            ;3542
0000e2  6488              STR      r0,[r1,#0x48]         ;3542
                  |L16.228|
0000e4  2101              MOVS     r1,#1                 ;3546
0000e6  2021              MOVS     r0,#0x21              ;3546
0000e8  5501              STRB     r1,[r0,r4]            ;3546
0000ea  6820              LDR      r0,[r4,#0]            ;3549
0000ec  6900              LDR      r0,[r0,#0x10]         ;3549
0000ee  2103              MOVS     r1,#3                 ;3549
0000f0  4308              ORRS     r0,r0,r1              ;3549
0000f2  6821              LDR      r1,[r4,#0]            ;3549
0000f4  6108              STR      r0,[r1,#0x10]         ;3549
0000f6  2000              MOVS     r0,#0                 ;3552
0000f8  e78c              B        |L16.20|
;;;3554   
                          ENDP

0000fa  0000              DCW      0x0000
                  |L16.252|
                          DCD      TM_DMADelayPulseCplt
                  |L16.256|
                          DCD      TM_DMAError
                  |L16.260|
                          DCD      0x56860000

                          AREA ||i.MID_TM_8Bx2PWM_DTG_Start_IT||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2PWM_DTG_Start_IT PROC
;;;3285    */
;;;3286   MID_StatusTypeDef MID_TM_8Bx2PWM_DTG_Start_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;3287   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3288       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L17.24|
00000a  2d01              CMP      r5,#1
00000c  d012              BEQ      |L17.52|
00000e  2d02              CMP      r5,#2
000010  d01e              BEQ      |L17.80|
000012  2d03              CMP      r5,#3
000014  d12c              BNE      |L17.112|
000016  e029              B        |L17.108|
                  |L17.24|
;;;3289       {
;;;3290       case MID_TM_Channel0:
;;;3291       {
;;;3292           /* Enable the TM Capture/Compare 0 interrupt */
;;;3293           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4308              ORRS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;3294           __DRV_TM_ENABLE_ITEA(mTM);
000026  6820              LDR      r0,[r4,#0]
000028  6840              LDR      r0,[r0,#4]
00002a  2101              MOVS     r1,#1
00002c  4308              ORRS     r0,r0,r1
00002e  6821              LDR      r1,[r4,#0]
000030  6048              STR      r0,[r1,#4]
;;;3295       }
;;;3296       break;
000032  e01e              B        |L17.114|
                  |L17.52|
;;;3297   
;;;3298       case MID_TM_Channel1:
;;;3299       {
;;;3300           /* Enable the TM Capture/Compare 1 interrupt */
;;;3301           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC1);
000034  6820              LDR      r0,[r4,#0]
000036  6840              LDR      r0,[r0,#4]
000038  2101              MOVS     r1,#1
00003a  0249              LSLS     r1,r1,#9
00003c  4308              ORRS     r0,r0,r1
00003e  6821              LDR      r1,[r4,#0]
000040  6048              STR      r0,[r1,#4]
;;;3302           __DRV_TM_ENABLE_ITEA(mTM);
000042  6820              LDR      r0,[r4,#0]
000044  6840              LDR      r0,[r0,#4]
000046  2101              MOVS     r1,#1
000048  4308              ORRS     r0,r0,r1
00004a  6821              LDR      r1,[r4,#0]
00004c  6048              STR      r0,[r1,#4]
;;;3303       }
;;;3304       break;
00004e  e010              B        |L17.114|
                  |L17.80|
;;;3305   
;;;3306       case MID_TM_Channel2:
;;;3307       {
;;;3308           /* Enable the TM Capture/Compare 2 interrupt */
;;;3309           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC2);
000050  6820              LDR      r0,[r4,#0]
000052  6840              LDR      r0,[r0,#4]
000054  2101              MOVS     r1,#1
000056  0289              LSLS     r1,r1,#10
000058  4308              ORRS     r0,r0,r1
00005a  6821              LDR      r1,[r4,#0]
00005c  6048              STR      r0,[r1,#4]
;;;3310           __DRV_TM_ENABLE_ITEA(mTM);
00005e  6820              LDR      r0,[r4,#0]
000060  6840              LDR      r0,[r0,#4]
000062  2101              MOVS     r1,#1
000064  4308              ORRS     r0,r0,r1
000066  6821              LDR      r1,[r4,#0]
000068  6048              STR      r0,[r1,#4]
;;;3311       }
;;;3312       break;
00006a  e002              B        |L17.114|
                  |L17.108|
;;;3313   
;;;3314       case MID_TM_Channel3:
;;;3315       {
;;;3316           // MG32x02z MCU don't support Channel3 for OC output
;;;3317           return MID_FAILURE;
00006c  2001              MOVS     r0,#1
                  |L17.110|
;;;3318       }
;;;3319   
;;;3320       default:
;;;3321           break;
;;;3322       }
;;;3323   
;;;3324       /* Enable the Output compare channel */
;;;3325       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_16bit_PWM_COMPLEMENT);
;;;3326   
;;;3327       // Enable Break Control for PWM mode 
;;;3328       if(mTM->Instance == TM36) 
;;;3329       {
;;;3330           // control TM36_BK_EN & TM36_BK_EN3
;;;3331           __DRV_TM_ENABLE_BREAK(mTM);
;;;3332       }
;;;3333   
;;;3334       // __MID_TM_ENABLE(mTM);
;;;3335       __DRV_TM_ENABLE(mTM);
;;;3336   
;;;3337       /* Return function status */
;;;3338       return MID_SUCCESS;
;;;3339   }
00006e  bd30              POP      {r4,r5,pc}
                  |L17.112|
000070  bf00              NOP                            ;3321
                  |L17.114|
000072  bf00              NOP                            ;3296
000074  2206              MOVS     r2,#6                 ;3325
000076  4629              MOV      r1,r5                 ;3325
000078  6820              LDR      r0,[r4,#0]            ;3325
00007a  f7fffffe          BL       TM_CCxChannelCmd
00007e  4909              LDR      r1,|L17.164|
000080  6820              LDR      r0,[r4,#0]            ;3328
000082  4288              CMP      r0,r1                 ;3328
000084  d105              BNE      |L17.146|
000086  6820              LDR      r0,[r4,#0]            ;3331
000088  6c80              LDR      r0,[r0,#0x48]         ;3331
00008a  2109              MOVS     r1,#9                 ;3331
00008c  4308              ORRS     r0,r0,r1              ;3331
00008e  6821              LDR      r1,[r4,#0]            ;3331
000090  6488              STR      r0,[r1,#0x48]         ;3331
                  |L17.146|
000092  6820              LDR      r0,[r4,#0]            ;3335
000094  6900              LDR      r0,[r0,#0x10]         ;3335
000096  2103              MOVS     r1,#3                 ;3335
000098  4308              ORRS     r0,r0,r1              ;3335
00009a  6821              LDR      r1,[r4,#0]            ;3335
00009c  6108              STR      r0,[r1,#0x10]         ;3335
00009e  2000              MOVS     r0,#0                 ;3338
0000a0  e7e5              B        |L17.110|
;;;3340   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L17.164|
                          DCD      0x56860000

                          AREA ||i.MID_TM_8Bx2PWM_DTG_Stop||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2PWM_DTG_Stop PROC
;;;3219    */
;;;3220   MID_StatusTypeDef MID_TM_8Bx2PWM_DTG_Stop(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;3221   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3222       /* Disable the Output compare channel */
;;;3223       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;3224   
;;;3225       // Disable Break Control for PWM mode 
;;;3226       if(mTM->Instance == TM36) 
000010  490e              LDR      r1,|L18.76|
000012  6820              LDR      r0,[r4,#0]
000014  4288              CMP      r0,r1
000016  d10b              BNE      |L18.48|
;;;3227       {
;;;3228           // control TM36_BK_EN & TM36_BK_EN3
;;;3229           if((mTM->Instance->CCMDS.H[0] & TM_ALLCH_PWMMode) == 0x0000)
000018  6820              LDR      r0,[r4,#0]
00001a  8e00              LDRH     r0,[r0,#0x30]
00001c  490c              LDR      r1,|L18.80|
00001e  4008              ANDS     r0,r0,r1
000020  2800              CMP      r0,#0
000022  d105              BNE      |L18.48|
;;;3230               __DRV_TM_DISABLE_BREAK(mTM);
000024  6820              LDR      r0,[r4,#0]
000026  6c80              LDR      r0,[r0,#0x48]
000028  2109              MOVS     r1,#9
00002a  4388              BICS     r0,r0,r1
00002c  6821              LDR      r1,[r4,#0]
00002e  6488              STR      r0,[r1,#0x48]
                  |L18.48|
;;;3231       }
;;;3232   
;;;3233       /* Disable the Peripheral */
;;;3234       __DRV_TM_DISABLE(mTM);
000030  bf00              NOP      
000032  6820              LDR      r0,[r4,#0]
000034  8e00              LDRH     r0,[r0,#0x30]
000036  2800              CMP      r0,#0
000038  d105              BNE      |L18.70|
00003a  6820              LDR      r0,[r4,#0]
00003c  6900              LDR      r0,[r0,#0x10]
00003e  0880              LSRS     r0,r0,#2
000040  0080              LSLS     r0,r0,#2
000042  6821              LDR      r1,[r4,#0]
000044  6108              STR      r0,[r1,#0x10]
                  |L18.70|
000046  bf00              NOP      
;;;3235   
;;;3236       /* Return function status */
;;;3237       return MID_SUCCESS;
000048  2000              MOVS     r0,#0
;;;3238   }
00004a  bd30              POP      {r4,r5,pc}
;;;3239   
                          ENDP

                  |L18.76|
                          DCD      0x56860000
                  |L18.80|
                          DCD      0x00004444

                          AREA ||i.MID_TM_8Bx2PWM_DTG_Stop_DMA||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2PWM_DTG_Stop_DMA PROC
;;;3569    */
;;;3570   MID_StatusTypeDef MID_TM_8Bx2PWM_DTG_Stop_DMA(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;3571   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3572       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L19.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L19.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L19.56|
000012  2d03              CMP      r5,#3
000014  d11d              BNE      |L19.82|
000016  e017              B        |L19.72|
                  |L19.24|
;;;3573       {
;;;3574       case MID_TM_Channel0:
;;;3575       {
;;;3576           /* Disable the TM Capture/Compare 0 interrupt */
;;;3577           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH0_OC);
000018  6820              LDR      r0,[r4,#0]
00001a  6b00              LDR      r0,[r0,#0x30]
00001c  2101              MOVS     r1,#1
00001e  0609              LSLS     r1,r1,#24
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6308              STR      r0,[r1,#0x30]
;;;3578       }
;;;3579       break;
000026  e015              B        |L19.84|
                  |L19.40|
;;;3580   
;;;3581       case MID_TM_Channel1:
;;;3582       {
;;;3583           /* Disable the TM Capture/Compare 1 DMA request */
;;;3584           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH1_OC);
000028  6820              LDR      r0,[r4,#0]
00002a  6b00              LDR      r0,[r0,#0x30]
00002c  2101              MOVS     r1,#1
00002e  0649              LSLS     r1,r1,#25
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6308              STR      r0,[r1,#0x30]
;;;3585       }
;;;3586       break;
000036  e00d              B        |L19.84|
                  |L19.56|
;;;3587   
;;;3588       case MID_TM_Channel2:
;;;3589       {
;;;3590           /* Disable the TM Capture/Compare 2 DMA request */
;;;3591           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH2_OC);
000038  6820              LDR      r0,[r4,#0]
00003a  6b00              LDR      r0,[r0,#0x30]
00003c  2101              MOVS     r1,#1
00003e  0689              LSLS     r1,r1,#26
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6308              STR      r0,[r1,#0x30]
;;;3592       }
;;;3593       break;
000046  e005              B        |L19.84|
                  |L19.72|
;;;3594   
;;;3595       case MID_TM_Channel3:
;;;3596       {
;;;3597           // MG32x02z MCU don't support Channel3 for OC output
;;;3598           mTM->State = MID_TM_STATE_READY;
000048  2101              MOVS     r1,#1
00004a  2021              MOVS     r0,#0x21
00004c  5501              STRB     r1,[r0,r4]
;;;3599           return MID_FAILURE;
00004e  2001              MOVS     r0,#1
                  |L19.80|
;;;3600       }
;;;3601   
;;;3602       default:
;;;3603           break;
;;;3604       }
;;;3605   
;;;3606       /* Disable the Output compare channel */
;;;3607       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
;;;3608   
;;;3609       // Disable Break Control for PWM mode 
;;;3610       if(mTM->Instance == TM36) 
;;;3611       {
;;;3612           // control TM36_BK_EN & TM36_BK_EN3
;;;3613           if((mTM->Instance->CCMDS.H[0] & TM_ALLCH_PWMMode) == 0x0000)
;;;3614               __DRV_TM_DISABLE_BREAK(mTM);
;;;3615       }
;;;3616   
;;;3617       /* Disable the Peripheral */
;;;3618       __DRV_TM_DISABLE(mTM);
;;;3619   
;;;3620       /* Change the mTM state */
;;;3621       mTM->State = MID_TM_STATE_READY;
;;;3622   
;;;3623       /* Return function status */
;;;3624       return MID_SUCCESS;
;;;3625   }
000050  bd30              POP      {r4,r5,pc}
                  |L19.82|
000052  bf00              NOP                            ;3603
                  |L19.84|
000054  bf00              NOP                            ;3579
000056  2200              MOVS     r2,#0                 ;3607
000058  4629              MOV      r1,r5                 ;3607
00005a  6820              LDR      r0,[r4,#0]            ;3607
00005c  f7fffffe          BL       TM_CCxChannelCmd
000060  4910              LDR      r1,|L19.164|
000062  6820              LDR      r0,[r4,#0]            ;3610
000064  4288              CMP      r0,r1                 ;3610
000066  d10b              BNE      |L19.128|
000068  6820              LDR      r0,[r4,#0]            ;3613
00006a  8e00              LDRH     r0,[r0,#0x30]         ;3613
00006c  490e              LDR      r1,|L19.168|
00006e  4008              ANDS     r0,r0,r1              ;3613
000070  2800              CMP      r0,#0                 ;3613
000072  d105              BNE      |L19.128|
000074  6820              LDR      r0,[r4,#0]            ;3614
000076  6c80              LDR      r0,[r0,#0x48]         ;3614
000078  2109              MOVS     r1,#9                 ;3614
00007a  4388              BICS     r0,r0,r1              ;3614
00007c  6821              LDR      r1,[r4,#0]            ;3614
00007e  6488              STR      r0,[r1,#0x48]         ;3614
                  |L19.128|
000080  bf00              NOP                            ;3618
000082  6820              LDR      r0,[r4,#0]            ;3618
000084  8e00              LDRH     r0,[r0,#0x30]         ;3618
000086  2800              CMP      r0,#0                 ;3618
000088  d105              BNE      |L19.150|
00008a  6820              LDR      r0,[r4,#0]            ;3618
00008c  6900              LDR      r0,[r0,#0x10]         ;3618
00008e  0880              LSRS     r0,r0,#2              ;3618
000090  0080              LSLS     r0,r0,#2              ;3618
000092  6821              LDR      r1,[r4,#0]            ;3618
000094  6108              STR      r0,[r1,#0x10]         ;3618
                  |L19.150|
000096  bf00              NOP                            ;3618
000098  2101              MOVS     r1,#1                 ;3621
00009a  2021              MOVS     r0,#0x21              ;3621
00009c  5501              STRB     r1,[r0,r4]            ;3621
00009e  2000              MOVS     r0,#0                 ;3624
0000a0  e7d6              B        |L19.80|
;;;3626   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L19.164|
                          DCD      0x56860000
                  |L19.168|
                          DCD      0x00004444

                          AREA ||i.MID_TM_8Bx2PWM_DTG_Stop_IT||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2PWM_DTG_Stop_IT PROC
;;;3357    */
;;;3358   MID_StatusTypeDef MID_TM_8Bx2PWM_DTG_Stop_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;3359   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3360       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L20.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L20.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L20.56|
000012  2d03              CMP      r5,#3
000014  d11a              BNE      |L20.76|
000016  e017              B        |L20.72|
                  |L20.24|
;;;3361       {
;;;3362       case MID_TM_Channel0:
;;;3363       {
;;;3364           /* Enable the TM Capture/Compare 0 interrupt */
;;;3365           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;3366       }
;;;3367       break;
000026  e012              B        |L20.78|
                  |L20.40|
;;;3368   
;;;3369       case MID_TM_Channel1:
;;;3370       {
;;;3371           /* Enable the TM Capture/Compare 1 interrupt */
;;;3372           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC1);
000028  6820              LDR      r0,[r4,#0]
00002a  6840              LDR      r0,[r0,#4]
00002c  2101              MOVS     r1,#1
00002e  0249              LSLS     r1,r1,#9
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6048              STR      r0,[r1,#4]
;;;3373       }
;;;3374       break;
000036  e00a              B        |L20.78|
                  |L20.56|
;;;3375   
;;;3376       case MID_TM_Channel2:
;;;3377       {
;;;3378           /* Enable the TM Capture/Compare 2 interrupt */
;;;3379           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC2);
000038  6820              LDR      r0,[r4,#0]
00003a  6840              LDR      r0,[r0,#4]
00003c  2101              MOVS     r1,#1
00003e  0289              LSLS     r1,r1,#10
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6048              STR      r0,[r1,#4]
;;;3380       }
;;;3381       break;
000046  e002              B        |L20.78|
                  |L20.72|
;;;3382   
;;;3383       case MID_TM_Channel3:
;;;3384       {
;;;3385           // MG32x02z MCU don't support Channel3 for OC output
;;;3386           return MID_FAILURE;
000048  2001              MOVS     r0,#1
                  |L20.74|
;;;3387       }
;;;3388   
;;;3389       default:
;;;3390           break;
;;;3391       }
;;;3392   
;;;3393       /* Enable the Output compare channel */
;;;3394       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
;;;3395   
;;;3396       // Disable Break Control for PWM mode 
;;;3397       if(mTM->Instance == TM36) 
;;;3398       {
;;;3399           // control TM36_BK_EN & TM36_BK_EN3
;;;3400           if((mTM->Instance->CCMDS.H[0] & TM_ALLCH_PWMMode) == 0x0000)
;;;3401               __DRV_TM_DISABLE_BREAK(mTM);
;;;3402       }
;;;3403   
;;;3404       /* Enable the Peripheral */
;;;3405       __DRV_TM_DISABLE(mTM);
;;;3406   
;;;3407       /* check IT for ITEA */
;;;3408       if((mTM->Instance->INT.W & 0xFFFFFFFE) == 0)
;;;3409           __DRV_TM_DISABLE_ITEA(mTM);
;;;3410   
;;;3411       /* Return function status */
;;;3412       return MID_SUCCESS;
;;;3413   }
00004a  bd30              POP      {r4,r5,pc}
                  |L20.76|
00004c  bf00              NOP                            ;3390
                  |L20.78|
00004e  bf00              NOP                            ;3367
000050  2200              MOVS     r2,#0                 ;3394
000052  4629              MOV      r1,r5                 ;3394
000054  6820              LDR      r0,[r4,#0]            ;3394
000056  f7fffffe          BL       TM_CCxChannelCmd
00005a  4918              LDR      r1,|L20.188|
00005c  6820              LDR      r0,[r4,#0]            ;3397
00005e  4288              CMP      r0,r1                 ;3397
000060  d10b              BNE      |L20.122|
000062  6820              LDR      r0,[r4,#0]            ;3400
000064  8e00              LDRH     r0,[r0,#0x30]         ;3400
000066  4916              LDR      r1,|L20.192|
000068  4008              ANDS     r0,r0,r1              ;3400
00006a  2800              CMP      r0,#0                 ;3400
00006c  d105              BNE      |L20.122|
00006e  6820              LDR      r0,[r4,#0]            ;3401
000070  6c80              LDR      r0,[r0,#0x48]         ;3401
000072  2109              MOVS     r1,#9                 ;3401
000074  4388              BICS     r0,r0,r1              ;3401
000076  6821              LDR      r1,[r4,#0]            ;3401
000078  6488              STR      r0,[r1,#0x48]         ;3401
                  |L20.122|
00007a  bf00              NOP                            ;3405
00007c  6820              LDR      r0,[r4,#0]            ;3405
00007e  8e00              LDRH     r0,[r0,#0x30]         ;3405
000080  2800              CMP      r0,#0                 ;3405
000082  d105              BNE      |L20.144|
000084  6820              LDR      r0,[r4,#0]            ;3405
000086  6900              LDR      r0,[r0,#0x10]         ;3405
000088  0880              LSRS     r0,r0,#2              ;3405
00008a  0080              LSLS     r0,r0,#2              ;3405
00008c  6821              LDR      r1,[r4,#0]            ;3405
00008e  6108              STR      r0,[r1,#0x10]         ;3405
                  |L20.144|
000090  bf00              NOP                            ;3405
000092  6820              LDR      r0,[r4,#0]            ;3408
000094  6840              LDR      r0,[r0,#4]            ;3408
000096  0840              LSRS     r0,r0,#1              ;3408
000098  0040              LSLS     r0,r0,#1              ;3408
00009a  2800              CMP      r0,#0                 ;3408
00009c  d10b              BNE      |L20.182|
00009e  bf00              NOP                            ;3409
0000a0  6820              LDR      r0,[r4,#0]            ;3409
0000a2  6840              LDR      r0,[r0,#4]            ;3409
0000a4  2800              CMP      r0,#0                 ;3409
0000a6  d005              BEQ      |L20.180|
0000a8  6820              LDR      r0,[r4,#0]            ;3409
0000aa  6840              LDR      r0,[r0,#4]            ;3409
0000ac  0840              LSRS     r0,r0,#1              ;3409
0000ae  0040              LSLS     r0,r0,#1              ;3409
0000b0  6821              LDR      r1,[r4,#0]            ;3409
0000b2  6048              STR      r0,[r1,#4]            ;3409
                  |L20.180|
0000b4  bf00              NOP                            ;3409
                  |L20.182|
0000b6  2000              MOVS     r0,#0                 ;3412
0000b8  e7c7              B        |L20.74|
;;;3414   
                          ENDP

0000ba  0000              DCW      0x0000
                  |L20.188|
                          DCD      0x56860000
                  |L20.192|
                          DCD      0x00004444

                          AREA ||i.MID_TM_8Bx2PWM_DeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2PWM_DeInit PROC
;;;1913    */
;;;1914   MID_StatusTypeDef MID_TM_8Bx2PWM_DeInit(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;1915   {
000002  4604              MOV      r4,r0
;;;1916       /* Release Lock */
;;;1917       __MID_LOCK(mTM);
000004  bf00              NOP      
000006  2020              MOVS     r0,#0x20
000008  5d00              LDRB     r0,[r0,r4]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L21.18|
00000e  2002              MOVS     r0,#2
                  |L21.16|
;;;1918       
;;;1919       mTM->State = MID_TM_STATE_BUSY;
;;;1920   
;;;1921       /* Disable the TM Peripheral Clock */
;;;1922       __DRV_TM_DISABLE(mTM);
;;;1923   
;;;1924       /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;1925       MID_TM_8Bx2PWM_MspDeInit(mTM);
;;;1926   
;;;1927       /* Change TM state */
;;;1928       mTM->State = MID_TM_STATE_RESET;
;;;1929   
;;;1930       /* Release Lock */
;;;1931       __MID_UNLOCK(mTM);
;;;1932   
;;;1933       return MID_SUCCESS;
;;;1934   }
000010  bd10              POP      {r4,pc}
                  |L21.18|
000012  2101              MOVS     r1,#1                 ;1917
000014  2020              MOVS     r0,#0x20              ;1917
000016  5501              STRB     r1,[r0,r4]            ;1917
000018  bf00              NOP                            ;1917
00001a  2100              MOVS     r1,#0                 ;1919
00001c  2021              MOVS     r0,#0x21              ;1919
00001e  5501              STRB     r1,[r0,r4]            ;1919
000020  bf00              NOP                            ;1922
000022  6820              LDR      r0,[r4,#0]            ;1922
000024  8e00              LDRH     r0,[r0,#0x30]         ;1922
000026  2800              CMP      r0,#0                 ;1922
000028  d105              BNE      |L21.54|
00002a  6820              LDR      r0,[r4,#0]            ;1922
00002c  6900              LDR      r0,[r0,#0x10]         ;1922
00002e  0880              LSRS     r0,r0,#2              ;1922
000030  0080              LSLS     r0,r0,#2              ;1922
000032  6821              LDR      r1,[r4,#0]            ;1922
000034  6108              STR      r0,[r1,#0x10]         ;1922
                  |L21.54|
000036  bf00              NOP                            ;1922
000038  4620              MOV      r0,r4                 ;1925
00003a  f7fffffe          BL       MID_TM_8Bx2PWM_MspDeInit
00003e  2102              MOVS     r1,#2                 ;1928
000040  2021              MOVS     r0,#0x21              ;1928
000042  5501              STRB     r1,[r0,r4]            ;1928
000044  bf00              NOP                            ;1931
000046  2100              MOVS     r1,#0                 ;1931
000048  2020              MOVS     r0,#0x20              ;1931
00004a  5501              STRB     r1,[r0,r4]            ;1931
00004c  bf00              NOP                            ;1931
00004e  2000              MOVS     r0,#0                 ;1933
000050  e7de              B        |L21.16|
;;;1935   
                          ENDP


                          AREA ||i.MID_TM_8Bx2PWM_Init||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2PWM_Init PROC
;;;1875    */
;;;1876   MID_StatusTypeDef MID_TM_8Bx2PWM_Init(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;1877   {
000002  4604              MOV      r4,r0
;;;1878   
;;;1879       if(mTM->State == MID_TM_STATE_RESET)
000004  2021              MOVS     r0,#0x21
000006  5d00              LDRB     r0,[r0,r4]
000008  2802              CMP      r0,#2
00000a  d105              BNE      |L22.24|
;;;1880       {
;;;1881           /* Allocate lock resource and initialize it */
;;;1882           mTM->Lock = MID_UnLocked;
00000c  2100              MOVS     r1,#0
00000e  2020              MOVS     r0,#0x20
000010  5501              STRB     r1,[r0,r4]
;;;1883   
;;;1884           /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;1885           MID_TM_8Bx2PWM_MspInit(mTM);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       MID_TM_8Bx2PWM_MspInit
                  |L22.24|
;;;1886       }
;;;1887   
;;;1888       /* Set the TM state */
;;;1889       mTM->State= MID_TM_STATE_BUSY;
000018  2100              MOVS     r1,#0
00001a  2021              MOVS     r0,#0x21
00001c  5501              STRB     r1,[r0,r4]
;;;1890   
;;;1891       /* Init the base time for the Output Compare */
;;;1892       TM_Base_SetConfig(mTM->Instance,  &mTM->Init);
00001e  1d21              ADDS     r1,r4,#4
000020  6820              LDR      r0,[r4,#0]
000022  f7fffffe          BL       TM_Base_SetConfig
;;;1893   
;;;1894       /* Initialize the TM state*/
;;;1895       mTM->State= MID_TM_STATE_READY;
000026  2101              MOVS     r1,#1
000028  2021              MOVS     r0,#0x21
00002a  5501              STRB     r1,[r0,r4]
;;;1896   
;;;1897       return MID_SUCCESS;
00002c  2000              MOVS     r0,#0
;;;1898   
;;;1899   }
00002e  bd10              POP      {r4,pc}
;;;1900   
                          ENDP


                          AREA ||i.MID_TM_8Bx2PWM_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2PWM_MspDeInit PROC
;;;1961    */
;;;1962   __weak void MID_TM_8Bx2PWM_MspDeInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;1963   {
;;;1964       /* Prevent unused argument(s) compilation warning */
;;;1965       UNUSED(mTM);
;;;1966       /* NOTE : This function Should not be modified, when the callback is needed,
;;;1967                 the MID_TM_8Bx2PWM_MspDeInit could be implemented in the user file
;;;1968        */
;;;1969   }
;;;1970   
                          ENDP


                          AREA ||i.MID_TM_8Bx2PWM_MspInit||, CODE, READONLY, ALIGN=1

                  MID_TM_8Bx2PWM_MspInit PROC
;;;1943    */
;;;1944   __weak void MID_TM_8Bx2PWM_MspInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;1945   {
;;;1946       /* Prevent unused argument(s) compilation warning */
;;;1947       UNUSED(mTM);
;;;1948       /* NOTE : This function Should not be modified, when the callback is needed,
;;;1949                 the MID_TM_8Bx2PWM_MspInit could be implemented in the user file
;;;1950        */
;;;1951   }
;;;1952   
                          ENDP


                          AREA ||i.MID_TM_8Bx2PWM_Start||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2PWM_Start PROC
;;;2000    */
;;;2001   MID_StatusTypeDef MID_TM_8Bx2PWM_Start(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;2002   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2003   
;;;2004       /* Enable the Capture compare channel */
;;;2005       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_8bitx2_PWM);
000006  2205              MOVS     r2,#5
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;2006   
;;;2007       // Enable Break Control for PWM mode 
;;;2008       if(mTM->Instance == TM36) 
000010  4908              LDR      r1,|L25.52|
000012  6820              LDR      r0,[r4,#0]
000014  4288              CMP      r0,r1
000016  d105              BNE      |L25.36|
;;;2009       {
;;;2010           // control TM36_BK_EN & TM36_BK_EN3
;;;2011           __DRV_TM_ENABLE_BREAK(mTM);
000018  6820              LDR      r0,[r4,#0]
00001a  6c80              LDR      r0,[r0,#0x48]
00001c  2109              MOVS     r1,#9
00001e  4308              ORRS     r0,r0,r1
000020  6821              LDR      r1,[r4,#0]
000022  6488              STR      r0,[r1,#0x48]
                  |L25.36|
;;;2012       }
;;;2013   
;;;2014       /* Enable the Peripheral */
;;;2015       __DRV_TM_ENABLE(mTM);
000024  6820              LDR      r0,[r4,#0]
000026  6900              LDR      r0,[r0,#0x10]
000028  2103              MOVS     r1,#3
00002a  4308              ORRS     r0,r0,r1
00002c  6821              LDR      r1,[r4,#0]
00002e  6108              STR      r0,[r1,#0x10]
;;;2016   
;;;2017       /* Return function status */
;;;2018       return MID_SUCCESS;
000030  2000              MOVS     r0,#0
;;;2019   }
000032  bd30              POP      {r4,r5,pc}
;;;2020   
                          ENDP

                  |L25.52|
                          DCD      0x56860000

                          AREA ||i.MID_TM_8Bx2PWM_Start_DMA||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2PWM_Start_DMA PROC
;;;2290    */
;;;2291   MID_StatusTypeDef MID_TM_8Bx2PWM_Start_DMA(TM_HandleTypeDef* mTM, uint32_t Channel, uint32_t* pData, uint16_t Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2292   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;2293       if((mTM->State) == (MID_TM_STATE_BUSY))
00000a  2021              MOVS     r0,#0x21
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2800              CMP      r0,#0
000010  d101              BNE      |L26.22|
;;;2294           return MID_BUSY;
000012  2002              MOVS     r0,#2
                  |L26.20|
;;;2295       else if((mTM->State) == (MID_TM_STATE_READY))
;;;2296       {
;;;2297           if(((uint32_t)pData == 0U) && (Length > 0U))
;;;2298               return MID_FAILURE;
;;;2299           else
;;;2300               mTM->State = MID_TM_STATE_BUSY;
;;;2301       }
;;;2302   
;;;2303       switch(Channel)
;;;2304       {
;;;2305       case MID_TM_Channel0:
;;;2306       {
;;;2307           /* Set the DMA Period elapsed callback */
;;;2308           mTM->hDMA[TM_DMA_ID_CC0]->XferCpltCallback = &TM_DMADelayPulseCplt;
;;;2309   
;;;2310           /* Set the DMA error callback */
;;;2311           mTM->hDMA[TM_DMA_ID_CC0]->XferErrorCallback = TM_DMAError ;
;;;2312   
;;;2313           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC0], (uint32_t)pData, NULL, Length);
;;;2314   
;;;2315           /* Enable the TM Capture/Compare 0 DMA request */
;;;2316           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH0_OC);
;;;2317       }
;;;2318       break;
;;;2319   
;;;2320       case MID_TM_Channel1:
;;;2321       {
;;;2322           /* Set the DMA Period elapsed callback */
;;;2323           mTM->hDMA[TM_DMA_ID_CC1]->XferCpltCallback = TM_DMADelayPulseCplt;
;;;2324   
;;;2325           /* Set the DMA error callback */
;;;2326           mTM->hDMA[TM_DMA_ID_CC1]->XferErrorCallback = TM_DMAError ;
;;;2327   
;;;2328           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC1], (uint32_t)pData, NULL, Length);
;;;2329   
;;;2330           /* Enable the TM Capture/Compare 1 DMA request */
;;;2331           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH1_OC);
;;;2332       }
;;;2333       break;
;;;2334   
;;;2335       case MID_TM_Channel2:
;;;2336       {
;;;2337           /* Set the DMA Period elapsed callback */
;;;2338           mTM->hDMA[TM_DMA_ID_CC2]->XferCpltCallback = TM_DMADelayPulseCplt;
;;;2339   
;;;2340           /* Set the DMA error callback */
;;;2341           mTM->hDMA[TM_DMA_ID_CC2]->XferErrorCallback = TM_DMAError ;
;;;2342   
;;;2343           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC2], (uint32_t)pData, NULL, Length);
;;;2344   
;;;2345           /* Enable the TM Capture/Compare 2 DMA request */
;;;2346           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH2_OC);
;;;2347       }
;;;2348       break;
;;;2349   
;;;2350       case MID_TM_Channel3:
;;;2351       {
;;;2352           // MG32x02z MCU don't support Channel3 for OC output
;;;2353       }
;;;2354       break;
;;;2355   
;;;2356       default:
;;;2357           break;
;;;2358       }
;;;2359   
;;;2360       /* Enable the Output compare channel */
;;;2361       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_8bitx2_PWM);
;;;2362   
;;;2363       // Enable Break Control for PWM mode 
;;;2364       if(mTM->Instance == TM36) 
;;;2365       {
;;;2366           // control TM36_BK_EN & TM36_BK_EN3
;;;2367           __DRV_TM_ENABLE_BREAK(mTM);
;;;2368       }
;;;2369       
;;;2370       /* update state */
;;;2371       mTM->State = MID_TM_STATE_READY;
;;;2372   
;;;2373       /* Enable the Peripheral */
;;;2374       __DRV_TM_ENABLE(mTM);
;;;2375   
;;;2376       /* Return function status */
;;;2377       return MID_SUCCESS;
;;;2378   }
000014  bdf8              POP      {r3-r7,pc}
                  |L26.22|
000016  2021              MOVS     r0,#0x21              ;2295
000018  5d00              LDRB     r0,[r0,r4]            ;2295
00001a  2801              CMP      r0,#1                 ;2295
00001c  d107              BNE      |L26.46|
00001e  2d00              CMP      r5,#0                 ;2297
000020  d102              BNE      |L26.40|
000022  2f00              CMP      r7,#0                 ;2297
000024  d000              BEQ      |L26.40|
000026  e7f5              B        |L26.20|
                  |L26.40|
000028  2100              MOVS     r1,#0                 ;2300
00002a  2021              MOVS     r0,#0x21              ;2300
00002c  5501              STRB     r1,[r0,r4]            ;2300
                  |L26.46|
00002e  2e00              CMP      r6,#0                 ;2303
000030  d006              BEQ      |L26.64|
000032  2e01              CMP      r6,#1                 ;2303
000034  d018              BEQ      |L26.104|
000036  2e02              CMP      r6,#2                 ;2303
000038  d02a              BEQ      |L26.144|
00003a  2e03              CMP      r6,#3                 ;2303
00003c  d13d              BNE      |L26.186|
00003e  e03b              B        |L26.184|
                  |L26.64|
000040  482c              LDR      r0,|L26.244|
000042  6921              LDR      r1,[r4,#0x10]         ;2308
000044  62c8              STR      r0,[r1,#0x2c]         ;2308
000046  482c              LDR      r0,|L26.248|
000048  6921              LDR      r1,[r4,#0x10]         ;2311
00004a  6348              STR      r0,[r1,#0x34]         ;2311
00004c  463b              MOV      r3,r7                 ;2313
00004e  2200              MOVS     r2,#0                 ;2313
000050  4629              MOV      r1,r5                 ;2313
000052  6920              LDR      r0,[r4,#0x10]         ;2313
000054  f7fffffe          BL       MID_DMA_Start_IT
000058  6820              LDR      r0,[r4,#0]            ;2316
00005a  6b00              LDR      r0,[r0,#0x30]         ;2316
00005c  2101              MOVS     r1,#1                 ;2316
00005e  0609              LSLS     r1,r1,#24             ;2316
000060  4308              ORRS     r0,r0,r1              ;2316
000062  6821              LDR      r1,[r4,#0]            ;2316
000064  6308              STR      r0,[r1,#0x30]         ;2316
000066  e029              B        |L26.188|
                  |L26.104|
000068  4922              LDR      r1,|L26.244|
00006a  6960              LDR      r0,[r4,#0x14]         ;2323
00006c  62c1              STR      r1,[r0,#0x2c]         ;2323
00006e  4922              LDR      r1,|L26.248|
000070  6960              LDR      r0,[r4,#0x14]         ;2326
000072  6341              STR      r1,[r0,#0x34]         ;2326
000074  463b              MOV      r3,r7                 ;2328
000076  2200              MOVS     r2,#0                 ;2328
000078  4629              MOV      r1,r5                 ;2328
00007a  6960              LDR      r0,[r4,#0x14]         ;2328
00007c  f7fffffe          BL       MID_DMA_Start_IT
000080  6820              LDR      r0,[r4,#0]            ;2331
000082  6b00              LDR      r0,[r0,#0x30]         ;2331
000084  2101              MOVS     r1,#1                 ;2331
000086  0649              LSLS     r1,r1,#25             ;2331
000088  4308              ORRS     r0,r0,r1              ;2331
00008a  6821              LDR      r1,[r4,#0]            ;2331
00008c  6308              STR      r0,[r1,#0x30]         ;2331
00008e  e015              B        |L26.188|
                  |L26.144|
000090  4918              LDR      r1,|L26.244|
000092  69a0              LDR      r0,[r4,#0x18]         ;2338
000094  62c1              STR      r1,[r0,#0x2c]         ;2338
000096  4918              LDR      r1,|L26.248|
000098  69a0              LDR      r0,[r4,#0x18]         ;2341
00009a  6341              STR      r1,[r0,#0x34]         ;2341
00009c  463b              MOV      r3,r7                 ;2343
00009e  2200              MOVS     r2,#0                 ;2343
0000a0  4629              MOV      r1,r5                 ;2343
0000a2  69a0              LDR      r0,[r4,#0x18]         ;2343
0000a4  f7fffffe          BL       MID_DMA_Start_IT
0000a8  6820              LDR      r0,[r4,#0]            ;2346
0000aa  6b00              LDR      r0,[r0,#0x30]         ;2346
0000ac  2101              MOVS     r1,#1                 ;2346
0000ae  0689              LSLS     r1,r1,#26             ;2346
0000b0  4308              ORRS     r0,r0,r1              ;2346
0000b2  6821              LDR      r1,[r4,#0]            ;2346
0000b4  6308              STR      r0,[r1,#0x30]         ;2346
0000b6  e001              B        |L26.188|
                  |L26.184|
0000b8  e000              B        |L26.188|
                  |L26.186|
0000ba  bf00              NOP                            ;2357
                  |L26.188|
0000bc  bf00              NOP                            ;2318
0000be  2205              MOVS     r2,#5                 ;2361
0000c0  4631              MOV      r1,r6                 ;2361
0000c2  6820              LDR      r0,[r4,#0]            ;2361
0000c4  f7fffffe          BL       TM_CCxChannelCmd
0000c8  490c              LDR      r1,|L26.252|
0000ca  6820              LDR      r0,[r4,#0]            ;2364
0000cc  4288              CMP      r0,r1                 ;2364
0000ce  d105              BNE      |L26.220|
0000d0  6820              LDR      r0,[r4,#0]            ;2367
0000d2  6c80              LDR      r0,[r0,#0x48]         ;2367
0000d4  2109              MOVS     r1,#9                 ;2367
0000d6  4308              ORRS     r0,r0,r1              ;2367
0000d8  6821              LDR      r1,[r4,#0]            ;2367
0000da  6488              STR      r0,[r1,#0x48]         ;2367
                  |L26.220|
0000dc  2101              MOVS     r1,#1                 ;2371
0000de  2021              MOVS     r0,#0x21              ;2371
0000e0  5501              STRB     r1,[r0,r4]            ;2371
0000e2  6820              LDR      r0,[r4,#0]            ;2374
0000e4  6900              LDR      r0,[r0,#0x10]         ;2374
0000e6  2103              MOVS     r1,#3                 ;2374
0000e8  4308              ORRS     r0,r0,r1              ;2374
0000ea  6821              LDR      r1,[r4,#0]            ;2374
0000ec  6108              STR      r0,[r1,#0x10]         ;2374
0000ee  2000              MOVS     r0,#0                 ;2377
0000f0  e790              B        |L26.20|
;;;2379   
                          ENDP

0000f2  0000              DCW      0x0000
                  |L26.244|
                          DCD      TM_DMADelayPulseCplt
                  |L26.248|
                          DCD      TM_DMAError
                  |L26.252|
                          DCD      0x56860000

                          AREA ||i.MID_TM_8Bx2PWM_Start_IT||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2PWM_Start_IT PROC
;;;2105    */
;;;2106   MID_StatusTypeDef MID_TM_8Bx2PWM_Start_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;2107   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2108       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L27.24|
00000a  2d01              CMP      r5,#1
00000c  d012              BEQ      |L27.52|
00000e  2d02              CMP      r5,#2
000010  d01e              BEQ      |L27.80|
000012  2d03              CMP      r5,#3
000014  d138              BNE      |L27.136|
000016  e029              B        |L27.108|
                  |L27.24|
;;;2109       {
;;;2110       case MID_TM_Channel0:
;;;2111       {
;;;2112           /* Enable the TM Capture/Compare 0 interrupt */
;;;2113           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4308              ORRS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;2114           __DRV_TM_ENABLE_ITEA(mTM);
000026  6820              LDR      r0,[r4,#0]
000028  6840              LDR      r0,[r0,#4]
00002a  2101              MOVS     r1,#1
00002c  4308              ORRS     r0,r0,r1
00002e  6821              LDR      r1,[r4,#0]
000030  6048              STR      r0,[r1,#4]
;;;2115       }
;;;2116       break;
000032  e02a              B        |L27.138|
                  |L27.52|
;;;2117   
;;;2118       case MID_TM_Channel1:
;;;2119       {
;;;2120           /* Enable the TM Capture/Compare 1 interrupt */
;;;2121           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC1);
000034  6820              LDR      r0,[r4,#0]
000036  6840              LDR      r0,[r0,#4]
000038  2101              MOVS     r1,#1
00003a  0249              LSLS     r1,r1,#9
00003c  4308              ORRS     r0,r0,r1
00003e  6821              LDR      r1,[r4,#0]
000040  6048              STR      r0,[r1,#4]
;;;2122           __DRV_TM_ENABLE_ITEA(mTM);
000042  6820              LDR      r0,[r4,#0]
000044  6840              LDR      r0,[r0,#4]
000046  2101              MOVS     r1,#1
000048  4308              ORRS     r0,r0,r1
00004a  6821              LDR      r1,[r4,#0]
00004c  6048              STR      r0,[r1,#4]
;;;2123       }
;;;2124       break;
00004e  e01c              B        |L27.138|
                  |L27.80|
;;;2125   
;;;2126       case MID_TM_Channel2:
;;;2127       {
;;;2128           /* Enable the TM Capture/Compare 2 interrupt */
;;;2129           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC2);
000050  6820              LDR      r0,[r4,#0]
000052  6840              LDR      r0,[r0,#4]
000054  2101              MOVS     r1,#1
000056  0289              LSLS     r1,r1,#10
000058  4308              ORRS     r0,r0,r1
00005a  6821              LDR      r1,[r4,#0]
00005c  6048              STR      r0,[r1,#4]
;;;2130           __DRV_TM_ENABLE_ITEA(mTM);
00005e  6820              LDR      r0,[r4,#0]
000060  6840              LDR      r0,[r0,#4]
000062  2101              MOVS     r1,#1
000064  4308              ORRS     r0,r0,r1
000066  6821              LDR      r1,[r4,#0]
000068  6048              STR      r0,[r1,#4]
;;;2131       }
;;;2132       break;
00006a  e00e              B        |L27.138|
                  |L27.108|
;;;2133   
;;;2134       case MID_TM_Channel3:
;;;2135       {
;;;2136           /* Enable the TM Capture/Compare 3 interrupt */
;;;2137           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC3);
00006c  6820              LDR      r0,[r4,#0]
00006e  6840              LDR      r0,[r0,#4]
000070  2101              MOVS     r1,#1
000072  02c9              LSLS     r1,r1,#11
000074  4308              ORRS     r0,r0,r1
000076  6821              LDR      r1,[r4,#0]
000078  6048              STR      r0,[r1,#4]
;;;2138           __DRV_TM_ENABLE_ITEA(mTM);
00007a  6820              LDR      r0,[r4,#0]
00007c  6840              LDR      r0,[r0,#4]
00007e  2101              MOVS     r1,#1
000080  4308              ORRS     r0,r0,r1
000082  6821              LDR      r1,[r4,#0]
000084  6048              STR      r0,[r1,#4]
;;;2139       }
;;;2140       break;
000086  e000              B        |L27.138|
                  |L27.136|
;;;2141   
;;;2142       default:
;;;2143           break;
000088  bf00              NOP      
                  |L27.138|
00008a  bf00              NOP                            ;2116
;;;2144       }
;;;2145   
;;;2146       /* Enable the Output compare channel */
;;;2147       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_8bitx2_PWM);
00008c  2205              MOVS     r2,#5
00008e  4629              MOV      r1,r5
000090  6820              LDR      r0,[r4,#0]
000092  f7fffffe          BL       TM_CCxChannelCmd
;;;2148   
;;;2149       // Enable Break Control for PWM mode 
;;;2150       if(mTM->Instance == TM36) 
000096  4909              LDR      r1,|L27.188|
000098  6820              LDR      r0,[r4,#0]
00009a  4288              CMP      r0,r1
00009c  d105              BNE      |L27.170|
;;;2151       {
;;;2152           // control TM36_BK_EN & TM36_BK_EN3
;;;2153           __DRV_TM_ENABLE_BREAK(mTM);
00009e  6820              LDR      r0,[r4,#0]
0000a0  6c80              LDR      r0,[r0,#0x48]
0000a2  2109              MOVS     r1,#9
0000a4  4308              ORRS     r0,r0,r1
0000a6  6821              LDR      r1,[r4,#0]
0000a8  6488              STR      r0,[r1,#0x48]
                  |L27.170|
;;;2154       }
;;;2155   
;;;2156   
;;;2157       // __MID_TM_ENABLE(mTM);
;;;2158       __DRV_TM_ENABLE(mTM);
0000aa  6820              LDR      r0,[r4,#0]
0000ac  6900              LDR      r0,[r0,#0x10]
0000ae  2103              MOVS     r1,#3
0000b0  4308              ORRS     r0,r0,r1
0000b2  6821              LDR      r1,[r4,#0]
0000b4  6108              STR      r0,[r1,#0x10]
;;;2159   
;;;2160       /* Return function status */
;;;2161       return MID_SUCCESS;
0000b6  2000              MOVS     r0,#0
;;;2162   }
0000b8  bd30              POP      {r4,r5,pc}
;;;2163   
                          ENDP

0000ba  0000              DCW      0x0000
                  |L27.188|
                          DCD      0x56860000

                          AREA ||i.MID_TM_8Bx2PWM_Stop||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2PWM_Stop PROC
;;;2038    */
;;;2039   MID_StatusTypeDef MID_TM_8Bx2PWM_Stop(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;2040   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2041       /* Disable the Output compare channel */
;;;2042       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;2043   
;;;2044       // Disable Break Control for PWM mode 
;;;2045       if(mTM->Instance == TM36) 
000010  490e              LDR      r1,|L28.76|
000012  6820              LDR      r0,[r4,#0]
000014  4288              CMP      r0,r1
000016  d10b              BNE      |L28.48|
;;;2046       {
;;;2047           // control TM36_BK_EN & TM36_BK_EN3
;;;2048           if((mTM->Instance->CCMDS.H[0] & TM_ALLCH_PWMMode) == 0x0000)
000018  6820              LDR      r0,[r4,#0]
00001a  8e00              LDRH     r0,[r0,#0x30]
00001c  490c              LDR      r1,|L28.80|
00001e  4008              ANDS     r0,r0,r1
000020  2800              CMP      r0,#0
000022  d105              BNE      |L28.48|
;;;2049               __DRV_TM_DISABLE_BREAK(mTM);
000024  6820              LDR      r0,[r4,#0]
000026  6c80              LDR      r0,[r0,#0x48]
000028  2109              MOVS     r1,#9
00002a  4388              BICS     r0,r0,r1
00002c  6821              LDR      r1,[r4,#0]
00002e  6488              STR      r0,[r1,#0x48]
                  |L28.48|
;;;2050       }
;;;2051   
;;;2052       /* Disable the Peripheral */
;;;2053       __DRV_TM_DISABLE(mTM);
000030  bf00              NOP      
000032  6820              LDR      r0,[r4,#0]
000034  8e00              LDRH     r0,[r0,#0x30]
000036  2800              CMP      r0,#0
000038  d105              BNE      |L28.70|
00003a  6820              LDR      r0,[r4,#0]
00003c  6900              LDR      r0,[r0,#0x10]
00003e  0880              LSRS     r0,r0,#2
000040  0080              LSLS     r0,r0,#2
000042  6821              LDR      r1,[r4,#0]
000044  6108              STR      r0,[r1,#0x10]
                  |L28.70|
000046  bf00              NOP      
;;;2054   
;;;2055       /* Return function status */
;;;2056       return MID_SUCCESS;
000048  2000              MOVS     r0,#0
;;;2057   }
00004a  bd30              POP      {r4,r5,pc}
;;;2058   
                          ENDP

                  |L28.76|
                          DCD      0x56860000
                  |L28.80|
                          DCD      0x00004444

                          AREA ||i.MID_TM_8Bx2PWM_Stop_DMA||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2PWM_Stop_DMA PROC
;;;2395    */
;;;2396   MID_StatusTypeDef MID_TM_8Bx2PWM_Stop_DMA(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;2397   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2398       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L29.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L29.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L29.56|
000012  2d03              CMP      r5,#3
000014  d119              BNE      |L29.74|
000016  e017              B        |L29.72|
                  |L29.24|
;;;2399       {
;;;2400       case MID_TM_Channel0:
;;;2401       {
;;;2402           /* Disable the TM Capture/Compare 0 interrupt */
;;;2403           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH0_OC);
000018  6820              LDR      r0,[r4,#0]
00001a  6b00              LDR      r0,[r0,#0x30]
00001c  2101              MOVS     r1,#1
00001e  0609              LSLS     r1,r1,#24
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6308              STR      r0,[r1,#0x30]
;;;2404       }
;;;2405       break;
000026  e011              B        |L29.76|
                  |L29.40|
;;;2406   
;;;2407       case MID_TM_Channel1:
;;;2408       {
;;;2409           /* Disable the TM Capture/Compare 1 DMA request */
;;;2410           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH1_OC);
000028  6820              LDR      r0,[r4,#0]
00002a  6b00              LDR      r0,[r0,#0x30]
00002c  2101              MOVS     r1,#1
00002e  0649              LSLS     r1,r1,#25
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6308              STR      r0,[r1,#0x30]
;;;2411       }
;;;2412       break;
000036  e009              B        |L29.76|
                  |L29.56|
;;;2413   
;;;2414       case MID_TM_Channel2:
;;;2415       {
;;;2416           /* Disable the TM Capture/Compare 2 DMA request */
;;;2417           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH2_OC);
000038  6820              LDR      r0,[r4,#0]
00003a  6b00              LDR      r0,[r0,#0x30]
00003c  2101              MOVS     r1,#1
00003e  0689              LSLS     r1,r1,#26
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6308              STR      r0,[r1,#0x30]
;;;2418       }
;;;2419       break;
000046  e001              B        |L29.76|
                  |L29.72|
;;;2420   
;;;2421       case MID_TM_Channel3:
;;;2422       {
;;;2423           // MG32x02z MCU don't support Channel3 for OC output
;;;2424       }
;;;2425       break;
000048  e000              B        |L29.76|
                  |L29.74|
;;;2426   
;;;2427       default:
;;;2428           break;
00004a  bf00              NOP      
                  |L29.76|
00004c  bf00              NOP                            ;2405
;;;2429       }
;;;2430   
;;;2431       /* Disable the Output compare channel */
;;;2432       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
00004e  2200              MOVS     r2,#0
000050  4629              MOV      r1,r5
000052  6820              LDR      r0,[r4,#0]
000054  f7fffffe          BL       TM_CCxChannelCmd
;;;2433   
;;;2434       // Disable Break Control for PWM mode 
;;;2435       if(mTM->Instance == TM36) 
000058  4910              LDR      r1,|L29.156|
00005a  6820              LDR      r0,[r4,#0]
00005c  4288              CMP      r0,r1
00005e  d10b              BNE      |L29.120|
;;;2436       {
;;;2437           // control TM36_BK_EN & TM36_BK_EN3
;;;2438           if((mTM->Instance->CCMDS.H[0] & TM_ALLCH_PWMMode) == 0x0000)
000060  6820              LDR      r0,[r4,#0]
000062  8e00              LDRH     r0,[r0,#0x30]
000064  490e              LDR      r1,|L29.160|
000066  4008              ANDS     r0,r0,r1
000068  2800              CMP      r0,#0
00006a  d105              BNE      |L29.120|
;;;2439               __DRV_TM_DISABLE_BREAK(mTM);
00006c  6820              LDR      r0,[r4,#0]
00006e  6c80              LDR      r0,[r0,#0x48]
000070  2109              MOVS     r1,#9
000072  4388              BICS     r0,r0,r1
000074  6821              LDR      r1,[r4,#0]
000076  6488              STR      r0,[r1,#0x48]
                  |L29.120|
;;;2440       }
;;;2441   
;;;2442       /* Disable the Peripheral */
;;;2443       __DRV_TM_DISABLE(mTM);
000078  bf00              NOP      
00007a  6820              LDR      r0,[r4,#0]
00007c  8e00              LDRH     r0,[r0,#0x30]
00007e  2800              CMP      r0,#0
000080  d105              BNE      |L29.142|
000082  6820              LDR      r0,[r4,#0]
000084  6900              LDR      r0,[r0,#0x10]
000086  0880              LSRS     r0,r0,#2
000088  0080              LSLS     r0,r0,#2
00008a  6821              LDR      r1,[r4,#0]
00008c  6108              STR      r0,[r1,#0x10]
                  |L29.142|
00008e  bf00              NOP      
;;;2444   
;;;2445       /* Change the mTM state */
;;;2446       mTM->State = MID_TM_STATE_READY;
000090  2101              MOVS     r1,#1
000092  2021              MOVS     r0,#0x21
000094  5501              STRB     r1,[r0,r4]
;;;2447   
;;;2448       /* Return function status */
;;;2449       return MID_SUCCESS;
000096  2000              MOVS     r0,#0
;;;2450   }
000098  bd30              POP      {r4,r5,pc}
;;;2451   
                          ENDP

00009a  0000              DCW      0x0000
                  |L29.156|
                          DCD      0x56860000
                  |L29.160|
                          DCD      0x00004444

                          AREA ||i.MID_TM_8Bx2PWM_Stop_IT||, CODE, READONLY, ALIGN=2

                  MID_TM_8Bx2PWM_Stop_IT PROC
;;;2181    */
;;;2182   MID_StatusTypeDef MID_TM_8Bx2PWM_Stop_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;2183   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2184       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L30.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L30.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L30.56|
000012  2d03              CMP      r5,#3
000014  d120              BNE      |L30.88|
000016  e017              B        |L30.72|
                  |L30.24|
;;;2185       {
;;;2186       case MID_TM_Channel0:
;;;2187       {
;;;2188           /* Enable the TM Capture/Compare 0 interrupt */
;;;2189           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;2190       }
;;;2191       break;
000026  e018              B        |L30.90|
                  |L30.40|
;;;2192   
;;;2193       case MID_TM_Channel1:
;;;2194       {
;;;2195           /* Enable the TM Capture/Compare 1 interrupt */
;;;2196           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC1);
000028  6820              LDR      r0,[r4,#0]
00002a  6840              LDR      r0,[r0,#4]
00002c  2101              MOVS     r1,#1
00002e  0249              LSLS     r1,r1,#9
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6048              STR      r0,[r1,#4]
;;;2197       }
;;;2198       break;
000036  e010              B        |L30.90|
                  |L30.56|
;;;2199   
;;;2200       case MID_TM_Channel2:
;;;2201       {
;;;2202           /* Enable the TM Capture/Compare 2 interrupt */
;;;2203           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC2);
000038  6820              LDR      r0,[r4,#0]
00003a  6840              LDR      r0,[r0,#4]
00003c  2101              MOVS     r1,#1
00003e  0289              LSLS     r1,r1,#10
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6048              STR      r0,[r1,#4]
;;;2204       }
;;;2205       break;
000046  e008              B        |L30.90|
                  |L30.72|
;;;2206   
;;;2207       case MID_TM_Channel3:
;;;2208       {
;;;2209           /* Enable the TM Capture/Compare 3 interrupt */
;;;2210           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC3);
000048  6820              LDR      r0,[r4,#0]
00004a  6840              LDR      r0,[r0,#4]
00004c  2101              MOVS     r1,#1
00004e  02c9              LSLS     r1,r1,#11
000050  4388              BICS     r0,r0,r1
000052  6821              LDR      r1,[r4,#0]
000054  6048              STR      r0,[r1,#4]
;;;2211       }
;;;2212       break;
000056  e000              B        |L30.90|
                  |L30.88|
;;;2213   
;;;2214       default:
;;;2215           break;
000058  bf00              NOP      
                  |L30.90|
00005a  bf00              NOP                            ;2191
;;;2216       }
;;;2217   
;;;2218       /* Enable the Output compare channel */
;;;2219       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
00005c  2200              MOVS     r2,#0
00005e  4629              MOV      r1,r5
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       TM_CCxChannelCmd
;;;2220   
;;;2221       // Disable Break Control for PWM mode 
;;;2222       if(mTM->Instance == TM36) 
000066  4918              LDR      r1,|L30.200|
000068  6820              LDR      r0,[r4,#0]
00006a  4288              CMP      r0,r1
00006c  d10b              BNE      |L30.134|
;;;2223       {
;;;2224           // control TM36_BK_EN & TM36_BK_EN3
;;;2225           if((mTM->Instance->CCMDS.H[0] & TM_ALLCH_PWMMode) == 0x0000)
00006e  6820              LDR      r0,[r4,#0]
000070  8e00              LDRH     r0,[r0,#0x30]
000072  4916              LDR      r1,|L30.204|
000074  4008              ANDS     r0,r0,r1
000076  2800              CMP      r0,#0
000078  d105              BNE      |L30.134|
;;;2226               __DRV_TM_DISABLE_BREAK(mTM);
00007a  6820              LDR      r0,[r4,#0]
00007c  6c80              LDR      r0,[r0,#0x48]
00007e  2109              MOVS     r1,#9
000080  4388              BICS     r0,r0,r1
000082  6821              LDR      r1,[r4,#0]
000084  6488              STR      r0,[r1,#0x48]
                  |L30.134|
;;;2227       }
;;;2228   
;;;2229       /* Enable the Peripheral */
;;;2230       __DRV_TM_DISABLE(mTM);
000086  bf00              NOP      
000088  6820              LDR      r0,[r4,#0]
00008a  8e00              LDRH     r0,[r0,#0x30]
00008c  2800              CMP      r0,#0
00008e  d105              BNE      |L30.156|
000090  6820              LDR      r0,[r4,#0]
000092  6900              LDR      r0,[r0,#0x10]
000094  0880              LSRS     r0,r0,#2
000096  0080              LSLS     r0,r0,#2
000098  6821              LDR      r1,[r4,#0]
00009a  6108              STR      r0,[r1,#0x10]
                  |L30.156|
00009c  bf00              NOP      
;;;2231   
;;;2232       /* check IT for ITEA */
;;;2233       if((mTM->Instance->INT.W & 0xFFFFFFFE) == 0)
00009e  6820              LDR      r0,[r4,#0]
0000a0  6840              LDR      r0,[r0,#4]
0000a2  0840              LSRS     r0,r0,#1
0000a4  0040              LSLS     r0,r0,#1
0000a6  2800              CMP      r0,#0
0000a8  d10b              BNE      |L30.194|
;;;2234           __DRV_TM_DISABLE_ITEA(mTM);
0000aa  bf00              NOP      
0000ac  6820              LDR      r0,[r4,#0]
0000ae  6840              LDR      r0,[r0,#4]
0000b0  2800              CMP      r0,#0
0000b2  d005              BEQ      |L30.192|
0000b4  6820              LDR      r0,[r4,#0]
0000b6  6840              LDR      r0,[r0,#4]
0000b8  0840              LSRS     r0,r0,#1
0000ba  0040              LSLS     r0,r0,#1
0000bc  6821              LDR      r1,[r4,#0]
0000be  6048              STR      r0,[r1,#4]
                  |L30.192|
0000c0  bf00              NOP      
                  |L30.194|
;;;2235   
;;;2236       /* Return function status */
;;;2237       return MID_SUCCESS;
0000c2  2000              MOVS     r0,#0
;;;2238   }
0000c4  bd30              POP      {r4,r5,pc}
;;;2239   
                          ENDP

0000c6  0000              DCW      0x0000
                  |L30.200|
                          DCD      0x56860000
                  |L30.204|
                          DCD      0x00004444

                          AREA ||i.MID_TM_Base_DeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_Base_DeInit PROC
;;;101     */
;;;102    MID_StatusTypeDef MID_TM_Base_DeInit(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;103    {
000002  4604              MOV      r4,r0
;;;104        mTM->State = MID_TM_STATE_BUSY;
000004  2100              MOVS     r1,#0
000006  2021              MOVS     r0,#0x21
000008  5501              STRB     r1,[r0,r4]
;;;105    
;;;106        /* Disable the TM Peripheral Clock */
;;;107        __DRV_TM_DISABLE(mTM);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  8e00              LDRH     r0,[r0,#0x30]
000010  2800              CMP      r0,#0
000012  d105              BNE      |L31.32|
000014  6820              LDR      r0,[r4,#0]
000016  6900              LDR      r0,[r0,#0x10]
000018  0880              LSRS     r0,r0,#2
00001a  0080              LSLS     r0,r0,#2
00001c  6821              LDR      r1,[r4,#0]
00001e  6108              STR      r0,[r1,#0x10]
                  |L31.32|
000020  bf00              NOP      
;;;108    
;;;109        /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;110        MID_TM_Base_MspDeInit(mTM);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       MID_TM_Base_MspDeInit
;;;111    
;;;112        /* Change TM state */
;;;113        mTM->State = MID_TM_STATE_RESET;
000028  2102              MOVS     r1,#2
00002a  2021              MOVS     r0,#0x21
00002c  5501              STRB     r1,[r0,r4]
;;;114    
;;;115        /* Release Lock */
;;;116        __MID_UNLOCK(mTM);
00002e  bf00              NOP      
000030  2100              MOVS     r1,#0
000032  2020              MOVS     r0,#0x20
000034  5501              STRB     r1,[r0,r4]
000036  bf00              NOP      
;;;117    
;;;118        return MID_SUCCESS;
000038  2000              MOVS     r0,#0
;;;119    }
00003a  bd10              POP      {r4,pc}
;;;120    
                          ENDP


                          AREA ||i.MID_TM_Base_GetState||, CODE, READONLY, ALIGN=1

                  MID_TM_Base_GetState PROC
;;;5749    */
;;;5750   MID_TM_StateTypeDef MID_TM_Base_GetState(TM_HandleTypeDef* mTM)
000000  4601              MOV      r1,r0
;;;5751   {
;;;5752       return mTM->State;
000002  2021              MOVS     r0,#0x21
000004  5c40              LDRB     r0,[r0,r1]
;;;5753   }
000006  4770              BX       lr
;;;5754   
                          ENDP


                          AREA ||i.MID_TM_Base_Init||, CODE, READONLY, ALIGN=1

                  MID_TM_Base_Init PROC
;;;60      */
;;;61     MID_StatusTypeDef MID_TM_Base_Init(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;62     {
000002  4604              MOV      r4,r0
;;;63         /* Check the TM handle allocation */
;;;64         if(mTM == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L33.12|
;;;65             return MID_FAILURE;
000008  2001              MOVS     r0,#1
                  |L33.10|
;;;66     
;;;67         if(mTM->State == MID_TM_STATE_RESET)
;;;68         {
;;;69             /* Allocate lock resource and initialize it */
;;;70             mTM->Lock = MID_UnLocked;
;;;71     
;;;72             /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;73             MID_TM_Base_MspInit(mTM);
;;;74         }
;;;75     
;;;76         /* Set the TM state */
;;;77         mTM->State= MID_TM_STATE_BUSY;
;;;78     
;;;79         /* Set the Time Base configuration */
;;;80         TM_Base_SetConfig(mTM->Instance, &mTM->Init);
;;;81     
;;;82         /* Initialize the TM state*/
;;;83         mTM->State = MID_TM_STATE_READY;
;;;84     
;;;85         return MID_SUCCESS;
;;;86     }
00000a  bd10              POP      {r4,pc}
                  |L33.12|
00000c  2021              MOVS     r0,#0x21              ;67
00000e  5d00              LDRB     r0,[r0,r4]            ;67
000010  2802              CMP      r0,#2                 ;67
000012  d105              BNE      |L33.32|
000014  2100              MOVS     r1,#0                 ;70
000016  2020              MOVS     r0,#0x20              ;70
000018  5501              STRB     r1,[r0,r4]            ;70
00001a  4620              MOV      r0,r4                 ;73
00001c  f7fffffe          BL       MID_TM_Base_MspInit
                  |L33.32|
000020  2100              MOVS     r1,#0                 ;77
000022  2021              MOVS     r0,#0x21              ;77
000024  5501              STRB     r1,[r0,r4]            ;77
000026  1d21              ADDS     r1,r4,#4              ;80
000028  6820              LDR      r0,[r4,#0]            ;80
00002a  f7fffffe          BL       TM_Base_SetConfig
00002e  2101              MOVS     r1,#1                 ;83
000030  2021              MOVS     r0,#0x21              ;83
000032  5501              STRB     r1,[r0,r4]            ;83
000034  2000              MOVS     r0,#0                 ;85
000036  e7e8              B        |L33.10|
;;;87     
                          ENDP


                          AREA ||i.MID_TM_Base_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_Base_MspDeInit PROC
;;;143     */
;;;144    __weak void MID_TM_Base_MspDeInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;145    {
;;;146        /* Prevent unused argument(s) compilation warning */
;;;147        UNUSED(mTM);
;;;148        /* NOTE : This function Should not be modified, when the callback is needed,
;;;149                  the MID_TM_Base_MspDeInit could be implemented in the user file
;;;150         */
;;;151    }
;;;152    
                          ENDP


                          AREA ||i.MID_TM_Base_MspInit||, CODE, READONLY, ALIGN=1

                  MID_TM_Base_MspInit PROC
;;;127     */
;;;128    __weak void MID_TM_Base_MspInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;129    {
;;;130        /* Prevent unused argument(s) compilation warning */
;;;131        UNUSED(mTM);
;;;132        /* NOTE : This function Should not be modified, when the callback is needed,
;;;133                  the MID_TM_Base_MspInit could be implemented in the user file
;;;134         */
;;;135    }
;;;136    
                          ENDP


                          AREA ||i.MID_TM_Base_Start||, CODE, READONLY, ALIGN=1

                  MID_TM_Base_Start PROC
;;;172     */
;;;173    MID_StatusTypeDef MID_TM_Base_Start(TM_HandleTypeDef* mTM)
000000  4601              MOV      r1,r0
;;;174    {
;;;175        /* Set the TM state */
;;;176        mTM->State= MID_TM_STATE_BUSY;
000002  2200              MOVS     r2,#0
000004  2021              MOVS     r0,#0x21
000006  5442              STRB     r2,[r0,r1]
;;;177    
;;;178        /* Enable the Peripheral */
;;;179        __DRV_TM_ENABLE(mTM);
000008  6808              LDR      r0,[r1,#0]
00000a  6900              LDR      r0,[r0,#0x10]
00000c  2203              MOVS     r2,#3
00000e  4310              ORRS     r0,r0,r2
000010  680a              LDR      r2,[r1,#0]
000012  6110              STR      r0,[r2,#0x10]
;;;180    
;;;181        /* Change the TM state*/
;;;182        mTM->State= MID_TM_STATE_READY;
000014  2201              MOVS     r2,#1
000016  2021              MOVS     r0,#0x21
000018  5442              STRB     r2,[r0,r1]
;;;183    
;;;184        /* Return function status */
;;;185        return MID_SUCCESS;
00001a  2000              MOVS     r0,#0
;;;186    }
00001c  4770              BX       lr
;;;187    
                          ENDP


                          AREA ||i.MID_TM_Base_Start_IT||, CODE, READONLY, ALIGN=1

                  MID_TM_Base_Start_IT PROC
;;;233     */
;;;234    MID_StatusTypeDef MID_TM_Base_Start_IT(TM_HandleTypeDef* mTM)
000000  4601              MOV      r1,r0
;;;235    {
;;;236        /* Enable the TM Update interrupt */
;;;237        __DRV_TM_ENABLE_IT(mTM, TM_IT_UPDATE);
000002  6808              LDR      r0,[r1,#0]
000004  6840              LDR      r0,[r0,#4]
000006  2210              MOVS     r2,#0x10
000008  4310              ORRS     r0,r0,r2
00000a  680a              LDR      r2,[r1,#0]
00000c  6050              STR      r0,[r2,#4]
;;;238        __DRV_TM_ENABLE_ITEA(mTM);
00000e  6808              LDR      r0,[r1,#0]
000010  6840              LDR      r0,[r0,#4]
000012  2201              MOVS     r2,#1
000014  4310              ORRS     r0,r0,r2
000016  680a              LDR      r2,[r1,#0]
000018  6050              STR      r0,[r2,#4]
;;;239    
;;;240        /* Enable the Peripheral */
;;;241        __DRV_TM_ENABLE(mTM);
00001a  6808              LDR      r0,[r1,#0]
00001c  6900              LDR      r0,[r0,#0x10]
00001e  2203              MOVS     r2,#3
000020  4310              ORRS     r0,r0,r2
000022  680a              LDR      r2,[r1,#0]
000024  6110              STR      r0,[r2,#0x10]
;;;242    
;;;243        /* Return function status */
;;;244        return MID_SUCCESS;
000026  2000              MOVS     r0,#0
;;;245    }
000028  4770              BX       lr
;;;246    
                          ENDP


                          AREA ||i.MID_TM_Base_Stop||, CODE, READONLY, ALIGN=1

                  MID_TM_Base_Stop PROC
;;;203     */
;;;204    MID_StatusTypeDef MID_TM_Base_Stop(TM_HandleTypeDef* mTM)
000000  4601              MOV      r1,r0
;;;205    {
;;;206        /* Set the TM state */
;;;207        mTM->State= MID_TM_STATE_BUSY;
000002  2200              MOVS     r2,#0
000004  2021              MOVS     r0,#0x21
000006  5442              STRB     r2,[r0,r1]
;;;208    
;;;209        /* Enable the Peripheral */
;;;210        __DRV_TM_DISABLE(mTM);
000008  bf00              NOP      
00000a  6808              LDR      r0,[r1,#0]
00000c  8e00              LDRH     r0,[r0,#0x30]
00000e  2800              CMP      r0,#0
000010  d105              BNE      |L38.30|
000012  6808              LDR      r0,[r1,#0]
000014  6900              LDR      r0,[r0,#0x10]
000016  0880              LSRS     r0,r0,#2
000018  0080              LSLS     r0,r0,#2
00001a  680a              LDR      r2,[r1,#0]
00001c  6110              STR      r0,[r2,#0x10]
                  |L38.30|
00001e  bf00              NOP      
;;;211    
;;;212        /* Change the TM state*/
;;;213        mTM->State= MID_TM_STATE_READY;
000020  2201              MOVS     r2,#1
000022  2021              MOVS     r0,#0x21
000024  5442              STRB     r2,[r0,r1]
;;;214    
;;;215        /* Return function status */
;;;216        return MID_SUCCESS;
000026  2000              MOVS     r0,#0
;;;217    }
000028  4770              BX       lr
;;;218    
                          ENDP


                          AREA ||i.MID_TM_Base_Stop_IT||, CODE, READONLY, ALIGN=1

                  MID_TM_Base_Stop_IT PROC
;;;262     */
;;;263    MID_StatusTypeDef MID_TM_Base_Stop_IT(TM_HandleTypeDef* mTM)
000000  4601              MOV      r1,r0
;;;264    {
;;;265        /* Disable the TM Update interrupt */
;;;266        __DRV_TM_DISABLE_IT(mTM, TM_IT_UPDATE);
000002  6808              LDR      r0,[r1,#0]
000004  6840              LDR      r0,[r0,#4]
000006  2210              MOVS     r2,#0x10
000008  4390              BICS     r0,r0,r2
00000a  680a              LDR      r2,[r1,#0]
00000c  6050              STR      r0,[r2,#4]
;;;267        if((mTM->Instance->INT.W & 0xFFFFFFFE) == 0)
00000e  6808              LDR      r0,[r1,#0]
000010  6840              LDR      r0,[r0,#4]
000012  0840              LSRS     r0,r0,#1
000014  0040              LSLS     r0,r0,#1
000016  2800              CMP      r0,#0
000018  d10b              BNE      |L39.50|
;;;268            __DRV_TM_DISABLE_ITEA(mTM);
00001a  bf00              NOP      
00001c  6808              LDR      r0,[r1,#0]
00001e  6840              LDR      r0,[r0,#4]
000020  2800              CMP      r0,#0
000022  d005              BEQ      |L39.48|
000024  6808              LDR      r0,[r1,#0]
000026  6840              LDR      r0,[r0,#4]
000028  0840              LSRS     r0,r0,#1
00002a  0040              LSLS     r0,r0,#1
00002c  680a              LDR      r2,[r1,#0]
00002e  6050              STR      r0,[r2,#4]
                  |L39.48|
000030  bf00              NOP      
                  |L39.50|
;;;269        
;;;270        /* Enable the Peripheral */
;;;271        __DRV_TM_DISABLE(mTM);
000032  bf00              NOP      
000034  6808              LDR      r0,[r1,#0]
000036  8e00              LDRH     r0,[r0,#0x30]
000038  2800              CMP      r0,#0
00003a  d105              BNE      |L39.72|
00003c  6808              LDR      r0,[r1,#0]
00003e  6900              LDR      r0,[r0,#0x10]
000040  0880              LSRS     r0,r0,#2
000042  0080              LSLS     r0,r0,#2
000044  680a              LDR      r2,[r1,#0]
000046  6110              STR      r0,[r2,#0x10]
                  |L39.72|
000048  bf00              NOP      
;;;272    
;;;273        /* check IT for ITEA */
;;;274        if((mTM->Instance->INT.W & 0xFFFFFFFE) == 0)
00004a  6808              LDR      r0,[r1,#0]
00004c  6840              LDR      r0,[r0,#4]
00004e  0840              LSRS     r0,r0,#1
000050  0040              LSLS     r0,r0,#1
000052  2800              CMP      r0,#0
000054  d10b              BNE      |L39.110|
;;;275            __DRV_TM_DISABLE_ITEA(mTM);
000056  bf00              NOP      
000058  6808              LDR      r0,[r1,#0]
00005a  6840              LDR      r0,[r0,#4]
00005c  2800              CMP      r0,#0
00005e  d005              BEQ      |L39.108|
000060  6808              LDR      r0,[r1,#0]
000062  6840              LDR      r0,[r0,#4]
000064  0840              LSRS     r0,r0,#1
000066  0040              LSLS     r0,r0,#1
000068  680a              LDR      r2,[r1,#0]
00006a  6050              STR      r0,[r2,#4]
                  |L39.108|
00006c  bf00              NOP      
                  |L39.110|
;;;276    
;;;277        /* Return function status */
;;;278        return MID_SUCCESS;
00006e  2000              MOVS     r0,#0
;;;279    }
000070  4770              BX       lr
;;;280    
                          ENDP


                          AREA ||i.MID_TM_BreakCallback||, CODE, READONLY, ALIGN=1

                  MID_TM_BreakCallback PROC
;;;5656    */
;;;5657   __weak void MID_TM_BreakCallback(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;5658   {
;;;5659       /* Prevent unused argument(s) compilation warning */
;;;5660       UNUSED(mTM);
;;;5661       /* NOTE : This function Should not be modified, when the callback is needed,
;;;5662                 the MID_TM_BreakCallback could be implemented in the user file
;;;5663        */
;;;5664   }
;;;5665   
                          ENDP


                          AREA ||i.MID_TM_ClockOut||, CODE, READONLY, ALIGN=1

                  MID_TM_ClockOut PROC
;;;5402    */
;;;5403   MID_StatusTypeDef MID_TM_ClockOut(TM_HandleTypeDef* mTM, TM_CKOConfigTypeDef* sClockConfig)
000000  b510              PUSH     {r4,lr}
;;;5404   {
000002  4602              MOV      r2,r0
;;;5405       uint32_t tmpCKO;
;;;5406       
;;;5407       /* Check input state */
;;;5408       __MID_LOCK(mTM);
000004  bf00              NOP      
000006  2020              MOVS     r0,#0x20
000008  5c80              LDRB     r0,[r0,r2]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L41.18|
00000e  2002              MOVS     r0,#2
                  |L41.16|
;;;5409       
;;;5410       mTM->State = MID_TM_STATE_BUSY;
;;;5411   
;;;5412       // config CKO register
;;;5413       tmpCKO = sClockConfig->CKOInitState | sClockConfig->CKOSource | sClockConfig->CKOCmd | TM_CKO_CKO_LCK_un_locked_w;
;;;5414       mTM->Instance->CKO.W = tmpCKO;
;;;5415   
;;;5416       // release & unlock
;;;5417       mTM->State = MID_TM_STATE_READY;
;;;5418       
;;;5419       /* Release Lock */
;;;5420       __MID_UNLOCK(mTM);
;;;5421   
;;;5422       return MID_SUCCESS;
;;;5423   }
000010  bd10              POP      {r4,pc}
                  |L41.18|
000012  2401              MOVS     r4,#1                 ;5408
000014  2020              MOVS     r0,#0x20              ;5408
000016  5484              STRB     r4,[r0,r2]            ;5408
000018  bf00              NOP                            ;5408
00001a  2400              MOVS     r4,#0                 ;5410
00001c  2021              MOVS     r0,#0x21              ;5410
00001e  5484              STRB     r4,[r0,r2]            ;5410
000020  684c              LDR      r4,[r1,#4]            ;5413
000022  6808              LDR      r0,[r1,#0]            ;5413
000024  4320              ORRS     r0,r0,r4              ;5413
000026  688c              LDR      r4,[r1,#8]            ;5413
000028  4320              ORRS     r0,r0,r4              ;5413
00002a  2408              MOVS     r4,#8                 ;5413
00002c  4603              MOV      r3,r0                 ;5413
00002e  4323              ORRS     r3,r3,r4              ;5413
000030  6810              LDR      r0,[r2,#0]            ;5414
000032  6183              STR      r3,[r0,#0x18]         ;5414
000034  2401              MOVS     r4,#1                 ;5417
000036  2021              MOVS     r0,#0x21              ;5417
000038  5484              STRB     r4,[r0,r2]            ;5417
00003a  bf00              NOP                            ;5420
00003c  2400              MOVS     r4,#0                 ;5420
00003e  2020              MOVS     r0,#0x20              ;5420
000040  5484              STRB     r4,[r0,r2]            ;5420
000042  bf00              NOP                            ;5420
000044  2000              MOVS     r0,#0                 ;5422
000046  e7e3              B        |L41.16|
;;;5424   
                          ENDP


                          AREA ||i.MID_TM_ConfigBreakDeadTime||, CODE, READONLY, ALIGN=1

                  MID_TM_ConfigBreakDeadTime PROC
;;;5265    */
;;;5266   MID_StatusTypeDef MID_TM_ConfigBreakDeadTime(TM_HandleTypeDef* mTM, TM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
000000  b510              PUSH     {r4,lr}
;;;5267   {
000002  4602              MOV      r2,r0
;;;5268       uint32_t tmpBS;
;;;5269       
;;;5270       tmpBS = (mTM->Instance->BS.W) & (~0x0000000F);
000004  6810              LDR      r0,[r2,#0]
000006  6c80              LDR      r0,[r0,#0x48]
000008  0903              LSRS     r3,r0,#4
00000a  011b              LSLS     r3,r3,#4
;;;5271       
;;;5272       /* Process Lockeded */
;;;5273       __MID_LOCK(mTM);
00000c  bf00              NOP      
00000e  2020              MOVS     r0,#0x20
000010  5c80              LDRB     r0,[r0,r2]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L42.26|
000016  2002              MOVS     r0,#2
                  |L42.24|
;;;5274   
;;;5275       // config BreakMode, Stop State, Break source
;;;5276       tmpBS |= sBreakDeadTimeConfig->BreakMode;
;;;5277       tmpBS |= sBreakDeadTimeConfig->BreakCHxOutputMode;
;;;5278       tmpBS |= sBreakDeadTimeConfig->BreakSourceSel;
;;;5279       
;;;5280       mTM->Instance->BS.W = tmpBS;
;;;5281       
;;;5282       // config dead time clock divider
;;;5283       mTM->Instance->CLK.W &= ~(TM_CLK_DTG_DIV_mask_w);
;;;5284       mTM->Instance->CLK.W |= sBreakDeadTimeConfig->DeatTimeClockDivision;
;;;5285       
;;;5286       // config dead time
;;;5287       mTM->Instance->PWM.W &= ~(TM_PWM_DTG_DY_mask_w);
;;;5288       mTM->Instance->PWM.W |= (sBreakDeadTimeConfig->DeadTime << 8);
;;;5289   
;;;5290       /* Release Lock */
;;;5291       __MID_UNLOCK(mTM);
;;;5292   
;;;5293       return MID_SUCCESS;
;;;5294       
;;;5295   }
000018  bd10              POP      {r4,pc}
                  |L42.26|
00001a  2401              MOVS     r4,#1                 ;5273
00001c  2020              MOVS     r0,#0x20              ;5273
00001e  5484              STRB     r4,[r0,r2]            ;5273
000020  bf00              NOP                            ;5273
000022  6848              LDR      r0,[r1,#4]            ;5276
000024  4303              ORRS     r3,r3,r0              ;5276
000026  6808              LDR      r0,[r1,#0]            ;5277
000028  4303              ORRS     r3,r3,r0              ;5277
00002a  6908              LDR      r0,[r1,#0x10]         ;5278
00002c  4303              ORRS     r3,r3,r0              ;5278
00002e  6810              LDR      r0,[r2,#0]            ;5280
000030  6483              STR      r3,[r0,#0x48]         ;5280
000032  6810              LDR      r0,[r2,#0]            ;5283
000034  6880              LDR      r0,[r0,#8]            ;5283
000036  2403              MOVS     r4,#3                 ;5283
000038  0424              LSLS     r4,r4,#16             ;5283
00003a  43a0              BICS     r0,r0,r4              ;5283
00003c  6814              LDR      r4,[r2,#0]            ;5283
00003e  60a0              STR      r0,[r4,#8]            ;5283
000040  6810              LDR      r0,[r2,#0]            ;5284
000042  6880              LDR      r0,[r0,#8]            ;5284
000044  688c              LDR      r4,[r1,#8]            ;5284
000046  4320              ORRS     r0,r0,r4              ;5284
000048  6814              LDR      r4,[r2,#0]            ;5284
00004a  60a0              STR      r0,[r4,#8]            ;5284
00004c  6810              LDR      r0,[r2,#0]            ;5287
00004e  6c40              LDR      r0,[r0,#0x44]         ;5287
000050  24ff              MOVS     r4,#0xff              ;5287
000052  0224              LSLS     r4,r4,#8              ;5287
000054  43a0              BICS     r0,r0,r4              ;5287
000056  6814              LDR      r4,[r2,#0]            ;5287
000058  6460              STR      r0,[r4,#0x44]         ;5287
00005a  6810              LDR      r0,[r2,#0]            ;5288
00005c  6c40              LDR      r0,[r0,#0x44]         ;5288
00005e  68cc              LDR      r4,[r1,#0xc]          ;5288
000060  0224              LSLS     r4,r4,#8              ;5288
000062  4320              ORRS     r0,r0,r4              ;5288
000064  6814              LDR      r4,[r2,#0]            ;5288
000066  6460              STR      r0,[r4,#0x44]         ;5288
000068  bf00              NOP                            ;5291
00006a  2400              MOVS     r4,#0                 ;5291
00006c  2020              MOVS     r0,#0x20              ;5291
00006e  5484              STRB     r4,[r0,r2]            ;5291
000070  bf00              NOP                            ;5291
000072  2000              MOVS     r0,#0                 ;5293
000074  e7d0              B        |L42.24|
;;;5296   
                          ENDP


                          AREA ||i.MID_TM_ConfigClockSource||, CODE, READONLY, ALIGN=2

                  MID_TM_ConfigClockSource PROC
;;;5163    */
;;;5164   MID_StatusTypeDef MID_TM_ConfigClockSource(TM_HandleTypeDef * mTM, TM_ClockConfigTypeDef * sClockSourceConfig)
000000  b510              PUSH     {r4,lr}
;;;5165   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;5166       uint32_t tmpsmcr = 0U;
000006  2100              MOVS     r1,#0
;;;5167   
;;;5168       /* Process Lockeded */
;;;5169       __MID_LOCK(mTM);
000008  bf00              NOP      
00000a  2020              MOVS     r0,#0x20
00000c  5c80              LDRB     r0,[r0,r2]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L43.22|
000012  2002              MOVS     r0,#2
                  |L43.20|
;;;5170   
;;;5171       mTM->State = MID_TM_STATE_BUSY;
;;;5172   
;;;5173       /* Config Main Counter/Prescaler Clock source from Internal or External clock */
;;;5174       /* Config Internal / External Clock source */
;;;5175       tmpsmcr = mTM->Instance->CLK.W;
;;;5176       tmpsmcr &= ~(TM_CLK_CKI_DIV_mask_w | TM_CLK_CKI_SEL_mask_w | TM_CLK_CKS2_SEL_mask_w | TM_CLK_CKS_SEL_mask_w | TM_CLK_CKE_SEL_mask_w);
;;;5177       tmpsmcr |= (sClockSourceConfig->TM_ClockSource | sClockSourceConfig->TM_INTClockDivision | sClockSourceConfig->TM_InternalClockSource);
;;;5178       tmpsmcr |= (sClockSourceConfig->TM_ExternalClockSource & ~(TM_TRG_ITR_MUX_mask_w));  
;;;5179       mTM->Instance->CLK.W = tmpsmcr;
;;;5180   
;;;5181       /* Config ITRx Clock source */
;;;5182       tmpsmcr = mTM->Instance->TRG.W;
;;;5183       tmpsmcr &= ~(TM_TRG_ITR_MUX_mask_w);
;;;5184       tmpsmcr |= (sClockSourceConfig->TM_ExternalClockSource & ~(TM_CLK_CKE_SEL_mask_w));  
;;;5185       mTM->Instance->TRG.W = tmpsmcr;
;;;5186     
;;;5187       // Update state & unlock
;;;5188       mTM->State = MID_TM_STATE_READY;
;;;5189   
;;;5190       /* Release Lock */
;;;5191       __MID_UNLOCK(mTM);
;;;5192   
;;;5193       return MID_SUCCESS;
;;;5194   }
000014  bd10              POP      {r4,pc}
                  |L43.22|
000016  2401              MOVS     r4,#1                 ;5169
000018  2020              MOVS     r0,#0x20              ;5169
00001a  5484              STRB     r4,[r0,r2]            ;5169
00001c  bf00              NOP                            ;5169
00001e  2400              MOVS     r4,#0                 ;5171
000020  2021              MOVS     r0,#0x21              ;5171
000022  5484              STRB     r4,[r0,r2]            ;5171
000024  6810              LDR      r0,[r2,#0]            ;5175
000026  6881              LDR      r1,[r0,#8]            ;5175
000028  4811              LDR      r0,|L43.112|
00002a  4001              ANDS     r1,r1,r0              ;5176
00002c  689c              LDR      r4,[r3,#8]            ;5177
00002e  6818              LDR      r0,[r3,#0]            ;5177
000030  4320              ORRS     r0,r0,r4              ;5177
000032  685c              LDR      r4,[r3,#4]            ;5177
000034  4320              ORRS     r0,r0,r4              ;5177
000036  4301              ORRS     r1,r1,r0              ;5177
000038  2407              MOVS     r4,#7                 ;5178
00003a  0224              LSLS     r4,r4,#8              ;5178
00003c  68d8              LDR      r0,[r3,#0xc]          ;5178
00003e  43a0              BICS     r0,r0,r4              ;5178
000040  4301              ORRS     r1,r1,r0              ;5178
000042  6810              LDR      r0,[r2,#0]            ;5179
000044  6081              STR      r1,[r0,#8]            ;5179
000046  6810              LDR      r0,[r2,#0]            ;5182
000048  68c1              LDR      r1,[r0,#0xc]          ;5182
00004a  4608              MOV      r0,r1                 ;5183
00004c  43a0              BICS     r0,r0,r4              ;5183
00004e  4601              MOV      r1,r0                 ;5183
000050  2430              MOVS     r4,#0x30              ;5184
000052  68d8              LDR      r0,[r3,#0xc]          ;5184
000054  43a0              BICS     r0,r0,r4              ;5184
000056  4301              ORRS     r1,r1,r0              ;5184
000058  6810              LDR      r0,[r2,#0]            ;5185
00005a  60c1              STR      r1,[r0,#0xc]          ;5185
00005c  2401              MOVS     r4,#1                 ;5188
00005e  2021              MOVS     r0,#0x21              ;5188
000060  5484              STRB     r4,[r0,r2]            ;5188
000062  bf00              NOP                            ;5191
000064  2400              MOVS     r4,#0                 ;5191
000066  2020              MOVS     r0,#0x20              ;5191
000068  5484              STRB     r4,[r0,r2]            ;5191
00006a  bf00              NOP                            ;5191
00006c  2000              MOVS     r0,#0                 ;5193
00006e  e7d1              B        |L43.20|
;;;5195   
                          ENDP

                  |L43.112|
                          DCD      0xffffcc0f

                          AREA ||i.MID_TM_Encoder_DeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_Encoder_DeInit PROC
;;;4411    */
;;;4412   MID_StatusTypeDef MID_TM_Encoder_DeInit(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;4413   {
000002  4604              MOV      r4,r0
;;;4414       
;;;4415       /* Process Locked */
;;;4416       __MID_LOCK(mTM);
000004  bf00              NOP      
000006  2020              MOVS     r0,#0x20
000008  5d00              LDRB     r0,[r0,r4]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L44.18|
00000e  2002              MOVS     r0,#2
                  |L44.16|
;;;4417       
;;;4418       mTM->State = MID_TM_STATE_BUSY;
;;;4419   
;;;4420       /* Disable the TM Peripheral Clock */
;;;4421       __DRV_TM_DISABLE(mTM);
;;;4422   
;;;4423       /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;4424       MID_TM_Encoder_MspDeInit(mTM);
;;;4425   
;;;4426       /* Change TM state */
;;;4427       mTM->State = MID_TM_STATE_RESET;
;;;4428   
;;;4429       /* Release Lock */
;;;4430       __MID_UNLOCK(mTM);
;;;4431   
;;;4432       return MID_SUCCESS;
;;;4433   }
000010  bd10              POP      {r4,pc}
                  |L44.18|
000012  2101              MOVS     r1,#1                 ;4416
000014  2020              MOVS     r0,#0x20              ;4416
000016  5501              STRB     r1,[r0,r4]            ;4416
000018  bf00              NOP                            ;4416
00001a  2100              MOVS     r1,#0                 ;4418
00001c  2021              MOVS     r0,#0x21              ;4418
00001e  5501              STRB     r1,[r0,r4]            ;4418
000020  bf00              NOP                            ;4421
000022  6820              LDR      r0,[r4,#0]            ;4421
000024  8e00              LDRH     r0,[r0,#0x30]         ;4421
000026  2800              CMP      r0,#0                 ;4421
000028  d105              BNE      |L44.54|
00002a  6820              LDR      r0,[r4,#0]            ;4421
00002c  6900              LDR      r0,[r0,#0x10]         ;4421
00002e  0880              LSRS     r0,r0,#2              ;4421
000030  0080              LSLS     r0,r0,#2              ;4421
000032  6821              LDR      r1,[r4,#0]            ;4421
000034  6108              STR      r0,[r1,#0x10]         ;4421
                  |L44.54|
000036  bf00              NOP                            ;4421
000038  4620              MOV      r0,r4                 ;4424
00003a  f7fffffe          BL       MID_TM_Encoder_MspDeInit
00003e  2102              MOVS     r1,#2                 ;4427
000040  2021              MOVS     r0,#0x21              ;4427
000042  5501              STRB     r1,[r0,r4]            ;4427
000044  bf00              NOP                            ;4430
000046  2100              MOVS     r1,#0                 ;4430
000048  2020              MOVS     r0,#0x20              ;4430
00004a  5501              STRB     r1,[r0,r4]            ;4430
00004c  bf00              NOP                            ;4430
00004e  2000              MOVS     r0,#0                 ;4432
000050  e7de              B        |L44.16|
;;;4434   
                          ENDP


                          AREA ||i.MID_TM_Encoder_GetState||, CODE, READONLY, ALIGN=1

                  MID_TM_Encoder_GetState PROC
;;;5809    */
;;;5810   MID_TM_StateTypeDef MID_TM_Encoder_GetState(TM_HandleTypeDef* mTM)
000000  4601              MOV      r1,r0
;;;5811   {
;;;5812       return mTM->State;
000002  2021              MOVS     r0,#0x21
000004  5c40              LDRB     r0,[r0,r1]
;;;5813   }
000006  4770              BX       lr
;;;5814   
                          ENDP


                          AREA ||i.MID_TM_Encoder_Init||, CODE, READONLY, ALIGN=1

                  MID_TM_Encoder_Init PROC
;;;4370    */
;;;4371   MID_StatusTypeDef MID_TM_Encoder_Init(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;4372   {
000002  4604              MOV      r4,r0
;;;4373   
;;;4374       /* Check the TM handle allocation */
;;;4375       if(mTM == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L46.12|
;;;4376           return MID_FAILURE;
000008  2001              MOVS     r0,#1
                  |L46.10|
;;;4377   
;;;4378       if(mTM->State == MID_TM_STATE_RESET)
;;;4379       {
;;;4380           /* Allocate lock resource and initialize it */
;;;4381           mTM->Lock = MID_UnLocked;
;;;4382   
;;;4383           /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;4384           MID_TM_Encoder_MspInit(mTM);
;;;4385       }
;;;4386   
;;;4387       /* Set the TM state */
;;;4388       mTM->State= MID_TM_STATE_BUSY;
;;;4389   
;;;4390       /* Set the Time Base configuration */
;;;4391       TM_Base_SetConfig(mTM->Instance, &mTM->Init);
;;;4392   
;;;4393       /* Initialize the TM state*/
;;;4394       mTM->State= MID_TM_STATE_READY;
;;;4395   
;;;4396       return MID_SUCCESS;
;;;4397   }
00000a  bd10              POP      {r4,pc}
                  |L46.12|
00000c  2021              MOVS     r0,#0x21              ;4378
00000e  5d00              LDRB     r0,[r0,r4]            ;4378
000010  2802              CMP      r0,#2                 ;4378
000012  d105              BNE      |L46.32|
000014  2100              MOVS     r1,#0                 ;4381
000016  2020              MOVS     r0,#0x20              ;4381
000018  5501              STRB     r1,[r0,r4]            ;4381
00001a  4620              MOV      r0,r4                 ;4384
00001c  f7fffffe          BL       MID_TM_Encoder_MspInit
                  |L46.32|
000020  2100              MOVS     r1,#0                 ;4388
000022  2021              MOVS     r0,#0x21              ;4388
000024  5501              STRB     r1,[r0,r4]            ;4388
000026  1d21              ADDS     r1,r4,#4              ;4391
000028  6820              LDR      r0,[r4,#0]            ;4391
00002a  f7fffffe          BL       TM_Base_SetConfig
00002e  2101              MOVS     r1,#1                 ;4394
000030  2021              MOVS     r0,#0x21              ;4394
000032  5501              STRB     r1,[r0,r4]            ;4394
000034  2000              MOVS     r0,#0                 ;4396
000036  e7e8              B        |L46.10|
;;;4398   
                          ENDP


                          AREA ||i.MID_TM_Encoder_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_Encoder_MspDeInit PROC
;;;4459    */
;;;4460   __weak void MID_TM_Encoder_MspDeInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;4461   {
;;;4462       /* Prevent unused argument(s) compilation warning */
;;;4463       UNUSED(mTM);
;;;4464       /* NOTE : This function Should not be modified, when the callback is needed,
;;;4465                 the MID_TM_Encoder_MspDeInit could be implemented in the user file
;;;4466        */
;;;4467   }
;;;4468   
                          ENDP


                          AREA ||i.MID_TM_Encoder_MspInit||, CODE, READONLY, ALIGN=1

                  MID_TM_Encoder_MspInit PROC
;;;4442    */
;;;4443   __weak void MID_TM_Encoder_MspInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;4444   {
;;;4445       /* Prevent unused argument(s) compilation warning */
;;;4446       UNUSED(mTM);
;;;4447       /* NOTE : This function Should not be modified, when the callback is needed,
;;;4448                 the MID_TM_Encoder_MspInit could be implemented in the user file
;;;4449        */
;;;4450   }
;;;4451   
                          ENDP


                          AREA ||i.MID_TM_Encoder_Start||, CODE, READONLY, ALIGN=1

                  MID_TM_Encoder_Start PROC
;;;4503    */
;;;4504   MID_StatusTypeDef MID_TM_Encoder_Start(TM_HandleTypeDef* mTM, TM_Encoder_InitTypeDef* sConfig)
000000  b530              PUSH     {r4,r5,lr}
;;;4505   {
000002  4602              MOV      r2,r0
;;;4506       uint32_t tmp;
;;;4507       
;;;4508       
;;;4509       /* Config IC0 trigger source */
;;;4510       mTM->Instance->ICCR.MBIT.IC0_MUX = sConfig->IC0Selection;
000004  6810              LDR      r0,[r2,#0]
000006  3020              ADDS     r0,r0,#0x20
000008  7d00              LDRB     r0,[r0,#0x14]
00000a  0880              LSRS     r0,r0,#2
00000c  0080              LSLS     r0,r0,#2
00000e  7b0c              LDRB     r4,[r1,#0xc]
000010  07a4              LSLS     r4,r4,#30
000012  0fa4              LSRS     r4,r4,#30
000014  4320              ORRS     r0,r0,r4
000016  6814              LDR      r4,[r2,#0]
000018  3420              ADDS     r4,r4,#0x20
00001a  7520              STRB     r0,[r4,#0x14]
;;;4511   
;;;4512       /* Config IC1 trigger source */
;;;4513       mTM->Instance->ICCR.MBIT.IC1_MUX = sConfig->IC1Selection;
00001c  6810              LDR      r0,[r2,#0]
00001e  3020              ADDS     r0,r0,#0x20
000020  7d00              LDRB     r0,[r0,#0x14]
000022  2430              MOVS     r4,#0x30
000024  43a0              BICS     r0,r0,r4
000026  690c              LDR      r4,[r1,#0x10]
000028  0124              LSLS     r4,r4,#4
00002a  2530              MOVS     r5,#0x30
00002c  402c              ANDS     r4,r4,r5
00002e  4320              ORRS     r0,r0,r4
000030  6814              LDR      r4,[r2,#0]
000032  3420              ADDS     r4,r4,#0x20
000034  7520              STRB     r0,[r4,#0x14]
;;;4514   
;;;4515       /* Config Encoder Direction polarity */
;;;4516       tmp = mTM->Instance->CR0.W & ~(TM_CR0_DIR_INV_mask_w);
000036  6810              LDR      r0,[r2,#0]
000038  6900              LDR      r0,[r0,#0x10]
00003a  2401              MOVS     r4,#1
00003c  0364              LSLS     r4,r4,#13
00003e  43a0              BICS     r0,r0,r4
000040  4603              MOV      r3,r0
;;;4517       tmp |= sConfig->EncoderDirection;
000042  6888              LDR      r0,[r1,#8]
000044  4303              ORRS     r3,r3,r0
;;;4518       mTM->Instance->CR0.W = tmp;
000046  6810              LDR      r0,[r2,#0]
000048  6103              STR      r3,[r0,#0x10]
;;;4519   
;;;4520       /* Config Encoder Mode & IDX step */
;;;4521       tmp = mTM->Instance->TRG.W & ~(TM_TRG_QEI_MDS_mask_w | TM_TRG_IDX_EN_mask_w | TM_TRG_IDX_MDS_mask_w);
00004a  6810              LDR      r0,[r2,#0]
00004c  68c0              LDR      r0,[r0,#0xc]
00004e  243f              MOVS     r4,#0x3f
000050  0424              LSLS     r4,r4,#16
000052  43a0              BICS     r0,r0,r4
000054  4603              MOV      r3,r0
;;;4522       tmp |= (sConfig->EncoderMode | sConfig->EncoderReset);
000056  684c              LDR      r4,[r1,#4]
000058  6808              LDR      r0,[r1,#0]
00005a  4320              ORRS     r0,r0,r4
00005c  4303              ORRS     r3,r3,r0
;;;4523       mTM->Instance->TRG.W = tmp;
00005e  6810              LDR      r0,[r2,#0]
000060  60c3              STR      r3,[r0,#0xc]
;;;4524   
;;;4525       /* Encoder's index is fixed at ETR pin */
;;;4526   
;;;4527       /* Enable the Peripheral */
;;;4528       __DRV_TM_ENABLE(mTM);
000062  6810              LDR      r0,[r2,#0]
000064  6900              LDR      r0,[r0,#0x10]
000066  2403              MOVS     r4,#3
000068  4320              ORRS     r0,r0,r4
00006a  6814              LDR      r4,[r2,#0]
00006c  6120              STR      r0,[r4,#0x10]
;;;4529   
;;;4530       /* Return function status */
;;;4531       return MID_SUCCESS;
00006e  2000              MOVS     r0,#0
;;;4532   }
000070  bd30              POP      {r4,r5,pc}
;;;4533   
                          ENDP


                          AREA ||i.MID_TM_Encoder_Start_IT||, CODE, READONLY, ALIGN=1

                  MID_TM_Encoder_Start_IT PROC
;;;4595    */
;;;4596   MID_StatusTypeDef MID_TM_Encoder_Start_IT(TM_HandleTypeDef* mTM, TM_Encoder_InitTypeDef* sConfig, uint32_t ITSrc)
000000  b570              PUSH     {r4-r6,lr}
;;;4597   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;4598       MID_TM_Encoder_Start(mTM, sConfig);
000008  4631              MOV      r1,r6
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       MID_TM_Encoder_Start
;;;4599       
;;;4600       /* Enable the encoder interface channels */
;;;4601       __DRV_TM_ENABLE_IT(mTM, ITSrc);
000010  6820              LDR      r0,[r4,#0]
000012  6840              LDR      r0,[r0,#4]
000014  4328              ORRS     r0,r0,r5
000016  6821              LDR      r1,[r4,#0]
000018  6048              STR      r0,[r1,#4]
;;;4602       __DRV_TM_ENABLE_ITEA(mTM);
00001a  6820              LDR      r0,[r4,#0]
00001c  6840              LDR      r0,[r0,#4]
00001e  2101              MOVS     r1,#1
000020  4308              ORRS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;4603   
;;;4604       /* Enable the Peripheral */
;;;4605       __DRV_TM_ENABLE(mTM);
000026  6820              LDR      r0,[r4,#0]
000028  6900              LDR      r0,[r0,#0x10]
00002a  2103              MOVS     r1,#3
00002c  4308              ORRS     r0,r0,r1
00002e  6821              LDR      r1,[r4,#0]
000030  6108              STR      r0,[r1,#0x10]
;;;4606   
;;;4607       /* Return function status */
;;;4608       return MID_SUCCESS;
000032  2000              MOVS     r0,#0
;;;4609   }
000034  bd70              POP      {r4-r6,pc}
;;;4610   
                          ENDP


                          AREA ||i.MID_TM_Encoder_Stop||, CODE, READONLY, ALIGN=1

                  MID_TM_Encoder_Stop PROC
;;;4546    */
;;;4547   MID_StatusTypeDef MID_TM_Encoder_Stop(TM_HandleTypeDef* mTM)
000000  4601              MOV      r1,r0
;;;4548   {
;;;4549   
;;;4550       /* Disable the Peripheral */
;;;4551       __DRV_TM_DISABLE(mTM);
000002  bf00              NOP      
000004  6808              LDR      r0,[r1,#0]
000006  8e00              LDRH     r0,[r0,#0x30]
000008  2800              CMP      r0,#0
00000a  d105              BNE      |L51.24|
00000c  6808              LDR      r0,[r1,#0]
00000e  6900              LDR      r0,[r0,#0x10]
000010  0880              LSRS     r0,r0,#2
000012  0080              LSLS     r0,r0,#2
000014  680a              LDR      r2,[r1,#0]
000016  6110              STR      r0,[r2,#0x10]
                  |L51.24|
000018  bf00              NOP      
;;;4552   
;;;4553       /* Return function status */
;;;4554       return MID_SUCCESS;
00001a  2000              MOVS     r0,#0
;;;4555   }
00001c  4770              BX       lr
;;;4556   
                          ENDP


                          AREA ||i.MID_TM_Encoder_Stop_IT||, CODE, READONLY, ALIGN=1

                  MID_TM_Encoder_Stop_IT PROC
;;;4627    */
;;;4628   MID_StatusTypeDef MID_TM_Encoder_Stop_IT(TM_HandleTypeDef* mTM, uint32_t ITSrc)
000000  4602              MOV      r2,r0
;;;4629   {
;;;4630       /* Disable the encoder interface channels */
;;;4631       __DRV_TM_DISABLE_IT(mTM, ITSrc);
000002  6810              LDR      r0,[r2,#0]
000004  6840              LDR      r0,[r0,#4]
000006  4388              BICS     r0,r0,r1
000008  6813              LDR      r3,[r2,#0]
00000a  6058              STR      r0,[r3,#4]
;;;4632   
;;;4633       /* Disable the Peripheral */
;;;4634       __DRV_TM_DISABLE(mTM);
00000c  bf00              NOP      
00000e  6810              LDR      r0,[r2,#0]
000010  8e00              LDRH     r0,[r0,#0x30]
000012  2800              CMP      r0,#0
000014  d105              BNE      |L52.34|
000016  6810              LDR      r0,[r2,#0]
000018  6900              LDR      r0,[r0,#0x10]
00001a  0880              LSRS     r0,r0,#2
00001c  0080              LSLS     r0,r0,#2
00001e  6813              LDR      r3,[r2,#0]
000020  6118              STR      r0,[r3,#0x10]
                  |L52.34|
000022  bf00              NOP      
;;;4635   
;;;4636       /* check IT for ITEA */
;;;4637       if((mTM->Instance->INT.W & 0xFFFFFFFE) == 0)
000024  6810              LDR      r0,[r2,#0]
000026  6840              LDR      r0,[r0,#4]
000028  0840              LSRS     r0,r0,#1
00002a  0040              LSLS     r0,r0,#1
00002c  2800              CMP      r0,#0
00002e  d10b              BNE      |L52.72|
;;;4638           __DRV_TM_DISABLE_ITEA(mTM);
000030  bf00              NOP      
000032  6810              LDR      r0,[r2,#0]
000034  6840              LDR      r0,[r0,#4]
000036  2800              CMP      r0,#0
000038  d005              BEQ      |L52.70|
00003a  6810              LDR      r0,[r2,#0]
00003c  6840              LDR      r0,[r0,#4]
00003e  0840              LSRS     r0,r0,#1
000040  0040              LSLS     r0,r0,#1
000042  6813              LDR      r3,[r2,#0]
000044  6058              STR      r0,[r3,#4]
                  |L52.70|
000046  bf00              NOP      
                  |L52.72|
;;;4639   
;;;4640       /* Change the mTM state */
;;;4641       mTM->State = MID_TM_STATE_READY;
000048  2301              MOVS     r3,#1
00004a  2021              MOVS     r0,#0x21
00004c  5483              STRB     r3,[r0,r2]
;;;4642   
;;;4643       /* Return function status */
;;;4644       return MID_SUCCESS;
00004e  2000              MOVS     r0,#0
;;;4645   }
000050  4770              BX       lr
;;;4646   ///@}
                          ENDP


                          AREA ||i.MID_TM_ErrorCallback||, CODE, READONLY, ALIGN=1

                  MID_TM_ErrorCallback PROC
;;;5639    */
;;;5640   __weak void MID_TM_ErrorCallback(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;5641   {
;;;5642       /* Prevent unused argument(s) compilation warning */
;;;5643       UNUSED(mTM);
;;;5644       /* NOTE : This function Should not be modified, when the callback is needed,
;;;5645                 the MID_TM_ErrorCallback could be implemented in the user file
;;;5646        */
;;;5647   
;;;5648   }
;;;5649   
                          ENDP


                          AREA ||i.MID_TM_GenerateEvent||, CODE, READONLY, ALIGN=1

                  MID_TM_GenerateEvent PROC
;;;5083    */
;;;5084   MID_StatusTypeDef MID_TM_GenerateEvent(TM_HandleTypeDef* mTM, uint32_t EventSource)
000000  b500              PUSH     {lr}
;;;5085   {
000002  4602              MOV      r2,r0
;;;5086       /* Process Lockeded */
;;;5087       __MID_LOCK(mTM);
000004  bf00              NOP      
000006  2020              MOVS     r0,#0x20
000008  5c80              LDRB     r0,[r0,r2]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L54.18|
00000e  2002              MOVS     r0,#2
                  |L54.16|
;;;5088   
;;;5089       /* Change the TM state */
;;;5090       mTM->State = MID_TM_STATE_BUSY;
;;;5091   
;;;5092       /* Set the event sources */
;;;5093       switch(EventSource)
;;;5094       {
;;;5095       case TM_EVENTSOURCE_CC0A:
;;;5096           mTM->Instance->CR1.W |= TM_CR1_CC0A_SEN_enable_w;
;;;5097           break;
;;;5098       case TM_EVENTSOURCE_CC0B:
;;;5099           mTM->Instance->CR1.W |= TM_CR1_CC0B_SEN_enable_w;
;;;5100           break;
;;;5101       case TM_EVENTSOURCE_CC1A:
;;;5102           mTM->Instance->CR1.W |= TM_CR1_CC1A_SEN_enable_w;
;;;5103           break;
;;;5104       case TM_EVENTSOURCE_CC1B:
;;;5105           mTM->Instance->CR1.W |= TM_CR1_CC1B_SEN_enable_w;
;;;5106           break;
;;;5107       case TM_EVENTSOURCE_CC2A:
;;;5108           mTM->Instance->CR1.W |= TM_CR1_CC2A_SEN_enable_w;
;;;5109           break;
;;;5110       case TM_EVENTSOURCE_CC2B:
;;;5111           mTM->Instance->CR1.W |= TM_CR1_CC2B_SEN_enable_w;
;;;5112           break;
;;;5113       case TM_EVENTSOURCE_CC3A:
;;;5114           mTM->Instance->CR1.W |= TM_CR1_CC3A_SEN_enable_w;
;;;5115           break;
;;;5116       case TM_EVENTSOURCE_CC3B:
;;;5117           mTM->Instance->CR1.W |= TM_CR1_CC3B_SEN_enable_w;
;;;5118           break;
;;;5119       case TM_EVENTSOURCE_TRIGGER:
;;;5120           mTM->Instance->CR0.W |= TM_CR0_USW_EN_enable_w;
;;;5121           break;
;;;5122       case TM_EVENTSOURCE_BREAK:
;;;5123           mTM->Instance->BS.W |= TM_BS_BKSW_EN_enable_w;
;;;5124           mTM->Instance->BS.W &= ~(TM_BS_BKSW_EN_enable_w);
;;;5125           break;
;;;5126       default:
;;;5127           break;
;;;5128   
;;;5129       }
;;;5130   
;;;5131       /* Change the TM state */
;;;5132       mTM->State = MID_TM_STATE_READY;
;;;5133   
;;;5134       /* Release Lock */
;;;5135       __MID_UNLOCK(mTM);
;;;5136   
;;;5137       /* Return function status */
;;;5138       return MID_SUCCESS;
;;;5139   }
000010  bd00              POP      {pc}
                  |L54.18|
000012  2301              MOVS     r3,#1                 ;5087
000014  2020              MOVS     r0,#0x20              ;5087
000016  5483              STRB     r3,[r0,r2]            ;5087
000018  bf00              NOP                            ;5087
00001a  2300              MOVS     r3,#0                 ;5090
00001c  2021              MOVS     r0,#0x21              ;5090
00001e  5483              STRB     r3,[r0,r2]            ;5090
000020  2905              CMP      r1,#5                 ;5093
000022  d038              BEQ      |L54.150|
000024  dc06              BGT      |L54.52|
000026  000b              MOVS     r3,r1                 ;5093
000028  f7fffffe          BL       __ARM_common_switch8
00002c  050d151d          DCB      0x05,0x0d,0x15,0x1d
000030  252d6200          DCB      0x25,0x2d,0x62,0x00
                  |L54.52|
000034  2906              CMP      r1,#6                 ;5093
000036  d036              BEQ      |L54.166|
000038  2907              CMP      r1,#7                 ;5093
00003a  d03c              BEQ      |L54.182|
00003c  2908              CMP      r1,#8                 ;5093
00003e  d042              BEQ      |L54.198|
000040  2980              CMP      r1,#0x80              ;5093
000042  d155              BNE      |L54.240|
000044  e047              B        |L54.214|
000046  6810              LDR      r0,[r2,#0]            ;5096
000048  6940              LDR      r0,[r0,#0x14]         ;5096
00004a  23ff              MOVS     r3,#0xff              ;5096
00004c  3301              ADDS     r3,#1                 ;5096
00004e  4318              ORRS     r0,r0,r3              ;5096
000050  6813              LDR      r3,[r2,#0]            ;5096
000052  6158              STR      r0,[r3,#0x14]         ;5096
000054  e04d              B        |L54.242|
000056  6810              LDR      r0,[r2,#0]            ;5099
000058  6940              LDR      r0,[r0,#0x14]         ;5099
00005a  2301              MOVS     r3,#1                 ;5099
00005c  031b              LSLS     r3,r3,#12             ;5099
00005e  4318              ORRS     r0,r0,r3              ;5099
000060  6813              LDR      r3,[r2,#0]            ;5099
000062  6158              STR      r0,[r3,#0x14]         ;5099
000064  e045              B        |L54.242|
000066  6810              LDR      r0,[r2,#0]            ;5102
000068  6940              LDR      r0,[r0,#0x14]         ;5102
00006a  2301              MOVS     r3,#1                 ;5102
00006c  025b              LSLS     r3,r3,#9              ;5102
00006e  4318              ORRS     r0,r0,r3              ;5102
000070  6813              LDR      r3,[r2,#0]            ;5102
000072  6158              STR      r0,[r3,#0x14]         ;5102
000074  e03d              B        |L54.242|
000076  6810              LDR      r0,[r2,#0]            ;5105
000078  6940              LDR      r0,[r0,#0x14]         ;5105
00007a  2301              MOVS     r3,#1                 ;5105
00007c  035b              LSLS     r3,r3,#13             ;5105
00007e  4318              ORRS     r0,r0,r3              ;5105
000080  6813              LDR      r3,[r2,#0]            ;5105
000082  6158              STR      r0,[r3,#0x14]         ;5105
000084  e035              B        |L54.242|
000086  6810              LDR      r0,[r2,#0]            ;5108
000088  6940              LDR      r0,[r0,#0x14]         ;5108
00008a  2301              MOVS     r3,#1                 ;5108
00008c  029b              LSLS     r3,r3,#10             ;5108
00008e  4318              ORRS     r0,r0,r3              ;5108
000090  6813              LDR      r3,[r2,#0]            ;5108
000092  6158              STR      r0,[r3,#0x14]         ;5108
000094  e02d              B        |L54.242|
                  |L54.150|
000096  6810              LDR      r0,[r2,#0]            ;5111
000098  6940              LDR      r0,[r0,#0x14]         ;5111
00009a  2301              MOVS     r3,#1                 ;5111
00009c  039b              LSLS     r3,r3,#14             ;5111
00009e  4318              ORRS     r0,r0,r3              ;5111
0000a0  6813              LDR      r3,[r2,#0]            ;5111
0000a2  6158              STR      r0,[r3,#0x14]         ;5111
0000a4  e025              B        |L54.242|
                  |L54.166|
0000a6  6810              LDR      r0,[r2,#0]            ;5114
0000a8  6940              LDR      r0,[r0,#0x14]         ;5114
0000aa  2301              MOVS     r3,#1                 ;5114
0000ac  02db              LSLS     r3,r3,#11             ;5114
0000ae  4318              ORRS     r0,r0,r3              ;5114
0000b0  6813              LDR      r3,[r2,#0]            ;5114
0000b2  6158              STR      r0,[r3,#0x14]         ;5114
0000b4  e01d              B        |L54.242|
                  |L54.182|
0000b6  6810              LDR      r0,[r2,#0]            ;5117
0000b8  6940              LDR      r0,[r0,#0x14]         ;5117
0000ba  2301              MOVS     r3,#1                 ;5117
0000bc  03db              LSLS     r3,r3,#15             ;5117
0000be  4318              ORRS     r0,r0,r3              ;5117
0000c0  6813              LDR      r3,[r2,#0]            ;5117
0000c2  6158              STR      r0,[r3,#0x14]         ;5117
0000c4  e015              B        |L54.242|
                  |L54.198|
0000c6  6810              LDR      r0,[r2,#0]            ;5120
0000c8  6900              LDR      r0,[r0,#0x10]         ;5120
0000ca  2301              MOVS     r3,#1                 ;5120
0000cc  039b              LSLS     r3,r3,#14             ;5120
0000ce  4318              ORRS     r0,r0,r3              ;5120
0000d0  6813              LDR      r3,[r2,#0]            ;5120
0000d2  6118              STR      r0,[r3,#0x10]         ;5120
0000d4  e00d              B        |L54.242|
                  |L54.214|
0000d6  6810              LDR      r0,[r2,#0]            ;5123
0000d8  6c80              LDR      r0,[r0,#0x48]         ;5123
0000da  2380              MOVS     r3,#0x80              ;5123
0000dc  4318              ORRS     r0,r0,r3              ;5123
0000de  6813              LDR      r3,[r2,#0]            ;5123
0000e0  6498              STR      r0,[r3,#0x48]         ;5123
0000e2  6810              LDR      r0,[r2,#0]            ;5124
0000e4  6c80              LDR      r0,[r0,#0x48]         ;5124
0000e6  2380              MOVS     r3,#0x80              ;5124
0000e8  4398              BICS     r0,r0,r3              ;5124
0000ea  6813              LDR      r3,[r2,#0]            ;5124
0000ec  6498              STR      r0,[r3,#0x48]         ;5124
0000ee  e000              B        |L54.242|
                  |L54.240|
0000f0  bf00              NOP                            ;5127
                  |L54.242|
0000f2  bf00              NOP                            ;5097
0000f4  2301              MOVS     r3,#1                 ;5132
0000f6  2021              MOVS     r0,#0x21              ;5132
0000f8  5483              STRB     r3,[r0,r2]            ;5132
0000fa  bf00              NOP                            ;5135
0000fc  2300              MOVS     r3,#0                 ;5135
0000fe  2020              MOVS     r0,#0x20              ;5135
000100  5483              STRB     r3,[r0,r2]            ;5135
000102  bf00              NOP                            ;5135
000104  2000              MOVS     r0,#0                 ;5138
000106  e783              B        |L54.16|
;;;5140   
                          ENDP


                          AREA ||i.MID_TM_IC_CaptureCallback||, CODE, READONLY, ALIGN=1

                  MID_TM_IC_CaptureCallback PROC
;;;5582    */
;;;5583   __weak void MID_TM_IC_CaptureCallback(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;5584   {
;;;5585       /* Prevent unused argument(s) compilation warning */
;;;5586       UNUSED(mTM);
;;;5587       /* NOTE : This function Should not be modified, when the callback is needed,
;;;5588                 the MID_TM_IC_CaptureCallback could be implemented in the user file
;;;5589        */
;;;5590   
;;;5591   }
;;;5592   
                          ENDP


                          AREA ||i.MID_TM_IC_ConfigChannel||, CODE, READONLY, ALIGN=2

                  MID_TM_IC_ConfigChannel PROC
;;;4930    */
;;;4931   MID_StatusTypeDef MID_TM_IC_ConfigChannel(TM_HandleTypeDef* mTM, TM_IC_InitTypeDef* sConfig, uint32_t Channel)
000000  b510              PUSH     {r4,lr}
;;;4932   {
000002  4603              MOV      r3,r0
;;;4933       /* Process Locked */
;;;4934       __MID_LOCK(mTM);
000004  bf00              NOP      
000006  2020              MOVS     r0,#0x20
000008  5cc0              LDRB     r0,[r0,r3]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L56.18|
00000e  2002              MOVS     r0,#2
                  |L56.16|
;;;4935   
;;;4936       mTM->State = MID_TM_STATE_BUSY;
;;;4937   
;;;4938       if(Channel == MID_TM_Channel0)
;;;4939       {
;;;4940           /* Config IC0 trigger source & edge */
;;;4941           mTM->Instance->ICCR.W &= ~(TM_ICCR_IC0_MUX_mask_w | TM_ICCR_IC0_TRGS_mask_w);
;;;4942           mTM->Instance->ICCR.W |= (sConfig->ICSelection | sConfig->ICPolarity);
;;;4943           // Overwritten or keep data for channel 0
;;;4944           mTM->Instance->CR1.W &= ~(TM_CR1_OVR0_MDS_mask_w);
;;;4945           mTM->Instance->CR1.W |= (sConfig->ICDataMode);
;;;4946       }
;;;4947       else if(Channel == MID_TM_Channel1)
;;;4948       {
;;;4949           /* Config IC1 trigger source & edge */
;;;4950           mTM->Instance->ICCR.W &= ~(TM_ICCR_IC1_MUX_mask_w | TM_ICCR_IC1_TRGS_mask_w);
;;;4951           mTM->Instance->ICCR.W |= (sConfig->ICSelection << 4);
;;;4952           mTM->Instance->ICCR.W |= (sConfig->ICPolarity << 2);
;;;4953           // Overwritten or keep data for channel 1
;;;4954           mTM->Instance->CR1.W &= ~(TM_CR1_OVR0_MDS_mask_w << 1);
;;;4955           mTM->Instance->CR1.W |= (sConfig->ICDataMode << 1);
;;;4956       }
;;;4957       else if(Channel == MID_TM_Channel2)
;;;4958       {
;;;4959           /* Config IC2 trigger source & edge */
;;;4960           mTM->Instance->ICCR.W &= ~(TM_ICCR_IC2_MUX_mask_w | TM_ICCR_IC2_TRGS_mask_w);
;;;4961           mTM->Instance->ICCR.W |= (sConfig->ICSelection << 8);
;;;4962           mTM->Instance->ICCR.W |= (sConfig->ICPolarity << 6);
;;;4963           // Overwritten or keep data for channel 2
;;;4964           mTM->Instance->CR1.W &= ~(TM_CR1_OVR0_MDS_mask_w << 2);
;;;4965           mTM->Instance->CR1.W |= (sConfig->ICDataMode << 2);
;;;4966       }
;;;4967       else
;;;4968       {
;;;4969           /* Config IC3 trigger source & edge */
;;;4970           mTM->Instance->ICCR.W &= ~(TM_ICCR_IC3_MUX_mask_w | TM_ICCR_IC3_TRGS_mask_w);
;;;4971           mTM->Instance->ICCR.W |= (sConfig->ICSelection << 12);
;;;4972           mTM->Instance->ICCR.W |= (sConfig->ICPolarity << 6);
;;;4973           // Overwritten or keep data for channel 3
;;;4974           mTM->Instance->CR1.W &= ~(TM_CR1_OVR0_MDS_mask_w << 3);
;;;4975           mTM->Instance->CR1.W |= (sConfig->ICDataMode << 3);
;;;4976       }
;;;4977   
;;;4978       mTM->State = MID_TM_STATE_READY;
;;;4979   
;;;4980       /* Release Lock */
;;;4981       __MID_UNLOCK(mTM);
;;;4982   
;;;4983       return MID_SUCCESS;
;;;4984   }
000010  bd10              POP      {r4,pc}
                  |L56.18|
000012  2401              MOVS     r4,#1                 ;4934
000014  2020              MOVS     r0,#0x20              ;4934
000016  54c4              STRB     r4,[r0,r3]            ;4934
000018  bf00              NOP                            ;4934
00001a  2400              MOVS     r4,#0                 ;4936
00001c  2021              MOVS     r0,#0x21              ;4936
00001e  54c4              STRB     r4,[r0,r3]            ;4936
000020  2a00              CMP      r2,#0                 ;4938
000022  d11a              BNE      |L56.90|
000024  6818              LDR      r0,[r3,#0]            ;4941
000026  6b40              LDR      r0,[r0,#0x34]         ;4941
000028  4c45              LDR      r4,|L56.320|
00002a  4020              ANDS     r0,r0,r4              ;4941
00002c  681c              LDR      r4,[r3,#0]            ;4941
00002e  6360              STR      r0,[r4,#0x34]         ;4941
000030  680c              LDR      r4,[r1,#0]            ;4942
000032  6848              LDR      r0,[r1,#4]            ;4942
000034  4320              ORRS     r0,r0,r4              ;4942
000036  681c              LDR      r4,[r3,#0]            ;4942
000038  6b64              LDR      r4,[r4,#0x34]         ;4942
00003a  4320              ORRS     r0,r0,r4              ;4942
00003c  681c              LDR      r4,[r3,#0]            ;4942
00003e  6360              STR      r0,[r4,#0x34]         ;4942
000040  6818              LDR      r0,[r3,#0]            ;4944
000042  6940              LDR      r0,[r0,#0x14]         ;4944
000044  0840              LSRS     r0,r0,#1              ;4944
000046  0040              LSLS     r0,r0,#1              ;4944
000048  681c              LDR      r4,[r3,#0]            ;4944
00004a  6160              STR      r0,[r4,#0x14]         ;4944
00004c  6818              LDR      r0,[r3,#0]            ;4945
00004e  6940              LDR      r0,[r0,#0x14]         ;4945
000050  688c              LDR      r4,[r1,#8]            ;4945
000052  4320              ORRS     r0,r0,r4              ;4945
000054  681c              LDR      r4,[r3,#0]            ;4945
000056  6160              STR      r0,[r4,#0x14]         ;4945
000058  e068              B        |L56.300|
                  |L56.90|
00005a  2a01              CMP      r2,#1                 ;4947
00005c  d121              BNE      |L56.162|
00005e  6818              LDR      r0,[r3,#0]            ;4950
000060  6b40              LDR      r0,[r0,#0x34]         ;4950
000062  4c38              LDR      r4,|L56.324|
000064  4020              ANDS     r0,r0,r4              ;4950
000066  681c              LDR      r4,[r3,#0]            ;4950
000068  6360              STR      r0,[r4,#0x34]         ;4950
00006a  6818              LDR      r0,[r3,#0]            ;4951
00006c  6b40              LDR      r0,[r0,#0x34]         ;4951
00006e  684c              LDR      r4,[r1,#4]            ;4951
000070  0124              LSLS     r4,r4,#4              ;4951
000072  4320              ORRS     r0,r0,r4              ;4951
000074  681c              LDR      r4,[r3,#0]            ;4951
000076  6360              STR      r0,[r4,#0x34]         ;4951
000078  6818              LDR      r0,[r3,#0]            ;4952
00007a  6b40              LDR      r0,[r0,#0x34]         ;4952
00007c  680c              LDR      r4,[r1,#0]            ;4952
00007e  00a4              LSLS     r4,r4,#2              ;4952
000080  4320              ORRS     r0,r0,r4              ;4952
000082  681c              LDR      r4,[r3,#0]            ;4952
000084  6360              STR      r0,[r4,#0x34]         ;4952
000086  6818              LDR      r0,[r3,#0]            ;4954
000088  6940              LDR      r0,[r0,#0x14]         ;4954
00008a  2402              MOVS     r4,#2                 ;4954
00008c  43a0              BICS     r0,r0,r4              ;4954
00008e  681c              LDR      r4,[r3,#0]            ;4954
000090  6160              STR      r0,[r4,#0x14]         ;4954
000092  6818              LDR      r0,[r3,#0]            ;4955
000094  6940              LDR      r0,[r0,#0x14]         ;4955
000096  688c              LDR      r4,[r1,#8]            ;4955
000098  0064              LSLS     r4,r4,#1              ;4955
00009a  4320              ORRS     r0,r0,r4              ;4955
00009c  681c              LDR      r4,[r3,#0]            ;4955
00009e  6160              STR      r0,[r4,#0x14]         ;4955
0000a0  e044              B        |L56.300|
                  |L56.162|
0000a2  2a02              CMP      r2,#2                 ;4957
0000a4  d121              BNE      |L56.234|
0000a6  6818              LDR      r0,[r3,#0]            ;4960
0000a8  6b40              LDR      r0,[r0,#0x34]         ;4960
0000aa  4c27              LDR      r4,|L56.328|
0000ac  4020              ANDS     r0,r0,r4              ;4960
0000ae  681c              LDR      r4,[r3,#0]            ;4960
0000b0  6360              STR      r0,[r4,#0x34]         ;4960
0000b2  6818              LDR      r0,[r3,#0]            ;4961
0000b4  6b40              LDR      r0,[r0,#0x34]         ;4961
0000b6  684c              LDR      r4,[r1,#4]            ;4961
0000b8  0224              LSLS     r4,r4,#8              ;4961
0000ba  4320              ORRS     r0,r0,r4              ;4961
0000bc  681c              LDR      r4,[r3,#0]            ;4961
0000be  6360              STR      r0,[r4,#0x34]         ;4961
0000c0  6818              LDR      r0,[r3,#0]            ;4962
0000c2  6b40              LDR      r0,[r0,#0x34]         ;4962
0000c4  680c              LDR      r4,[r1,#0]            ;4962
0000c6  01a4              LSLS     r4,r4,#6              ;4962
0000c8  4320              ORRS     r0,r0,r4              ;4962
0000ca  681c              LDR      r4,[r3,#0]            ;4962
0000cc  6360              STR      r0,[r4,#0x34]         ;4962
0000ce  6818              LDR      r0,[r3,#0]            ;4964
0000d0  6940              LDR      r0,[r0,#0x14]         ;4964
0000d2  2404              MOVS     r4,#4                 ;4964
0000d4  43a0              BICS     r0,r0,r4              ;4964
0000d6  681c              LDR      r4,[r3,#0]            ;4964
0000d8  6160              STR      r0,[r4,#0x14]         ;4964
0000da  6818              LDR      r0,[r3,#0]            ;4965
0000dc  6940              LDR      r0,[r0,#0x14]         ;4965
0000de  688c              LDR      r4,[r1,#8]            ;4965
0000e0  00a4              LSLS     r4,r4,#2              ;4965
0000e2  4320              ORRS     r0,r0,r4              ;4965
0000e4  681c              LDR      r4,[r3,#0]            ;4965
0000e6  6160              STR      r0,[r4,#0x14]         ;4965
0000e8  e020              B        |L56.300|
                  |L56.234|
0000ea  6818              LDR      r0,[r3,#0]            ;4970
0000ec  6b40              LDR      r0,[r0,#0x34]         ;4970
0000ee  4c17              LDR      r4,|L56.332|
0000f0  4020              ANDS     r0,r0,r4              ;4970
0000f2  681c              LDR      r4,[r3,#0]            ;4970
0000f4  6360              STR      r0,[r4,#0x34]         ;4970
0000f6  6818              LDR      r0,[r3,#0]            ;4971
0000f8  6b40              LDR      r0,[r0,#0x34]         ;4971
0000fa  684c              LDR      r4,[r1,#4]            ;4971
0000fc  0324              LSLS     r4,r4,#12             ;4971
0000fe  4320              ORRS     r0,r0,r4              ;4971
000100  681c              LDR      r4,[r3,#0]            ;4971
000102  6360              STR      r0,[r4,#0x34]         ;4971
000104  6818              LDR      r0,[r3,#0]            ;4972
000106  6b40              LDR      r0,[r0,#0x34]         ;4972
000108  680c              LDR      r4,[r1,#0]            ;4972
00010a  01a4              LSLS     r4,r4,#6              ;4972
00010c  4320              ORRS     r0,r0,r4              ;4972
00010e  681c              LDR      r4,[r3,#0]            ;4972
000110  6360              STR      r0,[r4,#0x34]         ;4972
000112  6818              LDR      r0,[r3,#0]            ;4974
000114  6940              LDR      r0,[r0,#0x14]         ;4974
000116  2408              MOVS     r4,#8                 ;4974
000118  43a0              BICS     r0,r0,r4              ;4974
00011a  681c              LDR      r4,[r3,#0]            ;4974
00011c  6160              STR      r0,[r4,#0x14]         ;4974
00011e  6818              LDR      r0,[r3,#0]            ;4975
000120  6940              LDR      r0,[r0,#0x14]         ;4975
000122  688c              LDR      r4,[r1,#8]            ;4975
000124  00e4              LSLS     r4,r4,#3              ;4975
000126  4320              ORRS     r0,r0,r4              ;4975
000128  681c              LDR      r4,[r3,#0]            ;4975
00012a  6160              STR      r0,[r4,#0x14]         ;4975
                  |L56.300|
00012c  2401              MOVS     r4,#1                 ;4978
00012e  2021              MOVS     r0,#0x21              ;4978
000130  54c4              STRB     r4,[r0,r3]            ;4978
000132  bf00              NOP                            ;4981
000134  2400              MOVS     r4,#0                 ;4981
000136  2020              MOVS     r0,#0x20              ;4981
000138  54c4              STRB     r4,[r0,r3]            ;4981
00013a  bf00              NOP                            ;4981
00013c  2000              MOVS     r0,#0                 ;4983
00013e  e767              B        |L56.16|
;;;4985   
                          ENDP

                  |L56.320|
                          DCD      0xfffcfffc
                  |L56.324|
                          DCD      0xfff3ffcf
                  |L56.328|
                          DCD      0xffcffcff
                  |L56.332|
                          DCD      0xff3fcfff

                          AREA ||i.MID_TM_IC_DeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_IC_DeInit PROC
;;;3699    */
;;;3700   MID_StatusTypeDef MID_TM_IC_DeInit(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;3701   {
000002  4604              MOV      r4,r0
;;;3702       mTM->State = MID_TM_STATE_BUSY;
000004  2100              MOVS     r1,#0
000006  2021              MOVS     r0,#0x21
000008  5501              STRB     r1,[r0,r4]
;;;3703   
;;;3704       /* Disable the TM Peripheral Clock */
;;;3705       __DRV_TM_DISABLE(mTM);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  8e00              LDRH     r0,[r0,#0x30]
000010  2800              CMP      r0,#0
000012  d105              BNE      |L57.32|
000014  6820              LDR      r0,[r4,#0]
000016  6900              LDR      r0,[r0,#0x10]
000018  0880              LSRS     r0,r0,#2
00001a  0080              LSLS     r0,r0,#2
00001c  6821              LDR      r1,[r4,#0]
00001e  6108              STR      r0,[r1,#0x10]
                  |L57.32|
000020  bf00              NOP      
;;;3706   
;;;3707       /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;3708       MID_TM_IC_MspDeInit(mTM);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       MID_TM_IC_MspDeInit
;;;3709   
;;;3710       /* Change TM state */
;;;3711       mTM->State = MID_TM_STATE_RESET;
000028  2102              MOVS     r1,#2
00002a  2021              MOVS     r0,#0x21
00002c  5501              STRB     r1,[r0,r4]
;;;3712   
;;;3713       /* Release Lock */
;;;3714       __MID_UNLOCK(mTM);
00002e  bf00              NOP      
000030  2100              MOVS     r1,#0
000032  2020              MOVS     r0,#0x20
000034  5501              STRB     r1,[r0,r4]
000036  bf00              NOP      
;;;3715   
;;;3716       return MID_SUCCESS;
000038  2000              MOVS     r0,#0
;;;3717   }
00003a  bd10              POP      {r4,pc}
;;;3718   
                          ENDP


                          AREA ||i.MID_TM_IC_GetState||, CODE, READONLY, ALIGN=1

                  MID_TM_IC_GetState PROC
;;;5785    */
;;;5786   MID_TM_StateTypeDef MID_TM_IC_GetState(TM_HandleTypeDef* mTM)
000000  4601              MOV      r1,r0
;;;5787   {
;;;5788       return mTM->State;
000002  2021              MOVS     r0,#0x21
000004  5c40              LDRB     r0,[r0,r1]
;;;5789   }
000006  4770              BX       lr
;;;5790   
                          ENDP


                          AREA ||i.MID_TM_IC_Init||, CODE, READONLY, ALIGN=1

                  MID_TM_IC_Init PROC
;;;3659    */
;;;3660   MID_StatusTypeDef MID_TM_IC_Init(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;3661   {
000002  4604              MOV      r4,r0
;;;3662       /* Check the TM handle allocation */
;;;3663       if(mTM == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L59.12|
;;;3664           return MID_FAILURE;
000008  2001              MOVS     r0,#1
                  |L59.10|
;;;3665   
;;;3666       if(mTM->State == MID_TM_STATE_RESET)
;;;3667       {
;;;3668           /* Allocate lock resource and initialize it */
;;;3669           mTM->Lock = MID_UnLocked;
;;;3670   
;;;3671           /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;3672           MID_TM_IC_MspInit(mTM);
;;;3673       }
;;;3674   
;;;3675       /* Set the TM state */
;;;3676       mTM->State= MID_TM_STATE_BUSY;
;;;3677   
;;;3678       /* Init the base time for the input capture */
;;;3679       TM_Base_SetConfig(mTM->Instance, &mTM->Init);
;;;3680   
;;;3681       /* Initialize the TM state*/
;;;3682       mTM->State= MID_TM_STATE_READY;
;;;3683   
;;;3684       return MID_SUCCESS;
;;;3685   }
00000a  bd10              POP      {r4,pc}
                  |L59.12|
00000c  2021              MOVS     r0,#0x21              ;3666
00000e  5d00              LDRB     r0,[r0,r4]            ;3666
000010  2802              CMP      r0,#2                 ;3666
000012  d105              BNE      |L59.32|
000014  2100              MOVS     r1,#0                 ;3669
000016  2020              MOVS     r0,#0x20              ;3669
000018  5501              STRB     r1,[r0,r4]            ;3669
00001a  4620              MOV      r0,r4                 ;3672
00001c  f7fffffe          BL       MID_TM_IC_MspInit
                  |L59.32|
000020  2100              MOVS     r1,#0                 ;3676
000022  2021              MOVS     r0,#0x21              ;3676
000024  5501              STRB     r1,[r0,r4]            ;3676
000026  1d21              ADDS     r1,r4,#4              ;3679
000028  6820              LDR      r0,[r4,#0]            ;3679
00002a  f7fffffe          BL       TM_Base_SetConfig
00002e  2101              MOVS     r1,#1                 ;3682
000030  2021              MOVS     r0,#0x21              ;3682
000032  5501              STRB     r1,[r0,r4]            ;3682
000034  2000              MOVS     r0,#0                 ;3684
000036  e7e8              B        |L59.10|
;;;3686   
                          ENDP


                          AREA ||i.MID_TM_IC_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_IC_MspDeInit PROC
;;;3743    */
;;;3744   __weak void MID_TM_IC_MspDeInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;3745   {
;;;3746       /* Prevent unused argument(s) compilation warning */
;;;3747       UNUSED(mTM);
;;;3748       /* NOTE : This function Should not be modified, when the callback is needed,
;;;3749                 the MID_TM_IC_MspDeInit could be implemented in the user file
;;;3750        */
;;;3751   }
;;;3752   
                          ENDP


                          AREA ||i.MID_TM_IC_MspInit||, CODE, READONLY, ALIGN=1

                  MID_TM_IC_MspInit PROC
;;;3726    */
;;;3727   __weak void MID_TM_IC_MspInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;3728   {
;;;3729       /* Prevent unused argument(s) compilation warning */
;;;3730       UNUSED(mTM);
;;;3731       /* NOTE : This function Should not be modified, when the callback is needed,
;;;3732                 the MID_TM_IC_MspInit could be implemented in the user file
;;;3733        */
;;;3734   }
;;;3735   
                          ENDP


                          AREA ||i.MID_TM_IC_Start||, CODE, READONLY, ALIGN=1

                  MID_TM_IC_Start PROC
;;;3775    */
;;;3776   MID_StatusTypeDef MID_TM_IC_Start(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;3777   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3778       /* Enable the Input Capture channel */
;;;3779       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_InputCapture);
000006  2201              MOVS     r2,#1
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;3780   
;;;3781       /* Enable the Peripheral */
;;;3782       __DRV_TM_ENABLE(mTM);
000010  6820              LDR      r0,[r4,#0]
000012  6900              LDR      r0,[r0,#0x10]
000014  2103              MOVS     r1,#3
000016  4308              ORRS     r0,r0,r1
000018  6821              LDR      r1,[r4,#0]
00001a  6108              STR      r0,[r1,#0x10]
;;;3783   
;;;3784       /* Return function status */
;;;3785       return MID_SUCCESS;
00001c  2000              MOVS     r0,#0
;;;3786   }
00001e  bd30              POP      {r4,r5,pc}
;;;3787   
                          ENDP


                          AREA ||i.MID_TM_IC_Start_DMA||, CODE, READONLY, ALIGN=2

                  MID_TM_IC_Start_DMA PROC
;;;3982    */
;;;3983   MID_StatusTypeDef MID_TM_IC_Start_DMA(TM_HandleTypeDef* mTM, uint32_t Channel, uint32_t* pData, uint16_t Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3984   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;3985       if((mTM->State) == (MID_TM_STATE_BUSY))
00000a  2021              MOVS     r0,#0x21
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2800              CMP      r0,#0
000010  d101              BNE      |L63.22|
;;;3986           return MID_BUSY;
000012  2002              MOVS     r0,#2
                  |L63.20|
;;;3987       else if((mTM->State) == (MID_TM_STATE_READY))
;;;3988       {
;;;3989           if((pData == 0U) && (Length > 0U))
;;;3990               return MID_FAILURE;
;;;3991           else
;;;3992               mTM->State = MID_TM_STATE_BUSY;
;;;3993       }
;;;3994   
;;;3995       switch(Channel)
;;;3996       {
;;;3997       case MID_TM_Channel3:
;;;3998       {
;;;3999           /* Set the DMA Period elapsed callback */
;;;4000           mTM->hDMA[TM_DMA_ID_CC3]->XferCpltCallback = TM_DMACaptureCplt;
;;;4001   
;;;4002           /* Set the DMA error callback */
;;;4003           mTM->hDMA[TM_DMA_ID_CC3]->XferErrorCallback = TM_DMAError ;
;;;4004   
;;;4005           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC3], NULL, (uint32_t) pData, Length);
;;;4006   
;;;4007           /* Enable the TM Capture/Compare 3  DMA request */
;;;4008           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH3_IC);
;;;4009       }
;;;4010       break;
;;;4011   
;;;4012       default:
;;;4013           /* Change TM state */
;;;4014           mTM->State = MID_TM_STATE_READY;
;;;4015           return MID_FAILURE;
;;;4016       }
;;;4017   
;;;4018       /* Enable the Input Capture channel */
;;;4019       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_InputCapture);
;;;4020   
;;;4021       /* Enable the Peripheral */
;;;4022       __DRV_TM_ENABLE(mTM);
;;;4023   
;;;4024       /* Change TM state */
;;;4025       mTM->State = MID_TM_STATE_READY;
;;;4026   
;;;4027       /* Return function status */
;;;4028       return MID_SUCCESS;
;;;4029   }
000014  bdf8              POP      {r3-r7,pc}
                  |L63.22|
000016  2021              MOVS     r0,#0x21              ;3987
000018  5d00              LDRB     r0,[r0,r4]            ;3987
00001a  2801              CMP      r0,#1                 ;3987
00001c  d107              BNE      |L63.46|
00001e  2e00              CMP      r6,#0                 ;3989
000020  d102              BNE      |L63.40|
000022  2f00              CMP      r7,#0                 ;3989
000024  d000              BEQ      |L63.40|
000026  e7f5              B        |L63.20|
                  |L63.40|
000028  2100              MOVS     r1,#0                 ;3992
00002a  2021              MOVS     r0,#0x21              ;3992
00002c  5501              STRB     r1,[r0,r4]            ;3992
                  |L63.46|
00002e  2d03              CMP      r5,#3                 ;3995
000030  d113              BNE      |L63.90|
000032  4915              LDR      r1,|L63.136|
000034  69e0              LDR      r0,[r4,#0x1c]         ;4000
000036  62c1              STR      r1,[r0,#0x2c]         ;4000
000038  4914              LDR      r1,|L63.140|
00003a  69e0              LDR      r0,[r4,#0x1c]         ;4003
00003c  6341              STR      r1,[r0,#0x34]         ;4003
00003e  463b              MOV      r3,r7                 ;4005
000040  4632              MOV      r2,r6                 ;4005
000042  2100              MOVS     r1,#0                 ;4005
000044  69e0              LDR      r0,[r4,#0x1c]         ;4005
000046  f7fffffe          BL       MID_DMA_Start_IT
00004a  6820              LDR      r0,[r4,#0]            ;4008
00004c  6b00              LDR      r0,[r0,#0x30]         ;4008
00004e  2101              MOVS     r1,#1                 ;4008
000050  06c9              LSLS     r1,r1,#27             ;4008
000052  4308              ORRS     r0,r0,r1              ;4008
000054  6821              LDR      r1,[r4,#0]            ;4008
000056  6308              STR      r0,[r1,#0x30]         ;4008
000058  e004              B        |L63.100|
                  |L63.90|
00005a  2101              MOVS     r1,#1                 ;4014
00005c  2021              MOVS     r0,#0x21              ;4014
00005e  5501              STRB     r1,[r0,r4]            ;4014
000060  2001              MOVS     r0,#1                 ;4015
000062  e7d7              B        |L63.20|
                  |L63.100|
000064  bf00              NOP                            ;4010
000066  2201              MOVS     r2,#1                 ;4019
000068  4629              MOV      r1,r5                 ;4019
00006a  6820              LDR      r0,[r4,#0]            ;4019
00006c  f7fffffe          BL       TM_CCxChannelCmd
000070  6820              LDR      r0,[r4,#0]            ;4022
000072  6900              LDR      r0,[r0,#0x10]         ;4022
000074  2103              MOVS     r1,#3                 ;4022
000076  4308              ORRS     r0,r0,r1              ;4022
000078  6821              LDR      r1,[r4,#0]            ;4022
00007a  6108              STR      r0,[r1,#0x10]         ;4022
00007c  2101              MOVS     r1,#1                 ;4025
00007e  2021              MOVS     r0,#0x21              ;4025
000080  5501              STRB     r1,[r0,r4]            ;4025
000082  2000              MOVS     r0,#0                 ;4028
000084  e7c6              B        |L63.20|
;;;4030   
                          ENDP

000086  0000              DCW      0x0000
                  |L63.136|
                          DCD      TM_DMACaptureCplt
                  |L63.140|
                          DCD      TM_DMAError

                          AREA ||i.MID_TM_IC_Start_IT||, CODE, READONLY, ALIGN=1

                  MID_TM_IC_Start_IT PROC
;;;3846    */
;;;3847   MID_StatusTypeDef MID_TM_IC_Start_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;3848   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3849       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L64.24|
00000a  2d01              CMP      r5,#1
00000c  d012              BEQ      |L64.52|
00000e  2d02              CMP      r5,#2
000010  d01e              BEQ      |L64.80|
000012  2d03              CMP      r5,#3
000014  d138              BNE      |L64.136|
000016  e029              B        |L64.108|
                  |L64.24|
;;;3850       {
;;;3851       case MID_TM_Channel0:
;;;3852       {
;;;3853           /* Enable the TM Capture/Compare 0 interrupt */
;;;3854           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4308              ORRS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;3855           __DRV_TM_ENABLE_ITEA(mTM);
000026  6820              LDR      r0,[r4,#0]
000028  6840              LDR      r0,[r0,#4]
00002a  2101              MOVS     r1,#1
00002c  4308              ORRS     r0,r0,r1
00002e  6821              LDR      r1,[r4,#0]
000030  6048              STR      r0,[r1,#4]
;;;3856       }
;;;3857       break;
000032  e02a              B        |L64.138|
                  |L64.52|
;;;3858   
;;;3859       case MID_TM_Channel1:
;;;3860       {
;;;3861           /* Enable the TM Capture/Compare 1 interrupt */
;;;3862           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC1);
000034  6820              LDR      r0,[r4,#0]
000036  6840              LDR      r0,[r0,#4]
000038  2101              MOVS     r1,#1
00003a  0249              LSLS     r1,r1,#9
00003c  4308              ORRS     r0,r0,r1
00003e  6821              LDR      r1,[r4,#0]
000040  6048              STR      r0,[r1,#4]
;;;3863           __DRV_TM_ENABLE_ITEA(mTM);
000042  6820              LDR      r0,[r4,#0]
000044  6840              LDR      r0,[r0,#4]
000046  2101              MOVS     r1,#1
000048  4308              ORRS     r0,r0,r1
00004a  6821              LDR      r1,[r4,#0]
00004c  6048              STR      r0,[r1,#4]
;;;3864       }
;;;3865       break;
00004e  e01c              B        |L64.138|
                  |L64.80|
;;;3866   
;;;3867       case MID_TM_Channel2:
;;;3868       {
;;;3869           /* Enable the TM Capture/Compare 2 interrupt */
;;;3870           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC2);
000050  6820              LDR      r0,[r4,#0]
000052  6840              LDR      r0,[r0,#4]
000054  2101              MOVS     r1,#1
000056  0289              LSLS     r1,r1,#10
000058  4308              ORRS     r0,r0,r1
00005a  6821              LDR      r1,[r4,#0]
00005c  6048              STR      r0,[r1,#4]
;;;3871           __DRV_TM_ENABLE_ITEA(mTM);
00005e  6820              LDR      r0,[r4,#0]
000060  6840              LDR      r0,[r0,#4]
000062  2101              MOVS     r1,#1
000064  4308              ORRS     r0,r0,r1
000066  6821              LDR      r1,[r4,#0]
000068  6048              STR      r0,[r1,#4]
;;;3872       }
;;;3873       break;
00006a  e00e              B        |L64.138|
                  |L64.108|
;;;3874   
;;;3875       case MID_TM_Channel3:
;;;3876       {
;;;3877           /* Enable the TM Capture/Compare 3 interrupt */
;;;3878           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC3);
00006c  6820              LDR      r0,[r4,#0]
00006e  6840              LDR      r0,[r0,#4]
000070  2101              MOVS     r1,#1
000072  02c9              LSLS     r1,r1,#11
000074  4308              ORRS     r0,r0,r1
000076  6821              LDR      r1,[r4,#0]
000078  6048              STR      r0,[r1,#4]
;;;3879           __DRV_TM_ENABLE_ITEA(mTM);
00007a  6820              LDR      r0,[r4,#0]
00007c  6840              LDR      r0,[r0,#4]
00007e  2101              MOVS     r1,#1
000080  4308              ORRS     r0,r0,r1
000082  6821              LDR      r1,[r4,#0]
000084  6048              STR      r0,[r1,#4]
;;;3880       }
;;;3881       break;
000086  e000              B        |L64.138|
                  |L64.136|
;;;3882   
;;;3883       default:
;;;3884           break;
000088  bf00              NOP      
                  |L64.138|
00008a  bf00              NOP                            ;3857
;;;3885       }
;;;3886       /* Enable the Input Capture channel */
;;;3887       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_InputCapture);
00008c  2201              MOVS     r2,#1
00008e  4629              MOV      r1,r5
000090  6820              LDR      r0,[r4,#0]
000092  f7fffffe          BL       TM_CCxChannelCmd
;;;3888   
;;;3889       /* Enable the Peripheral */
;;;3890       __DRV_TM_ENABLE(mTM);
000096  6820              LDR      r0,[r4,#0]
000098  6900              LDR      r0,[r0,#0x10]
00009a  2103              MOVS     r1,#3
00009c  4308              ORRS     r0,r0,r1
00009e  6821              LDR      r1,[r4,#0]
0000a0  6108              STR      r0,[r1,#0x10]
;;;3891       __DRV_TM_ENABLE_ITEA(mTM);
0000a2  6820              LDR      r0,[r4,#0]
0000a4  6840              LDR      r0,[r0,#4]
0000a6  2101              MOVS     r1,#1
0000a8  4308              ORRS     r0,r0,r1
0000aa  6821              LDR      r1,[r4,#0]
0000ac  6048              STR      r0,[r1,#4]
;;;3892   
;;;3893       /* Return function status */
;;;3894       return MID_SUCCESS;
0000ae  2000              MOVS     r0,#0
;;;3895   }
0000b0  bd30              POP      {r4,r5,pc}
;;;3896   
                          ENDP


                          AREA ||i.MID_TM_IC_Stop||, CODE, READONLY, ALIGN=1

                  MID_TM_IC_Stop PROC
;;;3805    */
;;;3806   MID_StatusTypeDef MID_TM_IC_Stop(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;3807   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3808       /* Disable the Input Capture channel */
;;;3809       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;3810   
;;;3811       /* Disable the Peripheral */
;;;3812       __DRV_TM_DISABLE(mTM);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  8e00              LDRH     r0,[r0,#0x30]
000016  2800              CMP      r0,#0
000018  d105              BNE      |L65.38|
00001a  6820              LDR      r0,[r4,#0]
00001c  6900              LDR      r0,[r0,#0x10]
00001e  0880              LSRS     r0,r0,#2
000020  0080              LSLS     r0,r0,#2
000022  6821              LDR      r1,[r4,#0]
000024  6108              STR      r0,[r1,#0x10]
                  |L65.38|
000026  bf00              NOP      
;;;3813   
;;;3814       /* Return function status */
;;;3815       return MID_SUCCESS;
000028  2000              MOVS     r0,#0
;;;3816   }
00002a  bd30              POP      {r4,r5,pc}
;;;3817   
                          ENDP


                          AREA ||i.MID_TM_IC_Stop_DMA||, CODE, READONLY, ALIGN=1

                  MID_TM_IC_Stop_DMA PROC
;;;4045    */
;;;4046   MID_StatusTypeDef MID_TM_IC_Stop_DMA(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;4047   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;4048       switch(Channel)
000006  2d03              CMP      r5,#3
000008  d107              BNE      |L66.26|
;;;4049       {
;;;4050       case MID_TM_Channel3:
;;;4051       {
;;;4052           /* Disable the TM Capture/Compare 3  DMA request */
;;;4053           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH3_IC);
00000a  6820              LDR      r0,[r4,#0]
00000c  6b00              LDR      r0,[r0,#0x30]
00000e  2101              MOVS     r1,#1
000010  06c9              LSLS     r1,r1,#27
000012  4388              BICS     r0,r0,r1
000014  6821              LDR      r1,[r4,#0]
000016  6308              STR      r0,[r1,#0x30]
;;;4054       }
;;;4055       break;
000018  e004              B        |L66.36|
                  |L66.26|
;;;4056   
;;;4057       default:
;;;4058           /* Change TM state */
;;;4059           mTM->State = MID_TM_STATE_READY;
00001a  2101              MOVS     r1,#1
00001c  2021              MOVS     r0,#0x21
00001e  5501              STRB     r1,[r0,r4]
;;;4060           return MID_FAILURE;
000020  2001              MOVS     r0,#1
                  |L66.34|
;;;4061       }
;;;4062   
;;;4063       /* Disable the Input Capture channel */
;;;4064       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
;;;4065   
;;;4066       /* Disable the Peripheral */
;;;4067       __DRV_TM_DISABLE(mTM);
;;;4068   
;;;4069       /* Change the mTM state */
;;;4070       mTM->State = MID_TM_STATE_READY;
;;;4071   
;;;4072       /* Return function status */
;;;4073       return MID_SUCCESS;
;;;4074   }
000022  bd30              POP      {r4,r5,pc}
                  |L66.36|
000024  bf00              NOP                            ;4055
000026  2200              MOVS     r2,#0                 ;4064
000028  4629              MOV      r1,r5                 ;4064
00002a  6820              LDR      r0,[r4,#0]            ;4064
00002c  f7fffffe          BL       TM_CCxChannelCmd
000030  bf00              NOP                            ;4067
000032  6820              LDR      r0,[r4,#0]            ;4067
000034  8e00              LDRH     r0,[r0,#0x30]         ;4067
000036  2800              CMP      r0,#0                 ;4067
000038  d105              BNE      |L66.70|
00003a  6820              LDR      r0,[r4,#0]            ;4067
00003c  6900              LDR      r0,[r0,#0x10]         ;4067
00003e  0880              LSRS     r0,r0,#2              ;4067
000040  0080              LSLS     r0,r0,#2              ;4067
000042  6821              LDR      r1,[r4,#0]            ;4067
000044  6108              STR      r0,[r1,#0x10]         ;4067
                  |L66.70|
000046  bf00              NOP                            ;4067
000048  2101              MOVS     r1,#1                 ;4070
00004a  2021              MOVS     r0,#0x21              ;4070
00004c  5501              STRB     r1,[r0,r4]            ;4070
00004e  2000              MOVS     r0,#0                 ;4073
000050  e7e7              B        |L66.34|
;;;4075   
                          ENDP


                          AREA ||i.MID_TM_IC_Stop_IT||, CODE, READONLY, ALIGN=1

                  MID_TM_IC_Stop_IT PROC
;;;3914    */
;;;3915   MID_StatusTypeDef MID_TM_IC_Stop_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;3916   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3917       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L67.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L67.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L67.56|
000012  2d03              CMP      r5,#3
000014  d120              BNE      |L67.88|
000016  e017              B        |L67.72|
                  |L67.24|
;;;3918       {
;;;3919       case MID_TM_Channel0:
;;;3920       {
;;;3921           /* Disable the TM Capture/Compare 0 interrupt */
;;;3922           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;3923       }
;;;3924       break;
000026  e018              B        |L67.90|
                  |L67.40|
;;;3925   
;;;3926       case MID_TM_Channel1:
;;;3927       {
;;;3928           /* Disable the TM Capture/Compare 1 interrupt */
;;;3929           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC1);
000028  6820              LDR      r0,[r4,#0]
00002a  6840              LDR      r0,[r0,#4]
00002c  2101              MOVS     r1,#1
00002e  0249              LSLS     r1,r1,#9
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6048              STR      r0,[r1,#4]
;;;3930       }
;;;3931       break;
000036  e010              B        |L67.90|
                  |L67.56|
;;;3932   
;;;3933       case MID_TM_Channel2:
;;;3934       {
;;;3935           /* Disable the TM Capture/Compare 2 interrupt */
;;;3936           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC2);
000038  6820              LDR      r0,[r4,#0]
00003a  6840              LDR      r0,[r0,#4]
00003c  2101              MOVS     r1,#1
00003e  0289              LSLS     r1,r1,#10
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6048              STR      r0,[r1,#4]
;;;3937       }
;;;3938       break;
000046  e008              B        |L67.90|
                  |L67.72|
;;;3939   
;;;3940       case MID_TM_Channel3:
;;;3941       {
;;;3942           /* Disable the TM Capture/Compare 3 interrupt */
;;;3943           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC3);
000048  6820              LDR      r0,[r4,#0]
00004a  6840              LDR      r0,[r0,#4]
00004c  2101              MOVS     r1,#1
00004e  02c9              LSLS     r1,r1,#11
000050  4388              BICS     r0,r0,r1
000052  6821              LDR      r1,[r4,#0]
000054  6048              STR      r0,[r1,#4]
;;;3944       }
;;;3945       break;
000056  e000              B        |L67.90|
                  |L67.88|
;;;3946   
;;;3947       default:
;;;3948           break;
000058  bf00              NOP      
                  |L67.90|
00005a  bf00              NOP                            ;3924
;;;3949       }
;;;3950   
;;;3951       /* Disable the Input Capture channel */
;;;3952       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
00005c  2200              MOVS     r2,#0
00005e  4629              MOV      r1,r5
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       TM_CCxChannelCmd
;;;3953   
;;;3954       /* Disable the Peripheral */
;;;3955       __DRV_TM_DISABLE(mTM);
000066  bf00              NOP      
000068  6820              LDR      r0,[r4,#0]
00006a  8e00              LDRH     r0,[r0,#0x30]
00006c  2800              CMP      r0,#0
00006e  d105              BNE      |L67.124|
000070  6820              LDR      r0,[r4,#0]
000072  6900              LDR      r0,[r0,#0x10]
000074  0880              LSRS     r0,r0,#2
000076  0080              LSLS     r0,r0,#2
000078  6821              LDR      r1,[r4,#0]
00007a  6108              STR      r0,[r1,#0x10]
                  |L67.124|
00007c  bf00              NOP      
;;;3956   
;;;3957       /* check IT for ITEA */
;;;3958       if((mTM->Instance->INT.W & 0xFFFFFFFE) == 0)
00007e  6820              LDR      r0,[r4,#0]
000080  6840              LDR      r0,[r0,#4]
000082  0840              LSRS     r0,r0,#1
000084  0040              LSLS     r0,r0,#1
000086  2800              CMP      r0,#0
000088  d10b              BNE      |L67.162|
;;;3959           __DRV_TM_DISABLE_ITEA(mTM);
00008a  bf00              NOP      
00008c  6820              LDR      r0,[r4,#0]
00008e  6840              LDR      r0,[r0,#4]
000090  2800              CMP      r0,#0
000092  d005              BEQ      |L67.160|
000094  6820              LDR      r0,[r4,#0]
000096  6840              LDR      r0,[r0,#4]
000098  0840              LSRS     r0,r0,#1
00009a  0040              LSLS     r0,r0,#1
00009c  6821              LDR      r1,[r4,#0]
00009e  6048              STR      r0,[r1,#4]
                  |L67.160|
0000a0  bf00              NOP      
                  |L67.162|
;;;3960   
;;;3961   
;;;3962       /* Return function status */
;;;3963       return MID_SUCCESS;
0000a2  2000              MOVS     r0,#0
;;;3964   }
0000a4  bd30              POP      {r4,r5,pc}
;;;3965   
                          ENDP


                          AREA ||i.MID_TM_IRQHandler||, CODE, READONLY, ALIGN=1

                  MID_TM_IRQHandler PROC
;;;4661    */
;;;4662   void MID_TM_IRQHandler(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;4663   {
000002  4604              MOV      r4,r0
;;;4664       /* Capture compare 0 event */
;;;4665       if(__DRV_TM_GET_EVENT(mTM, TM_EVENT_CH0))
000004  6820              LDR      r0,[r4,#0]
000006  6800              LDR      r0,[r0,#0]
000008  2111              MOVS     r1,#0x11
00000a  0209              LSLS     r1,r1,#8
00000c  4008              ANDS     r0,r0,r1
00000e  2800              CMP      r0,#0
000010  d023              BEQ      |L68.90|
;;;4666       {
;;;4667           if(__DRV_TM_GET_IT_SOURCE(mTM, TM_IT_CC0))
000012  6820              LDR      r0,[r4,#0]
000014  6840              LDR      r0,[r0,#4]
000016  21ff              MOVS     r1,#0xff
000018  3101              ADDS     r1,#1
00001a  4008              ANDS     r0,r0,r1
00001c  4288              CMP      r0,r1
00001e  d11c              BNE      |L68.90|
;;;4668           {
;;;4669               {
;;;4670                   mTM->Channel = MID_TM_Channel0;
000020  2000              MOVS     r0,#0
000022  7320              STRB     r0,[r4,#0xc]
;;;4671   
;;;4672                   /* Input capture event */
;;;4673                   if(mTM->Instance->CCMDS.MBIT.CC0_MDS == TM_CH_InputCapture)
000024  6820              LDR      r0,[r4,#0]
000026  3020              ADDS     r0,r0,#0x20
000028  7c00              LDRB     r0,[r0,#0x10]
00002a  0740              LSLS     r0,r0,#29
00002c  0f40              LSRS     r0,r0,#29
00002e  2801              CMP      r0,#1
000030  d107              BNE      |L68.66|
;;;4674                   {
;;;4675                       MID_TM_IC_CaptureCallback(mTM);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       MID_TM_IC_CaptureCallback
;;;4676                       __DRV_TM_CLEAR_FLAG(mTM, (TM_FLAG_CC0A | TM_FLAG_CC0B));
000038  2011              MOVS     r0,#0x11
00003a  0200              LSLS     r0,r0,#8
00003c  6821              LDR      r1,[r4,#0]
00003e  6008              STR      r0,[r1,#0]
000040  e009              B        |L68.86|
                  |L68.66|
;;;4677                   }
;;;4678                   /* Output compare event */
;;;4679                   else
;;;4680                   {
;;;4681                       __DRV_TM_CLEAR_FLAG(mTM, (TM_FLAG_CC0A | TM_FLAG_CC0B));
000042  2011              MOVS     r0,#0x11
000044  0200              LSLS     r0,r0,#8
000046  6821              LDR      r1,[r4,#0]
000048  6008              STR      r0,[r1,#0]
;;;4682                       MID_TM_OC_DelayElapsedCallback(mTM);
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       MID_TM_OC_DelayElapsedCallback
;;;4683                       MID_TM_PWM_PulseFinishedCallback(mTM);
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       MID_TM_PWM_PulseFinishedCallback
                  |L68.86|
;;;4684                   }
;;;4685                   mTM->Channel = MID_TM_ACTIVE_CHANNEL_CLEARED;
000056  2005              MOVS     r0,#5
000058  7320              STRB     r0,[r4,#0xc]
                  |L68.90|
;;;4686               }
;;;4687           }
;;;4688       }
;;;4689       /* Capture compare 1 event */
;;;4690       if(__DRV_TM_GET_EVENT(mTM, TM_EVENT_CH1))
00005a  6820              LDR      r0,[r4,#0]
00005c  6800              LDR      r0,[r0,#0]
00005e  2111              MOVS     r1,#0x11
000060  0249              LSLS     r1,r1,#9
000062  4008              ANDS     r0,r0,r1
000064  2800              CMP      r0,#0
000066  d023              BEQ      |L68.176|
;;;4691       {
;;;4692           if(__DRV_TM_GET_IT_SOURCE(mTM, TM_IT_CC1))
000068  6820              LDR      r0,[r4,#0]
00006a  6840              LDR      r0,[r0,#4]
00006c  2101              MOVS     r1,#1
00006e  0249              LSLS     r1,r1,#9
000070  4008              ANDS     r0,r0,r1
000072  4288              CMP      r0,r1
000074  d11c              BNE      |L68.176|
;;;4693           {
;;;4694               mTM->Channel = MID_TM_Channel1;
000076  2001              MOVS     r0,#1
000078  7320              STRB     r0,[r4,#0xc]
;;;4695               /* Input capture event */
;;;4696               if(mTM->Instance->CCMDS.MBIT.CC1_MDS == TM_CH_InputCapture)
00007a  6820              LDR      r0,[r4,#0]
00007c  3020              ADDS     r0,r0,#0x20
00007e  7c00              LDRB     r0,[r0,#0x10]
000080  0640              LSLS     r0,r0,#25
000082  0f40              LSRS     r0,r0,#29
000084  2801              CMP      r0,#1
000086  d107              BNE      |L68.152|
;;;4697               {
;;;4698                   MID_TM_IC_CaptureCallback(mTM);
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       MID_TM_IC_CaptureCallback
;;;4699                   __DRV_TM_CLEAR_FLAG(mTM, (TM_FLAG_CC1A | TM_FLAG_CC1B));
00008e  2011              MOVS     r0,#0x11
000090  0240              LSLS     r0,r0,#9
000092  6821              LDR      r1,[r4,#0]
000094  6008              STR      r0,[r1,#0]
000096  e009              B        |L68.172|
                  |L68.152|
;;;4700               }
;;;4701               /* Output compare event */
;;;4702               else
;;;4703               {
;;;4704                   __DRV_TM_CLEAR_FLAG(mTM, (TM_FLAG_CC1A | TM_FLAG_CC1B));
000098  2011              MOVS     r0,#0x11
00009a  0240              LSLS     r0,r0,#9
00009c  6821              LDR      r1,[r4,#0]
00009e  6008              STR      r0,[r1,#0]
;;;4705                   MID_TM_OC_DelayElapsedCallback(mTM);
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       MID_TM_OC_DelayElapsedCallback
;;;4706                   MID_TM_PWM_PulseFinishedCallback(mTM);
0000a6  4620              MOV      r0,r4
0000a8  f7fffffe          BL       MID_TM_PWM_PulseFinishedCallback
                  |L68.172|
;;;4707               }
;;;4708               mTM->Channel = MID_TM_ACTIVE_CHANNEL_CLEARED;
0000ac  2005              MOVS     r0,#5
0000ae  7320              STRB     r0,[r4,#0xc]
                  |L68.176|
;;;4709           }
;;;4710       }
;;;4711       /* Capture compare 2 event */
;;;4712       if(__DRV_TM_GET_EVENT(mTM, TM_EVENT_CH2))
0000b0  6820              LDR      r0,[r4,#0]
0000b2  6800              LDR      r0,[r0,#0]
0000b4  2111              MOVS     r1,#0x11
0000b6  0289              LSLS     r1,r1,#10
0000b8  4008              ANDS     r0,r0,r1
0000ba  2800              CMP      r0,#0
0000bc  d023              BEQ      |L68.262|
;;;4713       {
;;;4714           if(__DRV_TM_GET_IT_SOURCE(mTM, TM_IT_CC2))
0000be  6820              LDR      r0,[r4,#0]
0000c0  6840              LDR      r0,[r0,#4]
0000c2  2101              MOVS     r1,#1
0000c4  0289              LSLS     r1,r1,#10
0000c6  4008              ANDS     r0,r0,r1
0000c8  4288              CMP      r0,r1
0000ca  d11c              BNE      |L68.262|
;;;4715           {
;;;4716               mTM->Channel = MID_TM_Channel2;
0000cc  2002              MOVS     r0,#2
0000ce  7320              STRB     r0,[r4,#0xc]
;;;4717               /* Input capture event */
;;;4718               if(mTM->Instance->CCMDS.MBIT.CC2_MDS == TM_CH_InputCapture)
0000d0  6820              LDR      r0,[r4,#0]
0000d2  3030              ADDS     r0,r0,#0x30
0000d4  7840              LDRB     r0,[r0,#1]
0000d6  0740              LSLS     r0,r0,#29
0000d8  0f40              LSRS     r0,r0,#29
0000da  2801              CMP      r0,#1
0000dc  d107              BNE      |L68.238|
;;;4719               {
;;;4720                   MID_TM_IC_CaptureCallback(mTM);
0000de  4620              MOV      r0,r4
0000e0  f7fffffe          BL       MID_TM_IC_CaptureCallback
;;;4721                   __DRV_TM_CLEAR_FLAG(mTM, (TM_FLAG_CC2A | TM_FLAG_CC2B));
0000e4  2011              MOVS     r0,#0x11
0000e6  0280              LSLS     r0,r0,#10
0000e8  6821              LDR      r1,[r4,#0]
0000ea  6008              STR      r0,[r1,#0]
0000ec  e009              B        |L68.258|
                  |L68.238|
;;;4722               }
;;;4723               /* Output compare event */
;;;4724               else
;;;4725               {
;;;4726                   __DRV_TM_CLEAR_FLAG(mTM, (TM_FLAG_CC2A | TM_FLAG_CC2B));
0000ee  2011              MOVS     r0,#0x11
0000f0  0280              LSLS     r0,r0,#10
0000f2  6821              LDR      r1,[r4,#0]
0000f4  6008              STR      r0,[r1,#0]
;;;4727                   MID_TM_OC_DelayElapsedCallback(mTM);
0000f6  4620              MOV      r0,r4
0000f8  f7fffffe          BL       MID_TM_OC_DelayElapsedCallback
;;;4728                   MID_TM_PWM_PulseFinishedCallback(mTM);
0000fc  4620              MOV      r0,r4
0000fe  f7fffffe          BL       MID_TM_PWM_PulseFinishedCallback
                  |L68.258|
;;;4729               }
;;;4730               mTM->Channel = MID_TM_ACTIVE_CHANNEL_CLEARED;
000102  2005              MOVS     r0,#5
000104  7320              STRB     r0,[r4,#0xc]
                  |L68.262|
;;;4731           }
;;;4732       }
;;;4733       /* Capture compare 3 event */
;;;4734       if(__DRV_TM_GET_EVENT(mTM, TM_EVENT_CH3))
000106  6820              LDR      r0,[r4,#0]
000108  6800              LDR      r0,[r0,#0]
00010a  2111              MOVS     r1,#0x11
00010c  02c9              LSLS     r1,r1,#11
00010e  4008              ANDS     r0,r0,r1
000110  2800              CMP      r0,#0
000112  d023              BEQ      |L68.348|
;;;4735       {
;;;4736           if(__DRV_TM_GET_IT_SOURCE(mTM, TM_IT_CC3))
000114  6820              LDR      r0,[r4,#0]
000116  6840              LDR      r0,[r0,#4]
000118  2101              MOVS     r1,#1
00011a  02c9              LSLS     r1,r1,#11
00011c  4008              ANDS     r0,r0,r1
00011e  4288              CMP      r0,r1
000120  d11c              BNE      |L68.348|
;;;4737           {
;;;4738               mTM->Channel = MID_TM_Channel3;
000122  2003              MOVS     r0,#3
000124  7320              STRB     r0,[r4,#0xc]
;;;4739               /* Input capture event */
;;;4740               if(mTM->Instance->CCMDS.MBIT.CC3_MDS == TM_CH_InputCapture)
000126  6820              LDR      r0,[r4,#0]
000128  3030              ADDS     r0,r0,#0x30
00012a  7840              LDRB     r0,[r0,#1]
00012c  0640              LSLS     r0,r0,#25
00012e  0f40              LSRS     r0,r0,#29
000130  2801              CMP      r0,#1
000132  d107              BNE      |L68.324|
;;;4741               {
;;;4742                   MID_TM_IC_CaptureCallback(mTM);
000134  4620              MOV      r0,r4
000136  f7fffffe          BL       MID_TM_IC_CaptureCallback
;;;4743                   __DRV_TM_CLEAR_FLAG(mTM, (TM_FLAG_CC3A | TM_FLAG_CC3B));
00013a  2011              MOVS     r0,#0x11
00013c  02c0              LSLS     r0,r0,#11
00013e  6821              LDR      r1,[r4,#0]
000140  6008              STR      r0,[r1,#0]
000142  e009              B        |L68.344|
                  |L68.324|
;;;4744               }
;;;4745               /* Output compare event */
;;;4746               else
;;;4747               {
;;;4748                   __DRV_TM_CLEAR_FLAG(mTM, (TM_FLAG_CC3A | TM_FLAG_CC3B));
000144  2011              MOVS     r0,#0x11
000146  02c0              LSLS     r0,r0,#11
000148  6821              LDR      r1,[r4,#0]
00014a  6008              STR      r0,[r1,#0]
;;;4749                   MID_TM_OC_DelayElapsedCallback(mTM);
00014c  4620              MOV      r0,r4
00014e  f7fffffe          BL       MID_TM_OC_DelayElapsedCallback
;;;4750                   MID_TM_PWM_PulseFinishedCallback(mTM);
000152  4620              MOV      r0,r4
000154  f7fffffe          BL       MID_TM_PWM_PulseFinishedCallback
                  |L68.344|
;;;4751               }
;;;4752               mTM->Channel = MID_TM_ACTIVE_CHANNEL_CLEARED;
000158  2005              MOVS     r0,#5
00015a  7320              STRB     r0,[r4,#0xc]
                  |L68.348|
;;;4753           }
;;;4754       }
;;;4755   
;;;4756       #if defined(MG32_3RD)
;;;4757       /* TM One Pulse event */
;;;4758       if(__DRV_TM_GET_EVENT(mTM, (TM_EVENT_ONEPULSE)))
;;;4759       {
;;;4760           if(__DRV_TM_GET_IT_SOURCE(mTM, TM_IT_ONEPULSE))
;;;4761           {
;;;4762               __DRV_TM_CLEAR_FLAG(mTM, (TM_EVENT_ONEPULSE));
;;;4763               MID_TM_OnePulseCallback(mTM);
;;;4764           }
;;;4765       }
;;;4766       #endif
;;;4767   
;;;4768       /* TM Update event */
;;;4769       if(__DRV_TM_GET_EVENT(mTM, (TM_FLAG_UPDATE_UP | TM_FLAG_UPDATE_DOWN)))
00015c  6820              LDR      r0,[r4,#0]
00015e  6800              LDR      r0,[r0,#0]
000160  2150              MOVS     r1,#0x50
000162  4008              ANDS     r0,r0,r1
000164  2800              CMP      r0,#0
000166  d00b              BEQ      |L68.384|
;;;4770       {
;;;4771           if(__DRV_TM_GET_IT_SOURCE(mTM, TM_IT_UPDATE))
000168  6820              LDR      r0,[r4,#0]
00016a  6840              LDR      r0,[r0,#4]
00016c  2110              MOVS     r1,#0x10
00016e  4008              ANDS     r0,r0,r1
000170  2810              CMP      r0,#0x10
000172  d105              BNE      |L68.384|
;;;4772           {
;;;4773               __DRV_TM_CLEAR_FLAG(mTM, (TM_FLAG_UPDATE_UP | TM_FLAG_UPDATE_DOWN));
000174  2050              MOVS     r0,#0x50
000176  6821              LDR      r1,[r4,#0]
000178  6008              STR      r0,[r1,#0]
;;;4774               MID_TM_PeriodElapsedCallback(mTM);
00017a  4620              MOV      r0,r4
00017c  f7fffffe          BL       MID_TM_PeriodElapsedCallback
                  |L68.384|
;;;4775           }
;;;4776       }
;;;4777       /* TM Break input event */
;;;4778       if(__DRV_TM_GET_FLAG(mTM, (TM_FLAG_BREAK)))
000180  6820              LDR      r0,[r4,#0]
000182  6800              LDR      r0,[r0,#0]
000184  2104              MOVS     r1,#4
000186  4008              ANDS     r0,r0,r1
000188  2804              CMP      r0,#4
00018a  d109              BNE      |L68.416|
;;;4779       {
;;;4780           if(__DRV_TM_GET_IT_SOURCE(mTM, TM_IT_BREAK))
00018c  6820              LDR      r0,[r4,#0]
00018e  6840              LDR      r0,[r0,#4]
000190  4008              ANDS     r0,r0,r1
000192  2804              CMP      r0,#4
000194  d104              BNE      |L68.416|
;;;4781           {
;;;4782               __DRV_TM_CLEAR_FLAG(mTM, TM_FLAG_BREAK);
000196  6821              LDR      r1,[r4,#0]
000198  6008              STR      r0,[r1,#0]
;;;4783               MID_TM_BreakCallback(mTM);
00019a  4620              MOV      r0,r4
00019c  f7fffffe          BL       MID_TM_BreakCallback
                  |L68.416|
;;;4784           }
;;;4785       }
;;;4786       /* TM Trigger detection event */
;;;4787       if(__DRV_TM_GET_FLAG(mTM, TM_FLAG_EXTERNAL))
0001a0  6820              LDR      r0,[r4,#0]
0001a2  6800              LDR      r0,[r0,#0]
0001a4  2108              MOVS     r1,#8
0001a6  4008              ANDS     r0,r0,r1
0001a8  2808              CMP      r0,#8
0001aa  d109              BNE      |L68.448|
;;;4788       {
;;;4789           if(__DRV_TM_GET_IT_SOURCE(mTM, TM_IT_EXTERNAL))
0001ac  6820              LDR      r0,[r4,#0]
0001ae  6840              LDR      r0,[r0,#4]
0001b0  4008              ANDS     r0,r0,r1
0001b2  2808              CMP      r0,#8
0001b4  d104              BNE      |L68.448|
;;;4790           {
;;;4791               __DRV_TM_CLEAR_FLAG(mTM, TM_FLAG_EXTERNAL);
0001b6  6821              LDR      r1,[r4,#0]
0001b8  6008              STR      r0,[r1,#0]
;;;4792               MID_TM_TriggerCallback(mTM);
0001ba  4620              MOV      r0,r4
0001bc  f7fffffe          BL       MID_TM_TriggerCallback
                  |L68.448|
;;;4793           }
;;;4794       }
;;;4795       /* TM QEI direction change event */
;;;4796       if(__DRV_TM_GET_FLAG(mTM, TM_FLAG_QEI_DIRCHANGE))
0001c0  6820              LDR      r0,[r4,#0]
0001c2  6800              LDR      r0,[r0,#0]
0001c4  2101              MOVS     r1,#1
0001c6  0409              LSLS     r1,r1,#16
0001c8  4008              ANDS     r0,r0,r1
0001ca  4288              CMP      r0,r1
0001cc  d10b              BNE      |L68.486|
;;;4797       {
;;;4798           if(__DRV_TM_GET_IT_SOURCE(mTM, TM_IT_QEI_DIRCHANGE) != CLR)
0001ce  6820              LDR      r0,[r4,#0]
0001d0  6840              LDR      r0,[r0,#4]
0001d2  4008              ANDS     r0,r0,r1
0001d4  0c00              LSRS     r0,r0,#16
0001d6  2800              CMP      r0,#0
0001d8  d005              BEQ      |L68.486|
;;;4799           {
;;;4800               __DRV_TM_CLEAR_FLAG(mTM, TM_FLAG_QEI_DIRCHANGE);
0001da  4608              MOV      r0,r1
0001dc  6821              LDR      r1,[r4,#0]
0001de  6008              STR      r0,[r1,#0]
;;;4801               MID_TM_QEI_DIRCHANGECallback(mTM);
0001e0  4620              MOV      r0,r4
0001e2  f7fffffe          BL       MID_TM_QEI_DIRCHANGECallback
                  |L68.486|
;;;4802           }
;;;4803       }
;;;4804       /* TM QEI direction change event */
;;;4805       if(__DRV_TM_GET_FLAG(mTM, TM_FLAG_QEI_INDEX))
0001e6  6820              LDR      r0,[r4,#0]
0001e8  6800              LDR      r0,[r0,#0]
0001ea  2101              MOVS     r1,#1
0001ec  0489              LSLS     r1,r1,#18
0001ee  4008              ANDS     r0,r0,r1
0001f0  4288              CMP      r0,r1
0001f2  d109              BNE      |L68.520|
;;;4806       {
;;;4807           if(__DRV_TM_GET_IT_SOURCE(mTM, TM_IT_QEI_INDEX))
0001f4  6820              LDR      r0,[r4,#0]
0001f6  6840              LDR      r0,[r0,#4]
0001f8  4008              ANDS     r0,r0,r1
0001fa  4288              CMP      r0,r1
0001fc  d104              BNE      |L68.520|
;;;4808           {
;;;4809               __DRV_TM_CLEAR_FLAG(mTM, TM_FLAG_QEI_INDEX);
0001fe  6821              LDR      r1,[r4,#0]
000200  6008              STR      r0,[r1,#0]
;;;4810               MID_TM_QEI_INDEXCallback(mTM);
000202  4620              MOV      r0,r4
000204  f7fffffe          BL       MID_TM_QEI_INDEXCallback
                  |L68.520|
;;;4811           }
;;;4812       }
;;;4813       /* TM QEI direction change event */
;;;4814       if(__DRV_TM_GET_FLAG(mTM, TM_FLAG_QEI_ERROR))
000208  6820              LDR      r0,[r4,#0]
00020a  6800              LDR      r0,[r0,#0]
00020c  2101              MOVS     r1,#1
00020e  04c9              LSLS     r1,r1,#19
000210  4008              ANDS     r0,r0,r1
000212  4288              CMP      r0,r1
000214  d109              BNE      |L68.554|
;;;4815       {
;;;4816           if(__DRV_TM_GET_IT_SOURCE(mTM, TM_IT_QEI_ERROR))
000216  6820              LDR      r0,[r4,#0]
000218  6840              LDR      r0,[r0,#4]
00021a  4008              ANDS     r0,r0,r1
00021c  4288              CMP      r0,r1
00021e  d104              BNE      |L68.554|
;;;4817           {
;;;4818               __DRV_TM_CLEAR_FLAG(mTM, TM_FLAG_QEI_ERROR);
000220  6821              LDR      r1,[r4,#0]
000222  6008              STR      r0,[r1,#0]
;;;4819               MID_TM_QEI_ErrorCallback(mTM);
000224  4620              MOV      r0,r4
000226  f7fffffe          BL       MID_TM_QEI_ErrorCallback
                  |L68.554|
;;;4820           }
;;;4821       }
;;;4822       
;;;4823   }
00022a  bd10              POP      {r4,pc}
;;;4824   ///@}
                          ENDP


                          AREA ||i.MID_TM_MasterConfigSynchronization||, CODE, READONLY, ALIGN=2

                  MID_TM_MasterConfigSynchronization PROC
;;;5218    */
;;;5219   MID_StatusTypeDef MID_TM_MasterConfigSynchronization(TM_HandleTypeDef* mTM, TM_MasterConfigTypeDef * sMasterConfig)
000000  b510              PUSH     {r4,lr}
;;;5220   {
000002  4602              MOV      r2,r0
;;;5221       uint32_t tmpTRGO;
;;;5222   
;;;5223       /* Process Lockeded */
;;;5224       __MID_LOCK(mTM);
000004  bf00              NOP      
000006  2020              MOVS     r0,#0x20
000008  5c80              LDRB     r0,[r0,r2]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L69.18|
00000e  2002              MOVS     r0,#2
                  |L69.16|
;;;5225       
;;;5226       mTM->State = MID_TM_STATE_BUSY;
;;;5227       
;;;5228       /* Load TRG reigter and mask TRGO control bit */
;;;5229       tmpTRGO = mTM->Instance->TRG.W & ~(TM_TRG_TRGO_INV_mask_w | TM_TRG_UEV_SEL_mask_w | TM_TRG_TRGO_MDS_mask_w);
;;;5230       
;;;5231       /* Over write TRGO control parameters  */
;;;5232       tmpTRGO |= (sMasterConfig->MasterOutputTrigger | sMasterConfig->MasterOutputPolarity | sMasterConfig->MasterUpdateEvent);
;;;5233       
;;;5234       /* Reset the TRG register */
;;;5235       mTM->Instance->TRG.W = tmpTRGO;
;;;5236           
;;;5237       /* Release Lock */
;;;5238       __MID_UNLOCK(mTM);
;;;5239       
;;;5240       return MID_SUCCESS;
;;;5241   }
000010  bd10              POP      {r4,pc}
                  |L69.18|
000012  2401              MOVS     r4,#1                 ;5224
000014  2020              MOVS     r0,#0x20              ;5224
000016  5484              STRB     r4,[r0,r2]            ;5224
000018  bf00              NOP                            ;5224
00001a  2400              MOVS     r4,#0                 ;5226
00001c  2021              MOVS     r0,#0x21              ;5226
00001e  5484              STRB     r4,[r0,r2]            ;5226
000020  6810              LDR      r0,[r2,#0]            ;5229
000022  68c0              LDR      r0,[r0,#0xc]          ;5229
000024  4c08              LDR      r4,|L69.72|
000026  4020              ANDS     r0,r0,r4              ;5229
000028  4603              MOV      r3,r0                 ;5229
00002a  684c              LDR      r4,[r1,#4]            ;5232
00002c  6808              LDR      r0,[r1,#0]            ;5232
00002e  4320              ORRS     r0,r0,r4              ;5232
000030  688c              LDR      r4,[r1,#8]            ;5232
000032  4320              ORRS     r0,r0,r4              ;5232
000034  4303              ORRS     r3,r3,r0              ;5232
000036  6810              LDR      r0,[r2,#0]            ;5235
000038  60c3              STR      r3,[r0,#0xc]          ;5235
00003a  bf00              NOP                            ;5238
00003c  2400              MOVS     r4,#0                 ;5238
00003e  2020              MOVS     r0,#0x20              ;5238
000040  5484              STRB     r4,[r0,r2]            ;5238
000042  bf00              NOP                            ;5238
000044  2000              MOVS     r0,#0                 ;5240
000046  e7e3              B        |L69.16|
;;;5242   
                          ENDP

                  |L69.72|
                          DCD      0xfd3f0fff

                          AREA ||i.MID_TM_OC_ConfigChannel||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_ConfigChannel PROC
;;;4857    */
;;;4858   MID_StatusTypeDef MID_TM_OC_ConfigChannel(TM_HandleTypeDef* mTM, TM_OC_InitTypeDef* sConfig, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;4859   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;4860       /* Check input state */
;;;4861       __MID_LOCK(mTM);
000008  bf00              NOP      
00000a  2020              MOVS     r0,#0x20
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L70.22|
000012  2002              MOVS     r0,#2
                  |L70.20|
;;;4862   
;;;4863       mTM->State = MID_TM_STATE_BUSY;
;;;4864   
;;;4865       switch(Channel)
;;;4866       {
;;;4867       case MID_TM_Channel0:
;;;4868       {
;;;4869           /* Configure the TM Channel 0 in Output Compare */
;;;4870           TM_OC0_SetConfig(mTM->Instance, sConfig);
;;;4871       }
;;;4872       break;
;;;4873   
;;;4874       case MID_TM_Channel1:
;;;4875       {
;;;4876           /* Configure the TM Channel 1 in Output Compare */
;;;4877           TM_OC1_SetConfig(mTM->Instance, sConfig);
;;;4878       }
;;;4879       break;
;;;4880   
;;;4881       case MID_TM_Channel2:
;;;4882       {
;;;4883           /* Configure the TM Channel 2 in Output Compare */
;;;4884           TM_OC2_SetConfig(mTM->Instance, sConfig);
;;;4885       }
;;;4886       break;
;;;4887   
;;;4888       case MID_TM_Channel3:
;;;4889       {
;;;4890           /* Configure the TM Channel 3 in Output Compare */
;;;4891           TM_OC3_SetConfig(mTM->Instance, sConfig);
;;;4892       }
;;;4893       break;
;;;4894   
;;;4895       default:
;;;4896           break;
;;;4897       }
;;;4898       mTM->State = MID_TM_STATE_READY;
;;;4899   
;;;4900       /* Release Lock */
;;;4901       __MID_UNLOCK(mTM);
;;;4902   
;;;4903       return MID_SUCCESS;
;;;4904   }
000014  bd70              POP      {r4-r6,pc}
                  |L70.22|
000016  2101              MOVS     r1,#1                 ;4861
000018  2020              MOVS     r0,#0x20              ;4861
00001a  5501              STRB     r1,[r0,r4]            ;4861
00001c  bf00              NOP                            ;4861
00001e  2100              MOVS     r1,#0                 ;4863
000020  2021              MOVS     r0,#0x21              ;4863
000022  5501              STRB     r1,[r0,r4]            ;4863
000024  2d00              CMP      r5,#0                 ;4865
000026  d006              BEQ      |L70.54|
000028  2d01              CMP      r5,#1                 ;4865
00002a  d009              BEQ      |L70.64|
00002c  2d02              CMP      r5,#2                 ;4865
00002e  d00c              BEQ      |L70.74|
000030  2d03              CMP      r5,#3                 ;4865
000032  d114              BNE      |L70.94|
000034  e00e              B        |L70.84|
                  |L70.54|
000036  4631              MOV      r1,r6                 ;4870
000038  6820              LDR      r0,[r4,#0]            ;4870
00003a  f7fffffe          BL       TM_OC0_SetConfig
00003e  e00f              B        |L70.96|
                  |L70.64|
000040  4631              MOV      r1,r6                 ;4877
000042  6820              LDR      r0,[r4,#0]            ;4877
000044  f7fffffe          BL       TM_OC1_SetConfig
000048  e00a              B        |L70.96|
                  |L70.74|
00004a  4631              MOV      r1,r6                 ;4884
00004c  6820              LDR      r0,[r4,#0]            ;4884
00004e  f7fffffe          BL       TM_OC2_SetConfig
000052  e005              B        |L70.96|
                  |L70.84|
000054  4631              MOV      r1,r6                 ;4891
000056  6820              LDR      r0,[r4,#0]            ;4891
000058  f7fffffe          BL       TM_OC3_SetConfig
00005c  e000              B        |L70.96|
                  |L70.94|
00005e  bf00              NOP                            ;4896
                  |L70.96|
000060  bf00              NOP                            ;4872
000062  2101              MOVS     r1,#1                 ;4898
000064  2021              MOVS     r0,#0x21              ;4898
000066  5501              STRB     r1,[r0,r4]            ;4898
000068  bf00              NOP                            ;4901
00006a  2100              MOVS     r1,#0                 ;4901
00006c  2020              MOVS     r0,#0x20              ;4901
00006e  5501              STRB     r1,[r0,r4]            ;4901
000070  bf00              NOP                            ;4901
000072  2000              MOVS     r0,#0                 ;4903
000074  e7ce              B        |L70.20|
;;;4905   
                          ENDP


                          AREA ||i.MID_TM_OC_DeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_DeInit PROC
;;;350     */
;;;351    MID_StatusTypeDef MID_TM_OC_DeInit(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;352    {
000002  4604              MOV      r4,r0
;;;353        mTM->State = MID_TM_STATE_BUSY;
000004  2100              MOVS     r1,#0
000006  2021              MOVS     r0,#0x21
000008  5501              STRB     r1,[r0,r4]
;;;354    
;;;355        /* Disable the TM Peripheral Clock */
;;;356        __DRV_TM_DISABLE(mTM);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  8e00              LDRH     r0,[r0,#0x30]
000010  2800              CMP      r0,#0
000012  d105              BNE      |L71.32|
000014  6820              LDR      r0,[r4,#0]
000016  6900              LDR      r0,[r0,#0x10]
000018  0880              LSRS     r0,r0,#2
00001a  0080              LSLS     r0,r0,#2
00001c  6821              LDR      r1,[r4,#0]
00001e  6108              STR      r0,[r1,#0x10]
                  |L71.32|
000020  bf00              NOP      
;;;357    
;;;358        /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;359        MID_TM_OC_MspDeInit(mTM);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       MID_TM_OC_MspDeInit
;;;360    
;;;361        /* Change TM state */
;;;362        mTM->State = MID_TM_STATE_RESET;
000028  2102              MOVS     r1,#2
00002a  2021              MOVS     r0,#0x21
00002c  5501              STRB     r1,[r0,r4]
;;;363    
;;;364        /* Release Lock */
;;;365        __MID_UNLOCK(mTM);
00002e  bf00              NOP      
000030  2100              MOVS     r1,#0
000032  2020              MOVS     r0,#0x20
000034  5501              STRB     r1,[r0,r4]
000036  bf00              NOP      
;;;366    
;;;367        return MID_SUCCESS;
000038  2000              MOVS     r0,#0
;;;368    }
00003a  bd10              POP      {r4,pc}
;;;369    
                          ENDP


                          AREA ||i.MID_TM_OC_DelayElapsedCallback||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_DelayElapsedCallback PROC
;;;5565    */
;;;5566   __weak void MID_TM_OC_DelayElapsedCallback(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;5567   {
;;;5568       /* Prevent unused argument(s) compilation warning */
;;;5569       UNUSED(mTM);
;;;5570       /* NOTE : This function Should not be modified, when the callback is needed,
;;;5571                 the MID_TM_OC_DelayElapsedCallback could be implemented in the user file
;;;5572        */
;;;5573   
;;;5574   }
;;;5575   
                          ENDP


                          AREA ||i.MID_TM_OC_GetState||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_GetState PROC
;;;5761    */
;;;5762   MID_TM_StateTypeDef MID_TM_OC_GetState(TM_HandleTypeDef* mTM)
000000  4601              MOV      r1,r0
;;;5763   {
;;;5764       return mTM->State;
000002  2021              MOVS     r0,#0x21
000004  5c40              LDRB     r0,[r0,r1]
;;;5765   }
000006  4770              BX       lr
;;;5766   
                          ENDP


                          AREA ||i.MID_TM_OC_Init||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_Init PROC
;;;311     */
;;;312    MID_StatusTypeDef MID_TM_OC_Init(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;313    {
000002  4604              MOV      r4,r0
;;;314        if(mTM->State == MID_TM_STATE_RESET)
000004  2021              MOVS     r0,#0x21
000006  5d00              LDRB     r0,[r0,r4]
000008  2802              CMP      r0,#2
00000a  d105              BNE      |L74.24|
;;;315        {
;;;316            /* Allocate lock resource and initialize it */
;;;317            mTM->Lock = MID_UnLocked;
00000c  2100              MOVS     r1,#0
00000e  2020              MOVS     r0,#0x20
000010  5501              STRB     r1,[r0,r4]
;;;318    
;;;319            /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;320            MID_TM_OC_MspInit(mTM);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       MID_TM_OC_MspInit
                  |L74.24|
;;;321        }
;;;322    
;;;323        /* Set the TM state */
;;;324        mTM->State= MID_TM_STATE_BUSY;
000018  2100              MOVS     r1,#0
00001a  2021              MOVS     r0,#0x21
00001c  5501              STRB     r1,[r0,r4]
;;;325    
;;;326        /* Init the base time for the Output Compare */
;;;327        TM_Base_SetConfig(mTM->Instance,  &mTM->Init);
00001e  1d21              ADDS     r1,r4,#4
000020  6820              LDR      r0,[r4,#0]
000022  f7fffffe          BL       TM_Base_SetConfig
;;;328    
;;;329        /* Initialize the TM state*/
;;;330        mTM->State= MID_TM_STATE_READY;
000026  2101              MOVS     r1,#1
000028  2021              MOVS     r0,#0x21
00002a  5501              STRB     r1,[r0,r4]
;;;331    
;;;332        return MID_SUCCESS;
00002c  2000              MOVS     r0,#0
;;;333    }
00002e  bd10              POP      {r4,pc}
;;;334    
                          ENDP


                          AREA ||i.MID_TM_OC_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_MspDeInit PROC
;;;392     */
;;;393    __weak void MID_TM_OC_MspDeInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;394    {
;;;395        /* Prevent unused argument(s) compilation warning */
;;;396        UNUSED(mTM);
;;;397        /* NOTE : This function Should not be modified, when the callback is needed,
;;;398                  the MID_TM_Base_MspDeInit could be implemented in the user file
;;;399         */
;;;400    }
;;;401    
                          ENDP


                          AREA ||i.MID_TM_OC_MspInit||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_MspInit PROC
;;;376     */
;;;377    __weak void MID_TM_OC_MspInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;378    {
;;;379        /* Prevent unused argument(s) compilation warning */
;;;380        UNUSED(mTM);
;;;381        /* NOTE : This function Should not be modified, when the callback is needed,
;;;382                  the MID_TM_Base_MspInit could be implemented in the user file
;;;383         */
;;;384    }
;;;385    
                          ENDP


                          AREA ||i.MID_TM_OC_SetDeadTime||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_SetDeadTime PROC
;;;6343    */
;;;6344   void MID_TM_OC_SetDeadTime(TM_HandleTypeDef* mTM,  uint32_t DeadTime)
000000  6802              LDR      r2,[r0,#0]
;;;6345   {
;;;6346       mTM->Instance->PWM.W &= ~(TM_PWM_DTG_DY_mask_w);
000002  6c52              LDR      r2,[r2,#0x44]
000004  23ff              MOVS     r3,#0xff
000006  021b              LSLS     r3,r3,#8
000008  439a              BICS     r2,r2,r3
00000a  6803              LDR      r3,[r0,#0]
00000c  645a              STR      r2,[r3,#0x44]
;;;6347       mTM->Instance->PWM.W |= (DeadTime << 8);
00000e  6802              LDR      r2,[r0,#0]
000010  6c52              LDR      r2,[r2,#0x44]
000012  020b              LSLS     r3,r1,#8
000014  431a              ORRS     r2,r2,r3
000016  6803              LDR      r3,[r0,#0]
000018  645a              STR      r2,[r3,#0x44]
;;;6348   }
00001a  4770              BX       lr
;;;6349   
                          ENDP


                          AREA ||i.MID_TM_OC_SetDeadTimeDivider||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_SetDeadTimeDivider PROC
;;;6321    */
;;;6322   void MID_TM_OC_SetDeadTimeDivider(TM_HandleTypeDef* mTM,  uint32_t DeadTimeDivider)
000000  6802              LDR      r2,[r0,#0]
;;;6323   {
;;;6324       mTM->Instance->CLK.W &= ~(TM_CLK_DTG_DIV_mask_w);
000002  6892              LDR      r2,[r2,#8]
000004  2303              MOVS     r3,#3
000006  041b              LSLS     r3,r3,#16
000008  439a              BICS     r2,r2,r3
00000a  6803              LDR      r3,[r0,#0]
00000c  609a              STR      r2,[r3,#8]
;;;6325       mTM->Instance->CLK.W |= DeadTimeDivider;
00000e  6802              LDR      r2,[r0,#0]
000010  6892              LDR      r2,[r2,#8]
000012  430a              ORRS     r2,r2,r1
000014  6803              LDR      r3,[r0,#0]
000016  609a              STR      r2,[r3,#8]
;;;6326   }
000018  4770              BX       lr
;;;6327   
                          ENDP


                          AREA ||i.MID_TM_OC_Start||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_Start PROC
;;;422     */
;;;423    MID_StatusTypeDef MID_TM_OC_Start(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;424    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;425        /* Enable the Output compare channel */
;;;426        TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_16bit_OutputCompare);
000006  2202              MOVS     r2,#2
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;427    
;;;428        /* Enable the Peripheral */
;;;429        __DRV_TM_ENABLE(mTM);
000010  6820              LDR      r0,[r4,#0]
000012  6900              LDR      r0,[r0,#0x10]
000014  2103              MOVS     r1,#3
000016  4308              ORRS     r0,r0,r1
000018  6821              LDR      r1,[r4,#0]
00001a  6108              STR      r0,[r1,#0x10]
;;;430    
;;;431        /* Return function status */
;;;432        return MID_SUCCESS;
00001c  2000              MOVS     r0,#0
;;;433    }
00001e  bd30              POP      {r4,r5,pc}
;;;434    
                          ENDP


                          AREA ||i.MID_TM_OC_Start_DMA||, CODE, READONLY, ALIGN=2

                  MID_TM_OC_Start_DMA PROC
;;;642     */
;;;643    MID_StatusTypeDef MID_TM_OC_Start_DMA(TM_HandleTypeDef* mTM, uint32_t Channel, uint32_t* pData, uint16_t Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;644    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;645        if((mTM->State) == (MID_TM_STATE_BUSY))
00000a  2021              MOVS     r0,#0x21
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2800              CMP      r0,#0
000010  d101              BNE      |L80.22|
;;;646            return MID_BUSY;
000012  2002              MOVS     r0,#2
                  |L80.20|
;;;647        else if((mTM->State) == (MID_TM_STATE_READY))
;;;648        {
;;;649            if(((uint32_t)pData == 0U) && (Length > 0U))
;;;650                return MID_FAILURE;
;;;651            else
;;;652                mTM->State = MID_TM_STATE_BUSY;
;;;653        }
;;;654    
;;;655        switch(Channel)
;;;656        {
;;;657        case MID_TM_Channel0:
;;;658        {
;;;659            /* Set the DMA Period elapsed callback */
;;;660            mTM->hDMA[TM_DMA_ID_CC0]->XferCpltCallback = &TM_DMADelayPulseCplt;
;;;661    
;;;662            /* Set the DMA error callback */
;;;663            mTM->hDMA[TM_DMA_ID_CC0]->XferErrorCallback = TM_DMAError ;
;;;664    
;;;665            MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC0], (uint32_t)pData, NULL, Length);
;;;666    
;;;667            /* Enable the TM Capture/Compare 0 DMA request */
;;;668            __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH0_OC);
;;;669            
;;;670            /* Satart the TM counter */
;;;671            __DRV_TM_ENABLE(mTM);
;;;672        }
;;;673        break;
;;;674    
;;;675        case MID_TM_Channel1:
;;;676        {
;;;677            /* Set the DMA Period elapsed callback */
;;;678            mTM->hDMA[TM_DMA_ID_CC1]->XferCpltCallback = TM_DMADelayPulseCplt;
;;;679    
;;;680            /* Set the DMA error callback */
;;;681            mTM->hDMA[TM_DMA_ID_CC1]->XferErrorCallback = TM_DMAError ;
;;;682    
;;;683            MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC1], (uint32_t)pData, NULL, Length);
;;;684    
;;;685            /* Enable the TM Capture/Compare 1 DMA request */
;;;686            __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH1_OC);
;;;687            
;;;688            /* Satart the TM counter */
;;;689            __DRV_TM_ENABLE(mTM);
;;;690        }
;;;691        break;
;;;692    
;;;693        case MID_TM_Channel2:
;;;694        {
;;;695            /* Set the DMA Period elapsed callback */
;;;696            mTM->hDMA[TM_DMA_ID_CC2]->XferCpltCallback = TM_DMADelayPulseCplt;
;;;697    
;;;698            /* Set the DMA error callback */
;;;699            mTM->hDMA[TM_DMA_ID_CC2]->XferErrorCallback = TM_DMAError ;
;;;700    
;;;701            MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC2], (uint32_t)pData, NULL, Length);
;;;702    
;;;703            /* Enable the TM Capture/Compare 2 DMA request */
;;;704            __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH2_OC);
;;;705            
;;;706            /* Satart the TM counter */
;;;707            __DRV_TM_ENABLE(mTM);
;;;708        }
;;;709        break;
;;;710    
;;;711        case MID_TM_Channel3:
;;;712        {
;;;713            // MG32x02z MCU don't support Channel3 for OC output with DMA access
;;;714        }
;;;715        break;
;;;716    
;;;717        default:
;;;718            break;
;;;719        }
;;;720    
;;;721        /* Enable the Output compare channel */
;;;722        TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_16bit_OutputCompare);
;;;723    
;;;724        // Break Control for OC mode
;;;725        /*   if(IS_TM_BREAK_INSTANCE(mTM->Instance) != RESET)
;;;726          {
;;;727            // to do ...
;;;728          }
;;;729         */
;;;730        mTM->State = MID_TM_STATE_READY;
;;;731    
;;;732        /* Enable the Peripheral */
;;;733        __DRV_TM_ENABLE(mTM);
;;;734    
;;;735        /* Return function status */
;;;736        return MID_SUCCESS;
;;;737    }
000014  bdf8              POP      {r3-r7,pc}
                  |L80.22|
000016  2021              MOVS     r0,#0x21              ;647
000018  5d00              LDRB     r0,[r0,r4]            ;647
00001a  2801              CMP      r0,#1                 ;647
00001c  d107              BNE      |L80.46|
00001e  2d00              CMP      r5,#0                 ;649
000020  d102              BNE      |L80.40|
000022  2f00              CMP      r7,#0                 ;649
000024  d000              BEQ      |L80.40|
000026  e7f5              B        |L80.20|
                  |L80.40|
000028  2100              MOVS     r1,#0                 ;652
00002a  2021              MOVS     r0,#0x21              ;652
00002c  5501              STRB     r1,[r0,r4]            ;652
                  |L80.46|
00002e  2e00              CMP      r6,#0                 ;655
000030  d006              BEQ      |L80.64|
000032  2e01              CMP      r6,#1                 ;655
000034  d01e              BEQ      |L80.116|
000036  2e02              CMP      r6,#2                 ;655
000038  d036              BEQ      |L80.168|
00003a  2e03              CMP      r6,#3                 ;655
00003c  d14f              BNE      |L80.222|
00003e  e04d              B        |L80.220|
                  |L80.64|
000040  4830              LDR      r0,|L80.260|
000042  6921              LDR      r1,[r4,#0x10]         ;660
000044  62c8              STR      r0,[r1,#0x2c]         ;660
000046  4830              LDR      r0,|L80.264|
000048  6921              LDR      r1,[r4,#0x10]         ;663
00004a  6348              STR      r0,[r1,#0x34]         ;663
00004c  463b              MOV      r3,r7                 ;665
00004e  2200              MOVS     r2,#0                 ;665
000050  4629              MOV      r1,r5                 ;665
000052  6920              LDR      r0,[r4,#0x10]         ;665
000054  f7fffffe          BL       MID_DMA_Start_IT
000058  6820              LDR      r0,[r4,#0]            ;668
00005a  6b00              LDR      r0,[r0,#0x30]         ;668
00005c  2101              MOVS     r1,#1                 ;668
00005e  0609              LSLS     r1,r1,#24             ;668
000060  4308              ORRS     r0,r0,r1              ;668
000062  6821              LDR      r1,[r4,#0]            ;668
000064  6308              STR      r0,[r1,#0x30]         ;668
000066  6820              LDR      r0,[r4,#0]            ;671
000068  6900              LDR      r0,[r0,#0x10]         ;671
00006a  2103              MOVS     r1,#3                 ;671
00006c  4308              ORRS     r0,r0,r1              ;671
00006e  6821              LDR      r1,[r4,#0]            ;671
000070  6108              STR      r0,[r1,#0x10]         ;671
000072  e035              B        |L80.224|
                  |L80.116|
000074  4923              LDR      r1,|L80.260|
000076  6960              LDR      r0,[r4,#0x14]         ;678
000078  62c1              STR      r1,[r0,#0x2c]         ;678
00007a  4923              LDR      r1,|L80.264|
00007c  6960              LDR      r0,[r4,#0x14]         ;681
00007e  6341              STR      r1,[r0,#0x34]         ;681
000080  463b              MOV      r3,r7                 ;683
000082  2200              MOVS     r2,#0                 ;683
000084  4629              MOV      r1,r5                 ;683
000086  6960              LDR      r0,[r4,#0x14]         ;683
000088  f7fffffe          BL       MID_DMA_Start_IT
00008c  6820              LDR      r0,[r4,#0]            ;686
00008e  6b00              LDR      r0,[r0,#0x30]         ;686
000090  2101              MOVS     r1,#1                 ;686
000092  0649              LSLS     r1,r1,#25             ;686
000094  4308              ORRS     r0,r0,r1              ;686
000096  6821              LDR      r1,[r4,#0]            ;686
000098  6308              STR      r0,[r1,#0x30]         ;686
00009a  6820              LDR      r0,[r4,#0]            ;689
00009c  6900              LDR      r0,[r0,#0x10]         ;689
00009e  2103              MOVS     r1,#3                 ;689
0000a0  4308              ORRS     r0,r0,r1              ;689
0000a2  6821              LDR      r1,[r4,#0]            ;689
0000a4  6108              STR      r0,[r1,#0x10]         ;689
0000a6  e01b              B        |L80.224|
                  |L80.168|
0000a8  4916              LDR      r1,|L80.260|
0000aa  69a0              LDR      r0,[r4,#0x18]         ;696
0000ac  62c1              STR      r1,[r0,#0x2c]         ;696
0000ae  4916              LDR      r1,|L80.264|
0000b0  69a0              LDR      r0,[r4,#0x18]         ;699
0000b2  6341              STR      r1,[r0,#0x34]         ;699
0000b4  463b              MOV      r3,r7                 ;701
0000b6  2200              MOVS     r2,#0                 ;701
0000b8  4629              MOV      r1,r5                 ;701
0000ba  69a0              LDR      r0,[r4,#0x18]         ;701
0000bc  f7fffffe          BL       MID_DMA_Start_IT
0000c0  6820              LDR      r0,[r4,#0]            ;704
0000c2  6b00              LDR      r0,[r0,#0x30]         ;704
0000c4  2101              MOVS     r1,#1                 ;704
0000c6  0689              LSLS     r1,r1,#26             ;704
0000c8  4308              ORRS     r0,r0,r1              ;704
0000ca  6821              LDR      r1,[r4,#0]            ;704
0000cc  6308              STR      r0,[r1,#0x30]         ;704
0000ce  6820              LDR      r0,[r4,#0]            ;707
0000d0  6900              LDR      r0,[r0,#0x10]         ;707
0000d2  2103              MOVS     r1,#3                 ;707
0000d4  4308              ORRS     r0,r0,r1              ;707
0000d6  6821              LDR      r1,[r4,#0]            ;707
0000d8  6108              STR      r0,[r1,#0x10]         ;707
0000da  e001              B        |L80.224|
                  |L80.220|
0000dc  e000              B        |L80.224|
                  |L80.222|
0000de  bf00              NOP                            ;718
                  |L80.224|
0000e0  bf00              NOP                            ;673
0000e2  2202              MOVS     r2,#2                 ;722
0000e4  4631              MOV      r1,r6                 ;722
0000e6  6820              LDR      r0,[r4,#0]            ;722
0000e8  f7fffffe          BL       TM_CCxChannelCmd
0000ec  2101              MOVS     r1,#1                 ;730
0000ee  2021              MOVS     r0,#0x21              ;730
0000f0  5501              STRB     r1,[r0,r4]            ;730
0000f2  6820              LDR      r0,[r4,#0]            ;733
0000f4  6900              LDR      r0,[r0,#0x10]         ;733
0000f6  2103              MOVS     r1,#3                 ;733
0000f8  4308              ORRS     r0,r0,r1              ;733
0000fa  6821              LDR      r1,[r4,#0]            ;733
0000fc  6108              STR      r0,[r1,#0x10]         ;733
0000fe  2000              MOVS     r0,#0                 ;736
000100  e788              B        |L80.20|
;;;738    
                          ENDP

000102  0000              DCW      0x0000
                  |L80.260|
                          DCD      TM_DMADelayPulseCplt
                  |L80.264|
                          DCD      TM_DMAError

                          AREA ||i.MID_TM_OC_Start_IT||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_Start_IT PROC
;;;491     */
;;;492    MID_StatusTypeDef MID_TM_OC_Start_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;493    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;494        switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L81.24|
00000a  2d01              CMP      r5,#1
00000c  d012              BEQ      |L81.52|
00000e  2d02              CMP      r5,#2
000010  d01e              BEQ      |L81.80|
000012  2d03              CMP      r5,#3
000014  d138              BNE      |L81.136|
000016  e029              B        |L81.108|
                  |L81.24|
;;;495        {
;;;496        case MID_TM_Channel0:
;;;497        {
;;;498            /* Enable the TM Capture/Compare 0 interrupt */
;;;499            __DRV_TM_ENABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4308              ORRS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;500            __DRV_TM_ENABLE_ITEA(mTM);
000026  6820              LDR      r0,[r4,#0]
000028  6840              LDR      r0,[r0,#4]
00002a  2101              MOVS     r1,#1
00002c  4308              ORRS     r0,r0,r1
00002e  6821              LDR      r1,[r4,#0]
000030  6048              STR      r0,[r1,#4]
;;;501        }
;;;502        break;
000032  e02a              B        |L81.138|
                  |L81.52|
;;;503    
;;;504        case MID_TM_Channel1:
;;;505        {
;;;506            /* Enable the TM Capture/Compare 1 interrupt */
;;;507            __DRV_TM_ENABLE_IT(mTM, TM_IT_CC1);
000034  6820              LDR      r0,[r4,#0]
000036  6840              LDR      r0,[r0,#4]
000038  2101              MOVS     r1,#1
00003a  0249              LSLS     r1,r1,#9
00003c  4308              ORRS     r0,r0,r1
00003e  6821              LDR      r1,[r4,#0]
000040  6048              STR      r0,[r1,#4]
;;;508            __DRV_TM_ENABLE_ITEA(mTM);
000042  6820              LDR      r0,[r4,#0]
000044  6840              LDR      r0,[r0,#4]
000046  2101              MOVS     r1,#1
000048  4308              ORRS     r0,r0,r1
00004a  6821              LDR      r1,[r4,#0]
00004c  6048              STR      r0,[r1,#4]
;;;509        }
;;;510        break;
00004e  e01c              B        |L81.138|
                  |L81.80|
;;;511    
;;;512        case MID_TM_Channel2:
;;;513        {
;;;514            /* Enable the TM Capture/Compare 2 interrupt */
;;;515            __DRV_TM_ENABLE_IT(mTM, TM_IT_CC2);
000050  6820              LDR      r0,[r4,#0]
000052  6840              LDR      r0,[r0,#4]
000054  2101              MOVS     r1,#1
000056  0289              LSLS     r1,r1,#10
000058  4308              ORRS     r0,r0,r1
00005a  6821              LDR      r1,[r4,#0]
00005c  6048              STR      r0,[r1,#4]
;;;516            __DRV_TM_ENABLE_ITEA(mTM);
00005e  6820              LDR      r0,[r4,#0]
000060  6840              LDR      r0,[r0,#4]
000062  2101              MOVS     r1,#1
000064  4308              ORRS     r0,r0,r1
000066  6821              LDR      r1,[r4,#0]
000068  6048              STR      r0,[r1,#4]
;;;517        }
;;;518        break;
00006a  e00e              B        |L81.138|
                  |L81.108|
;;;519    
;;;520        case MID_TM_Channel3:
;;;521        {
;;;522            /* Enable the TM Capture/Compare 3 interrupt */
;;;523            __DRV_TM_ENABLE_IT(mTM, TM_IT_CC3);
00006c  6820              LDR      r0,[r4,#0]
00006e  6840              LDR      r0,[r0,#4]
000070  2101              MOVS     r1,#1
000072  02c9              LSLS     r1,r1,#11
000074  4308              ORRS     r0,r0,r1
000076  6821              LDR      r1,[r4,#0]
000078  6048              STR      r0,[r1,#4]
;;;524            __DRV_TM_ENABLE_ITEA(mTM);
00007a  6820              LDR      r0,[r4,#0]
00007c  6840              LDR      r0,[r0,#4]
00007e  2101              MOVS     r1,#1
000080  4308              ORRS     r0,r0,r1
000082  6821              LDR      r1,[r4,#0]
000084  6048              STR      r0,[r1,#4]
;;;525        }
;;;526        break;
000086  e000              B        |L81.138|
                  |L81.136|
;;;527    
;;;528        default:
;;;529            break;
000088  bf00              NOP      
                  |L81.138|
00008a  bf00              NOP                            ;502
;;;530        }
;;;531    
;;;532        /* Enable the Output compare channel */
;;;533        TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_16bit_OutputCompare);
00008c  2202              MOVS     r2,#2
00008e  4629              MOV      r1,r5
000090  6820              LDR      r0,[r4,#0]
000092  f7fffffe          BL       TM_CCxChannelCmd
;;;534    
;;;535        // __MID_TM_ENABLE(mTM);
;;;536        __DRV_TM_ENABLE(mTM);
000096  6820              LDR      r0,[r4,#0]
000098  6900              LDR      r0,[r0,#0x10]
00009a  2103              MOVS     r1,#3
00009c  4308              ORRS     r0,r0,r1
00009e  6821              LDR      r1,[r4,#0]
0000a0  6108              STR      r0,[r1,#0x10]
;;;537    
;;;538        /* Return function status */
;;;539        return MID_SUCCESS;
0000a2  2000              MOVS     r0,#0
;;;540    }
0000a4  bd30              POP      {r4,r5,pc}
;;;541    
                          ENDP


                          AREA ||i.MID_TM_OC_Stop||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_Stop PROC
;;;456     */
;;;457    MID_StatusTypeDef MID_TM_OC_Stop(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;458    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;459        /* Disable the Output compare channel */
;;;460        TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;461    
;;;462        /* Disable the Peripheral */
;;;463        __DRV_TM_DISABLE(mTM);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  8e00              LDRH     r0,[r0,#0x30]
000016  2800              CMP      r0,#0
000018  d105              BNE      |L82.38|
00001a  6820              LDR      r0,[r4,#0]
00001c  6900              LDR      r0,[r0,#0x10]
00001e  0880              LSRS     r0,r0,#2
000020  0080              LSLS     r0,r0,#2
000022  6821              LDR      r1,[r4,#0]
000024  6108              STR      r0,[r1,#0x10]
                  |L82.38|
000026  bf00              NOP      
;;;464    
;;;465        /* Return function status */
;;;466        return MID_SUCCESS;
000028  2000              MOVS     r0,#0
;;;467    }
00002a  bd30              POP      {r4,r5,pc}
;;;468    
                          ENDP


                          AREA ||i.MID_TM_OC_Stop_DMA||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_Stop_DMA PROC
;;;756     */
;;;757    MID_StatusTypeDef MID_TM_OC_Stop_DMA(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;758    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;759        switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L83.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L83.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L83.56|
000012  2d03              CMP      r5,#3
000014  d119              BNE      |L83.74|
000016  e017              B        |L83.72|
                  |L83.24|
;;;760        {
;;;761        case MID_TM_Channel0:
;;;762            /* Disable the TM Capture/Compare 0 interrupt */
;;;763            __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH0_OC);
000018  6820              LDR      r0,[r4,#0]
00001a  6b00              LDR      r0,[r0,#0x30]
00001c  2101              MOVS     r1,#1
00001e  0609              LSLS     r1,r1,#24
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6308              STR      r0,[r1,#0x30]
;;;764            break;
000026  e011              B        |L83.76|
                  |L83.40|
;;;765    
;;;766        case MID_TM_Channel1:
;;;767            /* Disable the TM Capture/Compare 1 DMA request */
;;;768            __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH1_OC);
000028  6820              LDR      r0,[r4,#0]
00002a  6b00              LDR      r0,[r0,#0x30]
00002c  2101              MOVS     r1,#1
00002e  0649              LSLS     r1,r1,#25
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6308              STR      r0,[r1,#0x30]
;;;769            break;
000036  e009              B        |L83.76|
                  |L83.56|
;;;770    
;;;771        case MID_TM_Channel2:
;;;772            /* Disable the TM Capture/Compare 2 DMA request */
;;;773            __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH2_OC);
000038  6820              LDR      r0,[r4,#0]
00003a  6b00              LDR      r0,[r0,#0x30]
00003c  2101              MOVS     r1,#1
00003e  0689              LSLS     r1,r1,#26
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6308              STR      r0,[r1,#0x30]
;;;774            break;
000046  e001              B        |L83.76|
                  |L83.72|
;;;775    
;;;776        case MID_TM_Channel3:
;;;777            // MG32x02z MCU don't support Channel3 for OC output with DMA access
;;;778            break;
000048  e000              B        |L83.76|
                  |L83.74|
;;;779    
;;;780        default:
;;;781            break;
00004a  bf00              NOP      
                  |L83.76|
00004c  bf00              NOP                            ;764
;;;782        }
;;;783    
;;;784        /* Disable the Output compare channel */
;;;785        TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
00004e  2200              MOVS     r2,#0
000050  4629              MOV      r1,r5
000052  6820              LDR      r0,[r4,#0]
000054  f7fffffe          BL       TM_CCxChannelCmd
;;;786    
;;;787        /* Disable the Peripheral */
;;;788        __DRV_TM_DISABLE(mTM);
000058  bf00              NOP      
00005a  6820              LDR      r0,[r4,#0]
00005c  8e00              LDRH     r0,[r0,#0x30]
00005e  2800              CMP      r0,#0
000060  d105              BNE      |L83.110|
000062  6820              LDR      r0,[r4,#0]
000064  6900              LDR      r0,[r0,#0x10]
000066  0880              LSRS     r0,r0,#2
000068  0080              LSLS     r0,r0,#2
00006a  6821              LDR      r1,[r4,#0]
00006c  6108              STR      r0,[r1,#0x10]
                  |L83.110|
00006e  bf00              NOP      
;;;789    
;;;790        /* Change the mTM state */
;;;791        mTM->State = MID_TM_STATE_READY;
000070  2101              MOVS     r1,#1
000072  2021              MOVS     r0,#0x21
000074  5501              STRB     r1,[r0,r4]
;;;792    
;;;793        /* Return function status */
;;;794        return MID_SUCCESS;
000076  2000              MOVS     r0,#0
;;;795    }
000078  bd30              POP      {r4,r5,pc}
;;;796    ///@}
                          ENDP


                          AREA ||i.MID_TM_OC_Stop_IT||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_Stop_IT PROC
;;;564     */
;;;565    MID_StatusTypeDef MID_TM_OC_Stop_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;566    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;567        switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L84.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L84.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L84.56|
000012  2d03              CMP      r5,#3
000014  d120              BNE      |L84.88|
000016  e017              B        |L84.72|
                  |L84.24|
;;;568        {
;;;569        case MID_TM_Channel0:
;;;570        {
;;;571            /* Enable the TM Capture/Compare 0 interrupt */
;;;572            __DRV_TM_DISABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;573        }
;;;574        break;
000026  e018              B        |L84.90|
                  |L84.40|
;;;575    
;;;576        case MID_TM_Channel1:
;;;577        {
;;;578            /* Enable the TM Capture/Compare 1 interrupt */
;;;579            __DRV_TM_DISABLE_IT(mTM, TM_IT_CC1);
000028  6820              LDR      r0,[r4,#0]
00002a  6840              LDR      r0,[r0,#4]
00002c  2101              MOVS     r1,#1
00002e  0249              LSLS     r1,r1,#9
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6048              STR      r0,[r1,#4]
;;;580        }
;;;581        break;
000036  e010              B        |L84.90|
                  |L84.56|
;;;582    
;;;583        case MID_TM_Channel2:
;;;584        {
;;;585            /* Enable the TM Capture/Compare 2 interrupt */
;;;586            __DRV_TM_DISABLE_IT(mTM, TM_IT_CC2);
000038  6820              LDR      r0,[r4,#0]
00003a  6840              LDR      r0,[r0,#4]
00003c  2101              MOVS     r1,#1
00003e  0289              LSLS     r1,r1,#10
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6048              STR      r0,[r1,#4]
;;;587        }
;;;588        break;
000046  e008              B        |L84.90|
                  |L84.72|
;;;589    
;;;590        case MID_TM_Channel3:
;;;591        {
;;;592            /* Enable the TM Capture/Compare 3 interrupt */
;;;593            __DRV_TM_DISABLE_IT(mTM, TM_IT_CC3);
000048  6820              LDR      r0,[r4,#0]
00004a  6840              LDR      r0,[r0,#4]
00004c  2101              MOVS     r1,#1
00004e  02c9              LSLS     r1,r1,#11
000050  4388              BICS     r0,r0,r1
000052  6821              LDR      r1,[r4,#0]
000054  6048              STR      r0,[r1,#4]
;;;594        }
;;;595        break;
000056  e000              B        |L84.90|
                  |L84.88|
;;;596    
;;;597        default:
;;;598            break;
000058  bf00              NOP      
                  |L84.90|
00005a  bf00              NOP                            ;574
;;;599        }
;;;600    
;;;601        // check INT to disable ITEA
;;;602        if((mTM->Instance->INT.W & 0xFFFFFFFE) == 0)
00005c  6820              LDR      r0,[r4,#0]
00005e  6840              LDR      r0,[r0,#4]
000060  0840              LSRS     r0,r0,#1
000062  0040              LSLS     r0,r0,#1
000064  2800              CMP      r0,#0
000066  d10b              BNE      |L84.128|
;;;603            __DRV_TM_DISABLE_ITEA(mTM);
000068  bf00              NOP      
00006a  6820              LDR      r0,[r4,#0]
00006c  6840              LDR      r0,[r0,#4]
00006e  2800              CMP      r0,#0
000070  d005              BEQ      |L84.126|
000072  6820              LDR      r0,[r4,#0]
000074  6840              LDR      r0,[r0,#4]
000076  0840              LSRS     r0,r0,#1
000078  0040              LSLS     r0,r0,#1
00007a  6821              LDR      r1,[r4,#0]
00007c  6048              STR      r0,[r1,#4]
                  |L84.126|
00007e  bf00              NOP      
                  |L84.128|
;;;604        
;;;605        /* Enable the Output compare channel */
;;;606        TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
000080  2200              MOVS     r2,#0
000082  4629              MOV      r1,r5
000084  6820              LDR      r0,[r4,#0]
000086  f7fffffe          BL       TM_CCxChannelCmd
;;;607    
;;;608        /* Enable the Peripheral */
;;;609        __DRV_TM_DISABLE(mTM);
00008a  bf00              NOP      
00008c  6820              LDR      r0,[r4,#0]
00008e  8e00              LDRH     r0,[r0,#0x30]
000090  2800              CMP      r0,#0
000092  d105              BNE      |L84.160|
000094  6820              LDR      r0,[r4,#0]
000096  6900              LDR      r0,[r0,#0x10]
000098  0880              LSRS     r0,r0,#2
00009a  0080              LSLS     r0,r0,#2
00009c  6821              LDR      r1,[r4,#0]
00009e  6108              STR      r0,[r1,#0x10]
                  |L84.160|
0000a0  bf00              NOP      
;;;610    
;;;611        /* check IT for ITEA */
;;;612        if((mTM->Instance->INT.W & 0xFFFFFFFE) == 0)
0000a2  6820              LDR      r0,[r4,#0]
0000a4  6840              LDR      r0,[r0,#4]
0000a6  0840              LSRS     r0,r0,#1
0000a8  0040              LSLS     r0,r0,#1
0000aa  2800              CMP      r0,#0
0000ac  d10b              BNE      |L84.198|
;;;613            __DRV_TM_DISABLE_ITEA(mTM);
0000ae  bf00              NOP      
0000b0  6820              LDR      r0,[r4,#0]
0000b2  6840              LDR      r0,[r0,#4]
0000b4  2800              CMP      r0,#0
0000b6  d005              BEQ      |L84.196|
0000b8  6820              LDR      r0,[r4,#0]
0000ba  6840              LDR      r0,[r0,#4]
0000bc  0840              LSRS     r0,r0,#1
0000be  0040              LSLS     r0,r0,#1
0000c0  6821              LDR      r1,[r4,#0]
0000c2  6048              STR      r0,[r1,#4]
                  |L84.196|
0000c4  bf00              NOP      
                  |L84.198|
;;;614    
;;;615        /* Return function status */
;;;616        return MID_SUCCESS;
0000c6  2000              MOVS     r0,#0
;;;617    }
0000c8  bd30              POP      {r4,r5,pc}
;;;618    
                          ENDP


                          AREA ||i.MID_TM_OC_Struct_Init||, CODE, READONLY, ALIGN=1

                  MID_TM_OC_Struct_Init PROC
;;;5831    */
;;;5832   void MID_TM_OC_Struct_Init(TM_OC_InitTypeDef* sConfig)
000000  2102              MOVS     r1,#2
;;;5833   {
;;;5834       sConfig->OCMode         = TM_CH_16bit_OutputCompare;
000002  6001              STR      r1,[r0,#0]
;;;5835       sConfig->Pulse          = 1000;                         // duty cycle setting
000004  217d              MOVS     r1,#0x7d
000006  00c9              LSLS     r1,r1,#3
000008  8081              STRH     r1,[r0,#4]
;;;5836       sConfig->OCPolarity     = TM_OCPOLARITY_HIGH;           // No-Inverse
00000a  2100              MOVS     r1,#0
00000c  6081              STR      r1,[r0,#8]
;;;5837       sConfig->OCNPolarity    = TM_OCNPOLARITY_HIGH;          // No-Inverse
00000e  60c1              STR      r1,[r0,#0xc]
;;;5838       sConfig->OCHPolarity    = TM_OCHPOLARITY_HIGH;          // No-Inverse
000010  6101              STR      r1,[r0,#0x10]
;;;5839       sConfig->OCIdleState    = TM_OCIDLESTATE_RESET;         // OCxx : Output low in idle state
000012  6141              STR      r1,[r0,#0x14]
;;;5840       sConfig->OCNIdleState   = TM_OCNIDLESTATE_RESET;        // OCxN : Output low in idle state
000014  6181              STR      r1,[r0,#0x18]
;;;5841       sConfig->OCHIdleState   = TM_OCHIDLESTATE_RESET;        // OCxH : Output low in idle state
000016  61c1              STR      r1,[r0,#0x1c]
;;;5842   }
000018  4770              BX       lr
;;;5843   
                          ENDP


                          AREA ||i.MID_TM_OnePulseCallback||, CODE, READONLY, ALIGN=1

                  MID_TM_OnePulseCallback PROC
;;;5724    */
;;;5725   __weak void MID_TM_OnePulseCallback(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;5726   {
;;;5727       /* Prevent unused argument(s) compilation warning */
;;;5728       UNUSED(mTM);
;;;5729       /* NOTE : This function Should not be modified, when the callback is needed,
;;;5730                 the MID_TM_QEI_ErrorCallback could be implemented in the user file
;;;5731        */
;;;5732   
;;;5733   }
;;;5734   ///@}
                          ENDP


                          AREA ||i.MID_TM_OnePulse_GetState||, CODE, READONLY, ALIGN=1

                  MID_TM_OnePulse_GetState PROC
;;;5797    */
;;;5798   MID_TM_StateTypeDef MID_TM_OnePulse_GetState(TM_HandleTypeDef* mTM)
000000  4601              MOV      r1,r0
;;;5799   {
;;;5800       return mTM->State;
000002  2021              MOVS     r0,#0x21
000004  5c40              LDRB     r0,[r0,r1]
;;;5801   }
000006  4770              BX       lr
;;;5802   
                          ENDP


                          AREA ||i.MID_TM_PWM_ConfigChannel||, CODE, READONLY, ALIGN=1

                  MID_TM_PWM_ConfigChannel PROC
;;;5010    */
;;;5011   MID_StatusTypeDef MID_TM_PWM_ConfigChannel(TM_HandleTypeDef* mTM, TM_OC_InitTypeDef* sConfig, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;5012   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;5013       /* Check input state */
;;;5014       __MID_LOCK(mTM);
000008  bf00              NOP      
00000a  2020              MOVS     r0,#0x20
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L88.22|
000012  2002              MOVS     r0,#2
                  |L88.20|
;;;5015   
;;;5016       mTM->State = MID_TM_STATE_BUSY;
;;;5017   
;;;5018       switch(Channel)
;;;5019       {
;;;5020       case MID_TM_Channel0:
;;;5021       {
;;;5022           /* Configure the TM Channel 0 in PWM Compare */
;;;5023           TM_OC0_SetConfig(mTM->Instance, sConfig);
;;;5024       }
;;;5025       break;
;;;5026   
;;;5027       case MID_TM_Channel1:
;;;5028       {
;;;5029           /* Configure the TM Channel 1 in PWM Compare */
;;;5030           TM_OC1_SetConfig(mTM->Instance, sConfig);
;;;5031       }
;;;5032       break;
;;;5033   
;;;5034       case MID_TM_Channel2:
;;;5035       {
;;;5036           /* Configure the TM Channel 2 in PWM Compare */
;;;5037           TM_OC2_SetConfig(mTM->Instance, sConfig);
;;;5038       }
;;;5039       break;
;;;5040   
;;;5041       case MID_TM_Channel3:
;;;5042       {
;;;5043           /* Configure the TM Channel 3 in PWM Compare */
;;;5044           TM_OC3_SetConfig(mTM->Instance, sConfig);
;;;5045       }
;;;5046       break;
;;;5047   
;;;5048       default:
;;;5049           break;
;;;5050       }
;;;5051       mTM->State = MID_TM_STATE_READY;
;;;5052   
;;;5053       /* Release Lock */
;;;5054       __MID_UNLOCK(mTM);
;;;5055   
;;;5056       return MID_SUCCESS;
;;;5057   }
000014  bd70              POP      {r4-r6,pc}
                  |L88.22|
000016  2101              MOVS     r1,#1                 ;5014
000018  2020              MOVS     r0,#0x20              ;5014
00001a  5501              STRB     r1,[r0,r4]            ;5014
00001c  bf00              NOP                            ;5014
00001e  2100              MOVS     r1,#0                 ;5016
000020  2021              MOVS     r0,#0x21              ;5016
000022  5501              STRB     r1,[r0,r4]            ;5016
000024  2d00              CMP      r5,#0                 ;5018
000026  d006              BEQ      |L88.54|
000028  2d01              CMP      r5,#1                 ;5018
00002a  d009              BEQ      |L88.64|
00002c  2d02              CMP      r5,#2                 ;5018
00002e  d00c              BEQ      |L88.74|
000030  2d03              CMP      r5,#3                 ;5018
000032  d114              BNE      |L88.94|
000034  e00e              B        |L88.84|
                  |L88.54|
000036  4631              MOV      r1,r6                 ;5023
000038  6820              LDR      r0,[r4,#0]            ;5023
00003a  f7fffffe          BL       TM_OC0_SetConfig
00003e  e00f              B        |L88.96|
                  |L88.64|
000040  4631              MOV      r1,r6                 ;5030
000042  6820              LDR      r0,[r4,#0]            ;5030
000044  f7fffffe          BL       TM_OC1_SetConfig
000048  e00a              B        |L88.96|
                  |L88.74|
00004a  4631              MOV      r1,r6                 ;5037
00004c  6820              LDR      r0,[r4,#0]            ;5037
00004e  f7fffffe          BL       TM_OC2_SetConfig
000052  e005              B        |L88.96|
                  |L88.84|
000054  4631              MOV      r1,r6                 ;5044
000056  6820              LDR      r0,[r4,#0]            ;5044
000058  f7fffffe          BL       TM_OC3_SetConfig
00005c  e000              B        |L88.96|
                  |L88.94|
00005e  bf00              NOP                            ;5049
                  |L88.96|
000060  bf00              NOP                            ;5025
000062  2101              MOVS     r1,#1                 ;5051
000064  2021              MOVS     r0,#0x21              ;5051
000066  5501              STRB     r1,[r0,r4]            ;5051
000068  bf00              NOP                            ;5054
00006a  2100              MOVS     r1,#0                 ;5054
00006c  2020              MOVS     r0,#0x20              ;5054
00006e  5501              STRB     r1,[r0,r4]            ;5054
000070  bf00              NOP                            ;5054
000072  2000              MOVS     r0,#0                 ;5056
000074  e7ce              B        |L88.20|
;;;5058   
                          ENDP


                          AREA ||i.MID_TM_PWM_DTG_DeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_PWM_DTG_DeInit PROC
;;;2521    */
;;;2522   MID_StatusTypeDef MID_TM_PWM_DTG_DeInit(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;2523   {
000002  4604              MOV      r4,r0
;;;2524       /* Process Lockededed */
;;;2525       __MID_LOCK(mTM);
000004  bf00              NOP      
000006  2020              MOVS     r0,#0x20
000008  5d00              LDRB     r0,[r0,r4]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L89.18|
00000e  2002              MOVS     r0,#2
                  |L89.16|
;;;2526       
;;;2527       mTM->State = MID_TM_STATE_BUSY;
;;;2528   
;;;2529       /* Disable the TM Peripheral Clock */
;;;2530       __DRV_TM_DISABLE(mTM);
;;;2531   
;;;2532       /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;2533       MID_TM_PWM_DTG_MspDeInit(mTM);
;;;2534   
;;;2535       /* Change TM state */
;;;2536       mTM->State = MID_TM_STATE_RESET;
;;;2537   
;;;2538       /* Release Lock */
;;;2539       __MID_UNLOCK(mTM);
;;;2540   
;;;2541       return MID_SUCCESS;
;;;2542   }
000010  bd10              POP      {r4,pc}
                  |L89.18|
000012  2101              MOVS     r1,#1                 ;2525
000014  2020              MOVS     r0,#0x20              ;2525
000016  5501              STRB     r1,[r0,r4]            ;2525
000018  bf00              NOP                            ;2525
00001a  2100              MOVS     r1,#0                 ;2527
00001c  2021              MOVS     r0,#0x21              ;2527
00001e  5501              STRB     r1,[r0,r4]            ;2527
000020  bf00              NOP                            ;2530
000022  6820              LDR      r0,[r4,#0]            ;2530
000024  8e00              LDRH     r0,[r0,#0x30]         ;2530
000026  2800              CMP      r0,#0                 ;2530
000028  d105              BNE      |L89.54|
00002a  6820              LDR      r0,[r4,#0]            ;2530
00002c  6900              LDR      r0,[r0,#0x10]         ;2530
00002e  0880              LSRS     r0,r0,#2              ;2530
000030  0080              LSLS     r0,r0,#2              ;2530
000032  6821              LDR      r1,[r4,#0]            ;2530
000034  6108              STR      r0,[r1,#0x10]         ;2530
                  |L89.54|
000036  bf00              NOP                            ;2530
000038  4620              MOV      r0,r4                 ;2533
00003a  f7fffffe          BL       MID_TM_PWM_DTG_MspDeInit
00003e  2102              MOVS     r1,#2                 ;2536
000040  2021              MOVS     r0,#0x21              ;2536
000042  5501              STRB     r1,[r0,r4]            ;2536
000044  bf00              NOP                            ;2539
000046  2100              MOVS     r1,#0                 ;2539
000048  2020              MOVS     r0,#0x20              ;2539
00004a  5501              STRB     r1,[r0,r4]            ;2539
00004c  bf00              NOP                            ;2539
00004e  2000              MOVS     r0,#0                 ;2541
000050  e7de              B        |L89.16|
;;;2543   
                          ENDP


                          AREA ||i.MID_TM_PWM_DTG_Init||, CODE, READONLY, ALIGN=1

                  MID_TM_PWM_DTG_Init PROC
;;;2481    */
;;;2482   MID_StatusTypeDef MID_TM_PWM_DTG_Init(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;2483   {
000002  4604              MOV      r4,r0
;;;2484   
;;;2485       if(mTM->State == MID_TM_STATE_RESET)
000004  2021              MOVS     r0,#0x21
000006  5d00              LDRB     r0,[r0,r4]
000008  2802              CMP      r0,#2
00000a  d105              BNE      |L90.24|
;;;2486       {
;;;2487           /* Allocate lock resource and initialize it */
;;;2488           mTM->Lock = MID_UnLocked;
00000c  2100              MOVS     r1,#0
00000e  2020              MOVS     r0,#0x20
000010  5501              STRB     r1,[r0,r4]
;;;2489   
;;;2490           /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;2491           MID_TM_PWM_DTG_MspInit(mTM);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       MID_TM_PWM_DTG_MspInit
                  |L90.24|
;;;2492       }
;;;2493   
;;;2494       /* Set the TM state */
;;;2495       mTM->State= MID_TM_STATE_BUSY;
000018  2100              MOVS     r1,#0
00001a  2021              MOVS     r0,#0x21
00001c  5501              STRB     r1,[r0,r4]
;;;2496   
;;;2497       /* Init the base time for the Output Compare */
;;;2498       TM_Base_SetConfig(mTM->Instance,  &mTM->Init);
00001e  1d21              ADDS     r1,r4,#4
000020  6820              LDR      r0,[r4,#0]
000022  f7fffffe          BL       TM_Base_SetConfig
;;;2499   
;;;2500       /* Initialize the TM state*/
;;;2501       mTM->State= MID_TM_STATE_READY;
000026  2101              MOVS     r1,#1
000028  2021              MOVS     r0,#0x21
00002a  5501              STRB     r1,[r0,r4]
;;;2502   
;;;2503       return MID_SUCCESS;
00002c  2000              MOVS     r0,#0
;;;2504   
;;;2505   }
00002e  bd10              POP      {r4,pc}
;;;2506   
                          ENDP


                          AREA ||i.MID_TM_PWM_DTG_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_PWM_DTG_MspDeInit PROC
;;;2568    */
;;;2569   __weak void MID_TM_PWM_DTG_MspDeInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;2570   {
;;;2571       /* Prevent unused argument(s) compilation warning */
;;;2572       UNUSED(mTM);
;;;2573       /* NOTE : This function Should not be modified, when the callback is needed,
;;;2574                 the MID_TM_PWM_DTG_MspDeInit could be implemented in the user file
;;;2575        */
;;;2576   }
;;;2577   
                          ENDP


                          AREA ||i.MID_TM_PWM_DTG_MspInit||, CODE, READONLY, ALIGN=1

                  MID_TM_PWM_DTG_MspInit PROC
;;;2551    */
;;;2552   __weak void MID_TM_PWM_DTG_MspInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;2553   {
;;;2554       /* Prevent unused argument(s) compilation warning */
;;;2555       UNUSED(mTM);
;;;2556       /* NOTE : This function Should not be modified, when the callback is needed,
;;;2557                 the MID_TM_PWM_DTG_MspInit could be implemented in the user file
;;;2558        */
;;;2559   }
;;;2560   
                          ENDP


                          AREA ||i.MID_TM_PWM_DTG_Start||, CODE, READONLY, ALIGN=2

                  MID_TM_PWM_DTG_Start PROC
;;;2606    */
;;;2607   MID_StatusTypeDef MID_TM_PWM_DTG_Start(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;2608   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2609   
;;;2610       /* Enable the Capture compare channel */
;;;2611       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_16bit_PWM_COMPLEMENT);
000006  2206              MOVS     r2,#6
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;2612   
;;;2613       // Enable Break Control for PWM mode 
;;;2614       if(mTM->Instance == TM36) 
000010  4908              LDR      r1,|L93.52|
000012  6820              LDR      r0,[r4,#0]
000014  4288              CMP      r0,r1
000016  d105              BNE      |L93.36|
;;;2615       {
;;;2616           // control TM36_BK_EN & TM36_BK_EN3
;;;2617           __DRV_TM_ENABLE_BREAK(mTM);
000018  6820              LDR      r0,[r4,#0]
00001a  6c80              LDR      r0,[r0,#0x48]
00001c  2109              MOVS     r1,#9
00001e  4308              ORRS     r0,r0,r1
000020  6821              LDR      r1,[r4,#0]
000022  6488              STR      r0,[r1,#0x48]
                  |L93.36|
;;;2618       }
;;;2619   
;;;2620       /* Enable the Peripheral */
;;;2621       __DRV_TM_ENABLE(mTM);
000024  6820              LDR      r0,[r4,#0]
000026  6900              LDR      r0,[r0,#0x10]
000028  2103              MOVS     r1,#3
00002a  4308              ORRS     r0,r0,r1
00002c  6821              LDR      r1,[r4,#0]
00002e  6108              STR      r0,[r1,#0x10]
;;;2622   
;;;2623       /* Return function status */
;;;2624       return MID_SUCCESS;
000030  2000              MOVS     r0,#0
;;;2625   }
000032  bd30              POP      {r4,r5,pc}
;;;2626   
                          ENDP

                  |L93.52|
                          DCD      0x56860000

                          AREA ||i.MID_TM_PWM_DTG_Start_DMA||, CODE, READONLY, ALIGN=2

                  MID_TM_PWM_DTG_Start_DMA PROC
;;;2863    */
;;;2864   MID_StatusTypeDef MID_TM_PWM_DTG_Start_DMA(TM_HandleTypeDef* mTM, uint32_t Channel, uint32_t* pData, uint16_t Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2865   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;2866       if((mTM->State) == (MID_TM_STATE_BUSY))
00000a  2021              MOVS     r0,#0x21
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2800              CMP      r0,#0
000010  d101              BNE      |L94.22|
;;;2867           return MID_BUSY;
000012  2002              MOVS     r0,#2
                  |L94.20|
;;;2868       else if((mTM->State) == (MID_TM_STATE_READY))
;;;2869       {
;;;2870           if(((uint32_t)pData == 0U) && (Length > 0U))
;;;2871               return MID_FAILURE;
;;;2872           else
;;;2873               mTM->State = MID_TM_STATE_BUSY;
;;;2874       }
;;;2875   
;;;2876       switch(Channel)
;;;2877       {
;;;2878       case MID_TM_Channel0:
;;;2879       {
;;;2880           /* Set the DMA Period elapsed callback */
;;;2881           mTM->hDMA[TM_DMA_ID_CC0]->XferCpltCallback = &TM_DMADelayPulseCplt;
;;;2882   
;;;2883           /* Set the DMA error callback */
;;;2884           mTM->hDMA[TM_DMA_ID_CC0]->XferErrorCallback = TM_DMAError ;
;;;2885   
;;;2886           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC0], (uint32_t)pData, NULL, Length);
;;;2887   
;;;2888           /* Enable the TM Capture/Compare 0 DMA request */
;;;2889           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH0_OC);
;;;2890       }
;;;2891       break;
;;;2892   
;;;2893       case MID_TM_Channel1:
;;;2894       {
;;;2895   
;;;2896           /* Set the DMA Period elapsed callback */
;;;2897           mTM->hDMA[TM_DMA_ID_CC1]->XferCpltCallback = TM_DMADelayPulseCplt;
;;;2898   
;;;2899           /* Set the DMA error callback */
;;;2900           mTM->hDMA[TM_DMA_ID_CC1]->XferErrorCallback = TM_DMAError ;
;;;2901   
;;;2902           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC1], (uint32_t)pData, NULL, Length);
;;;2903   
;;;2904           /* Enable the TM Capture/Compare 1 DMA request */
;;;2905           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH1_OC);
;;;2906       }
;;;2907       break;
;;;2908   
;;;2909       case MID_TM_Channel2:
;;;2910       {
;;;2911           /* Set the DMA Period elapsed callback */
;;;2912           mTM->hDMA[TM_DMA_ID_CC2]->XferCpltCallback = TM_DMADelayPulseCplt;
;;;2913   
;;;2914           /* Set the DMA error callback */
;;;2915           mTM->hDMA[TM_DMA_ID_CC2]->XferErrorCallback = TM_DMAError ;
;;;2916   
;;;2917           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC2], (uint32_t)pData, NULL, Length);
;;;2918   
;;;2919           /* Enable the TM Capture/Compare 2 DMA request */
;;;2920           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH2_OC);
;;;2921       }
;;;2922       break;
;;;2923   
;;;2924       case MID_TM_Channel3:
;;;2925       {
;;;2926           /* update state */
;;;2927           mTM->State = MID_TM_STATE_READY;
;;;2928           // MG32x02z MCU don't support Channel3 for OC output
;;;2929           return MID_FAILURE;
;;;2930       }
;;;2931   
;;;2932       default:
;;;2933           break;
;;;2934       }
;;;2935   
;;;2936       /* Enable the Output compare channel */
;;;2937       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_16bit_PWM_COMPLEMENT);
;;;2938   
;;;2939       // Enable Break Control for PWM mode 
;;;2940       if(mTM->Instance == TM36) 
;;;2941       {
;;;2942           // control TM36_BK_EN & TM36_BK_EN3
;;;2943           __DRV_TM_ENABLE_BREAK(mTM);
;;;2944       }
;;;2945       
;;;2946       /* update state */
;;;2947       mTM->State = MID_TM_STATE_READY;
;;;2948   
;;;2949       /* Enable the Peripheral */
;;;2950       __DRV_TM_ENABLE(mTM);
;;;2951   
;;;2952       /* Return function status */
;;;2953       return MID_SUCCESS;
;;;2954   }
000014  bdf8              POP      {r3-r7,pc}
                  |L94.22|
000016  2021              MOVS     r0,#0x21              ;2868
000018  5d00              LDRB     r0,[r0,r4]            ;2868
00001a  2801              CMP      r0,#1                 ;2868
00001c  d107              BNE      |L94.46|
00001e  2d00              CMP      r5,#0                 ;2870
000020  d102              BNE      |L94.40|
000022  2f00              CMP      r7,#0                 ;2870
000024  d000              BEQ      |L94.40|
000026  e7f5              B        |L94.20|
                  |L94.40|
000028  2100              MOVS     r1,#0                 ;2873
00002a  2021              MOVS     r0,#0x21              ;2873
00002c  5501              STRB     r1,[r0,r4]            ;2873
                  |L94.46|
00002e  2e00              CMP      r6,#0                 ;2876
000030  d006              BEQ      |L94.64|
000032  2e01              CMP      r6,#1                 ;2876
000034  d018              BEQ      |L94.104|
000036  2e02              CMP      r6,#2                 ;2876
000038  d02a              BEQ      |L94.144|
00003a  2e03              CMP      r6,#3                 ;2876
00003c  d141              BNE      |L94.194|
00003e  e03b              B        |L94.184|
                  |L94.64|
000040  482e              LDR      r0,|L94.252|
000042  6921              LDR      r1,[r4,#0x10]         ;2881
000044  62c8              STR      r0,[r1,#0x2c]         ;2881
000046  482e              LDR      r0,|L94.256|
000048  6921              LDR      r1,[r4,#0x10]         ;2884
00004a  6348              STR      r0,[r1,#0x34]         ;2884
00004c  463b              MOV      r3,r7                 ;2886
00004e  2200              MOVS     r2,#0                 ;2886
000050  4629              MOV      r1,r5                 ;2886
000052  6920              LDR      r0,[r4,#0x10]         ;2886
000054  f7fffffe          BL       MID_DMA_Start_IT
000058  6820              LDR      r0,[r4,#0]            ;2889
00005a  6b00              LDR      r0,[r0,#0x30]         ;2889
00005c  2101              MOVS     r1,#1                 ;2889
00005e  0609              LSLS     r1,r1,#24             ;2889
000060  4308              ORRS     r0,r0,r1              ;2889
000062  6821              LDR      r1,[r4,#0]            ;2889
000064  6308              STR      r0,[r1,#0x30]         ;2889
000066  e02d              B        |L94.196|
                  |L94.104|
000068  4924              LDR      r1,|L94.252|
00006a  6960              LDR      r0,[r4,#0x14]         ;2897
00006c  62c1              STR      r1,[r0,#0x2c]         ;2897
00006e  4924              LDR      r1,|L94.256|
000070  6960              LDR      r0,[r4,#0x14]         ;2900
000072  6341              STR      r1,[r0,#0x34]         ;2900
000074  463b              MOV      r3,r7                 ;2902
000076  2200              MOVS     r2,#0                 ;2902
000078  4629              MOV      r1,r5                 ;2902
00007a  6960              LDR      r0,[r4,#0x14]         ;2902
00007c  f7fffffe          BL       MID_DMA_Start_IT
000080  6820              LDR      r0,[r4,#0]            ;2905
000082  6b00              LDR      r0,[r0,#0x30]         ;2905
000084  2101              MOVS     r1,#1                 ;2905
000086  0649              LSLS     r1,r1,#25             ;2905
000088  4308              ORRS     r0,r0,r1              ;2905
00008a  6821              LDR      r1,[r4,#0]            ;2905
00008c  6308              STR      r0,[r1,#0x30]         ;2905
00008e  e019              B        |L94.196|
                  |L94.144|
000090  491a              LDR      r1,|L94.252|
000092  69a0              LDR      r0,[r4,#0x18]         ;2912
000094  62c1              STR      r1,[r0,#0x2c]         ;2912
000096  491a              LDR      r1,|L94.256|
000098  69a0              LDR      r0,[r4,#0x18]         ;2915
00009a  6341              STR      r1,[r0,#0x34]         ;2915
00009c  463b              MOV      r3,r7                 ;2917
00009e  2200              MOVS     r2,#0                 ;2917
0000a0  4629              MOV      r1,r5                 ;2917
0000a2  69a0              LDR      r0,[r4,#0x18]         ;2917
0000a4  f7fffffe          BL       MID_DMA_Start_IT
0000a8  6820              LDR      r0,[r4,#0]            ;2920
0000aa  6b00              LDR      r0,[r0,#0x30]         ;2920
0000ac  2101              MOVS     r1,#1                 ;2920
0000ae  0689              LSLS     r1,r1,#26             ;2920
0000b0  4308              ORRS     r0,r0,r1              ;2920
0000b2  6821              LDR      r1,[r4,#0]            ;2920
0000b4  6308              STR      r0,[r1,#0x30]         ;2920
0000b6  e005              B        |L94.196|
                  |L94.184|
0000b8  2101              MOVS     r1,#1                 ;2927
0000ba  2021              MOVS     r0,#0x21              ;2927
0000bc  5501              STRB     r1,[r0,r4]            ;2927
0000be  2001              MOVS     r0,#1                 ;2929
0000c0  e7a8              B        |L94.20|
                  |L94.194|
0000c2  bf00              NOP                            ;2933
                  |L94.196|
0000c4  bf00              NOP                            ;2891
0000c6  2206              MOVS     r2,#6                 ;2937
0000c8  4631              MOV      r1,r6                 ;2937
0000ca  6820              LDR      r0,[r4,#0]            ;2937
0000cc  f7fffffe          BL       TM_CCxChannelCmd
0000d0  490c              LDR      r1,|L94.260|
0000d2  6820              LDR      r0,[r4,#0]            ;2940
0000d4  4288              CMP      r0,r1                 ;2940
0000d6  d105              BNE      |L94.228|
0000d8  6820              LDR      r0,[r4,#0]            ;2943
0000da  6c80              LDR      r0,[r0,#0x48]         ;2943
0000dc  2109              MOVS     r1,#9                 ;2943
0000de  4308              ORRS     r0,r0,r1              ;2943
0000e0  6821              LDR      r1,[r4,#0]            ;2943
0000e2  6488              STR      r0,[r1,#0x48]         ;2943
                  |L94.228|
0000e4  2101              MOVS     r1,#1                 ;2947
0000e6  2021              MOVS     r0,#0x21              ;2947
0000e8  5501              STRB     r1,[r0,r4]            ;2947
0000ea  6820              LDR      r0,[r4,#0]            ;2950
0000ec  6900              LDR      r0,[r0,#0x10]         ;2950
0000ee  2103              MOVS     r1,#3                 ;2950
0000f0  4308              ORRS     r0,r0,r1              ;2950
0000f2  6821              LDR      r1,[r4,#0]            ;2950
0000f4  6108              STR      r0,[r1,#0x10]         ;2950
0000f6  2000              MOVS     r0,#0                 ;2953
0000f8  e78c              B        |L94.20|
;;;2955   
                          ENDP

0000fa  0000              DCW      0x0000
                  |L94.252|
                          DCD      TM_DMADelayPulseCplt
                  |L94.256|
                          DCD      TM_DMAError
                  |L94.260|
                          DCD      0x56860000

                          AREA ||i.MID_TM_PWM_DTG_Start_IT||, CODE, READONLY, ALIGN=2

                  MID_TM_PWM_DTG_Start_IT PROC
;;;2680    */
;;;2681   MID_StatusTypeDef MID_TM_PWM_DTG_Start_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;2682   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2683       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L95.24|
00000a  2d01              CMP      r5,#1
00000c  d012              BEQ      |L95.52|
00000e  2d02              CMP      r5,#2
000010  d01e              BEQ      |L95.80|
000012  2d03              CMP      r5,#3
000014  d12c              BNE      |L95.112|
000016  e029              B        |L95.108|
                  |L95.24|
;;;2684       {
;;;2685       case MID_TM_Channel0:
;;;2686       {
;;;2687           /* Enable the TM Capture/Compare 0 interrupt */
;;;2688           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4308              ORRS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;2689           __DRV_TM_ENABLE_ITEA(mTM);
000026  6820              LDR      r0,[r4,#0]
000028  6840              LDR      r0,[r0,#4]
00002a  2101              MOVS     r1,#1
00002c  4308              ORRS     r0,r0,r1
00002e  6821              LDR      r1,[r4,#0]
000030  6048              STR      r0,[r1,#4]
;;;2690       }
;;;2691       break;
000032  e01e              B        |L95.114|
                  |L95.52|
;;;2692   
;;;2693       case MID_TM_Channel1:
;;;2694       {
;;;2695           /* Enable the TM Capture/Compare 1 interrupt */
;;;2696           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC1);
000034  6820              LDR      r0,[r4,#0]
000036  6840              LDR      r0,[r0,#4]
000038  2101              MOVS     r1,#1
00003a  0249              LSLS     r1,r1,#9
00003c  4308              ORRS     r0,r0,r1
00003e  6821              LDR      r1,[r4,#0]
000040  6048              STR      r0,[r1,#4]
;;;2697           __DRV_TM_ENABLE_ITEA(mTM);
000042  6820              LDR      r0,[r4,#0]
000044  6840              LDR      r0,[r0,#4]
000046  2101              MOVS     r1,#1
000048  4308              ORRS     r0,r0,r1
00004a  6821              LDR      r1,[r4,#0]
00004c  6048              STR      r0,[r1,#4]
;;;2698       }
;;;2699       break;
00004e  e010              B        |L95.114|
                  |L95.80|
;;;2700   
;;;2701       case MID_TM_Channel2:
;;;2702       {
;;;2703           /* Enable the TM Capture/Compare 2 interrupt */
;;;2704           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC2);
000050  6820              LDR      r0,[r4,#0]
000052  6840              LDR      r0,[r0,#4]
000054  2101              MOVS     r1,#1
000056  0289              LSLS     r1,r1,#10
000058  4308              ORRS     r0,r0,r1
00005a  6821              LDR      r1,[r4,#0]
00005c  6048              STR      r0,[r1,#4]
;;;2705           __DRV_TM_ENABLE_ITEA(mTM);
00005e  6820              LDR      r0,[r4,#0]
000060  6840              LDR      r0,[r0,#4]
000062  2101              MOVS     r1,#1
000064  4308              ORRS     r0,r0,r1
000066  6821              LDR      r1,[r4,#0]
000068  6048              STR      r0,[r1,#4]
;;;2706       }
;;;2707       break;
00006a  e002              B        |L95.114|
                  |L95.108|
;;;2708   
;;;2709       case MID_TM_Channel3:
;;;2710       {
;;;2711           // MG32x02z MCU don't support Channel3 for OC output
;;;2712           return MID_FAILURE;
00006c  2001              MOVS     r0,#1
                  |L95.110|
;;;2713       }
;;;2714   
;;;2715       default:
;;;2716           break;
;;;2717       }
;;;2718   
;;;2719       /* Enable the Output compare channel */
;;;2720       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_16bit_PWM_COMPLEMENT);
;;;2721   
;;;2722       // Enable Break Control for PWM mode 
;;;2723       if(mTM->Instance == TM36) 
;;;2724       {
;;;2725           // control TM36_BK_EN & TM36_BK_EN3
;;;2726           __DRV_TM_ENABLE_BREAK(mTM);
;;;2727       }
;;;2728   
;;;2729       // __MID_TM_ENABLE(mTM);
;;;2730       __DRV_TM_ENABLE(mTM);
;;;2731   
;;;2732       /* Return function status */
;;;2733       return MID_SUCCESS;
;;;2734   }
00006e  bd30              POP      {r4,r5,pc}
                  |L95.112|
000070  bf00              NOP                            ;2716
                  |L95.114|
000072  bf00              NOP                            ;2691
000074  2206              MOVS     r2,#6                 ;2720
000076  4629              MOV      r1,r5                 ;2720
000078  6820              LDR      r0,[r4,#0]            ;2720
00007a  f7fffffe          BL       TM_CCxChannelCmd
00007e  4909              LDR      r1,|L95.164|
000080  6820              LDR      r0,[r4,#0]            ;2723
000082  4288              CMP      r0,r1                 ;2723
000084  d105              BNE      |L95.146|
000086  6820              LDR      r0,[r4,#0]            ;2726
000088  6c80              LDR      r0,[r0,#0x48]         ;2726
00008a  2109              MOVS     r1,#9                 ;2726
00008c  4308              ORRS     r0,r0,r1              ;2726
00008e  6821              LDR      r1,[r4,#0]            ;2726
000090  6488              STR      r0,[r1,#0x48]         ;2726
                  |L95.146|
000092  6820              LDR      r0,[r4,#0]            ;2730
000094  6900              LDR      r0,[r0,#0x10]         ;2730
000096  2103              MOVS     r1,#3                 ;2730
000098  4308              ORRS     r0,r0,r1              ;2730
00009a  6821              LDR      r1,[r4,#0]            ;2730
00009c  6108              STR      r0,[r1,#0x10]         ;2730
00009e  2000              MOVS     r0,#0                 ;2733
0000a0  e7e5              B        |L95.110|
;;;2735   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L95.164|
                          DCD      0x56860000

                          AREA ||i.MID_TM_PWM_DTG_Stop||, CODE, READONLY, ALIGN=2

                  MID_TM_PWM_DTG_Stop PROC
;;;2643    */
;;;2644   MID_StatusTypeDef MID_TM_PWM_DTG_Stop(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;2645   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2646       /* Disable the Output compare channel */
;;;2647       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;2648   
;;;2649       // Disable Break Control for PWM mode 
;;;2650       if(mTM->Instance == TM36) 
000010  490e              LDR      r1,|L96.76|
000012  6820              LDR      r0,[r4,#0]
000014  4288              CMP      r0,r1
000016  d10b              BNE      |L96.48|
;;;2651       {
;;;2652           // control TM36_BK_EN & TM36_BK_EN3
;;;2653           if((mTM->Instance->CCMDS.H[0] & TM_ALLCH_PWMMode) == 0x0000)
000018  6820              LDR      r0,[r4,#0]
00001a  8e00              LDRH     r0,[r0,#0x30]
00001c  490c              LDR      r1,|L96.80|
00001e  4008              ANDS     r0,r0,r1
000020  2800              CMP      r0,#0
000022  d105              BNE      |L96.48|
;;;2654               __DRV_TM_DISABLE_BREAK(mTM);
000024  6820              LDR      r0,[r4,#0]
000026  6c80              LDR      r0,[r0,#0x48]
000028  2109              MOVS     r1,#9
00002a  4388              BICS     r0,r0,r1
00002c  6821              LDR      r1,[r4,#0]
00002e  6488              STR      r0,[r1,#0x48]
                  |L96.48|
;;;2655       }
;;;2656   
;;;2657       /* Disable the Peripheral */
;;;2658       __DRV_TM_DISABLE(mTM);
000030  bf00              NOP      
000032  6820              LDR      r0,[r4,#0]
000034  8e00              LDRH     r0,[r0,#0x30]
000036  2800              CMP      r0,#0
000038  d105              BNE      |L96.70|
00003a  6820              LDR      r0,[r4,#0]
00003c  6900              LDR      r0,[r0,#0x10]
00003e  0880              LSRS     r0,r0,#2
000040  0080              LSLS     r0,r0,#2
000042  6821              LDR      r1,[r4,#0]
000044  6108              STR      r0,[r1,#0x10]
                  |L96.70|
000046  bf00              NOP      
;;;2659   
;;;2660       /* Return function status */
;;;2661       return MID_SUCCESS;
000048  2000              MOVS     r0,#0
;;;2662   }
00004a  bd30              POP      {r4,r5,pc}
;;;2663   
                          ENDP

                  |L96.76|
                          DCD      0x56860000
                  |L96.80|
                          DCD      0x00004444

                          AREA ||i.MID_TM_PWM_DTG_Stop_DMA||, CODE, READONLY, ALIGN=2

                  MID_TM_PWM_DTG_Stop_DMA PROC
;;;2970    */
;;;2971   MID_StatusTypeDef MID_TM_PWM_DTG_Stop_DMA(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;2972   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2973       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L97.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L97.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L97.56|
000012  2d03              CMP      r5,#3
000014  d11d              BNE      |L97.82|
000016  e017              B        |L97.72|
                  |L97.24|
;;;2974       {
;;;2975       case MID_TM_Channel0:
;;;2976       {
;;;2977           /* Disable the TM Capture/Compare 0 interrupt */
;;;2978           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH0_OC);
000018  6820              LDR      r0,[r4,#0]
00001a  6b00              LDR      r0,[r0,#0x30]
00001c  2101              MOVS     r1,#1
00001e  0609              LSLS     r1,r1,#24
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6308              STR      r0,[r1,#0x30]
;;;2979       }
;;;2980       break;
000026  e015              B        |L97.84|
                  |L97.40|
;;;2981   
;;;2982       case MID_TM_Channel1:
;;;2983       {
;;;2984           /* Disable the TM Capture/Compare 1 DMA request */
;;;2985           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH1_OC);
000028  6820              LDR      r0,[r4,#0]
00002a  6b00              LDR      r0,[r0,#0x30]
00002c  2101              MOVS     r1,#1
00002e  0649              LSLS     r1,r1,#25
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6308              STR      r0,[r1,#0x30]
;;;2986       }
;;;2987       break;
000036  e00d              B        |L97.84|
                  |L97.56|
;;;2988   
;;;2989       case MID_TM_Channel2:
;;;2990       {
;;;2991           /* Disable the TM Capture/Compare 2 DMA request */
;;;2992           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH2_OC);
000038  6820              LDR      r0,[r4,#0]
00003a  6b00              LDR      r0,[r0,#0x30]
00003c  2101              MOVS     r1,#1
00003e  0689              LSLS     r1,r1,#26
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6308              STR      r0,[r1,#0x30]
;;;2993       }
;;;2994       break;
000046  e005              B        |L97.84|
                  |L97.72|
;;;2995   
;;;2996       case MID_TM_Channel3:
;;;2997       {
;;;2998           // MG32x02z MCU don't support Channel3 for OC output
;;;2999           
;;;3000           /* Change the mTM state */
;;;3001           mTM->State = MID_TM_STATE_READY;
000048  2101              MOVS     r1,#1
00004a  2021              MOVS     r0,#0x21
00004c  5501              STRB     r1,[r0,r4]
;;;3002           // MG32x02z MCU don't support Channel3 for OC output
;;;3003           return MID_FAILURE;
00004e  2001              MOVS     r0,#1
                  |L97.80|
;;;3004       }
;;;3005   
;;;3006       default:
;;;3007           break;
;;;3008       }
;;;3009   
;;;3010       /* Disable the Output compare channel */
;;;3011       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
;;;3012   
;;;3013       // Disable Break Control for PWM mode 
;;;3014       if(mTM->Instance == TM36) 
;;;3015       {
;;;3016           // control TM36_BK_EN & TM36_BK_EN3
;;;3017           if((mTM->Instance->CCMDS.H[0] & TM_ALLCH_PWMMode) == 0x0000)
;;;3018               __DRV_TM_DISABLE_BREAK(mTM);
;;;3019       }
;;;3020   
;;;3021       /* Disable the Peripheral */
;;;3022       __DRV_TM_DISABLE(mTM);
;;;3023   
;;;3024       /* Change the mTM state */
;;;3025       mTM->State = MID_TM_STATE_READY;
;;;3026   
;;;3027       /* Return function status */
;;;3028       return MID_SUCCESS;
;;;3029   }
000050  bd30              POP      {r4,r5,pc}
                  |L97.82|
000052  bf00              NOP                            ;3007
                  |L97.84|
000054  bf00              NOP                            ;2980
000056  2200              MOVS     r2,#0                 ;3011
000058  4629              MOV      r1,r5                 ;3011
00005a  6820              LDR      r0,[r4,#0]            ;3011
00005c  f7fffffe          BL       TM_CCxChannelCmd
000060  4910              LDR      r1,|L97.164|
000062  6820              LDR      r0,[r4,#0]            ;3014
000064  4288              CMP      r0,r1                 ;3014
000066  d10b              BNE      |L97.128|
000068  6820              LDR      r0,[r4,#0]            ;3017
00006a  8e00              LDRH     r0,[r0,#0x30]         ;3017
00006c  490e              LDR      r1,|L97.168|
00006e  4008              ANDS     r0,r0,r1              ;3017
000070  2800              CMP      r0,#0                 ;3017
000072  d105              BNE      |L97.128|
000074  6820              LDR      r0,[r4,#0]            ;3018
000076  6c80              LDR      r0,[r0,#0x48]         ;3018
000078  2109              MOVS     r1,#9                 ;3018
00007a  4388              BICS     r0,r0,r1              ;3018
00007c  6821              LDR      r1,[r4,#0]            ;3018
00007e  6488              STR      r0,[r1,#0x48]         ;3018
                  |L97.128|
000080  bf00              NOP                            ;3022
000082  6820              LDR      r0,[r4,#0]            ;3022
000084  8e00              LDRH     r0,[r0,#0x30]         ;3022
000086  2800              CMP      r0,#0                 ;3022
000088  d105              BNE      |L97.150|
00008a  6820              LDR      r0,[r4,#0]            ;3022
00008c  6900              LDR      r0,[r0,#0x10]         ;3022
00008e  0880              LSRS     r0,r0,#2              ;3022
000090  0080              LSLS     r0,r0,#2              ;3022
000092  6821              LDR      r1,[r4,#0]            ;3022
000094  6108              STR      r0,[r1,#0x10]         ;3022
                  |L97.150|
000096  bf00              NOP                            ;3022
000098  2101              MOVS     r1,#1                 ;3025
00009a  2021              MOVS     r0,#0x21              ;3025
00009c  5501              STRB     r1,[r0,r4]            ;3025
00009e  2000              MOVS     r0,#0                 ;3028
0000a0  e7d6              B        |L97.80|
;;;3030   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L97.164|
                          DCD      0x56860000
                  |L97.168|
                          DCD      0x00004444

                          AREA ||i.MID_TM_PWM_DTG_Stop_IT||, CODE, READONLY, ALIGN=2

                  MID_TM_PWM_DTG_Stop_IT PROC
;;;2752    */
;;;2753   MID_StatusTypeDef MID_TM_PWM_DTG_Stop_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;2754   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2755       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L98.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L98.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L98.56|
000012  2d03              CMP      r5,#3
000014  d11d              BNE      |L98.82|
000016  e017              B        |L98.72|
                  |L98.24|
;;;2756       {
;;;2757       case MID_TM_Channel0:
;;;2758       {
;;;2759           /* Enable the TM Capture/Compare 0 interrupt */
;;;2760           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;2761       }
;;;2762       break;
000026  e015              B        |L98.84|
                  |L98.40|
;;;2763   
;;;2764       case MID_TM_Channel1:
;;;2765       {
;;;2766           /* Enable the TM Capture/Compare 1 interrupt */
;;;2767           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC1);
000028  6820              LDR      r0,[r4,#0]
00002a  6840              LDR      r0,[r0,#4]
00002c  2101              MOVS     r1,#1
00002e  0249              LSLS     r1,r1,#9
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6048              STR      r0,[r1,#4]
;;;2768       }
;;;2769       break;
000036  e00d              B        |L98.84|
                  |L98.56|
;;;2770   
;;;2771       case MID_TM_Channel2:
;;;2772       {
;;;2773           /* Enable the TM Capture/Compare 2 interrupt */
;;;2774           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC2);
000038  6820              LDR      r0,[r4,#0]
00003a  6840              LDR      r0,[r0,#4]
00003c  2101              MOVS     r1,#1
00003e  0289              LSLS     r1,r1,#10
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6048              STR      r0,[r1,#4]
;;;2775       }
;;;2776       break;
000046  e005              B        |L98.84|
                  |L98.72|
;;;2777   
;;;2778       case MID_TM_Channel3:
;;;2779       {
;;;2780           /* update state */
;;;2781           mTM->State = MID_TM_STATE_READY;
000048  2101              MOVS     r1,#1
00004a  2021              MOVS     r0,#0x21
00004c  5501              STRB     r1,[r0,r4]
;;;2782           // MG32x02z MCU don't support Channel3 for OC output
;;;2783           return MID_FAILURE;
00004e  2001              MOVS     r0,#1
                  |L98.80|
;;;2784       }
;;;2785   
;;;2786       default:
;;;2787           break;
;;;2788       }
;;;2789   
;;;2790       /* Enable the Output compare channel */
;;;2791       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
;;;2792   
;;;2793       // Disable Break Control for PWM mode 
;;;2794       if(mTM->Instance == TM36) 
;;;2795       {
;;;2796           // control TM36_BK_EN & TM36_BK_EN3
;;;2797           if((mTM->Instance->CCMDS.H[0] & TM_ALLCH_PWMMode) == 0x0000)
;;;2798               __DRV_TM_DISABLE_BREAK(mTM);
;;;2799       }
;;;2800   
;;;2801       /* Enable the Peripheral */
;;;2802       __DRV_TM_DISABLE(mTM);
;;;2803   
;;;2804       /* check IT for ITEA */
;;;2805       if((mTM->Instance->INT.W & 0xFFFFFFFE) == 0)
;;;2806           __DRV_TM_DISABLE_ITEA(mTM);
;;;2807   
;;;2808       /* Return function status */
;;;2809       return MID_SUCCESS;
;;;2810   }
000050  bd30              POP      {r4,r5,pc}
                  |L98.82|
000052  bf00              NOP                            ;2787
                  |L98.84|
000054  bf00              NOP                            ;2762
000056  2200              MOVS     r2,#0                 ;2791
000058  4629              MOV      r1,r5                 ;2791
00005a  6820              LDR      r0,[r4,#0]            ;2791
00005c  f7fffffe          BL       TM_CCxChannelCmd
000060  4917              LDR      r1,|L98.192|
000062  6820              LDR      r0,[r4,#0]            ;2794
000064  4288              CMP      r0,r1                 ;2794
000066  d10b              BNE      |L98.128|
000068  6820              LDR      r0,[r4,#0]            ;2797
00006a  8e00              LDRH     r0,[r0,#0x30]         ;2797
00006c  4915              LDR      r1,|L98.196|
00006e  4008              ANDS     r0,r0,r1              ;2797
000070  2800              CMP      r0,#0                 ;2797
000072  d105              BNE      |L98.128|
000074  6820              LDR      r0,[r4,#0]            ;2798
000076  6c80              LDR      r0,[r0,#0x48]         ;2798
000078  2109              MOVS     r1,#9                 ;2798
00007a  4388              BICS     r0,r0,r1              ;2798
00007c  6821              LDR      r1,[r4,#0]            ;2798
00007e  6488              STR      r0,[r1,#0x48]         ;2798
                  |L98.128|
000080  bf00              NOP                            ;2802
000082  6820              LDR      r0,[r4,#0]            ;2802
000084  8e00              LDRH     r0,[r0,#0x30]         ;2802
000086  2800              CMP      r0,#0                 ;2802
000088  d105              BNE      |L98.150|
00008a  6820              LDR      r0,[r4,#0]            ;2802
00008c  6900              LDR      r0,[r0,#0x10]         ;2802
00008e  0880              LSRS     r0,r0,#2              ;2802
000090  0080              LSLS     r0,r0,#2              ;2802
000092  6821              LDR      r1,[r4,#0]            ;2802
000094  6108              STR      r0,[r1,#0x10]         ;2802
                  |L98.150|
000096  bf00              NOP                            ;2802
000098  6820              LDR      r0,[r4,#0]            ;2805
00009a  6840              LDR      r0,[r0,#4]            ;2805
00009c  0840              LSRS     r0,r0,#1              ;2805
00009e  0040              LSLS     r0,r0,#1              ;2805
0000a0  2800              CMP      r0,#0                 ;2805
0000a2  d10b              BNE      |L98.188|
0000a4  bf00              NOP                            ;2806
0000a6  6820              LDR      r0,[r4,#0]            ;2806
0000a8  6840              LDR      r0,[r0,#4]            ;2806
0000aa  2800              CMP      r0,#0                 ;2806
0000ac  d005              BEQ      |L98.186|
0000ae  6820              LDR      r0,[r4,#0]            ;2806
0000b0  6840              LDR      r0,[r0,#4]            ;2806
0000b2  0840              LSRS     r0,r0,#1              ;2806
0000b4  0040              LSLS     r0,r0,#1              ;2806
0000b6  6821              LDR      r1,[r4,#0]            ;2806
0000b8  6048              STR      r0,[r1,#4]            ;2806
                  |L98.186|
0000ba  bf00              NOP                            ;2806
                  |L98.188|
0000bc  2000              MOVS     r0,#0                 ;2809
0000be  e7c7              B        |L98.80|
;;;2811   
                          ENDP

                  |L98.192|
                          DCD      0x56860000
                  |L98.196|
                          DCD      0x00004444

                          AREA ||i.MID_TM_PWM_DeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_PWM_DeInit PROC
;;;1322    */
;;;1323   MID_StatusTypeDef MID_TM_PWM_DeInit(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;1324   {
000002  4604              MOV      r4,r0
;;;1325       /* Release Lock */
;;;1326       __MID_LOCK(mTM);
000004  bf00              NOP      
000006  2020              MOVS     r0,#0x20
000008  5d00              LDRB     r0,[r0,r4]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L99.18|
00000e  2002              MOVS     r0,#2
                  |L99.16|
;;;1327       
;;;1328       mTM->State = MID_TM_STATE_BUSY;
;;;1329   
;;;1330       /* Disable the TM Peripheral Clock */
;;;1331       __DRV_TM_DISABLE(mTM);
;;;1332   
;;;1333       /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;1334       MID_TM_PWM_MspDeInit(mTM);
;;;1335   
;;;1336       /* Change TM state */
;;;1337       mTM->State = MID_TM_STATE_RESET;
;;;1338   
;;;1339       /* Release Lock */
;;;1340       __MID_UNLOCK(mTM);
;;;1341   
;;;1342       return MID_SUCCESS;
;;;1343   }
000010  bd10              POP      {r4,pc}
                  |L99.18|
000012  2101              MOVS     r1,#1                 ;1326
000014  2020              MOVS     r0,#0x20              ;1326
000016  5501              STRB     r1,[r0,r4]            ;1326
000018  bf00              NOP                            ;1326
00001a  2100              MOVS     r1,#0                 ;1328
00001c  2021              MOVS     r0,#0x21              ;1328
00001e  5501              STRB     r1,[r0,r4]            ;1328
000020  bf00              NOP                            ;1331
000022  6820              LDR      r0,[r4,#0]            ;1331
000024  8e00              LDRH     r0,[r0,#0x30]         ;1331
000026  2800              CMP      r0,#0                 ;1331
000028  d105              BNE      |L99.54|
00002a  6820              LDR      r0,[r4,#0]            ;1331
00002c  6900              LDR      r0,[r0,#0x10]         ;1331
00002e  0880              LSRS     r0,r0,#2              ;1331
000030  0080              LSLS     r0,r0,#2              ;1331
000032  6821              LDR      r1,[r4,#0]            ;1331
000034  6108              STR      r0,[r1,#0x10]         ;1331
                  |L99.54|
000036  bf00              NOP                            ;1331
000038  4620              MOV      r0,r4                 ;1334
00003a  f7fffffe          BL       MID_TM_PWM_MspDeInit
00003e  2102              MOVS     r1,#2                 ;1337
000040  2021              MOVS     r0,#0x21              ;1337
000042  5501              STRB     r1,[r0,r4]            ;1337
000044  bf00              NOP                            ;1340
000046  2100              MOVS     r1,#0                 ;1340
000048  2020              MOVS     r0,#0x20              ;1340
00004a  5501              STRB     r1,[r0,r4]            ;1340
00004c  bf00              NOP                            ;1340
00004e  2000              MOVS     r0,#0                 ;1342
000050  e7de              B        |L99.16|
;;;1344   
                          ENDP


                          AREA ||i.MID_TM_PWM_GetState||, CODE, READONLY, ALIGN=1

                  MID_TM_PWM_GetState PROC
;;;5773    */
;;;5774   MID_TM_StateTypeDef MID_TM_PWM_GetState(TM_HandleTypeDef* mTM)
000000  4601              MOV      r1,r0
;;;5775   {
;;;5776       return mTM->State;
000002  2021              MOVS     r0,#0x21
000004  5c40              LDRB     r0,[r0,r1]
;;;5777   }
000006  4770              BX       lr
;;;5778   
                          ENDP


                          AREA ||i.MID_TM_PWM_Init||, CODE, READONLY, ALIGN=1

                  MID_TM_PWM_Init PROC
;;;1282    */
;;;1283   MID_StatusTypeDef MID_TM_PWM_Init(TM_HandleTypeDef* mTM)
000000  b510              PUSH     {r4,lr}
;;;1284   {
000002  4604              MOV      r4,r0
;;;1285   
;;;1286       if(mTM->State == MID_TM_STATE_RESET)
000004  2021              MOVS     r0,#0x21
000006  5d00              LDRB     r0,[r0,r4]
000008  2802              CMP      r0,#2
00000a  d105              BNE      |L101.24|
;;;1287       {
;;;1288           /* Allocate lock resource and initialize it */
;;;1289           mTM->Lock = MID_UnLocked;
00000c  2100              MOVS     r1,#0
00000e  2020              MOVS     r0,#0x20
000010  5501              STRB     r1,[r0,r4]
;;;1290   
;;;1291           /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;1292           MID_TM_PWM_MspInit(mTM);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       MID_TM_PWM_MspInit
                  |L101.24|
;;;1293       }
;;;1294   
;;;1295       /* Set the TM state */
;;;1296       mTM->State= MID_TM_STATE_BUSY;
000018  2100              MOVS     r1,#0
00001a  2021              MOVS     r0,#0x21
00001c  5501              STRB     r1,[r0,r4]
;;;1297   
;;;1298       /* Init the base time for the Output Compare */
;;;1299       TM_Base_SetConfig(mTM->Instance,  &mTM->Init);
00001e  1d21              ADDS     r1,r4,#4
000020  6820              LDR      r0,[r4,#0]
000022  f7fffffe          BL       TM_Base_SetConfig
;;;1300   
;;;1301       /* Initialize the TM state*/
;;;1302       mTM->State= MID_TM_STATE_READY;
000026  2101              MOVS     r1,#1
000028  2021              MOVS     r0,#0x21
00002a  5501              STRB     r1,[r0,r4]
;;;1303   
;;;1304       return MID_SUCCESS;
00002c  2000              MOVS     r0,#0
;;;1305   
;;;1306   }
00002e  bd10              POP      {r4,pc}
;;;1307   
                          ENDP


                          AREA ||i.MID_TM_PWM_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_TM_PWM_MspDeInit PROC
;;;1369    */
;;;1370   __weak void MID_TM_PWM_MspDeInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;1371   {
;;;1372       /* Prevent unused argument(s) compilation warning */
;;;1373       UNUSED(mTM);
;;;1374       /* NOTE : This function Should not be modified, when the callback is needed,
;;;1375                 the MID_TM_PWM_MspDeInit could be implemented in the user file
;;;1376        */
;;;1377   }
;;;1378   
                          ENDP


                          AREA ||i.MID_TM_PWM_MspInit||, CODE, READONLY, ALIGN=1

                  MID_TM_PWM_MspInit PROC
;;;1352    */
;;;1353   __weak void MID_TM_PWM_MspInit(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;1354   {
;;;1355       /* Prevent unused argument(s) compilation warning */
;;;1356       UNUSED(mTM);
;;;1357       /* NOTE : This function Should not be modified, when the callback is needed,
;;;1358                 the MID_TM_PWM_MspInit could be implemented in the user file
;;;1359        */
;;;1360   }
;;;1361   
                          ENDP


                          AREA ||i.MID_TM_PWM_PulseFinishedCallback||, CODE, READONLY, ALIGN=1

                  MID_TM_PWM_PulseFinishedCallback PROC
;;;5601    */
;;;5602   __weak void MID_TM_PWM_PulseFinishedCallback(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;5603   {
;;;5604       /* Prevent unused argument(s) compilation warning */
;;;5605       UNUSED(mTM);
;;;5606       /* NOTE : This function Should not be modified, when the callback is needed,
;;;5607                 the MID_TM_PWM_PulseFinishedCallback could be implemented in the user file
;;;5608        */
;;;5609   
;;;5610   }
;;;5611   
                          ENDP


                          AREA ||i.MID_TM_PWM_Start||, CODE, READONLY, ALIGN=2

                  MID_TM_PWM_Start PROC
;;;1408    */
;;;1409   MID_StatusTypeDef MID_TM_PWM_Start(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;1410   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1411       /* Enable the PWM channel */
;;;1412       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_16bit_PWM);
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;1413   
;;;1414       // Enable Break Control for PWM mode 
;;;1415       if(mTM->Instance == TM36) 
000010  4908              LDR      r1,|L105.52|
000012  6820              LDR      r0,[r4,#0]
000014  4288              CMP      r0,r1
000016  d105              BNE      |L105.36|
;;;1416       {
;;;1417           // control TM36_BK_EN & TM36_BK_EN3
;;;1418           __DRV_TM_ENABLE_BREAK(mTM);
000018  6820              LDR      r0,[r4,#0]
00001a  6c80              LDR      r0,[r0,#0x48]
00001c  2109              MOVS     r1,#9
00001e  4308              ORRS     r0,r0,r1
000020  6821              LDR      r1,[r4,#0]
000022  6488              STR      r0,[r1,#0x48]
                  |L105.36|
;;;1419       }
;;;1420       
;;;1421       /* Enable the Peripheral */
;;;1422       __DRV_TM_ENABLE(mTM);
000024  6820              LDR      r0,[r4,#0]
000026  6900              LDR      r0,[r0,#0x10]
000028  2103              MOVS     r1,#3
00002a  4308              ORRS     r0,r0,r1
00002c  6821              LDR      r1,[r4,#0]
00002e  6108              STR      r0,[r1,#0x10]
;;;1423   
;;;1424       /* Return function status */
;;;1425       return MID_SUCCESS;
000030  2000              MOVS     r0,#0
;;;1426   }
000032  bd30              POP      {r4,r5,pc}
;;;1427   
                          ENDP

                  |L105.52|
                          DCD      0x56860000

                          AREA ||i.MID_TM_PWM_Start_DMA||, CODE, READONLY, ALIGN=2

                  MID_TM_PWM_Start_DMA PROC
;;;1682    */
;;;1683   MID_StatusTypeDef MID_TM_PWM_Start_DMA(TM_HandleTypeDef* mTM, uint32_t Channel, uint32_t* pData, uint16_t Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1684   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;1685       if((mTM->State) == (MID_TM_STATE_BUSY))
00000a  2021              MOVS     r0,#0x21
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2800              CMP      r0,#0
000010  d101              BNE      |L106.22|
;;;1686           return MID_BUSY;
000012  2002              MOVS     r0,#2
                  |L106.20|
;;;1687       else if((mTM->State) == (MID_TM_STATE_READY))
;;;1688       {
;;;1689           if(((uint32_t)pData == 0U) && (Length > 0U))
;;;1690               return MID_FAILURE;
;;;1691           else
;;;1692               mTM->State = MID_TM_STATE_BUSY;
;;;1693       }
;;;1694   
;;;1695       switch(Channel)
;;;1696       {
;;;1697       case MID_TM_Channel0:
;;;1698       {
;;;1699           /* Set the DMA Period elapsed callback */
;;;1700           mTM->hDMA[TM_DMA_ID_CC0]->XferCpltCallback = &TM_DMADelayPulseCplt;
;;;1701   
;;;1702           /* Set the DMA error callback */
;;;1703           mTM->hDMA[TM_DMA_ID_CC0]->XferErrorCallback = TM_DMAError ;
;;;1704   
;;;1705           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC0], (uint32_t)pData, NULL, Length);
;;;1706   
;;;1707           /* Enable the TM Capture/Compare 0 DMA request */
;;;1708           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH0_OC);
;;;1709       }
;;;1710       break;
;;;1711   
;;;1712       case MID_TM_Channel1:
;;;1713       {
;;;1714           /* Set the DMA Period elapsed callback */
;;;1715           mTM->hDMA[TM_DMA_ID_CC1]->XferCpltCallback = TM_DMADelayPulseCplt;
;;;1716   
;;;1717           /* Set the DMA error callback */
;;;1718           mTM->hDMA[TM_DMA_ID_CC1]->XferErrorCallback = TM_DMAError ;
;;;1719   
;;;1720           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC1], (uint32_t)pData, NULL, Length);
;;;1721   
;;;1722           /* Enable the TM Capture/Compare 1 DMA request */
;;;1723           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH1_OC);
;;;1724       }
;;;1725       break;
;;;1726   
;;;1727       case MID_TM_Channel2:
;;;1728       {
;;;1729           /* Set the DMA Period elapsed callback */
;;;1730           mTM->hDMA[TM_DMA_ID_CC2]->XferCpltCallback = TM_DMADelayPulseCplt;
;;;1731   
;;;1732           /* Set the DMA error callback */
;;;1733           mTM->hDMA[TM_DMA_ID_CC2]->XferErrorCallback = TM_DMAError ;
;;;1734           
;;;1735           MID_DMA_Start_IT(mTM->hDMA[TM_DMA_ID_CC2], (uint32_t)pData, NULL, Length);
;;;1736   
;;;1737           /* Enable the TM Capture/Compare 2 DMA request */
;;;1738           __DRV_TM_ENABLE_DMA(mTM, TM_DMA_CH2_OC);
;;;1739       }
;;;1740       break;
;;;1741   
;;;1742       case MID_TM_Channel3:
;;;1743       {
;;;1744           // MG32x02z MCU don't support Channel3 for OC output
;;;1745       }
;;;1746       break;
;;;1747   
;;;1748       default:
;;;1749           break;
;;;1750       }
;;;1751   
;;;1752       /* Enable the Output compare channel */
;;;1753       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_16bit_PWM);
;;;1754   
;;;1755       // Enable Break Control for PWM mode 
;;;1756       if(mTM->Instance == TM36) 
;;;1757       {
;;;1758           // control TM36_BK_EN & TM36_BK_EN3
;;;1759           __DRV_TM_ENABLE_BREAK(mTM);
;;;1760       }
;;;1761       
;;;1762       
;;;1763       mTM->State = MID_TM_STATE_READY;
;;;1764   
;;;1765       /* Enable the Peripheral */
;;;1766       __DRV_TM_ENABLE(mTM);
;;;1767   
;;;1768       /* Return function status */
;;;1769       return MID_SUCCESS;
;;;1770   }
000014  bdf8              POP      {r3-r7,pc}
                  |L106.22|
000016  2021              MOVS     r0,#0x21              ;1687
000018  5d00              LDRB     r0,[r0,r4]            ;1687
00001a  2801              CMP      r0,#1                 ;1687
00001c  d107              BNE      |L106.46|
00001e  2d00              CMP      r5,#0                 ;1689
000020  d102              BNE      |L106.40|
000022  2f00              CMP      r7,#0                 ;1689
000024  d000              BEQ      |L106.40|
000026  e7f5              B        |L106.20|
                  |L106.40|
000028  2100              MOVS     r1,#0                 ;1692
00002a  2021              MOVS     r0,#0x21              ;1692
00002c  5501              STRB     r1,[r0,r4]            ;1692
                  |L106.46|
00002e  2e00              CMP      r6,#0                 ;1695
000030  d006              BEQ      |L106.64|
000032  2e01              CMP      r6,#1                 ;1695
000034  d018              BEQ      |L106.104|
000036  2e02              CMP      r6,#2                 ;1695
000038  d02a              BEQ      |L106.144|
00003a  2e03              CMP      r6,#3                 ;1695
00003c  d13d              BNE      |L106.186|
00003e  e03b              B        |L106.184|
                  |L106.64|
000040  482c              LDR      r0,|L106.244|
000042  6921              LDR      r1,[r4,#0x10]         ;1700
000044  62c8              STR      r0,[r1,#0x2c]         ;1700
000046  482c              LDR      r0,|L106.248|
000048  6921              LDR      r1,[r4,#0x10]         ;1703
00004a  6348              STR      r0,[r1,#0x34]         ;1703
00004c  463b              MOV      r3,r7                 ;1705
00004e  2200              MOVS     r2,#0                 ;1705
000050  4629              MOV      r1,r5                 ;1705
000052  6920              LDR      r0,[r4,#0x10]         ;1705
000054  f7fffffe          BL       MID_DMA_Start_IT
000058  6820              LDR      r0,[r4,#0]            ;1708
00005a  6b00              LDR      r0,[r0,#0x30]         ;1708
00005c  2101              MOVS     r1,#1                 ;1708
00005e  0609              LSLS     r1,r1,#24             ;1708
000060  4308              ORRS     r0,r0,r1              ;1708
000062  6821              LDR      r1,[r4,#0]            ;1708
000064  6308              STR      r0,[r1,#0x30]         ;1708
000066  e029              B        |L106.188|
                  |L106.104|
000068  4922              LDR      r1,|L106.244|
00006a  6960              LDR      r0,[r4,#0x14]         ;1715
00006c  62c1              STR      r1,[r0,#0x2c]         ;1715
00006e  4922              LDR      r1,|L106.248|
000070  6960              LDR      r0,[r4,#0x14]         ;1718
000072  6341              STR      r1,[r0,#0x34]         ;1718
000074  463b              MOV      r3,r7                 ;1720
000076  2200              MOVS     r2,#0                 ;1720
000078  4629              MOV      r1,r5                 ;1720
00007a  6960              LDR      r0,[r4,#0x14]         ;1720
00007c  f7fffffe          BL       MID_DMA_Start_IT
000080  6820              LDR      r0,[r4,#0]            ;1723
000082  6b00              LDR      r0,[r0,#0x30]         ;1723
000084  2101              MOVS     r1,#1                 ;1723
000086  0649              LSLS     r1,r1,#25             ;1723
000088  4308              ORRS     r0,r0,r1              ;1723
00008a  6821              LDR      r1,[r4,#0]            ;1723
00008c  6308              STR      r0,[r1,#0x30]         ;1723
00008e  e015              B        |L106.188|
                  |L106.144|
000090  4918              LDR      r1,|L106.244|
000092  69a0              LDR      r0,[r4,#0x18]         ;1730
000094  62c1              STR      r1,[r0,#0x2c]         ;1730
000096  4918              LDR      r1,|L106.248|
000098  69a0              LDR      r0,[r4,#0x18]         ;1733
00009a  6341              STR      r1,[r0,#0x34]         ;1733
00009c  463b              MOV      r3,r7                 ;1735
00009e  2200              MOVS     r2,#0                 ;1735
0000a0  4629              MOV      r1,r5                 ;1735
0000a2  69a0              LDR      r0,[r4,#0x18]         ;1735
0000a4  f7fffffe          BL       MID_DMA_Start_IT
0000a8  6820              LDR      r0,[r4,#0]            ;1738
0000aa  6b00              LDR      r0,[r0,#0x30]         ;1738
0000ac  2101              MOVS     r1,#1                 ;1738
0000ae  0689              LSLS     r1,r1,#26             ;1738
0000b0  4308              ORRS     r0,r0,r1              ;1738
0000b2  6821              LDR      r1,[r4,#0]            ;1738
0000b4  6308              STR      r0,[r1,#0x30]         ;1738
0000b6  e001              B        |L106.188|
                  |L106.184|
0000b8  e000              B        |L106.188|
                  |L106.186|
0000ba  bf00              NOP                            ;1749
                  |L106.188|
0000bc  bf00              NOP                            ;1710
0000be  2204              MOVS     r2,#4                 ;1753
0000c0  4631              MOV      r1,r6                 ;1753
0000c2  6820              LDR      r0,[r4,#0]            ;1753
0000c4  f7fffffe          BL       TM_CCxChannelCmd
0000c8  490c              LDR      r1,|L106.252|
0000ca  6820              LDR      r0,[r4,#0]            ;1756
0000cc  4288              CMP      r0,r1                 ;1756
0000ce  d105              BNE      |L106.220|
0000d0  6820              LDR      r0,[r4,#0]            ;1759
0000d2  6c80              LDR      r0,[r0,#0x48]         ;1759
0000d4  2109              MOVS     r1,#9                 ;1759
0000d6  4308              ORRS     r0,r0,r1              ;1759
0000d8  6821              LDR      r1,[r4,#0]            ;1759
0000da  6488              STR      r0,[r1,#0x48]         ;1759
                  |L106.220|
0000dc  2101              MOVS     r1,#1                 ;1763
0000de  2021              MOVS     r0,#0x21              ;1763
0000e0  5501              STRB     r1,[r0,r4]            ;1763
0000e2  6820              LDR      r0,[r4,#0]            ;1766
0000e4  6900              LDR      r0,[r0,#0x10]         ;1766
0000e6  2103              MOVS     r1,#3                 ;1766
0000e8  4308              ORRS     r0,r0,r1              ;1766
0000ea  6821              LDR      r1,[r4,#0]            ;1766
0000ec  6108              STR      r0,[r1,#0x10]         ;1766
0000ee  2000              MOVS     r0,#0                 ;1769
0000f0  e790              B        |L106.20|
;;;1771   
                          ENDP

0000f2  0000              DCW      0x0000
                  |L106.244|
                          DCD      TM_DMADelayPulseCplt
                  |L106.248|
                          DCD      TM_DMAError
                  |L106.252|
                          DCD      0x56860000

                          AREA ||i.MID_TM_PWM_Start_IT||, CODE, READONLY, ALIGN=2

                  MID_TM_PWM_Start_IT PROC
;;;1483    */
;;;1484   MID_StatusTypeDef MID_TM_PWM_Start_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;1485   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1486       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L107.24|
00000a  2d01              CMP      r5,#1
00000c  d012              BEQ      |L107.52|
00000e  2d02              CMP      r5,#2
000010  d01e              BEQ      |L107.80|
000012  2d03              CMP      r5,#3
000014  d138              BNE      |L107.136|
000016  e029              B        |L107.108|
                  |L107.24|
;;;1487       {
;;;1488       case MID_TM_Channel0:
;;;1489       {
;;;1490           /* Enable the TM Capture/Compare 0 interrupt */
;;;1491           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4308              ORRS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;1492           __DRV_TM_ENABLE_ITEA(mTM);
000026  6820              LDR      r0,[r4,#0]
000028  6840              LDR      r0,[r0,#4]
00002a  2101              MOVS     r1,#1
00002c  4308              ORRS     r0,r0,r1
00002e  6821              LDR      r1,[r4,#0]
000030  6048              STR      r0,[r1,#4]
;;;1493       }
;;;1494       break;
000032  e02a              B        |L107.138|
                  |L107.52|
;;;1495   
;;;1496       case MID_TM_Channel1:
;;;1497       {
;;;1498           /* Enable the TM Capture/Compare 1 interrupt */
;;;1499           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC1);
000034  6820              LDR      r0,[r4,#0]
000036  6840              LDR      r0,[r0,#4]
000038  2101              MOVS     r1,#1
00003a  0249              LSLS     r1,r1,#9
00003c  4308              ORRS     r0,r0,r1
00003e  6821              LDR      r1,[r4,#0]
000040  6048              STR      r0,[r1,#4]
;;;1500           __DRV_TM_ENABLE_ITEA(mTM);
000042  6820              LDR      r0,[r4,#0]
000044  6840              LDR      r0,[r0,#4]
000046  2101              MOVS     r1,#1
000048  4308              ORRS     r0,r0,r1
00004a  6821              LDR      r1,[r4,#0]
00004c  6048              STR      r0,[r1,#4]
;;;1501       }
;;;1502       break;
00004e  e01c              B        |L107.138|
                  |L107.80|
;;;1503   
;;;1504       case MID_TM_Channel2:
;;;1505       {
;;;1506           /* Enable the TM Capture/Compare 2 interrupt */
;;;1507           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC2);
000050  6820              LDR      r0,[r4,#0]
000052  6840              LDR      r0,[r0,#4]
000054  2101              MOVS     r1,#1
000056  0289              LSLS     r1,r1,#10
000058  4308              ORRS     r0,r0,r1
00005a  6821              LDR      r1,[r4,#0]
00005c  6048              STR      r0,[r1,#4]
;;;1508           __DRV_TM_ENABLE_ITEA(mTM);
00005e  6820              LDR      r0,[r4,#0]
000060  6840              LDR      r0,[r0,#4]
000062  2101              MOVS     r1,#1
000064  4308              ORRS     r0,r0,r1
000066  6821              LDR      r1,[r4,#0]
000068  6048              STR      r0,[r1,#4]
;;;1509       }
;;;1510       break;
00006a  e00e              B        |L107.138|
                  |L107.108|
;;;1511   
;;;1512       case MID_TM_Channel3:
;;;1513       {
;;;1514           /* Enable the TM Capture/Compare 3 interrupt */
;;;1515           __DRV_TM_ENABLE_IT(mTM, TM_IT_CC3);
00006c  6820              LDR      r0,[r4,#0]
00006e  6840              LDR      r0,[r0,#4]
000070  2101              MOVS     r1,#1
000072  02c9              LSLS     r1,r1,#11
000074  4308              ORRS     r0,r0,r1
000076  6821              LDR      r1,[r4,#0]
000078  6048              STR      r0,[r1,#4]
;;;1516           __DRV_TM_ENABLE_ITEA(mTM);
00007a  6820              LDR      r0,[r4,#0]
00007c  6840              LDR      r0,[r0,#4]
00007e  2101              MOVS     r1,#1
000080  4308              ORRS     r0,r0,r1
000082  6821              LDR      r1,[r4,#0]
000084  6048              STR      r0,[r1,#4]
;;;1517       }
;;;1518       break;
000086  e000              B        |L107.138|
                  |L107.136|
;;;1519   
;;;1520       default:
;;;1521           break;
000088  bf00              NOP      
                  |L107.138|
00008a  bf00              NOP                            ;1494
;;;1522       }
;;;1523   
;;;1524       /* Enable the Output compare channel */
;;;1525       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_16bit_PWM);
00008c  2204              MOVS     r2,#4
00008e  4629              MOV      r1,r5
000090  6820              LDR      r0,[r4,#0]
000092  f7fffffe          BL       TM_CCxChannelCmd
;;;1526   
;;;1527       // Enable Break Control for PWM mode 
;;;1528       if(mTM->Instance == TM36) 
000096  4909              LDR      r1,|L107.188|
000098  6820              LDR      r0,[r4,#0]
00009a  4288              CMP      r0,r1
00009c  d105              BNE      |L107.170|
;;;1529       {
;;;1530           // control TM36_BK_EN & TM36_BK_EN3
;;;1531           __DRV_TM_ENABLE_BREAK(mTM);
00009e  6820              LDR      r0,[r4,#0]
0000a0  6c80              LDR      r0,[r0,#0x48]
0000a2  2109              MOVS     r1,#9
0000a4  4308              ORRS     r0,r0,r1
0000a6  6821              LDR      r1,[r4,#0]
0000a8  6488              STR      r0,[r1,#0x48]
                  |L107.170|
;;;1532       }
;;;1533   
;;;1534   
;;;1535       // __MID_TM_ENABLE(mTM);
;;;1536       __DRV_TM_ENABLE(mTM);
0000aa  6820              LDR      r0,[r4,#0]
0000ac  6900              LDR      r0,[r0,#0x10]
0000ae  2103              MOVS     r1,#3
0000b0  4308              ORRS     r0,r0,r1
0000b2  6821              LDR      r1,[r4,#0]
0000b4  6108              STR      r0,[r1,#0x10]
;;;1537   
;;;1538       /* Return function status */
;;;1539       return MID_SUCCESS;
0000b6  2000              MOVS     r0,#0
;;;1540   }
0000b8  bd30              POP      {r4,r5,pc}
;;;1541   
                          ENDP

0000ba  0000              DCW      0x0000
                  |L107.188|
                          DCD      0x56860000

                          AREA ||i.MID_TM_PWM_Stop||, CODE, READONLY, ALIGN=2

                  MID_TM_PWM_Stop PROC
;;;1445    */
;;;1446   MID_StatusTypeDef MID_TM_PWM_Stop(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;1447   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1448       /* Disable the Output compare channel */
;;;1449       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TM_CCxChannelCmd
;;;1450   
;;;1451       // Disable Break Control for PWM mode 
;;;1452       if(mTM->Instance == TM36) 
000010  490e              LDR      r1,|L108.76|
000012  6820              LDR      r0,[r4,#0]
000014  4288              CMP      r0,r1
000016  d10b              BNE      |L108.48|
;;;1453       {
;;;1454           // control TM36_BK_EN & TM36_BK_EN3
;;;1455           if((mTM->Instance->CCMDS.H[0] & TM_ALLCH_PWMMode) == 0x0000)
000018  6820              LDR      r0,[r4,#0]
00001a  8e00              LDRH     r0,[r0,#0x30]
00001c  490c              LDR      r1,|L108.80|
00001e  4008              ANDS     r0,r0,r1
000020  2800              CMP      r0,#0
000022  d105              BNE      |L108.48|
;;;1456               __DRV_TM_DISABLE_BREAK(mTM);
000024  6820              LDR      r0,[r4,#0]
000026  6c80              LDR      r0,[r0,#0x48]
000028  2109              MOVS     r1,#9
00002a  4388              BICS     r0,r0,r1
00002c  6821              LDR      r1,[r4,#0]
00002e  6488              STR      r0,[r1,#0x48]
                  |L108.48|
;;;1457       }
;;;1458   
;;;1459       /* Disable the Peripheral */
;;;1460       __DRV_TM_DISABLE(mTM);
000030  bf00              NOP      
000032  6820              LDR      r0,[r4,#0]
000034  8e00              LDRH     r0,[r0,#0x30]
000036  2800              CMP      r0,#0
000038  d105              BNE      |L108.70|
00003a  6820              LDR      r0,[r4,#0]
00003c  6900              LDR      r0,[r0,#0x10]
00003e  0880              LSRS     r0,r0,#2
000040  0080              LSLS     r0,r0,#2
000042  6821              LDR      r1,[r4,#0]
000044  6108              STR      r0,[r1,#0x10]
                  |L108.70|
000046  bf00              NOP      
;;;1461   
;;;1462       /* Return function status */
;;;1463       return MID_SUCCESS;
000048  2000              MOVS     r0,#0
;;;1464   }
00004a  bd30              POP      {r4,r5,pc}
;;;1465   
                          ENDP

                  |L108.76|
                          DCD      0x56860000
                  |L108.80|
                          DCD      0x00004444

                          AREA ||i.MID_TM_PWM_Stop_DMA||, CODE, READONLY, ALIGN=2

                  MID_TM_PWM_Stop_DMA PROC
;;;1786    */
;;;1787   MID_StatusTypeDef MID_TM_PWM_Stop_DMA(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;1788   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1789       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L109.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L109.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L109.56|
000012  2d03              CMP      r5,#3
000014  d119              BNE      |L109.74|
000016  e017              B        |L109.72|
                  |L109.24|
;;;1790       {
;;;1791       case MID_TM_Channel0:
;;;1792       {
;;;1793           /* Disable the TM Capture/Compare 0 interrupt */
;;;1794           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH0_OC);
000018  6820              LDR      r0,[r4,#0]
00001a  6b00              LDR      r0,[r0,#0x30]
00001c  2101              MOVS     r1,#1
00001e  0609              LSLS     r1,r1,#24
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6308              STR      r0,[r1,#0x30]
;;;1795       }
;;;1796       break;
000026  e011              B        |L109.76|
                  |L109.40|
;;;1797   
;;;1798       case MID_TM_Channel1:
;;;1799       {
;;;1800           /* Disable the TM Capture/Compare 1 DMA request */
;;;1801           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH1_OC);
000028  6820              LDR      r0,[r4,#0]
00002a  6b00              LDR      r0,[r0,#0x30]
00002c  2101              MOVS     r1,#1
00002e  0649              LSLS     r1,r1,#25
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6308              STR      r0,[r1,#0x30]
;;;1802       }
;;;1803       break;
000036  e009              B        |L109.76|
                  |L109.56|
;;;1804   
;;;1805       case MID_TM_Channel2:
;;;1806       {
;;;1807           /* Disable the TM Capture/Compare 2 DMA request */
;;;1808           __DRV_TM_DISABLE_DMA(mTM, TM_DMA_CH2_OC);
000038  6820              LDR      r0,[r4,#0]
00003a  6b00              LDR      r0,[r0,#0x30]
00003c  2101              MOVS     r1,#1
00003e  0689              LSLS     r1,r1,#26
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6308              STR      r0,[r1,#0x30]
;;;1809       }
;;;1810       break;
000046  e001              B        |L109.76|
                  |L109.72|
;;;1811   
;;;1812       case MID_TM_Channel3:
;;;1813       {
;;;1814           // MG32x02z MCU don't support Channel3 for OC output
;;;1815       }
;;;1816       break;
000048  e000              B        |L109.76|
                  |L109.74|
;;;1817   
;;;1818       default:
;;;1819           break;
00004a  bf00              NOP      
                  |L109.76|
00004c  bf00              NOP                            ;1796
;;;1820       }
;;;1821   
;;;1822       /* Disable the Output compare channel */
;;;1823       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
00004e  2200              MOVS     r2,#0
000050  4629              MOV      r1,r5
000052  6820              LDR      r0,[r4,#0]
000054  f7fffffe          BL       TM_CCxChannelCmd
;;;1824   
;;;1825       // Disable Break Control for PWM mode 
;;;1826       if(mTM->Instance == TM36) 
000058  4910              LDR      r1,|L109.156|
00005a  6820              LDR      r0,[r4,#0]
00005c  4288              CMP      r0,r1
00005e  d10b              BNE      |L109.120|
;;;1827       {
;;;1828           // control TM36_BK_EN & TM36_BK_EN3
;;;1829           if((mTM->Instance->CCMDS.H[0] & TM_ALLCH_PWMMode) == 0x0000)
000060  6820              LDR      r0,[r4,#0]
000062  8e00              LDRH     r0,[r0,#0x30]
000064  490e              LDR      r1,|L109.160|
000066  4008              ANDS     r0,r0,r1
000068  2800              CMP      r0,#0
00006a  d105              BNE      |L109.120|
;;;1830               __DRV_TM_DISABLE_BREAK(mTM);
00006c  6820              LDR      r0,[r4,#0]
00006e  6c80              LDR      r0,[r0,#0x48]
000070  2109              MOVS     r1,#9
000072  4388              BICS     r0,r0,r1
000074  6821              LDR      r1,[r4,#0]
000076  6488              STR      r0,[r1,#0x48]
                  |L109.120|
;;;1831       }
;;;1832   
;;;1833       /* Disable the Peripheral */
;;;1834       __DRV_TM_DISABLE(mTM);
000078  bf00              NOP      
00007a  6820              LDR      r0,[r4,#0]
00007c  8e00              LDRH     r0,[r0,#0x30]
00007e  2800              CMP      r0,#0
000080  d105              BNE      |L109.142|
000082  6820              LDR      r0,[r4,#0]
000084  6900              LDR      r0,[r0,#0x10]
000086  0880              LSRS     r0,r0,#2
000088  0080              LSLS     r0,r0,#2
00008a  6821              LDR      r1,[r4,#0]
00008c  6108              STR      r0,[r1,#0x10]
                  |L109.142|
00008e  bf00              NOP      
;;;1835   
;;;1836       /* Change the mTM state */
;;;1837       mTM->State = MID_TM_STATE_READY;
000090  2101              MOVS     r1,#1
000092  2021              MOVS     r0,#0x21
000094  5501              STRB     r1,[r0,r4]
;;;1838   
;;;1839       /* Return function status */
;;;1840       return MID_SUCCESS;
000096  2000              MOVS     r0,#0
;;;1841   }
000098  bd30              POP      {r4,r5,pc}
;;;1842   
                          ENDP

00009a  0000              DCW      0x0000
                  |L109.156|
                          DCD      0x56860000
                  |L109.160|
                          DCD      0x00004444

                          AREA ||i.MID_TM_PWM_Stop_IT||, CODE, READONLY, ALIGN=2

                  MID_TM_PWM_Stop_IT PROC
;;;1559    */
;;;1560   MID_StatusTypeDef MID_TM_PWM_Stop_IT(TM_HandleTypeDef* mTM, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;1561   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1562       switch(Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L110.24|
00000a  2d01              CMP      r5,#1
00000c  d00c              BEQ      |L110.40|
00000e  2d02              CMP      r5,#2
000010  d012              BEQ      |L110.56|
000012  2d03              CMP      r5,#3
000014  d120              BNE      |L110.88|
000016  e017              B        |L110.72|
                  |L110.24|
;;;1563       {
;;;1564       case MID_TM_Channel0:
;;;1565       {
;;;1566           /* Enable the TM Capture/Compare 0 interrupt */
;;;1567           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC0);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  21ff              MOVS     r1,#0xff
00001e  3101              ADDS     r1,#1
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;1568       }
;;;1569       break;
000026  e018              B        |L110.90|
                  |L110.40|
;;;1570   
;;;1571       case MID_TM_Channel1:
;;;1572       {
;;;1573           /* Enable the TM Capture/Compare 1 interrupt */
;;;1574           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC1);
000028  6820              LDR      r0,[r4,#0]
00002a  6840              LDR      r0,[r0,#4]
00002c  2101              MOVS     r1,#1
00002e  0249              LSLS     r1,r1,#9
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6048              STR      r0,[r1,#4]
;;;1575       }
;;;1576       break;
000036  e010              B        |L110.90|
                  |L110.56|
;;;1577   
;;;1578       case MID_TM_Channel2:
;;;1579       {
;;;1580           /* Enable the TM Capture/Compare 2 interrupt */
;;;1581           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC2);
000038  6820              LDR      r0,[r4,#0]
00003a  6840              LDR      r0,[r0,#4]
00003c  2101              MOVS     r1,#1
00003e  0289              LSLS     r1,r1,#10
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  6048              STR      r0,[r1,#4]
;;;1582       }
;;;1583       break;
000046  e008              B        |L110.90|
                  |L110.72|
;;;1584   
;;;1585       case MID_TM_Channel3:
;;;1586       {
;;;1587           /* Enable the TM Capture/Compare 3 interrupt */
;;;1588           __DRV_TM_DISABLE_IT(mTM, TM_IT_CC3);
000048  6820              LDR      r0,[r4,#0]
00004a  6840              LDR      r0,[r0,#4]
00004c  2101              MOVS     r1,#1
00004e  02c9              LSLS     r1,r1,#11
000050  4388              BICS     r0,r0,r1
000052  6821              LDR      r1,[r4,#0]
000054  6048              STR      r0,[r1,#4]
;;;1589       }
;;;1590       break;
000056  e000              B        |L110.90|
                  |L110.88|
;;;1591   
;;;1592       default:
;;;1593           break;
000058  bf00              NOP      
                  |L110.90|
00005a  bf00              NOP                            ;1569
;;;1594       }
;;;1595   
;;;1596       /* Enable the Output compare channel */
;;;1597       TM_CCxChannelCmd(mTM->Instance, Channel, TM_CH_Disable);
00005c  2200              MOVS     r2,#0
00005e  4629              MOV      r1,r5
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       TM_CCxChannelCmd
;;;1598   
;;;1599       // Disable Break Control for PWM mode 
;;;1600       if(mTM->Instance == TM36) 
000066  4918              LDR      r1,|L110.200|
000068  6820              LDR      r0,[r4,#0]
00006a  4288              CMP      r0,r1
00006c  d10b              BNE      |L110.134|
;;;1601       {
;;;1602           // control TM36_BK_EN & TM36_BK_EN3
;;;1603           if((mTM->Instance->CCMDS.H[0] & TM_ALLCH_PWMMode) == 0x0000)
00006e  6820              LDR      r0,[r4,#0]
000070  8e00              LDRH     r0,[r0,#0x30]
000072  4916              LDR      r1,|L110.204|
000074  4008              ANDS     r0,r0,r1
000076  2800              CMP      r0,#0
000078  d105              BNE      |L110.134|
;;;1604               __DRV_TM_DISABLE_BREAK(mTM);
00007a  6820              LDR      r0,[r4,#0]
00007c  6c80              LDR      r0,[r0,#0x48]
00007e  2109              MOVS     r1,#9
000080  4388              BICS     r0,r0,r1
000082  6821              LDR      r1,[r4,#0]
000084  6488              STR      r0,[r1,#0x48]
                  |L110.134|
;;;1605       }
;;;1606   
;;;1607       /* Enable the Peripheral */
;;;1608       __DRV_TM_DISABLE(mTM);
000086  bf00              NOP      
000088  6820              LDR      r0,[r4,#0]
00008a  8e00              LDRH     r0,[r0,#0x30]
00008c  2800              CMP      r0,#0
00008e  d105              BNE      |L110.156|
000090  6820              LDR      r0,[r4,#0]
000092  6900              LDR      r0,[r0,#0x10]
000094  0880              LSRS     r0,r0,#2
000096  0080              LSLS     r0,r0,#2
000098  6821              LDR      r1,[r4,#0]
00009a  6108              STR      r0,[r1,#0x10]
                  |L110.156|
00009c  bf00              NOP      
;;;1609   
;;;1610       /* check IT for ITEA */
;;;1611       if((mTM->Instance->INT.W & 0xFFFFFFFE) == 0)
00009e  6820              LDR      r0,[r4,#0]
0000a0  6840              LDR      r0,[r0,#4]
0000a2  0840              LSRS     r0,r0,#1
0000a4  0040              LSLS     r0,r0,#1
0000a6  2800              CMP      r0,#0
0000a8  d10b              BNE      |L110.194|
;;;1612           __DRV_TM_DISABLE_ITEA(mTM);
0000aa  bf00              NOP      
0000ac  6820              LDR      r0,[r4,#0]
0000ae  6840              LDR      r0,[r0,#4]
0000b0  2800              CMP      r0,#0
0000b2  d005              BEQ      |L110.192|
0000b4  6820              LDR      r0,[r4,#0]
0000b6  6840              LDR      r0,[r0,#4]
0000b8  0840              LSRS     r0,r0,#1
0000ba  0040              LSLS     r0,r0,#1
0000bc  6821              LDR      r1,[r4,#0]
0000be  6048              STR      r0,[r1,#4]
                  |L110.192|
0000c0  bf00              NOP      
                  |L110.194|
;;;1613   
;;;1614       /* Return function status */
;;;1615       return MID_SUCCESS;
0000c2  2000              MOVS     r0,#0
;;;1616   }
0000c4  bd30              POP      {r4,r5,pc}
;;;1617   
                          ENDP

0000c6  0000              DCW      0x0000
                  |L110.200|
                          DCD      0x56860000
                  |L110.204|
                          DCD      0x00004444

                          AREA ||i.MID_TM_PeriodElapsedCallback||, CODE, READONLY, ALIGN=1

                  MID_TM_PeriodElapsedCallback PROC
;;;5547    */
;;;5548   __weak void MID_TM_PeriodElapsedCallback(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;5549   {
;;;5550       /* Prevent unused argument(s) compilation warning */
;;;5551       UNUSED(mTM);
;;;5552       /* NOTE : This function Should not be modified, when the callback is needed,
;;;5553                 the MID_TM_PeriodElapsedCallback could be implemented in the user file
;;;5554        */
;;;5555   
;;;5556   }
;;;5557   
                          ENDP


                          AREA ||i.MID_TM_QEI_DIRCHANGECallback||, CODE, READONLY, ALIGN=1

                  MID_TM_QEI_DIRCHANGECallback PROC
;;;5673    */
;;;5674   __weak void MID_TM_QEI_DIRCHANGECallback(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;5675   {
;;;5676       /* Prevent unused argument(s) compilation warning */
;;;5677       UNUSED(mTM);
;;;5678       /* NOTE : This function Should not be modified, when the callback is needed,
;;;5679                 the MID_TM_QEI_DIRCHANGECallback could be implemented in the user file
;;;5680        */
;;;5681   
;;;5682   }
;;;5683   
                          ENDP


                          AREA ||i.MID_TM_QEI_ErrorCallback||, CODE, READONLY, ALIGN=1

                  MID_TM_QEI_ErrorCallback PROC
;;;5707    */
;;;5708   __weak void MID_TM_QEI_ErrorCallback(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;5709   {
;;;5710       /* Prevent unused argument(s) compilation warning */
;;;5711       UNUSED(mTM);
;;;5712       /* NOTE : This function Should not be modified, when the callback is needed,
;;;5713                 the MID_TM_QEI_ErrorCallback could be implemented in the user file
;;;5714        */
;;;5715   
;;;5716   }
;;;5717   
                          ENDP


                          AREA ||i.MID_TM_QEI_INDEXCallback||, CODE, READONLY, ALIGN=1

                  MID_TM_QEI_INDEXCallback PROC
;;;5690    */
;;;5691   __weak void MID_TM_QEI_INDEXCallback(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;5692   {
;;;5693       /* Prevent unused argument(s) compilation warning */
;;;5694       UNUSED(mTM);
;;;5695       /* NOTE : This function Should not be modified, when the callback is needed,
;;;5696                 the MID_TM_QEI_INDEXCallback could be implemented in the user file
;;;5697        */
;;;5698   
;;;5699   }
;;;5700   
                          ENDP


                          AREA ||i.MID_TM_ReadCapturedValue||, CODE, READONLY, ALIGN=1

                  MID_TM_ReadCapturedValue PROC
;;;5443    */
;;;5444   uint32_t MID_TM_ReadCapturedValue(TM_HandleTypeDef *mTM, uint32_t Channel)
000000  b508              PUSH     {r3,lr}
;;;5445   {
000002  4602              MOV      r2,r0
;;;5446       volatile ctype tmpreg;
;;;5447       
;;;5448       tmpreg.W = 0U;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;5449   
;;;5450       /* Process Locked */
;;;5451       __MID_LOCK(mTM);
000008  bf00              NOP      
00000a  2020              MOVS     r0,#0x20
00000c  5c80              LDRB     r0,[r0,r2]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L115.22|
000012  2002              MOVS     r0,#2
                  |L115.20|
;;;5452   
;;;5453       switch (Channel)
;;;5454       {
;;;5455       case MID_TM_Channel0:
;;;5456           // Fyll counter mode (32bit)
;;;5457           if((mTM->Init.TM_CounterMode & 0x0020) != 0)
;;;5458           {
;;;5459               /* Return the capture 0 value */
;;;5460               tmpreg.H[1] = mTM->Instance->CC0A.H[0];
;;;5461               tmpreg.H[0] = mTM->Instance->CC0B.H[0];
;;;5462           }
;;;5463           else
;;;5464           {   // Separate/Cascade mode (16 bit)
;;;5465               if(__DRV_TM_GET_FLAG(mTM, TM_FLAG_CC0B))
;;;5466                   tmpreg.H[0] = mTM->Instance->CC0B.H[0];
;;;5467               else
;;;5468                   tmpreg.H[0] = mTM->Instance->CC0A.H[0];
;;;5469           }
;;;5470           break;
;;;5471   
;;;5472       case MID_TM_Channel1:
;;;5473           // Fyll counter mode (32bit)
;;;5474           if((mTM->Init.TM_CounterMode & 0x0020) != 0)
;;;5475           {
;;;5476               /* Return the capture 0 value */
;;;5477               tmpreg.H[1] = mTM->Instance->CC1A.H[0];
;;;5478               tmpreg.H[0] = mTM->Instance->CC1B.H[0];
;;;5479           }
;;;5480           else
;;;5481           {   // Separate/Cascade mode (16 bit)
;;;5482               if(__DRV_TM_GET_FLAG(mTM, TM_FLAG_CC1B))
;;;5483                   tmpreg.H[0] = mTM->Instance->CC1B.H[0];
;;;5484               else
;;;5485                   tmpreg.H[0] = mTM->Instance->CC1A.H[0];
;;;5486           }
;;;5487           break;
;;;5488           
;;;5489       case MID_TM_Channel2:
;;;5490           // Fyll counter mode (32bit)
;;;5491           if((mTM->Init.TM_CounterMode & 0x0020) != 0)
;;;5492           {
;;;5493               /* Return the capture 0 value */
;;;5494               tmpreg.H[1] = mTM->Instance->CC2A.H[0];
;;;5495               tmpreg.H[0] = mTM->Instance->CC2B.H[0];
;;;5496           }
;;;5497           else
;;;5498           {   // Separate/Cascade mode (16 bit)
;;;5499               if(__DRV_TM_GET_FLAG(mTM, TM_FLAG_CC2B))
;;;5500                   tmpreg.H[0] = mTM->Instance->CC2B.H[0];
;;;5501               else
;;;5502                   tmpreg.H[0] = mTM->Instance->CC2A.H[0];
;;;5503           }
;;;5504           break;
;;;5505   
;;;5506       case MID_TM_Channel3:
;;;5507           // Fyll counter mode (32bit)
;;;5508           if((mTM->Init.TM_CounterMode & 0x0020) != 0)
;;;5509           {
;;;5510               /* Return the capture 0 value */
;;;5511               tmpreg.H[1] = mTM->Instance->CC3A.H[0];
;;;5512               tmpreg.H[0] = mTM->Instance->CC3B.H[0];
;;;5513           }
;;;5514           else
;;;5515           {   // Separate/Cascade mode (16 bit)
;;;5516               if(__DRV_TM_GET_FLAG(mTM, TM_FLAG_CC3B))
;;;5517                   tmpreg.H[0] = mTM->Instance->CC3B.H[0];
;;;5518               else
;;;5519                   tmpreg.H[0] = mTM->Instance->CC3A.H[0];
;;;5520           }
;;;5521           break;
;;;5522           
;;;5523       default:
;;;5524           break;
;;;5525       }
;;;5526   
;;;5527       /* Release Lock */
;;;5528       __MID_UNLOCK(mTM);
;;;5529       
;;;5530       return tmpreg.W;
;;;5531   }
000014  bd08              POP      {r3,pc}
                  |L115.22|
000016  2301              MOVS     r3,#1                 ;5451
000018  2020              MOVS     r0,#0x20              ;5451
00001a  5483              STRB     r3,[r0,r2]            ;5451
00001c  bf00              NOP                            ;5451
00001e  2900              CMP      r1,#0                 ;5453
000020  d006              BEQ      |L115.48|
000022  2901              CMP      r1,#1                 ;5453
000024  d027              BEQ      |L115.118|
000026  2902              CMP      r1,#2                 ;5453
000028  d048              BEQ      |L115.188|
00002a  2903              CMP      r1,#3                 ;5453
00002c  d179              BNE      |L115.290|
00002e  e068              B        |L115.258|
                  |L115.48|
000030  2320              MOVS     r3,#0x20              ;5457
000032  6850              LDR      r0,[r2,#4]            ;5457
000034  4018              ANDS     r0,r0,r3              ;5457
000036  2800              CMP      r0,#0                 ;5457
000038  d00a              BEQ      |L115.80|
00003a  6810              LDR      r0,[r2,#0]            ;5460
00003c  3040              ADDS     r0,r0,#0x40           ;5460
00003e  8a03              LDRH     r3,[r0,#0x10]         ;5460
000040  4668              MOV      r0,sp                 ;5460
000042  8043              STRH     r3,[r0,#2]            ;5460
000044  6810              LDR      r0,[r2,#0]            ;5461
000046  3040              ADDS     r0,r0,#0x40           ;5461
000048  8a83              LDRH     r3,[r0,#0x14]         ;5461
00004a  4668              MOV      r0,sp                 ;5461
00004c  8003              STRH     r3,[r0,#0]            ;5461
00004e  e011              B        |L115.116|
                  |L115.80|
000050  6810              LDR      r0,[r2,#0]            ;5465
000052  6800              LDR      r0,[r0,#0]            ;5465
000054  2301              MOVS     r3,#1                 ;5465
000056  031b              LSLS     r3,r3,#12             ;5465
000058  4018              ANDS     r0,r0,r3              ;5465
00005a  4298              CMP      r0,r3                 ;5465
00005c  d105              BNE      |L115.106|
00005e  6810              LDR      r0,[r2,#0]            ;5466
000060  3040              ADDS     r0,r0,#0x40           ;5466
000062  8a80              LDRH     r0,[r0,#0x14]         ;5466
000064  466b              MOV      r3,sp                 ;5466
000066  8018              STRH     r0,[r3,#0]            ;5466
000068  e004              B        |L115.116|
                  |L115.106|
00006a  6810              LDR      r0,[r2,#0]            ;5468
00006c  3040              ADDS     r0,r0,#0x40           ;5468
00006e  8a00              LDRH     r0,[r0,#0x10]         ;5468
000070  466b              MOV      r3,sp                 ;5468
000072  8018              STRH     r0,[r3,#0]            ;5468
                  |L115.116|
000074  e06a              B        |L115.332|
                  |L115.118|
000076  2320              MOVS     r3,#0x20              ;5474
000078  6850              LDR      r0,[r2,#4]            ;5474
00007a  4018              ANDS     r0,r0,r3              ;5474
00007c  2800              CMP      r0,#0                 ;5474
00007e  d00a              BEQ      |L115.150|
000080  6810              LDR      r0,[r2,#0]            ;5477
000082  3040              ADDS     r0,r0,#0x40           ;5477
000084  8b03              LDRH     r3,[r0,#0x18]         ;5477
000086  4668              MOV      r0,sp                 ;5477
000088  8043              STRH     r3,[r0,#2]            ;5477
00008a  6810              LDR      r0,[r2,#0]            ;5478
00008c  3040              ADDS     r0,r0,#0x40           ;5478
00008e  8b83              LDRH     r3,[r0,#0x1c]         ;5478
000090  4668              MOV      r0,sp                 ;5478
000092  8003              STRH     r3,[r0,#0]            ;5478
000094  e011              B        |L115.186|
                  |L115.150|
000096  6810              LDR      r0,[r2,#0]            ;5482
000098  6800              LDR      r0,[r0,#0]            ;5482
00009a  2301              MOVS     r3,#1                 ;5482
00009c  035b              LSLS     r3,r3,#13             ;5482
00009e  4018              ANDS     r0,r0,r3              ;5482
0000a0  4298              CMP      r0,r3                 ;5482
0000a2  d105              BNE      |L115.176|
0000a4  6810              LDR      r0,[r2,#0]            ;5483
0000a6  3040              ADDS     r0,r0,#0x40           ;5483
0000a8  8b80              LDRH     r0,[r0,#0x1c]         ;5483
0000aa  466b              MOV      r3,sp                 ;5483
0000ac  8018              STRH     r0,[r3,#0]            ;5483
0000ae  e004              B        |L115.186|
                  |L115.176|
0000b0  6810              LDR      r0,[r2,#0]            ;5485
0000b2  3040              ADDS     r0,r0,#0x40           ;5485
0000b4  8b00              LDRH     r0,[r0,#0x18]         ;5485
0000b6  466b              MOV      r3,sp                 ;5485
0000b8  8018              STRH     r0,[r3,#0]            ;5485
                  |L115.186|
0000ba  e047              B        |L115.332|
                  |L115.188|
0000bc  2320              MOVS     r3,#0x20              ;5491
0000be  6850              LDR      r0,[r2,#4]            ;5491
0000c0  4018              ANDS     r0,r0,r3              ;5491
0000c2  2800              CMP      r0,#0                 ;5491
0000c4  d00a              BEQ      |L115.220|
0000c6  6810              LDR      r0,[r2,#0]            ;5494
0000c8  3040              ADDS     r0,r0,#0x40           ;5494
0000ca  8c03              LDRH     r3,[r0,#0x20]         ;5494
0000cc  4668              MOV      r0,sp                 ;5494
0000ce  8043              STRH     r3,[r0,#2]            ;5494
0000d0  6810              LDR      r0,[r2,#0]            ;5495
0000d2  3040              ADDS     r0,r0,#0x40           ;5495
0000d4  8c83              LDRH     r3,[r0,#0x24]         ;5495
0000d6  4668              MOV      r0,sp                 ;5495
0000d8  8003              STRH     r3,[r0,#0]            ;5495
0000da  e011              B        |L115.256|
                  |L115.220|
0000dc  6810              LDR      r0,[r2,#0]            ;5499
0000de  6800              LDR      r0,[r0,#0]            ;5499
0000e0  2301              MOVS     r3,#1                 ;5499
0000e2  039b              LSLS     r3,r3,#14             ;5499
0000e4  4018              ANDS     r0,r0,r3              ;5499
0000e6  4298              CMP      r0,r3                 ;5499
0000e8  d105              BNE      |L115.246|
0000ea  6810              LDR      r0,[r2,#0]            ;5500
0000ec  3040              ADDS     r0,r0,#0x40           ;5500
0000ee  8c80              LDRH     r0,[r0,#0x24]         ;5500
0000f0  466b              MOV      r3,sp                 ;5500
0000f2  8018              STRH     r0,[r3,#0]            ;5500
0000f4  e004              B        |L115.256|
                  |L115.246|
0000f6  6810              LDR      r0,[r2,#0]            ;5502
0000f8  3040              ADDS     r0,r0,#0x40           ;5502
0000fa  8c00              LDRH     r0,[r0,#0x20]         ;5502
0000fc  466b              MOV      r3,sp                 ;5502
0000fe  8018              STRH     r0,[r3,#0]            ;5502
                  |L115.256|
000100  e024              B        |L115.332|
                  |L115.258|
000102  2320              MOVS     r3,#0x20              ;5508
000104  6850              LDR      r0,[r2,#4]            ;5508
000106  4018              ANDS     r0,r0,r3              ;5508
000108  2800              CMP      r0,#0                 ;5508
00010a  d00b              BEQ      |L115.292|
00010c  6810              LDR      r0,[r2,#0]            ;5511
00010e  3040              ADDS     r0,r0,#0x40           ;5511
000110  8d03              LDRH     r3,[r0,#0x28]         ;5511
000112  4668              MOV      r0,sp                 ;5511
000114  8043              STRH     r3,[r0,#2]            ;5511
000116  6810              LDR      r0,[r2,#0]            ;5512
000118  3040              ADDS     r0,r0,#0x40           ;5512
00011a  8d83              LDRH     r3,[r0,#0x2c]         ;5512
00011c  4668              MOV      r0,sp                 ;5512
00011e  8003              STRH     r3,[r0,#0]            ;5512
000120  e012              B        |L115.328|
                  |L115.290|
000122  e012              B        |L115.330|
                  |L115.292|
000124  6810              LDR      r0,[r2,#0]            ;5516
000126  6800              LDR      r0,[r0,#0]            ;5516
000128  2301              MOVS     r3,#1                 ;5516
00012a  03db              LSLS     r3,r3,#15             ;5516
00012c  4018              ANDS     r0,r0,r3              ;5516
00012e  4298              CMP      r0,r3                 ;5516
000130  d105              BNE      |L115.318|
000132  6810              LDR      r0,[r2,#0]            ;5517
000134  3040              ADDS     r0,r0,#0x40           ;5517
000136  8d80              LDRH     r0,[r0,#0x2c]         ;5517
000138  466b              MOV      r3,sp                 ;5517
00013a  8018              STRH     r0,[r3,#0]            ;5517
00013c  e004              B        |L115.328|
                  |L115.318|
00013e  6810              LDR      r0,[r2,#0]            ;5519
000140  3040              ADDS     r0,r0,#0x40           ;5519
000142  8d00              LDRH     r0,[r0,#0x28]         ;5519
000144  466b              MOV      r3,sp                 ;5519
000146  8018              STRH     r0,[r3,#0]            ;5519
                  |L115.328|
000148  e000              B        |L115.332|
                  |L115.330|
00014a  bf00              NOP                            ;5524
                  |L115.332|
00014c  bf00              NOP                            ;5470
00014e  bf00              NOP                            ;5528
000150  2300              MOVS     r3,#0                 ;5528
000152  2020              MOVS     r0,#0x20              ;5528
000154  5483              STRB     r3,[r0,r2]            ;5528
000156  bf00              NOP                            ;5528
000158  9800              LDR      r0,[sp,#0]            ;5530
00015a  e75b              B        |L115.20|
;;;5532   ///@}
                          ENDP


                          AREA ||i.MID_TM_SlaveConfigSynchronization||, CODE, READONLY, ALIGN=1

                  MID_TM_SlaveConfigSynchronization PROC
;;;5315    */
;;;5316   MID_StatusTypeDef MID_TM_SlaveConfigSynchronization(TM_HandleTypeDef* mTM, TM_SlaveConfigTypeDef* sSlaveConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;5317   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;5318       /* Process Lockeded */
;;;5319       __MID_LOCK(mTM);
000006  bf00              NOP      
000008  2020              MOVS     r0,#0x20
00000a  5d00              LDRB     r0,[r0,r4]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L116.20|
000010  2002              MOVS     r0,#2
                  |L116.18|
;;;5320   
;;;5321       mTM->State = MID_TM_STATE_BUSY;
;;;5322   
;;;5323       TM_SlaveTimer_SetConfig(mTM, sSlaveConfig);
;;;5324   
;;;5325       /* Disable Trigger Interrupt */
;;;5326       __DRV_TM_DISABLE_IT(mTM, TM_IT_EXTERNAL);
;;;5327   
;;;5328       mTM->State = MID_TM_STATE_READY;
;;;5329   
;;;5330       /* Release Lock */
;;;5331       __MID_UNLOCK(mTM);
;;;5332   
;;;5333       return MID_SUCCESS;
;;;5334   }
000012  bd70              POP      {r4-r6,pc}
                  |L116.20|
000014  2101              MOVS     r1,#1                 ;5319
000016  2020              MOVS     r0,#0x20              ;5319
000018  5501              STRB     r1,[r0,r4]            ;5319
00001a  bf00              NOP                            ;5319
00001c  2100              MOVS     r1,#0                 ;5321
00001e  2021              MOVS     r0,#0x21              ;5321
000020  5501              STRB     r1,[r0,r4]            ;5321
000022  4629              MOV      r1,r5                 ;5323
000024  4620              MOV      r0,r4                 ;5323
000026  f7fffffe          BL       TM_SlaveTimer_SetConfig
00002a  6820              LDR      r0,[r4,#0]            ;5326
00002c  6840              LDR      r0,[r0,#4]            ;5326
00002e  2108              MOVS     r1,#8                 ;5326
000030  4388              BICS     r0,r0,r1              ;5326
000032  6821              LDR      r1,[r4,#0]            ;5326
000034  6048              STR      r0,[r1,#4]            ;5326
000036  2101              MOVS     r1,#1                 ;5328
000038  2021              MOVS     r0,#0x21              ;5328
00003a  5501              STRB     r1,[r0,r4]            ;5328
00003c  bf00              NOP                            ;5331
00003e  2100              MOVS     r1,#0                 ;5331
000040  2020              MOVS     r0,#0x20              ;5331
000042  5501              STRB     r1,[r0,r4]            ;5331
000044  bf00              NOP                            ;5331
000046  2000              MOVS     r0,#0                 ;5333
000048  e7e3              B        |L116.18|
;;;5335   
                          ENDP


                          AREA ||i.MID_TM_SlaveConfigSynchronization_IT||, CODE, READONLY, ALIGN=1

                  MID_TM_SlaveConfigSynchronization_IT PROC
;;;5359    */
;;;5360   MID_StatusTypeDef MID_TM_SlaveConfigSynchronization_IT(TM_HandleTypeDef* mTM, TM_SlaveConfigTypeDef* sSlaveConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;5361   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;5362       /* Process Lockeded */
;;;5363       __MID_LOCK(mTM);
000006  bf00              NOP      
000008  2020              MOVS     r0,#0x20
00000a  5d00              LDRB     r0,[r0,r4]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L117.20|
000010  2002              MOVS     r0,#2
                  |L117.18|
;;;5364   
;;;5365       mTM->State = MID_TM_STATE_BUSY;
;;;5366   
;;;5367       TM_SlaveTimer_SetConfig(mTM, sSlaveConfig);
;;;5368   
;;;5369       /* Enable Trigger Interrupt */
;;;5370       __DRV_TM_ENABLE_IT(mTM, TM_IT_EXTERNAL);
;;;5371   
;;;5372       mTM->State = MID_TM_STATE_READY;
;;;5373   
;;;5374       /* Release Lock */
;;;5375       __MID_UNLOCK(mTM);
;;;5376   
;;;5377       return MID_SUCCESS;
;;;5378   }
000012  bd70              POP      {r4-r6,pc}
                  |L117.20|
000014  2101              MOVS     r1,#1                 ;5363
000016  2020              MOVS     r0,#0x20              ;5363
000018  5501              STRB     r1,[r0,r4]            ;5363
00001a  bf00              NOP                            ;5363
00001c  2100              MOVS     r1,#0                 ;5365
00001e  2021              MOVS     r0,#0x21              ;5365
000020  5501              STRB     r1,[r0,r4]            ;5365
000022  4629              MOV      r1,r5                 ;5367
000024  4620              MOV      r0,r4                 ;5367
000026  f7fffffe          BL       TM_SlaveTimer_SetConfig
00002a  6820              LDR      r0,[r4,#0]            ;5370
00002c  6840              LDR      r0,[r0,#4]            ;5370
00002e  2108              MOVS     r1,#8                 ;5370
000030  4308              ORRS     r0,r0,r1              ;5370
000032  6821              LDR      r1,[r4,#0]            ;5370
000034  6048              STR      r0,[r1,#4]            ;5370
000036  2101              MOVS     r1,#1                 ;5372
000038  2021              MOVS     r0,#0x21              ;5372
00003a  5501              STRB     r1,[r0,r4]            ;5372
00003c  bf00              NOP                            ;5375
00003e  2100              MOVS     r1,#0                 ;5375
000040  2020              MOVS     r0,#0x20              ;5375
000042  5501              STRB     r1,[r0,r4]            ;5375
000044  bf00              NOP                            ;5375
000046  2000              MOVS     r0,#0                 ;5377
000048  e7e3              B        |L117.18|
;;;5379   
                          ENDP


                          AREA ||i.MID_TM_TriggerCallback||, CODE, READONLY, ALIGN=1

                  MID_TM_TriggerCallback PROC
;;;5620    */
;;;5621   __weak void MID_TM_TriggerCallback(TM_HandleTypeDef* mTM)
000000  4770              BX       lr
;;;5622   {
;;;5623       /* Prevent unused argument(s) compilation warning */
;;;5624       UNUSED(mTM);
;;;5625       /* NOTE : This function Should not be modified, when the callback is needed,
;;;5626                 the MID_TM_TriggerCallback could be implemented in the user file
;;;5627        */
;;;5628   
;;;5629   }
;;;5630   
                          ENDP


                          AREA ||i.TM_Base_SetConfig||, CODE, READONLY, ALIGN=1

                  TM_Base_SetConfig PROC
;;;5952    */
;;;5953   void TM_Base_SetConfig(TM_Struct* TMx, TM_Base_InitTypeDef* Structure)
000000  b510              PUSH     {r4,lr}
;;;5954   {
;;;5955       uint32_t tmpcr1 = 0U;
000002  2200              MOVS     r2,#0
;;;5956   
;;;5957       /* Set TM Time Base Unit parameters ----------------------------------------*/
;;;5958       /* TM mode & direction */
;;;5959       tmpcr1 = TMx->CR0.W & ~(TM_CR0_MDS_mask_w | TM_CR0_DIR_mask_w | TM_CR0_DIR2_mask_w);
000004  6903              LDR      r3,[r0,#0x10]
000006  24f0              MOVS     r4,#0xf0
000008  43a3              BICS     r3,r3,r4
00000a  461a              MOV      r2,r3
;;;5960       tmpcr1 |= Structure->TM_CounterMode;
00000c  680b              LDR      r3,[r1,#0]
00000e  431a              ORRS     r2,r2,r3
;;;5961       TMx->CR0.W = tmpcr1;
000010  6102              STR      r2,[r0,#0x10]
;;;5962   
;;;5963       /* Set the Autoreload value */
;;;5964       TMx->ARR.W = (uint32_t)Structure->TM_Period ;
000012  88cb              LDRH     r3,[r1,#6]
000014  6243              STR      r3,[r0,#0x24]
;;;5965   
;;;5966       /* Set the Prescaler value */
;;;5967       TMx->PSARR.W = (uint32_t)Structure->TM_Prescaler;
000016  888b              LDRH     r3,[r1,#4]
000018  62c3              STR      r3,[r0,#0x2c]
;;;5968   
;;;5969       /* Generate an update event to reload the Main Counter and Prescaler  */
;;;5970       TMx->TRG.W |= (TM_TRG_RST2_SW_enable_w | TM_TRG_RST_SW_enable_w);
00001a  68c3              LDR      r3,[r0,#0xc]
00001c  2403              MOVS     r4,#3
00001e  0724              LSLS     r4,r4,#28
000020  4323              ORRS     r3,r3,r4
000022  60c3              STR      r3,[r0,#0xc]
;;;5971       TMx->TRG.W &= ~(TM_TRG_RST2_SW_enable_w | TM_TRG_RST_SW_enable_w);
000024  68c3              LDR      r3,[r0,#0xc]
000026  43a3              BICS     r3,r3,r4
000028  60c3              STR      r3,[r0,#0xc]
;;;5972   
;;;5973   }
00002a  bd10              POP      {r4,pc}
;;;5974   
                          ENDP


                          AREA ||i.TM_CCxChannelCmd||, CODE, READONLY, ALIGN=1

                  TM_CCxChannelCmd PROC
;;;6287    */
;;;6288   void TM_CCxChannelCmd(TM_Struct* TMx, uint32_t Channel, uint32_t ChannelMode)
000000  b570              PUSH     {r4-r6,lr}
;;;6289   {
;;;6290       uint32_t tmp = 0U;
000002  2300              MOVS     r3,#0
;;;6291   
;;;6292       tmp = TM_CCMDS_CC0_MDS_mask_w << (Channel * 4);
000004  008d              LSLS     r5,r1,#2
000006  2407              MOVS     r4,#7
000008  40ac              LSLS     r4,r4,r5
00000a  4623              MOV      r3,r4
;;;6293   
;;;6294       /* Reset the CCxE Bit */
;;;6295       TMx->CCMDS.W &= ~tmp;
00000c  6b04              LDR      r4,[r0,#0x30]
00000e  439c              BICS     r4,r4,r3
000010  6304              STR      r4,[r0,#0x30]
;;;6296   
;;;6297       /* Set or reset the CCxE Bit */
;;;6298       TMx->CCMDS.W |= (uint32_t)(ChannelMode << (Channel * 4));
000012  6b04              LDR      r4,[r0,#0x30]
000014  008e              LSLS     r6,r1,#2
000016  4615              MOV      r5,r2
000018  40b5              LSLS     r5,r5,r6
00001a  432c              ORRS     r4,r4,r5
00001c  6304              STR      r4,[r0,#0x30]
;;;6299   
;;;6300   
;;;6301   }
00001e  bd70              POP      {r4-r6,pc}
;;;6302   
                          ENDP


                          AREA ||i.TM_DMACaptureCplt||, CODE, READONLY, ALIGN=1

                  TM_DMACaptureCplt PROC
;;;5907    */
;;;5908   void TM_DMACaptureCplt(DMA_HandleTypeDef* hDMA)
000000  b570              PUSH     {r4-r6,lr}
;;;5909   {
000002  4605              MOV      r5,r0
;;;5910       TM_HandleTypeDef* mTM = (TM_HandleTypeDef*)((DMA_HandleTypeDef*)hDMA)->Parent;
000004  6aac              LDR      r4,[r5,#0x28]
;;;5911   
;;;5912       mTM->State = MID_TM_STATE_READY;
000006  2101              MOVS     r1,#1
000008  2021              MOVS     r0,#0x21
00000a  5501              STRB     r1,[r0,r4]
;;;5913   
;;;5914       if(hDMA == mTM->hDMA[TM_DMA_ID_CC0])
00000c  6920              LDR      r0,[r4,#0x10]
00000e  42a8              CMP      r0,r5
000010  d102              BNE      |L121.24|
;;;5915       {
;;;5916           mTM->Channel = MID_TM_Channel0;
000012  2000              MOVS     r0,#0
000014  7320              STRB     r0,[r4,#0xc]
000016  e010              B        |L121.58|
                  |L121.24|
;;;5917           // to do ...
;;;5918       }
;;;5919       else if(hDMA == mTM->hDMA[TM_DMA_ID_CC1])
000018  6960              LDR      r0,[r4,#0x14]
00001a  42a8              CMP      r0,r5
00001c  d102              BNE      |L121.36|
;;;5920       {
;;;5921           mTM->Channel = MID_TM_Channel1;
00001e  2001              MOVS     r0,#1
000020  7320              STRB     r0,[r4,#0xc]
000022  e00a              B        |L121.58|
                  |L121.36|
;;;5922           // to do ...
;;;5923       }
;;;5924       else if(hDMA == mTM->hDMA[TM_DMA_ID_CC2])
000024  69a0              LDR      r0,[r4,#0x18]
000026  42a8              CMP      r0,r5
000028  d102              BNE      |L121.48|
;;;5925       {
;;;5926           mTM->Channel = MID_TM_Channel2;
00002a  2002              MOVS     r0,#2
00002c  7320              STRB     r0,[r4,#0xc]
00002e  e004              B        |L121.58|
                  |L121.48|
;;;5927           // to do ...
;;;5928       }
;;;5929       else if(hDMA == mTM->hDMA[TM_DMA_ID_CC3])
000030  69e0              LDR      r0,[r4,#0x1c]
000032  42a8              CMP      r0,r5
000034  d101              BNE      |L121.58|
;;;5930       {
;;;5931           mTM->Channel = MID_TM_Channel3;
000036  2003              MOVS     r0,#3
000038  7320              STRB     r0,[r4,#0xc]
                  |L121.58|
;;;5932           // to do ...
;;;5933       }
;;;5934   
;;;5935       MID_TM_IC_CaptureCallback(mTM);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       MID_TM_IC_CaptureCallback
;;;5936   
;;;5937       mTM->Channel = MID_TM_ACTIVE_CHANNEL_CLEARED;
000040  2005              MOVS     r0,#5
000042  7320              STRB     r0,[r4,#0xc]
;;;5938   }
000044  bd70              POP      {r4-r6,pc}
;;;5939   
                          ENDP


                          AREA ||i.TM_DMADelayPulseCplt||, CODE, READONLY, ALIGN=1

                  TM_DMADelayPulseCplt PROC
;;;5868    */
;;;5869   void TM_DMADelayPulseCplt(DMA_HandleTypeDef* hDMA)
000000  b570              PUSH     {r4-r6,lr}
;;;5870   {
000002  4605              MOV      r5,r0
;;;5871       TM_HandleTypeDef* mTM = (TM_HandleTypeDef*)((DMA_HandleTypeDef*)hDMA)->Parent;
000004  6aac              LDR      r4,[r5,#0x28]
;;;5872   
;;;5873       mTM->State = MID_TM_STATE_READY;
000006  2101              MOVS     r1,#1
000008  2021              MOVS     r0,#0x21
00000a  5501              STRB     r1,[r0,r4]
;;;5874   
;;;5875       if(hDMA == mTM->hDMA[TM_DMA_ID_CC0])
00000c  6920              LDR      r0,[r4,#0x10]
00000e  42a8              CMP      r0,r5
000010  d102              BNE      |L122.24|
;;;5876       {
;;;5877           mTM->Channel = MID_TM_Channel0;
000012  2000              MOVS     r0,#0
000014  7320              STRB     r0,[r4,#0xc]
000016  e010              B        |L122.58|
                  |L122.24|
;;;5878           // to do ...
;;;5879       }
;;;5880       else if(hDMA == mTM->hDMA[TM_DMA_ID_CC1])
000018  6960              LDR      r0,[r4,#0x14]
00001a  42a8              CMP      r0,r5
00001c  d102              BNE      |L122.36|
;;;5881       {
;;;5882           mTM->Channel = MID_TM_Channel1;
00001e  2001              MOVS     r0,#1
000020  7320              STRB     r0,[r4,#0xc]
000022  e00a              B        |L122.58|
                  |L122.36|
;;;5883           // to do ...
;;;5884       }
;;;5885       else if(hDMA == mTM->hDMA[TM_DMA_ID_CC2])
000024  69a0              LDR      r0,[r4,#0x18]
000026  42a8              CMP      r0,r5
000028  d102              BNE      |L122.48|
;;;5886       {
;;;5887           mTM->Channel = MID_TM_Channel2;
00002a  2002              MOVS     r0,#2
00002c  7320              STRB     r0,[r4,#0xc]
00002e  e004              B        |L122.58|
                  |L122.48|
;;;5888           // to do ...
;;;5889       }
;;;5890       else if(hDMA == mTM->hDMA[TM_DMA_ID_CC3])
000030  69e0              LDR      r0,[r4,#0x1c]
000032  42a8              CMP      r0,r5
000034  d101              BNE      |L122.58|
;;;5891       {
;;;5892           mTM->Channel = MID_TM_Channel3;
000036  2003              MOVS     r0,#3
000038  7320              STRB     r0,[r4,#0xc]
                  |L122.58|
;;;5893           // to do ...
;;;5894       }
;;;5895   
;;;5896       MID_TM_PWM_PulseFinishedCallback(mTM);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       MID_TM_PWM_PulseFinishedCallback
;;;5897   
;;;5898       mTM->Channel = MID_TM_ACTIVE_CHANNEL_CLEARED;
000040  2005              MOVS     r0,#5
000042  7320              STRB     r0,[r4,#0xc]
;;;5899   }
000044  bd70              POP      {r4-r6,pc}
;;;5900   
                          ENDP


                          AREA ||i.TM_DMAError||, CODE, READONLY, ALIGN=1

                  TM_DMAError PROC
;;;5851    */
;;;5852   void TM_DMAError(DMA_HandleTypeDef* hDMA)
000000  b570              PUSH     {r4-r6,lr}
;;;5853   {
000002  4604              MOV      r4,r0
;;;5854       TM_HandleTypeDef* mTM = (TM_HandleTypeDef*)((DMA_HandleTypeDef*)hDMA)->Parent;
000004  6aa5              LDR      r5,[r4,#0x28]
;;;5855   
;;;5856       mTM->State= MID_TM_STATE_READY;
000006  2101              MOVS     r1,#1
000008  2021              MOVS     r0,#0x21
00000a  5541              STRB     r1,[r0,r5]
;;;5857   
;;;5858       MID_TM_ErrorCallback(mTM);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       MID_TM_ErrorCallback
;;;5859   }
000012  bd70              POP      {r4-r6,pc}
;;;5860   
                          ENDP


                          AREA ||i.TM_OC0_SetConfig||, CODE, READONLY, ALIGN=2

                  TM_OC0_SetConfig PROC
;;;5987    */
;;;5988   static void TM_OC0_SetConfig(TM_Struct* TMx, TM_OC_InitTypeDef* OC_Config)
000000  b500              PUSH     {lr}
;;;5989   {
;;;5990       /* Set the Output Idle state (Break state) */
;;;5991       TMx->BS.W &= ~(TM_BS_STP0_STA_mask_w | TM_BS_STP0N_STA_mask_w);
000002  6c82              LDR      r2,[r0,#0x48]
000004  2311              MOVS     r3,#0x11
000006  061b              LSLS     r3,r3,#24
000008  439a              BICS     r2,r2,r3
00000a  6482              STR      r2,[r0,#0x48]
;;;5992       TMx->BS.W |= ((OC_Config->OCIdleState  | OC_Config->OCNIdleState) << 0);
00000c  698b              LDR      r3,[r1,#0x18]
00000e  694a              LDR      r2,[r1,#0x14]
000010  431a              ORRS     r2,r2,r3
000012  6c83              LDR      r3,[r0,#0x48]
000014  431a              ORRS     r2,r2,r3
000016  6482              STR      r2,[r0,#0x48]
;;;5993   
;;;5994       /* Set the Output Idle state  */
;;;5995       TMx->OSCR.W |= ((TM_OSCR_OS0_LCK_un_locked_w | OC_Config->OCIdleState |
000018  4b26              LDR      r3,|L124.180|
00001a  694a              LDR      r2,[r1,#0x14]
00001c  431a              ORRS     r2,r2,r3
00001e  69cb              LDR      r3,[r1,#0x1c]
000020  431a              ORRS     r2,r2,r3
000022  6b83              LDR      r3,[r0,#0x38]
000024  431a              ORRS     r2,r2,r3
000026  6382              STR      r2,[r0,#0x38]
;;;5996                        TM_OSCR_OS0H_LCK_un_locked_w | OC_Config->OCHIdleState) << 0);
;;;5997   
;;;5998       /* Set the Output Polarity */
;;;5999       TMx->OCCR1.W &= ~((TM_OCCR1_OC0_INV_mask_w | TM_OCCR1_OC0H_INV_mask_w | TM_OCCR1_OC0N_INV_mask_w) << 0);
000028  6c02              LDR      r2,[r0,#0x40]
00002a  23ff              MOVS     r3,#0xff
00002c  3312              ADDS     r3,r3,#0x12
00002e  439a              BICS     r2,r2,r3
000030  6402              STR      r2,[r0,#0x40]
;;;6000       TMx->OCCR1.W |= ((OC_Config->OCPolarity | OC_Config->OCNPolarity | OC_Config->OCHPolarity) << 0);
000032  68cb              LDR      r3,[r1,#0xc]
000034  688a              LDR      r2,[r1,#8]
000036  431a              ORRS     r2,r2,r3
000038  690b              LDR      r3,[r1,#0x10]
00003a  431a              ORRS     r2,r2,r3
00003c  6c03              LDR      r3,[r0,#0x40]
00003e  431a              ORRS     r2,r2,r3
000040  6402              STR      r2,[r0,#0x40]
;;;6001   
;;;6002       /* Set the Capture Compare Register value */
;;;6003       TMx->CC0A.H[0] = TMx->CC0B.H[0] = OC_Config->Pulse;
000042  888b              LDRH     r3,[r1,#4]
000044  2254              MOVS     r2,#0x54
000046  5213              STRH     r3,[r2,r0]
000048  2250              MOVS     r2,#0x50
00004a  5213              STRH     r3,[r2,r0]
;;;6004   
;;;6005       // Enable Ouput OC
;;;6006       switch(OC_Config->OCMode)
00004c  680a              LDR      r2,[r1,#0]
00004e  0013              MOVS     r3,r2
000050  f7fffffe          BL       __ARM_common_switch8
000054  08052d0a          DCB      0x08,0x05,0x2d,0x0a
000058  0f151b21          DCB      0x0f,0x15,0x1b,0x21
00005c  272d              DCB      0x27,0x2d
;;;6007       {
;;;6008       case TM_CH_Disable:
;;;6009           TMx->OCCR0.W &= ~(TM_OCCR0_OC0_OE0_enable_w | TM_OCCR0_OC0N_OE_enable_w);
00005e  6bc2              LDR      r2,[r0,#0x3c]
000060  4b15              LDR      r3,|L124.184|
000062  401a              ANDS     r2,r2,r3
000064  63c2              STR      r2,[r0,#0x3c]
;;;6010           break;
000066  e023              B        |L124.176|
;;;6011       case TM_CH_16bit_OutputCompare:
;;;6012           TMx->OCCR0.W |= (TM_OCCR0_OC0_OE0_enable_w);
000068  6bc2              LDR      r2,[r0,#0x3c]
00006a  2301              MOVS     r3,#1
00006c  431a              ORRS     r2,r2,r3
00006e  63c2              STR      r2,[r0,#0x3c]
;;;6013           break;
000070  e01e              B        |L124.176|
;;;6014       case TM_CH_8bitx2_OutputCompare:
;;;6015           TMx->OCCR0.W |= (TM_OCCR0_OC0_OE0_enable_w | TM_OCCR0_OC0N_OE_enable_w);
000072  6bc2              LDR      r2,[r0,#0x3c]
000074  4b10              LDR      r3,|L124.184|
000076  43db              MVNS     r3,r3
000078  431a              ORRS     r2,r2,r3
00007a  63c2              STR      r2,[r0,#0x3c]
;;;6016           break;
00007c  e018              B        |L124.176|
;;;6017       case TM_CH_16bit_PWM:
;;;6018           TMx->OCCR0.W |= (TM_OCCR0_OC0_OE0_enable_w | TM_OCCR0_OC0N_OE_enable_w);
00007e  6bc2              LDR      r2,[r0,#0x3c]
000080  4b0d              LDR      r3,|L124.184|
000082  43db              MVNS     r3,r3
000084  431a              ORRS     r2,r2,r3
000086  63c2              STR      r2,[r0,#0x3c]
;;;6019           break;
000088  e012              B        |L124.176|
;;;6020       case TM_CH_8bitx2_PWM:
;;;6021           TMx->OCCR0.W |= (TM_OCCR0_OC0_OE0_enable_w | TM_OCCR0_OC0N_OE_enable_w);
00008a  6bc2              LDR      r2,[r0,#0x3c]
00008c  4b0a              LDR      r3,|L124.184|
00008e  43db              MVNS     r3,r3
000090  431a              ORRS     r2,r2,r3
000092  63c2              STR      r2,[r0,#0x3c]
;;;6022           break;
000094  e00c              B        |L124.176|
;;;6023       case TM_CH_16bit_PWM_COMPLEMENT:
;;;6024           TMx->OCCR0.W |= (TM_OCCR0_OC0_OE0_enable_w | TM_OCCR0_OC0N_OE_enable_w);
000096  6bc2              LDR      r2,[r0,#0x3c]
000098  4b07              LDR      r3,|L124.184|
00009a  43db              MVNS     r3,r3
00009c  431a              ORRS     r2,r2,r3
00009e  63c2              STR      r2,[r0,#0x3c]
;;;6025           break;
0000a0  e006              B        |L124.176|
;;;6026       case TM_CH_8bitx2_PWM_COMPLEMENT:
;;;6027           TMx->OCCR0.W |= (TM_OCCR0_OC0_OE0_enable_w | TM_OCCR0_OC0N_OE_enable_w);
0000a2  6bc2              LDR      r2,[r0,#0x3c]
0000a4  4b04              LDR      r3,|L124.184|
0000a6  43db              MVNS     r3,r3
0000a8  431a              ORRS     r2,r2,r3
0000aa  63c2              STR      r2,[r0,#0x3c]
;;;6028           break;
0000ac  e000              B        |L124.176|
;;;6029   
;;;6030       default:
;;;6031           break;
0000ae  bf00              NOP      
                  |L124.176|
0000b0  bf00              NOP                            ;6010
;;;6032   
;;;6033       }
;;;6034   
;;;6035   }
0000b2  bd00              POP      {pc}
;;;6036   
                          ENDP

                  |L124.180|
                          DCD      0x00001010
                  |L124.184|
                          DCD      0xfffefffe

                          AREA ||i.TM_OC1_SetConfig||, CODE, READONLY, ALIGN=2

                  TM_OC1_SetConfig PROC
;;;6049    */
;;;6050   static void TM_OC1_SetConfig(TM_Struct* TMx, TM_OC_InitTypeDef* OC_Config)
000000  b500              PUSH     {lr}
;;;6051   {
;;;6052       /* Set the Output Idle state (Break state) */
;;;6053       TMx->BS.W &= ~((TM_BS_STP0_STA_mask_w | TM_BS_STP0N_STA_mask_w) << 1);
000002  6c82              LDR      r2,[r0,#0x48]
000004  2311              MOVS     r3,#0x11
000006  065b              LSLS     r3,r3,#25
000008  439a              BICS     r2,r2,r3
00000a  6482              STR      r2,[r0,#0x48]
;;;6054       TMx->BS.W |= ((OC_Config->OCIdleState | OC_Config->OCNIdleState) << 1);
00000c  698b              LDR      r3,[r1,#0x18]
00000e  694a              LDR      r2,[r1,#0x14]
000010  431a              ORRS     r2,r2,r3
000012  0052              LSLS     r2,r2,#1
000014  6c83              LDR      r3,[r0,#0x48]
000016  431a              ORRS     r2,r2,r3
000018  6482              STR      r2,[r0,#0x48]
;;;6055   
;;;6056       /* Set the Output Idle state  */
;;;6057       TMx->OSCR.W |= ((TM_OSCR_OS0_LCK_un_locked_w | OC_Config->OCIdleState |
00001a  4b27              LDR      r3,|L125.184|
00001c  694a              LDR      r2,[r1,#0x14]
00001e  431a              ORRS     r2,r2,r3
000020  69cb              LDR      r3,[r1,#0x1c]
000022  431a              ORRS     r2,r2,r3
000024  0052              LSLS     r2,r2,#1
000026  6b83              LDR      r3,[r0,#0x38]
000028  431a              ORRS     r2,r2,r3
00002a  6382              STR      r2,[r0,#0x38]
;;;6058                        TM_OSCR_OS0H_LCK_un_locked_w | OC_Config->OCHIdleState) << 1);
;;;6059   
;;;6060       /* Set the Output Polarity */
;;;6061       TMx->OCCR1.W &= ~((TM_OCCR1_OC0_INV_mask_w | TM_OCCR1_OC0H_INV_mask_w | TM_OCCR1_OC0N_INV_mask_w) << 1);
00002c  6c02              LDR      r2,[r0,#0x40]
00002e  4b23              LDR      r3,|L125.188|
000030  401a              ANDS     r2,r2,r3
000032  6402              STR      r2,[r0,#0x40]
;;;6062       TMx->OCCR1.W |= ((OC_Config->OCPolarity | OC_Config->OCNPolarity | OC_Config->OCHPolarity) << 1);
000034  68cb              LDR      r3,[r1,#0xc]
000036  688a              LDR      r2,[r1,#8]
000038  431a              ORRS     r2,r2,r3
00003a  690b              LDR      r3,[r1,#0x10]
00003c  431a              ORRS     r2,r2,r3
00003e  0052              LSLS     r2,r2,#1
000040  6c03              LDR      r3,[r0,#0x40]
000042  431a              ORRS     r2,r2,r3
000044  6402              STR      r2,[r0,#0x40]
;;;6063   
;;;6064       /* Set the Capture Compare Register value */
;;;6065       TMx->CC1A.H[0] = TMx->CC1B.H[0] = OC_Config->Pulse;
000046  888b              LDRH     r3,[r1,#4]
000048  225c              MOVS     r2,#0x5c
00004a  5213              STRH     r3,[r2,r0]
00004c  2258              MOVS     r2,#0x58
00004e  5213              STRH     r3,[r2,r0]
;;;6066   
;;;6067       // Enable Ouput OC
;;;6068       switch(OC_Config->OCMode)
000050  680a              LDR      r2,[r1,#0]
000052  0013              MOVS     r3,r2
000054  f7fffffe          BL       __ARM_common_switch8
000058  08052d0a          DCB      0x08,0x05,0x2d,0x0a
00005c  0f151b21          DCB      0x0f,0x15,0x1b,0x21
000060  272d              DCB      0x27,0x2d
;;;6069       {
;;;6070       case TM_CH_Disable:
;;;6071           TMx->OCCR0.W &= ~(TM_OCCR0_OC1_OE0_enable_w | TM_OCCR0_OC1N_OE_enable_w);
000062  6bc2              LDR      r2,[r0,#0x3c]
000064  4b16              LDR      r3,|L125.192|
000066  401a              ANDS     r2,r2,r3
000068  63c2              STR      r2,[r0,#0x3c]
;;;6072           break;
00006a  e023              B        |L125.180|
;;;6073       case TM_CH_16bit_OutputCompare:
;;;6074           TMx->OCCR0.W |= (TM_OCCR0_OC1_OE0_enable_w);
00006c  6bc2              LDR      r2,[r0,#0x3c]
00006e  2310              MOVS     r3,#0x10
000070  431a              ORRS     r2,r2,r3
000072  63c2              STR      r2,[r0,#0x3c]
;;;6075           break;
000074  e01e              B        |L125.180|
;;;6076       case TM_CH_8bitx2_OutputCompare:
;;;6077           TMx->OCCR0.W |= (TM_OCCR0_OC1_OE0_enable_w | TM_OCCR0_OC1N_OE_enable_w);
000076  6bc2              LDR      r2,[r0,#0x3c]
000078  4b11              LDR      r3,|L125.192|
00007a  43db              MVNS     r3,r3
00007c  431a              ORRS     r2,r2,r3
00007e  63c2              STR      r2,[r0,#0x3c]
;;;6078           break;
000080  e018              B        |L125.180|
;;;6079       case TM_CH_16bit_PWM:
;;;6080           TMx->OCCR0.W |= (TM_OCCR0_OC1_OE0_enable_w | TM_OCCR0_OC1N_OE_enable_w);
000082  6bc2              LDR      r2,[r0,#0x3c]
000084  4b0e              LDR      r3,|L125.192|
000086  43db              MVNS     r3,r3
000088  431a              ORRS     r2,r2,r3
00008a  63c2              STR      r2,[r0,#0x3c]
;;;6081           break;
00008c  e012              B        |L125.180|
;;;6082       case TM_CH_8bitx2_PWM:
;;;6083           TMx->OCCR0.W |= (TM_OCCR0_OC1_OE0_enable_w | TM_OCCR0_OC1N_OE_enable_w);
00008e  6bc2              LDR      r2,[r0,#0x3c]
000090  4b0b              LDR      r3,|L125.192|
000092  43db              MVNS     r3,r3
000094  431a              ORRS     r2,r2,r3
000096  63c2              STR      r2,[r0,#0x3c]
;;;6084           break;
000098  e00c              B        |L125.180|
;;;6085       case TM_CH_16bit_PWM_COMPLEMENT:
;;;6086           TMx->OCCR0.W |= (TM_OCCR0_OC1_OE0_enable_w | TM_OCCR0_OC1N_OE_enable_w);
00009a  6bc2              LDR      r2,[r0,#0x3c]
00009c  4b08              LDR      r3,|L125.192|
00009e  43db              MVNS     r3,r3
0000a0  431a              ORRS     r2,r2,r3
0000a2  63c2              STR      r2,[r0,#0x3c]
;;;6087           break;
0000a4  e006              B        |L125.180|
;;;6088       case TM_CH_8bitx2_PWM_COMPLEMENT:
;;;6089           TMx->OCCR0.W |= (TM_OCCR0_OC1_OE0_enable_w | TM_OCCR0_OC1N_OE_enable_w);
0000a6  6bc2              LDR      r2,[r0,#0x3c]
0000a8  4b05              LDR      r3,|L125.192|
0000aa  43db              MVNS     r3,r3
0000ac  431a              ORRS     r2,r2,r3
0000ae  63c2              STR      r2,[r0,#0x3c]
;;;6090           break;
0000b0  e000              B        |L125.180|
;;;6091   
;;;6092       default:
;;;6093           break;
0000b2  bf00              NOP      
                  |L125.180|
0000b4  bf00              NOP                            ;6072
;;;6094   
;;;6095       }
;;;6096   
;;;6097   }
0000b6  bd00              POP      {pc}
;;;6098   
                          ENDP

                  |L125.184|
                          DCD      0x00001010
                  |L125.188|
                          DCD      0xfffffddd
                  |L125.192|
                          DCD      0xffefffef

                          AREA ||i.TM_OC2_SetConfig||, CODE, READONLY, ALIGN=2

                  TM_OC2_SetConfig PROC
;;;6111    */
;;;6112   static void TM_OC2_SetConfig(TM_Struct* TMx, TM_OC_InitTypeDef* OC_Config)
000000  b500              PUSH     {lr}
;;;6113   {
;;;6114       /* Set the Output Idle state (Break state) */
;;;6115       TMx->BS.W &= ~((TM_BS_STP0_STA_mask_w | TM_BS_STP0N_STA_mask_w) << 2);
000002  6c82              LDR      r2,[r0,#0x48]
000004  2311              MOVS     r3,#0x11
000006  069b              LSLS     r3,r3,#26
000008  439a              BICS     r2,r2,r3
00000a  6482              STR      r2,[r0,#0x48]
;;;6116       TMx->BS.W |= ((OC_Config->OCIdleState | OC_Config->OCNIdleState) << 2);
00000c  698b              LDR      r3,[r1,#0x18]
00000e  694a              LDR      r2,[r1,#0x14]
000010  431a              ORRS     r2,r2,r3
000012  0092              LSLS     r2,r2,#2
000014  6c83              LDR      r3,[r0,#0x48]
000016  431a              ORRS     r2,r2,r3
000018  6482              STR      r2,[r0,#0x48]
;;;6117   
;;;6118       /* Set the Output Idle state  */
;;;6119       TMx->OSCR.W |= ((TM_OSCR_OS0_LCK_un_locked_w | OC_Config->OCIdleState |
00001a  4b28              LDR      r3,|L126.188|
00001c  694a              LDR      r2,[r1,#0x14]
00001e  431a              ORRS     r2,r2,r3
000020  69cb              LDR      r3,[r1,#0x1c]
000022  431a              ORRS     r2,r2,r3
000024  0092              LSLS     r2,r2,#2
000026  6b83              LDR      r3,[r0,#0x38]
000028  431a              ORRS     r2,r2,r3
00002a  6382              STR      r2,[r0,#0x38]
;;;6120                        TM_OSCR_OS0H_LCK_un_locked_w | OC_Config->OCHIdleState) << 2);
;;;6121   
;;;6122       /* Set the Output Polarity */
;;;6123       TMx->OCCR1.W &= ~((TM_OCCR1_OC0_INV_mask_w | TM_OCCR1_OC0H_INV_mask_w | TM_OCCR1_OC0N_INV_mask_w) << 2);
00002c  6c02              LDR      r2,[r0,#0x40]
00002e  4b24              LDR      r3,|L126.192|
000030  401a              ANDS     r2,r2,r3
000032  6402              STR      r2,[r0,#0x40]
;;;6124       TMx->OCCR1.W |= ((OC_Config->OCPolarity | OC_Config->OCNPolarity | OC_Config->OCHPolarity) << 2);
000034  68cb              LDR      r3,[r1,#0xc]
000036  688a              LDR      r2,[r1,#8]
000038  431a              ORRS     r2,r2,r3
00003a  690b              LDR      r3,[r1,#0x10]
00003c  431a              ORRS     r2,r2,r3
00003e  0092              LSLS     r2,r2,#2
000040  6c03              LDR      r3,[r0,#0x40]
000042  431a              ORRS     r2,r2,r3
000044  6402              STR      r2,[r0,#0x40]
;;;6125   
;;;6126       /* Set the Capture Compare Register value */
;;;6127       TMx->CC2A.H[0] = TMx->CC2B.H[0] = OC_Config->Pulse;
000046  888b              LDRH     r3,[r1,#4]
000048  2264              MOVS     r2,#0x64
00004a  5213              STRH     r3,[r2,r0]
00004c  2260              MOVS     r2,#0x60
00004e  5213              STRH     r3,[r2,r0]
;;;6128   
;;;6129       // Enable Ouput OC
;;;6130       switch(OC_Config->OCMode)
000050  680a              LDR      r2,[r1,#0]
000052  0013              MOVS     r3,r2
000054  f7fffffe          BL       __ARM_common_switch8
000058  08052e0a          DCB      0x08,0x05,0x2e,0x0a
00005c  10161c22          DCB      0x10,0x16,0x1c,0x22
000060  282e              DCB      0x28,0x2e
;;;6131       {
;;;6132       case TM_CH_Disable:
;;;6133           TMx->OCCR0.W &= ~(TM_OCCR0_OC2_OE_enable_w | TM_OCCR0_OC2N_OE_enable_w);
000062  6bc2              LDR      r2,[r0,#0x3c]
000064  4b17              LDR      r3,|L126.196|
000066  401a              ANDS     r2,r2,r3
000068  63c2              STR      r2,[r0,#0x3c]
;;;6134           break;
00006a  e024              B        |L126.182|
;;;6135       case TM_CH_16bit_OutputCompare:
;;;6136           TMx->OCCR0.W |= (TM_OCCR0_OC2_OE_enable_w);
00006c  6bc2              LDR      r2,[r0,#0x3c]
00006e  23ff              MOVS     r3,#0xff
000070  3301              ADDS     r3,#1
000072  431a              ORRS     r2,r2,r3
000074  63c2              STR      r2,[r0,#0x3c]
;;;6137           break;
000076  e01e              B        |L126.182|
;;;6138       case TM_CH_8bitx2_OutputCompare:
;;;6139           TMx->OCCR0.W |= (TM_OCCR0_OC2_OE_enable_w | TM_OCCR0_OC2N_OE_enable_w);
000078  6bc2              LDR      r2,[r0,#0x3c]
00007a  4b12              LDR      r3,|L126.196|
00007c  43db              MVNS     r3,r3
00007e  431a              ORRS     r2,r2,r3
000080  63c2              STR      r2,[r0,#0x3c]
;;;6140           break;
000082  e018              B        |L126.182|
;;;6141       case TM_CH_16bit_PWM:
;;;6142           TMx->OCCR0.W |= (TM_OCCR0_OC2_OE_enable_w | TM_OCCR0_OC2N_OE_enable_w);
000084  6bc2              LDR      r2,[r0,#0x3c]
000086  4b0f              LDR      r3,|L126.196|
000088  43db              MVNS     r3,r3
00008a  431a              ORRS     r2,r2,r3
00008c  63c2              STR      r2,[r0,#0x3c]
;;;6143           break;
00008e  e012              B        |L126.182|
;;;6144       case TM_CH_8bitx2_PWM:
;;;6145           TMx->OCCR0.W |= (TM_OCCR0_OC2_OE_enable_w | TM_OCCR0_OC2N_OE_enable_w);
000090  6bc2              LDR      r2,[r0,#0x3c]
000092  4b0c              LDR      r3,|L126.196|
000094  43db              MVNS     r3,r3
000096  431a              ORRS     r2,r2,r3
000098  63c2              STR      r2,[r0,#0x3c]
;;;6146           break;
00009a  e00c              B        |L126.182|
;;;6147       case TM_CH_16bit_PWM_COMPLEMENT:
;;;6148           TMx->OCCR0.W |= (TM_OCCR0_OC2_OE_enable_w | TM_OCCR0_OC2N_OE_enable_w);
00009c  6bc2              LDR      r2,[r0,#0x3c]
00009e  4b09              LDR      r3,|L126.196|
0000a0  43db              MVNS     r3,r3
0000a2  431a              ORRS     r2,r2,r3
0000a4  63c2              STR      r2,[r0,#0x3c]
;;;6149           break;
0000a6  e006              B        |L126.182|
;;;6150       case TM_CH_8bitx2_PWM_COMPLEMENT:
;;;6151           TMx->OCCR0.W |= (TM_OCCR0_OC2_OE_enable_w | TM_OCCR0_OC2N_OE_enable_w);
0000a8  6bc2              LDR      r2,[r0,#0x3c]
0000aa  4b06              LDR      r3,|L126.196|
0000ac  43db              MVNS     r3,r3
0000ae  431a              ORRS     r2,r2,r3
0000b0  63c2              STR      r2,[r0,#0x3c]
;;;6152           break;
0000b2  e000              B        |L126.182|
;;;6153   
;;;6154       default:
;;;6155           break;
0000b4  bf00              NOP      
                  |L126.182|
0000b6  bf00              NOP                            ;6134
;;;6156   
;;;6157       }
;;;6158   
;;;6159   }
0000b8  bd00              POP      {pc}
;;;6160   
                          ENDP

0000ba  0000              DCW      0x0000
                  |L126.188|
                          DCD      0x00001010
                  |L126.192|
                          DCD      0xfffffbbb
                  |L126.196|
                          DCD      0xfefffeff

                          AREA ||i.TM_OC3_SetConfig||, CODE, READONLY, ALIGN=2

                  TM_OC3_SetConfig PROC
;;;6173    */
;;;6174   static void TM_OC3_SetConfig(TM_Struct* TMx, TM_OC_InitTypeDef* OC_Config)
000000  b500              PUSH     {lr}
;;;6175   {
;;;6176       /* Set the Output Idle state (Break state) */
;;;6177       TMx->BS.W &= ~((TM_BS_STP0_STA_mask_w | TM_BS_STP0N_STA_mask_w) << 3);
000002  6c82              LDR      r2,[r0,#0x48]
000004  2311              MOVS     r3,#0x11
000006  06db              LSLS     r3,r3,#27
000008  439a              BICS     r2,r2,r3
00000a  6482              STR      r2,[r0,#0x48]
;;;6178       TMx->BS.W |= ((OC_Config->OCIdleState | OC_Config->OCNIdleState) << 3);
00000c  698b              LDR      r3,[r1,#0x18]
00000e  694a              LDR      r2,[r1,#0x14]
000010  431a              ORRS     r2,r2,r3
000012  00d2              LSLS     r2,r2,#3
000014  6c83              LDR      r3,[r0,#0x48]
000016  431a              ORRS     r2,r2,r3
000018  6482              STR      r2,[r0,#0x48]
;;;6179   
;;;6180       /* Set the Output Idle state  */
;;;6181       TMx->OSCR.W |= ((TM_OSCR_OS0_LCK_un_locked_w | OC_Config->OCIdleState |
00001a  4b28              LDR      r3,|L127.188|
00001c  694a              LDR      r2,[r1,#0x14]
00001e  431a              ORRS     r2,r2,r3
000020  69cb              LDR      r3,[r1,#0x1c]
000022  431a              ORRS     r2,r2,r3
000024  00d2              LSLS     r2,r2,#3
000026  6b83              LDR      r3,[r0,#0x38]
000028  431a              ORRS     r2,r2,r3
00002a  6382              STR      r2,[r0,#0x38]
;;;6182                        TM_OSCR_OS0H_LCK_un_locked_w | OC_Config->OCHIdleState) << 3);
;;;6183   
;;;6184       /* Set the Output Polarity */
;;;6185       TMx->OCCR1.W &= ~((TM_OCCR1_OC0_INV_mask_w | TM_OCCR1_OC0H_INV_mask_w | TM_OCCR1_OC0N_INV_mask_w) << 3);
00002c  6c02              LDR      r2,[r0,#0x40]
00002e  4b24              LDR      r3,|L127.192|
000030  401a              ANDS     r2,r2,r3
000032  6402              STR      r2,[r0,#0x40]
;;;6186       TMx->OCCR1.W |= ((OC_Config->OCPolarity | OC_Config->OCNPolarity | OC_Config->OCHPolarity) << 3);
000034  68cb              LDR      r3,[r1,#0xc]
000036  688a              LDR      r2,[r1,#8]
000038  431a              ORRS     r2,r2,r3
00003a  690b              LDR      r3,[r1,#0x10]
00003c  431a              ORRS     r2,r2,r3
00003e  00d2              LSLS     r2,r2,#3
000040  6c03              LDR      r3,[r0,#0x40]
000042  431a              ORRS     r2,r2,r3
000044  6402              STR      r2,[r0,#0x40]
;;;6187   
;;;6188       /* Set the Capture Compare Register value */
;;;6189       TMx->CC3A.H[0] = TMx->CC3B.H[0] = OC_Config->Pulse;
000046  888b              LDRH     r3,[r1,#4]
000048  226c              MOVS     r2,#0x6c
00004a  5213              STRH     r3,[r2,r0]
00004c  2268              MOVS     r2,#0x68
00004e  5213              STRH     r3,[r2,r0]
;;;6190   
;;;6191       // Enable Ouput OC
;;;6192       switch(OC_Config->OCMode)
000050  680a              LDR      r2,[r1,#0]
000052  0013              MOVS     r3,r2
000054  f7fffffe          BL       __ARM_common_switch8
000058  08052f0b          DCB      0x08,0x05,0x2f,0x0b
00005c  11171d23          DCB      0x11,0x17,0x1d,0x23
000060  292f              DCB      0x29,0x2f
;;;6193       {
;;;6194       case TM_CH_Disable:
;;;6195           TMx->OCCR0.W &= ~(TM_OCCR0_OC3_OE_enable_w);
000062  6bc2              LDR      r2,[r0,#0x3c]
000064  2301              MOVS     r3,#1
000066  031b              LSLS     r3,r3,#12
000068  439a              BICS     r2,r2,r3
00006a  63c2              STR      r2,[r0,#0x3c]
;;;6196           break;
00006c  e024              B        |L127.184|
;;;6197       case TM_CH_16bit_OutputCompare:
;;;6198           TMx->OCCR0.W |= (TM_OCCR0_OC3_OE_enable_w);
00006e  6bc2              LDR      r2,[r0,#0x3c]
000070  2301              MOVS     r3,#1
000072  031b              LSLS     r3,r3,#12
000074  431a              ORRS     r2,r2,r3
000076  63c2              STR      r2,[r0,#0x3c]
;;;6199           break;
000078  e01e              B        |L127.184|
;;;6200       case TM_CH_8bitx2_OutputCompare:
;;;6201           TMx->OCCR0.W |= (TM_OCCR0_OC3_OE_enable_w);
00007a  6bc2              LDR      r2,[r0,#0x3c]
00007c  2301              MOVS     r3,#1
00007e  031b              LSLS     r3,r3,#12
000080  431a              ORRS     r2,r2,r3
000082  63c2              STR      r2,[r0,#0x3c]
;;;6202           break;
000084  e018              B        |L127.184|
;;;6203       case TM_CH_16bit_PWM:
;;;6204           TMx->OCCR0.W |= (TM_OCCR0_OC3_OE_enable_w);
000086  6bc2              LDR      r2,[r0,#0x3c]
000088  2301              MOVS     r3,#1
00008a  031b              LSLS     r3,r3,#12
00008c  431a              ORRS     r2,r2,r3
00008e  63c2              STR      r2,[r0,#0x3c]
;;;6205           break;
000090  e012              B        |L127.184|
;;;6206       case TM_CH_8bitx2_PWM:
;;;6207           TMx->OCCR0.W |= (TM_OCCR0_OC3_OE_enable_w);
000092  6bc2              LDR      r2,[r0,#0x3c]
000094  2301              MOVS     r3,#1
000096  031b              LSLS     r3,r3,#12
000098  431a              ORRS     r2,r2,r3
00009a  63c2              STR      r2,[r0,#0x3c]
;;;6208           break;
00009c  e00c              B        |L127.184|
;;;6209       case TM_CH_16bit_PWM_COMPLEMENT:
;;;6210           TMx->OCCR0.W |= (TM_OCCR0_OC3_OE_enable_w);
00009e  6bc2              LDR      r2,[r0,#0x3c]
0000a0  2301              MOVS     r3,#1
0000a2  031b              LSLS     r3,r3,#12
0000a4  431a              ORRS     r2,r2,r3
0000a6  63c2              STR      r2,[r0,#0x3c]
;;;6211           break;
0000a8  e006              B        |L127.184|
;;;6212       case TM_CH_8bitx2_PWM_COMPLEMENT:
;;;6213           TMx->OCCR0.W |= (TM_OCCR0_OC3_OE_enable_w);
0000aa  6bc2              LDR      r2,[r0,#0x3c]
0000ac  2301              MOVS     r3,#1
0000ae  031b              LSLS     r3,r3,#12
0000b0  431a              ORRS     r2,r2,r3
0000b2  63c2              STR      r2,[r0,#0x3c]
;;;6214           break;
0000b4  e000              B        |L127.184|
;;;6215   
;;;6216       default:
;;;6217           break;
0000b6  bf00              NOP      
                  |L127.184|
0000b8  bf00              NOP                            ;6196
;;;6218   
;;;6219       }
;;;6220   
;;;6221   }
0000ba  bd00              POP      {pc}
;;;6222   
                          ENDP

                  |L127.188|
                          DCD      0x00001010
                  |L127.192|
                          DCD      0xfffff777

                          AREA ||i.TM_SlaveTimer_SetConfig||, CODE, READONLY, ALIGN=1

                  TM_SlaveTimer_SetConfig PROC
;;;6232    */
;;;6233   static void TM_SlaveTimer_SetConfig(TM_HandleTypeDef* mTM, TM_SlaveConfigTypeDef* sSlaveConfig)
000000  b510              PUSH     {r4,lr}
;;;6234   {
000002  4602              MOV      r2,r0
;;;6235       uint32_t tmp;
;;;6236   
;;;6237       tmp = mTM->Instance->TRG.W;
000004  6813              LDR      r3,[r2,#0]
000006  68d8              LDR      r0,[r3,#0xc]
;;;6238   
;;;6239       if((sSlaveConfig->InputTrigger & TM_TRG_TRG_MUX_mask_w) != TM_TRG_TRG_MUX_itr_w)
000008  24c0              MOVS     r4,#0xc0
00000a  684b              LDR      r3,[r1,#4]
00000c  4023              ANDS     r3,r3,r4
00000e  2b40              CMP      r3,#0x40
000010  d009              BEQ      |L128.38|
;;;6240       {
;;;6241           tmp &= ~(TM_TRG_TRG_MUX_mask_w | TM_TRG_TRGI2_MDS_mask_w | TM_TRG_TRGI_MDS_mask_w);
000012  0a00              LSRS     r0,r0,#8
000014  0200              LSLS     r0,r0,#8
;;;6242   
;;;6243           tmp |= (sSlaveConfig->InputTrigger & ~TM_TRG_ITR_MUX_mask_w) | \
000016  2407              MOVS     r4,#7
000018  0224              LSLS     r4,r4,#8
00001a  684b              LDR      r3,[r1,#4]
00001c  43a3              BICS     r3,r3,r4
00001e  680c              LDR      r4,[r1,#0]
000020  4323              ORRS     r3,r3,r4
000022  4318              ORRS     r0,r0,r3
000024  e005              B        |L128.50|
                  |L128.38|
;;;6244                  (sSlaveConfig->SlaveMode);
;;;6245       }
;;;6246       else
;;;6247       {
;;;6248           tmp &= ~(TM_TRG_ITR_MUX_mask_w | TM_TRG_TRG_MUX_mask_w | TM_TRG_TRGI2_MDS_mask_w | \
000026  0ac0              LSRS     r0,r0,#11
000028  02c0              LSLS     r0,r0,#11
;;;6249                    TM_TRG_TRGI_MDS_mask_w);
;;;6250   
;;;6251           tmp |= (sSlaveConfig->InputTrigger)                         | \
00002a  680c              LDR      r4,[r1,#0]
00002c  684b              LDR      r3,[r1,#4]
00002e  4323              ORRS     r3,r3,r4
000030  4318              ORRS     r0,r0,r3
                  |L128.50|
;;;6252                  (sSlaveConfig->SlaveMode);
;;;6253       }
;;;6254   
;;;6255       mTM->Instance->TRG.W = tmp;
000032  6813              LDR      r3,[r2,#0]
000034  60d8              STR      r0,[r3,#0xc]
;;;6256   
;;;6257   }
000036  bd10              POP      {r4,pc}
;;;6258   
                          ENDP


                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L770.24|
                  |L770.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L770.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L770.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_TM_MID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_MG32x02z_TM_MID_c_ff8af2a3____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___17_MG32x02z_TM_MID_c_ff8af2a3____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_MG32x02z_TM_MID_c_ff8af2a3____REVSH|
#line 496
|__asm___17_MG32x02z_TM_MID_c_ff8af2a3____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
