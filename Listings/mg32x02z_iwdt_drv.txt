; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_iwdt_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_iwdt_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_iwdt_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_IWDT_DRV.c]
                          THUMB

                          AREA ||i.IWDT_ClearFlag||, CODE, READONLY, ALIGN=1

                  IWDT_ClearFlag PROC
;;;258     */
;;;259    void IWDT_ClearFlag (uint32_t IWDT_ITSrc)
000000  215d              MOVS     r1,#0x5d
;;;260    {
;;;261        IWDT->STA.W = IWDT_ITSrc;
000002  0609              LSLS     r1,r1,#24
000004  6008              STR      r0,[r1,#0]
;;;262    }
000006  4770              BX       lr
;;;263    
                          ENDP


                          AREA ||i.IWDT_Cmd||, CODE, READONLY, ALIGN=1

                  IWDT_Cmd PROC
;;;173     */
;;;174    void IWDT_Cmd (FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;175    {
;;;176        if(NewState != DISABLE)
000002  d009              BEQ      |L2.24|
;;;177        {
;;;178            IWDT->CR0.MBIT.EN = 1;
000004  215d              MOVS     r1,#0x5d
000006  0609              LSLS     r1,r1,#24
000008  7c09              LDRB     r1,[r1,#0x10]
00000a  0849              LSRS     r1,r1,#1
00000c  0049              LSLS     r1,r1,#1
00000e  1c49              ADDS     r1,r1,#1
000010  225d              MOVS     r2,#0x5d
000012  0612              LSLS     r2,r2,#24
000014  7411              STRB     r1,[r2,#0x10]
000016  e007              B        |L2.40|
                  |L2.24|
;;;179        }
;;;180        else
;;;181        {
;;;182            IWDT->CR0.MBIT.EN = 0;
000018  215d              MOVS     r1,#0x5d
00001a  0609              LSLS     r1,r1,#24
00001c  7c09              LDRB     r1,[r1,#0x10]
00001e  0849              LSRS     r1,r1,#1
000020  0049              LSLS     r1,r1,#1
000022  225d              MOVS     r2,#0x5d
000024  0612              LSLS     r2,r2,#24
000026  7411              STRB     r1,[r2,#0x10]
                  |L2.40|
;;;183        }
;;;184    }
000028  4770              BX       lr
;;;185    ///@}
                          ENDP


                          AREA ||i.IWDT_Divider_Select||, CODE, READONLY, ALIGN=1

                  IWDT_Divider_Select PROC
;;;62      */
;;;63     void IWDT_Divider_Select (IWDT_DIVS_TypeDef IWDT_DIVS)
000000  215d              MOVS     r1,#0x5d
;;;64     {
;;;65         IWDT->CLK.MBIT.CK_DIV = IWDT_DIVS;
000002  0609              LSLS     r1,r1,#24
000004  7a09              LDRB     r1,[r1,#8]
000006  22f0              MOVS     r2,#0xf0
000008  4391              BICS     r1,r1,r2
00000a  0102              LSLS     r2,r0,#4
00000c  23f0              MOVS     r3,#0xf0
00000e  401a              ANDS     r2,r2,r3
000010  4311              ORRS     r1,r1,r2
000012  225d              MOVS     r2,#0x5d
000014  0612              LSLS     r2,r2,#24
000016  7211              STRB     r1,[r2,#8]
;;;66     }
000018  4770              BX       lr
;;;67     ///@}
                          ENDP


                          AREA ||i.IWDT_GetAllFlagStatus||, CODE, READONLY, ALIGN=1

                  IWDT_GetAllFlagStatus PROC
;;;204     */
;;;205    uint32_t IWDT_GetAllFlagStatus (void)
000000  205d              MOVS     r0,#0x5d
;;;206    {
;;;207        return IWDT->STA.W;
000002  0600              LSLS     r0,r0,#24
000004  6800              LDR      r0,[r0,#0]
;;;208    }
000006  4770              BX       lr
;;;209    
                          ENDP


                          AREA ||i.IWDT_GetCounter||, CODE, READONLY, ALIGN=1

                  IWDT_GetCounter PROC
;;;86      */
;;;87     uint8_t IWDT_GetCounter (void)
000000  205d              MOVS     r0,#0x5d
;;;88     {
;;;89         return IWDT->CNT.B[0];
000002  0600              LSLS     r0,r0,#24
000004  7e00              LDRB     r0,[r0,#0x18]
;;;90     }
000006  4770              BX       lr
;;;91     
                          ENDP


                          AREA ||i.IWDT_GetSingleFlagStatus||, CODE, READONLY, ALIGN=1

                  IWDT_GetSingleFlagStatus PROC
;;;227     */
;;;228    DRV_Return IWDT_GetSingleFlagStatus (uint32_t IWDT_ITSrc)
000000  4601              MOV      r1,r0
;;;229    {
;;;230        DRV_Return bitstatus = DRV_Normal;
000002  2000              MOVS     r0,#0
;;;231        
;;;232        if ((IWDT->STA.W & IWDT_ITSrc) != (uint32_t)DISABLE)
000004  225d              MOVS     r2,#0x5d
000006  0612              LSLS     r2,r2,#24
000008  6812              LDR      r2,[r2,#0]
00000a  400a              ANDS     r2,r2,r1
00000c  2a00              CMP      r2,#0
00000e  d001              BEQ      |L6.20|
;;;233        {
;;;234            bitstatus = DRV_Happened;
000010  2001              MOVS     r0,#1
000012  e000              B        |L6.22|
                  |L6.20|
;;;235        }
;;;236        else
;;;237        {
;;;238            bitstatus = DRV_Normal;
000014  2000              MOVS     r0,#0
                  |L6.22|
;;;239        }
;;;240        return  bitstatus;
;;;241    }	
000016  4770              BX       lr
;;;242    
                          ENDP


                          AREA ||i.IWDT_IT_Config||, CODE, READONLY, ALIGN=1

                  IWDT_IT_Config PROC
;;;282     */
;;;283    void IWDT_IT_Config (uint32_t IWDT_ITSrc, FunctionalState NewState)
000000  460a              MOV      r2,r1
;;;284    {
;;;285        uint32_t  Reg;
;;;286        
;;;287        Reg = IWDT->INT.W;
000002  235d              MOVS     r3,#0x5d
000004  061b              LSLS     r3,r3,#24
000006  6859              LDR      r1,[r3,#4]
;;;288        
;;;289        if(NewState != DISABLE)
000008  2a00              CMP      r2,#0
00000a  d003              BEQ      |L7.20|
;;;290        {
;;;291            Reg |= IWDT_ITSrc;
00000c  460b              MOV      r3,r1
00000e  4303              ORRS     r3,r3,r0
000010  4619              MOV      r1,r3
000012  e002              B        |L7.26|
                  |L7.20|
;;;292        }
;;;293        else
;;;294        {
;;;295            Reg &= ~IWDT_ITSrc;
000014  460b              MOV      r3,r1
000016  4383              BICS     r3,r3,r0
000018  4619              MOV      r1,r3
                  |L7.26|
;;;296        }
;;;297        IWDT->INT.W = Reg;
00001a  235d              MOVS     r3,#0x5d
00001c  061b              LSLS     r3,r3,#24
00001e  6059              STR      r1,[r3,#4]
;;;298    }
000020  4770              BX       lr
;;;299    ///@}
                          ENDP


                          AREA ||i.IWDT_RefreshCounter||, CODE, READONLY, ALIGN=2

                  IWDT_RefreshCounter PROC
;;;103     */
;;;104    void IWDT_RefreshCounter (void)
000000  4802              LDR      r0,|L8.12|
;;;105    {
;;;106        IWDT->KEY.H[0] = 0x2014;
000002  215d              MOVS     r1,#0x5d
000004  0609              LSLS     r1,r1,#24
000006  8188              STRH     r0,[r1,#0xc]
;;;107    }
000008  4770              BX       lr
;;;108    ///@}
                          ENDP

00000a  0000              DCW      0x0000
                  |L8.12|
                          DCD      0x00002014

                          AREA ||i.IWDT_StopModeWakeUpEvent_Config||, CODE, READONLY, ALIGN=1

                  IWDT_StopModeWakeUpEvent_Config PROC
;;;134     */
;;;135    void IWDT_StopModeWakeUpEvent_Config (uint32_t IWDT_WK, FunctionalState NewState)
000000  460a              MOV      r2,r1
;;;136    {
;;;137        uint32_t Reg;
;;;138        
;;;139        Reg = IWDT->CR0.W;
000002  235d              MOVS     r3,#0x5d
000004  061b              LSLS     r3,r3,#24
000006  6919              LDR      r1,[r3,#0x10]
;;;140        if(NewState != DISABLE)
000008  2a00              CMP      r2,#0
00000a  d003              BEQ      |L9.20|
;;;141        {
;;;142            Reg |= IWDT_WK;
00000c  460b              MOV      r3,r1
00000e  4303              ORRS     r3,r3,r0
000010  4619              MOV      r1,r3
000012  e002              B        |L9.26|
                  |L9.20|
;;;143        }
;;;144        else
;;;145        {
;;;146            Reg &= ~IWDT_WK;
000014  460b              MOV      r3,r1
000016  4383              BICS     r3,r3,r0
000018  4619              MOV      r1,r3
                  |L9.26|
;;;147        }
;;;148        
;;;149        IWDT->CR0.W = Reg;
00001a  235d              MOVS     r3,#0x5d
00001c  061b              LSLS     r3,r3,#24
00001e  6119              STR      r1,[r3,#0x10]
;;;150    }
000020  4770              BX       lr
;;;151    ///@}
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_IWDT_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_MG32x02z_IWDT_DRV_c_ed657a03____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___19_MG32x02z_IWDT_DRV_c_ed657a03____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_MG32x02z_IWDT_DRV_c_ed657a03____REVSH|
#line 496
|__asm___19_MG32x02z_IWDT_DRV_c_ed657a03____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
