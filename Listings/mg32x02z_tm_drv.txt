; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_tm_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_tm_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_tm_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_TM_DRV.c]
                          THUMB

                          AREA ||i.TM_AlignmentMode_Select||, CODE, READONLY, ALIGN=1

                  TM_AlignmentMode_Select PROC
;;;3380    */
;;;3381   void TM_AlignmentMode_Select(TM_Struct* TMx, AlignMode AMode)
000000  2244              MOVS     r2,#0x44
;;;3382   {
;;;3383       TMx->PWM.MBIT.PWM_MDS = AMode;
000002  5c12              LDRB     r2,[r2,r0]
000004  0892              LSRS     r2,r2,#2
000006  0092              LSLS     r2,r2,#2
000008  078b              LSLS     r3,r1,#30
00000a  0f9b              LSRS     r3,r3,#30
00000c  431a              ORRS     r2,r2,r3
00000e  2344              MOVS     r3,#0x44
000010  541a              STRB     r2,[r3,r0]
;;;3384   }
000012  4770              BX       lr
;;;3385   ///@}
                          ENDP


                          AREA ||i.TM_AutoStop_Cmd||, CODE, READONLY, ALIGN=1

                  TM_AutoStop_Cmd PROC
;;;3503    */
;;;3504   void TM_AutoStop_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  7c42              LDRB     r2,[r0,#0x11]
;;;3505   {
;;;3506       TMx->CR0.MBIT.ASTOP_EN = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7442              STRB     r2,[r0,#0x11]
;;;3507   }
00000e  4770              BX       lr
;;;3508   
                          ENDP


                          AREA ||i.TM_BreakCH012_Cmd||, CODE, READONLY, ALIGN=1

                  TM_BreakCH012_Cmd PROC
;;;2179    */
;;;2180   void TM_BreakCH012_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  2248              MOVS     r2,#0x48
;;;2181   {
;;;2182       TMx->BS.MBIT.BK_EN = NewState;
000002  5c12              LDRB     r2,[r2,r0]
000004  0852              LSRS     r2,r2,#1
000006  0052              LSLS     r2,r2,#1
000008  07cb              LSLS     r3,r1,#31
00000a  0fdb              LSRS     r3,r3,#31
00000c  431a              ORRS     r2,r2,r3
00000e  2348              MOVS     r3,#0x48
000010  541a              STRB     r2,[r3,r0]
;;;2183   }
000012  4770              BX       lr
;;;2184   
                          ENDP


                          AREA ||i.TM_BreakCH3_Cmd||, CODE, READONLY, ALIGN=1

                  TM_BreakCH3_Cmd PROC
;;;2160    */
;;;2161   void TM_BreakCH3_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2162   {
;;;2163       TMx->BS.MBIT.BK_EN3 = NewState;
000002  2248              MOVS     r2,#0x48
000004  5c12              LDRB     r2,[r2,r0]
000006  2308              MOVS     r3,#8
000008  439a              BICS     r2,r2,r3
00000a  00cb              LSLS     r3,r1,#3
00000c  2408              MOVS     r4,#8
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2348              MOVS     r3,#0x48
000014  541a              STRB     r2,[r3,r0]
;;;2164   }
000016  bd10              POP      {r4,pc}
;;;2165   
                          ENDP


                          AREA ||i.TM_BreakMode_Select||, CODE, READONLY, ALIGN=1

                  TM_BreakMode_Select PROC
;;;2199    */
;;;2200   void TM_BreakMode_Select(TM_Struct* TMx, TM_BKModeDef BKMode)
000000  b510              PUSH     {r4,lr}
;;;2201   {
;;;2202       TMx->BS.MBIT.BK_MDS = BKMode;
000002  2248              MOVS     r2,#0x48
000004  5c12              LDRB     r2,[r2,r0]
000006  2310              MOVS     r3,#0x10
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2410              MOVS     r4,#0x10
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2348              MOVS     r3,#0x48
000014  541a              STRB     r2,[r3,r0]
;;;2203   }
000016  bd10              POP      {r4,pc}
;;;2204   
                          ENDP


                          AREA ||i.TM_BreakTrigger_SW||, CODE, READONLY, ALIGN=1

                  TM_BreakTrigger_SW PROC
;;;2141    */
;;;2142   void TM_BreakTrigger_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2143   {
;;;2144       TMx->BS.MBIT.BKSW_EN = NewState;
000002  2248              MOVS     r2,#0x48
000004  5c12              LDRB     r2,[r2,r0]
000006  2380              MOVS     r3,#0x80
000008  439a              BICS     r2,r2,r3
00000a  01cb              LSLS     r3,r1,#7
00000c  2480              MOVS     r4,#0x80
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2348              MOVS     r3,#0x48
000014  541a              STRB     r2,[r3,r0]
;;;2145   }
000016  bd10              POP      {r4,pc}
;;;2146   
                          ENDP


                          AREA ||i.TM_CH0Function_Config||, CODE, READONLY, ALIGN=1

                  TM_CH0Function_Config PROC
;;;2413    */
;;;2414   void TM_CH0Function_Config(TM_Struct* TMx, CHFMDef CHFuncMds)
000000  2230              MOVS     r2,#0x30
;;;2415   {
;;;2416       TMx->CCMDS.MBIT.CC0_MDS = CHFuncMds;
000002  5c12              LDRB     r2,[r2,r0]
000004  08d2              LSRS     r2,r2,#3
000006  00d2              LSLS     r2,r2,#3
000008  074b              LSLS     r3,r1,#29
00000a  0f5b              LSRS     r3,r3,#29
00000c  431a              ORRS     r2,r2,r3
00000e  2330              MOVS     r3,#0x30
000010  541a              STRB     r2,[r3,r0]
;;;2417   }
000012  4770              BX       lr
;;;2418   /**
                          ENDP


                          AREA ||i.TM_CH1Function_Config||, CODE, READONLY, ALIGN=1

                  TM_CH1Function_Config PROC
;;;2438    */
;;;2439   void TM_CH1Function_Config(TM_Struct* TMx, CHFMDef CHFuncMds)
000000  b510              PUSH     {r4,lr}
;;;2440   {
;;;2441       TMx->CCMDS.MBIT.CC1_MDS = CHFuncMds;
000002  2230              MOVS     r2,#0x30
000004  5c12              LDRB     r2,[r2,r0]
000006  2370              MOVS     r3,#0x70
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2470              MOVS     r4,#0x70
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2330              MOVS     r3,#0x30
000014  541a              STRB     r2,[r3,r0]
;;;2442   }
000016  bd10              POP      {r4,pc}
;;;2443   /**
                          ENDP


                          AREA ||i.TM_CH2Function_Config||, CODE, READONLY, ALIGN=1

                  TM_CH2Function_Config PROC
;;;2463    */
;;;2464   void TM_CH2Function_Config(TM_Struct* TMx, CHFMDef CHFuncMds)
000000  2231              MOVS     r2,#0x31
;;;2465   {
;;;2466       TMx->CCMDS.MBIT.CC2_MDS = CHFuncMds;
000002  5c12              LDRB     r2,[r2,r0]
000004  08d2              LSRS     r2,r2,#3
000006  00d2              LSLS     r2,r2,#3
000008  074b              LSLS     r3,r1,#29
00000a  0f5b              LSRS     r3,r3,#29
00000c  431a              ORRS     r2,r2,r3
00000e  2331              MOVS     r3,#0x31
000010  541a              STRB     r2,[r3,r0]
;;;2467   }
000012  4770              BX       lr
;;;2468   /**
                          ENDP


                          AREA ||i.TM_CH3Function_Config||, CODE, READONLY, ALIGN=1

                  TM_CH3Function_Config PROC
;;;2488    */
;;;2489   void TM_CH3Function_Config(TM_Struct* TMx, CHFMDef CHFuncMds)
000000  b510              PUSH     {r4,lr}
;;;2490   {
;;;2491       TMx->CCMDS.MBIT.CC3_MDS = CHFuncMds;
000002  2231              MOVS     r2,#0x31
000004  5c12              LDRB     r2,[r2,r0]
000006  2370              MOVS     r3,#0x70
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2470              MOVS     r4,#0x70
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2331              MOVS     r3,#0x31
000014  541a              STRB     r2,[r3,r0]
;;;2492   }
000016  bd10              POP      {r4,pc}
;;;2493   ///@}
                          ENDP


                          AREA ||i.TM_CKOOutputState_Init||, CODE, READONLY, ALIGN=1

                  TM_CKOOutputState_Init PROC
;;;1175    */
;;;1176   void TM_CKOOutputState_Init(TM_Struct* TMx, BitAction PinState)
000000  b510              PUSH     {r4,lr}
;;;1177   {
000002  4602              MOV      r2,r0
;;;1178       uint8_t temp;
;;;1179       
;;;1180       temp = TMx->CKO.B[0];
000004  7e10              LDRB     r0,[r2,#0x18]
;;;1181       temp |= TM_CKO_unLock;
000006  2308              MOVS     r3,#8
000008  4318              ORRS     r0,r0,r3
;;;1182       
;;;1183       if (PinState == SET)
00000a  2901              CMP      r1,#1
00000c  d102              BNE      |L11.20|
;;;1184           temp |= TM_CKO_State;
00000e  2304              MOVS     r3,#4
000010  4318              ORRS     r0,r0,r3
000012  e003              B        |L11.28|
                  |L11.20|
;;;1185       else
;;;1186           temp &= ~TM_CKO_State;
000014  2404              MOVS     r4,#4
000016  4603              MOV      r3,r0
000018  43a3              BICS     r3,r3,r4
00001a  4618              MOV      r0,r3
                  |L11.28|
;;;1187           
;;;1188       TMx->CKO.B[0] = temp;
00001c  7610              STRB     r0,[r2,#0x18]
;;;1189   }
00001e  bd10              POP      {r4,pc}
;;;1190   ///@}
                          ENDP


                          AREA ||i.TM_ClearFlag||, CODE, READONLY, ALIGN=1

                  TM_ClearFlag PROC
;;;3856    */
;;;3857   void TM_ClearFlag(TM_Struct* TMx, uint32_t TM_ITSrc)
000000  6001              STR      r1,[r0,#0]
;;;3858   {
;;;3859       TMx->STA.W = TM_ITSrc;
;;;3860   }
000002  4770              BX       lr
;;;3861   ///@}
                          ENDP


                          AREA ||i.TM_ClockOutSource_Select||, CODE, READONLY, ALIGN=1

                  TM_ClockOutSource_Select PROC
;;;1135    */
;;;1136   void TM_ClockOutSource_Select(TM_Struct* TMx, TM_CKOSrcDef TM_CKOSel)
000000  b510              PUSH     {r4,lr}
;;;1137   {
;;;1138       TMx->CKO.MBIT.CKO_SEL = TM_CKOSel;
000002  7e02              LDRB     r2,[r0,#0x18]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7602              STRB     r2,[r0,#0x18]
;;;1139   }
000012  bd10              POP      {r4,pc}
;;;1140   
                          ENDP


                          AREA ||i.TM_ClockOut_Cmd||, CODE, READONLY, ALIGN=1

                  TM_ClockOut_Cmd PROC
;;;1155    */
;;;1156   void TM_ClockOut_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  7e02              LDRB     r2,[r0,#0x18]
;;;1157   {
;;;1158       TMx->CKO.MBIT.CKO_EN = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7602              STRB     r2,[r0,#0x18]
;;;1159   }
00000e  4770              BX       lr
;;;1160   
                          ENDP


                          AREA ||i.TM_CounterClock_Select||, CODE, READONLY, ALIGN=1

                  TM_CounterClock_Select PROC
;;;226     */
;;;227    void TM_CounterClock_Select(TM_Struct* TMx, TM_ClockSourceDef TMClockSelect)
000000  b510              PUSH     {r4,lr}
;;;228    {
;;;229        TMx->CLK.MBIT.CKS_SEL = TMClockSelect;    
000002  7a02              LDRB     r2,[r0,#8]
000004  2340              MOVS     r3,#0x40
000006  439a              BICS     r2,r2,r3
000008  018b              LSLS     r3,r1,#6
00000a  2440              MOVS     r4,#0x40
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7202              STRB     r2,[r0,#8]
;;;230    }
000012  bd10              POP      {r4,pc}
;;;231    
                          ENDP


                          AREA ||i.TM_Counter_Cmd||, CODE, READONLY, ALIGN=1

                  TM_Counter_Cmd PROC
;;;446     */
;;;447    void TM_Counter_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;448    {
;;;449        if (NewState == ENABLE)
000002  d104              BNE      |L16.14|
;;;450            TMx->CR0.B[0] |= TM_CR0_EN_enable_b0;
000004  7c02              LDRB     r2,[r0,#0x10]
000006  2301              MOVS     r3,#1
000008  431a              ORRS     r2,r2,r3
00000a  7402              STRB     r2,[r0,#0x10]
00000c  e003              B        |L16.22|
                  |L16.14|
;;;451        else
;;;452            TMx->CR0.B[0] &= ~(TM_CR0_EN_mask_h0);
00000e  7c02              LDRB     r2,[r0,#0x10]
000010  0852              LSRS     r2,r2,#1
000012  0052              LSLS     r2,r2,#1
000014  7402              STRB     r2,[r0,#0x10]
                  |L16.22|
;;;453    }
000016  4770              BX       lr
;;;454    
                          ENDP


                          AREA ||i.TM_Counter_Config||, CODE, READONLY, ALIGN=1

                  TM_Counter_Config PROC
;;;425     */
;;;426    void TM_Counter_Config(TM_Struct* TMx, uint16_t TM_Counter, uint16_t TM_CounterReload)
000000  8401              STRH     r1,[r0,#0x20]
;;;427    {
;;;428        TMx->CNT.H[0] = TM_Counter;
;;;429        TMx->ARR.H[0] = TM_CounterReload;
000002  8482              STRH     r2,[r0,#0x24]
;;;430    }
000004  4770              BX       lr
;;;431    
                          ENDP


                          AREA ||i.TM_Counter_SW||, CODE, READONLY, ALIGN=1

                  TM_Counter_SW PROC
;;;473     */
;;;474    void TM_Counter_SW(TM_Struct* TMx, TM_CounterResetGateSW_Def CMode, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;475    {
;;;476        if (NewState == ENABLE)
000002  2a01              CMP      r2,#1
000004  d103              BNE      |L18.14|
;;;477            TMx->TRG.B[3] |= CMode;
000006  7bc3              LDRB     r3,[r0,#0xf]
000008  430b              ORRS     r3,r3,r1
00000a  73c3              STRB     r3,[r0,#0xf]
00000c  e002              B        |L18.20|
                  |L18.14|
;;;478        else
;;;479            TMx->TRG.B[3] &= ~(CMode);
00000e  7bc3              LDRB     r3,[r0,#0xf]
000010  438b              BICS     r3,r3,r1
000012  73c3              STRB     r3,[r0,#0xf]
                  |L18.20|
;;;480    }
000014  bd10              POP      {r4,pc}
;;;481    ///@}
                          ENDP


                          AREA ||i.TM_DMAChannel_Cmd||, CODE, READONLY, ALIGN=1

                  TM_DMAChannel_Cmd PROC
;;;3997    */
;;;3998   void TM_DMAChannel_Cmd(TM_Struct* TMx, uint32_t DMA_TMChannelSrc, FunctionalState NewState)
000000  2a01              CMP      r2,#1
;;;3999   {
;;;4000       if (NewState == ENABLE)
000002  d103              BNE      |L19.12|
;;;4001           TMx->CCMDS.W |= DMA_TMChannelSrc;
000004  6b03              LDR      r3,[r0,#0x30]
000006  430b              ORRS     r3,r3,r1
000008  6303              STR      r3,[r0,#0x30]
00000a  e002              B        |L19.18|
                  |L19.12|
;;;4002       else
;;;4003           TMx->CCMDS.W &= ~DMA_TMChannelSrc;
00000c  6b03              LDR      r3,[r0,#0x30]
00000e  438b              BICS     r3,r3,r1
000010  6303              STR      r3,[r0,#0x30]
                  |L19.18|
;;;4004           
;;;4005   }
000012  4770              BX       lr
;;;4006   
                          ENDP


                          AREA ||i.TM_DMAUpdateMode_Select||, CODE, READONLY, ALIGN=1

                  TM_DMAUpdateMode_Select PROC
;;;4022    */
;;;4023   void TM_DMAUpdateMode_Select(TM_Struct* TMx, DMA_UpdateEventSel TM_UpdateEvent)
000000  b510              PUSH     {r4,lr}
;;;4024   {
;;;4025       TMx->CCMDS.MBIT.DMA_OMDS = TM_UpdateEvent;
000002  2232              MOVS     r2,#0x32
000004  5c12              LDRB     r2,[r2,r0]
000006  2380              MOVS     r3,#0x80
000008  439a              BICS     r2,r2,r3
00000a  01cb              LSLS     r3,r1,#7
00000c  2480              MOVS     r4,#0x80
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2332              MOVS     r3,#0x32
000014  541a              STRB     r2,[r3,r0]
;;;4026   }
000016  bd10              POP      {r4,pc}
;;;4027   
                          ENDP


                          AREA ||i.TM_DeInit||, CODE, READONLY, ALIGN=2

                  TM_DeInit PROC
;;;56      */
;;;57     void TM_DeInit(TM_Struct *TMx)
000000  2100              MOVS     r1,#0
;;;58     {
;;;59         TMx->CR0.W = 0x00000000;
000002  6101              STR      r1,[r0,#0x10]
;;;60         TMx->CR1.W = 0x00000000;
000004  6141              STR      r1,[r0,#0x14]
;;;61         TMx->TRG.W = 0x00000000;
000006  60c1              STR      r1,[r0,#0xc]
;;;62         TMx->STA.W = 0xFFFFFFFF;
000008  1e49              SUBS     r1,r1,#1
00000a  6001              STR      r1,[r0,#0]
;;;63         TMx->INT.W = 0x00000000;
00000c  2100              MOVS     r1,#0
00000e  6041              STR      r1,[r0,#4]
;;;64         TMx->CLK.W = 0x00000000;
000010  6081              STR      r1,[r0,#8]
;;;65         TMx->CKO.W = 0x00000008;
000012  2108              MOVS     r1,#8
000014  6181              STR      r1,[r0,#0x18]
;;;66         TMx->CNT.W = 0x00000000;
000016  2100              MOVS     r1,#0
000018  6201              STR      r1,[r0,#0x20]
;;;67         TMx->ARR.W = 0x00000000;
00001a  6241              STR      r1,[r0,#0x24]
;;;68         TMx->PSCNT.W = 0x00000000;
00001c  6281              STR      r1,[r0,#0x28]
;;;69         TMx->PSARR.W = 0x00000000;
00001e  62c1              STR      r1,[r0,#0x2c]
;;;70         TMx->CCMDS.W = 0x00000000;
000020  6301              STR      r1,[r0,#0x30]
;;;71         TMx->ICCR.W = 0x00000000;
000022  6341              STR      r1,[r0,#0x34]
;;;72         TMx->OSCR.W = 0x0000F0F0;
000024  4907              LDR      r1,|L21.68|
000026  6381              STR      r1,[r0,#0x38]
;;;73         TMx->OCCR0.W = 0x00000000;
000028  2100              MOVS     r1,#0
00002a  63c1              STR      r1,[r0,#0x3c]
;;;74         TMx->OCCR1.W = 0x00000000;
00002c  6401              STR      r1,[r0,#0x40]
;;;75         TMx->PWM.W = 0x00000000;
00002e  6441              STR      r1,[r0,#0x44]
;;;76         TMx->BS.W = 0x00000000;
000030  6481              STR      r1,[r0,#0x48]
;;;77         TMx->CC0A.W = 0x00000000;
000032  6501              STR      r1,[r0,#0x50]
;;;78         TMx->CC0B.W = 0x00000000;
000034  6541              STR      r1,[r0,#0x54]
;;;79         TMx->CC1A.W = 0x00000000;
000036  6581              STR      r1,[r0,#0x58]
;;;80         TMx->CC1B.W = 0x00000000;
000038  65c1              STR      r1,[r0,#0x5c]
;;;81         TMx->CC2A.W = 0x00000000;
00003a  6601              STR      r1,[r0,#0x60]
;;;82         TMx->CC2B.W = 0x00000000;
00003c  6641              STR      r1,[r0,#0x64]
;;;83         TMx->CC3A.W = 0x00000000;
00003e  6681              STR      r1,[r0,#0x68]
;;;84         TMx->CC3B.W = 0x00000000;
000040  66c1              STR      r1,[r0,#0x6c]
;;;85     }
000042  4770              BX       lr
;;;86     ///@}
                          ENDP

                  |L21.68|
                          DCD      0x0000f0f0

                          AREA ||i.TM_ExtTRGI2UEV_Cmd||, CODE, READONLY, ALIGN=1

                  TM_ExtTRGI2UEV_Cmd PROC
;;;3923    */
;;;3924   void TM_ExtTRGI2UEV_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3925   {
;;;3926       TMx->CR0.MBIT.UEX_EN = NewState;
000002  7c42              LDRB     r2,[r0,#0x11]
000004  2380              MOVS     r3,#0x80
000006  439a              BICS     r2,r2,r3
000008  01cb              LSLS     r3,r1,#7
00000a  2480              MOVS     r4,#0x80
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7442              STRB     r2,[r0,#0x11]
;;;3927   }
000012  bd10              POP      {r4,pc}
;;;3928   /**
                          ENDP


                          AREA ||i.TM_ExtTRGI_Cmd||, CODE, READONLY, ALIGN=1

                  TM_ExtTRGI_Cmd PROC
;;;3885    */
;;;3886   void TM_ExtTRGI_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3887   {
;;;3888       TMx->CR0.MBIT.EX_EN = NewState;
000002  7c42              LDRB     r2,[r0,#0x11]
000004  2304              MOVS     r3,#4
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  2404              MOVS     r4,#4
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7442              STRB     r2,[r0,#0x11]
;;;3889   }
000012  bd10              POP      {r4,pc}
;;;3890   /**
                          ENDP


                          AREA ||i.TM_ExternalBreakEvent_Config||, CODE, READONLY, ALIGN=1

                  TM_ExternalBreakEvent_Config PROC
;;;2094    */
;;;2095   void TM_ExternalBreakEvent_Config(TM_Struct* TMx, TM_BKExtSrcDef BKSrc, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2096   {
;;;2097       if (NewState == ENABLE)
000002  2a01              CMP      r2,#1
000004  d105              BNE      |L24.18|
;;;2098           TMx->BS.B[1] |= BKSrc;
000006  2349              MOVS     r3,#0x49
000008  5c1b              LDRB     r3,[r3,r0]
00000a  430b              ORRS     r3,r3,r1
00000c  2449              MOVS     r4,#0x49
00000e  5423              STRB     r3,[r4,r0]
000010  e004              B        |L24.28|
                  |L24.18|
;;;2099       else
;;;2100           TMx->BS.B[1] &= ~BKSrc;
000012  2349              MOVS     r3,#0x49
000014  5c1b              LDRB     r3,[r3,r0]
000016  438b              BICS     r3,r3,r1
000018  2449              MOVS     r4,#0x49
00001a  5423              STRB     r3,[r4,r0]
                  |L24.28|
;;;2101   }
00001c  bd10              POP      {r4,pc}
;;;2102   
                          ENDP


                          AREA ||i.TM_ExternalClock_Select||, CODE, READONLY, ALIGN=1

                  TM_ExternalClock_Select PROC
;;;288     */
;;;289    void TM_ExternalClock_Select(TM_Struct* TMx, TM_ExternalClockSourceDef TMExtClockSelect)
000000  b510              PUSH     {r4,lr}
;;;290    {
;;;291        TMx->CLK.MBIT.CKE_SEL = TMExtClockSelect;    
000002  7a02              LDRB     r2,[r0,#8]
000004  2330              MOVS     r3,#0x30
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2430              MOVS     r4,#0x30
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7202              STRB     r2,[r0,#8]
;;;292    }
000012  bd10              POP      {r4,pc}
;;;293    
                          ENDP


                          AREA ||i.TM_FallingCaptureIC0_SW||, CODE, READONLY, ALIGN=1

                  TM_FallingCaptureIC0_SW PROC
;;;2803    */
;;;2804   void TM_FallingCaptureIC0_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2805   {
;;;2806       TMx->CR1.MBIT.CC0B_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2310              MOVS     r3,#0x10
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2410              MOVS     r4,#0x10
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;2807   }
000012  bd10              POP      {r4,pc}
;;;2808   /**
                          ENDP


                          AREA ||i.TM_FallingCaptureIC1_SW||, CODE, READONLY, ALIGN=1

                  TM_FallingCaptureIC1_SW PROC
;;;2821    */
;;;2822   void TM_FallingCaptureIC1_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2823   {
;;;2824       TMx->CR1.MBIT.CC1B_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2320              MOVS     r3,#0x20
000006  439a              BICS     r2,r2,r3
000008  014b              LSLS     r3,r1,#5
00000a  2420              MOVS     r4,#0x20
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;2825   }
000012  bd10              POP      {r4,pc}
;;;2826   /**
                          ENDP


                          AREA ||i.TM_FallingCaptureIC2_SW||, CODE, READONLY, ALIGN=1

                  TM_FallingCaptureIC2_SW PROC
;;;2839    */
;;;2840   void TM_FallingCaptureIC2_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2841   {
;;;2842       TMx->CR1.MBIT.CC2B_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2340              MOVS     r3,#0x40
000006  439a              BICS     r2,r2,r3
000008  018b              LSLS     r3,r1,#6
00000a  2440              MOVS     r4,#0x40
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;2843   }
000012  bd10              POP      {r4,pc}
;;;2844   /**
                          ENDP


                          AREA ||i.TM_FallingCaptureIC3_SW||, CODE, READONLY, ALIGN=1

                  TM_FallingCaptureIC3_SW PROC
;;;2857    */
;;;2858   void TM_FallingCaptureIC3_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2859   {
;;;2860       TMx->CR1.MBIT.CC3B_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2380              MOVS     r3,#0x80
000006  439a              BICS     r2,r2,r3
000008  01cb              LSLS     r3,r1,#7
00000a  2480              MOVS     r4,#0x80
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;2861   }
000012  bd10              POP      {r4,pc}
;;;2862   ///@}
                          ENDP


                          AREA ||i.TM_ForceUpdate_SW||, CODE, READONLY, ALIGN=1

                  TM_ForceUpdate_SW PROC
;;;3942    */
;;;3943   void TM_ForceUpdate_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3944   {
;;;3945       TMx->CR0.MBIT.USW_EN = NewState;
000002  7c42              LDRB     r2,[r0,#0x11]
000004  2340              MOVS     r3,#0x40
000006  439a              BICS     r2,r2,r3
000008  018b              LSLS     r3,r1,#6
00000a  2440              MOVS     r4,#0x40
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7442              STRB     r2,[r0,#0x11]
;;;3946   }
000012  bd10              POP      {r4,pc}
;;;3947   /**
                          ENDP


                          AREA ||i.TM_GateCounter_SW||, CODE, READONLY, ALIGN=1

                  TM_GateCounter_SW PROC
;;;700     */
;;;701    void TM_GateCounter_SW(TM_Struct* TMx,FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;702    {
;;;703        TMx->TRG.MBIT.GT_SW = NewState;
000002  7bc2              LDRB     r2,[r0,#0xf]
000004  2340              MOVS     r3,#0x40
000006  439a              BICS     r2,r2,r3
000008  018b              LSLS     r3,r1,#6
00000a  2440              MOVS     r4,#0x40
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  73c2              STRB     r2,[r0,#0xf]
;;;704    }
000012  bd10              POP      {r4,pc}
;;;705    
                          ENDP


                          AREA ||i.TM_GatePrescaler_SW||, CODE, READONLY, ALIGN=1

                  TM_GatePrescaler_SW PROC
;;;680     */
;;;681    void TM_GatePrescaler_SW(TM_Struct* TMx,FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;682    {
;;;683        TMx->TRG.MBIT.GT2_SW = NewState;
000002  7bc2              LDRB     r2,[r0,#0xf]
000004  2380              MOVS     r3,#0x80
000006  439a              BICS     r2,r2,r3
000008  01cb              LSLS     r3,r1,#7
00000a  2480              MOVS     r4,#0x80
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  73c2              STRB     r2,[r0,#0xf]
;;;684    }
000012  bd10              POP      {r4,pc}
;;;685    
                          ENDP


                          AREA ||i.TM_GenerateCF0A_SW||, CODE, READONLY, ALIGN=1

                  TM_GenerateCF0A_SW PROC
;;;3183    */
;;;3184   void TM_GenerateCF0A_SW(TM_Struct* TMx, FunctionalState NewState)
000000  7d42              LDRB     r2,[r0,#0x15]
;;;3185   {
;;;3186       TMx->CR1.MBIT.CC0A_SEN = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7542              STRB     r2,[r0,#0x15]
;;;3187   }
00000e  4770              BX       lr
;;;3188   /**
                          ENDP


                          AREA ||i.TM_GenerateCF0B_SW||, CODE, READONLY, ALIGN=1

                  TM_GenerateCF0B_SW PROC
;;;3259    */
;;;3260   void TM_GenerateCF0B_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3261   {
;;;3262       TMx->CR1.MBIT.CC0B_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2310              MOVS     r3,#0x10
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2410              MOVS     r4,#0x10
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;3263   }
000012  bd10              POP      {r4,pc}
;;;3264   /**
                          ENDP


                          AREA ||i.TM_GenerateCF1A_SW||, CODE, READONLY, ALIGN=1

                  TM_GenerateCF1A_SW PROC
;;;3202    */
;;;3203   void TM_GenerateCF1A_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3204   {
;;;3205       TMx->CR1.MBIT.CC1A_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;3206   }
000012  bd10              POP      {r4,pc}
;;;3207   /**
                          ENDP


                          AREA ||i.TM_GenerateCF1B_SW||, CODE, READONLY, ALIGN=1

                  TM_GenerateCF1B_SW PROC
;;;3278    */
;;;3279   void TM_GenerateCF1B_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3280   {
;;;3281       TMx->CR1.MBIT.CC1B_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2320              MOVS     r3,#0x20
000006  439a              BICS     r2,r2,r3
000008  014b              LSLS     r3,r1,#5
00000a  2420              MOVS     r4,#0x20
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;3282   }
000012  bd10              POP      {r4,pc}
;;;3283   /**
                          ENDP


                          AREA ||i.TM_GenerateCF2A_SW||, CODE, READONLY, ALIGN=1

                  TM_GenerateCF2A_SW PROC
;;;3221    */
;;;3222   void TM_GenerateCF2A_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3223   {
;;;3224       TMx->CR1.MBIT.CC2A_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2304              MOVS     r3,#4
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  2404              MOVS     r4,#4
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;3225   }
000012  bd10              POP      {r4,pc}
;;;3226   /**
                          ENDP


                          AREA ||i.TM_GenerateCF2B_SW||, CODE, READONLY, ALIGN=1

                  TM_GenerateCF2B_SW PROC
;;;3297    */
;;;3298   void TM_GenerateCF2B_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3299   {
;;;3300       TMx->CR1.MBIT.CC2B_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2340              MOVS     r3,#0x40
000006  439a              BICS     r2,r2,r3
000008  018b              LSLS     r3,r1,#6
00000a  2440              MOVS     r4,#0x40
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;3301   }
000012  bd10              POP      {r4,pc}
;;;3302   /**
                          ENDP


                          AREA ||i.TM_GenerateCF3A_SW||, CODE, READONLY, ALIGN=1

                  TM_GenerateCF3A_SW PROC
;;;3240    */
;;;3241   void TM_GenerateCF3A_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3242   {
;;;3243       TMx->CR1.MBIT.CC3A_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2308              MOVS     r3,#8
000006  439a              BICS     r2,r2,r3
000008  00cb              LSLS     r3,r1,#3
00000a  2408              MOVS     r4,#8
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;3244   }
000012  bd10              POP      {r4,pc}
;;;3245   /**
                          ENDP


                          AREA ||i.TM_GenerateCF3B_SW||, CODE, READONLY, ALIGN=1

                  TM_GenerateCF3B_SW PROC
;;;3316    */
;;;3317   void TM_GenerateCF3B_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3318   {
;;;3319       TMx->CR1.MBIT.CC3B_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2380              MOVS     r3,#0x80
000006  439a              BICS     r2,r2,r3
000008  01cb              LSLS     r3,r1,#7
00000a  2480              MOVS     r4,#0x80
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;3320   }
000012  bd10              POP      {r4,pc}
;;;3321   ///@}
                          ENDP


                          AREA ||i.TM_GetAllFlagStatus||, CODE, READONLY, ALIGN=1

                  TM_GetAllFlagStatus PROC
;;;3817    */
;;;3818   uint32_t TM_GetAllFlagStatus(TM_Struct* TMx)
000000  4601              MOV      r1,r0
;;;3819   {
;;;3820       return TMx->STA.W;
000002  6808              LDR      r0,[r1,#0]
;;;3821   }
000004  4770              BX       lr
;;;3822   
                          ENDP


                          AREA ||i.TM_GetCC0A||, CODE, READONLY, ALIGN=1

                  TM_GetCC0A PROC
;;;2884    */
;;;2885   uint16_t TM_GetCC0A(TM_Struct* TMx)
000000  4601              MOV      r1,r0
;;;2886   {
;;;2887       return TMx->CC0A.H[0];
000002  2050              MOVS     r0,#0x50
000004  5a40              LDRH     r0,[r0,r1]
;;;2888   }
000006  4770              BX       lr
;;;2889   /**
                          ENDP


                          AREA ||i.TM_GetCC0B||, CODE, READONLY, ALIGN=1

                  TM_GetCC0B PROC
;;;2948    */
;;;2949   uint16_t TM_GetCC0B(TM_Struct* TMx)
000000  4601              MOV      r1,r0
;;;2950   {
;;;2951       return TMx->CC0B.H[0];
000002  2054              MOVS     r0,#0x54
000004  5a40              LDRH     r0,[r0,r1]
;;;2952   }
000006  4770              BX       lr
;;;2953   /**
                          ENDP


                          AREA ||i.TM_GetCC1A||, CODE, READONLY, ALIGN=1

                  TM_GetCC1A PROC
;;;2900    */
;;;2901   uint16_t TM_GetCC1A(TM_Struct* TMx)
000000  4601              MOV      r1,r0
;;;2902   {
;;;2903       return TMx->CC1A.H[0];
000002  2058              MOVS     r0,#0x58
000004  5a40              LDRH     r0,[r0,r1]
;;;2904   }
000006  4770              BX       lr
;;;2905   /**
                          ENDP


                          AREA ||i.TM_GetCC1B||, CODE, READONLY, ALIGN=1

                  TM_GetCC1B PROC
;;;2964    */
;;;2965   uint16_t TM_GetCC1B(TM_Struct* TMx)
000000  4601              MOV      r1,r0
;;;2966   {
;;;2967       return TMx->CC1B.H[0];
000002  205c              MOVS     r0,#0x5c
000004  5a40              LDRH     r0,[r0,r1]
;;;2968   }
000006  4770              BX       lr
;;;2969   /**
                          ENDP


                          AREA ||i.TM_GetCC2A||, CODE, READONLY, ALIGN=1

                  TM_GetCC2A PROC
;;;2916    */
;;;2917   uint16_t TM_GetCC2A(TM_Struct* TMx)
000000  4601              MOV      r1,r0
;;;2918   {
;;;2919       return TMx->CC2A.H[0];
000002  2060              MOVS     r0,#0x60
000004  5a40              LDRH     r0,[r0,r1]
;;;2920   }
000006  4770              BX       lr
;;;2921   /**
                          ENDP


                          AREA ||i.TM_GetCC2B||, CODE, READONLY, ALIGN=1

                  TM_GetCC2B PROC
;;;2980    */
;;;2981   uint16_t TM_GetCC2B(TM_Struct* TMx)
000000  4601              MOV      r1,r0
;;;2982   {
;;;2983       return TMx->CC2B.H[0];
000002  2064              MOVS     r0,#0x64
000004  5a40              LDRH     r0,[r0,r1]
;;;2984   }
000006  4770              BX       lr
;;;2985   /**
                          ENDP


                          AREA ||i.TM_GetCC3A||, CODE, READONLY, ALIGN=1

                  TM_GetCC3A PROC
;;;2932    */
;;;2933   uint16_t TM_GetCC3A(TM_Struct* TMx)
000000  4601              MOV      r1,r0
;;;2934   {
;;;2935       return TMx->CC3A.H[0];
000002  2068              MOVS     r0,#0x68
000004  5a40              LDRH     r0,[r0,r1]
;;;2936   }
000006  4770              BX       lr
;;;2937   /**
                          ENDP


                          AREA ||i.TM_GetCC3B||, CODE, READONLY, ALIGN=1

                  TM_GetCC3B PROC
;;;2996    */
;;;2997   uint16_t TM_GetCC3B(TM_Struct* TMx)
000000  4601              MOV      r1,r0
;;;2998   {
;;;2999       return TMx->CC3B.H[0];
000002  206c              MOVS     r0,#0x6c
000004  5a40              LDRH     r0,[r0,r1]
;;;3000   }
000006  4770              BX       lr
;;;3001   ///@}
                          ENDP


                          AREA ||i.TM_GetCounter||, CODE, READONLY, ALIGN=1

                  TM_GetCounter PROC
;;;404     */
;;;405    uint16_t TM_GetCounter(TM_Struct* TMx)
000000  4601              MOV      r1,r0
;;;406    {
;;;407        return TMx->CNT.H[0];
000002  8c08              LDRH     r0,[r1,#0x20]
;;;408    }
000004  4770              BX       lr
;;;409    
                          ENDP


                          AREA ||i.TM_GetIC0Value||, CODE, READONLY, ALIGN=1

                  TM_GetIC0Value PROC
;;;2550    */
;;;2551   uint32_t TM_GetIC0Value(TM_Struct* TMx)
000000  b508              PUSH     {r3,lr}
;;;2552   {
000002  4601              MOV      r1,r0
;;;2553       ctype WW;
;;;2554       
;;;2555       WW.H[1] = TMx->CC0A.H[0];
000004  2050              MOVS     r0,#0x50
000006  5a42              LDRH     r2,[r0,r1]
000008  4668              MOV      r0,sp
00000a  8042              STRH     r2,[r0,#2]
;;;2556       WW.H[0] = TMx->CC0B.H[0];
00000c  2054              MOVS     r0,#0x54
00000e  5a42              LDRH     r2,[r0,r1]
000010  4668              MOV      r0,sp
000012  8002              STRH     r2,[r0,#0]
;;;2557       return WW.W;
000014  9800              LDR      r0,[sp,#0]
;;;2558   }
000016  bd08              POP      {r3,pc}
;;;2559   /**
                          ENDP


                          AREA ||i.TM_GetIC1Value||, CODE, READONLY, ALIGN=1

                  TM_GetIC1Value PROC
;;;2570    */
;;;2571   uint32_t TM_GetIC1Value(TM_Struct* TMx)
000000  b508              PUSH     {r3,lr}
;;;2572   {
000002  4601              MOV      r1,r0
;;;2573       ctype WW;
;;;2574       
;;;2575       WW.H[1] = TMx->CC1A.H[0];
000004  2058              MOVS     r0,#0x58
000006  5a42              LDRH     r2,[r0,r1]
000008  4668              MOV      r0,sp
00000a  8042              STRH     r2,[r0,#2]
;;;2576       WW.H[0] = TMx->CC1B.H[0];
00000c  205c              MOVS     r0,#0x5c
00000e  5a42              LDRH     r2,[r0,r1]
000010  4668              MOV      r0,sp
000012  8002              STRH     r2,[r0,#0]
;;;2577       return WW.W;
000014  9800              LDR      r0,[sp,#0]
;;;2578   }
000016  bd08              POP      {r3,pc}
;;;2579   /**
                          ENDP


                          AREA ||i.TM_GetIC2Value||, CODE, READONLY, ALIGN=1

                  TM_GetIC2Value PROC
;;;2590    */
;;;2591   uint32_t TM_GetIC2Value(TM_Struct* TMx)
000000  b508              PUSH     {r3,lr}
;;;2592   {
000002  4601              MOV      r1,r0
;;;2593       ctype WW;
;;;2594       
;;;2595       WW.H[1] = TMx->CC2A.H[0];
000004  2060              MOVS     r0,#0x60
000006  5a42              LDRH     r2,[r0,r1]
000008  4668              MOV      r0,sp
00000a  8042              STRH     r2,[r0,#2]
;;;2596       WW.H[0] = TMx->CC2B.H[0];
00000c  2064              MOVS     r0,#0x64
00000e  5a42              LDRH     r2,[r0,r1]
000010  4668              MOV      r0,sp
000012  8002              STRH     r2,[r0,#0]
;;;2597       return WW.W;
000014  9800              LDR      r0,[sp,#0]
;;;2598   }
000016  bd08              POP      {r3,pc}
;;;2599   /**
                          ENDP


                          AREA ||i.TM_GetIC3Value||, CODE, READONLY, ALIGN=1

                  TM_GetIC3Value PROC
;;;2610    */
;;;2611   uint32_t TM_GetIC3Value(TM_Struct* TMx)
000000  b508              PUSH     {r3,lr}
;;;2612   {
000002  4601              MOV      r1,r0
;;;2613       ctype WW;
;;;2614       
;;;2615       WW.H[1] = TMx->CC3A.H[0];
000004  2068              MOVS     r0,#0x68
000006  5a42              LDRH     r2,[r0,r1]
000008  4668              MOV      r0,sp
00000a  8042              STRH     r2,[r0,#2]
;;;2616       WW.H[0] = TMx->CC3B.H[0];
00000c  206c              MOVS     r0,#0x6c
00000e  5a42              LDRH     r2,[r0,r1]
000010  4668              MOV      r0,sp
000012  8002              STRH     r2,[r0,#0]
;;;2617       return WW.W;
000014  9800              LDR      r0,[sp,#0]
;;;2618   }
000016  bd08              POP      {r3,pc}
;;;2619   ///@}
                          ENDP


                          AREA ||i.TM_GetPrescaler||, CODE, READONLY, ALIGN=1

                  TM_GetPrescaler PROC
;;;538     */
;;;539    uint16_t TM_GetPrescaler(TM_Struct* TMx)
000000  4601              MOV      r1,r0
;;;540    {
;;;541        return TMx->PSCNT.H[0];
000002  8d08              LDRH     r0,[r1,#0x28]
;;;542    }
000004  4770              BX       lr
;;;543    
                          ENDP


                          AREA ||i.TM_GetSingleFlagStatus||, CODE, READONLY, ALIGN=1

                  TM_GetSingleFlagStatus PROC
;;;3775    */
;;;3776   DRV_Return TM_GetSingleFlagStatus(TM_Struct* TMx, uint32_t TM_ITSTAFlag)
000000  4602              MOV      r2,r0
;;;3777   {
;;;3778       if (TMx->STA.W & TM_ITSTAFlag)
000002  6810              LDR      r0,[r2,#0]
000004  4008              ANDS     r0,r0,r1
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L56.14|
;;;3779           return DRV_Happened;
00000a  2001              MOVS     r0,#1
                  |L56.12|
;;;3780       else
;;;3781           return DRV_UnHappened;
;;;3782       
;;;3783   }
00000c  4770              BX       lr
                  |L56.14|
00000e  2000              MOVS     r0,#0                 ;3781
000010  e7fc              B        |L56.12|
;;;3784   
                          ENDP


                          AREA ||i.TM_IC0OverWritten_Cmd||, CODE, READONLY, ALIGN=1

                  TM_IC0OverWritten_Cmd PROC
;;;2645    */
;;;2646   void TM_IC0OverWritten_Cmd(TM_Struct* TMx, OverWriteCmd NewState)
000000  7d02              LDRB     r2,[r0,#0x14]
;;;2647   {
;;;2648       TMx->CR1.MBIT.OVR0_MDS = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7502              STRB     r2,[r0,#0x14]
;;;2649   }
00000e  4770              BX       lr
;;;2650   /**
                          ENDP


                          AREA ||i.TM_IC1OverWritten_Cmd||, CODE, READONLY, ALIGN=1

                  TM_IC1OverWritten_Cmd PROC
;;;2664    */
;;;2665   void TM_IC1OverWritten_Cmd(TM_Struct* TMx, OverWriteCmd NewState)
000000  b510              PUSH     {r4,lr}
;;;2666   {
;;;2667       TMx->CR1.MBIT.OVR1_MDS = NewState;
000002  7d02              LDRB     r2,[r0,#0x14]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7502              STRB     r2,[r0,#0x14]
;;;2668   }
000012  bd10              POP      {r4,pc}
;;;2669   /**
                          ENDP


                          AREA ||i.TM_IC2OverWritten_Cmd||, CODE, READONLY, ALIGN=1

                  TM_IC2OverWritten_Cmd PROC
;;;2683    */
;;;2684   void TM_IC2OverWritten_Cmd(TM_Struct* TMx, OverWriteCmd NewState)
000000  b510              PUSH     {r4,lr}
;;;2685   {
;;;2686       TMx->CR1.MBIT.OVR2_MDS = NewState;
000002  7d02              LDRB     r2,[r0,#0x14]
000004  2304              MOVS     r3,#4
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  2404              MOVS     r4,#4
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7502              STRB     r2,[r0,#0x14]
;;;2687   }
000012  bd10              POP      {r4,pc}
;;;2688   /**
                          ENDP


                          AREA ||i.TM_IC3OverWritten_Cmd||, CODE, READONLY, ALIGN=1

                  TM_IC3OverWritten_Cmd PROC
;;;2702    */
;;;2703   void TM_IC3OverWritten_Cmd(TM_Struct* TMx, OverWriteCmd NewState)
000000  b510              PUSH     {r4,lr}
;;;2704   {
;;;2705       TMx->CR1.MBIT.OVR3_MDS = NewState;
000002  7d02              LDRB     r2,[r0,#0x14]
000004  2308              MOVS     r3,#8
000006  439a              BICS     r2,r2,r3
000008  00cb              LSLS     r3,r1,#3
00000a  2408              MOVS     r4,#8
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7502              STRB     r2,[r0,#0x14]
;;;2706   }
000012  bd10              POP      {r4,pc}
;;;2707   ///@}
                          ENDP


                          AREA ||i.TM_IN0Source_Select||, CODE, READONLY, ALIGN=1

                  TM_IN0Source_Select PROC
;;;949     */
;;;950    void TM_IN0Source_Select(TM_Struct* TMx, TM_ICxMuxDef TM_ICxSrc)
000000  2234              MOVS     r2,#0x34
;;;951    {
;;;952        TMx->ICCR.MBIT.IC0_MUX = TM_ICxSrc;
000002  5c12              LDRB     r2,[r2,r0]
000004  0892              LSRS     r2,r2,#2
000006  0092              LSLS     r2,r2,#2
000008  078b              LSLS     r3,r1,#30
00000a  0f9b              LSRS     r3,r3,#30
00000c  431a              ORRS     r2,r2,r3
00000e  2334              MOVS     r3,#0x34
000010  541a              STRB     r2,[r3,r0]
;;;953    }
000012  4770              BX       lr
;;;954    
                          ENDP


                          AREA ||i.TM_IN0TriggerEvent_Select||, CODE, READONLY, ALIGN=1

                  TM_IN0TriggerEvent_Select PROC
;;;971     */
;;;972    void TM_IN0TriggerEvent_Select(TM_Struct* TMx, TM_ICxTrgDef TM_ICxTrg)
000000  2236              MOVS     r2,#0x36
;;;973    {
;;;974        TMx->ICCR.MBIT.IC0_TRGS = TM_ICxTrg;
000002  5c12              LDRB     r2,[r2,r0]
000004  0892              LSRS     r2,r2,#2
000006  0092              LSLS     r2,r2,#2
000008  078b              LSLS     r3,r1,#30
00000a  0f9b              LSRS     r3,r3,#30
00000c  431a              ORRS     r2,r2,r3
00000e  2336              MOVS     r3,#0x36
000010  541a              STRB     r2,[r3,r0]
;;;975    }
000012  4770              BX       lr
;;;976    
                          ENDP


                          AREA ||i.TM_IN1Source_Select||, CODE, READONLY, ALIGN=1

                  TM_IN1Source_Select PROC
;;;993     */
;;;994    void TM_IN1Source_Select(TM_Struct* TMx, TM_ICxMuxDef TM_ICxSrc)
000000  b510              PUSH     {r4,lr}
;;;995    {
;;;996        TMx->ICCR.MBIT.IC1_MUX = TM_ICxSrc;
000002  2234              MOVS     r2,#0x34
000004  5c12              LDRB     r2,[r2,r0]
000006  2330              MOVS     r3,#0x30
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2430              MOVS     r4,#0x30
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2334              MOVS     r3,#0x34
000014  541a              STRB     r2,[r3,r0]
;;;997    }
000016  bd10              POP      {r4,pc}
;;;998    
                          ENDP


                          AREA ||i.TM_IN1TriggerEvent_Select||, CODE, READONLY, ALIGN=1

                  TM_IN1TriggerEvent_Select PROC
;;;1015    */
;;;1016   void TM_IN1TriggerEvent_Select(TM_Struct* TMx, TM_ICxTrgDef TM_ICxTrg)
000000  b510              PUSH     {r4,lr}
;;;1017   {
;;;1018       TMx->ICCR.MBIT.IC1_TRGS = TM_ICxTrg;
000002  2236              MOVS     r2,#0x36
000004  5c12              LDRB     r2,[r2,r0]
000006  230c              MOVS     r3,#0xc
000008  439a              BICS     r2,r2,r3
00000a  008b              LSLS     r3,r1,#2
00000c  240c              MOVS     r4,#0xc
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2336              MOVS     r3,#0x36
000014  541a              STRB     r2,[r3,r0]
;;;1019   }
000016  bd10              POP      {r4,pc}
;;;1020   
                          ENDP


                          AREA ||i.TM_IN2Source_Select||, CODE, READONLY, ALIGN=1

                  TM_IN2Source_Select PROC
;;;1037    */
;;;1038   void TM_IN2Source_Select(TM_Struct* TMx, TM_ICxMuxDef TM_ICxSrc)
000000  2235              MOVS     r2,#0x35
;;;1039   {
;;;1040       TMx->ICCR.MBIT.IC2_MUX = TM_ICxSrc;
000002  5c12              LDRB     r2,[r2,r0]
000004  0892              LSRS     r2,r2,#2
000006  0092              LSLS     r2,r2,#2
000008  078b              LSLS     r3,r1,#30
00000a  0f9b              LSRS     r3,r3,#30
00000c  431a              ORRS     r2,r2,r3
00000e  2335              MOVS     r3,#0x35
000010  541a              STRB     r2,[r3,r0]
;;;1041   }
000012  4770              BX       lr
;;;1042   
                          ENDP


                          AREA ||i.TM_IN2TriggerEvent_Select||, CODE, READONLY, ALIGN=1

                  TM_IN2TriggerEvent_Select PROC
;;;1059    */
;;;1060   void TM_IN2TriggerEvent_Select(TM_Struct* TMx, TM_ICxTrgDef TM_ICxTrg)
000000  b510              PUSH     {r4,lr}
;;;1061   {
;;;1062       TMx->ICCR.MBIT.IC2_TRGS = TM_ICxTrg;
000002  2236              MOVS     r2,#0x36
000004  5c12              LDRB     r2,[r2,r0]
000006  2330              MOVS     r3,#0x30
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2430              MOVS     r4,#0x30
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2336              MOVS     r3,#0x36
000014  541a              STRB     r2,[r3,r0]
;;;1063   }
000016  bd10              POP      {r4,pc}
;;;1064   
                          ENDP


                          AREA ||i.TM_IN3Source_Select||, CODE, READONLY, ALIGN=1

                  TM_IN3Source_Select PROC
;;;1081    */
;;;1082   void TM_IN3Source_Select(TM_Struct* TMx, TM_ICxMuxDef TM_ICxSrc)
000000  b510              PUSH     {r4,lr}
;;;1083   {
;;;1084       TMx->ICCR.MBIT.IC3_MUX = TM_ICxSrc;
000002  2235              MOVS     r2,#0x35
000004  5c12              LDRB     r2,[r2,r0]
000006  2330              MOVS     r3,#0x30
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2430              MOVS     r4,#0x30
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2335              MOVS     r3,#0x35
000014  541a              STRB     r2,[r3,r0]
;;;1085   }
000016  bd10              POP      {r4,pc}
;;;1086   
                          ENDP


                          AREA ||i.TM_IN3TriggerEvent_Select||, CODE, READONLY, ALIGN=1

                  TM_IN3TriggerEvent_Select PROC
;;;1103    */
;;;1104   void TM_IN3TriggerEvent_Select(TM_Struct* TMx, TM_ICxTrgDef TM_ICxTrg)
000000  b510              PUSH     {r4,lr}
;;;1105   {
;;;1106       TMx->ICCR.MBIT.IC3_TRGS = TM_ICxTrg;
000002  2236              MOVS     r2,#0x36
000004  5c12              LDRB     r2,[r2,r0]
000006  23c0              MOVS     r3,#0xc0
000008  439a              BICS     r2,r2,r3
00000a  018b              LSLS     r3,r1,#6
00000c  24c0              MOVS     r4,#0xc0
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2336              MOVS     r3,#0x36
000014  541a              STRB     r2,[r3,r0]
;;;1107   }
000016  bd10              POP      {r4,pc}
;;;1108   ///@}
                          ENDP


                          AREA ||i.TM_ITEA_Cmd||, CODE, READONLY, ALIGN=1

                  TM_ITEA_Cmd PROC
;;;3731    */
;;;3732   void TM_ITEA_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  7902              LDRB     r2,[r0,#4]
;;;3733   {
;;;3734       TMx->INT.MBIT.IEA = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7102              STRB     r2,[r0,#4]
;;;3735   }
00000e  4770              BX       lr
;;;3736   
                          ENDP


                          AREA ||i.TM_ITRx_Select||, CODE, READONLY, ALIGN=1

                  TM_ITRx_Select PROC
;;;309     */
;;;310    void TM_ITRx_Select(TM_Struct* TMx, TM_ITRSourceDef TM_ITRSource)
000000  7b42              LDRB     r2,[r0,#0xd]
;;;311    {
;;;312        TMx->TRG.MBIT.ITR_MUX = TM_ITRSource;    
000002  08d2              LSRS     r2,r2,#3
000004  00d2              LSLS     r2,r2,#3
000006  074b              LSLS     r3,r1,#29
000008  0f5b              LSRS     r3,r3,#29
00000a  431a              ORRS     r2,r2,r3
00000c  7342              STRB     r2,[r0,#0xd]
;;;313    }
00000e  4770              BX       lr
;;;314    ///@}
                          ENDP


                          AREA ||i.TM_IT_Config||, CODE, READONLY, ALIGN=1

                  TM_IT_Config PROC
;;;3708    */
;;;3709   void TM_IT_Config(TM_Struct* TMx, uint32_t TM_ITSrc, FunctionalState NewState)
000000  2a01              CMP      r2,#1
;;;3710   {
;;;3711       if (NewState == ENABLE)
000002  d103              BNE      |L71.12|
;;;3712           TMx->INT.W |= TM_ITSrc;
000004  6843              LDR      r3,[r0,#4]
000006  430b              ORRS     r3,r3,r1
000008  6043              STR      r3,[r0,#4]
00000a  e002              B        |L71.18|
                  |L71.12|
;;;3713       else
;;;3714           TMx->INT.W &= ~TM_ITSrc;
00000c  6843              LDR      r3,[r0,#4]
00000e  438b              BICS     r3,r3,r1
000010  6043              STR      r3,[r0,#4]
                  |L71.18|
;;;3715   }
000012  4770              BX       lr
;;;3716   
                          ENDP


                          AREA ||i.TM_InternalBreakEvent_Config||, CODE, READONLY, ALIGN=1

                  TM_InternalBreakEvent_Config PROC
;;;2119    */
;;;2120   void TM_InternalBreakEvent_Config(TM_Struct* TMx, TM_BKIntSrcDef BKSrc, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2121   {
;;;2122       if (NewState == ENABLE)
000002  2a01              CMP      r2,#1
000004  d105              BNE      |L72.18|
;;;2123           TMx->BS.B[2] |= BKSrc;
000006  234a              MOVS     r3,#0x4a
000008  5c1b              LDRB     r3,[r3,r0]
00000a  430b              ORRS     r3,r3,r1
00000c  244a              MOVS     r4,#0x4a
00000e  5423              STRB     r3,[r4,r0]
000010  e004              B        |L72.28|
                  |L72.18|
;;;2124       else
;;;2125           TMx->BS.B[2] &= ~BKSrc;
000012  234a              MOVS     r3,#0x4a
000014  5c1b              LDRB     r3,[r3,r0]
000016  438b              BICS     r3,r3,r1
000018  244a              MOVS     r4,#0x4a
00001a  5423              STRB     r3,[r4,r0]
                  |L72.28|
;;;2126   }
00001c  bd10              POP      {r4,pc}
;;;2127   
                          ENDP


                          AREA ||i.TM_InternalClockSource_Select||, CODE, READONLY, ALIGN=1

                  TM_InternalClockSource_Select PROC
;;;205     */
;;;206    void TM_InternalClockSource_Select(TM_Struct* TMx, TM_INTClockSrcDef INTClockSrc)
000000  7a42              LDRB     r2,[r0,#9]
;;;207    {
;;;208    	TMx->CLK.MBIT.CKI_SEL = INTClockSrc;
000002  0892              LSRS     r2,r2,#2
000004  0092              LSLS     r2,r2,#2
000006  078b              LSLS     r3,r1,#30
000008  0f9b              LSRS     r3,r3,#30
00000a  431a              ORRS     r2,r2,r3
00000c  7242              STRB     r2,[r0,#9]
;;;209    }
00000e  4770              BX       lr
;;;210    
                          ENDP


                          AREA ||i.TM_InverseExtTRGI_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseExtTRGI_Cmd PROC
;;;3904    */
;;;3905   void TM_InverseExtTRGI_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3906   {
;;;3907       TMx->CR0.MBIT.EX_INV = NewState;
000002  7c42              LDRB     r2,[r0,#0x11]
000004  2308              MOVS     r3,#8
000006  439a              BICS     r2,r2,r3
000008  00cb              LSLS     r3,r1,#3
00000a  2408              MOVS     r4,#8
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7442              STRB     r2,[r0,#0x11]
;;;3908   }
000012  bd10              POP      {r4,pc}
;;;3909   /**
                          ENDP


                          AREA ||i.TM_InverseOC0H_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseOC0H_Cmd PROC
;;;1417    */
;;;1418   void TM_InverseOC0H_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1419   {
;;;1420       TMx->OCCR1.MBIT.OC0H_INV = NewState;
000002  2240              MOVS     r2,#0x40
000004  5c12              LDRB     r2,[r2,r0]
000006  2310              MOVS     r3,#0x10
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2410              MOVS     r4,#0x10
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2340              MOVS     r3,#0x40
000014  541a              STRB     r2,[r3,r0]
;;;1421   }
000016  bd10              POP      {r4,pc}
;;;1422   /**
                          ENDP


                          AREA ||i.TM_InverseOC0N_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseOC0N_Cmd PROC
;;;1360    */
;;;1361   void TM_InverseOC0N_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  2241              MOVS     r2,#0x41
;;;1362   {
;;;1363       TMx->OCCR1.MBIT.OC0N_INV = NewState;
000002  5c12              LDRB     r2,[r2,r0]
000004  0852              LSRS     r2,r2,#1
000006  0052              LSLS     r2,r2,#1
000008  07cb              LSLS     r3,r1,#31
00000a  0fdb              LSRS     r3,r3,#31
00000c  431a              ORRS     r2,r2,r3
00000e  2341              MOVS     r3,#0x41
000010  541a              STRB     r2,[r3,r0]
;;;1364   }
000012  4770              BX       lr
;;;1365   
                          ENDP


                          AREA ||i.TM_InverseOC0z_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseOC0z_Cmd PROC
;;;1215    */
;;;1216   void TM_InverseOC0z_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  2240              MOVS     r2,#0x40
;;;1217   {
;;;1218       TMx->OCCR1.MBIT.OC0_INV = NewState;
000002  5c12              LDRB     r2,[r2,r0]
000004  0852              LSRS     r2,r2,#1
000006  0052              LSLS     r2,r2,#1
000008  07cb              LSLS     r3,r1,#31
00000a  0fdb              LSRS     r3,r3,#31
00000c  431a              ORRS     r2,r2,r3
00000e  2340              MOVS     r3,#0x40
000010  541a              STRB     r2,[r3,r0]
;;;1219   }
000012  4770              BX       lr
;;;1220   
                          ENDP


                          AREA ||i.TM_InverseOC1H_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseOC1H_Cmd PROC
;;;1678    */
;;;1679   void TM_InverseOC1H_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1680   {
;;;1681       TMx->OCCR1.MBIT.OC1H_INV = NewState;
000002  2240              MOVS     r2,#0x40
000004  5c12              LDRB     r2,[r2,r0]
000006  2320              MOVS     r3,#0x20
000008  439a              BICS     r2,r2,r3
00000a  014b              LSLS     r3,r1,#5
00000c  2420              MOVS     r4,#0x20
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2340              MOVS     r3,#0x40
000014  541a              STRB     r2,[r3,r0]
;;;1682   }
000016  bd10              POP      {r4,pc}
;;;1683   /**
                          ENDP


                          AREA ||i.TM_InverseOC1N_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseOC1N_Cmd PROC
;;;1621    */
;;;1622   void TM_InverseOC1N_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1623   {
;;;1624       TMx->OCCR1.MBIT.OC1N_INV = NewState;
000002  2241              MOVS     r2,#0x41
000004  5c12              LDRB     r2,[r2,r0]
000006  2302              MOVS     r3,#2
000008  439a              BICS     r2,r2,r3
00000a  004b              LSLS     r3,r1,#1
00000c  2402              MOVS     r4,#2
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2341              MOVS     r3,#0x41
000014  541a              STRB     r2,[r3,r0]
;;;1625   }
000016  bd10              POP      {r4,pc}
;;;1626   
                          ENDP


                          AREA ||i.TM_InverseOC1z_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseOC1z_Cmd PROC
;;;1476    */
;;;1477   void TM_InverseOC1z_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1478   {
;;;1479       TMx->OCCR1.MBIT.OC1_INV = NewState;
000002  2240              MOVS     r2,#0x40
000004  5c12              LDRB     r2,[r2,r0]
000006  2302              MOVS     r3,#2
000008  439a              BICS     r2,r2,r3
00000a  004b              LSLS     r3,r1,#1
00000c  2402              MOVS     r4,#2
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2340              MOVS     r3,#0x40
000014  541a              STRB     r2,[r3,r0]
;;;1480   }
000016  bd10              POP      {r4,pc}
;;;1481   
                          ENDP


                          AREA ||i.TM_InverseOC2H_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseOC2H_Cmd PROC
;;;1880    */
;;;1881   void TM_InverseOC2H_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1882   {
;;;1883       TMx->OCCR1.MBIT.OC2H_INV = NewState;
000002  2240              MOVS     r2,#0x40
000004  5c12              LDRB     r2,[r2,r0]
000006  2340              MOVS     r3,#0x40
000008  439a              BICS     r2,r2,r3
00000a  018b              LSLS     r3,r1,#6
00000c  2440              MOVS     r4,#0x40
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  5422              STRB     r2,[r4,r0]
;;;1884   }
000014  bd10              POP      {r4,pc}
;;;1885   /**
                          ENDP


                          AREA ||i.TM_InverseOC2N_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseOC2N_Cmd PROC
;;;1823    */
;;;1824   void TM_InverseOC2N_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1825   {
;;;1826       TMx->OCCR1.MBIT.OC2N_INV = NewState;
000002  2241              MOVS     r2,#0x41
000004  5c12              LDRB     r2,[r2,r0]
000006  2304              MOVS     r3,#4
000008  439a              BICS     r2,r2,r3
00000a  008b              LSLS     r3,r1,#2
00000c  2404              MOVS     r4,#4
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2341              MOVS     r3,#0x41
000014  541a              STRB     r2,[r3,r0]
;;;1827   }
000016  bd10              POP      {r4,pc}
;;;1828   
                          ENDP


                          AREA ||i.TM_InverseOC2_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseOC2_Cmd PROC
;;;1737    */
;;;1738   void TM_InverseOC2_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1739   {
;;;1740       TMx->OCCR1.MBIT.OC2_INV = NewState;
000002  2240              MOVS     r2,#0x40
000004  5c12              LDRB     r2,[r2,r0]
000006  2304              MOVS     r3,#4
000008  439a              BICS     r2,r2,r3
00000a  008b              LSLS     r3,r1,#2
00000c  2404              MOVS     r4,#4
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2340              MOVS     r3,#0x40
000014  541a              STRB     r2,[r3,r0]
;;;1741   }
000016  bd10              POP      {r4,pc}
;;;1742   
                          ENDP


                          AREA ||i.TM_InverseOC3H_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseOC3H_Cmd PROC
;;;2025    */
;;;2026   void TM_InverseOC3H_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2027   {
;;;2028       TMx->OCCR1.MBIT.OC3H_INV = NewState;
000002  2240              MOVS     r2,#0x40
000004  5c12              LDRB     r2,[r2,r0]
000006  2380              MOVS     r3,#0x80
000008  439a              BICS     r2,r2,r3
00000a  01cb              LSLS     r3,r1,#7
00000c  2480              MOVS     r4,#0x80
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2340              MOVS     r3,#0x40
000014  541a              STRB     r2,[r3,r0]
;;;2029   }
000016  bd10              POP      {r4,pc}
;;;2030   
                          ENDP


                          AREA ||i.TM_InverseOC3_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseOC3_Cmd PROC
;;;1939    */
;;;1940   void TM_InverseOC3_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1941   {
;;;1942       TMx->OCCR1.MBIT.OC3_INV = NewState;
000002  2240              MOVS     r2,#0x40
000004  5c12              LDRB     r2,[r2,r0]
000006  2308              MOVS     r3,#8
000008  439a              BICS     r2,r2,r3
00000a  00cb              LSLS     r3,r1,#3
00000c  2408              MOVS     r4,#8
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2340              MOVS     r3,#0x40
000014  541a              STRB     r2,[r3,r0]
;;;1943   }
000016  bd10              POP      {r4,pc}
;;;1944   
                          ENDP


                          AREA ||i.TM_InverseQEIDirection||, CODE, READONLY, ALIGN=1

                  TM_InverseQEIDirection PROC
;;;3473    */
;;;3474   void TM_InverseQEIDirection(TM_Struct* TMx,FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3475   {
;;;3476       TMx->CR0.MBIT.DIR_INV = NewState;
000002  7c42              LDRB     r2,[r0,#0x11]
000004  2320              MOVS     r3,#0x20
000006  439a              BICS     r2,r2,r3
000008  014b              LSLS     r3,r1,#5
00000a  2420              MOVS     r4,#0x20
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7442              STRB     r2,[r0,#0x11]
;;;3477   }
000012  bd10              POP      {r4,pc}
;;;3478   
                          ENDP


                          AREA ||i.TM_InverseTRGO_Cmd||, CODE, READONLY, ALIGN=1

                  TM_InverseTRGO_Cmd PROC
;;;915     */
;;;916    void TM_InverseTRGO_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;917    {
;;;918        TMx->TRG.MBIT.TRGO_INV = NewState;
000002  7bc2              LDRB     r2,[r0,#0xf]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  73c2              STRB     r2,[r0,#0xf]
;;;919    }
000012  bd10              POP      {r4,pc}
;;;920    
                          ENDP


                          AREA ||i.TM_OC00Output_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC00Output_Cmd PROC
;;;1303    */
;;;1304   void TM_OC00Output_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  223c              MOVS     r2,#0x3c
;;;1305   {
;;;1306       TMx->OCCR0.MBIT.OC0_OE0 = NewState;
000002  5c12              LDRB     r2,[r2,r0]
000004  0852              LSRS     r2,r2,#1
000006  0052              LSLS     r2,r2,#1
000008  07cb              LSLS     r3,r1,#31
00000a  0fdb              LSRS     r3,r3,#31
00000c  431a              ORRS     r2,r2,r3
00000e  233c              MOVS     r3,#0x3c
000010  541a              STRB     r2,[r3,r0]
;;;1307   }
000012  4770              BX       lr
;;;1308   
                          ENDP


                          AREA ||i.TM_OC01Output_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC01Output_Cmd PROC
;;;1322    */
;;;1323   void TM_OC01Output_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1324   {
;;;1325       TMx->OCCR0.MBIT.OC0_OE1 = NewState;
000002  223c              MOVS     r2,#0x3c
000004  5c12              LDRB     r2,[r2,r0]
000006  2302              MOVS     r3,#2
000008  439a              BICS     r2,r2,r3
00000a  004b              LSLS     r3,r1,#1
00000c  2402              MOVS     r4,#2
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  233c              MOVS     r3,#0x3c
000014  541a              STRB     r2,[r3,r0]
;;;1326   }
000016  bd10              POP      {r4,pc}
;;;1327   
                          ENDP


                          AREA ||i.TM_OC02Output_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC02Output_Cmd PROC
;;;1341    */
;;;1342   void TM_OC02Output_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1343   {
;;;1344       TMx->OCCR0.MBIT.OC0_OE2 = NewState;
000002  223c              MOVS     r2,#0x3c
000004  5c12              LDRB     r2,[r2,r0]
000006  2304              MOVS     r3,#4
000008  439a              BICS     r2,r2,r3
00000a  008b              LSLS     r3,r1,#2
00000c  2404              MOVS     r4,#4
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  233c              MOVS     r3,#0x3c
000014  541a              STRB     r2,[r3,r0]
;;;1345   }
000016  bd10              POP      {r4,pc}
;;;1346   
                          ENDP


                          AREA ||i.TM_OC0BreakControl_Select||, CODE, READONLY, ALIGN=1

                  TM_OC0BreakControl_Select PROC
;;;2219    */
;;;2220   void TM_OC0BreakControl_Select(TM_Struct* TMx, TM_BKPinModeDef BKPinMode)
000000  b510              PUSH     {r4,lr}
;;;2221   {
;;;2222       TMx->BS.MBIT.BK0_CTL = BKPinMode;
000002  224a              MOVS     r2,#0x4a
000004  5c12              LDRB     r2,[r2,r0]
000006  2310              MOVS     r3,#0x10
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2410              MOVS     r4,#0x10
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  234a              MOVS     r3,#0x4a
000014  541a              STRB     r2,[r3,r0]
;;;2223   }
000016  bd10              POP      {r4,pc}
;;;2224   
                          ENDP


                          AREA ||i.TM_OC0HOutputState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC0HOutputState_Init PROC
;;;1435    */
;;;1436   void TM_OC0HOutputState_Init(TM_Struct* TMx, BitAction PinState)
000000  4602              MOV      r2,r0
;;;1437   {
;;;1438       uint8_t temp;
;;;1439       
;;;1440       temp = TMx->OSCR.B[1];
000002  2339              MOVS     r3,#0x39
000004  5c98              LDRB     r0,[r3,r2]
;;;1441       temp |= TM_OS0H_unLock;
000006  2310              MOVS     r3,#0x10
000008  4318              ORRS     r0,r0,r3
;;;1442       
;;;1443       if (PinState == SET)
00000a  2901              CMP      r1,#1
00000c  d102              BNE      |L92.20|
;;;1444           temp |= TM_OS0H_State;
00000e  2301              MOVS     r3,#1
000010  4318              ORRS     r0,r0,r3
000012  e001              B        |L92.24|
                  |L92.20|
;;;1445       else
;;;1446           temp &= ~TM_OS0H_State;
000014  0840              LSRS     r0,r0,#1
000016  0040              LSLS     r0,r0,#1
                  |L92.24|
;;;1447           
;;;1448       TMx->OSCR.B[1] = temp;
000018  2339              MOVS     r3,#0x39
00001a  5498              STRB     r0,[r3,r2]
;;;1449   }
00001c  4770              BX       lr
;;;1450   ///@}
                          ENDP


                          AREA ||i.TM_OC0NBreakStopState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC0NBreakStopState_Init PROC
;;;1398    */
;;;1399   void TM_OC0NBreakStopState_Init(TM_Struct* TMx, BitAction BKPinState)
000000  b510              PUSH     {r4,lr}
;;;1400   {
;;;1401       TMx->BS.MBIT.STP0N_STA = BKPinState;
000002  224b              MOVS     r2,#0x4b
000004  5c12              LDRB     r2,[r2,r0]
000006  2310              MOVS     r3,#0x10
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2410              MOVS     r4,#0x10
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  234b              MOVS     r3,#0x4b
000014  541a              STRB     r2,[r3,r0]
;;;1402   }
000016  bd10              POP      {r4,pc}
;;;1403   
                          ENDP


                          AREA ||i.TM_OC0NOutput_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC0NOutput_Cmd PROC
;;;1379    */
;;;1380   void TM_OC0NOutput_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  223e              MOVS     r2,#0x3e
;;;1381   {
;;;1382       TMx->OCCR0.MBIT.OC0N_OE = NewState;
000002  5c12              LDRB     r2,[r2,r0]
000004  0852              LSRS     r2,r2,#1
000006  0052              LSLS     r2,r2,#1
000008  07cb              LSLS     r3,r1,#31
00000a  0fdb              LSRS     r3,r3,#31
00000c  431a              ORRS     r2,r2,r3
00000e  233e              MOVS     r3,#0x3e
000010  541a              STRB     r2,[r3,r0]
;;;1383   }
000012  4770              BX       lr
;;;1384   
                          ENDP


                          AREA ||i.TM_OC0zBreakStopState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC0zBreakStopState_Init PROC
;;;1263    */
;;;1264   void TM_OC0zBreakStopState_Init(TM_Struct* TMx, BitAction BKPinState)
000000  224b              MOVS     r2,#0x4b
;;;1265   {
;;;1266       TMx->BS.MBIT.STP0_STA = BKPinState;
000002  5c12              LDRB     r2,[r2,r0]
000004  0852              LSRS     r2,r2,#1
000006  0052              LSLS     r2,r2,#1
000008  07cb              LSLS     r3,r1,#31
00000a  0fdb              LSRS     r3,r3,#31
00000c  431a              ORRS     r2,r2,r3
00000e  234b              MOVS     r3,#0x4b
000010  541a              STRB     r2,[r3,r0]
;;;1267   }
000012  4770              BX       lr
;;;1268   
                          ENDP


                          AREA ||i.TM_OC0zOutputState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC0zOutputState_Init PROC
;;;1234    */
;;;1235   void TM_OC0zOutputState_Init(TM_Struct* TMx, BitAction PinState)
000000  4602              MOV      r2,r0
;;;1236   {
;;;1237       uint8_t temp;
;;;1238       
;;;1239       temp = TMx->OSCR.B[0];
000002  2338              MOVS     r3,#0x38
000004  5c98              LDRB     r0,[r3,r2]
;;;1240       temp |= TM_OS0_unLock;
000006  2310              MOVS     r3,#0x10
000008  4318              ORRS     r0,r0,r3
;;;1241       
;;;1242       if (PinState == SET)
00000a  2901              CMP      r1,#1
00000c  d102              BNE      |L96.20|
;;;1243           temp |= TM_OS0_State;
00000e  2301              MOVS     r3,#1
000010  4318              ORRS     r0,r0,r3
000012  e001              B        |L96.24|
                  |L96.20|
;;;1244       else
;;;1245           temp &= ~TM_OS0_State;
000014  0840              LSRS     r0,r0,#1
000016  0040              LSLS     r0,r0,#1
                  |L96.24|
;;;1246           
;;;1247       TMx->OSCR.B[0] = temp;
000018  2338              MOVS     r3,#0x38
00001a  5498              STRB     r0,[r3,r2]
;;;1248   }
00001c  4770              BX       lr
;;;1249   
                          ENDP


                          AREA ||i.TM_OC0zOutput_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC0zOutput_Cmd PROC
;;;1282    */
;;;1283   void TM_OC0zOutput_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1284   {
;;;1285       TMx->OCCR0.MBIT.OC0_OE0 = NewState;
000002  223c              MOVS     r2,#0x3c
000004  5c12              LDRB     r2,[r2,r0]
000006  0852              LSRS     r2,r2,#1
000008  0052              LSLS     r2,r2,#1
00000a  07cb              LSLS     r3,r1,#31
00000c  0fdb              LSRS     r3,r3,#31
00000e  431a              ORRS     r2,r2,r3
000010  233c              MOVS     r3,#0x3c
000012  541a              STRB     r2,[r3,r0]
;;;1286       TMx->OCCR0.MBIT.OC0_OE1 = NewState;
000014  223c              MOVS     r2,#0x3c
000016  5c12              LDRB     r2,[r2,r0]
000018  2302              MOVS     r3,#2
00001a  439a              BICS     r2,r2,r3
00001c  004b              LSLS     r3,r1,#1
00001e  2402              MOVS     r4,#2
000020  4023              ANDS     r3,r3,r4
000022  431a              ORRS     r2,r2,r3
000024  233c              MOVS     r3,#0x3c
000026  541a              STRB     r2,[r3,r0]
;;;1287       TMx->OCCR0.MBIT.OC0_OE2 = NewState;
000028  223c              MOVS     r2,#0x3c
00002a  5c12              LDRB     r2,[r2,r0]
00002c  2304              MOVS     r3,#4
00002e  439a              BICS     r2,r2,r3
000030  008b              LSLS     r3,r1,#2
000032  2404              MOVS     r4,#4
000034  4023              ANDS     r3,r3,r4
000036  431a              ORRS     r2,r2,r3
000038  233c              MOVS     r3,#0x3c
00003a  541a              STRB     r2,[r3,r0]
;;;1288   }
00003c  bd10              POP      {r4,pc}
;;;1289   
                          ENDP


                          AREA ||i.TM_OC10Output_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC10Output_Cmd PROC
;;;1564    */
;;;1565   void TM_OC10Output_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1566   {
;;;1567       TMx->OCCR0.MBIT.OC1_OE0 = NewState;
000002  223c              MOVS     r2,#0x3c
000004  5c12              LDRB     r2,[r2,r0]
000006  2310              MOVS     r3,#0x10
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2410              MOVS     r4,#0x10
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  233c              MOVS     r3,#0x3c
000014  541a              STRB     r2,[r3,r0]
;;;1568   }
000016  bd10              POP      {r4,pc}
;;;1569   
                          ENDP


                          AREA ||i.TM_OC11Output_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC11Output_Cmd PROC
;;;1583    */
;;;1584   void TM_OC11Output_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1585   {
;;;1586       TMx->OCCR0.MBIT.OC1_OE1 = NewState;
000002  223c              MOVS     r2,#0x3c
000004  5c12              LDRB     r2,[r2,r0]
000006  2320              MOVS     r3,#0x20
000008  439a              BICS     r2,r2,r3
00000a  014b              LSLS     r3,r1,#5
00000c  2420              MOVS     r4,#0x20
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  233c              MOVS     r3,#0x3c
000014  541a              STRB     r2,[r3,r0]
;;;1587   }
000016  bd10              POP      {r4,pc}
;;;1588   
                          ENDP


                          AREA ||i.TM_OC12Output_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC12Output_Cmd PROC
;;;1602    */
;;;1603   void TM_OC12Output_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1604   {
;;;1605       TMx->OCCR0.MBIT.OC1_OE2 = NewState;
000002  223c              MOVS     r2,#0x3c
000004  5c12              LDRB     r2,[r2,r0]
000006  2340              MOVS     r3,#0x40
000008  439a              BICS     r2,r2,r3
00000a  018b              LSLS     r3,r1,#6
00000c  2440              MOVS     r4,#0x40
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  233c              MOVS     r3,#0x3c
000014  541a              STRB     r2,[r3,r0]
;;;1606   }
000016  bd10              POP      {r4,pc}
;;;1607   
                          ENDP


                          AREA ||i.TM_OC1BreakControl_Select||, CODE, READONLY, ALIGN=1

                  TM_OC1BreakControl_Select PROC
;;;2240    */
;;;2241   void TM_OC1BreakControl_Select(TM_Struct* TMx, TM_BKPinModeDef BKPinMode)
000000  b510              PUSH     {r4,lr}
;;;2242   {
;;;2243       TMx->BS.MBIT.BK1_CTL = BKPinMode;
000002  224a              MOVS     r2,#0x4a
000004  5c12              LDRB     r2,[r2,r0]
000006  2320              MOVS     r3,#0x20
000008  439a              BICS     r2,r2,r3
00000a  014b              LSLS     r3,r1,#5
00000c  2420              MOVS     r4,#0x20
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  234a              MOVS     r3,#0x4a
000014  541a              STRB     r2,[r3,r0]
;;;2244   }
000016  bd10              POP      {r4,pc}
;;;2245   
                          ENDP


                          AREA ||i.TM_OC1HOutputState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC1HOutputState_Init PROC
;;;1696    */
;;;1697   void TM_OC1HOutputState_Init(TM_Struct* TMx, BitAction PinState)
000000  b510              PUSH     {r4,lr}
;;;1698   {
000002  4602              MOV      r2,r0
;;;1699       uint8_t temp;
;;;1700       
;;;1701       temp = TMx->OSCR.B[1];
000004  2339              MOVS     r3,#0x39
000006  5c98              LDRB     r0,[r3,r2]
;;;1702       temp |= TM_OS1H_unLock;
000008  2320              MOVS     r3,#0x20
00000a  4318              ORRS     r0,r0,r3
;;;1703       
;;;1704       if (PinState == SET)
00000c  2901              CMP      r1,#1
00000e  d102              BNE      |L102.22|
;;;1705           temp |= TM_OS1H_State;
000010  2302              MOVS     r3,#2
000012  4318              ORRS     r0,r0,r3
000014  e003              B        |L102.30|
                  |L102.22|
;;;1706       else
;;;1707           temp &= ~TM_OS1H_State;
000016  2402              MOVS     r4,#2
000018  4603              MOV      r3,r0
00001a  43a3              BICS     r3,r3,r4
00001c  4618              MOV      r0,r3
                  |L102.30|
;;;1708           
;;;1709       TMx->OSCR.B[1] = temp;
00001e  2339              MOVS     r3,#0x39
000020  5498              STRB     r0,[r3,r2]
;;;1710   }
000022  bd10              POP      {r4,pc}
;;;1711   ///@}
                          ENDP


                          AREA ||i.TM_OC1NBreakStopState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC1NBreakStopState_Init PROC
;;;1659    */
;;;1660   void TM_OC1NBreakStopState_Init(TM_Struct* TMx, BitAction BKPinState)
000000  b510              PUSH     {r4,lr}
;;;1661   {
;;;1662       TMx->BS.MBIT.STP1N_STA = BKPinState;
000002  224b              MOVS     r2,#0x4b
000004  5c12              LDRB     r2,[r2,r0]
000006  2320              MOVS     r3,#0x20
000008  439a              BICS     r2,r2,r3
00000a  014b              LSLS     r3,r1,#5
00000c  2420              MOVS     r4,#0x20
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  234b              MOVS     r3,#0x4b
000014  541a              STRB     r2,[r3,r0]
;;;1663   }
000016  bd10              POP      {r4,pc}
;;;1664   
                          ENDP


                          AREA ||i.TM_OC1NOutput_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC1NOutput_Cmd PROC
;;;1640    */
;;;1641   void TM_OC1NOutput_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1642   {
;;;1643       TMx->OCCR0.MBIT.OC1N_OE = NewState;
000002  223e              MOVS     r2,#0x3e
000004  5c12              LDRB     r2,[r2,r0]
000006  2310              MOVS     r3,#0x10
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2410              MOVS     r4,#0x10
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  233e              MOVS     r3,#0x3e
000014  541a              STRB     r2,[r3,r0]
;;;1644   }
000016  bd10              POP      {r4,pc}
;;;1645   
                          ENDP


                          AREA ||i.TM_OC1zBreakStopState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC1zBreakStopState_Init PROC
;;;1524    */
;;;1525   void TM_OC1zBreakStopState_Init(TM_Struct* TMx, BitAction BKPinState)
000000  b510              PUSH     {r4,lr}
;;;1526   {
;;;1527       TMx->BS.MBIT.STP1_STA = BKPinState;
000002  224b              MOVS     r2,#0x4b
000004  5c12              LDRB     r2,[r2,r0]
000006  2302              MOVS     r3,#2
000008  439a              BICS     r2,r2,r3
00000a  004b              LSLS     r3,r1,#1
00000c  2402              MOVS     r4,#2
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  234b              MOVS     r3,#0x4b
000014  541a              STRB     r2,[r3,r0]
;;;1528   }
000016  bd10              POP      {r4,pc}
;;;1529   
                          ENDP


                          AREA ||i.TM_OC1zOutputState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC1zOutputState_Init PROC
;;;1495    */
;;;1496   void TM_OC1zOutputState_Init(TM_Struct* TMx, BitAction PinState)
000000  b510              PUSH     {r4,lr}
;;;1497   {
000002  4602              MOV      r2,r0
;;;1498       uint8_t temp;
;;;1499       
;;;1500       temp = TMx->OSCR.B[0];
000004  2338              MOVS     r3,#0x38
000006  5c98              LDRB     r0,[r3,r2]
;;;1501       temp |= TM_OS1_unLock;
000008  2320              MOVS     r3,#0x20
00000a  4318              ORRS     r0,r0,r3
;;;1502       
;;;1503       if (PinState == SET)
00000c  2901              CMP      r1,#1
00000e  d102              BNE      |L106.22|
;;;1504           temp |= TM_OS1_State;
000010  2302              MOVS     r3,#2
000012  4318              ORRS     r0,r0,r3
000014  e003              B        |L106.30|
                  |L106.22|
;;;1505       else
;;;1506           temp &= ~TM_OS1_State;
000016  2402              MOVS     r4,#2
000018  4603              MOV      r3,r0
00001a  43a3              BICS     r3,r3,r4
00001c  4618              MOV      r0,r3
                  |L106.30|
;;;1507           
;;;1508       TMx->OSCR.B[0] = temp;
00001e  2338              MOVS     r3,#0x38
000020  5498              STRB     r0,[r3,r2]
;;;1509   }
000022  bd10              POP      {r4,pc}
;;;1510   
                          ENDP


                          AREA ||i.TM_OC1zOutput_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC1zOutput_Cmd PROC
;;;1543    */
;;;1544   void TM_OC1zOutput_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1545   {
;;;1546       TMx->OCCR0.MBIT.OC1_OE0 = NewState;
000002  223c              MOVS     r2,#0x3c
000004  5c12              LDRB     r2,[r2,r0]
000006  2310              MOVS     r3,#0x10
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2410              MOVS     r4,#0x10
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  233c              MOVS     r3,#0x3c
000014  541a              STRB     r2,[r3,r0]
;;;1547       TMx->OCCR0.MBIT.OC1_OE1 = NewState;
000016  223c              MOVS     r2,#0x3c
000018  5c12              LDRB     r2,[r2,r0]
00001a  2320              MOVS     r3,#0x20
00001c  439a              BICS     r2,r2,r3
00001e  014b              LSLS     r3,r1,#5
000020  2420              MOVS     r4,#0x20
000022  4023              ANDS     r3,r3,r4
000024  431a              ORRS     r2,r2,r3
000026  233c              MOVS     r3,#0x3c
000028  541a              STRB     r2,[r3,r0]
;;;1548       TMx->OCCR0.MBIT.OC1_OE2 = NewState;
00002a  223c              MOVS     r2,#0x3c
00002c  5c12              LDRB     r2,[r2,r0]
00002e  2340              MOVS     r3,#0x40
000030  439a              BICS     r2,r2,r3
000032  018b              LSLS     r3,r1,#6
000034  2440              MOVS     r4,#0x40
000036  4023              ANDS     r3,r3,r4
000038  431a              ORRS     r2,r2,r3
00003a  233c              MOVS     r3,#0x3c
00003c  541a              STRB     r2,[r3,r0]
;;;1549   }
00003e  bd10              POP      {r4,pc}
;;;1550   
                          ENDP


                          AREA ||i.TM_OC2BreakControl_Select||, CODE, READONLY, ALIGN=1

                  TM_OC2BreakControl_Select PROC
;;;2260    */
;;;2261   void TM_OC2BreakControl_Select(TM_Struct* TMx, TM_BKPinModeDef BKPinMode)
000000  b510              PUSH     {r4,lr}
;;;2262   {
;;;2263       TMx->BS.MBIT.BK2_CTL = BKPinMode;
000002  224a              MOVS     r2,#0x4a
000004  5c12              LDRB     r2,[r2,r0]
000006  2340              MOVS     r3,#0x40
000008  439a              BICS     r2,r2,r3
00000a  018b              LSLS     r3,r1,#6
00000c  2440              MOVS     r4,#0x40
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  234a              MOVS     r3,#0x4a
000014  541a              STRB     r2,[r3,r0]
;;;2264   }
000016  bd10              POP      {r4,pc}
;;;2265   
                          ENDP


                          AREA ||i.TM_OC2BreakStopState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC2BreakStopState_Init PROC
;;;1785    */
;;;1786   void TM_OC2BreakStopState_Init(TM_Struct* TMx, BitAction BKPinState)
000000  b510              PUSH     {r4,lr}
;;;1787   {
;;;1788       TMx->BS.MBIT.STP2_STA = BKPinState;
000002  224b              MOVS     r2,#0x4b
000004  5c12              LDRB     r2,[r2,r0]
000006  2304              MOVS     r3,#4
000008  439a              BICS     r2,r2,r3
00000a  008b              LSLS     r3,r1,#2
00000c  2404              MOVS     r4,#4
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  234b              MOVS     r3,#0x4b
000014  541a              STRB     r2,[r3,r0]
;;;1789   }
000016  bd10              POP      {r4,pc}
;;;1790   
                          ENDP


                          AREA ||i.TM_OC2HOutputState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC2HOutputState_Init PROC
;;;1898    */
;;;1899   void TM_OC2HOutputState_Init(TM_Struct* TMx, BitAction PinState)
000000  b510              PUSH     {r4,lr}
;;;1900   {
000002  4602              MOV      r2,r0
;;;1901       uint8_t temp;
;;;1902       
;;;1903       temp = TMx->OSCR.B[1];
000004  2339              MOVS     r3,#0x39
000006  5c98              LDRB     r0,[r3,r2]
;;;1904       temp |= TM_OS2H_unLock;
000008  2340              MOVS     r3,#0x40
00000a  4318              ORRS     r0,r0,r3
;;;1905       
;;;1906       if (PinState == SET)
00000c  2901              CMP      r1,#1
00000e  d102              BNE      |L110.22|
;;;1907           temp |= TM_OS2H_State;
000010  2304              MOVS     r3,#4
000012  4318              ORRS     r0,r0,r3
000014  e003              B        |L110.30|
                  |L110.22|
;;;1908       else
;;;1909           temp &= ~TM_OS2H_State;
000016  2404              MOVS     r4,#4
000018  4603              MOV      r3,r0
00001a  43a3              BICS     r3,r3,r4
00001c  4618              MOV      r0,r3
                  |L110.30|
;;;1910           
;;;1911       TMx->OSCR.B[1] = temp;
00001e  2339              MOVS     r3,#0x39
000020  5498              STRB     r0,[r3,r2]
;;;1912   }
000022  bd10              POP      {r4,pc}
;;;1913   ///@}
                          ENDP


                          AREA ||i.TM_OC2NBreakStopState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC2NBreakStopState_Init PROC
;;;1861    */
;;;1862   void TM_OC2NBreakStopState_Init(TM_Struct* TMx, BitAction BKPinState)
000000  b510              PUSH     {r4,lr}
;;;1863   {
;;;1864       TMx->BS.MBIT.STP2N_STA = BKPinState;
000002  224b              MOVS     r2,#0x4b
000004  5c12              LDRB     r2,[r2,r0]
000006  2340              MOVS     r3,#0x40
000008  439a              BICS     r2,r2,r3
00000a  018b              LSLS     r3,r1,#6
00000c  2440              MOVS     r4,#0x40
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  234b              MOVS     r3,#0x4b
000014  541a              STRB     r2,[r3,r0]
;;;1865   }
000016  bd10              POP      {r4,pc}
;;;1866   
                          ENDP


                          AREA ||i.TM_OC2NOutput_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC2NOutput_Cmd PROC
;;;1842    */
;;;1843   void TM_OC2NOutput_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  223f              MOVS     r2,#0x3f
;;;1844   {
;;;1845       TMx->OCCR0.MBIT.OC2N_OE = NewState;
000002  5c12              LDRB     r2,[r2,r0]
000004  0852              LSRS     r2,r2,#1
000006  0052              LSLS     r2,r2,#1
000008  07cb              LSLS     r3,r1,#31
00000a  0fdb              LSRS     r3,r3,#31
00000c  431a              ORRS     r2,r2,r3
00000e  233f              MOVS     r3,#0x3f
000010  541a              STRB     r2,[r3,r0]
;;;1846   }
000012  4770              BX       lr
;;;1847   
                          ENDP


                          AREA ||i.TM_OC2OutputState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC2OutputState_Init PROC
;;;1756    */
;;;1757   void TM_OC2OutputState_Init(TM_Struct* TMx, BitAction PinState)
000000  b510              PUSH     {r4,lr}
;;;1758   {
000002  4602              MOV      r2,r0
;;;1759       uint8_t temp;
;;;1760       
;;;1761       temp = TMx->OSCR.B[0];
000004  2338              MOVS     r3,#0x38
000006  5c98              LDRB     r0,[r3,r2]
;;;1762       temp |= TM_OS2_unLock;
000008  2340              MOVS     r3,#0x40
00000a  4318              ORRS     r0,r0,r3
;;;1763       
;;;1764       if (PinState == SET)
00000c  2901              CMP      r1,#1
00000e  d102              BNE      |L113.22|
;;;1765           temp |= TM_OS2_State;
000010  2304              MOVS     r3,#4
000012  4318              ORRS     r0,r0,r3
000014  e003              B        |L113.30|
                  |L113.22|
;;;1766       else
;;;1767           temp &= ~TM_OS2_State;
000016  2404              MOVS     r4,#4
000018  4603              MOV      r3,r0
00001a  43a3              BICS     r3,r3,r4
00001c  4618              MOV      r0,r3
                  |L113.30|
;;;1768           
;;;1769       TMx->OSCR.B[0] = temp;
00001e  2338              MOVS     r3,#0x38
000020  5498              STRB     r0,[r3,r2]
;;;1770   }
000022  bd10              POP      {r4,pc}
;;;1771   
                          ENDP


                          AREA ||i.TM_OC2Output_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC2Output_Cmd PROC
;;;1804    */
;;;1805   void TM_OC2Output_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  223d              MOVS     r2,#0x3d
;;;1806   {
;;;1807       TMx->OCCR0.MBIT.OC2_OE = NewState;
000002  5c12              LDRB     r2,[r2,r0]
000004  0852              LSRS     r2,r2,#1
000006  0052              LSLS     r2,r2,#1
000008  07cb              LSLS     r3,r1,#31
00000a  0fdb              LSRS     r3,r3,#31
00000c  431a              ORRS     r2,r2,r3
00000e  233d              MOVS     r3,#0x3d
000010  541a              STRB     r2,[r3,r0]
;;;1808   }
000012  4770              BX       lr
;;;1809   
                          ENDP


                          AREA ||i.TM_OC3BreakControl_Select||, CODE, READONLY, ALIGN=1

                  TM_OC3BreakControl_Select PROC
;;;2280    */
;;;2281   void TM_OC3BreakControl_Select(TM_Struct* TMx, TM_BKPinModeDef BKPinMode)
000000  b510              PUSH     {r4,lr}
;;;2282   {
;;;2283       TMx->BS.MBIT.BK3_CTL = BKPinMode;
000002  224a              MOVS     r2,#0x4a
000004  5c12              LDRB     r2,[r2,r0]
000006  2380              MOVS     r3,#0x80
000008  439a              BICS     r2,r2,r3
00000a  01cb              LSLS     r3,r1,#7
00000c  2480              MOVS     r4,#0x80
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  234a              MOVS     r3,#0x4a
000014  541a              STRB     r2,[r3,r0]
;;;2284   }
000016  bd10              POP      {r4,pc}
;;;2285   ///@}
                          ENDP


                          AREA ||i.TM_OC3BreakStopState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC3BreakStopState_Init PROC
;;;1987    */
;;;1988   void TM_OC3BreakStopState_Init(TM_Struct* TMx, BitAction BKPinState)
000000  b510              PUSH     {r4,lr}
;;;1989   {
;;;1990       TMx->BS.MBIT.STP3_STA = BKPinState;
000002  224b              MOVS     r2,#0x4b
000004  5c12              LDRB     r2,[r2,r0]
000006  2308              MOVS     r3,#8
000008  439a              BICS     r2,r2,r3
00000a  00cb              LSLS     r3,r1,#3
00000c  2408              MOVS     r4,#8
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  234b              MOVS     r3,#0x4b
000014  541a              STRB     r2,[r3,r0]
;;;1991   }
000016  bd10              POP      {r4,pc}
;;;1992   
                          ENDP


                          AREA ||i.TM_OC3HOutputState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC3HOutputState_Init PROC
;;;2044    */
;;;2045   void TM_OC3HOutputState_Init(TM_Struct* TMx, BitAction PinState)
000000  b510              PUSH     {r4,lr}
;;;2046   {
000002  4602              MOV      r2,r0
;;;2047       uint8_t temp;
;;;2048       
;;;2049       temp = TMx->OSCR.B[1];
000004  2339              MOVS     r3,#0x39
000006  5c98              LDRB     r0,[r3,r2]
;;;2050       temp |= TM_OS3H_unLock;
000008  2380              MOVS     r3,#0x80
00000a  4318              ORRS     r0,r0,r3
;;;2051       
;;;2052       if (PinState == SET)
00000c  2901              CMP      r1,#1
00000e  d102              BNE      |L117.22|
;;;2053           temp |= TM_OS3H_State;
000010  2308              MOVS     r3,#8
000012  4318              ORRS     r0,r0,r3
000014  e003              B        |L117.30|
                  |L117.22|
;;;2054       else
;;;2055           temp &= ~TM_OS3H_State;
000016  2408              MOVS     r4,#8
000018  4603              MOV      r3,r0
00001a  43a3              BICS     r3,r3,r4
00001c  4618              MOV      r0,r3
                  |L117.30|
;;;2056           
;;;2057       TMx->OSCR.B[1] = temp;
00001e  2339              MOVS     r3,#0x39
000020  5498              STRB     r0,[r3,r2]
;;;2058   }
000022  bd10              POP      {r4,pc}
;;;2059   ///@}
                          ENDP


                          AREA ||i.TM_OC3OutputState_Init||, CODE, READONLY, ALIGN=1

                  TM_OC3OutputState_Init PROC
;;;1958    */
;;;1959   void TM_OC3OutputState_Init(TM_Struct* TMx, BitAction PinState)
000000  b510              PUSH     {r4,lr}
;;;1960   {
000002  4602              MOV      r2,r0
;;;1961       uint8_t temp;
;;;1962       
;;;1963       temp = TMx->OSCR.B[0];
000004  2338              MOVS     r3,#0x38
000006  5c98              LDRB     r0,[r3,r2]
;;;1964       temp |= TM_OS3_unLock;
000008  2380              MOVS     r3,#0x80
00000a  4318              ORRS     r0,r0,r3
;;;1965       
;;;1966       if (PinState == SET)
00000c  2901              CMP      r1,#1
00000e  d102              BNE      |L118.22|
;;;1967           temp |= TM_OS3_State;
000010  2308              MOVS     r3,#8
000012  4318              ORRS     r0,r0,r3
000014  e003              B        |L118.30|
                  |L118.22|
;;;1968       else
;;;1969           temp &= ~TM_OS3_State;
000016  2408              MOVS     r4,#8
000018  4603              MOV      r3,r0
00001a  43a3              BICS     r3,r3,r4
00001c  4618              MOV      r0,r3
                  |L118.30|
;;;1970           
;;;1971       TMx->OSCR.B[0] = temp;
00001e  2338              MOVS     r3,#0x38
000020  5498              STRB     r0,[r3,r2]
;;;1972   }
000022  bd10              POP      {r4,pc}
;;;1973   
                          ENDP


                          AREA ||i.TM_OC3Output_Cmd||, CODE, READONLY, ALIGN=1

                  TM_OC3Output_Cmd PROC
;;;2006    */
;;;2007   void TM_OC3Output_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2008   {
;;;2009       TMx->OCCR0.MBIT.OC3_OE = NewState;
000002  223d              MOVS     r2,#0x3d
000004  5c12              LDRB     r2,[r2,r0]
000006  2310              MOVS     r3,#0x10
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2410              MOVS     r4,#0x10
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  233d              MOVS     r3,#0x3d
000014  541a              STRB     r2,[r3,r0]
;;;2010   }
000016  bd10              POP      {r4,pc}
;;;2011   
                          ENDP


                          AREA ||i.TM_PreloadActive_SW||, CODE, READONLY, ALIGN=1

                  TM_PreloadActive_SW PROC
;;;2333    */
;;;2334   void TM_PreloadActive_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2335   {
;;;2336       TMx->OCCR1.MBIT.POE_SW = NewState;
000002  2243              MOVS     r2,#0x43
000004  5c12              LDRB     r2,[r2,r0]
000006  2310              MOVS     r3,#0x10
000008  439a              BICS     r2,r2,r3
00000a  010b              LSLS     r3,r1,#4
00000c  2410              MOVS     r4,#0x10
00000e  4023              ANDS     r3,r3,r4
000010  431a              ORRS     r2,r2,r3
000012  2343              MOVS     r3,#0x43
000014  541a              STRB     r2,[r3,r0]
;;;2337   }
000016  bd10              POP      {r4,pc}
;;;2338   /**
                          ENDP


                          AREA ||i.TM_PreloadEventSource_Config||, CODE, READONLY, ALIGN=1

                  TM_PreloadEventSource_Config PROC
;;;2311    */
;;;2312   void TM_PreloadEventSource_Config(TM_Struct* TMx, uint8_t PreLoad, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2313   {
;;;2314       if (NewState == ENABLE)
000002  2a01              CMP      r2,#1
000004  d105              BNE      |L121.18|
;;;2315           TMx->OCCR1.B[3] |= PreLoad;
000006  2343              MOVS     r3,#0x43
000008  5c1b              LDRB     r3,[r3,r0]
00000a  430b              ORRS     r3,r3,r1
00000c  2443              MOVS     r4,#0x43
00000e  5423              STRB     r3,[r4,r0]
000010  e004              B        |L121.28|
                  |L121.18|
;;;2316       else
;;;2317           TMx->OCCR1.B[3] &= ~PreLoad;
000012  2343              MOVS     r3,#0x43
000014  5c1b              LDRB     r3,[r3,r0]
000016  438b              BICS     r3,r3,r1
000018  2443              MOVS     r4,#0x43
00001a  5423              STRB     r3,[r4,r0]
                  |L121.28|
;;;2318       
;;;2319   }
00001c  bd10              POP      {r4,pc}
;;;2320   /**
                          ENDP


                          AREA ||i.TM_PreloadOC0z_Config||, CODE, READONLY, ALIGN=1

                  TM_PreloadOC0z_Config PROC
;;;2354    */
;;;2355   void TM_PreloadOC0z_Config(TM_Struct* TMx, uint8_t TM_OC0z3ch)
000000  2242              MOVS     r2,#0x42
;;;2356   {
;;;2357       TMx->OCCR1.B[2] &= ~(TM_POC00 | TM_POC01 | TM_POC02);
000002  5c12              LDRB     r2,[r2,r0]
000004  08d3              LSRS     r3,r2,#3
000006  00db              LSLS     r3,r3,#3
000008  2242              MOVS     r2,#0x42
00000a  5413              STRB     r3,[r2,r0]
;;;2358       TMx->OCCR1.B[2] |= TM_OC0z3ch;
00000c  5c12              LDRB     r2,[r2,r0]
00000e  430a              ORRS     r2,r2,r1
000010  2342              MOVS     r3,#0x42
000012  541a              STRB     r2,[r3,r0]
;;;2359       
;;;2360   }
000014  4770              BX       lr
;;;2361   /**
                          ENDP


                          AREA ||i.TM_PreloadOC1z_Config||, CODE, READONLY, ALIGN=1

                  TM_PreloadOC1z_Config PROC
;;;2377    */
;;;2378   void TM_PreloadOC1z_Config(TM_Struct* TMx, uint8_t TM_OC1z3ch)
000000  2242              MOVS     r2,#0x42
;;;2379   {
;;;2380       TMx->OCCR1.B[2] &= ~(TM_POC10 | TM_POC11 | TM_POC12);
000002  5c12              LDRB     r2,[r2,r0]
000004  2370              MOVS     r3,#0x70
000006  439a              BICS     r2,r2,r3
000008  2342              MOVS     r3,#0x42
00000a  541a              STRB     r2,[r3,r0]
;;;2381       TMx->OCCR1.B[2] |= TM_OC1z3ch;
00000c  2242              MOVS     r2,#0x42
00000e  5c12              LDRB     r2,[r2,r0]
000010  430a              ORRS     r2,r2,r1
000012  541a              STRB     r2,[r3,r0]
;;;2382   }
000014  4770              BX       lr
;;;2383   ///@}
                          ENDP


                          AREA ||i.TM_PrescalerClock_Select||, CODE, READONLY, ALIGN=1

                  TM_PrescalerClock_Select PROC
;;;265     */
;;;266    void TM_PrescalerClock_Select(TM_Struct* TMx, TM_ClockSourceDef TMClockSelect)
000000  b510              PUSH     {r4,lr}
;;;267    {
;;;268        TMx->CLK.MBIT.CKS2_SEL = TMClockSelect;    
000002  7a02              LDRB     r2,[r0,#8]
000004  2380              MOVS     r3,#0x80
000006  439a              BICS     r2,r2,r3
000008  01cb              LSLS     r3,r1,#7
00000a  2480              MOVS     r4,#0x80
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7202              STRB     r2,[r0,#8]
;;;269    }
000012  bd10              POP      {r4,pc}
;;;270    
                          ENDP


                          AREA ||i.TM_Prescaler_Cmd||, CODE, READONLY, ALIGN=1

                  TM_Prescaler_Cmd PROC
;;;580     */
;;;581    void TM_Prescaler_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;582    {
;;;583        if (NewState == ENABLE)
000002  d104              BNE      |L125.14|
;;;584            TMx->CR0.B[0] |= TM_CR0_EN2_enable_b0;
000004  7c02              LDRB     r2,[r0,#0x10]
000006  2302              MOVS     r3,#2
000008  431a              ORRS     r2,r2,r3
00000a  7402              STRB     r2,[r0,#0x10]
00000c  e003              B        |L125.22|
                  |L125.14|
;;;585        else
;;;586            TMx->CR0.B[0] &= ~(TM_CR0_EN2_mask_b0);
00000e  7c02              LDRB     r2,[r0,#0x10]
000010  2302              MOVS     r3,#2
000012  439a              BICS     r2,r2,r3
000014  7402              STRB     r2,[r0,#0x10]
                  |L125.22|
;;;587    }
000016  4770              BX       lr
;;;588    
                          ENDP


                          AREA ||i.TM_Prescaler_Config||, CODE, READONLY, ALIGN=1

                  TM_Prescaler_Config PROC
;;;559     */
;;;560    void TM_Prescaler_Config(TM_Struct* TMx, uint16_t TM_Prescaler, uint16_t TM_PrescalerReload)
000000  8501              STRH     r1,[r0,#0x28]
;;;561    {
;;;562        TMx->PSCNT.H[0] = TM_Prescaler;
;;;563        TMx->PSARR.H[0] = TM_PrescalerReload;
000002  8582              STRH     r2,[r0,#0x2c]
;;;564    }
000004  4770              BX       lr
;;;565    
                          ENDP


                          AREA ||i.TM_Prescaler_SW||, CODE, READONLY, ALIGN=1

                  TM_Prescaler_SW PROC
;;;608     */
;;;609    void TM_Prescaler_SW(TM_Struct* TMx, TM_PrescalerResetGateSW_Def CMode, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;610    {
;;;611        if (NewState == ENABLE)
000002  2a01              CMP      r2,#1
000004  d103              BNE      |L127.14|
;;;612            TMx->TRG.B[3] |= CMode;
000006  7bc3              LDRB     r3,[r0,#0xf]
000008  430b              ORRS     r3,r3,r1
00000a  73c3              STRB     r3,[r0,#0xf]
00000c  e002              B        |L127.20|
                  |L127.14|
;;;613        else
;;;614            TMx->TRG.B[3] &= ~(CMode);
00000e  7bc3              LDRB     r3,[r0,#0xf]
000010  438b              BICS     r3,r3,r1
000012  73c3              STRB     r3,[r0,#0xf]
                  |L127.20|
;;;615    }
000014  bd10              POP      {r4,pc}
;;;616    ///@}
                          ENDP


                          AREA ||i.TM_QEIResetIDX_Select||, CODE, READONLY, ALIGN=1

                  TM_QEIResetIDX_Select PROC
;;;3454    */
;;;3455   void TM_QEIResetIDX_Select(TM_Struct* TMx,TM_QEIResetIndexDef TM_IDXSel)
000000  b510              PUSH     {r4,lr}
;;;3456   {
;;;3457       TMx->TRG.MBIT.IDX_MDS = TM_IDXSel;
000002  7b82              LDRB     r2,[r0,#0xe]
000004  2330              MOVS     r3,#0x30
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2430              MOVS     r4,#0x30
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7382              STRB     r2,[r0,#0xe]
;;;3458   }
000012  bd10              POP      {r4,pc}
;;;3459   /**
                          ENDP


                          AREA ||i.TM_QEIReset_Cmd||, CODE, READONLY, ALIGN=1

                  TM_QEIReset_Cmd PROC
;;;3432    */
;;;3433   void TM_QEIReset_Cmd(TM_Struct* TMx,FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;3434   {
;;;3435       TMx->TRG.MBIT.IDX_EN = NewState;
000002  7b82              LDRB     r2,[r0,#0xe]
000004  2308              MOVS     r3,#8
000006  439a              BICS     r2,r2,r3
000008  00cb              LSLS     r3,r1,#3
00000a  2408              MOVS     r4,#8
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7382              STRB     r2,[r0,#0xe]
;;;3436   }
000012  bd10              POP      {r4,pc}
;;;3437   /**
                          ENDP


                          AREA ||i.TM_QEI_Select||, CODE, READONLY, ALIGN=1

                  TM_QEI_Select PROC
;;;3413    */
;;;3414   void TM_QEI_Select(TM_Struct* TMx, EXUDMDSDef EXUDMds)
000000  7b82              LDRB     r2,[r0,#0xe]
;;;3415   {
;;;3416       TMx->TRG.MBIT.QEI_MDS = EXUDMds;
000002  08d2              LSRS     r2,r2,#3
000004  00d2              LSLS     r2,r2,#3
000006  074b              LSLS     r3,r1,#29
000008  0f5b              LSRS     r3,r3,#29
00000a  431a              ORRS     r2,r2,r3
00000c  7382              STRB     r2,[r0,#0xe]
;;;3417   }
00000e  4770              BX       lr
;;;3418   /**
                          ENDP


                          AREA ||i.TM_ReloadFromCCxB_Cmd||, CODE, READONLY, ALIGN=1

                  TM_ReloadFromCCxB_Cmd PROC
;;;3349    */
;;;3350   void TM_ReloadFromCCxB_Cmd(TM_Struct* TMx, ReloadTimeDef NewState)
000000  2232              MOVS     r2,#0x32
;;;3351   {
;;;3352       TMx->CCMDS.MBIT.OC_LCK = NewState;
000002  5c12              LDRB     r2,[r2,r0]
000004  0852              LSRS     r2,r2,#1
000006  0052              LSLS     r2,r2,#1
000008  07cb              LSLS     r3,r1,#31
00000a  0fdb              LSRS     r3,r3,#31
00000c  431a              ORRS     r2,r2,r3
00000e  2332              MOVS     r3,#0x32
000010  541a              STRB     r2,[r3,r0]
;;;3353   }
000012  4770              BX       lr
;;;3354   ///@}
                          ENDP


                          AREA ||i.TM_ResetCounter_SW||, CODE, READONLY, ALIGN=1

                  TM_ResetCounter_SW PROC
;;;740     */
;;;741    void TM_ResetCounter_SW(TM_Struct* TMx,FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;742    {
;;;743        TMx->TRG.MBIT.RST_SW = NewState;
000002  7bc2              LDRB     r2,[r0,#0xf]
000004  2310              MOVS     r3,#0x10
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2410              MOVS     r4,#0x10
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  73c2              STRB     r2,[r0,#0xf]
;;;744    }
000012  bd10              POP      {r4,pc}
;;;745    /**
                          ENDP


                          AREA ||i.TM_ResetPrescaler_SW||, CODE, READONLY, ALIGN=1

                  TM_ResetPrescaler_SW PROC
;;;720     */
;;;721    void TM_ResetPrescaler_SW(TM_Struct* TMx,FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;722    {
;;;723        TMx->TRG.MBIT.RST2_SW = NewState;
000002  7bc2              LDRB     r2,[r0,#0xf]
000004  2320              MOVS     r3,#0x20
000006  439a              BICS     r2,r2,r3
000008  014b              LSLS     r3,r1,#5
00000a  2420              MOVS     r4,#0x20
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  73c2              STRB     r2,[r0,#0xf]
;;;724    }
000012  bd10              POP      {r4,pc}
;;;725    
                          ENDP


                          AREA ||i.TM_RisingCaptureIC0_SW||, CODE, READONLY, ALIGN=1

                  TM_RisingCaptureIC0_SW PROC
;;;2731    */
;;;2732   void TM_RisingCaptureIC0_SW(TM_Struct* TMx, FunctionalState NewState)
000000  7d42              LDRB     r2,[r0,#0x15]
;;;2733   {
;;;2734       TMx->CR1.MBIT.CC0A_SEN = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7542              STRB     r2,[r0,#0x15]
;;;2735   }
00000e  4770              BX       lr
;;;2736   /**
                          ENDP


                          AREA ||i.TM_RisingCaptureIC1_SW||, CODE, READONLY, ALIGN=1

                  TM_RisingCaptureIC1_SW PROC
;;;2749    */
;;;2750   void TM_RisingCaptureIC1_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2751   {
;;;2752       TMx->CR1.MBIT.CC1A_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;2753   }
000012  bd10              POP      {r4,pc}
;;;2754   /**
                          ENDP


                          AREA ||i.TM_RisingCaptureIC2_SW||, CODE, READONLY, ALIGN=1

                  TM_RisingCaptureIC2_SW PROC
;;;2767    */
;;;2768   void TM_RisingCaptureIC2_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2769   {
;;;2770       TMx->CR1.MBIT.CC2A_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2304              MOVS     r3,#4
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  2404              MOVS     r4,#4
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;2771   }
000012  bd10              POP      {r4,pc}
;;;2772   /**
                          ENDP


                          AREA ||i.TM_RisingCaptureIC3_SW||, CODE, READONLY, ALIGN=1

                  TM_RisingCaptureIC3_SW PROC
;;;2785    */
;;;2786   void TM_RisingCaptureIC3_SW(TM_Struct* TMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;2787   {
;;;2788       TMx->CR1.MBIT.CC3A_SEN = NewState;
000002  7d42              LDRB     r2,[r0,#0x15]
000004  2308              MOVS     r3,#8
000006  439a              BICS     r2,r2,r3
000008  00cb              LSLS     r3,r1,#3
00000a  2408              MOVS     r4,#8
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7542              STRB     r2,[r0,#0x15]
;;;2789   }
000012  bd10              POP      {r4,pc}
;;;2790   /**
                          ENDP


                          AREA ||i.TM_SetCC0A||, CODE, READONLY, ALIGN=1

                  TM_SetCC0A PROC
;;;3026    */
;;;3027   void TM_SetCC0A(TM_Struct* TMx,uint16_t HfWDat)
000000  2250              MOVS     r2,#0x50
;;;3028   {
;;;3029       TMx->CC0A.H[0] = HfWDat;
000002  5211              STRH     r1,[r2,r0]
;;;3030   }
000004  4770              BX       lr
;;;3031   /**
                          ENDP


                          AREA ||i.TM_SetCC0B||, CODE, READONLY, ALIGN=1

                  TM_SetCC0B PROC
;;;3098    */
;;;3099   void TM_SetCC0B(TM_Struct* TMx,uint16_t HfWDat)
000000  2254              MOVS     r2,#0x54
;;;3100   {
;;;3101       TMx->CC0B.H[0] = HfWDat;
000002  5211              STRH     r1,[r2,r0]
;;;3102   }
000004  4770              BX       lr
;;;3103   /**
                          ENDP


                          AREA ||i.TM_SetCC1A||, CODE, READONLY, ALIGN=1

                  TM_SetCC1A PROC
;;;3044    */
;;;3045   void TM_SetCC1A(TM_Struct* TMx,uint16_t HfWDat)
000000  2258              MOVS     r2,#0x58
;;;3046   {
;;;3047       TMx->CC1A.H[0] = HfWDat;
000002  5211              STRH     r1,[r2,r0]
;;;3048   }
000004  4770              BX       lr
;;;3049   /**
                          ENDP


                          AREA ||i.TM_SetCC1B||, CODE, READONLY, ALIGN=1

                  TM_SetCC1B PROC
;;;3116    */
;;;3117   void TM_SetCC1B(TM_Struct* TMx,uint16_t HfWDat)
000000  225c              MOVS     r2,#0x5c
;;;3118   {
;;;3119       TMx->CC1B.H[0] = HfWDat;
000002  5211              STRH     r1,[r2,r0]
;;;3120   }
000004  4770              BX       lr
;;;3121   /**
                          ENDP


                          AREA ||i.TM_SetCC2A||, CODE, READONLY, ALIGN=1

                  TM_SetCC2A PROC
;;;3062    */
;;;3063   void TM_SetCC2A(TM_Struct* TMx,uint16_t HfWDat)
000000  2260              MOVS     r2,#0x60
;;;3064   {
;;;3065       TMx->CC2A.H[0] = HfWDat;
000002  5211              STRH     r1,[r2,r0]
;;;3066   }
000004  4770              BX       lr
;;;3067   /**
                          ENDP


                          AREA ||i.TM_SetCC2B||, CODE, READONLY, ALIGN=1

                  TM_SetCC2B PROC
;;;3134    */
;;;3135   void TM_SetCC2B(TM_Struct* TMx,uint16_t HfWDat)
000000  2264              MOVS     r2,#0x64
;;;3136   {
;;;3137       TMx->CC2B.H[0] = HfWDat;
000002  5211              STRH     r1,[r2,r0]
;;;3138   }
000004  4770              BX       lr
;;;3139   /**
                          ENDP


                          AREA ||i.TM_SetCC3A||, CODE, READONLY, ALIGN=1

                  TM_SetCC3A PROC
;;;3080    */
;;;3081   void TM_SetCC3A(TM_Struct* TMx,uint16_t HfWDat)
000000  2268              MOVS     r2,#0x68
;;;3082   {
;;;3083       TMx->CC3A.H[0] = HfWDat;
000002  5211              STRH     r1,[r2,r0]
;;;3084   }
000004  4770              BX       lr
;;;3085   /**
                          ENDP


                          AREA ||i.TM_SetCC3B||, CODE, READONLY, ALIGN=1

                  TM_SetCC3B PROC
;;;3152    */
;;;3153   void TM_SetCC3B(TM_Struct* TMx,uint16_t HfWDat)
000000  226c              MOVS     r2,#0x6c
;;;3154   {
;;;3155       TMx->CC3B.H[0] = HfWDat;
000002  5211              STRH     r1,[r2,r0]
;;;3156   }
000004  4770              BX       lr
;;;3157   ///@}
                          ENDP


                          AREA ||i.TM_SetCounterDirection||, CODE, READONLY, ALIGN=2

                  TM_SetCounterDirection PROC
;;;379     */
;;;380    void TM_SetCounterDirection(TM_Struct* TMx, TM_DirectionDef DIR)
000000  b510              PUSH     {r4,lr}
;;;381    {
;;;382        TMx->CR0.MBIT.DIR = DIR;
000002  7c02              LDRB     r2,[r0,#0x10]
000004  2340              MOVS     r3,#0x40
000006  439a              BICS     r2,r2,r3
000008  018b              LSLS     r3,r1,#6
00000a  2440              MOVS     r4,#0x40
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7402              STRB     r2,[r0,#0x10]
;;;383    #if defined(MG32_1ST)
;;;384    	if (TMx == TM36)
000012  4a07              LDR      r2,|L146.48|
000014  4290              CMP      r0,r2
000016  d10a              BNE      |L146.46|
;;;385    	{
;;;386    		TMx->CR0.MBIT.DIR2 = TMx->CR0.MBIT.DIR;
000018  7c03              LDRB     r3,[r0,#0x10]
00001a  065b              LSLS     r3,r3,#25
00001c  0fdb              LSRS     r3,r3,#31
00001e  01db              LSLS     r3,r3,#7
000020  2480              MOVS     r4,#0x80
000022  4023              ANDS     r3,r3,r4
000024  461a              MOV      r2,r3
000026  7c03              LDRB     r3,[r0,#0x10]
000028  43a3              BICS     r3,r3,r4
00002a  4313              ORRS     r3,r3,r2
00002c  7403              STRB     r3,[r0,#0x10]
                  |L146.46|
;;;387    	}
;;;388    #endif		
;;;389    	
;;;390    }
00002e  bd10              POP      {r4,pc}
;;;391    
                          ENDP

                  |L146.48|
                          DCD      0x56860000

                          AREA ||i.TM_SetDeadTime||, CODE, READONLY, ALIGN=1

                  TM_SetDeadTime PROC
;;;3658    */
;;;3659   void TM_SetDeadTime(TM_Struct* TMx, uint8_t DTTime)
000000  2245              MOVS     r2,#0x45
;;;3660   {
;;;3661       TMx->PWM.MBIT.DTG_DY = DTTime;
000002  5c12              LDRB     r2,[r2,r0]
000004  b2cb              UXTB     r3,r1
000006  461a              MOV      r2,r3
000008  2345              MOVS     r3,#0x45
00000a  541a              STRB     r2,[r3,r0]
;;;3662   }
00000c  4770              BX       lr
;;;3663   ///@}
                          ENDP


                          AREA ||i.TM_SetDeadZoneClockDivider||, CODE, READONLY, ALIGN=1

                  TM_SetDeadZoneClockDivider PROC
;;;3640    */
;;;3641   void TM_SetDeadZoneClockDivider(TM_Struct* TMx, TM_DTClockDivDef DTClockDiv)
000000  7a82              LDRB     r2,[r0,#0xa]
;;;3642   {
;;;3643       TMx->CLK.MBIT.DTG_DIV = DTClockDiv;
000002  0892              LSRS     r2,r2,#2
000004  0092              LSLS     r2,r2,#2
000006  078b              LSLS     r3,r1,#30
000008  0f9b              LSRS     r3,r3,#30
00000a  431a              ORRS     r2,r2,r3
00000c  7282              STRB     r2,[r0,#0xa]
;;;3644   }    
00000e  4770              BX       lr
;;;3645   
                          ENDP


                          AREA ||i.TM_SetInternalClockDivider||, CODE, READONLY, ALIGN=1

                  TM_SetInternalClockDivider PROC
;;;244     */
;;;245    void TM_SetInternalClockDivider(TM_Struct* TMx, TM_INTClockDivDef INTClockSrc)
000000  b510              PUSH     {r4,lr}
;;;246    {
;;;247    	TMx->CLK.MBIT.CKI_DIV = INTClockSrc;
000002  7a42              LDRB     r2,[r0,#9]
000004  2330              MOVS     r3,#0x30
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2430              MOVS     r4,#0x30
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7242              STRB     r2,[r0,#9]
;;;248    }
000012  bd10              POP      {r4,pc}
;;;249    
                          ENDP


                          AREA ||i.TM_SetPrescalerDirection||, CODE, READONLY, ALIGN=2

                  TM_SetPrescalerDirection PROC
;;;510     */
;;;511    void TM_SetPrescalerDirection(TM_Struct* TMx, TM_DirectionDef DIR)
000000  b510              PUSH     {r4,lr}
;;;512    {
;;;513    #if defined(MG32_1ST)
;;;514    	if(TMx == TM36)
000002  4a0c              LDR      r2,|L150.52|
000004  4290              CMP      r0,r2
000006  d10b              BNE      |L150.32|
;;;515    		TMx->CR0.MBIT.DIR2 = TMx->CR0.MBIT.DIR;		// TM36 Prescaler direction is the same as main counter
000008  7c03              LDRB     r3,[r0,#0x10]
00000a  065b              LSLS     r3,r3,#25
00000c  0fdb              LSRS     r3,r3,#31
00000e  01db              LSLS     r3,r3,#7
000010  2480              MOVS     r4,#0x80
000012  4023              ANDS     r3,r3,r4
000014  461a              MOV      r2,r3
000016  7c03              LDRB     r3,[r0,#0x10]
000018  43a3              BICS     r3,r3,r4
00001a  4313              ORRS     r3,r3,r2
00001c  7403              STRB     r3,[r0,#0x10]
00001e  e007              B        |L150.48|
                  |L150.32|
;;;516    	else
;;;517    		TMx->CR0.MBIT.DIR2 = DIR;
000020  7c02              LDRB     r2,[r0,#0x10]
000022  2380              MOVS     r3,#0x80
000024  439a              BICS     r2,r2,r3
000026  01cb              LSLS     r3,r1,#7
000028  2480              MOVS     r4,#0x80
00002a  4023              ANDS     r3,r3,r4
00002c  431a              ORRS     r2,r2,r3
00002e  7402              STRB     r2,[r0,#0x10]
                  |L150.48|
;;;518    #endif
;;;519        
;;;520    #if defined(MG32_2ND) || defined(MG32_3RD)
;;;521        TMx->CR0.MBIT.DIR2 = DIR;
;;;522    #endif
;;;523        
;;;524    }
000030  bd10              POP      {r4,pc}
;;;525    
                          ENDP

000032  0000              DCW      0x0000
                  |L150.52|
                          DCD      0x56860000

                          AREA ||i.TM_TRGICounter_Select||, CODE, READONLY, ALIGN=1

                  TM_TRGICounter_Select PROC
;;;789     */
;;;790    void TM_TRGICounter_Select(TM_Struct* TMx, TM_TRGIModeDef TRGIMDS)
000000  7b02              LDRB     r2,[r0,#0xc]
;;;791    {
;;;792        TMx->TRG.MBIT.TRGI_MDS = TRGIMDS;
000002  08d2              LSRS     r2,r2,#3
000004  00d2              LSLS     r2,r2,#3
000006  074b              LSLS     r3,r1,#29
000008  0f5b              LSRS     r3,r3,#29
00000a  431a              ORRS     r2,r2,r3
00000c  7302              STRB     r2,[r0,#0xc]
;;;793    }
00000e  4770              BX       lr
;;;794    
                          ENDP


                          AREA ||i.TM_TRGIPrescaler_Select||, CODE, READONLY, ALIGN=1

                  TM_TRGIPrescaler_Select PROC
;;;816     */
;;;817    void TM_TRGIPrescaler_Select(TM_Struct* TMx, TM_TRGIModeDef TRGIMDS)
000000  b510              PUSH     {r4,lr}
;;;818    {
;;;819        TMx->TRG.MBIT.TRGI2_MDS = TRGIMDS;
000002  7b02              LDRB     r2,[r0,#0xc]
000004  2338              MOVS     r3,#0x38
000006  439a              BICS     r2,r2,r3
000008  00cb              LSLS     r3,r1,#3
00000a  2438              MOVS     r4,#0x38
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7302              STRB     r2,[r0,#0xc]
;;;820    }
000012  bd10              POP      {r4,pc}
;;;821    
                          ENDP


                          AREA ||i.TM_TRGOOut_SW||, CODE, READONLY, ALIGN=1

                  TM_TRGOOut_SW PROC
;;;860     */
;;;861    void TM_TRGOOut_SW(TM_Struct* TMx, FunctionalState NewState)
000000  7bc2              LDRB     r2,[r0,#0xf]
;;;862    {
;;;863        TMx->TRG.MBIT.TRGO_SW = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  73c2              STRB     r2,[r0,#0xf]
;;;864    }
00000e  4770              BX       lr
;;;865    
                          ENDP


                          AREA ||i.TM_TRGO_Select||, CODE, READONLY, ALIGN=1

                  TM_TRGO_Select PROC
;;;895     */
;;;896    void TM_TRGO_Select(TM_Struct* TMx, TM_TRGOSrcDef TM_TRGOCon )
000000  b510              PUSH     {r4,lr}
;;;897    {
;;;898        TMx->TRG.MBIT.TRGO_MDS = TM_TRGOCon;
000002  7b42              LDRB     r2,[r0,#0xd]
000004  23f0              MOVS     r3,#0xf0
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  24f0              MOVS     r4,#0xf0
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7342              STRB     r2,[r0,#0xd]
;;;899    }
000012  bd10              POP      {r4,pc}
;;;900    
                          ENDP


                          AREA ||i.TM_TimeBaseStruct_Init||, CODE, READONLY, ALIGN=1

                  TM_TimeBaseStruct_Init PROC
;;;115     */
;;;116     void TM_TimeBaseStruct_Init(TM_TimeBaseInitTypeDef *TM_TMBaseInitStruct)
000000  2105              MOVS     r1,#5
;;;117    {
;;;118        TM_TMBaseInitStruct->TM_Prescaler = 5;
000002  80c1              STRH     r1,[r0,#6]
;;;119        TM_TMBaseInitStruct->TM_CounterMode = Cascade;
000004  2100              MOVS     r1,#0
000006  7001              STRB     r1,[r0,#0]
;;;120        TM_TMBaseInitStruct->TM_Period = 5;
000008  2105              MOVS     r1,#5
00000a  8101              STRH     r1,[r0,#8]
;;;121        TM_TMBaseInitStruct->TM_MainClockSource = TM_CK_INT;
00000c  2100              MOVS     r1,#0
00000e  70c1              STRB     r1,[r0,#3]
;;;122        TM_TMBaseInitStruct->TM_2ndClockSource = TM_CK_INT;
000010  7101              STRB     r1,[r0,#4]
;;;123        TM_TMBaseInitStruct->TM_MainClockDirection = TM_UpCount;
000012  7041              STRB     r1,[r0,#1]
;;;124        TM_TMBaseInitStruct->TM_2ndClockDirection = TM_UpCount;
000014  7081              STRB     r1,[r0,#2]
;;;125        TM_TMBaseInitStruct->TM_IntClockDivision = TM_IntDIV1;
000016  7141              STRB     r1,[r0,#5]
;;;126    	
;;;127    }
000018  4770              BX       lr
;;;128    
                          ENDP


                          AREA ||i.TM_TimeBase_Init||, CODE, READONLY, ALIGN=1

                  TM_TimeBase_Init PROC
;;;145     */
;;;146    void TM_TimeBase_Init(TM_Struct *TMx, TM_TimeBaseInitTypeDef *TM_TMBaseInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;147    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;148        // setting parameters
;;;149        // prescaler counter initial value
;;;150        if(TM_TMBaseInitStruct->TM_2ndClockDirection == TM_UpCount)
000006  78a0              LDRB     r0,[r4,#2]
000008  2800              CMP      r0,#0
00000a  d105              BNE      |L156.24|
;;;151            TM_Prescaler_Config(TMx, 0, TM_TMBaseInitStruct->TM_Prescaler);
00000c  88e2              LDRH     r2,[r4,#6]
00000e  2100              MOVS     r1,#0
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       TM_Prescaler_Config
000016  e004              B        |L156.34|
                  |L156.24|
;;;152        else
;;;153            TM_Prescaler_Config(TMx, TM_TMBaseInitStruct->TM_Prescaler, TM_TMBaseInitStruct->TM_Prescaler);
000018  88e2              LDRH     r2,[r4,#6]
00001a  4611              MOV      r1,r2
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       TM_Prescaler_Config
                  |L156.34|
;;;154            
;;;155        // main counter initial value
;;;156        if(TM_TMBaseInitStruct->TM_MainClockDirection == TM_UpCount)
000022  7860              LDRB     r0,[r4,#1]
000024  2800              CMP      r0,#0
000026  d105              BNE      |L156.52|
;;;157            TM_Counter_Config(TMx, 0, TM_TMBaseInitStruct->TM_Period);
000028  8922              LDRH     r2,[r4,#8]
00002a  2100              MOVS     r1,#0
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       TM_Counter_Config
000032  e004              B        |L156.62|
                  |L156.52|
;;;158        else
;;;159            TM_Counter_Config(TMx, TM_TMBaseInitStruct->TM_Period, TM_TMBaseInitStruct->TM_Period);
000034  8922              LDRH     r2,[r4,#8]
000036  4611              MOV      r1,r2
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       TM_Counter_Config
                  |L156.62|
;;;160        
;;;161        // counter operation mode (Full Counter/Cascade/Separate)
;;;162        TM_TimerMode_Select(TMx, TM_TMBaseInitStruct->TM_CounterMode);
00003e  7821              LDRB     r1,[r4,#0]
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       TM_TimerMode_Select
;;;163        
;;;164        // clock source (TM_CK_INT or TM_CK_EXT)
;;;165        TM_CounterClock_Select(TMx, TM_TMBaseInitStruct->TM_MainClockSource);
000046  78e1              LDRB     r1,[r4,#3]
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       TM_CounterClock_Select
;;;166        TM_PrescalerClock_Select(TMx, TM_TMBaseInitStruct->TM_2ndClockSource);
00004e  7921              LDRB     r1,[r4,#4]
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       TM_PrescalerClock_Select
;;;167        
;;;168        TM_SetInternalClockDivider(TMx, TM_TMBaseInitStruct->TM_IntClockDivision);
000056  7961              LDRB     r1,[r4,#5]
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       TM_SetInternalClockDivider
;;;169        
;;;170        // setting main/prescaler counter direction
;;;171        TM_SetCounterDirection(TMx, TM_TMBaseInitStruct->TM_MainClockDirection);
00005e  7861              LDRB     r1,[r4,#1]
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       TM_SetCounterDirection
;;;172        TM_SetPrescalerDirection(TMx, TM_TMBaseInitStruct->TM_2ndClockDirection);
000066  78a1              LDRB     r1,[r4,#2]
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       TM_SetPrescalerDirection
;;;173    	
;;;174    }
00006e  bd30              POP      {r4,r5,pc}
;;;175    ///@}
                          ENDP


                          AREA ||i.TM_TimerMode_Select||, CODE, READONLY, ALIGN=1

                  TM_TimerMode_Select PROC
;;;344     */
;;;345    void TM_TimerMode_Select(TM_Struct* TMx, TM_CounterModeDef TM_TimerMode)
000000  b510              PUSH     {r4,lr}
;;;346    {
;;;347        TMx->CR0.MBIT.MDS = TM_TimerMode;
000002  7c02              LDRB     r2,[r0,#0x10]
000004  2330              MOVS     r3,#0x30
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2430              MOVS     r4,#0x30
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7402              STRB     r2,[r0,#0x10]
;;;348    }
000012  bd10              POP      {r4,pc}
;;;349    ///@}
                          ENDP


                          AREA ||i.TM_Timer_Cmd||, CODE, READONLY, ALIGN=1

                  TM_Timer_Cmd PROC
;;;644     */
;;;645    void TM_Timer_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;646    {
;;;647        if (NewState == ENABLE)
000002  d104              BNE      |L158.14|
;;;648            TMx->CR0.B[0] |= TM_CR0_EN_enable_b0 | TM_CR0_EN2_enable_b0;
000004  7c02              LDRB     r2,[r0,#0x10]
000006  2303              MOVS     r3,#3
000008  431a              ORRS     r2,r2,r3
00000a  7402              STRB     r2,[r0,#0x10]
00000c  e003              B        |L158.22|
                  |L158.14|
;;;649        else
;;;650            TMx->CR0.B[0] &= ~(TM_CR0_EN_mask_b0 | TM_CR0_EN2_mask_b0);
00000e  7c02              LDRB     r2,[r0,#0x10]
000010  0892              LSRS     r2,r2,#2
000012  0092              LSLS     r2,r2,#2
000014  7402              STRB     r2,[r0,#0x10]
                  |L158.22|
;;;651    }
000016  4770              BX       lr
;;;652    ///@}
                          ENDP


                          AREA ||i.TM_TriggerSource_Select||, CODE, READONLY, ALIGN=1

                  TM_TriggerSource_Select PROC
;;;762     */
;;;763    void TM_TriggerSource_Select(TM_Struct* TMx, TM_TRGITrgSourceDef TRGISel)
000000  b510              PUSH     {r4,lr}
;;;764    {
;;;765        TMx->TRG.MBIT.TRG_MUX = TRGISel;
000002  7b02              LDRB     r2,[r0,#0xc]
000004  23c0              MOVS     r3,#0xc0
000006  439a              BICS     r2,r2,r3
000008  018b              LSLS     r3,r1,#6
00000a  24c0              MOVS     r4,#0xc0
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7302              STRB     r2,[r0,#0xc]
;;;766    }
000012  bd10              POP      {r4,pc}
;;;767    
                          ENDP


                          AREA ||i.TM_UEV_Cmd||, CODE, READONLY, ALIGN=1

                  TM_UEV_Cmd PROC
;;;3961    */
;;;3962   void TM_UEV_Cmd(TM_Struct* TMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;3963   {
;;;3964       if(NewState == DISABLE)
000002  d104              BNE      |L160.14|
;;;3965           TMx->CR0.B[1] |= TM_CR0_UEV_DIS_disable_b1;
000004  7c42              LDRB     r2,[r0,#0x11]
000006  2310              MOVS     r3,#0x10
000008  431a              ORRS     r2,r2,r3
00000a  7442              STRB     r2,[r0,#0x11]
00000c  e003              B        |L160.22|
                  |L160.14|
;;;3966       else
;;;3967           TMx->CR0.B[1] &= ~TM_CR0_UEV_DIS_disable_b1;
00000e  7c42              LDRB     r2,[r0,#0x11]
000010  2310              MOVS     r3,#0x10
000012  439a              BICS     r2,r2,r3
000014  7442              STRB     r2,[r0,#0x11]
                  |L160.22|
;;;3968   }
000016  4770              BX       lr
;;;3969   
                          ENDP


                          AREA ||i.TM_UEV_Config||, CODE, READONLY, ALIGN=1

                  TM_UEV_Config PROC
;;;838     */
;;;839    void TM_UEV_Config(TM_Struct* TMx, TM_UEVSrcDef UEVCon)
000000  b510              PUSH     {r4,lr}
;;;840    {
;;;841        TMx->TRG.MBIT.UEV_SEL = UEVCon;
000002  7b82              LDRB     r2,[r0,#0xe]
000004  23c0              MOVS     r3,#0xc0
000006  439a              BICS     r2,r2,r3
000008  018b              LSLS     r3,r1,#6
00000a  24c0              MOVS     r4,#0xc0
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7382              STRB     r2,[r0,#0xe]
;;;842    }
000012  bd10              POP      {r4,pc}
;;;843    
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_TM_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_MG32x02z_TM_DRV_c_2cab6ea7____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___17_MG32x02z_TM_DRV_c_2cab6ea7____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_MG32x02z_TM_DRV_c_2cab6ea7____REVSH|
#line 496
|__asm___17_MG32x02z_TM_DRV_c_2cab6ea7____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
