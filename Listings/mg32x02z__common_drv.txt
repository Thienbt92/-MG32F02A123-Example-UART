; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z__common_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z__common_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z__common_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z__Common_DRV.c]
                          THUMB

                          AREA ||i.Delay||, CODE, READONLY, ALIGN=1

                  Delay PROC
;;;129     */
;;;130    __weak void Delay(__IO uint32_t DelayTime)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;131    {
;;;132        uint32_t tickstart = GetTick();
000002  f7fffffe          BL       GetTick
000006  4605              MOV      r5,r0
;;;133        uint32_t wait = DelayTime;
000008  9c00              LDR      r4,[sp,#0]
;;;134      
;;;135        /* Add a period to guarantee minimum wait */
;;;136        if (wait < 0xFFFFFFFF)
00000a  1c60              ADDS     r0,r4,#1
00000c  2800              CMP      r0,#0
00000e  d000              BEQ      |L1.18|
;;;137        {
;;;138            wait++;
000010  1c64              ADDS     r4,r4,#1
                  |L1.18|
;;;139        }
;;;140      
;;;141        while((GetTick() - tickstart) < wait)
000012  bf00              NOP      
                  |L1.20|
000014  f7fffffe          BL       GetTick
000018  1b40              SUBS     r0,r0,r5
00001a  42a0              CMP      r0,r4
00001c  d3fa              BCC      |L1.20|
;;;142        {
;;;143        }
;;;144    }
00001e  bd38              POP      {r3-r5,pc}
;;;145    
                          ENDP


                          AREA ||i.GetTick||, CODE, READONLY, ALIGN=2

                  GetTick PROC
;;;109     */
;;;110    __weak uint32_t GetTick(void)
000000  4801              LDR      r0,|L2.8|
;;;111    {
;;;112      return uwTick;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
;;;113    }
000004  4770              BX       lr
;;;114    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      uwTick

                          AREA ||i.IncTick||, CODE, READONLY, ALIGN=2

                  IncTick PROC
;;;94      */
;;;95     __weak void IncTick(void)
000000  4802              LDR      r0,|L3.12|
;;;96     {
;;;97       uwTick++;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L3.12|
000008  6008              STR      r0,[r1,#0]  ; uwTick
;;;98     }
00000a  4770              BX       lr
;;;99     
                          ENDP

                  |L3.12|
                          DCD      uwTick

                          AREA ||i.InitTick||, CODE, READONLY, ALIGN=2

                  InitTick PROC
;;;67      */
;;;68     __weak DRV_Return InitTick(uint32_t TickClock, uint32_t TickPriority)
000000  b570              PUSH     {r4-r6,lr}
;;;69     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;70         /*Configure the SysTick to have interrupt in 1ms time basis*/
;;;71         // __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
;;;72         SysTick_Config(TickClock/1000U);
000006  217d              MOVS     r1,#0x7d
000008  00c9              LSLS     r1,r1,#3
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       __aeabi_uidivmod
000010  4604              MOV      r4,r0
000012  1e60              SUBS     r0,r4,#1
000014  490b              LDR      r1,|L4.68|
000016  4288              CMP      r0,r1
000018  d900              BLS      |L4.28|
00001a  e00c              B        |L4.54|
                  |L4.28|
00001c  1e60              SUBS     r0,r4,#1
00001e  490a              LDR      r1,|L4.72|
000020  6148              STR      r0,[r1,#0x14]
000022  2103              MOVS     r1,#3
000024  1f08              SUBS     r0,r1,#4
000026  f7fffffe          BL       __NVIC_SetPriority
00002a  2000              MOVS     r0,#0
00002c  4906              LDR      r1,|L4.72|
00002e  6188              STR      r0,[r1,#0x18]
000030  2007              MOVS     r0,#7
000032  6108              STR      r0,[r1,#0x10]
000034  bf00              NOP      
                  |L4.54|
;;;73     
;;;74         /*Configure the SysTick IRQ priority */
;;;75         //__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
;;;76         NVIC_SetPriority(SysTick_IRQn, TickPriority);
000036  4631              MOV      r1,r6
000038  2000              MOVS     r0,#0
00003a  43c0              MVNS     r0,r0
00003c  f7fffffe          BL       __NVIC_SetPriority
;;;77     
;;;78         /* Return function status */
;;;79         return DRV_Success;
000040  2000              MOVS     r0,#0
;;;80     }
000042  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

                  |L4.68|
                          DCD      0x00ffffff
                  |L4.72|
                          DCD      0xe000e000

                          AREA ||i.LockModuleReg||, CODE, READONLY, ALIGN=2

                  LockModuleReg PROC
;;;300     */
;;;301    DRV_Return LockModuleReg(Lock_Type Module)
000000  4601              MOV      r1,r0
;;;302    {
;;;303        *(uint16_t*)Module = 0x712A;
000002  4804              LDR      r0,|L5.20|
000004  8008              STRH     r0,[r1,#0]
;;;304    
;;;305        if(*(uint16_t*)Module == 0)
000006  8808              LDRH     r0,[r1,#0]
000008  2800              CMP      r0,#0
00000a  d101              BNE      |L5.16|
;;;306            return(DRV_Failure);
00000c  2001              MOVS     r0,#1
                  |L5.14|
;;;307        else
;;;308            return(DRV_Success);
;;;309    }
00000e  4770              BX       lr
                  |L5.16|
000010  2000              MOVS     r0,#0                 ;308
000012  e7fc              B        |L5.14|
;;;310    
                          ENDP

                  |L5.20|
                          DCD      0x0000712a

                          AREA ||i.ProtectModuleReg||, CODE, READONLY, ALIGN=1

                  ProtectModuleReg PROC
;;;222     */
;;;223    DRV_Return ProtectModuleReg (Protect_Type Module)
000000  4601              MOV      r1,r0
;;;224    {
;;;225        *(uint16_t*)Module = 0x0000;
000002  2000              MOVS     r0,#0
000004  8008              STRH     r0,[r1,#0]
;;;226    
;;;227        if(*(uint16_t*)Module == 0)
000006  8808              LDRH     r0,[r1,#0]
000008  2800              CMP      r0,#0
00000a  d101              BNE      |L6.16|
;;;228            return(DRV_Failure);
00000c  2001              MOVS     r0,#1
                  |L6.14|
;;;229        else
;;;230            return(DRV_Success);
;;;231    }
00000e  4770              BX       lr
                  |L6.16|
000010  2000              MOVS     r0,#0                 ;230
000012  e7fc              B        |L6.14|
;;;232    
                          ENDP


                          AREA ||i.ResumeTick||, CODE, READONLY, ALIGN=2

                  ResumeTick PROC
;;;180     */
;;;181    __weak void ResumeTick(void)
000000  4803              LDR      r0,|L7.16|
;;;182    {
;;;183        /* Enable SysTick Interrupt */
;;;184        SysTick->CTRL |= (SysTick_CTRL_TICKINT_Msk);
000002  6900              LDR      r0,[r0,#0x10]
000004  2102              MOVS     r1,#2
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L7.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;185    }
00000c  4770              BX       lr
;;;186    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0xe000e000

                          AREA ||i.SuspendTick||, CODE, READONLY, ALIGN=2

                  SuspendTick PROC
;;;159     */
;;;160    __weak void SuspendTick(void)
000000  4803              LDR      r0,|L8.16|
;;;161    
;;;162    {
;;;163        /* Disable SysTick Interrupt */
;;;164        SysTick->CTRL &= (~SysTick_CTRL_TICKINT_Msk);
000002  6900              LDR      r0,[r0,#0x10]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L8.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;165    }
00000c  4770              BX       lr
;;;166    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0xe000e000

                          AREA ||i.UnProtectModuleReg||, CODE, READONLY, ALIGN=2

                  UnProtectModuleReg PROC
;;;266     */
;;;267    DRV_Return UnProtectModuleReg(Protect_Type Module)
000000  4601              MOV      r1,r0
;;;268    {
;;;269        *(uint16_t*)Module = 0xA217;
000002  4804              LDR      r0,|L9.20|
000004  8008              STRH     r0,[r1,#0]
;;;270    
;;;271        if(*(uint16_t*)Module == 0)
000006  8808              LDRH     r0,[r1,#0]
000008  2800              CMP      r0,#0
00000a  d100              BNE      |L9.14|
                  |L9.12|
;;;272            return(DRV_Success);
;;;273        else
;;;274            return(DRV_Failure);
;;;275    }
00000c  4770              BX       lr
                  |L9.14|
00000e  2001              MOVS     r0,#1                 ;274
000010  e7fc              B        |L9.12|
;;;276    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x0000a217

                          AREA ||i.__NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  __NVIC_SetPriority PROC
;;;731     */
;;;732    __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;733    {
;;;734      if ((int32_t)(IRQn) >= 0)
000002  2800              CMP      r0,#0
000004  db19              BLT      |L10.58|
;;;735      {
;;;736        NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
000006  4a1a              LDR      r2,|L10.112|
000008  2303              MOVS     r3,#3
00000a  021b              LSLS     r3,r3,#8
00000c  18d2              ADDS     r2,r2,r3
00000e  0883              LSRS     r3,r0,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4b11              LDR      r3,|L10.112|
00002c  2403              MOVS     r4,#3
00002e  0224              LSLS     r4,r4,#8
000030  191b              ADDS     r3,r3,r4
000032  0884              LSRS     r4,r0,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L10.108|
                  |L10.58|
;;;737           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;738      }
;;;739      else
;;;740      {
;;;741        SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
00003a  4a0e              LDR      r2,|L10.116|
00003c  0703              LSLS     r3,r0,#28
00003e  0f1b              LSRS     r3,r3,#28
000040  3b08              SUBS     r3,r3,#8
000042  089b              LSRS     r3,r3,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b05              LDR      r3,|L10.116|
000060  0704              LSLS     r4,r0,#28
000062  0f24              LSRS     r4,r4,#28
000064  3c08              SUBS     r4,r4,#8
000066  08a4              LSRS     r4,r4,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L10.108|
;;;742           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;743      }
;;;744    }
00006c  bd10              POP      {r4,pc}
;;;745    
                          ENDP

00006e  0000              DCW      0x0000
                  |L10.112|
                          DCD      0xe000e100
                  |L10.116|
                          DCD      0xe000ed1c

                          AREA ||.data||, DATA, ALIGN=2

                  uwTick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z__Common_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_MG32x02z__Common_DRV_c_InitTick____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___22_MG32x02z__Common_DRV_c_InitTick____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_MG32x02z__Common_DRV_c_InitTick____REVSH|
#line 496
|__asm___22_MG32x02z__Common_DRV_c_InitTick____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
