; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_dma_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_dma_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_dma_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_DMA_DRV.c]
                          THUMB

                          AREA ||i.DMA_AutoIncreaseDestinationAddress||, CODE, READONLY, ALIGN=1

                  DMA_AutoIncreaseDestinationAddress PROC
;;;571     */
;;;572    void DMA_AutoIncreaseDestinationAddress(DMAChannel_Struct* DMAChx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;573    {
;;;574        DMAChx->B.MBIT.DINC = NewState;
000002  7982              LDRB     r2,[r0,#6]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7182              STRB     r2,[r0,#6]
;;;575    }
000012  bd10              POP      {r4,pc}
;;;576    
                          ENDP


                          AREA ||i.DMA_AutoIncreaseSourceAddress||, CODE, READONLY, ALIGN=1

                  DMA_AutoIncreaseSourceAddress PROC
;;;593     */
;;;594    void DMA_AutoIncreaseSourceAddress(DMAChannel_Struct* DMAChx, FunctionalState NewState)
000000  7982              LDRB     r2,[r0,#6]
;;;595    {
;;;596        DMAChx->B.MBIT.SINC = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7182              STRB     r2,[r0,#6]
;;;597    }
00000e  4770              BX       lr
;;;598    
                          ENDP


                          AREA ||i.DMA_BaseInitStructure_Init||, CODE, READONLY, ALIGN=2

                  DMA_BaseInitStructure_Init PROC
;;;129     */
;;;130     void DMA_BaseInitStructure_Init(DMA_BaseInitTypeDef* DMA_BaseInitStruct)
000000  2100              MOVS     r1,#0
;;;131    {
;;;132        // external trigger pin and mode config
;;;133        DMA_BaseInitStruct->ExtTrgPin = DMA_ExtTRG0;
000002  7001              STRB     r1,[r0,#0]
;;;134        DMA_BaseInitStruct->ExtTrgMode = DMA_DisableExtTrg;
000004  7041              STRB     r1,[r0,#1]
;;;135        
;;;136        // DMA channel select
;;;137        DMA_BaseInitStruct->DMAChx = DMAChannel0;
000006  4909              LDR      r1,|L3.44|
000008  6041              STR      r1,[r0,#4]
;;;138        
;;;139        // channel x loop mode config
;;;140        DMA_BaseInitStruct->DMALoopCmd = DISABLE;
00000a  2100              MOVS     r1,#0
00000c  7201              STRB     r1,[r0,#8]
;;;141        
;;;142        // channel x source/destination auto increase address
;;;143        DMA_BaseInitStruct->SrcSINCSel = ENABLE;
00000e  2101              MOVS     r1,#1
000010  7241              STRB     r1,[r0,#9]
;;;144        DMA_BaseInitStruct->DestDINCSel = ENABLE;
000012  7281              STRB     r1,[r0,#0xa]
;;;145        
;;;146        // DMA source peripheral config
;;;147        DMA_BaseInitStruct->SrcSymSel = DMA_MEM_Read;
000014  2100              MOVS     r1,#0
000016  72c1              STRB     r1,[r0,#0xb]
;;;148        
;;;149        // DMA destination peripheral config
;;;150        DMA_BaseInitStruct->DestSymSel = DMA_MEM_Write;
000018  7301              STRB     r1,[r0,#0xc]
;;;151        
;;;152        // DMA Burst size config
;;;153        DMA_BaseInitStruct->BurstDataSize = DMA_BurstSize_1Byte;
00001a  7341              STRB     r1,[r0,#0xd]
;;;154        
;;;155        // DMA transfer data count initial number
;;;156        DMA_BaseInitStruct->DMATransferNUM = 10;
00001c  210a              MOVS     r1,#0xa
00001e  6101              STR      r1,[r0,#0x10]
;;;157        
;;;158        // source/destination config
;;;159        DMA_BaseInitStruct->DMASourceAddr = (void*) 0x20000000;
000020  2101              MOVS     r1,#1
000022  0749              LSLS     r1,r1,#29
000024  6141              STR      r1,[r0,#0x14]
;;;160        DMA_BaseInitStruct->DMADestinationAddr = (void*) (0x20000000+10);
000026  4902              LDR      r1,|L3.48|
000028  6181              STR      r1,[r0,#0x18]
;;;161        
;;;162    }
00002a  4770              BX       lr
;;;163    
                          ENDP

                  |L3.44|
                          DCD      0x4bf00020
                  |L3.48|
                          DCD      0x2000000a

                          AREA ||i.DMA_Base_Init||, CODE, READONLY, ALIGN=1

                  DMA_Base_Init PROC
;;;178     */
;;;179    void DMA_Base_Init(DMA_BaseInitTypeDef* DMA_BaseInitStruct)
000000  b510              PUSH     {r4,lr}
;;;180    {
000002  4604              MOV      r4,r0
;;;181        // external trigger pin and mode config
;;;182        DMA_SetExtTriggerPin(DMA_BaseInitStruct->DMAChx, DMA_BaseInitStruct->ExtTrgPin);
000004  7821              LDRB     r1,[r4,#0]
000006  6860              LDR      r0,[r4,#4]
000008  f7fffffe          BL       DMA_SetExtTriggerPin
;;;183        DMA_SetExtTriggerMode(DMA_BaseInitStruct->DMAChx, DMA_BaseInitStruct->ExtTrgMode);
00000c  7861              LDRB     r1,[r4,#1]
00000e  6860              LDR      r0,[r4,#4]
000010  f7fffffe          BL       DMA_SetExtTriggerMode
;;;184        
;;;185        // channel x loop mode config
;;;186        DMA_LoopMode_Cmd(DMA_BaseInitStruct->DMAChx, DMA_BaseInitStruct->DMALoopCmd);
000014  7a21              LDRB     r1,[r4,#8]
000016  6860              LDR      r0,[r4,#4]
000018  f7fffffe          BL       DMA_LoopMode_Cmd
;;;187        
;;;188        // channel x source/destination auto increase address
;;;189        DMA_AutoIncreaseSourceAddress(DMA_BaseInitStruct->DMAChx, DMA_BaseInitStruct->SrcSINCSel);
00001c  7a61              LDRB     r1,[r4,#9]
00001e  6860              LDR      r0,[r4,#4]
000020  f7fffffe          BL       DMA_AutoIncreaseSourceAddress
;;;190        DMA_AutoIncreaseDestinationAddress(DMA_BaseInitStruct->DMAChx, DMA_BaseInitStruct->DestDINCSel);
000024  7aa1              LDRB     r1,[r4,#0xa]
000026  6860              LDR      r0,[r4,#4]
000028  f7fffffe          BL       DMA_AutoIncreaseDestinationAddress
;;;191        
;;;192        // DMA source peripheral config
;;;193        DMA_Source_Select(DMA_BaseInitStruct->DMAChx, DMA_BaseInitStruct->SrcSymSel);
00002c  7ae1              LDRB     r1,[r4,#0xb]
00002e  6860              LDR      r0,[r4,#4]
000030  f7fffffe          BL       DMA_Source_Select
;;;194        
;;;195        // DMA destination peripheral config
;;;196        DMA_Destination_Select(DMA_BaseInitStruct->DMAChx, DMA_BaseInitStruct->DestSymSel);
000034  7b21              LDRB     r1,[r4,#0xc]
000036  6860              LDR      r0,[r4,#4]
000038  f7fffffe          BL       DMA_Destination_Select
;;;197        
;;;198        // DMA Burst size config
;;;199        DMA_SetBurstSize(DMA_BaseInitStruct->DMAChx, DMA_BaseInitStruct->BurstDataSize);
00003c  7b61              LDRB     r1,[r4,#0xd]
00003e  6860              LDR      r0,[r4,#4]
000040  f7fffffe          BL       DMA_SetBurstSize
;;;200        
;;;201        // DMA transfer data count initial number
;;;202        DMA_SetTransferDataNumber(DMA_BaseInitStruct->DMAChx, DMA_BaseInitStruct->DMATransferNUM);
000044  6921              LDR      r1,[r4,#0x10]
000046  6860              LDR      r0,[r4,#4]
000048  f7fffffe          BL       DMA_SetTransferDataNumber
;;;203        
;;;204        // source/destination config
;;;205        if (DMA_BaseInitStruct->SrcSymSel == DMA_MEM_Read)
00004c  7ae0              LDRB     r0,[r4,#0xb]
00004e  2800              CMP      r0,#0
000050  d103              BNE      |L4.90|
;;;206            DMA_SetSourceAddress(DMA_BaseInitStruct->DMAChx, DMA_BaseInitStruct->DMASourceAddr);
000052  6961              LDR      r1,[r4,#0x14]
000054  6860              LDR      r0,[r4,#4]
000056  f7fffffe          BL       DMA_SetSourceAddress
                  |L4.90|
;;;207        if (DMA_BaseInitStruct->DestSymSel == DMA_MEM_Write)
00005a  7b20              LDRB     r0,[r4,#0xc]
00005c  2800              CMP      r0,#0
00005e  d103              BNE      |L4.104|
;;;208            DMA_SetDestinationAddress(DMA_BaseInitStruct->DMAChx, DMA_BaseInitStruct->DMADestinationAddr);
000060  69a1              LDR      r1,[r4,#0x18]
000062  6860              LDR      r0,[r4,#4]
000064  f7fffffe          BL       DMA_SetDestinationAddress
                  |L4.104|
;;;209        
;;;210    }
000068  bd10              POP      {r4,pc}
;;;211    ///@}
                          ENDP


                          AREA ||i.DMA_Channel_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Channel_Cmd PROC
;;;381     */
;;;382    void DMA_Channel_Cmd(DMAChannel_Struct* DMAChx, FunctionalState NewState)
000000  7802              LDRB     r2,[r0,#0]
;;;383    {
;;;384        DMAChx->A.MBIT.EN = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7002              STRB     r2,[r0,#0]
;;;385    }
00000e  4770              BX       lr
;;;386    
                          ENDP


                          AREA ||i.DMA_ClearChannelFlag||, CODE, READONLY, ALIGN=1

                  DMA_ClearChannelFlag PROC
;;;1051    */
;;;1052   void DMA_ClearChannelFlag(DMAChannel_Struct* DMAChx, DMA_ChannelFlagDef DMA_ChxITSrc)
000000  70c1              STRB     r1,[r0,#3]
;;;1053   {
;;;1054       DMAChx->A.B[3] = DMA_ChxITSrc;
;;;1055   }
000002  4770              BX       lr
;;;1056   ///@}
                          ENDP


                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=1

                  DMA_ClearFlag PROC
;;;992     */
;;;993    void DMA_ClearFlag(DMA_Struct* DMAx, uint32_t DMA_ITSrc)
000000  6001              STR      r1,[r0,#0]
;;;994    {
;;;995        DMAx->STA.W = DMA_ITSrc;
;;;996    }
000002  4770              BX       lr
;;;997    
                          ENDP


                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=2

                  DMA_Cmd PROC
;;;232     */
;;;233    void DMA_Cmd(FunctionalState NewState)
000000  4904              LDR      r1,|L8.20|
;;;234    {
;;;235        DMA->CR0.MBIT.EN = NewState;
000002  7c09              LDRB     r1,[r1,#0x10]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  07c2              LSLS     r2,r0,#31
00000a  0fd2              LSRS     r2,r2,#31
00000c  4311              ORRS     r1,r1,r2
00000e  4a01              LDR      r2,|L8.20|
000010  7411              STRB     r1,[r2,#0x10]
;;;236    
;;;237    }
000012  4770              BX       lr
;;;238    ///@}
                          ENDP

                  |L8.20|
                          DCD      0x4bf00000

                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=1

                  DMA_DeInit PROC
;;;58      */
;;;59     void DMA_DeInit(DMA_Struct* DMAx)
000000  2100              MOVS     r1,#0
;;;60     {
;;;61         // interrupt
;;;62         DMAx->INT.W = 0x00000000;
000002  6041              STR      r1,[r0,#4]
;;;63         
;;;64         // channel 0
;;;65         DMAx->CH0A.W = 0x00000000;
000004  6201              STR      r1,[r0,#0x20]
;;;66         DMAx->CH0B.W = 0x00030000;
000006  2103              MOVS     r1,#3
000008  0409              LSLS     r1,r1,#16
00000a  6241              STR      r1,[r0,#0x24]
;;;67         DMAx->CH0NUM.W = 0x00000000;
00000c  2100              MOVS     r1,#0
00000e  6281              STR      r1,[r0,#0x28]
;;;68         DMAx->CH0SSA.W = 0x00000000;
000010  6301              STR      r1,[r0,#0x30]
;;;69         DMAx->CH0DSA.W = 0x00000000;
000012  6381              STR      r1,[r0,#0x38]
;;;70         
;;;71     #if defined(MG32_1ST) || defined(MG32_3RD)
;;;72         // channel 1
;;;73         DMAx->CH1A.W = 0x00000000;
000014  6401              STR      r1,[r0,#0x40]
;;;74         DMAx->CH1B.W = 0x00030000;
000016  2103              MOVS     r1,#3
000018  0409              LSLS     r1,r1,#16
00001a  6441              STR      r1,[r0,#0x44]
;;;75         DMAx->CH1NUM.W = 0x00000000;
00001c  2100              MOVS     r1,#0
00001e  6481              STR      r1,[r0,#0x48]
;;;76         DMAx->CH1SSA.W = 0x00000000;
000020  6501              STR      r1,[r0,#0x50]
;;;77         DMAx->CH1DSA.W = 0x00000000;
000022  6581              STR      r1,[r0,#0x58]
;;;78         
;;;79         // channel 2
;;;80         DMAx->CH2A.W = 0x00000000;
000024  6601              STR      r1,[r0,#0x60]
;;;81         DMAx->CH2B.W = 0x00030000;
000026  2103              MOVS     r1,#3
000028  0409              LSLS     r1,r1,#16
00002a  6641              STR      r1,[r0,#0x64]
;;;82         DMAx->CH2NUM.W = 0x00000000;
00002c  2100              MOVS     r1,#0
00002e  6681              STR      r1,[r0,#0x68]
;;;83         DMAx->CH2SSA.W = 0x00000000;
000030  6701              STR      r1,[r0,#0x70]
;;;84         DMAx->CH2DSA.W = 0x00000000;
000032  6781              STR      r1,[r0,#0x78]
;;;85     #endif
;;;86     
;;;87     #if defined(MG32_3RD)
;;;88         // channel 3
;;;89         DMAx->CH3A.W = 0x00000000;
;;;90         DMAx->CH3B.W = 0x00030000;
;;;91         DMAx->CH3NUM.W = 0x00000000;
;;;92         DMAx->CH3SSA.W = 0x00000000;
;;;93         DMAx->CH3DSA.W = 0x00000000;
;;;94         
;;;95         // channel 4
;;;96         DMAx->CH4A.W = 0x00000000;
;;;97         DMAx->CH4B.W = 0x00030000;
;;;98         DMAx->CH4NUM.W = 0x00000000;
;;;99         DMAx->CH4SSA.W = 0x00000000;
;;;100        DMAx->CH4DSA.W = 0x00000000;
;;;101    
;;;102    #endif
;;;103        
;;;104        // Global control
;;;105        DMAx->CR0.W = 0x00000000;
000034  6101              STR      r1,[r0,#0x10]
;;;106        DMAx->STA.W = 0xFFFFFFFF;
000036  1e49              SUBS     r1,r1,#1
000038  6001              STR      r1,[r0,#0]
;;;107    }
00003a  4770              BX       lr
;;;108    ///@}
                          ENDP


                          AREA ||i.DMA_Destination_Select||, CODE, READONLY, ALIGN=1

                  DMA_Destination_Select PROC
;;;626     */
;;;627    void DMA_Destination_Select(DMAChannel_Struct* DMAChx, DMA_DestinationRequestDef DestinationMacroSel)
000000  7942              LDRB     r2,[r0,#5]
;;;628    {
;;;629        DMAChx->B.MBIT.DET = DestinationMacroSel;
000002  0912              LSRS     r2,r2,#4
000004  0112              LSLS     r2,r2,#4
000006  070b              LSLS     r3,r1,#28
000008  0f1b              LSRS     r3,r3,#28
00000a  431a              ORRS     r2,r2,r3
00000c  7142              STRB     r2,[r0,#5]
;;;630    }
00000e  4770              BX       lr
;;;631    
                          ENDP


                          AREA ||i.DMA_GetAllFlagStatus||, CODE, READONLY, ALIGN=1

                  DMA_GetAllFlagStatus PROC
;;;952     */
;;;953    uint32_t DMA_GetAllFlagStatus(DMA_Struct* DMAx)
000000  4601              MOV      r1,r0
;;;954    {
;;;955        return DMAx->STA.W;
000002  6808              LDR      r0,[r1,#0]
;;;956    }
000004  4770              BX       lr
;;;957    
                          ENDP


                          AREA ||i.DMA_GetCHxUseGPL||, CODE, READONLY, ALIGN=1

                  DMA_GetCHxUseGPL PROC
;;;287     */
;;;288    DMA_DataWithGPLDef DMA_GetCHxUseGPL(DMA_Struct* DMAx)
000000  4601              MOV      r1,r0
;;;289    {
;;;290        return (DMA_DataWithGPLDef) DMAx->CR0.MBIT.GPL_CHS;
000002  7c08              LDRB     r0,[r1,#0x10]
000004  0680              LSLS     r0,r0,#26
000006  0f80              LSRS     r0,r0,#30
;;;291    }
000008  4770              BX       lr
;;;292    
                          ENDP


                          AREA ||i.DMA_GetChannelFlag||, CODE, READONLY, ALIGN=1

                  DMA_GetChannelFlag PROC
;;;1021    */
;;;1022   DRV_Return DMA_GetChannelFlag(DMAChannel_Struct* DMAChx, DMA_ChannelFlagDef DMA_ChxITSrc)
000000  4602              MOV      r2,r0
;;;1023   {
;;;1024       if (DMAChx->A.B[3] & DMA_ChxITSrc)
000002  78d0              LDRB     r0,[r2,#3]
000004  4008              ANDS     r0,r0,r1
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L13.14|
;;;1025           return DRV_Happened;
00000a  2001              MOVS     r0,#1
                  |L13.12|
;;;1026       else 
;;;1027           return DRV_UnHappened;
;;;1028       
;;;1029   }
00000c  4770              BX       lr
                  |L13.14|
00000e  2000              MOVS     r0,#0                 ;1027
000010  e7fc              B        |L13.12|
;;;1030   
                          ENDP


                          AREA ||i.DMA_GetCurrentDestinationAddress||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrentDestinationAddress PROC
;;;734     */
;;;735    uint32_t* DMA_GetCurrentDestinationAddress(DMAChannel_Struct* DMAChx)
000000  4601              MOV      r1,r0
;;;736    {
;;;737        return (uint32_t*) DMAChx->DCA.W;
000002  69c8              LDR      r0,[r1,#0x1c]
;;;738    }
000004  4770              BX       lr
;;;739    
                          ENDP


                          AREA ||i.DMA_GetCurrentSourceAddress||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrentSourceAddress PROC
;;;715     */
;;;716    uint32_t* DMA_GetCurrentSourceAddress(DMAChannel_Struct* DMAChx)
000000  4601              MOV      r1,r0
;;;717    {
;;;718        return (uint32_t*) DMAChx->SCA.W;
000002  6948              LDR      r0,[r1,#0x14]
;;;719    }
000004  4770              BX       lr
;;;720    
                          ENDP


                          AREA ||i.DMA_GetRemainDataCount||, CODE, READONLY, ALIGN=1

                  DMA_GetRemainDataCount PROC
;;;777     */
;;;778    uint32_t DMA_GetRemainDataCount(DMAChannel_Struct* DMAChx)
000000  4601              MOV      r1,r0
;;;779    {
;;;780        return DMAChx->CNT.W;
000002  68c8              LDR      r0,[r1,#0xc]
;;;781    }
000004  4770              BX       lr
;;;782    
                          ENDP


                          AREA ||i.DMA_GetSingleFlagStatus||, CODE, READONLY, ALIGN=1

                  DMA_GetSingleFlagStatus PROC
;;;930     */
;;;931    DRV_Return DMA_GetSingleFlagStatus(DMA_Struct* DMAx, uint32_t DMA_ITSrc)
000000  4602              MOV      r2,r0
;;;932    {
;;;933        if (DMAx->STA.W & DMA_ITSrc)
000002  6810              LDR      r0,[r2,#0]
000004  4008              ANDS     r0,r0,r1
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L17.14|
;;;934            return DRV_Happened;
00000a  2001              MOVS     r0,#1
                  |L17.12|
;;;935        else 
;;;936            return DRV_UnHappened;
;;;937        
;;;938    }
00000c  4770              BX       lr
                  |L17.14|
00000e  2000              MOVS     r0,#0                 ;936
000010  e7fc              B        |L17.12|
;;;939    
                          ENDP


                          AREA ||i.DMA_Hold_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Hold_Cmd PROC
;;;499     */
;;;500    void DMA_Hold_Cmd(DMAChannel_Struct* DMAChx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;501    {
;;;502        DMAChx->A.MBIT.HOLD = NewState;
000002  7802              LDRB     r2,[r0,#0]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7002              STRB     r2,[r0,#0]
;;;503    }
000012  bd10              POP      {r4,pc}
;;;504    
                          ENDP


                          AREA ||i.DMA_ITEA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_ITEA_Cmd PROC
;;;888     */
;;;889    void DMA_ITEA_Cmd(DMA_Struct* DMAx, FunctionalState NewState)
000000  7902              LDRB     r2,[r0,#4]
;;;890    {
;;;891        DMAx->INT.MBIT.IEA = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7102              STRB     r2,[r0,#4]
;;;892    }
00000e  4770              BX       lr
;;;893    
                          ENDP


                          AREA ||i.DMA_IT_Config||, CODE, READONLY, ALIGN=1

                  DMA_IT_Config PROC
;;;865     */
;;;866    void DMA_IT_Config(DMAChannel_Struct* DMAChx, uint32_t DMA_ITSrc, FunctionalState NewState)
000000  2a01              CMP      r2,#1
;;;867    {
;;;868        if (NewState == ENABLE)
000002  d103              BNE      |L20.12|
;;;869            DMAChx->A.B[2] |= DMA_ITSrc;
000004  7883              LDRB     r3,[r0,#2]
000006  430b              ORRS     r3,r3,r1
000008  7083              STRB     r3,[r0,#2]
00000a  e002              B        |L20.18|
                  |L20.12|
;;;870        else
;;;871            DMAChx->A.B[2] &= ~DMA_ITSrc;
00000c  7883              LDRB     r3,[r0,#2]
00000e  438b              BICS     r3,r3,r1
000010  7083              STRB     r3,[r0,#2]
                  |L20.18|
;;;872    }
000012  4770              BX       lr
;;;873    
                          ENDP


                          AREA ||i.DMA_LastCycle_Cmd||, CODE, READONLY, ALIGN=2

                  DMA_LastCycle_Cmd PROC
;;;458     */
;;;459    void DMA_LastCycle_Cmd(DMAChannel_Struct* DMAChx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;460    {
;;;461    #if defined(MG32_1ST)
;;;462        if(DMAChx == DMAChannel0)
000002  4a15              LDR      r2,|L21.88|
000004  4290              CMP      r0,r2
000006  d109              BNE      |L21.28|
;;;463            SYS->CR0.MBIT.CH0_LAST = NewState;
000008  4a14              LDR      r2,|L21.92|
00000a  7c92              LDRB     r2,[r2,#0x12]
00000c  0852              LSRS     r2,r2,#1
00000e  0052              LSLS     r2,r2,#1
000010  07cb              LSLS     r3,r1,#31
000012  0fdb              LSRS     r3,r3,#31
000014  431a              ORRS     r2,r2,r3
000016  4b11              LDR      r3,|L21.92|
000018  749a              STRB     r2,[r3,#0x12]
00001a  e01c              B        |L21.86|
                  |L21.28|
;;;464        else if (DMAChx == DMAChannel1)
00001c  4a0e              LDR      r2,|L21.88|
00001e  3220              ADDS     r2,r2,#0x20
000020  4290              CMP      r0,r2
000022  d10a              BNE      |L21.58|
;;;465            SYS->CR0.MBIT.CH1_LAST = NewState;
000024  4a0d              LDR      r2,|L21.92|
000026  7c92              LDRB     r2,[r2,#0x12]
000028  2302              MOVS     r3,#2
00002a  439a              BICS     r2,r2,r3
00002c  004b              LSLS     r3,r1,#1
00002e  2402              MOVS     r4,#2
000030  4023              ANDS     r3,r3,r4
000032  431a              ORRS     r2,r2,r3
000034  4b09              LDR      r3,|L21.92|
000036  749a              STRB     r2,[r3,#0x12]
000038  e00d              B        |L21.86|
                  |L21.58|
;;;466        else if (DMAChx == DMAChannel2)
00003a  4a07              LDR      r2,|L21.88|
00003c  3240              ADDS     r2,r2,#0x40
00003e  4290              CMP      r0,r2
000040  d109              BNE      |L21.86|
;;;467            SYS->CR0.MBIT.CH2_LAST = NewState;
000042  4a06              LDR      r2,|L21.92|
000044  7c92              LDRB     r2,[r2,#0x12]
000046  2304              MOVS     r3,#4
000048  439a              BICS     r2,r2,r3
00004a  008b              LSLS     r3,r1,#2
00004c  2404              MOVS     r4,#4
00004e  4023              ANDS     r3,r3,r4
000050  431a              ORRS     r2,r2,r3
000052  4b02              LDR      r3,|L21.92|
000054  749a              STRB     r2,[r3,#0x12]
                  |L21.86|
;;;468        
;;;469        return;
;;;470    #endif
;;;471    #if defined(MG32_2ND) || defined(MG32_3RD)
;;;472        DMAChx->A.MBIT.LAST = NewState;
;;;473        return;
;;;474    #endif
;;;475    }
000056  bd10              POP      {r4,pc}
;;;476    
                          ENDP

                  |L21.88|
                          DCD      0x4bf00020
                  |L21.92|
                          DCD      0x4c030000

                          AREA ||i.DMA_LoopMode_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_LoopMode_Cmd PROC
;;;425     */
;;;426    void DMA_LoopMode_Cmd(DMAChannel_Struct* DMAChx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;427    {
;;;428        DMAChx->A.MBIT.LOOP = NewState;
000002  7802              LDRB     r2,[r0,#0]
000004  2304              MOVS     r3,#4
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  2404              MOVS     r4,#4
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7002              STRB     r2,[r0,#0]
;;;429    }
000012  bd10              POP      {r4,pc}
;;;430    
                          ENDP


                          AREA ||i.DMA_PriorityMode_Select||, CODE, READONLY, ALIGN=1

                  DMA_PriorityMode_Select PROC
;;;307     */
;;;308    void DMA_PriorityMode_Select(DMA_Struct* DMAx, DMA_PriorityModeDef DMAPriorityModeSel)
000000  b510              PUSH     {r4,lr}
;;;309    {
;;;310    #if defined(MG32_1ST) || defined(MG32_3RD)
;;;311        DMAx->CR0.MBIT.PRI_MDS = DMAPriorityModeSel;
000002  7c02              LDRB     r2,[r0,#0x10]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7402              STRB     r2,[r0,#0x10]
;;;312    #endif
;;;313    }
000012  bd10              POP      {r4,pc}
;;;314    
                          ENDP


                          AREA ||i.DMA_SetBurstSize||, CODE, READONLY, ALIGN=1

                  DMA_SetBurstSize PROC
;;;404     */
;;;405    void DMA_SetBurstSize(DMAChannel_Struct* DMAChx, DMA_BurstSizeDef BurstSizeSel)
000000  b510              PUSH     {r4,lr}
;;;406    {
;;;407        DMAChx->A.MBIT.BSIZE = BurstSizeSel;
000002  7842              LDRB     r2,[r0,#1]
000004  2330              MOVS     r3,#0x30
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2430              MOVS     r4,#0x30
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7042              STRB     r2,[r0,#1]
;;;408    }
000012  bd10              POP      {r4,pc}
;;;409    
                          ENDP


                          AREA ||i.DMA_SetChxSKIP3Mode||, CODE, READONLY, ALIGN=1

                  DMA_SetChxSKIP3Mode PROC
;;;832     */
;;;833    void DMA_SetChxSKIP3Mode(DMAChannel_Struct* DMAChx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;834    {
;;;835        DMAChx->A.MBIT.ADSEL = NewState;
000002  7802              LDRB     r2,[r0,#0]
000004  2308              MOVS     r3,#8
000006  439a              BICS     r2,r2,r3
000008  00cb              LSLS     r3,r1,#3
00000a  2408              MOVS     r4,#8
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7002              STRB     r2,[r0,#0]
;;;836    }
000012  bd10              POP      {r4,pc}
;;;837    ///@}
                          ENDP


                          AREA ||i.DMA_SetDestinationAddress||, CODE, READONLY, ALIGN=1

                  DMA_SetDestinationAddress PROC
;;;676     */
;;;677    void DMA_SetDestinationAddress(DMAChannel_Struct* DMAChx, void* DestinationAddress)
000000  6181              STR      r1,[r0,#0x18]
;;;678    {
;;;679        DMAChx->DSA.W = (uint32_t) DestinationAddress;
;;;680    }
000002  4770              BX       lr
;;;681       
                          ENDP


                          AREA ||i.DMA_SetExtTriggerMode||, CODE, READONLY, ALIGN=1

                  DMA_SetExtTriggerMode PROC
;;;525     */
;;;526    void DMA_SetExtTriggerMode(DMAChannel_Struct* DMAChx, DMA_ExtTriggerModeDef DMAExtTrgSel)
000000  7842              LDRB     r2,[r0,#1]
;;;527    {
;;;528        DMAChx->A.MBIT.XMDS = DMAExtTrgSel;
000002  0892              LSRS     r2,r2,#2
000004  0092              LSLS     r2,r2,#2
000006  078b              LSLS     r3,r1,#30
000008  0f9b              LSRS     r3,r3,#30
00000a  431a              ORRS     r2,r2,r3
00000c  7042              STRB     r2,[r0,#1]
;;;529    }
00000e  4770              BX       lr
;;;530    
                          ENDP


                          AREA ||i.DMA_SetExtTriggerPin||, CODE, READONLY, ALIGN=1

                  DMA_SetExtTriggerPin PROC
;;;547     */
;;;548    void DMA_SetExtTriggerPin(DMAChannel_Struct* DMAChx, DMA_ExternTriggerPinDef DMAExtTrgPinSel)
000000  79c2              LDRB     r2,[r0,#7]
;;;549    {
;;;550    #if defined(MG32_1ST) || defined(MG32_3RD)
;;;551        DMAChx->B.MBIT.XPIN = DMAExtTrgPinSel;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  71c2              STRB     r2,[r0,#7]
;;;552    #endif
;;;553    }
00000e  4770              BX       lr
;;;554    
                          ENDP


                          AREA ||i.DMA_SetExtraGPLChannel||, CODE, READONLY, ALIGN=1

                  DMA_SetExtraGPLChannel PROC
;;;264     */
;;;265    void DMA_SetExtraGPLChannel(DMA_Struct* DMAx,DMA_DataWithGPLDef GPLChxSel)
000000  b510              PUSH     {r4,lr}
;;;266    {
;;;267        DMAx->CR0.MBIT.GPL_CHS = GPLChxSel;
000002  7c02              LDRB     r2,[r0,#0x10]
000004  2330              MOVS     r3,#0x30
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2430              MOVS     r4,#0x30
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7402              STRB     r2,[r0,#0x10]
;;;268    }
000012  bd10              POP      {r4,pc}
;;;269    
                          ENDP


                          AREA ||i.DMA_SetPriority||, CODE, READONLY, ALIGN=1

                  DMA_SetPriority PROC
;;;801     */
;;;802    void DMA_SetPriority(DMAChannel_Struct* DMAChx, DMA_LevelPriorityDef DMALevelSel)
000000  b510              PUSH     {r4,lr}
;;;803    {
;;;804    #if defined(MG32_1ST) || defined(MG32_3RD)
;;;805        DMAChx->A.MBIT.PLS = DMALevelSel;
000002  7842              LDRB     r2,[r0,#1]
000004  230c              MOVS     r3,#0xc
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  240c              MOVS     r4,#0xc
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7042              STRB     r2,[r0,#1]
;;;806    #endif
;;;807    }
000012  bd10              POP      {r4,pc}
;;;808    
                          ENDP


                          AREA ||i.DMA_SetSourceAddress||, CODE, READONLY, ALIGN=1

                  DMA_SetSourceAddress PROC
;;;696     */
;;;697    void DMA_SetSourceAddress(DMAChannel_Struct* DMAChx, void* SourceAddress)
000000  6101              STR      r1,[r0,#0x10]
;;;698    {
;;;699        DMAChx->SSA.W = (uint32_t) SourceAddress;
;;;700    }
000002  4770              BX       lr
;;;701    
                          ENDP


                          AREA ||i.DMA_SetTransferDataNumber||, CODE, READONLY, ALIGN=1

                  DMA_SetTransferDataNumber PROC
;;;756     */
;;;757    void DMA_SetTransferDataNumber(DMAChannel_Struct* DMAChx, uint32_t NumDatas)
000000  6081              STR      r1,[r0,#8]
;;;758    {
;;;759        DMAChx->NUM.W = NumDatas;
;;;760    }
000002  4770              BX       lr
;;;761    
                          ENDP


                          AREA ||i.DMA_Source_Select||, CODE, READONLY, ALIGN=1

                  DMA_Source_Select PROC
;;;656     */
;;;657    void DMA_Source_Select(DMAChannel_Struct* DMAChx, DMA_SourcenRequestDef SourceMacroSel)
000000  7902              LDRB     r2,[r0,#4]
;;;658    {
;;;659        DMAChx->B.MBIT.SRC = SourceMacroSel;
000002  0912              LSRS     r2,r2,#4
000004  0112              LSLS     r2,r2,#4
000006  070b              LSLS     r3,r1,#28
000008  0f1b              LSRS     r3,r3,#28
00000a  431a              ORRS     r2,r2,r3
00000c  7102              STRB     r2,[r0,#4]
;;;660    }
00000e  4770              BX       lr
;;;661    
                          ENDP


                          AREA ||i.DMA_StartRequest||, CODE, READONLY, ALIGN=1

                  DMA_StartRequest PROC
;;;358     */
;;;359    void DMA_StartRequest(DMAChannel_Struct* DMAChx)
000000  7841              LDRB     r1,[r0,#1]
;;;360    {
;;;361        DMAChx->A.MBIT.REQ = 1;
000002  2280              MOVS     r2,#0x80
000004  4391              BICS     r1,r1,r2
000006  3180              ADDS     r1,r1,#0x80
000008  7041              STRB     r1,[r0,#1]
;;;362    }
00000a  4770              BX       lr
;;;363    
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_DMA_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_DMA_DRV_c_e9b554c0____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_DMA_DRV_c_e9b554c0____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_DMA_DRV_c_e9b554c0____REVSH|
#line 496
|__asm___18_MG32x02z_DMA_DRV_c_e9b554c0____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
