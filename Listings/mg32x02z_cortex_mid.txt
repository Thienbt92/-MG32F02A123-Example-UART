; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_cortex_mid.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_cortex_mid.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_cortex_mid.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_cortex_MID.c]
                          THUMB

                          AREA ||i.MID_NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=2

                  MID_NVIC_ClearPendingIRQ PROC
;;;380     */
;;;381    void MID_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  4601              MOV      r1,r0
000002  2900              CMP      r1,#0
000004  db05              BLT      |L1.18|
000006  06cb              LSLS     r3,r1,#27
000008  0edb              LSRS     r3,r3,#27
00000a  2201              MOVS     r2,#1
00000c  409a              LSLS     r2,r2,r3
00000e  4b02              LDR      r3,|L1.24|
000010  601a              STR      r2,[r3,#0]
                  |L1.18|
000012  bf00              NOP      
;;;382    {
;;;383        /* Check the parameters */
;;;384        assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;385      
;;;386        /* Clear pending interrupt */
;;;387        NVIC_ClearPendingIRQ(IRQn);
;;;388    }
000014  4770              BX       lr
;;;389    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0xe000e280

                          AREA ||i.MID_NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  MID_NVIC_DisableIRQ PROC
;;;219     */
;;;220    void MID_NVIC_DisableIRQ(IRQn_Type IRQn)
000000  4601              MOV      r1,r0
000002  2900              CMP      r1,#0
000004  db09              BLT      |L2.26|
000006  06cb              LSLS     r3,r1,#27
000008  0edb              LSRS     r3,r3,#27
00000a  2201              MOVS     r2,#1
00000c  409a              LSLS     r2,r2,r3
00000e  4b04              LDR      r3,|L2.32|
000010  601a              STR      r2,[r3,#0]
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
                  |L2.26|
00001a  bf00              NOP      
;;;221    {
;;;222        /* Check the parameters */
;;;223        assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;224      
;;;225        /* Disable interrupt */
;;;226        NVIC_DisableIRQ(IRQn);
;;;227    }
00001c  4770              BX       lr
;;;228    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      0xe000e180

                          AREA ||i.MID_NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  MID_NVIC_EnableIRQ PROC
;;;195     */
;;;196    void MID_NVIC_EnableIRQ(IRQn_Type IRQn)
000000  4601              MOV      r1,r0
000002  2900              CMP      r1,#0
000004  db09              BLT      |L3.26|
000006  bf00              NOP      
000008  bf00              NOP      
00000a  06cb              LSLS     r3,r1,#27
00000c  0edb              LSRS     r3,r3,#27
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4b03              LDR      r3,|L3.32|
000014  601a              STR      r2,[r3,#0]
000016  bf00              NOP      
000018  bf00              NOP      
                  |L3.26|
00001a  bf00              NOP      
;;;197    {
;;;198        /* Check the parameters */
;;;199        assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;200      
;;;201        /* Enable interrupt */
;;;202        NVIC_EnableIRQ(IRQn);
;;;203    }
00001c  4770              BX       lr
;;;204    
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      0xe000e100

                          AREA ||i.MID_NVIC_GetPendingIRQ||, CODE, READONLY, ALIGN=2

                  MID_NVIC_GetPendingIRQ PROC
;;;356     */
;;;357    uint32_t MID_NVIC_GetPendingIRQ(IRQn_Type IRQn)
000000  b510              PUSH     {r4,lr}
;;;358    {
000002  4601              MOV      r1,r0
;;;359        /* Check the parameters */
;;;360        assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;361      
;;;362        /* Return 1 if pending else 0 */
;;;363        return NVIC_GetPendingIRQ(IRQn);
000004  4608              MOV      r0,r1
000006  2800              CMP      r0,#0
000008  db0c              BLT      |L4.36|
00000a  4a08              LDR      r2,|L4.44|
00000c  6812              LDR      r2,[r2,#0]
00000e  06c4              LSLS     r4,r0,#27
000010  0ee4              LSRS     r4,r4,#27
000012  2301              MOVS     r3,#1
000014  40a3              LSLS     r3,r3,r4
000016  401a              ANDS     r2,r2,r3
000018  2a00              CMP      r2,#0
00001a  d001              BEQ      |L4.32|
00001c  2201              MOVS     r2,#1
00001e  e002              B        |L4.38|
                  |L4.32|
000020  2200              MOVS     r2,#0
000022  e000              B        |L4.38|
                  |L4.36|
000024  2200              MOVS     r2,#0
                  |L4.38|
000026  4610              MOV      r0,r2
;;;364    }
000028  bd10              POP      {r4,pc}
;;;365    
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      0xe000e200

                          AREA ||i.MID_NVIC_GetPriority||, CODE, READONLY, ALIGN=2

                  MID_NVIC_GetPriority PROC
;;;309     */
;;;310    uint32_t MID_NVIC_GetPriority(IRQn_Type IRQn)
000000  4601              MOV      r1,r0
;;;311    {
;;;312        /* Get priority for Cortex-M system or device specific interrupts */
;;;313        return NVIC_GetPriority(IRQn);
000002  4608              MOV      r0,r1
000004  2800              CMP      r0,#0
000006  db0c              BLT      |L5.34|
000008  4a0d              LDR      r2,|L5.64|
00000a  2303              MOVS     r3,#3
00000c  021b              LSLS     r3,r3,#8
00000e  18d2              ADDS     r2,r2,r3
000010  0883              LSRS     r3,r0,#2
000012  009b              LSLS     r3,r3,#2
000014  58d2              LDR      r2,[r2,r3]
000016  0783              LSLS     r3,r0,#30
000018  0edb              LSRS     r3,r3,#27
00001a  40da              LSRS     r2,r2,r3
00001c  0612              LSLS     r2,r2,#24
00001e  0f92              LSRS     r2,r2,#30
000020  e00b              B        |L5.58|
                  |L5.34|
000022  4a08              LDR      r2,|L5.68|
000024  0703              LSLS     r3,r0,#28
000026  0f1b              LSRS     r3,r3,#28
000028  3b08              SUBS     r3,r3,#8
00002a  089b              LSRS     r3,r3,#2
00002c  009b              LSLS     r3,r3,#2
00002e  58d2              LDR      r2,[r2,r3]
000030  0783              LSLS     r3,r0,#30
000032  0edb              LSRS     r3,r3,#27
000034  40da              LSRS     r2,r2,r3
000036  0612              LSLS     r2,r2,#24
000038  0f92              LSRS     r2,r2,#30
                  |L5.58|
00003a  4610              MOV      r0,r2
;;;314    }
00003c  4770              BX       lr
;;;315    
                          ENDP

00003e  0000              DCW      0x0000
                  |L5.64|
                          DCD      0xe000e100
                  |L5.68|
                          DCD      0xe000ed1c

                          AREA ||i.MID_NVIC_SetPendingIRQ||, CODE, READONLY, ALIGN=2

                  MID_NVIC_SetPendingIRQ PROC
;;;330     */
;;;331    void MID_NVIC_SetPendingIRQ(IRQn_Type IRQn)
000000  4601              MOV      r1,r0
000002  2900              CMP      r1,#0
000004  db05              BLT      |L6.18|
000006  06cb              LSLS     r3,r1,#27
000008  0edb              LSRS     r3,r3,#27
00000a  2201              MOVS     r2,#1
00000c  409a              LSLS     r2,r2,r3
00000e  4b02              LDR      r3,|L6.24|
000010  601a              STR      r2,[r3,#0]
                  |L6.18|
000012  bf00              NOP      
;;;332    {
;;;333        /* Check the parameters */
;;;334        assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;335      
;;;336        /* Set interrupt pending */
;;;337        NVIC_SetPendingIRQ(IRQn);
;;;338    }
000014  4770              BX       lr
;;;339    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0xe000e200

                          AREA ||i.MID_NVIC_SetPriority||, CODE, READONLY, ALIGN=1

                  MID_NVIC_SetPriority PROC
;;;172     */
;;;173    void MID_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
000000  b570              PUSH     {r4-r6,lr}
;;;174    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;175        /* Check the parameters */
;;;176        assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
;;;177        NVIC_SetPriority(IRQn,PreemptPriority);
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __NVIC_SetPriority
;;;178    }
000010  bd70              POP      {r4-r6,pc}
;;;179    
                          ENDP


                          AREA ||i.MID_NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  MID_NVIC_SystemReset PROC
;;;244     */
;;;245    void MID_NVIC_SystemReset(void)
000000  bf00              NOP      
000002  f3bf8f4f          DSB      
000006  4804              LDR      r0,|L8.24|
000008  4904              LDR      r1,|L8.28|
00000a  60c8              STR      r0,[r1,#0xc]
00000c  f3bf8f4f          DSB      
000010  bf00              NOP      
000012  bf00              NOP      
                  |L8.20|
000014  bf00              NOP      
000016  e7fd              B        |L8.20|
;;;246    {
;;;247        /* System Reset */
;;;248        NVIC_SystemReset();
;;;249    }
;;;250    
                          ENDP

                  |L8.24|
                          DCD      0x05fa0004
                  |L8.28|
                          DCD      0xe000ed00

                          AREA ||i.MID_SYSTICK_CLKSourceConfig||, CODE, READONLY, ALIGN=2

                  MID_SYSTICK_CLKSourceConfig PROC
;;;472     */
;;;473    void MID_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
000000  2804              CMP      r0,#4
;;;474    {
;;;475        /* Check the parameters */
;;;476        assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
;;;477        if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
000002  d106              BNE      |L9.18|
;;;478        {
;;;479            SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
000004  4906              LDR      r1,|L9.32|
000006  6909              LDR      r1,[r1,#0x10]
000008  2204              MOVS     r2,#4
00000a  4311              ORRS     r1,r1,r2
00000c  4a04              LDR      r2,|L9.32|
00000e  6111              STR      r1,[r2,#0x10]
000010  e005              B        |L9.30|
                  |L9.18|
;;;480        }
;;;481        else
;;;482        {
;;;483            SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
000012  4903              LDR      r1,|L9.32|
000014  6909              LDR      r1,[r1,#0x10]
000016  2204              MOVS     r2,#4
000018  4391              BICS     r1,r1,r2
00001a  4a01              LDR      r2,|L9.32|
00001c  6111              STR      r1,[r2,#0x10]
                  |L9.30|
;;;484        }
;;;485    }
00001e  4770              BX       lr
;;;486    
                          ENDP

                  |L9.32|
                          DCD      0xe000e000

                          AREA ||i.MID_SYSTICK_Callback||, CODE, READONLY, ALIGN=1

                  MID_SYSTICK_Callback PROC
;;;526     */
;;;527    __weak void MID_SYSTICK_Callback(void)
000000  4770              BX       lr
;;;528    {
;;;529        /* NOTE : This function Should not be modified, when the callback is needed,
;;;530                  the MID_SYSTICK_Callback could be implemented in the user file
;;;531        */
;;;532    }
;;;533    
                          ENDP


                          AREA ||i.MID_SYSTICK_Config||, CODE, READONLY, ALIGN=2

                  MID_SYSTICK_Config PROC
;;;264     */
;;;265    uint32_t MID_SYSTICK_Config(uint32_t TicksNumb)
000000  b570              PUSH     {r4-r6,lr}
;;;266    {
000002  4604              MOV      r4,r0
;;;267        return SysTick_Config(TicksNumb);
000004  4625              MOV      r5,r4
000006  1e68              SUBS     r0,r5,#1
000008  4909              LDR      r1,|L11.48|
00000a  4288              CMP      r0,r1
00000c  d901              BLS      |L11.18|
00000e  2001              MOVS     r0,#1
000010  e00c              B        |L11.44|
                  |L11.18|
000012  1e68              SUBS     r0,r5,#1
000014  4907              LDR      r1,|L11.52|
000016  6148              STR      r0,[r1,#0x14]
000018  2103              MOVS     r1,#3
00001a  1f08              SUBS     r0,r1,#4
00001c  f7fffffe          BL       __NVIC_SetPriority
000020  2000              MOVS     r0,#0
000022  4904              LDR      r1,|L11.52|
000024  6188              STR      r0,[r1,#0x18]
000026  2007              MOVS     r0,#7
000028  6108              STR      r0,[r1,#0x10]
00002a  2000              MOVS     r0,#0
                  |L11.44|
;;;268    }
00002c  bd70              POP      {r4-r6,pc}
;;;269    
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
                          DCD      0x00ffffff
                  |L11.52|
                          DCD      0xe000e000

                          AREA ||i.MID_SYSTICK_DisableIRQ||, CODE, READONLY, ALIGN=2

                  MID_SYSTICK_DisableIRQ PROC
;;;428     */
;;;429    void MID_SYSTICK_DisableIRQ(void)
000000  4803              LDR      r0,|L12.16|
;;;430    {
;;;431        SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
000002  6900              LDR      r0,[r0,#0x10]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L12.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;432    }
00000c  4770              BX       lr
;;;433    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0xe000e000

                          AREA ||i.MID_SYSTICK_EnableIRQ||, CODE, READONLY, ALIGN=2

                  MID_SYSTICK_EnableIRQ PROC
;;;406     */
;;;407    void MID_SYSTICK_EnableIRQ(void)
000000  4803              LDR      r0,|L13.16|
;;;408    {
;;;409        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
000002  6900              LDR      r0,[r0,#0x10]
000004  2102              MOVS     r1,#2
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L13.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;410    }
00000c  4770              BX       lr
;;;411    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      0xe000e000

                          AREA ||i.MID_SYSTICK_GetCurrentValue||, CODE, READONLY, ALIGN=2

                  MID_SYSTICK_GetCurrentValue PROC
;;;451     */
;;;452    uint32_t MID_SYSTICK_GetCurrentValue(void)
000000  4801              LDR      r0,|L14.8|
;;;453    {
;;;454        return SysTick->VAL;
000002  6980              LDR      r0,[r0,#0x18]
;;;455    }
000004  4770              BX       lr
;;;456    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      0xe000e000

                          AREA ||i.MID_SYSTICK_IRQHandler||, CODE, READONLY, ALIGN=1

                  MID_SYSTICK_IRQHandler PROC
;;;502     */
;;;503    void MID_SYSTICK_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;504    {
;;;505        MID_SYSTICK_Callback();
000002  f7fffffe          BL       MID_SYSTICK_Callback
;;;506    }
000006  bd10              POP      {r4,pc}
;;;507    
                          ENDP


                          AREA ||i.__NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  __NVIC_SetPriority PROC
;;;731     */
;;;732    __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;733    {
;;;734      if ((int32_t)(IRQn) >= 0)
000002  2800              CMP      r0,#0
000004  db19              BLT      |L16.58|
;;;735      {
;;;736        NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
000006  4a1a              LDR      r2,|L16.112|
000008  2303              MOVS     r3,#3
00000a  021b              LSLS     r3,r3,#8
00000c  18d2              ADDS     r2,r2,r3
00000e  0883              LSRS     r3,r0,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4b11              LDR      r3,|L16.112|
00002c  2403              MOVS     r4,#3
00002e  0224              LSLS     r4,r4,#8
000030  191b              ADDS     r3,r3,r4
000032  0884              LSRS     r4,r0,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L16.108|
                  |L16.58|
;;;737           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;738      }
;;;739      else
;;;740      {
;;;741        SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
00003a  4a0e              LDR      r2,|L16.116|
00003c  0703              LSLS     r3,r0,#28
00003e  0f1b              LSRS     r3,r3,#28
000040  3b08              SUBS     r3,r3,#8
000042  089b              LSRS     r3,r3,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b05              LDR      r3,|L16.116|
000060  0704              LSLS     r4,r0,#28
000062  0f24              LSRS     r4,r4,#28
000064  3c08              SUBS     r4,r4,#8
000066  08a4              LSRS     r4,r4,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L16.108|
;;;742           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;743      }
;;;744    }
00006c  bd10              POP      {r4,pc}
;;;745    
                          ENDP

00006e  0000              DCW      0x0000
                  |L16.112|
                          DCD      0xe000e100
                  |L16.116|
                          DCD      0xe000ed1c

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_cortex_MID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_MG32x02z_cortex_MID_c_a470a311____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___21_MG32x02z_cortex_MID_c_a470a311____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_MG32x02z_cortex_MID_c_a470a311____REVSH|
#line 496
|__asm___21_MG32x02z_cortex_MID_c_a470a311____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
