; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_tm_init.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_tm_init.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_tm_init.crf RTE\MG32x02z_ChipInit_Wizard\MG32F02A132\MG32x02z_TM_Init.c]
                          THUMB

                          AREA ||i.TM_Init||, CODE, READONLY, ALIGN=1

                  TM_Init PROC
;;;37      */
;;;38     void TM_Init (void)
000000  4770              BX       lr
;;;39     {
;;;40     
;;;41         /* TM00 initial wizard */
;;;42         #if CONF_TM00_ENABLE_OPTION!=0
;;;43             TM00->CLK.W = CONF_TM00_CLK;
;;;44             TM00->CKO.W = CONF_TM00_CKO;
;;;45             TM00->ARR.W = CONF_TM00_ARR;
;;;46             TM00->PSARR.W = CONF_TM00_PSARR;
;;;47             TM00->TRG.W = (CONF_TM00_TRG | TM_TRG_RST_SW_enable_w | TM_TRG_RST2_SW_enable_w);    // reset TM00
;;;48             TM00->CR0.W = (CONF_TM00_CR0 | TM_CR0_EN_enable_w | TM_CR0_EN2_enable_w);
;;;49             TM00->TRG.W = CONF_TM00_TRG;
;;;50         #endif
;;;51         
;;;52         /* TM01 initial wizard */
;;;53         #if CONF_TM01_ENABLE_OPTION!=0
;;;54             TM01->CLK.W = CONF_TM01_CLK;
;;;55             TM01->CKO.W = CONF_TM01_CKO;
;;;56             TM01->ARR.W = CONF_TM01_ARR;
;;;57             TM01->PSARR.W = CONF_TM01_PSARR;
;;;58             TM01->TRG.W = (CONF_TM01_TRG | TM_TRG_RST_SW_enable_w | TM_TRG_RST2_SW_enable_w);    // reset TM01
;;;59             TM01->CR0.W = (CONF_TM01_CR0 | TM_CR0_EN_enable_w | TM_CR0_EN2_enable_w);
;;;60             TM01->TRG.W = CONF_TM01_TRG;
;;;61         #endif
;;;62         
;;;63         /* TM10 initial wizard */
;;;64         #if CONF_TM10_ENABLE_OPTION!=0
;;;65             TM10->CLK.W = CONF_TM10_CLK;
;;;66             TM10->CKO.W = CONF_TM10_CKO;
;;;67             TM10->ARR.W = CONF_TM10_ARR;
;;;68             TM10->PSARR.W = CONF_TM10_PSARR;
;;;69             TM10->TRG.W = (CONF_TM10_TRG | TM_TRG_RST_SW_enable_w | TM_TRG_RST2_SW_enable_w);    // reset TM10
;;;70             TM10->CR0.W = (CONF_TM10_CR0 | TM_CR0_EN_enable_w | TM_CR0_EN2_enable_w);
;;;71             TM10->TRG.W = CONF_TM10_TRG;
;;;72         #endif
;;;73         
;;;74         /* TM16 initial wizard */
;;;75         #if CONF_TM16_ENABLE_OPTION!=0
;;;76             TM16->CLK.W = CONF_TM16_CLK;
;;;77             TM16->CKO.W = CONF_TM16_CKO;
;;;78             TM16->ARR.W = CONF_TM16_ARR;
;;;79             TM16->PSARR.W = CONF_TM16_PSARR;
;;;80             TM16->TRG.W = (CONF_TM16_TRG | TM_TRG_RST_SW_enable_w | TM_TRG_RST2_SW_enable_w);    // reset TM16
;;;81             TM16->CR0.W = (CONF_TM16_CR0 | TM_CR0_EN_enable_w | TM_CR0_EN2_enable_w);
;;;82             TM16->TRG.W = CONF_TM16_TRG;
;;;83         #endif
;;;84         
;;;85         /* TM20 initial wizard */
;;;86         #if CONF_TM20_ENABLE_OPTION!=0
;;;87             TM20->CLK.W = CONF_TM20_CLK;
;;;88             TM20->CKO.W = CONF_TM20_CKO;
;;;89             TM20->ARR.W = CONF_TM20_ARR;
;;;90             TM20->PSARR.W = CONF_TM20_PSARR;
;;;91             TM20->TRG.W = (CONF_TM20_TRG | TM_TRG_RST_SW_enable_w | TM_TRG_RST2_SW_enable_w);    // reset TM20
;;;92             TM20->CCMDS.W = CONF_TM20_CCMDS;
;;;93             TM20->ICCR.W = CONF_TM20_ICCR;
;;;94             TM20->OSCR.W = (CONF_TM20_OSCR | 0x0000F0F0);        // unlock 0CxH OCx initial state                
;;;95             TM20->OCCR0.W = CONF_TM20_OCCR0;
;;;96             TM20->OCCR1.W = CONF_TM20_OCCR1;
;;;97             TM20->PWM.W = 0;
;;;98             TM20->BS.W = CONF_TM20_BS;
;;;99             TM20->CC0A.W = TM20->CC0B.W = CONF_TM20_CC0A;
;;;100            TM20->CC1A.W = TM20->CC1B.W = CONF_TM20_CC1A;
;;;101            TM20->CR0.W = (CONF_TM20_CR0 | TM_CR0_EN_enable_w | TM_CR0_EN2_enable_w);
;;;102            TM20->TRG.W = CONF_TM20_TRG;
;;;103        #endif
;;;104    
;;;105        /* TM26 initial wizard */
;;;106        #if CONF_TM26_ENABLE_OPTION!=0
;;;107            TM26->CLK.W = CONF_TM26_CLK;
;;;108            TM26->CKO.W = CONF_TM26_CKO;
;;;109            TM26->ARR.W = CONF_TM26_ARR;
;;;110            TM26->PSARR.W = CONF_TM26_PSARR;
;;;111            TM26->TRG.W = (CONF_TM26_TRG | TM_TRG_RST_SW_enable_w | TM_TRG_RST2_SW_enable_w);    // reset TM26
;;;112            TM26->CCMDS.W = CONF_TM26_CCMDS;
;;;113            TM26->ICCR.W = CONF_TM26_ICCR;
;;;114            TM26->OSCR.W = (CONF_TM26_OSCR | 0x0000F0F0);        // unlock 0CxH OCx initial state       
;;;115            TM26->OCCR0.W = CONF_TM26_OCCR0;
;;;116            TM26->OCCR1.W = CONF_TM26_OCCR1;
;;;117            TM26->PWM.W = 0;
;;;118            TM26->BS.W = CONF_TM26_BS;
;;;119            TM26->CC0A.W = TM26->CC0B.W = CONF_TM26_CC0A;
;;;120            TM26->CC1A.W = TM26->CC1B.W = CONF_TM26_CC1A;
;;;121            TM26->CR0.W = (CONF_TM26_CR0 | TM_CR0_EN_enable_w | TM_CR0_EN2_enable_w);
;;;122            TM26->TRG.W = CONF_TM26_TRG;
;;;123        #endif
;;;124    
;;;125        /* TM36 initial wizard */
;;;126        #if CONF_TM36_ENABLE_OPTION!=0
;;;127            TM36->CLK.W = CONF_TM36_CLK;
;;;128            TM36->CKO.W = CONF_TM36_CKO;
;;;129            TM36->ARR.W = CONF_TM36_ARR;
;;;130            TM36->PSARR.W = CONF_TM36_PSARR;
;;;131            TM36->TRG.W = (CONF_TM36_TRG | TM_TRG_RST_SW_enable_w | TM_TRG_RST2_SW_enable_w);    // reset TM36
;;;132            TM36->CCMDS.W = CONF_TM36_CCMDS;
;;;133            TM36->ICCR.W = CONF_TM36_ICCR;
;;;134            TM36->OSCR.W = (CONF_TM36_OSCR | 0x0000F0F0);        // unlock 0CxH OCx initial state       
;;;135            TM36->OCCR0.W = CONF_TM36_OCCR0;
;;;136            TM36->OCCR1.W = CONF_TM36_OCCR1;
;;;137            TM36->PWM.W = CONF_TM36_PWM;
;;;138            TM36->BS.W = CONF_TM36_BS;
;;;139            TM36->CC0A.W = TM36->CC0B.W = CONF_TM36_CC0A;
;;;140            TM36->CC1A.W = TM36->CC1B.W = CONF_TM36_CC1A;
;;;141            TM36->CC2A.W = TM36->CC2B.W = CONF_TM36_CC2A;
;;;142            TM36->CC3A.W = TM36->CC3B.W = CONF_TM36_CC3A;
;;;143            TM36->CR0.W = (CONF_TM36_CR0 | TM_CR0_EN_enable_w | TM_CR0_EN2_enable_w);
;;;144            TM36->TRG.W = CONF_TM36_TRG;
;;;145        #endif
;;;146    }
;;;147    
                          ENDP


;*** Start embedded assembler ***

#line 1 "RTE\\MG32x02z_ChipInit_Wizard\\MG32F02A132\\MG32x02z_TM_Init.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_TM_Init_c_TM_Init____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_TM_Init_c_TM_Init____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_TM_Init_c_TM_Init____REVSH|
#line 496
|__asm___18_MG32x02z_TM_Init_c_TM_Init____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
