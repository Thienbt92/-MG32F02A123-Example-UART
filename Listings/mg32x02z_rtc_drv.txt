; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_rtc_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_rtc_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_rtc_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_RTC_DRV.c]
                          THUMB

                          AREA ||i.RTC_Alarm_Cmd||, CODE, READONLY, ALIGN=2

                  RTC_Alarm_Cmd PROC
;;;188     */
;;;189    void RTC_Alarm_Cmd (FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;190    {
;;;191        uint8_t Reg;
;;;192        
;;;193        Reg = RTC->CR0.B[0];
000002  4a07              LDR      r2,|L1.32|
000004  7c10              LDRB     r0,[r2,#0x10]
;;;194        if(NewState != DISABLE)
000006  2900              CMP      r1,#0
000008  d002              BEQ      |L1.16|
;;;195        {
;;;196            Reg |= RTC_ALM_EN;
00000a  2202              MOVS     r2,#2
00000c  4310              ORRS     r0,r0,r2
00000e  e003              B        |L1.24|
                  |L1.16|
;;;197        }
;;;198        else
;;;199        {
;;;200            Reg &= ~RTC_ALM_EN;
000010  2302              MOVS     r3,#2
000012  4602              MOV      r2,r0
000014  439a              BICS     r2,r2,r3
000016  4610              MOV      r0,r2
                  |L1.24|
;;;201        }
;;;202        
;;;203        RTC->CR0.B[0] = Reg;
000018  4a01              LDR      r2,|L1.32|
00001a  7410              STRB     r0,[r2,#0x10]
;;;204    }
00001c  4770              BX       lr
;;;205    ///@}
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      0x5d040000

                          AREA ||i.RTC_CLK_Select||, CODE, READONLY, ALIGN=2

                  RTC_CLK_Select PROC
;;;53      */
;;;54     void RTC_CLK_Select (RTC_CLKS_TypeDef RTC_CLKS)
000000  4905              LDR      r1,|L2.24|
;;;55     {
;;;56         RTC->CLK.MBIT.CK_SEL = RTC_CLKS;
000002  7a09              LDRB     r1,[r1,#8]
000004  220c              MOVS     r2,#0xc
000006  4391              BICS     r1,r1,r2
000008  0082              LSLS     r2,r0,#2
00000a  230c              MOVS     r3,#0xc
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L2.24|
000012  7211              STRB     r1,[r2,#8]
;;;57     }
000014  4770              BX       lr
;;;58     
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x5d040000

                          AREA ||i.RTC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RTC_ClearFlag PROC
;;;553     */
;;;554    void RTC_ClearFlag (uint32_t RTC_Flag)
000000  4901              LDR      r1,|L3.8|
;;;555    {
;;;556        RTC->STA.W = RTC_Flag;
000002  6008              STR      r0,[r1,#0]
;;;557    }
000004  4770              BX       lr
;;;558    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x5d040000

                          AREA ||i.RTC_Cmd||, CODE, READONLY, ALIGN=2

                  RTC_Cmd PROC
;;;291     */
;;;292    void RTC_Cmd (FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;293    {
;;;294        uint8_t Reg;
;;;295        
;;;296        Reg = RTC->CR0.B[0];
000002  4a06              LDR      r2,|L4.28|
000004  7c10              LDRB     r0,[r2,#0x10]
;;;297        if(NewState != DISABLE)
000006  2900              CMP      r1,#0
000008  d002              BEQ      |L4.16|
;;;298        {
;;;299            Reg |= RTC_CR0_EN;
00000a  2201              MOVS     r2,#1
00000c  4310              ORRS     r0,r0,r2
00000e  e001              B        |L4.20|
                  |L4.16|
;;;300        }
;;;301        else
;;;302        {
;;;303            Reg &= ~RTC_CR0_EN;
000010  0840              LSRS     r0,r0,#1
000012  0040              LSLS     r0,r0,#1
                  |L4.20|
;;;304        }
;;;305        RTC->CR0.B[0] = Reg;
000014  4a01              LDR      r2,|L4.28|
000016  7410              STRB     r0,[r2,#0x10]
;;;306    }
000018  4770              BX       lr
;;;307    
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x5d040000

                          AREA ||i.RTC_Divider_Select||, CODE, READONLY, ALIGN=2

                  RTC_Divider_Select PROC
;;;97      */
;;;98     void RTC_Divider_Select (RTC_DIVS_TypeDef RTC_DIV)
000000  4905              LDR      r1,|L5.24|
;;;99     {
;;;100        RTC->CLK.MBIT.CK_DIV = RTC_DIV;
000002  7a09              LDRB     r1,[r1,#8]
000004  2230              MOVS     r2,#0x30
000006  4391              BICS     r1,r1,r2
000008  0102              LSLS     r2,r0,#4
00000a  2330              MOVS     r3,#0x30
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L5.24|
000012  7211              STRB     r1,[r2,#8]
;;;101    }
000014  4770              BX       lr
;;;102    ///@}
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      0x5d040000

                          AREA ||i.RTC_GetAlarmCompareValue||, CODE, READONLY, ALIGN=2

                  RTC_GetAlarmCompareValue PROC
;;;122     */
;;;123    uint32_t RTC_GetAlarmCompareValue (void)
000000  4801              LDR      r0,|L6.8|
;;;124    {
;;;125        return RTC->ALM.W;
000002  69c0              LDR      r0,[r0,#0x1c]
;;;126    }
000004  4770              BX       lr
;;;127     
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x5d040000

                          AREA ||i.RTC_GetAlarmState||, CODE, READONLY, ALIGN=2

                  RTC_GetAlarmState PROC
;;;162     */
;;;163    DRV_Return RTC_GetAlarmState (void)
000000  2000              MOVS     r0,#0
;;;164    {
;;;165        DRV_Return bitstatus = DRV_False;
;;;166        
;;;167        if(RTC->CR0.MBIT.ALM_EN != 0)
000002  4904              LDR      r1,|L7.20|
000004  7c09              LDRB     r1,[r1,#0x10]
000006  0789              LSLS     r1,r1,#30
000008  0fc9              LSRS     r1,r1,#31
00000a  2900              CMP      r1,#0
00000c  d000              BEQ      |L7.16|
;;;168            bitstatus = DRV_True;
00000e  2001              MOVS     r0,#1
                  |L7.16|
;;;169    
;;;170        return bitstatus;
;;;171    }
000010  4770              BX       lr
;;;172    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x5d040000

                          AREA ||i.RTC_GetAllFlagStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetAllFlagStatus PROC
;;;498     */
;;;499    uint32_t RTC_GetAllFlagStatus (void)
000000  4801              LDR      r0,|L8.8|
;;;500    {
;;;501        return RTC->STA.W;
000002  6800              LDR      r0,[r0,#0]
;;;502    }
000004  4770              BX       lr
;;;503    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0x5d040000

                          AREA ||i.RTC_GetCaptureReg||, CODE, READONLY, ALIGN=2

                  RTC_GetCaptureReg PROC
;;;244     */
;;;245    uint32_t RTC_GetCaptureReg (void)
000000  4801              LDR      r0,|L9.8|
;;;246    { 
;;;247        return RTC->CAP.W;
000002  6a00              LDR      r0,[r0,#0x20]
;;;248    }
000004  4770              BX       lr
;;;249    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      0x5d040000

                          AREA ||i.RTC_GetReloadReg||, CODE, READONLY, ALIGN=2

                  RTC_GetReloadReg PROC
;;;225     */
;;;226    uint32_t RTC_GetReloadReg (void)
000000  4801              LDR      r0,|L10.8|
;;;227    { 
;;;228        return RTC->RLR.W;
000002  6980              LDR      r0,[r0,#0x18]
;;;229    }
000004  4770              BX       lr
;;;230    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x5d040000

                          AREA ||i.RTC_GetSingleFlagStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetSingleFlagStatus PROC
;;;523     */
;;;524    DRV_Return RTC_GetSingleFlagStatus (uint32_t RTC_Flag)
000000  4601              MOV      r1,r0
;;;525    {
;;;526        DRV_Return bitstatus = DRV_Normal;
000002  2000              MOVS     r0,#0
;;;527        
;;;528        if ((RTC->STA.W & RTC_Flag) != (uint32_t)DRV_Normal)
000004  4a03              LDR      r2,|L11.20|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  2a00              CMP      r2,#0
00000c  d000              BEQ      |L11.16|
;;;529        {
;;;530            bitstatus = DRV_Happened;
00000e  2001              MOVS     r0,#1
                  |L11.16|
;;;531        }
;;;532        return  bitstatus;
;;;533    }
000010  4770              BX       lr
;;;534     
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0x5d040000

                          AREA ||i.RTC_ITEA_Cmd||, CODE, READONLY, ALIGN=2

                  RTC_ITEA_Cmd PROC
;;;610     */
;;;611    void RTC_ITEA_Cmd (FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;612    {
;;;613        if(NewState != DISABLE)
000002  d007              BEQ      |L12.20|
;;;614        {
;;;615            RTC->INT.MBIT.IEA = 1;
000004  4907              LDR      r1,|L12.36|
000006  7909              LDRB     r1,[r1,#4]
000008  0849              LSRS     r1,r1,#1
00000a  0049              LSLS     r1,r1,#1
00000c  1c49              ADDS     r1,r1,#1
00000e  4a05              LDR      r2,|L12.36|
000010  7111              STRB     r1,[r2,#4]
000012  e005              B        |L12.32|
                  |L12.20|
;;;616        }
;;;617        else
;;;618        {
;;;619            RTC->INT.MBIT.IEA = 0;
000014  4903              LDR      r1,|L12.36|
000016  7909              LDRB     r1,[r1,#4]
000018  0849              LSRS     r1,r1,#1
00001a  0049              LSLS     r1,r1,#1
00001c  4a01              LDR      r2,|L12.36|
00001e  7111              STRB     r1,[r2,#4]
                  |L12.32|
;;;620        }
;;;621    }
000020  4770              BX       lr
;;;622    ///@}
                          ENDP

000022  0000              DCW      0x0000
                  |L12.36|
                          DCD      0x5d040000

                          AREA ||i.RTC_IT_Config||, CODE, READONLY, ALIGN=2

                  RTC_IT_Config PROC
;;;579     */
;;;580    void RTC_IT_Config (uint32_t RTC_INT, FunctionalState NewState)
000000  4b06              LDR      r3,|L13.28|
;;;581    {
;;;582        uint32_t Reg;
;;;583        
;;;584        Reg = RTC->INT.W;
000002  685a              LDR      r2,[r3,#4]
;;;585        if(NewState != DISABLE)
000004  2900              CMP      r1,#0
000006  d003              BEQ      |L13.16|
;;;586        {
;;;587            Reg |= RTC_INT;
000008  4613              MOV      r3,r2
00000a  4303              ORRS     r3,r3,r0
00000c  461a              MOV      r2,r3
00000e  e002              B        |L13.22|
                  |L13.16|
;;;588        }
;;;589        else
;;;590        {
;;;591            NewState &= ~RTC_INT;
000010  460b              MOV      r3,r1
000012  4383              BICS     r3,r3,r0
000014  4619              MOV      r1,r3
                  |L13.22|
;;;592        }
;;;593        RTC->INT.W = Reg;
000016  4b01              LDR      r3,|L13.28|
000018  605a              STR      r2,[r3,#4]
;;;594    }
00001a  4770              BX       lr
;;;595     
                          ENDP

                  |L13.28|
                          DCD      0x5d040000

                          AREA ||i.RTC_InitOutputSignalState_Cmd||, CODE, READONLY, ALIGN=2

                  RTC_InitOutputSignalState_Cmd PROC
;;;415     */
;;;416    void RTC_InitOutputSignalState_Cmd (FunctionalState NewState)
000000  4601              MOV      r1,r0
;;;417    {
;;;418        uint8_t Reg;
;;;419        
;;;420        Reg = RTC->CR0.B[1];
000002  4a08              LDR      r2,|L14.36|
000004  7c50              LDRB     r0,[r2,#0x11]
;;;421        if(NewState != DRV_Logic0)
000006  2900              CMP      r1,#0
000008  d002              BEQ      |L14.16|
;;;422        {
;;;423            Reg |= RTC_OUT_MASK;
00000a  2240              MOVS     r2,#0x40
00000c  4310              ORRS     r0,r0,r2
00000e  e003              B        |L14.24|
                  |L14.16|
;;;424        }
;;;425        else
;;;426        {
;;;427            Reg &= ~RTC_OUT_MASK;
000010  2340              MOVS     r3,#0x40
000012  4602              MOV      r2,r0
000014  439a              BICS     r2,r2,r3
000016  4610              MOV      r0,r2
                  |L14.24|
;;;428        }
;;;429        Reg |= RTC_OUT_UNLOCK;
000018  2280              MOVS     r2,#0x80
00001a  4310              ORRS     r0,r0,r2
;;;430        
;;;431        RTC->CR0.B[1] = Reg;
00001c  4a01              LDR      r2,|L14.36|
00001e  7450              STRB     r0,[r2,#0x11]
;;;432    }
000020  4770              BX       lr
;;;433    ///@}
                          ENDP

000022  0000              DCW      0x0000
                  |L14.36|
                          DCD      0x5d040000

                          AREA ||i.RTC_OutputSignal_Select||, CODE, READONLY, ALIGN=2

                  RTC_OutputSignal_Select PROC
;;;395     */
;;;396    void RTC_OutputSignal_Select (RTC_OUTS_TypeDef RTC_OUTS)
000000  4904              LDR      r1,|L15.20|
;;;397    {
;;;398        RTC->CR0.MBIT.OUT_SEL = RTC_OUTS;
000002  7c49              LDRB     r1,[r1,#0x11]
000004  0889              LSRS     r1,r1,#2
000006  0089              LSLS     r1,r1,#2
000008  0782              LSLS     r2,r0,#30
00000a  0f92              LSRS     r2,r2,#30
00000c  4311              ORRS     r1,r1,r2
00000e  4a01              LDR      r2,|L15.20|
000010  7451              STRB     r1,[r2,#0x11]
;;;399    }
000012  4770              BX       lr
;;;400     
                          ENDP

                  |L15.20|
                          DCD      0x5d040000

                          AREA ||i.RTC_PreDivider_Select||, CODE, READONLY, ALIGN=2

                  RTC_PreDivider_Select PROC
;;;74      */
;;;75     void RTC_PreDivider_Select (RTC_PDIVS_TypeDef RTC_PDIV)
000000  4905              LDR      r1,|L16.24|
;;;76     {
;;;77         RTC->CLK.MBIT.CK_PDIV = RTC_PDIV;
000002  7a09              LDRB     r1,[r1,#8]
000004  2280              MOVS     r2,#0x80
000006  4391              BICS     r1,r1,r2
000008  01c2              LSLS     r2,r0,#7
00000a  2380              MOVS     r3,#0x80
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L16.24|
000012  7211              STRB     r1,[r2,#8]
;;;78     }
000014  4770              BX       lr
;;;79      
                          ENDP

000016  0000              DCW      0x0000
                  |L16.24|
                          DCD      0x5d040000

                          AREA ||i.RTC_RCR_Mode_Select||, CODE, READONLY, ALIGN=2

                  RTC_RCR_Mode_Select PROC
;;;324     */
;;;325    void RTC_RCR_Mode_Select (RTC_RCR_MODS_TypeDef RTC_MODS)
000000  4905              LDR      r1,|L17.24|
;;;326    {
;;;327        RTC->CR0.MBIT.RCR_MDS = RTC_MODS;
000002  7c09              LDRB     r1,[r1,#0x10]
000004  2230              MOVS     r2,#0x30
000006  4391              BICS     r1,r1,r2
000008  0102              LSLS     r2,r0,#4
00000a  2330              MOVS     r3,#0x30
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L17.24|
000012  7411              STRB     r1,[r2,#0x10]
;;;328    }
000014  4770              BX       lr
;;;329    ///@}
                          ENDP

000016  0000              DCW      0x0000
                  |L17.24|
                          DCD      0x5d040000

                          AREA ||i.RTC_SetAlarmCompareValue||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmCompareValue PROC
;;;142     */
;;;143    void RTC_SetAlarmCompareValue (uint32_t RTC_ALM)
000000  4901              LDR      r1,|L18.8|
;;;144    {
;;;145        RTC->ALM.W = RTC_ALM;
000002  61c8              STR      r0,[r1,#0x1c]
;;;146    }
000004  4770              BX       lr
;;;147    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      0x5d040000

                          AREA ||i.RTC_SetReloadReg||, CODE, READONLY, ALIGN=2

                  RTC_SetReloadReg PROC
;;;264     */
;;;265    void RTC_SetReloadReg (uint32_t RTC_RCR)
000000  4901              LDR      r1,|L19.8|
;;;266    {
;;;267        RTC->RLR.W = RTC_RCR;
000002  6188              STR      r0,[r1,#0x18]
;;;268    }
000004  4770              BX       lr
;;;269    ///@}
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      0x5d040000

                          AREA ||i.RTC_StopModeWakeUpEvent_Config||, CODE, READONLY, ALIGN=2

                  RTC_StopModeWakeUpEvent_Config PROC
;;;355     */
;;;356    void RTC_StopModeWakeUpEvent_Config (uint32_t RTC_WK, FunctionalState NewState)
000000  460a              MOV      r2,r1
;;;357    {
;;;358        uint32_t Reg;
;;;359        
;;;360        Reg = RTC->CR0.W;
000002  4b07              LDR      r3,|L20.32|
000004  6919              LDR      r1,[r3,#0x10]
;;;361        if(NewState != DISABLE)
000006  2a00              CMP      r2,#0
000008  d003              BEQ      |L20.18|
;;;362        {
;;;363            Reg |= RTC_WK;
00000a  460b              MOV      r3,r1
00000c  4303              ORRS     r3,r3,r0
00000e  4619              MOV      r1,r3
000010  e002              B        |L20.24|
                  |L20.18|
;;;364        }
;;;365        else
;;;366        {
;;;367            Reg &= ~RTC_WK;
000012  460b              MOV      r3,r1
000014  4383              BICS     r3,r3,r0
000016  4619              MOV      r1,r3
                  |L20.24|
;;;368        }
;;;369        RTC->CR0.W = Reg;
000018  4b01              LDR      r3,|L20.32|
00001a  6119              STR      r1,[r3,#0x10]
;;;370    }
00001c  4770              BX       lr
;;;371    ///@}
                          ENDP

00001e  0000              DCW      0x0000
                  |L20.32|
                          DCD      0x5d040000

                          AREA ||i.RTC_TriggerStamp_SW||, CODE, READONLY, ALIGN=2

                  RTC_TriggerStamp_SW PROC
;;;474     */
;;;475    void RTC_TriggerStamp_SW (void)
000000  2001              MOVS     r0,#1
;;;476    {
;;;477        RTC->CR1.B[0] = RTC_START;
000002  4901              LDR      r1,|L21.8|
000004  7508              STRB     r0,[r1,#0x14]
;;;478    }
000006  4770              BX       lr
;;;479    ///@}
                          ENDP

                  |L21.8|
                          DCD      0x5d040000

                          AREA ||i.RTC_TriggerStamp_Select||, CODE, READONLY, ALIGN=2

                  RTC_TriggerStamp_Select PROC
;;;457     */
;;;458    void RTC_TriggerStamp_Select (RTC_TS_TRGS_TypeDef RTC_TSS)
000000  4905              LDR      r1,|L22.24|
;;;459    {
;;;460        RTC->CR0.MBIT.TS_TRGS = RTC_TSS;
000002  7c49              LDRB     r1,[r1,#0x11]
000004  2230              MOVS     r2,#0x30
000006  4391              BICS     r1,r1,r2
000008  0102              LSLS     r2,r0,#4
00000a  2330              MOVS     r3,#0x30
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L22.24|
000012  7451              STRB     r1,[r2,#0x11]
;;;461    }
000014  4770              BX       lr
;;;462     
                          ENDP

000016  0000              DCW      0x0000
                  |L22.24|
                          DCD      0x5d040000

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_RTC_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_RTC_DRV_c_638b22f2____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_RTC_DRV_c_638b22f2____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_RTC_DRV_c_638b22f2____REVSH|
#line 496
|__asm___18_MG32x02z_RTC_DRV_c_638b22f2____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
