; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_common_mid.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_common_mid.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_common_mid.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_Common_MID.c]
                          THUMB

                          AREA ||i.MID_ClearTick||, CODE, READONLY, ALIGN=2

                  MID_ClearTick PROC
;;;344     */
;;;345    void MID_ClearTick(void)
000000  2000              MOVS     r0,#0
;;;346    {
;;;347        uwTick = 0;
000002  4901              LDR      r1,|L1.8|
000004  6008              STR      r0,[r1,#0]  ; uwTick
;;;348    }
000006  4770              BX       lr
;;;349    
                          ENDP

                  |L1.8|
                          DCD      uwTick

                          AREA ||i.MID_DeInit||, CODE, READONLY, ALIGN=1

                  MID_DeInit PROC
;;;194      */
;;;195    MID_StatusTypeDef MID_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;196    {
;;;197        /* Reset of all peripherals */
;;;198    
;;;199        /* De-Init the low level hardware */
;;;200        MID_MspDeInit();
000002  f7fffffe          BL       MID_MspDeInit
;;;201    
;;;202        /* Return function status */
;;;203        return MID_OK;
000006  2000              MOVS     r0,#0
;;;204    }
000008  bd10              POP      {r4,pc}
;;;205    
                          ENDP


                          AREA ||i.MID_Delay||, CODE, READONLY, ALIGN=1

                  MID_Delay PROC
;;;388      */
;;;389    __weak void MID_Delay(__IO uint32_t Delay)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;390    {
;;;391        uint32_t tickstart = MID_GetTick();
000002  f7fffffe          BL       MID_GetTick
000006  4605              MOV      r5,r0
;;;392        uint32_t wait = Delay;
000008  9c00              LDR      r4,[sp,#0]
;;;393      
;;;394        /* Add a period to guarantee minimum wait */
;;;395        if (wait < MID_MAX_DELAY)
00000a  1c60              ADDS     r0,r4,#1
00000c  2800              CMP      r0,#0
00000e  d000              BEQ      |L3.18|
;;;396        {
;;;397           wait++;
000010  1c64              ADDS     r4,r4,#1
                  |L3.18|
;;;398        }
;;;399      
;;;400        while((MID_GetTick() - tickstart) < wait)
000012  bf00              NOP      
                  |L3.20|
000014  f7fffffe          BL       MID_GetTick
000018  1b40              SUBS     r0,r0,r5
00001a  42a0              CMP      r0,r4
00001c  d3fa              BCC      |L3.20|
;;;401        {
;;;402        }
;;;403    }
00001e  bd38              POP      {r3-r5,pc}
;;;404    
                          ENDP


                          AREA ||i.MID_GetTick||, CODE, READONLY, ALIGN=2

                  MID_GetTick PROC
;;;363      */
;;;364    __weak uint32_t MID_GetTick(void)
000000  4801              LDR      r0,|L4.8|
;;;365    {
;;;366        return uwTick;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
;;;367    }
000004  4770              BX       lr
;;;368    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      uwTick

                          AREA ||i.MID_IncTick||, CODE, READONLY, ALIGN=2

                  MID_IncTick PROC
;;;331      */
;;;332    __weak void MID_IncTick(void)
000000  4802              LDR      r0,|L5.12|
;;;333    {
;;;334        uwTick++;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L5.12|
000008  6008              STR      r0,[r1,#0]  ; uwTick
;;;335    }
00000a  4770              BX       lr
;;;336    
                          ENDP

                  |L5.12|
                          DCD      uwTick

                          AREA ||i.MID_Init||, CODE, READONLY, ALIGN=1

                  MID_Init PROC
;;;162      */
;;;163    MID_StatusTypeDef MID_Init(void)
000000  b510              PUSH     {r4,lr}
;;;164    {
;;;165        /* Configure Flash prefetch */ 
;;;166    #if (PREFETCH_ENABLE != 0)
;;;167        // __MID_FLASH_PREFETCH_BUFFER_ENABLE();
;;;168    #endif /* PREFETCH_ENABLE */
;;;169    
;;;170        /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
;;;171        MID_InitTick(TICK_INT_PRIORITY);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       MID_InitTick
;;;172    
;;;173        /* Init the low level hardware */
;;;174        MID_MspInit();
000008  f7fffffe          BL       MID_MspInit
;;;175    
;;;176        /* Return function status */
;;;177        return MID_OK;
00000c  2000              MOVS     r0,#0
;;;178    }
00000e  bd10              POP      {r4,pc}
;;;179    
                          ENDP


                          AREA ||i.MID_InitTick||, CODE, READONLY, ALIGN=1

                  MID_InitTick PROC
;;;275      */
;;;276    __weak MID_StatusTypeDef MID_InitTick(uint32_t TickPriority)
000000  b570              PUSH     {r4-r6,lr}
;;;277    {
000002  4604              MOV      r4,r0
;;;278        /*Configure the SysTick to have interrupt in 1ms time basis*/
;;;279        MID_SYSTICK_Config(MID_CSC_GetCK_AHBFreq()/1000U);
000004  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
000008  4606              MOV      r6,r0
00000a  217d              MOVS     r1,#0x7d
00000c  00c9              LSLS     r1,r1,#3
00000e  f7fffffe          BL       __aeabi_uidivmod
000012  4605              MOV      r5,r0
000014  f7fffffe          BL       MID_SYSTICK_Config
;;;280    
;;;281        /*Configure the SysTick IRQ priority */
;;;282        MID_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
000018  2200              MOVS     r2,#0
00001a  4621              MOV      r1,r4
00001c  1e50              SUBS     r0,r2,#1
00001e  f7fffffe          BL       MID_NVIC_SetPriority
;;;283    
;;;284         /* Return function status */
;;;285        return MID_OK;
000022  2000              MOVS     r0,#0
;;;286    }
000024  bd70              POP      {r4-r6,pc}
;;;287    
                          ENDP


                          AREA ||i.MID_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_MspDeInit PROC
;;;240      */
;;;241    __weak void MID_MspDeInit(void)
000000  4770              BX       lr
;;;242    {
;;;243        /* NOTE : This function Should not be modified, when the callback is needed,
;;;244                  the MID_MspDeInit could be implemented in the user file
;;;245         */
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.MID_MspInit||, CODE, READONLY, ALIGN=1

                  MID_MspInit PROC
;;;219     */
;;;220    __weak void MID_MspInit(void)
000000  4770              BX       lr
;;;221    {
;;;222        /* NOTE : This function Should not be modified, when the callback is needed,
;;;223                  the MID_MspInit could be implemented in the user file
;;;224         */
;;;225    }
;;;226    
                          ENDP


                          AREA ||i.MID_ProtectModuleReg||, CODE, READONLY, ALIGN=1

                  MID_ProtectModuleReg PROC
;;;489     */
;;;490    MID_StatusTypeDef MID_ProtectModuleReg(MID_ProtectTypeDef Module)
000000  4601              MOV      r1,r0
;;;491    {
;;;492        *(uint16_t*)Module = 0x0000;
000002  2000              MOVS     r0,#0
000004  8008              STRH     r0,[r1,#0]
;;;493    
;;;494        if(*(uint16_t*)Module == 0)
000006  8808              LDRH     r0,[r1,#0]
000008  2800              CMP      r0,#0
00000a  d100              BNE      |L10.14|
                  |L10.12|
;;;495            return(MID_OK);
;;;496        else
;;;497            return(MID_ERROR);
;;;498    }
00000c  4770              BX       lr
                  |L10.14|
00000e  2001              MOVS     r0,#1                 ;497
000010  e7fc              B        |L10.12|
;;;499    
                          ENDP


                          AREA ||i.MID_ResumeTick||, CODE, READONLY, ALIGN=2

                  MID_ResumeTick PROC
;;;448      */
;;;449    __weak void MID_ResumeTick(void)
000000  4803              LDR      r0,|L11.16|
;;;450    {
;;;451        /* Enable SysTick Interrupt */
;;;452        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
000002  6900              LDR      r0,[r0,#0x10]
000004  2102              MOVS     r1,#2
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L11.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;453    }
00000c  4770              BX       lr
;;;454    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      0xe000e000

                          AREA ||i.MID_SuspendTick||, CODE, READONLY, ALIGN=2

                  MID_SuspendTick PROC
;;;423      */
;;;424    __weak void MID_SuspendTick(void)
000000  4803              LDR      r0,|L12.16|
;;;425    {
;;;426        /* Disable SysTick Interrupt */
;;;427        SysTick->CTRL &= SysTick_CTRL_TICKINT_Msk;
000002  6900              LDR      r0,[r0,#0x10]
000004  2102              MOVS     r1,#2
000006  4008              ANDS     r0,r0,r1
000008  4901              LDR      r1,|L12.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;428    }
00000c  4770              BX       lr
;;;429    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0xe000e000

                          AREA ||i.MID_UnProtectModuleReg||, CODE, READONLY, ALIGN=2

                  MID_UnProtectModuleReg PROC
;;;532     */
;;;533    MID_StatusTypeDef MID_UnProtectModuleReg(MID_ProtectTypeDef Module)
000000  4601              MOV      r1,r0
;;;534    {
;;;535        *(uint16_t*)Module = 0xA217;
000002  4804              LDR      r0,|L13.20|
000004  8008              STRH     r0,[r1,#0]
;;;536    
;;;537        if(*(uint16_t*)Module == 0)
000006  8808              LDRH     r0,[r1,#0]
000008  2800              CMP      r0,#0
00000a  d100              BNE      |L13.14|
                  |L13.12|
;;;538            return(MID_OK);
;;;539        else
;;;540            return(MID_ERROR);
;;;541    }
00000c  4770              BX       lr
                  |L13.14|
00000e  2001              MOVS     r0,#1                 ;540
000010  e7fc              B        |L13.12|
;;;542    
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      0x0000a217

                          AREA ||.data||, DATA, ALIGN=2

                  uwTick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_Common_MID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_MG32x02z_Common_MID_c_MID_Init____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___21_MG32x02z_Common_MID_c_MID_Init____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_MG32x02z_Common_MID_c_MID_Init____REVSH|
#line 496
|__asm___21_MG32x02z_Common_MID_c_MID_Init____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
