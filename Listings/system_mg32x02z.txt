; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\system_mg32x02z.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_mg32x02z.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\system_mg32x02z.crf RTE\MG32x02z_Device\MG32F02A132\system_MG32x02z.c]
                          THUMB

                          AREA ||i.HardFault_Handler_C||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  HardFault_Handler_C PROC
;;;357    // extracted from the assembly wrapper as input parameters 
;;;358    __weak void HardFault_Handler_C(unsigned int * hardfault_args, unsigned lr_value) 
000000  b570              PUSH     {r4-r6,lr}
;;;359    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;360        static volatile unsigned int stacked_r0; 
;;;361        static volatile unsigned int stacked_r1; 
;;;362        static volatile unsigned int stacked_r2; 
;;;363        static volatile unsigned int stacked_r3; 
;;;364        static volatile unsigned int stacked_r12; 
;;;365        static volatile unsigned int stacked_lr; 
;;;366        static volatile unsigned int stacked_pc; 
;;;367        static volatile unsigned int stacked_psr; 
;;;368        stacked_r0 = ((unsigned long) hardfault_args[0]); 
000006  4924              LDR      r1,|L1.152|
000008  6820              LDR      r0,[r4,#0]
00000a  6008              STR      r0,[r1,#0]  ; stacked_r0
;;;369        stacked_r1 = ((unsigned long) hardfault_args[1]); 
00000c  4923              LDR      r1,|L1.156|
00000e  6860              LDR      r0,[r4,#4]
000010  6008              STR      r0,[r1,#0]  ; stacked_r1
;;;370        stacked_r2 = ((unsigned long) hardfault_args[2]); 
000012  4923              LDR      r1,|L1.160|
000014  68a0              LDR      r0,[r4,#8]
000016  6008              STR      r0,[r1,#0]  ; stacked_r2
;;;371        stacked_r3 = ((unsigned long) hardfault_args[3]); 
000018  4922              LDR      r1,|L1.164|
00001a  68e0              LDR      r0,[r4,#0xc]
00001c  6008              STR      r0,[r1,#0]  ; stacked_r3
;;;372        stacked_r12 = ((unsigned long) hardfault_args[4]); 
00001e  4922              LDR      r1,|L1.168|
000020  6920              LDR      r0,[r4,#0x10]
000022  6008              STR      r0,[r1,#0]  ; stacked_r12
;;;373        stacked_lr = ((unsigned long) hardfault_args[5]); 
000024  4921              LDR      r1,|L1.172|
000026  6960              LDR      r0,[r4,#0x14]
000028  6008              STR      r0,[r1,#0]  ; stacked_lr
;;;374        stacked_pc = ((unsigned long) hardfault_args[6]); 
00002a  4921              LDR      r1,|L1.176|
00002c  69a0              LDR      r0,[r4,#0x18]
00002e  6008              STR      r0,[r1,#0]  ; stacked_pc
;;;375        stacked_psr = ((unsigned long) hardfault_args[7]); 
000030  4920              LDR      r1,|L1.180|
000032  69e0              LDR      r0,[r4,#0x1c]
000034  6008              STR      r0,[r1,#0]  ; stacked_psr
;;;376    
;;;377        printf ("  Hard Fault Handler\n\r"); 
000036  a020              ADR      r0,|L1.184|
000038  f7fffffe          BL       __2printf
;;;378        printf ("  R0 = 0x%X\n\r", stacked_r0); 
00003c  4816              LDR      r0,|L1.152|
00003e  6801              LDR      r1,[r0,#0]  ; stacked_r0
000040  a023              ADR      r0,|L1.208|
000042  f7fffffe          BL       __2printf
;;;379        printf ("  R1 = 0x%X\n\r", stacked_r1); 
000046  4815              LDR      r0,|L1.156|
000048  6801              LDR      r1,[r0,#0]  ; stacked_r1
00004a  a025              ADR      r0,|L1.224|
00004c  f7fffffe          BL       __2printf
;;;380        printf ("  R2 = 0x%X\n\r", stacked_r2); 
000050  4813              LDR      r0,|L1.160|
000052  6801              LDR      r1,[r0,#0]  ; stacked_r2
000054  a026              ADR      r0,|L1.240|
000056  f7fffffe          BL       __2printf
;;;381        printf ("  R3 = 0x%X\n\r", stacked_r3); 
00005a  4812              LDR      r0,|L1.164|
00005c  6801              LDR      r1,[r0,#0]  ; stacked_r3
00005e  a028              ADR      r0,|L1.256|
000060  f7fffffe          BL       __2printf
;;;382        printf ("  R12 = 0x%X\n\r", stacked_r12); 
000064  4810              LDR      r0,|L1.168|
000066  6801              LDR      r1,[r0,#0]  ; stacked_r12
000068  a029              ADR      r0,|L1.272|
00006a  f7fffffe          BL       __2printf
;;;383        printf ("  Stacked LR = 0x%X\n\r", stacked_lr); 
00006e  480f              LDR      r0,|L1.172|
000070  6801              LDR      r1,[r0,#0]  ; stacked_lr
000072  a02b              ADR      r0,|L1.288|
000074  f7fffffe          BL       __2printf
;;;384        printf ("  Stacked PC = 0x%X\n\r", stacked_pc); 
000078  480d              LDR      r0,|L1.176|
00007a  6801              LDR      r1,[r0,#0]  ; stacked_pc
00007c  a02e              ADR      r0,|L1.312|
00007e  f7fffffe          BL       __2printf
;;;385        printf ("  Stacked PSR = 0x%X\n\r", stacked_psr); 
000082  480c              LDR      r0,|L1.180|
000084  6801              LDR      r1,[r0,#0]  ; stacked_psr
000086  a032              ADR      r0,|L1.336|
000088  f7fffffe          BL       __2printf
;;;386        printf ("  Current LR = 0x%X\n\r", lr_value); 
00008c  4629              MOV      r1,r5
00008e  a036              ADR      r0,|L1.360|
000090  f7fffffe          BL       __2printf
;;;387    
;;;388        while(1); // endless loop 
000094  bf00              NOP      
                  |L1.150|
000096  e7fe              B        |L1.150|
;;;389    }
;;;390    
                          ENDP

                  |L1.152|
                          DCD      stacked_r0
                  |L1.156|
                          DCD      stacked_r1
                  |L1.160|
                          DCD      stacked_r2
                  |L1.164|
                          DCD      stacked_r3
                  |L1.168|
                          DCD      stacked_r12
                  |L1.172|
                          DCD      stacked_lr
                  |L1.176|
                          DCD      stacked_pc
                  |L1.180|
                          DCD      stacked_psr
                  |L1.184|
0000b8  20204861          DCB      "  Hard Fault Handler\n\r",0
0000bc  72642046
0000c0  61756c74
0000c4  2048616e
0000c8  646c6572
0000cc  0a0d00  
0000cf  00                DCB      0
                  |L1.208|
0000d0  20205230          DCB      "  R0 = 0x%X\n\r",0
0000d4  203d2030
0000d8  7825580a
0000dc  0d00    
0000de  00                DCB      0
0000df  00                DCB      0
                  |L1.224|
0000e0  20205231          DCB      "  R1 = 0x%X\n\r",0
0000e4  203d2030
0000e8  7825580a
0000ec  0d00    
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L1.240|
0000f0  20205232          DCB      "  R2 = 0x%X\n\r",0
0000f4  203d2030
0000f8  7825580a
0000fc  0d00    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L1.256|
000100  20205233          DCB      "  R3 = 0x%X\n\r",0
000104  203d2030
000108  7825580a
00010c  0d00    
00010e  00                DCB      0
00010f  00                DCB      0
                  |L1.272|
000110  20205231          DCB      "  R12 = 0x%X\n\r",0
000114  32203d20
000118  30782558
00011c  0a0d00  
00011f  00                DCB      0
                  |L1.288|
000120  20205374          DCB      "  Stacked LR = 0x%X\n\r",0
000124  61636b65
000128  64204c52
00012c  203d2030
000130  7825580a
000134  0d00    
000136  00                DCB      0
000137  00                DCB      0
                  |L1.312|
000138  20205374          DCB      "  Stacked PC = 0x%X\n\r",0
00013c  61636b65
000140  64205043
000144  203d2030
000148  7825580a
00014c  0d00    
00014e  00                DCB      0
00014f  00                DCB      0
                  |L1.336|
000150  20205374          DCB      "  Stacked PSR = 0x%X\n\r",0
000154  61636b65
000158  64205053
00015c  52203d20
000160  30782558
000164  0a0d00  
000167  00                DCB      0
                  |L1.360|
000168  20204375          DCB      "  Current LR = 0x%X\n\r",0
00016c  7272656e
000170  74204c52
000174  203d2030
000178  7825580a
00017c  0d00    
00017e  00                DCB      0
00017f  00                DCB      0

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;74      *----------------------------------------------------------------------------*/
;;;75     void SystemCoreClockUpdate(void)            /* Get Core Clock Frequency      */
000000  4801              LDR      r0,|L2.8|
;;;76     {
;;;77     /* ToDo: add code to calculate the system frequency based upon the current
;;;78              register settings.
;;;79              This function can be used to retrieve the system core clock frequeny
;;;80              after user changed register sittings.                                */
;;;81     
;;;82       #if defined(MG32x02z_ConfigerWizard_CSC)
;;;83         SystemCoreClock = CONF_CK_AHB_FREQ;
000002  4902              LDR      r1,|L2.12|
000004  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;84       #else
;;;85         // CK_MAIN
;;;86         switch(CSC->CR0.W & CSC_CR0_MAIN_SEL_mask_w){
;;;87             case CSC_CR0_MAIN_SEL_ck_hs_w :
;;;88                 switch(CSC->CR0.W & CSC_CR0_HS_SEL_mask_w){
;;;89                     case CSC_CR0_HS_SEL_ihrco_w:
;;;90                         if((CSC->CR0.W & CSC_CR0_IHRCO_EN_mask_w) != 0)
;;;91                         {
;;;92                             if((CSC->CR0.W & CSC_CR0_IHRCO_SEL_mask_w) == CSC_CR0_IHRCO_SEL_12_w)
;;;93                                 SystemCoreClock = 12000000UL;
;;;94                             else
;;;95                                 SystemCoreClock = 11059200UL;
;;;96                         }
;;;97                         else
;;;98                             SystemCoreClock = 0UL;
;;;99                         break;
;;;100                    case CSC_CR0_HS_SEL_xosc_w:
;;;101                        SystemCoreClock = __XTAL;
;;;102                        break;
;;;103                    case CSC_CR0_HS_SEL_ilrco_w:
;;;104                        SystemCoreClock = 32000UL;
;;;105                        break;
;;;106                    case CSC_CR0_HS_SEL_ck_ext_w:
;;;107                        SystemCoreClock = __ECKI;
;;;108                        break;
;;;109                }
;;;110                break;
;;;111    
;;;112            case CSC_CR0_MAIN_SEL_ck_plli_w :
;;;113              #if defined(MG32_1ST) || defined(MG32_2ND)
;;;114                switch(CSC->CR0.W & CSC_CR0_HS_SEL_mask_w){
;;;115                    case CSC_CR0_HS_SEL_ihrco_w:
;;;116                        if((CSC->CR0.W & CSC_CR0_IHRCO_EN_mask_w) != 0)
;;;117                        {
;;;118                            if((CSC->CR0.W & CSC_CR0_IHRCO_SEL_mask_w) == CSC_CR0_IHRCO_SEL_12_w)
;;;119                                SystemCoreClock = 12000000UL;
;;;120                            else
;;;121                                SystemCoreClock = 11059200UL;
;;;122                        }
;;;123                        else
;;;124                            SystemCoreClock = 0UL;
;;;125                        break;
;;;126                    case CSC_CR0_HS_SEL_xosc_w:
;;;127                        SystemCoreClock = __XTAL;
;;;128                        break;
;;;129                    case CSC_CR0_HS_SEL_ilrco_w:
;;;130                        SystemCoreClock = 32000UL;
;;;131                        break;
;;;132                    case CSC_CR0_HS_SEL_ck_ext_w:
;;;133                        SystemCoreClock = __ECKI;
;;;134                        break;
;;;135                }
;;;136              #else
;;;137                if((CSC->PLL.W & CSC_PLL_PLLI_SEL_mask_w) == 0)
;;;138                {
;;;139                    switch(CSC->CR0.W & CSC_CR0_HS_SEL_mask_w){
;;;140                        case CSC_CR0_HS_SEL_ihrco_w:
;;;141                            if((CSC->CR0.W & CSC_CR0_IHRCO_EN_mask_w) != 0)
;;;142                            {
;;;143                                if((CSC->CR0.W & CSC_CR0_IHRCO_SEL_mask_w) == CSC_CR0_IHRCO_SEL_12_w)
;;;144                                    SystemCoreClock = 12000000UL;
;;;145                                else
;;;146                                    SystemCoreClock = 11059200UL;
;;;147                            }
;;;148                            else
;;;149                                SystemCoreClock = 0UL;
;;;150                            break;
;;;151                        case CSC_CR0_HS_SEL_xosc_w:
;;;152                            SystemCoreClock = __XTAL;
;;;153                            break;
;;;154                        case CSC_CR0_HS_SEL_ilrco_w:
;;;155                            SystemCoreClock = 32000UL;
;;;156                            break;
;;;157                        case CSC_CR0_HS_SEL_ck_ext_w:
;;;158                            SystemCoreClock = __ECKI;
;;;159                            break;
;;;160                    }
;;;161                }
;;;162                else
;;;163                {
;;;164                    switch(CSC->CR0.W & CSC_CR0_HS2_SEL_mask_w){
;;;165                        case CSC_CR0_HS2_SEL_ihrco_w:
;;;166                            if((CSC->CR0.W & CSC_CR0_IHRCO_EN_mask_w) != 0)
;;;167                            {
;;;168                                if((CSC->CR0.W & CSC_CR0_IHRCO_SEL_mask_w) == CSC_CR0_IHRCO_SEL_12_w)
;;;169                                    SystemCoreClock = 12000000UL;
;;;170                                else
;;;171                                    SystemCoreClock = 11059200UL;
;;;172                            }
;;;173                            else
;;;174                                SystemCoreClock = 0UL;
;;;175                            break;
;;;176                        case CSC_CR0_HS2_SEL_xosc_w:
;;;177                            SystemCoreClock = __XTAL;
;;;178                            break;
;;;179                        case CSC_CR0_HS2_SEL_ck_ext_w:
;;;180                            SystemCoreClock = __ECKI;
;;;181                            break;
;;;182                    }
;;;183                }
;;;184              #endif
;;;185    
;;;186                // PLLI Input
;;;187                switch(CSC->DIV.W & CSC_DIV_PLLI_DIV_mask_w){
;;;188                    case CSC_DIV_PLLI_DIV_div2_w :
;;;189                        SystemCoreClock = SystemCoreClock / 2;
;;;190                        break;
;;;191                    case CSC_DIV_PLLI_DIV_div4_w :
;;;192                        SystemCoreClock = SystemCoreClock / 4;
;;;193                        break;
;;;194                    case CSC_DIV_PLLI_DIV_div6_w :
;;;195                        SystemCoreClock = SystemCoreClock / 6;
;;;196                        break;
;;;197                    default :
;;;198                    case CSC_DIV_PLLI_DIV_div1_w :
;;;199                        break;
;;;200                }
;;;201                break;
;;;202    
;;;203            case CSC_CR0_MAIN_SEL_ck_pllo_w :
;;;204              #if defined(MG32_1ST) || defined(MG32_2ND)
;;;205                switch(CSC->CR0.W & CSC_CR0_HS_SEL_mask_w){
;;;206                    case CSC_CR0_HS_SEL_ihrco_w:
;;;207                        if((CSC->CR0.W & CSC_CR0_IHRCO_EN_mask_w) != 0)
;;;208                        {
;;;209                            if((CSC->CR0.W & CSC_CR0_IHRCO_SEL_mask_w) == CSC_CR0_IHRCO_SEL_12_w)
;;;210                                SystemCoreClock = 12000000UL;
;;;211                            else
;;;212                                SystemCoreClock = 11059200UL;
;;;213                        }
;;;214                        else
;;;215                            SystemCoreClock = 0UL;
;;;216                        break;
;;;217                    case CSC_CR0_HS_SEL_xosc_w:
;;;218                        SystemCoreClock = __XTAL;
;;;219                        break;
;;;220                    case CSC_CR0_HS_SEL_ilrco_w:
;;;221                        SystemCoreClock = 32000UL;
;;;222                        break;
;;;223                    case CSC_CR0_HS_SEL_ck_ext_w:
;;;224                        SystemCoreClock = __ECKI;
;;;225                        break;
;;;226                }
;;;227              #else
;;;228                if((CSC->PLL.W & CSC_PLL_PLLI_SEL_mask_w) == CSC_PLL_PLLI_SEL_ck_hs_w)
;;;229                {
;;;230                    switch(CSC->CR0.W & CSC_CR0_HS_SEL_mask_w){
;;;231                        case CSC_CR0_HS_SEL_ihrco_w:
;;;232                            if((CSC->CR0.W & CSC_CR0_IHRCO_EN_mask_w) != 0)
;;;233                            {
;;;234                                if((CSC->CR0.W & CSC_CR0_IHRCO_SEL_mask_w) == CSC_CR0_IHRCO_SEL_12_w)
;;;235                                    SystemCoreClock = 12000000UL;
;;;236                                else
;;;237                                    SystemCoreClock = 11059200UL;
;;;238                            }
;;;239                            else
;;;240                                SystemCoreClock = 0UL;
;;;241                            break;
;;;242                        case CSC_CR0_HS_SEL_xosc_w:
;;;243                            SystemCoreClock = __XTAL;
;;;244                            break;
;;;245                        case CSC_CR0_HS_SEL_ilrco_w:
;;;246                            SystemCoreClock = 32000UL;
;;;247                            break;
;;;248                        case CSC_CR0_HS_SEL_ck_ext_w:
;;;249                            SystemCoreClock = __ECKI;
;;;250                            break;
;;;251                    }
;;;252                }
;;;253                else
;;;254                {
;;;255                    switch(CSC->CR0.W & CSC_CR0_HS2_SEL_mask_w){
;;;256                        case CSC_CR0_HS2_SEL_ihrco_w:
;;;257                            if((CSC->CR0.W & CSC_CR0_IHRCO_EN_mask_w) != 0)
;;;258                            {
;;;259                                if((CSC->CR0.W & CSC_CR0_IHRCO_SEL_mask_w) == CSC_CR0_IHRCO_SEL_12_w)
;;;260                                    SystemCoreClock = 12000000UL;
;;;261                                else
;;;262                                    SystemCoreClock = 11059200UL;
;;;263                            }
;;;264                            else
;;;265                                SystemCoreClock = 0UL;
;;;266                            break;
;;;267                        case CSC_CR0_HS2_SEL_xosc_w:
;;;268                            SystemCoreClock = __XTAL;
;;;269                            break;
;;;270                        case CSC_CR0_HS2_SEL_ck_ext_w:
;;;271                            SystemCoreClock = __ECKI;
;;;272                            break;
;;;273                    }
;;;274                }
;;;275              #endif
;;;276    
;;;277                // PLLI Input
;;;278                switch(CSC->DIV.W & CSC_DIV_PLLI_DIV_mask_w){
;;;279                    case CSC_DIV_PLLI_DIV_div2_w :
;;;280                        SystemCoreClock = SystemCoreClock / 2;
;;;281                        break;
;;;282                    case CSC_DIV_PLLI_DIV_div4_w :
;;;283                        SystemCoreClock = SystemCoreClock / 4;
;;;284                        break;
;;;285                    case CSC_DIV_PLLI_DIV_div6_w :
;;;286                        SystemCoreClock = SystemCoreClock / 6;
;;;287                        break;
;;;288                    default :
;;;289                    case CSC_DIV_PLLI_DIV_div1_w :
;;;290                        break;
;;;291                }
;;;292    
;;;293                // PLL MUX
;;;294                if((CSC->CR0.W & CSC_CR0_PLL_EN_mask_w) == 0)
;;;295                    SystemCoreClock = 0;
;;;296                else
;;;297                {
;;;298                  #if defined(MG32_1ST) || defined(MG32_2ND)
;;;299                    if((CSC->PLL.W & CSC_PLL_PLL_MUL_mask_w) ==  CSC_PLL_PLL_MUL_16_w)
;;;300                        SystemCoreClock = SystemCoreClock * 16;
;;;301                    else
;;;302                        SystemCoreClock = SystemCoreClock * 24;                
;;;303                  #else 
;;;304                    if((CSC->PLL.W & CSC_PLL_PLL_MDS_mask_w) != 0)
;;;305                        SystemCoreClock = SystemCoreClock * (((CSC->PLL.W & CSC_PLL_PLL_MULX_mask_w) >> 9) + 1);
;;;306                    else
;;;307                    {
;;;308                        if((CSC->PLL.W & CSC_PLL_PLL_MUL_mask_w) ==  CSC_PLL_PLL_MUL_16_w)
;;;309                            SystemCoreClock = SystemCoreClock * 16;
;;;310                        else
;;;311                            SystemCoreClock = SystemCoreClock * 24;
;;;312                    }
;;;313                  #endif
;;;314                    SystemCoreClock = SystemCoreClock / (4 - ((CSC->DIV.W & CSC_DIV_PLLO_DIV_mask_w) >> 4));
;;;315                }
;;;316                SystemCoreClock = SystemCoreClock >> ((CSC->DIV.W & CSC_DIV_APB_DIV_mask_w) >> 16);
;;;317                SystemCoreClock = SystemCoreClock >> ((CSC->DIV.W & CSC_DIV_AHB_DIV_mask_w) >> 8);
;;;318                break;
;;;319    
;;;320            default:
;;;321                break;
;;;322        }
;;;323      #endif
;;;324    }
000006  4770              BX       lr
;;;325    
                          ENDP

                  |L2.8|
                          DCD      0x00b71b00
                  |L2.12|
                          DCD      SystemCoreClock

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;334     */
;;;335    void SystemInit (void)
000000  4801              LDR      r0,|L3.8|
;;;336    {
;;;337    /* ToDo: add code to initialize the system
;;;338             do not use global variables because this function is called before
;;;339             reaching pre-main. RW section maybe overwritten afterwards.          */
;;;340      SystemCoreClock = __SYSTEM_CLOCK;
000002  4902              LDR      r1,|L3.12|
000004  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;341    }
000006  4770              BX       lr
;;;342    
                          ENDP

                  |L3.8|
                          DCD      0x00b71b00
                  |L3.12|
                          DCD      SystemCoreClock

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CSC_InitConfig
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00010000
                          DCD      0x00000000
                          DCD      0x00000210
                          DCD      0x00000001
                          DCD      0x00000008
                          DCD      0x0000911f
                          DCD      0x000f13ed
                          DCD      0x00008993
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00b71b00
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x00b71b00
                  stacked_r0
                          DCD      0x00000000
                  stacked_r1
                          DCD      0x00000000
                  stacked_r2
                          DCD      0x00000000
                  stacked_r3
                          DCD      0x00000000
                  stacked_r12
                          DCD      0x00000000
                  stacked_lr
                          DCD      0x00000000
                  stacked_pc
                          DCD      0x00000000
                  stacked_psr
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "RTE\\MG32x02z_Device\\MG32F02A132\\system_MG32x02z.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_system_MG32x02z_c_5d646a67____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___17_system_MG32x02z_c_5d646a67____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_system_MG32x02z_c_5d646a67____REVSH|
#line 496
|__asm___17_system_MG32x02z_c_5d646a67____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
