; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_pw_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_pw_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_pw_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_PW_DRV.c]
                          THUMB

                          AREA ||i.PW_BOD0_Cmd||, CODE, READONLY, ALIGN=2

                  PW_BOD0_Cmd PROC
;;;280     */
;;;281    void PW_BOD0_Cmd (FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;282    {
;;;283        if(NewState != DISABLE)
000002  d007              BEQ      |L1.20|
;;;284        {
;;;285            PW->CR0.MBIT.BOD0_EN = SET;
000004  4907              LDR      r1,|L1.36|
000006  7c09              LDRB     r1,[r1,#0x10]
000008  2210              MOVS     r2,#0x10
00000a  4391              BICS     r1,r1,r2
00000c  3110              ADDS     r1,r1,#0x10
00000e  4a05              LDR      r2,|L1.36|
000010  7411              STRB     r1,[r2,#0x10]
000012  e005              B        |L1.32|
                  |L1.20|
;;;286        }
;;;287        else
;;;288        {
;;;289            PW->CR0.MBIT.BOD0_EN = CLR;
000014  4903              LDR      r1,|L1.36|
000016  7c09              LDRB     r1,[r1,#0x10]
000018  2210              MOVS     r2,#0x10
00001a  4391              BICS     r1,r1,r2
00001c  4a01              LDR      r2,|L1.36|
00001e  7411              STRB     r1,[r2,#0x10]
                  |L1.32|
;;;290        }
;;;291    }
000020  4770              BX       lr
;;;292    
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      0x4c020000

                          AREA ||i.PW_BOD1Threshold_Select||, CODE, READONLY, ALIGN=2

                  PW_BOD1Threshold_Select PROC
;;;184     */
;;;185    void PW_BOD1Threshold_Select (PW_BOD1_TH_TypeDef BOD1_TH)
000000  4905              LDR      r1,|L2.24|
;;;186    {
;;;187        PW->CR0.MBIT.BOD1_TH = BOD1_TH;
000002  7c49              LDRB     r1,[r1,#0x11]
000004  220c              MOVS     r2,#0xc
000006  4391              BICS     r1,r1,r2
000008  0082              LSLS     r2,r0,#2
00000a  230c              MOVS     r3,#0xc
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L2.24|
000012  7451              STRB     r1,[r2,#0x11]
;;;188    }
000014  4770              BX       lr
;;;189     
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x4c020000

                          AREA ||i.PW_BOD1Trigger_Select||, CODE, READONLY, ALIGN=2

                  PW_BOD1Trigger_Select PROC
;;;206     */
;;;207    void PW_BOD1Trigger_Select (PW_BODx_TRGS_TypeDef BOD1_TRGS)
000000  4904              LDR      r1,|L3.20|
;;;208    {
;;;209        PW->CR0.MBIT.BOD1_TRGS = BOD1_TRGS;
000002  7c49              LDRB     r1,[r1,#0x11]
000004  0889              LSRS     r1,r1,#2
000006  0089              LSLS     r1,r1,#2
000008  0782              LSLS     r2,r0,#30
00000a  0f92              LSRS     r2,r2,#30
00000c  4311              ORRS     r1,r1,r2
00000e  4a01              LDR      r2,|L3.20|
000010  7451              STRB     r1,[r2,#0x11]
;;;210    }
000012  4770              BX       lr
;;;211    
                          ENDP

                  |L3.20|
                          DCD      0x4c020000

                          AREA ||i.PW_BOD1_Cmd||, CODE, READONLY, ALIGN=2

                  PW_BOD1_Cmd PROC
;;;226     */
;;;227    void PW_BOD1_Cmd (FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;228    {
;;;229        if(NewState != DISABLE)
000002  d007              BEQ      |L4.20|
;;;230        {
;;;231            PW->CR0.MBIT.BOD1_EN = SET;
000004  4907              LDR      r1,|L4.36|
000006  7c09              LDRB     r1,[r1,#0x10]
000008  2220              MOVS     r2,#0x20
00000a  4391              BICS     r1,r1,r2
00000c  3120              ADDS     r1,r1,#0x20
00000e  4a05              LDR      r2,|L4.36|
000010  7411              STRB     r1,[r2,#0x10]
000012  e005              B        |L4.32|
                  |L4.20|
;;;232        }
;;;233        else
;;;234        {
;;;235            PW->CR0.MBIT.BOD1_EN = CLR;
000014  4903              LDR      r1,|L4.36|
000016  7c09              LDRB     r1,[r1,#0x10]
000018  2220              MOVS     r2,#0x20
00001a  4391              BICS     r1,r1,r2
00001c  4a01              LDR      r2,|L4.36|
00001e  7411              STRB     r1,[r2,#0x10]
                  |L4.32|
;;;236        }
;;;237    }
000020  4770              BX       lr
;;;238    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      0x4c020000

                          AREA ||i.PW_ClearFlag||, CODE, READONLY, ALIGN=2

                  PW_ClearFlag PROC
;;;626     */
;;;627    void PW_ClearFlag (uint32_t PW_ITSrc)
000000  4901              LDR      r1,|L5.8|
;;;628    {
;;;629        PW->STA.W = PW_ITSrc;
000002  6008              STR      r0,[r1,#0]
;;;630    }
000004  4770              BX       lr
;;;631     
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x4c020000

                          AREA ||i.PW_GetAllFlagStatus||, CODE, READONLY, ALIGN=2

                  PW_GetAllFlagStatus PROC
;;;566     */
;;;567    uint32_t PW_GetAllFlagStatus (void)
000000  4801              LDR      r0,|L6.8|
;;;568     {
;;;569        return PW->STA.W;
000002  6800              LDR      r0,[r0,#0]
;;;570     }
000004  4770              BX       lr
;;;571     
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x4c020000

                          AREA ||i.PW_GetBod1Status||, CODE, READONLY, ALIGN=2

                  PW_GetBod1Status PROC
;;;306     */ 
;;;307    DRV_Return PW_GetBod1Status (void)
000000  2000              MOVS     r0,#0
;;;308    {    
;;;309        DRV_Return bitstatus = PW_HighThreshold;
;;;310        
;;;311        if((PW->STA.MBIT.BOD1_S) != 0)
000002  4905              LDR      r1,|L7.24|
000004  78c9              LDRB     r1,[r1,#3]
000006  0789              LSLS     r1,r1,#30
000008  0fc9              LSRS     r1,r1,#31
00000a  2900              CMP      r1,#0
00000c  d001              BEQ      |L7.18|
;;;312        {
;;;313            bitstatus = PW_LowThreshold;
00000e  2001              MOVS     r0,#1
000010  e000              B        |L7.20|
                  |L7.18|
;;;314        }
;;;315        else
;;;316        {
;;;317            bitstatus = PW_HighThreshold;
000012  2000              MOVS     r0,#0
                  |L7.20|
;;;318        }
;;;319        return bitstatus;
;;;320    }
000014  4770              BX       lr
;;;321    ///@}
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x4c020000

                          AREA ||i.PW_GetSingleFlagStatus||, CODE, READONLY, ALIGN=2

                  PW_GetSingleFlagStatus PROC
;;;591     */        
;;;592    DRV_Return PW_GetSingleFlagStatus (uint32_t PW_ITSrc)
000000  4601              MOV      r1,r0
;;;593    {
;;;594        DRV_Return bitstatus = DRV_Normal;
000002  2000              MOVS     r0,#0
;;;595        
;;;596        if((PW->STA.W & PW_ITSrc) != 0)
000004  4a04              LDR      r2,|L8.24|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  2a00              CMP      r2,#0
00000c  d001              BEQ      |L8.18|
;;;597        {
;;;598            bitstatus = DRV_Happened;
00000e  2001              MOVS     r0,#1
000010  e000              B        |L8.20|
                  |L8.18|
;;;599        }
;;;600        else
;;;601        {
;;;602            bitstatus = DRV_Normal;
000012  2000              MOVS     r0,#0
                  |L8.20|
;;;603        }
;;;604    
;;;605        return bitstatus;
;;;606    }
000014  4770              BX       lr
;;;607    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x4c020000

                          AREA ||i.PW_GetWakeUpMode||, CODE, READONLY, ALIGN=2

                  PW_GetWakeUpMode PROC
;;;503     */
;;;504    DRV_Return PW_GetWakeUpMode (void)
000000  2000              MOVS     r0,#0
;;;505    {
;;;506        DRV_Return bitstatus = PW_None;
;;;507        
;;;508        if(PW->STA.MBIT.BOD1_S == 0)
000002  490b              LDR      r1,|L9.48|
000004  78c9              LDRB     r1,[r1,#3]
000006  0789              LSLS     r1,r1,#30
000008  0fc9              LSRS     r1,r1,#31
00000a  2900              CMP      r1,#0
00000c  d100              BNE      |L9.16|
;;;509        {
;;;510            bitstatus = PW_None;
00000e  bf00              NOP      
                  |L9.16|
;;;511        }
;;;512        
;;;513        if(PW->STA.MBIT.BOD1_S == 1)
000010  4907              LDR      r1,|L9.48|
000012  78c9              LDRB     r1,[r1,#3]
000014  0789              LSLS     r1,r1,#30
000016  0fc9              LSRS     r1,r1,#31
000018  2900              CMP      r1,#0
00001a  d000              BEQ      |L9.30|
;;;514        {
;;;515            bitstatus = PW_Sleep;
00001c  2001              MOVS     r0,#1
                  |L9.30|
;;;516        }
;;;517        
;;;518        if(PW->STA.MBIT.BOD1_S == 2)
00001e  4904              LDR      r1,|L9.48|
000020  78c9              LDRB     r1,[r1,#3]
000022  0789              LSLS     r1,r1,#30
000024  0fc9              LSRS     r1,r1,#31
000026  2902              CMP      r1,#2
000028  d100              BNE      |L9.44|
;;;519        {
;;;520            bitstatus = PW_Stop;
00002a  2002              MOVS     r0,#2
                  |L9.44|
;;;521        }
;;;522        return bitstatus;
;;;523    }
00002c  4770              BX       lr
;;;524    
                          ENDP

00002e  0000              DCW      0x0000
                  |L9.48|
                          DCD      0x4c020000

                          AREA ||i.PW_ITEA_Cmd||, CODE, READONLY, ALIGN=2

                  PW_ITEA_Cmd PROC
;;;684     */
;;;685    void PW_ITEA_Cmd (FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;686    {
;;;687        if(NewState != DISABLE)
000002  d007              BEQ      |L10.20|
;;;688        {
;;;689            PW->INT.MBIT.IEA = SET;
000004  4907              LDR      r1,|L10.36|
000006  7909              LDRB     r1,[r1,#4]
000008  0849              LSRS     r1,r1,#1
00000a  0049              LSLS     r1,r1,#1
00000c  1c49              ADDS     r1,r1,#1
00000e  4a05              LDR      r2,|L10.36|
000010  7111              STRB     r1,[r2,#4]
000012  e005              B        |L10.32|
                  |L10.20|
;;;690        }
;;;691        else
;;;692        {
;;;693            PW->INT.MBIT.IEA = CLR;
000014  4903              LDR      r1,|L10.36|
000016  7909              LDRB     r1,[r1,#4]
000018  0849              LSRS     r1,r1,#1
00001a  0049              LSLS     r1,r1,#1
00001c  4a01              LDR      r2,|L10.36|
00001e  7111              STRB     r1,[r2,#4]
                  |L10.32|
;;;694        }
;;;695    }
000020  4770              BX       lr
;;;696    ///@}
                          ENDP

000022  0000              DCW      0x0000
                  |L10.36|
                          DCD      0x4c020000

                          AREA ||i.PW_IT_Config||, CODE, READONLY, ALIGN=2

                  PW_IT_Config PROC
;;;651     */
;;;652    void PW_IT_Config (uint32_t PW_ITSrc, FunctionalState NewState)
000000  460a              MOV      r2,r1
;;;653    {
;;;654        uint32_t  Reg;
;;;655        
;;;656        Reg = PW->INT.W;
000002  4b07              LDR      r3,|L11.32|
000004  6859              LDR      r1,[r3,#4]
;;;657        
;;;658        if(NewState != DISABLE)
000006  2a00              CMP      r2,#0
000008  d003              BEQ      |L11.18|
;;;659        {
;;;660            Reg |= PW_ITSrc;
00000a  460b              MOV      r3,r1
00000c  4303              ORRS     r3,r3,r0
00000e  4619              MOV      r1,r3
000010  e002              B        |L11.24|
                  |L11.18|
;;;661        }
;;;662        else
;;;663        {
;;;664            Reg &= ~PW_ITSrc;
000012  460b              MOV      r3,r1
000014  4383              BICS     r3,r3,r0
000016  4619              MOV      r1,r3
                  |L11.24|
;;;665        }
;;;666        
;;;667        PW->INT.W = Reg;
000018  4b01              LDR      r3,|L11.32|
00001a  6059              STR      r1,[r3,#4]
;;;668    }
00001c  4770              BX       lr
;;;669    
                          ENDP

00001e  0000              DCW      0x0000
                  |L11.32|
                          DCD      0x4c020000

                          AREA ||i.PW_ONModeLDO_Select||, CODE, READONLY, ALIGN=2

                  PW_ONModeLDO_Select PROC
;;;71      */
;;;72     void PW_ONModeLDO_Select (PW_LDOMode_TypeDef LdoSelect)
000000  4905              LDR      r1,|L12.24|
;;;73     {
;;;74         PW->CR0.MBIT.LDO_ON = LdoSelect;
000002  7c09              LDRB     r1,[r1,#0x10]
000004  2240              MOVS     r2,#0x40
000006  4391              BICS     r1,r1,r2
000008  0182              LSLS     r2,r0,#6
00000a  2340              MOVS     r3,#0x40
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L12.24|
000012  7411              STRB     r1,[r2,#0x10]
;;;75     }
000014  4770              BX       lr
;;;76     ///@}
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      0x4c020000

                          AREA ||i.PW_PeriphSLEEPModeContinuous_Config||, CODE, READONLY, ALIGN=2

                  PW_PeriphSLEEPModeContinuous_Config PROC
;;;350     */ 
;;;351    void PW_PeriphSLEEPModeContinuous_Config (PW_SLP_Periph_TypeDef SLP_Periph, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;352    {
;;;353        if(NewState != DISABLE)
000002  d005              BEQ      |L13.16|
;;;354        {
;;;355            PW->CR1.W |= SLP_Periph;
000004  4a05              LDR      r2,|L13.28|
000006  6952              LDR      r2,[r2,#0x14]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L13.28|
00000c  615a              STR      r2,[r3,#0x14]
00000e  e004              B        |L13.26|
                  |L13.16|
;;;356        }
;;;357        else
;;;358        {
;;;359            PW->CR1.W &= ~SLP_Periph;
000010  4a02              LDR      r2,|L13.28|
000012  6952              LDR      r2,[r2,#0x14]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L13.28|
000018  615a              STR      r2,[r3,#0x14]
                  |L13.26|
;;;360        }
;;;361    }
00001a  4770              BX       lr
;;;362    #endif
                          ENDP

                  |L13.28|
                          DCD      0x4c020000

                          AREA ||i.PW_PeriphSTOPModeContinuous_Config||, CODE, READONLY, ALIGN=2

                  PW_PeriphSTOPModeContinuous_Config PROC
;;;388     */ 
;;;389    void PW_PeriphSTOPModeContinuous_Config (PW_STP_Periph_TypeDef STP_Periph,FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;390    {
;;;391        if(NewState != DISABLE)
000002  d005              BEQ      |L14.16|
;;;392        {
;;;393            PW->CR1.W |= STP_Periph;
000004  4a05              LDR      r2,|L14.28|
000006  6952              LDR      r2,[r2,#0x14]
000008  4302              ORRS     r2,r2,r0
00000a  4b04              LDR      r3,|L14.28|
00000c  615a              STR      r2,[r3,#0x14]
00000e  e004              B        |L14.26|
                  |L14.16|
;;;394        }
;;;395        else
;;;396        {
;;;397            PW->CR1.W &= ~STP_Periph;
000010  4a02              LDR      r2,|L14.28|
000012  6952              LDR      r2,[r2,#0x14]
000014  4382              BICS     r2,r2,r0
000016  4b01              LDR      r3,|L14.28|
000018  615a              STR      r2,[r3,#0x14]
                  |L14.26|
;;;398        }
;;;399    }
00001a  4770              BX       lr
;;;400    ///@}
                          ENDP

                  |L14.28|
                          DCD      0x4c020000

                          AREA ||i.PW_PeriphSTOPModeWakeUp_Config||, CODE, READONLY, ALIGN=2

                  PW_PeriphSTOPModeWakeUp_Config PROC
;;;435     */
;;;436    void PW_PeriphSTOPModeWakeUp_Config (PW_WKSTP_Periph_TypeDef WKSTP_Periph, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;437    {
000002  4602              MOV      r2,r0
;;;438        uint32_t  REG;
;;;439        
;;;440        if(WKSTP_Periph < 32)
000004  2a20              CMP      r2,#0x20
000006  da0f              BGE      |L15.40|
;;;441        {
;;;442            REG = 0x00000001 << WKSTP_Periph;
000008  2001              MOVS     r0,#1
00000a  4090              LSLS     r0,r0,r2
;;;443            if(NewState != DISABLE)
00000c  2900              CMP      r1,#0
00000e  d005              BEQ      |L15.28|
;;;444            {
;;;445                PW->WKSTP0.W |= REG;
000010  4b0e              LDR      r3,|L15.76|
000012  699b              LDR      r3,[r3,#0x18]
000014  4303              ORRS     r3,r3,r0
000016  4c0d              LDR      r4,|L15.76|
000018  61a3              STR      r3,[r4,#0x18]
00001a  e016              B        |L15.74|
                  |L15.28|
;;;446            }
;;;447            else
;;;448            {
;;;449                PW->WKSTP0.W &= ~REG;
00001c  4b0b              LDR      r3,|L15.76|
00001e  699b              LDR      r3,[r3,#0x18]
000020  4383              BICS     r3,r3,r0
000022  4c0a              LDR      r4,|L15.76|
000024  61a3              STR      r3,[r4,#0x18]
000026  e010              B        |L15.74|
                  |L15.40|
;;;450            }
;;;451        }
;;;452        else
;;;453        {
;;;454            REG = 0x00000001 << (WKSTP_Periph & 0x1F);
000028  06d4              LSLS     r4,r2,#27
00002a  0ee4              LSRS     r4,r4,#27
00002c  2001              MOVS     r0,#1
00002e  40a0              LSLS     r0,r0,r4
;;;455            if(NewState != DISABLE)
000030  2900              CMP      r1,#0
000032  d005              BEQ      |L15.64|
;;;456            {
;;;457                PW->WKSTP1.W |= REG;
000034  4b05              LDR      r3,|L15.76|
000036  69db              LDR      r3,[r3,#0x1c]
000038  4303              ORRS     r3,r3,r0
00003a  4c04              LDR      r4,|L15.76|
00003c  61e3              STR      r3,[r4,#0x1c]
00003e  e004              B        |L15.74|
                  |L15.64|
;;;458            }
;;;459            else
;;;460            {
;;;461                PW->WKSTP1.W &= ~REG;
000040  4b02              LDR      r3,|L15.76|
000042  69db              LDR      r3,[r3,#0x1c]
000044  4383              BICS     r3,r3,r0
000046  4c01              LDR      r4,|L15.76|
000048  61e3              STR      r3,[r4,#0x1c]
                  |L15.74|
;;;462            }
;;;463        }
;;;464    }
00004a  bd10              POP      {r4,pc}
;;;465    
                          ENDP

                  |L15.76|
                          DCD      0x4c020000

                          AREA ||i.PW_STOPModeLDO_Select||, CODE, READONLY, ALIGN=2

                  PW_STOPModeLDO_Select PROC
;;;51      */
;;;52     void PW_STOPModeLDO_Select (PW_LDOMode_TypeDef LdoSelect)
000000  4905              LDR      r1,|L16.24|
;;;53     {
;;;54         PW->CR0.MBIT.LDO_STP = LdoSelect;
000002  7c09              LDRB     r1,[r1,#0x10]
000004  2280              MOVS     r2,#0x80
000006  4391              BICS     r1,r1,r2
000008  01c2              LSLS     r2,r0,#7
00000a  2380              MOVS     r3,#0x80
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L16.24|
000012  7411              STRB     r1,[r2,#0x10]
;;;55     }
000014  4770              BX       lr
;;;56     
                          ENDP

000016  0000              DCW      0x0000
                  |L16.24|
                          DCD      0x4c020000

                          AREA ||i.PW_VoltageBuffer||, CODE, READONLY, ALIGN=2

                  PW_VoltageBuffer PROC
;;;253     */  
;;;254    void PW_VoltageBuffer (FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;255    {
;;;256        if(NewState != DISABLE)
000002  d007              BEQ      |L17.20|
;;;257        {
;;;258            PW->CR0.MBIT.IVR_EN = SET;
000004  4907              LDR      r1,|L17.36|
000006  7c09              LDRB     r1,[r1,#0x10]
000008  2202              MOVS     r2,#2
00000a  4391              BICS     r1,r1,r2
00000c  1c89              ADDS     r1,r1,#2
00000e  4a05              LDR      r2,|L17.36|
000010  7411              STRB     r1,[r2,#0x10]
000012  e005              B        |L17.32|
                  |L17.20|
;;;259        }
;;;260        else
;;;261        {
;;;262            PW->CR0.MBIT.IVR_EN = CLR;
000014  4903              LDR      r1,|L17.36|
000016  7c09              LDRB     r1,[r1,#0x10]
000018  2202              MOVS     r2,#2
00001a  4391              BICS     r1,r1,r2
00001c  4a01              LDR      r2,|L17.36|
00001e  7411              STRB     r1,[r2,#0x10]
                  |L17.32|
;;;263        }
;;;264    }
000020  4770              BX       lr
;;;265    
                          ENDP

000022  0000              DCW      0x0000
                  |L17.36|
                          DCD      0x4c020000

                          AREA ||i.PW_WakeUpDelay_Select||, CODE, READONLY, ALIGN=2

                  PW_WakeUpDelay_Select PROC
;;;482     */
;;;483    void PW_WakeUpDelay_Select (PW_WakeUpDly_TypeDef WakeUpDly)
000000  4905              LDR      r1,|L18.24|
;;;484    {
;;;485        PW->CR0.MBIT.WKSTP_DSEL = WakeUpDly;
000002  7c89              LDRB     r1,[r1,#0x12]
000004  2230              MOVS     r2,#0x30
000006  4391              BICS     r1,r1,r2
000008  0102              LSLS     r2,r0,#4
00000a  2330              MOVS     r3,#0x30
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L18.24|
000012  7491              STRB     r1,[r2,#0x12]
;;;486    }
000014  4770              BX       lr
;;;487    
                          ENDP

000016  0000              DCW      0x0000
                  |L18.24|
                          DCD      0x4c020000

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_PW_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_MG32x02z_PW_DRV_c_b4477ed7____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___17_MG32x02z_PW_DRV_c_b4477ed7____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_MG32x02z_PW_DRV_c_b4477ed7____REVSH|
#line 496
|__asm___17_MG32x02z_PW_DRV_c_b4477ed7____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
