; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_exic_mid.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_exic_mid.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_exic_mid.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_EXIC_MID.c]
                          THUMB

                          AREA ||i.MID_EXIC_AFCallback||, CODE, READONLY, ALIGN=1

                  MID_EXIC_AFCallback PROC
;;;354     */
;;;355    __WEAK void MID_EXIC_AFCallback( EXIC_HandleTypeDef* MEXIC_PX)
000000  4770              BX       lr
;;;356    {
;;;357        //=========================================================
;;;358        //Prevent unused argument compilation warning.
;;;359        UNUSED(MEXIC_PX);
;;;360        
;;;361        //=========================================================
;;;362        //1. Use MID_EXIC_ClearITFlag() function to clear PX_OF :
;;;363        //   exsample : MID_EXIC_ClearITFlag(MEXIC_PX , EXIC_PX_AF);
;;;364        //
;;;365        //1. Use __DRV_EXIC_GET_PINTRIGGER_EVENTFLAG( MEXIC_PX->Instance) 
;;;366        //   to get pin input interrupt pending flag.
;;;367        //
;;;368        //2. Use __DRV_EXIC_CLEAR_PINTRIGGER_EVENTFLAG( MEXIC_PX->Instance , EXIC_PX_PIN0)
;;;369        //   to clear pin input interrupt pending flag.
;;;370        //
;;;371        //3. Know trigger port from MEXIC_PX->EXIC_Port parameter.
;;;372        
;;;373        //=========================================================
;;;374        //Note : This function should not be modified, when the callback 
;;;375        //       is needed, the MID_URT_AbortTransmitCpltCallback can 
;;;376        //       be implemented in the user file.
;;;377    }
;;;378    
                          ENDP


                          AREA ||i.MID_EXIC_ClearITFlag||, CODE, READONLY, ALIGN=1

                  MID_EXIC_ClearITFlag PROC
;;;161     */
;;;162    void MID_EXIC_ClearITFlag( EXIC_HandleTypeDef* MEXIC_PX , uint32_t ITFlag)
000000  7902              LDRB     r2,[r0,#4]
;;;163    {
;;;164        EXIC->STA.W = (ITFlag << (MEXIC_PX->EXIC_Port*EXIC_PX_ITF_SHIFT));
000002  0093              LSLS     r3,r2,#2
000004  460a              MOV      r2,r1
000006  409a              LSLS     r2,r2,r3
000008  2305              MOVS     r3,#5
00000a  071b              LSLS     r3,r3,#28
00000c  601a              STR      r2,[r3,#0]
;;;165    }
00000e  4770              BX       lr
;;;166    
                          ENDP


                          AREA ||i.MID_EXIC_DeInit||, CODE, READONLY, ALIGN=2

                  MID_EXIC_DeInit PROC
;;;177     */
;;;178    MID_StatusTypeDef MID_EXIC_DeInit( EXIC_HandleTypeDef* MEXIC_PX )
000000  b510              PUSH     {r4,lr}
;;;179    {
000002  4604              MOV      r4,r0
;;;180        if( MEXIC_PX == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L3.12|
;;;181        {
;;;182            return(MID_FAILURE);
000008  2001              MOVS     r0,#1
                  |L3.10|
;;;183        }
;;;184        
;;;185        //===========================================================    
;;;186        //Disable the peripheral.
;;;187        switch( ((uint32_t)(&(MEXIC_PX->Instance->PF.W))))
;;;188        {
;;;189            case EXIC_PA_Base:
;;;190            case EXIC_PB_Base:
;;;191            case EXIC_PC_Base:
;;;192            case EXIC_PD_Base:
;;;193            #if defined(EXIC_PE_Base)
;;;194            case EXIC_PE_Base:
;;;195            #endif
;;;196                              MID_EXIC_ClearITFlag(MEXIC_PX , ( EXIC_PX_AF | EXIC_PX_OF)); 
;;;197                              MODIFY_REG( EXIC->INT.B[0] , EXIC_PX_IEA_MASK , ( EXIC_INTERRUPT_DISABLE << MEXIC_PX->EXIC_Port));  
;;;198                              break;
;;;199            default:
;;;200                              return(MID_FAILURE);
;;;201        }
;;;202        
;;;203        MEXIC_PX->Instance->MSK.W  = 0;
;;;204        MEXIC_PX->Instance->PF.W   = 0x0000FFFF;
;;;205        MEXIC_PX->Instance->TRGS.W = 0;
;;;206        //===========================================================    
;;;207        //DeInit the low level hardware.
;;;208        MID_EXIC_MspDeInit(MEXIC_PX);
;;;209        
;;;210        
;;;211        //===========================================================
;;;212        //Process Unlock.
;;;213        __MID_UNLOCK(MEXIC_PX);
;;;214        
;;;215        
;;;216        
;;;217        return(MID_SUCCESS);
;;;218    }
00000a  bd10              POP      {r4,pc}
                  |L3.12|
00000c  491a              LDR      r1,|L3.120|
00000e  6820              LDR      r0,[r4,#0]            ;187
000010  1840              ADDS     r0,r0,r1              ;187
000012  2800              CMP      r0,#0                 ;187
000014  d006              BEQ      |L3.36|
000016  2810              CMP      r0,#0x10              ;187
000018  d005              BEQ      |L3.38|
00001a  2820              CMP      r0,#0x20              ;187
00001c  d004              BEQ      |L3.40|
00001e  2830              CMP      r0,#0x30              ;187
000020  d114              BNE      |L3.76|
000022  e002              B        |L3.42|
                  |L3.36|
000024  bf00              NOP                            ;190
                  |L3.38|
000026  bf00              NOP                            ;191
                  |L3.40|
000028  bf00              NOP                            ;192
                  |L3.42|
00002a  2103              MOVS     r1,#3                 ;196
00002c  4620              MOV      r0,r4                 ;196
00002e  f7fffffe          BL       MID_EXIC_ClearITFlag
000032  2005              MOVS     r0,#5                 ;197
000034  0700              LSLS     r0,r0,#28             ;197
000036  7900              LDRB     r0,[r0,#4]            ;197
000038  0940              LSRS     r0,r0,#5              ;197
00003a  0140              LSLS     r0,r0,#5              ;197
00003c  7922              LDRB     r2,[r4,#4]            ;197
00003e  2100              MOVS     r1,#0                 ;197
000040  4091              LSLS     r1,r1,r2              ;197
000042  4308              ORRS     r0,r0,r1              ;197
000044  2105              MOVS     r1,#5                 ;197
000046  0709              LSLS     r1,r1,#28             ;197
000048  7108              STRB     r0,[r1,#4]            ;197
00004a  e001              B        |L3.80|
                  |L3.76|
00004c  2001              MOVS     r0,#1                 ;200
00004e  e7dc              B        |L3.10|
                  |L3.80|
000050  bf00              NOP                            ;198
000052  2000              MOVS     r0,#0                 ;203
000054  6821              LDR      r1,[r4,#0]            ;203
000056  6088              STR      r0,[r1,#8]            ;203
000058  4808              LDR      r0,|L3.124|
00005a  6821              LDR      r1,[r4,#0]            ;204
00005c  6008              STR      r0,[r1,#0]            ;204
00005e  2000              MOVS     r0,#0                 ;205
000060  6821              LDR      r1,[r4,#0]            ;205
000062  6048              STR      r0,[r1,#4]            ;205
000064  4620              MOV      r0,r4                 ;208
000066  f7fffffe          BL       MID_EXIC_MspDeInit
00006a  bf00              NOP                            ;213
00006c  2000              MOVS     r0,#0                 ;213
00006e  7360              STRB     r0,[r4,#0xd]          ;213
000070  bf00              NOP                            ;213
000072  bf00              NOP                            ;217
000074  e7c9              B        |L3.10|
;;;219    /**
                          ENDP

000076  0000              DCW      0x0000
                  |L3.120|
                          DCD      0xafffffe0
                  |L3.124|
                          DCD      0x0000ffff

                          AREA ||i.MID_EXIC_IRQHandler||, CODE, READONLY, ALIGN=1

                  MID_EXIC_IRQHandler PROC
;;;423     */
;;;424    void MID_EXIC_IRQHandler( EXIC_HandleTypeDef* MEXIC_PX)
000000  b570              PUSH     {r4-r6,lr}
;;;425    {
000002  4604              MOV      r4,r0
;;;426        uint32_t MID_EXICIRQ_Flag;
;;;427    
;;;428        MID_EXICIRQ_Flag = ((EXIC->STA.W >> (MEXIC_PX->EXIC_Port*EXIC_PX_ITF_SHIFT) ) & ( EXIC_PX_ITF_MASK));
000004  2005              MOVS     r0,#5
000006  0700              LSLS     r0,r0,#28
000008  6800              LDR      r0,[r0,#0]
00000a  7921              LDRB     r1,[r4,#4]
00000c  0089              LSLS     r1,r1,#2
00000e  40c8              LSRS     r0,r0,r1
000010  0785              LSLS     r5,r0,#30
000012  0fad              LSRS     r5,r5,#30
;;;429    
;;;430        if( MID_EXICIRQ_Flag & EXIC_PX_AF)
000014  2002              MOVS     r0,#2
000016  4028              ANDS     r0,r0,r5
000018  2800              CMP      r0,#0
00001a  d002              BEQ      |L4.34|
;;;431        {
;;;432            MID_EXIC_AFCallback(MEXIC_PX);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       MID_EXIC_AFCallback
                  |L4.34|
;;;433            
;;;434        }
;;;435        if( MID_EXICIRQ_Flag & EXIC_PX_OF)
000022  07e8              LSLS     r0,r5,#31
000024  0fc0              LSRS     r0,r0,#31
000026  2800              CMP      r0,#0
000028  d002              BEQ      |L4.48|
;;;436        {
;;;437            MID_EXIC_OFCallback(MEXIC_PX);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       MID_EXIC_OFCallback
                  |L4.48|
;;;438            
;;;439        }
;;;440    }
000030  bd70              POP      {r4-r6,pc}
;;;441    
                          ENDP


                          AREA ||i.MID_EXIC_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_EXIC_MspDeInit PROC
;;;312     */
;;;313    __WEAK void MID_EXIC_MspDeInit(EXIC_HandleTypeDef* MEXIC_PX)
000000  4770              BX       lr
;;;314    {
;;;315        //===========================================================
;;;316        //Prevent unsed argument(s) compilation warning
;;;317        UNUSED(MEXIC_PX);
;;;318        
;;;319        //===========================================================
;;;320        //Note : This function should not be modified , when the callback is needed,
;;;321        //       the MID_URT_MspDeInit can be implemented in the user file.
;;;322        
;;;323    }
;;;324    /**
                          ENDP


                          AREA ||i.MID_EXIC_MspInit||, CODE, READONLY, ALIGN=1

                  MID_EXIC_MspInit PROC
;;;333     */
;;;334    __WEAK void MID_EXIC_MspInit( EXIC_HandleTypeDef* MEXIC_PX)
000000  4770              BX       lr
;;;335    {
;;;336        //===========================================================
;;;337        //Prevent unsed argument(s) compilation warning
;;;338        UNUSED(MEXIC_PX);
;;;339        
;;;340        //===========================================================
;;;341        //Note : This function should not be modified , when the callback is needed,
;;;342        //       the MID_URT_MspInit can be implemented in the user file.
;;;343        
;;;344    }
;;;345    /**
                          ENDP


                          AREA ||i.MID_EXIC_OFCallback||, CODE, READONLY, ALIGN=1

                  MID_EXIC_OFCallback PROC
;;;388     */
;;;389    __WEAK void MID_EXIC_OFCallback( EXIC_HandleTypeDef* MEXIC_PX )
000000  4770              BX       lr
;;;390    {
;;;391        //=========================================================
;;;392        //Prevent unused argument compilation warning.
;;;393        UNUSED(MEXIC_PX);
;;;394        
;;;395        //=========================================================
;;;396        //1. Use MID_EXIC_ClearITFlag() function to clear PX_OF :
;;;397        //   exsample : MID_EXIC_ClearITFlag(MEXIC_PX , EXIC_PX_OF);
;;;398        //
;;;399        //2. Use __DRV_EXIC_GET_PINTRIGGER_EVENTFLAG( MEXIC_PX->Instance) 
;;;400        //   to get pin input interrupt pending flag.
;;;401        //
;;;402        //3. Use __DRV_EXIC_CLEAR_PINTRIGGER_EVENTFLAG( MEXIC_PX->Instance , EXIC_PX_PIN0)
;;;403        //   to clear pin input interrupt pending flag.
;;;404        //
;;;405        //4. Know trigger port from MEXIC_PX->EXIC_Port parameter.
;;;406        
;;;407        //=========================================================
;;;408        //Note : This function should not be modified, when the callback 
;;;409        //       is needed, the MID_URT_AbortTransmitCpltCallback can 
;;;410        //       be implemented in the user file.
;;;411    }
;;;412    
                          ENDP


                          AREA ||i.MID_EXIC_PxTriggerAndMask_Select||, CODE, READONLY, ALIGN=1

                  MID_EXIC_PxTriggerAndMask_Select PROC
;;;65      */
;;;66     void MID_EXIC_PxTriggerAndMask_Select( EXIC_HandleTypeDef* MEXIC_PX )
000000  88c2              LDRH     r2,[r0,#6]
;;;67     {
;;;68         MEXIC_PX->Instance->MSK.H[1] = MEXIC_PX->AND_Mask;
000002  6801              LDR      r1,[r0,#0]
000004  814a              STRH     r2,[r1,#0xa]
;;;69     }
000006  4770              BX       lr
;;;70     
                          ENDP


                          AREA ||i.MID_EXIC_PxTriggerAndUnmatch_Cmd||, CODE, READONLY, ALIGN=1

                  MID_EXIC_PxTriggerAndUnmatch_Cmd PROC
;;;44      */
;;;45     void MID_EXIC_PxTriggerAndUnmatch_Cmd( EXIC_HandleTypeDef* MEXIC_PX )
000000  7a01              LDRB     r1,[r0,#8]
;;;46     {
;;;47         if(MEXIC_PX->AND_UnMatch==ENABLE)
000002  2901              CMP      r1,#1
000004  d10b              BNE      |L9.30|
;;;48         {
;;;49             EXIC->CR0.B[3] |= (0x01 << MEXIC_PX->EXIC_Port);
000006  2105              MOVS     r1,#5
000008  0709              LSLS     r1,r1,#28
00000a  7cc9              LDRB     r1,[r1,#0x13]
00000c  7903              LDRB     r3,[r0,#4]
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  b2ca              UXTB     r2,r1
000016  2105              MOVS     r1,#5
000018  0709              LSLS     r1,r1,#28
00001a  74ca              STRB     r2,[r1,#0x13]
00001c  e009              B        |L9.50|
                  |L9.30|
;;;50         }
;;;51         else
;;;52         {
;;;53             EXIC->CR0.B[3] &= (~(0x01 << MEXIC_PX->EXIC_Port));
00001e  2105              MOVS     r1,#5
000020  0709              LSLS     r1,r1,#28
000022  7cc9              LDRB     r1,[r1,#0x13]
000024  7903              LDRB     r3,[r0,#4]
000026  2201              MOVS     r2,#1
000028  409a              LSLS     r2,r2,r3
00002a  4391              BICS     r1,r1,r2
00002c  2205              MOVS     r2,#5
00002e  0712              LSLS     r2,r2,#28
000030  74d1              STRB     r1,[r2,#0x13]
                  |L9.50|
;;;54         }
;;;55     }
000032  4770              BX       lr
;;;56     /**
                          ENDP


                          AREA ||i.MID_EXIC_PxTriggerMode_Config||, CODE, READONLY, ALIGN=2

                  MID_EXIC_PxTriggerMode_Config PROC
;;;131     */
;;;132    MID_StatusTypeDef MID_EXIC_PxTriggerMode_Config(EXIC_HandleTypeDef* MEXIC_PX ,uint32_t EXIC_PIN , uint32_t EXIC_TRG_MDS )
000000  b530              PUSH     {r4,r5,lr}
;;;133    {
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;134        uint32_t mEXIC_TRG_Tmp;
;;;135        
;;;136        if( (MEXIC_PX == NULL) || ((EXIC_PIN & (~EXIC_TRGS_ALL))!=0) )
000006  2b00              CMP      r3,#0
000008  d003              BEQ      |L10.18|
00000a  480a              LDR      r0,|L10.52|
00000c  4008              ANDS     r0,r0,r1
00000e  2800              CMP      r0,#0
000010  d001              BEQ      |L10.22|
                  |L10.18|
;;;137        {
;;;138            return(MID_FAILURE);
000012  2001              MOVS     r0,#1
                  |L10.20|
;;;139        }
;;;140        
;;;141        mEXIC_TRG_Tmp              = MEXIC_PX->Instance->TRGS.W;
;;;142        mEXIC_TRG_Tmp              = mEXIC_TRG_Tmp & (~(EXIC_PIN * EXIC_TRIGGER_MASK));
;;;143        mEXIC_TRG_Tmp              = mEXIC_TRG_Tmp | (EXIC_PIN * EXIC_TRG_MDS);
;;;144        MEXIC_PX->Instance->TRGS.W = mEXIC_TRG_Tmp;
;;;145        
;;;146        return(MID_SUCCESS);
;;;147    }
000014  bd30              POP      {r4,r5,pc}
                  |L10.22|
000016  6818              LDR      r0,[r3,#0]            ;141
000018  6842              LDR      r2,[r0,#4]            ;141
00001a  0048              LSLS     r0,r1,#1              ;142
00001c  180d              ADDS     r5,r1,r0              ;142
00001e  4610              MOV      r0,r2                 ;142
000020  43a8              BICS     r0,r0,r5              ;142
000022  4602              MOV      r2,r0                 ;142
000024  4608              MOV      r0,r1                 ;143
000026  4360              MULS     r0,r4,r0              ;143
000028  4302              ORRS     r2,r2,r0              ;143
00002a  6818              LDR      r0,[r3,#0]            ;144
00002c  6042              STR      r2,[r0,#4]            ;144
00002e  2000              MOVS     r0,#0                 ;146
000030  e7f0              B        |L10.20|
;;;148    /**
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      0xaaaaaaaa

                          AREA ||i.MID_EXIC_PxTriggerOrMask_Select||, CODE, READONLY, ALIGN=1

                  MID_EXIC_PxTriggerOrMask_Select PROC
;;;80      */
;;;81     void MID_EXIC_PxTriggerOrMask_Select( EXIC_HandleTypeDef* MEXIC_PX)
000000  8941              LDRH     r1,[r0,#0xa]
;;;82     {
;;;83         MEXIC_PX->Instance->MSK.H[0] = MEXIC_PX->OR_Mask;
000002  6802              LDR      r2,[r0,#0]
000004  8111              STRH     r1,[r2,#8]
;;;84     }
000006  4770              BX       lr
;;;85     
                          ENDP


                          AREA ||i.MID_EXIC_PxTrigger_Init||, CODE, READONLY, ALIGN=2

                  MID_EXIC_PxTrigger_Init PROC
;;;243     */
;;;244    MID_StatusTypeDef MID_EXIC_PxTrigger_Init( EXIC_HandleTypeDef* MEXIC_PX)
000000  b510              PUSH     {r4,lr}
;;;245    {
000002  4604              MOV      r4,r0
;;;246        //===========================================================
;;;247        //Check the EXIC handle allocation.
;;;248        if(MEXIC_PX == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L12.12|
;;;249        {
;;;250            return(MID_FAILURE);
000008  2001              MOVS     r0,#1
                  |L12.10|
;;;251        }
;;;252        //============================================================
;;;253        //Check EXIC register address and define EXIC_STA flag shift
;;;254        switch((uint32_t)(&MEXIC_PX->Instance->PF.W))
;;;255        {
;;;256            case EXIC_PA_Base:
;;;257                              MEXIC_PX->EXIC_Port = EXIC_PORTA;
;;;258                              break;
;;;259            case EXIC_PB_Base:
;;;260                              MEXIC_PX->EXIC_Port = EXIC_PORTB;
;;;261                              break;
;;;262            case EXIC_PC_Base:
;;;263                              MEXIC_PX->EXIC_Port = EXIC_PORTC;
;;;264                              break;
;;;265            case EXIC_PD_Base:
;;;266                              MEXIC_PX->EXIC_Port = EXIC_PORTD;
;;;267                              break;
;;;268            #if defined(EXIC_PE_Base)
;;;269            case EXIC_PE_Base:
;;;270                              MEXIC_PX->EXIC_Port = EXIC_PORTE;
;;;271                              break;
;;;272            #endif
;;;273            default:
;;;274                              return(MID_FAILURE);
;;;275        } 
;;;276        //===========================================================
;;;277        //Allocate lock resource and initialize it.
;;;278        MEXIC_PX->Lock = MID_UnLocked;
;;;279        
;;;280        //----------------------------------------------------------
;;;281        //Inital the low level hardware
;;;282        MID_EXIC_MspInit(MEXIC_PX);
;;;283        
;;;284        //==========================================================
;;;285        //External interrupt OR & AND control
;;;286        MID_EXIC_PxTriggerAndUnmatch_Cmd( MEXIC_PX);
;;;287        MEXIC_PX->Instance->MSK.H[1] = MEXIC_PX->AND_Mask;
;;;288        MEXIC_PX->Instance->MSK.H[0] = MEXIC_PX->OR_Mask;
;;;289    
;;;290        //==========================================================
;;;291        //Clear All flag 
;;;292        //Interrupt IE Control
;;;293        if(MEXIC_PX->Interrupt > 1)
;;;294        {
;;;295            return(MID_FAILURE); 
;;;296        }
;;;297        __DRV_EXIC_CLEAR_PINTRIGGER_EVENTFLAG( MEXIC_PX , EXIC_PX_AllPIN);                                                         // Clear EXIC_Px_PF
;;;298        MID_EXIC_ClearITFlag(MEXIC_PX , ( EXIC_PX_AF | EXIC_PX_OF));                                                               // Clear EXIC_PX_AF & EXIC_PX_OF 
;;;299        MODIFY_REG( EXIC->INT.B[0] , (1 << MEXIC_PX->EXIC_Port) , ( MEXIC_PX->Interrupt << MEXIC_PX->EXIC_Port));   
;;;300        
;;;301        return(MID_SUCCESS);
;;;302    }
00000a  bd10              POP      {r4,pc}
                  |L12.12|
00000c  4921              LDR      r1,|L12.148|
00000e  6820              LDR      r0,[r4,#0]            ;254
000010  1840              ADDS     r0,r0,r1              ;254
000012  2800              CMP      r0,#0                 ;254
000014  d006              BEQ      |L12.36|
000016  2810              CMP      r0,#0x10              ;254
000018  d007              BEQ      |L12.42|
00001a  2820              CMP      r0,#0x20              ;254
00001c  d008              BEQ      |L12.48|
00001e  2830              CMP      r0,#0x30              ;254
000020  d10c              BNE      |L12.60|
000022  e008              B        |L12.54|
                  |L12.36|
000024  2000              MOVS     r0,#0                 ;257
000026  7120              STRB     r0,[r4,#4]            ;257
000028  e00a              B        |L12.64|
                  |L12.42|
00002a  2001              MOVS     r0,#1                 ;260
00002c  7120              STRB     r0,[r4,#4]            ;260
00002e  e007              B        |L12.64|
                  |L12.48|
000030  2002              MOVS     r0,#2                 ;263
000032  7120              STRB     r0,[r4,#4]            ;263
000034  e004              B        |L12.64|
                  |L12.54|
000036  2003              MOVS     r0,#3                 ;266
000038  7120              STRB     r0,[r4,#4]            ;266
00003a  e001              B        |L12.64|
                  |L12.60|
00003c  2001              MOVS     r0,#1                 ;274
00003e  e7e4              B        |L12.10|
                  |L12.64|
000040  bf00              NOP                            ;258
000042  2000              MOVS     r0,#0                 ;278
000044  7360              STRB     r0,[r4,#0xd]          ;278
000046  4620              MOV      r0,r4                 ;282
000048  f7fffffe          BL       MID_EXIC_MspInit
00004c  4620              MOV      r0,r4                 ;286
00004e  f7fffffe          BL       MID_EXIC_PxTriggerAndUnmatch_Cmd
000052  88e1              LDRH     r1,[r4,#6]            ;287
000054  6820              LDR      r0,[r4,#0]            ;287
000056  8141              STRH     r1,[r0,#0xa]          ;287
000058  8960              LDRH     r0,[r4,#0xa]          ;288
00005a  6821              LDR      r1,[r4,#0]            ;288
00005c  8108              STRH     r0,[r1,#8]            ;288
00005e  7b20              LDRB     r0,[r4,#0xc]          ;293
000060  2801              CMP      r0,#1                 ;293
000062  dd01              BLE      |L12.104|
000064  2001              MOVS     r0,#1                 ;295
000066  e7d0              B        |L12.10|
                  |L12.104|
000068  480b              LDR      r0,|L12.152|
00006a  6821              LDR      r1,[r4,#0]            ;297
00006c  6008              STR      r0,[r1,#0]            ;297
00006e  2103              MOVS     r1,#3                 ;298
000070  4620              MOV      r0,r4                 ;298
000072  f7fffffe          BL       MID_EXIC_ClearITFlag
000076  2005              MOVS     r0,#5                 ;299
000078  0700              LSLS     r0,r0,#28             ;299
00007a  7900              LDRB     r0,[r0,#4]            ;299
00007c  7922              LDRB     r2,[r4,#4]            ;299
00007e  2101              MOVS     r1,#1                 ;299
000080  4091              LSLS     r1,r1,r2              ;299
000082  4388              BICS     r0,r0,r1              ;299
000084  7b21              LDRB     r1,[r4,#0xc]          ;299
000086  4091              LSLS     r1,r1,r2              ;299
000088  4308              ORRS     r0,r0,r1              ;299
00008a  2105              MOVS     r1,#5                 ;299
00008c  0709              LSLS     r1,r1,#28             ;299
00008e  7108              STRB     r0,[r1,#4]            ;299
000090  2000              MOVS     r0,#0                 ;301
000092  e7ba              B        |L12.10|
;;;303    /**
                          ENDP

                  |L12.148|
                          DCD      0xafffffe0
                  |L12.152|
                          DCD      0x0000ffff

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_EXIC_MID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_MG32x02z_EXIC_MID_c_e97a5d1e____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___19_MG32x02z_EXIC_MID_c_e97a5d1e____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_MG32x02z_EXIC_MID_c_e97a5d1e____REVSH|
#line 496
|__asm___19_MG32x02z_EXIC_MID_c_e97a5d1e____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
