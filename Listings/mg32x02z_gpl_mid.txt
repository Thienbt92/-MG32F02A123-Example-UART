; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_gpl_mid.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_gpl_mid.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_gpl_mid.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_GPL_MID.c]
                          THUMB

                          AREA ||i.MID_GPL_CRC_Accumulate||, CODE, READONLY, ALIGN=1

                  MID_GPL_CRC_Accumulate PROC
;;;335     */
;;;336    uint32_t MID_GPL_CRC_Accumulate(GPL_HandleTypeDef *mgpl, uint32_t *pBuffer, uint32_t BufferLength)
000000  b5f8              PUSH     {r3-r7,lr}
;;;337    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;338        uint32_t index = 0U; /* GPL input data buffer index */
000006  2100              MOVS     r1,#0
;;;339        uint16_t * lpBuffer16 = (uint16_t *)pBuffer;
000008  4625              MOV      r5,r4
;;;340        uint8_t  * lpBuffer8 = (uint8_t *)pBuffer;
00000a  4626              MOV      r6,r4
;;;341        union{
;;;342            uint32_t W;
;;;343            uint16_t H[2];
;;;344            uint8_t  B[4];
;;;345        }temp;  /* GPL output (read from mgpl->Instance->DOUT register) */
;;;346    
;;;347        temp.W = 0;
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;348    
;;;349        /* Process locked */
;;;350        __MID_LOCK(mgpl); 
000010  bf00              NOP      
000012  2028              MOVS     r0,#0x28
000014  5cc0              LDRB     r0,[r0,r3]
000016  2801              CMP      r0,#1
000018  d101              BNE      |L1.30|
00001a  2002              MOVS     r0,#2
                  |L1.28|
;;;351    
;;;352        /* Change GPL peripheral state */  
;;;353        mgpl->State = MID_GPL_STATE_BUSY;
;;;354    
;;;355        switch (mgpl->Init.CRCInputDataWidth)
;;;356        {
;;;357            case GPL_CRC_INPUTDATA_WIDTH_32B:  
;;;358                /* Enter Data to the GPL calculator */
;;;359                for(index = 0U; index < BufferLength; index++)
;;;360                {
;;;361                    mgpl->Instance->DIN.W = pBuffer[index];
;;;362                }
;;;363                temp.W = mgpl->Instance->DOUT.W;
;;;364                break;
;;;365    
;;;366            case GPL_CRC_INPUTDATA_WIDTH_16B: 
;;;367                /* Enter Data to the GPL calculator */
;;;368              #if defined(MG32_1ST)
;;;369                if(mgpl->Init.InputDataByteOrder16Mode == GPL_INPUTDATA_BYTEORDER16_DISABLE)
;;;370                {
;;;371                    for(index = 0U; index < BufferLength; index++)
;;;372                    {
;;;373                        mgpl->Instance->DIN.H[0] = lpBuffer16[index];
;;;374                    }
;;;375                }
;;;376                else
;;;377                {
;;;378                    for(index = 0U; index < BufferLength; index++)
;;;379                    {
;;;380                        temp.H[0] = lpBuffer16[index];
;;;381                        temp.B[3] = temp.B[0];
;;;382                        temp.B[0] = temp.B[1];
;;;383                        temp.B[1] = temp.B[3];
;;;384                        mgpl->Instance->DIN.H[0] = temp.H[0];
;;;385                    }
;;;386                }
;;;387                temp.W = mgpl->Instance->DOUT.W;
;;;388              #else
;;;389                for(index = 0U; index < BufferLength; index++)
;;;390                {
;;;391                    mgpl->Instance->DIN.H[0] = lpBuffer16[index];
;;;392                }
;;;393                temp.W = mgpl->Instance->DOUT.W;
;;;394              #endif
;;;395                break;
;;;396    
;;;397            case GPL_CRC_INPUTDATA_WIDTH_8B: 
;;;398                for(index = 0U; index < BufferLength; index++)
;;;399                {
;;;400                    mgpl->Instance->DIN.B[0] = lpBuffer8[index];
;;;401                }
;;;402                temp.W = mgpl->Instance->DOUT.W;
;;;403                break;
;;;404    
;;;405            default:
;;;406                break;
;;;407        }
;;;408    
;;;409        /* Change GPL peripheral state */    
;;;410        mgpl->State = MID_GPL_STATE_READY; 
;;;411    
;;;412        /* Process unlocked */
;;;413        __MID_UNLOCK(mgpl);
;;;414    
;;;415        /* Return the GPL computed value */ 
;;;416        return temp.W;
;;;417    }
00001c  bdf8              POP      {r3-r7,pc}
                  |L1.30|
00001e  2001              MOVS     r0,#1                 ;350
000020  2728              MOVS     r7,#0x28              ;350
000022  54f8              STRB     r0,[r7,r3]            ;350
000024  bf00              NOP                            ;350
000026  2002              MOVS     r0,#2                 ;353
000028  2729              MOVS     r7,#0x29              ;353
00002a  54f8              STRB     r0,[r7,r3]            ;353
00002c  6998              LDR      r0,[r3,#0x18]         ;355
00002e  2800              CMP      r0,#0                 ;355
000030  d033              BEQ      |L1.154|
000032  2810              CMP      r0,#0x10              ;355
000034  d00e              BEQ      |L1.84|
000036  2820              CMP      r0,#0x20              ;355
000038  d13b              BNE      |L1.178|
00003a  2100              MOVS     r1,#0                 ;359
00003c  e004              B        |L1.72|
                  |L1.62|
00003e  0088              LSLS     r0,r1,#2              ;361
000040  5820              LDR      r0,[r4,r0]            ;361
000042  681f              LDR      r7,[r3,#0]            ;361
000044  61b8              STR      r0,[r7,#0x18]         ;361
000046  1c49              ADDS     r1,r1,#1              ;359
                  |L1.72|
000048  4291              CMP      r1,r2                 ;359
00004a  d3f8              BCC      |L1.62|
00004c  6818              LDR      r0,[r3,#0]            ;363
00004e  69c0              LDR      r0,[r0,#0x1c]         ;363
000050  9000              STR      r0,[sp,#0]            ;363
000052  e02f              B        |L1.180|
                  |L1.84|
000054  6918              LDR      r0,[r3,#0x10]         ;369
000056  2800              CMP      r0,#0                 ;369
000058  d109              BNE      |L1.110|
00005a  2100              MOVS     r1,#0                 ;371
00005c  e004              B        |L1.104|
                  |L1.94|
00005e  0048              LSLS     r0,r1,#1              ;373
000060  5a28              LDRH     r0,[r5,r0]            ;373
000062  681f              LDR      r7,[r3,#0]            ;373
000064  8338              STRH     r0,[r7,#0x18]         ;373
000066  1c49              ADDS     r1,r1,#1              ;371
                  |L1.104|
000068  4291              CMP      r1,r2                 ;371
00006a  d3f8              BCC      |L1.94|
00006c  e011              B        |L1.146|
                  |L1.110|
00006e  2100              MOVS     r1,#0                 ;378
000070  e00d              B        |L1.142|
                  |L1.114|
000072  0048              LSLS     r0,r1,#1              ;380
000074  5a2f              LDRH     r7,[r5,r0]            ;380
000076  4668              MOV      r0,sp                 ;380
000078  8007              STRH     r7,[r0,#0]            ;380
00007a  7807              LDRB     r7,[r0,#0]            ;381
00007c  70c7              STRB     r7,[r0,#3]            ;381
00007e  7847              LDRB     r7,[r0,#1]            ;382
000080  7007              STRB     r7,[r0,#0]            ;382
000082  78c7              LDRB     r7,[r0,#3]            ;383
000084  7047              STRB     r7,[r0,#1]            ;383
000086  8800              LDRH     r0,[r0,#0]            ;384
000088  681f              LDR      r7,[r3,#0]            ;384
00008a  8338              STRH     r0,[r7,#0x18]         ;384
00008c  1c49              ADDS     r1,r1,#1              ;378
                  |L1.142|
00008e  4291              CMP      r1,r2                 ;378
000090  d3ef              BCC      |L1.114|
                  |L1.146|
000092  6818              LDR      r0,[r3,#0]            ;387
000094  69c0              LDR      r0,[r0,#0x1c]         ;387
000096  9000              STR      r0,[sp,#0]            ;387
000098  e00c              B        |L1.180|
                  |L1.154|
00009a  2100              MOVS     r1,#0                 ;398
00009c  e003              B        |L1.166|
                  |L1.158|
00009e  5c70              LDRB     r0,[r6,r1]            ;400
0000a0  681f              LDR      r7,[r3,#0]            ;400
0000a2  7638              STRB     r0,[r7,#0x18]         ;400
0000a4  1c49              ADDS     r1,r1,#1              ;398
                  |L1.166|
0000a6  4291              CMP      r1,r2                 ;398
0000a8  d3f9              BCC      |L1.158|
0000aa  6818              LDR      r0,[r3,#0]            ;402
0000ac  69c0              LDR      r0,[r0,#0x1c]         ;402
0000ae  9000              STR      r0,[sp,#0]            ;402
0000b0  e000              B        |L1.180|
                  |L1.178|
0000b2  bf00              NOP                            ;406
                  |L1.180|
0000b4  bf00              NOP                            ;364
0000b6  2001              MOVS     r0,#1                 ;410
0000b8  2729              MOVS     r7,#0x29              ;410
0000ba  54f8              STRB     r0,[r7,r3]            ;410
0000bc  bf00              NOP                            ;413
0000be  2000              MOVS     r0,#0                 ;413
0000c0  2728              MOVS     r7,#0x28              ;413
0000c2  54f8              STRB     r0,[r7,r3]            ;413
0000c4  bf00              NOP                            ;413
0000c6  9800              LDR      r0,[sp,#0]            ;416
0000c8  e7a8              B        |L1.28|
;;;418    
                          ENDP


                          AREA ||i.MID_GPL_CRC_Calculate||, CODE, READONLY, ALIGN=1

                  MID_GPL_CRC_Calculate PROC
;;;440     */
;;;441    uint32_t MID_GPL_CRC_Calculate(GPL_HandleTypeDef *mgpl, uint32_t *pBuffer, uint32_t BufferLength)
000000  b5f8              PUSH     {r3-r7,lr}
;;;442    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;443        uint32_t index = 0U; /* GPL input data buffer index */
000006  2100              MOVS     r1,#0
;;;444        uint16_t * lpBuffer16 = (uint16_t *)pBuffer;
000008  4625              MOV      r5,r4
;;;445        uint8_t  * lpBuffer8 = (uint8_t *)pBuffer;
00000a  4626              MOV      r6,r4
;;;446        union{
;;;447            uint32_t W;
;;;448            uint16_t H[2];
;;;449            uint8_t  B[4];
;;;450        }temp;  /* GPL output (read from mgpl->Instance->DOUT register) */
;;;451    
;;;452        temp.W = 0;
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;453    
;;;454        /* Process locked */
;;;455        __MID_LOCK(mgpl); 
000010  bf00              NOP      
000012  2028              MOVS     r0,#0x28
000014  5cc0              LDRB     r0,[r0,r3]
000016  2801              CMP      r0,#1
000018  d101              BNE      |L2.30|
00001a  2002              MOVS     r0,#2
                  |L2.28|
;;;456    
;;;457        /* Change GPL peripheral state */  
;;;458        mgpl->State = MID_GPL_STATE_BUSY;
;;;459    
;;;460        /* Reset GPL Calculation Unit (mgpl->Instance->INIT is 
;;;461         * written in mgpl->Instance->DR) */
;;;462        __MID_GPL_CRC_DISABLE(mgpl);
;;;463        __MID_GPL_CRC_CRCINITIALVALUE_RESET(mgpl);
;;;464        __MID_GPL_DIN_RESET(mgpl);
;;;465        __MID_GPL_CRC_ENABLE(mgpl);
;;;466    
;;;467        switch (mgpl->Init.CRCInputDataWidth)
;;;468        {
;;;469            case GPL_CRC_INPUTDATA_WIDTH_32B:  
;;;470                /* Enter Data to the GPL calculator */
;;;471                for(index = 0U; index < BufferLength; index++)
;;;472                {
;;;473                    mgpl->Instance->DIN.W = pBuffer[index];
;;;474                }
;;;475                temp.W = mgpl->Instance->DOUT.W;
;;;476                break;
;;;477    
;;;478            case GPL_CRC_INPUTDATA_WIDTH_16B: 
;;;479                /* Enter Data to the GPL calculator */
;;;480              #if defined(MG32_1ST)
;;;481                if(mgpl->Init.InputDataByteOrder16Mode == GPL_INPUTDATA_BYTEORDER16_DISABLE)
;;;482                {
;;;483                    for(index = 0U; index < BufferLength; index++)
;;;484                    {
;;;485                        mgpl->Instance->DIN.H[0] = lpBuffer16[index];
;;;486                    }
;;;487                }
;;;488                else
;;;489                {
;;;490                    for(index = 0U; index < BufferLength; index++)
;;;491                    {
;;;492                        temp.H[0] = lpBuffer16[index];
;;;493                        temp.B[3] = temp.B[0];
;;;494                        temp.B[0] = temp.B[1];
;;;495                        temp.B[1] = temp.B[3];
;;;496                        mgpl->Instance->DIN.H[0] = temp.H[0];
;;;497                    }
;;;498                }
;;;499                temp.W = mgpl->Instance->DOUT.W;
;;;500              #else
;;;501                for(index = 0U; index < BufferLength; index++)
;;;502                {
;;;503                    mgpl->Instance->DIN.H[0] = lpBuffer16[index];
;;;504                }
;;;505                temp.W = mgpl->Instance->DOUT.W;
;;;506              #endif
;;;507                break;
;;;508    
;;;509            case GPL_CRC_INPUTDATA_WIDTH_8B: 
;;;510                for(index = 0U; index < BufferLength; index++)
;;;511                {
;;;512                    mgpl->Instance->DIN.B[0] = lpBuffer8[index];
;;;513                }
;;;514                temp.W = mgpl->Instance->DOUT.W;
;;;515                break;
;;;516    
;;;517            default:
;;;518                break;
;;;519        }
;;;520    
;;;521        /* Change GPL peripheral state */    
;;;522        mgpl->State = MID_GPL_STATE_READY; 
;;;523    
;;;524        /* Process unlocked */
;;;525        __MID_UNLOCK(mgpl);
;;;526    
;;;527        /* Return the CRC computed value */ 
;;;528        return temp.W;
;;;529    }
00001c  bdf8              POP      {r3-r7,pc}
                  |L2.30|
00001e  2001              MOVS     r0,#1                 ;455
000020  2728              MOVS     r7,#0x28              ;455
000022  54f8              STRB     r0,[r7,r3]            ;455
000024  bf00              NOP                            ;455
000026  2002              MOVS     r0,#2                 ;458
000028  2729              MOVS     r7,#0x29              ;458
00002a  54f8              STRB     r0,[r7,r3]            ;458
00002c  6818              LDR      r0,[r3,#0]            ;462
00002e  6940              LDR      r0,[r0,#0x14]         ;462
000030  0840              LSRS     r0,r0,#1              ;462
000032  0040              LSLS     r0,r0,#1              ;462
000034  681f              LDR      r7,[r3,#0]            ;462
000036  6178              STR      r0,[r7,#0x14]         ;462
000038  681f              LDR      r7,[r3,#0]            ;463
00003a  69d8              LDR      r0,[r3,#0x1c]         ;463
00003c  6278              STR      r0,[r7,#0x24]         ;463
00003e  6818              LDR      r0,[r3,#0]            ;464
000040  6980              LDR      r0,[r0,#0x18]         ;464
000042  681f              LDR      r7,[r3,#0]            ;464
000044  61b8              STR      r0,[r7,#0x18]         ;464
000046  6818              LDR      r0,[r3,#0]            ;465
000048  6940              LDR      r0,[r0,#0x14]         ;465
00004a  2701              MOVS     r7,#1                 ;465
00004c  4338              ORRS     r0,r0,r7              ;465
00004e  681f              LDR      r7,[r3,#0]            ;465
000050  6178              STR      r0,[r7,#0x14]         ;465
000052  6998              LDR      r0,[r3,#0x18]         ;467
000054  2800              CMP      r0,#0                 ;467
000056  d033              BEQ      |L2.192|
000058  2810              CMP      r0,#0x10              ;467
00005a  d00e              BEQ      |L2.122|
00005c  2820              CMP      r0,#0x20              ;467
00005e  d13b              BNE      |L2.216|
000060  2100              MOVS     r1,#0                 ;471
000062  e004              B        |L2.110|
                  |L2.100|
000064  0088              LSLS     r0,r1,#2              ;473
000066  5820              LDR      r0,[r4,r0]            ;473
000068  681f              LDR      r7,[r3,#0]            ;473
00006a  61b8              STR      r0,[r7,#0x18]         ;473
00006c  1c49              ADDS     r1,r1,#1              ;471
                  |L2.110|
00006e  4291              CMP      r1,r2                 ;471
000070  d3f8              BCC      |L2.100|
000072  6818              LDR      r0,[r3,#0]            ;475
000074  69c0              LDR      r0,[r0,#0x1c]         ;475
000076  9000              STR      r0,[sp,#0]            ;475
000078  e02f              B        |L2.218|
                  |L2.122|
00007a  6918              LDR      r0,[r3,#0x10]         ;481
00007c  2800              CMP      r0,#0                 ;481
00007e  d109              BNE      |L2.148|
000080  2100              MOVS     r1,#0                 ;483
000082  e004              B        |L2.142|
                  |L2.132|
000084  0048              LSLS     r0,r1,#1              ;485
000086  5a28              LDRH     r0,[r5,r0]            ;485
000088  681f              LDR      r7,[r3,#0]            ;485
00008a  8338              STRH     r0,[r7,#0x18]         ;485
00008c  1c49              ADDS     r1,r1,#1              ;483
                  |L2.142|
00008e  4291              CMP      r1,r2                 ;483
000090  d3f8              BCC      |L2.132|
000092  e011              B        |L2.184|
                  |L2.148|
000094  2100              MOVS     r1,#0                 ;490
000096  e00d              B        |L2.180|
                  |L2.152|
000098  0048              LSLS     r0,r1,#1              ;492
00009a  5a2f              LDRH     r7,[r5,r0]            ;492
00009c  4668              MOV      r0,sp                 ;492
00009e  8007              STRH     r7,[r0,#0]            ;492
0000a0  7807              LDRB     r7,[r0,#0]            ;493
0000a2  70c7              STRB     r7,[r0,#3]            ;493
0000a4  7847              LDRB     r7,[r0,#1]            ;494
0000a6  7007              STRB     r7,[r0,#0]            ;494
0000a8  78c7              LDRB     r7,[r0,#3]            ;495
0000aa  7047              STRB     r7,[r0,#1]            ;495
0000ac  8800              LDRH     r0,[r0,#0]            ;496
0000ae  681f              LDR      r7,[r3,#0]            ;496
0000b0  8338              STRH     r0,[r7,#0x18]         ;496
0000b2  1c49              ADDS     r1,r1,#1              ;490
                  |L2.180|
0000b4  4291              CMP      r1,r2                 ;490
0000b6  d3ef              BCC      |L2.152|
                  |L2.184|
0000b8  6818              LDR      r0,[r3,#0]            ;499
0000ba  69c0              LDR      r0,[r0,#0x1c]         ;499
0000bc  9000              STR      r0,[sp,#0]            ;499
0000be  e00c              B        |L2.218|
                  |L2.192|
0000c0  2100              MOVS     r1,#0                 ;510
0000c2  e003              B        |L2.204|
                  |L2.196|
0000c4  5c70              LDRB     r0,[r6,r1]            ;512
0000c6  681f              LDR      r7,[r3,#0]            ;512
0000c8  7638              STRB     r0,[r7,#0x18]         ;512
0000ca  1c49              ADDS     r1,r1,#1              ;510
                  |L2.204|
0000cc  4291              CMP      r1,r2                 ;510
0000ce  d3f9              BCC      |L2.196|
0000d0  6818              LDR      r0,[r3,#0]            ;514
0000d2  69c0              LDR      r0,[r0,#0x1c]         ;514
0000d4  9000              STR      r0,[sp,#0]            ;514
0000d6  e000              B        |L2.218|
                  |L2.216|
0000d8  bf00              NOP                            ;518
                  |L2.218|
0000da  bf00              NOP                            ;476
0000dc  2001              MOVS     r0,#1                 ;522
0000de  2729              MOVS     r7,#0x29              ;522
0000e0  54f8              STRB     r0,[r7,r3]            ;522
0000e2  bf00              NOP                            ;525
0000e4  2000              MOVS     r0,#0                 ;525
0000e6  2728              MOVS     r7,#0x28              ;525
0000e8  54f8              STRB     r0,[r7,r3]            ;525
0000ea  bf00              NOP                            ;525
0000ec  9800              LDR      r0,[sp,#0]            ;528
0000ee  e795              B        |L2.28|
;;;530    
                          ENDP


                          AREA ||i.MID_GPL_DeInit||, CODE, READONLY, ALIGN=1

                  MID_GPL_DeInit PROC
;;;219     */
;;;220    MID_StatusTypeDef MID_GPL_DeInit(GPL_HandleTypeDef *mgpl)
000000  b510              PUSH     {r4,lr}
;;;221    { 
000002  4604              MOV      r4,r0
;;;222        /* Check the GPL handle allocation */
;;;223        if(mgpl == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L3.12|
;;;224        {
;;;225            return MID_ERROR;
000008  2001              MOVS     r0,#1
                  |L3.10|
;;;226        }
;;;227    
;;;228        /* Check the parameters */
;;;229        assert_param(mgpl->Instance == GPL);
;;;230    
;;;231        /* Check the GPL peripheral state */
;;;232        if(mgpl->State == MID_GPL_STATE_BUSY)
;;;233        {
;;;234            return MID_BUSY;
;;;235        }
;;;236    
;;;237        /* Change GPL peripheral state */
;;;238        mgpl->State = MID_GPL_STATE_BUSY;
;;;239    
;;;240        /* Reset GPL calculation unit */
;;;241        mgpl->Instance->CR1.W = 0UL;
;;;242        mgpl->Instance->CR0.W = 0UL;
;;;243        mgpl->Instance->CRCINIT.W = 0UL;
;;;244    
;;;245        /* DeInit the low level hardware */
;;;246        MID_GPL_MspDeInit(mgpl);
;;;247    
;;;248        /* Change GPL peripheral state */
;;;249        mgpl->State = MID_GPL_STATE_RESET;
;;;250    
;;;251        /* Process unlocked */
;;;252        __MID_UNLOCK(mgpl);
;;;253    
;;;254        /* Return function status */
;;;255        return MID_OK;
;;;256    }
00000a  bd10              POP      {r4,pc}
                  |L3.12|
00000c  2029              MOVS     r0,#0x29              ;232
00000e  5d00              LDRB     r0,[r0,r4]            ;232
000010  2802              CMP      r0,#2                 ;232
000012  d100              BNE      |L3.22|
000014  e7f9              B        |L3.10|
                  |L3.22|
000016  2102              MOVS     r1,#2                 ;238
000018  2029              MOVS     r0,#0x29              ;238
00001a  5501              STRB     r1,[r0,r4]            ;238
00001c  2000              MOVS     r0,#0                 ;241
00001e  6821              LDR      r1,[r4,#0]            ;241
000020  6148              STR      r0,[r1,#0x14]         ;241
000022  6821              LDR      r1,[r4,#0]            ;242
000024  6108              STR      r0,[r1,#0x10]         ;242
000026  6821              LDR      r1,[r4,#0]            ;243
000028  6248              STR      r0,[r1,#0x24]         ;243
00002a  4620              MOV      r0,r4                 ;246
00002c  f7fffffe          BL       MID_GPL_MspDeInit
000030  2100              MOVS     r1,#0                 ;249
000032  2029              MOVS     r0,#0x29              ;249
000034  5501              STRB     r1,[r0,r4]            ;249
000036  bf00              NOP                            ;252
000038  2028              MOVS     r0,#0x28              ;252
00003a  5501              STRB     r1,[r0,r4]            ;252
00003c  bf00              NOP                            ;252
00003e  2000              MOVS     r0,#0                 ;255
000040  e7e3              B        |L3.10|
;;;257    
                          ENDP


                          AREA ||i.MID_GPL_GetState||, CODE, READONLY, ALIGN=1

                  MID_GPL_GetState PROC
;;;558     */
;;;559    MID_GPL_StateTypeDef MID_GPL_GetState(GPL_HandleTypeDef *mgpl)
000000  4601              MOV      r1,r0
;;;560    {
;;;561        /* Return GPL handle state */
;;;562        return mgpl->State;
000002  2029              MOVS     r0,#0x29
000004  5c40              LDRB     r0,[r0,r1]
;;;563    }
000006  4770              BX       lr
;;;564    
                          ENDP


                          AREA ||i.MID_GPL_Init||, CODE, READONLY, ALIGN=1

                  MID_GPL_Init PROC
;;;137     */
;;;138    MID_StatusTypeDef MID_GPL_Init(GPL_HandleTypeDef *mgpl)
000000  b510              PUSH     {r4,lr}
;;;139    {
000002  4604              MOV      r4,r0
;;;140        /* Check the GPL handle allocation */
;;;141        if(mgpl == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L5.12|
;;;142        {
;;;143            return MID_ERROR;
000008  2001              MOVS     r0,#1
                  |L5.10|
;;;144        }
;;;145    
;;;146        /* Check the parameters */
;;;147        assert_param(mgpl->Instance == GPL);
;;;148    
;;;149        mgpl->Instance->CR1.B[0] &= ~GPL_CR1_CRC_EN_mask_b0;
;;;150        mgpl->Instance->CRCINIT.W = mgpl->Init.CRCInitValue;
;;;151    
;;;152        if(mgpl->State == MID_GPL_STATE_RESET)
;;;153        {   
;;;154            /* Allocate lock resource and initialize it */
;;;155            mgpl->Lock = MID_UNLOCKED;
;;;156    
;;;157            /* Init the low level hardware */
;;;158            MID_GPL_MspInit(mgpl);
;;;159        }
;;;160    
;;;161        mgpl->State = MID_GPL_STATE_BUSY; 
;;;162    
;;;163        /* Reset DIN */
;;;164        __MID_GPL_SET_DIN(mgpl, 0x00000000UL);
;;;165    
;;;166        /* set input data trasfor mode */
;;;167        assert_param(IS_GPL_INPUTDATA_PARITY(mgpl->Init.InputDataParityMode));
;;;168        assert_param(IS_GPL_INPUTDATA_INVERSE(mgpl->Init.InputDataInverseMode));
;;;169        assert_param(IS_GPL_INPUTDATA_BYTEORDER(mgpl->Init.InputDataByteOrderMode));
;;;170        assert_param(IS_GPL_INPUTDATA_BYTEORDER16(mgpl->Init.InputDataByteOrder16Mode));
;;;171        assert_param(IS_GPL_INPUTDATA_BITORDER(mgpl->Init.InputDataBitOrderMode));
;;;172    
;;;173        /* Set Input Data Parity / Inverse / Byte Order / Bit Order Mode. */
;;;174      #if !defined(MG32_1ST)
;;;175        mgpl->Instance->CR0.W = (mgpl->Init.InputDataParityMode | \
;;;176                                 mgpl->Init.InputDataInverseMode | \
;;;177                                 mgpl->Init.InputDataByteOrderMode | \
;;;178                                 mgpl->Init.InputDataByteOrder16Mode | \
;;;179                                 mgpl->Init.InputDataBitOrderMode);
;;;180      #else
;;;181        mgpl->Instance->CR0.W = (mgpl->Init.InputDataParityMode | \
;;;182                                 mgpl->Init.InputDataInverseMode | \
;;;183                                 mgpl->Init.InputDataByteOrderMode | \
;;;184                                 mgpl->Init.InputDataBitOrderMode);
;;;185      #endif
;;;186    
;;;187        WRITE_REG(mgpl->Instance->CRCINIT.W, mgpl->Init.CRCInitValue);
;;;188    
;;;189        /* Set CRC Input Data Width / CRC Polynomial / Output Bit Order Mode */
;;;190        assert_param(IS_GPL_CRC_INPUTDATA_WIDTH(mgpl->Init.InputDataByteOrderMode));
;;;191        assert_param(IS_GPL_CRC_POLYNOMIAL(mgpl->Init.InputDataByteOrder16Mode));
;;;192        assert_param(IS_GPL_OUTPUTDATA_BITORDER(mgpl->Init.InputDataBitOrderMode));
;;;193        mgpl->Instance->CR1.W = (mgpl->Init.CRCInputDataWidth | \
;;;194                                 mgpl->Init.CRCPolynomial | \
;;;195                                 mgpl->Init.OutputDataBitOrderMode);
;;;196     
;;;197        /* Set GPL CRC initial value has been 
;;;198         * picked up by user */
;;;199        WRITE_REG(mgpl->Instance->CRCINIT.W, mgpl->Init.CRCInitValue);
;;;200    
;;;201        /* Enable GPL CRC */
;;;202        mgpl->Instance->CR1.B[0] |= GPL_CR1_CRC_EN_mask_b0;
;;;203    
;;;204        /* Change GPL peripheral state */
;;;205        mgpl->State = MID_GPL_STATE_READY;
;;;206    
;;;207        /* Return function status */
;;;208        return MID_OK;
;;;209    }
00000a  bd10              POP      {r4,pc}
                  |L5.12|
00000c  6820              LDR      r0,[r4,#0]            ;149
00000e  7d00              LDRB     r0,[r0,#0x14]         ;149
000010  0840              LSRS     r0,r0,#1              ;149
000012  0040              LSLS     r0,r0,#1              ;149
000014  6821              LDR      r1,[r4,#0]            ;149
000016  7508              STRB     r0,[r1,#0x14]         ;149
000018  6821              LDR      r1,[r4,#0]            ;150
00001a  69e0              LDR      r0,[r4,#0x1c]         ;150
00001c  6248              STR      r0,[r1,#0x24]         ;150
00001e  2029              MOVS     r0,#0x29              ;152
000020  5d00              LDRB     r0,[r0,r4]            ;152
000022  2800              CMP      r0,#0                 ;152
000024  d105              BNE      |L5.50|
000026  2100              MOVS     r1,#0                 ;155
000028  2028              MOVS     r0,#0x28              ;155
00002a  5501              STRB     r1,[r0,r4]            ;155
00002c  4620              MOV      r0,r4                 ;158
00002e  f7fffffe          BL       MID_GPL_MspInit
                  |L5.50|
000032  2102              MOVS     r1,#2                 ;161
000034  2029              MOVS     r0,#0x29              ;161
000036  5501              STRB     r1,[r0,r4]            ;161
000038  2000              MOVS     r0,#0                 ;164
00003a  6821              LDR      r1,[r4,#0]            ;164
00003c  6188              STR      r0,[r1,#0x18]         ;164
00003e  68a1              LDR      r1,[r4,#8]            ;181
000040  6860              LDR      r0,[r4,#4]            ;181
000042  4308              ORRS     r0,r0,r1              ;181
000044  68e1              LDR      r1,[r4,#0xc]          ;181
000046  4308              ORRS     r0,r0,r1              ;181
000048  6961              LDR      r1,[r4,#0x14]         ;181
00004a  4308              ORRS     r0,r0,r1              ;181
00004c  6821              LDR      r1,[r4,#0]            ;181
00004e  6108              STR      r0,[r1,#0x10]         ;181
000050  6821              LDR      r1,[r4,#0]            ;187
000052  69e0              LDR      r0,[r4,#0x1c]         ;187
000054  6248              STR      r0,[r1,#0x24]         ;187
000056  6a21              LDR      r1,[r4,#0x20]         ;193
000058  69a0              LDR      r0,[r4,#0x18]         ;193
00005a  4308              ORRS     r0,r0,r1              ;193
00005c  6a61              LDR      r1,[r4,#0x24]         ;193
00005e  4308              ORRS     r0,r0,r1              ;193
000060  6821              LDR      r1,[r4,#0]            ;193
000062  6148              STR      r0,[r1,#0x14]         ;193
000064  6821              LDR      r1,[r4,#0]            ;199
000066  69e0              LDR      r0,[r4,#0x1c]         ;199
000068  6248              STR      r0,[r1,#0x24]         ;199
00006a  6820              LDR      r0,[r4,#0]            ;202
00006c  7d00              LDRB     r0,[r0,#0x14]         ;202
00006e  2101              MOVS     r1,#1                 ;202
000070  4308              ORRS     r0,r0,r1              ;202
000072  6821              LDR      r1,[r4,#0]            ;202
000074  7508              STRB     r0,[r1,#0x14]         ;202
000076  2101              MOVS     r1,#1                 ;205
000078  2029              MOVS     r0,#0x29              ;205
00007a  5501              STRB     r1,[r0,r4]            ;205
00007c  2000              MOVS     r0,#0                 ;208
00007e  e7c4              B        |L5.10|
;;;210    
                          ENDP


                          AREA ||i.MID_GPL_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_GPL_MspDeInit PROC
;;;281      */
;;;282    __weak void MID_GPL_MspDeInit(GPL_HandleTypeDef *mgpl)
000000  4770              BX       lr
;;;283    {
;;;284        /* Prevent unused argument(s) compilation warning */
;;;285        UNUSED(mgpl);
;;;286    
;;;287        /* NOTE : This function should not be modified, when the callback is needed,
;;;288                  the MID_GPL_MspDeInit can be implemented in the user file
;;;289        */
;;;290    }
;;;291    
                          ENDP


                          AREA ||i.MID_GPL_MspInit||, CODE, READONLY, ALIGN=1

                  MID_GPL_MspInit PROC
;;;264     */
;;;265    __weak void MID_GPL_MspInit(GPL_HandleTypeDef *mgpl)
000000  4770              BX       lr
;;;266    {
;;;267        /* Prevent unused argument(s) compilation warning */
;;;268        UNUSED(mgpl);
;;;269    
;;;270        /* NOTE : This function should not be modified, when the callback is needed,
;;;271                the MID_GPL_MspInit can be implemented in the user file
;;;272        */
;;;273    }
;;;274    
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_GPL_MID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_GPL_MID_c_c7f05a7e____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_GPL_MID_c_c7f05a7e____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_GPL_MID_c_c7f05a7e____REVSH|
#line 496
|__asm___18_MG32x02z_GPL_MID_c_c7f05a7e____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
