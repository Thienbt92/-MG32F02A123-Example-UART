; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_gpl_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_gpl_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_gpl_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_GPL_DRV.c]
                          THUMB

                          AREA ||i.GPL_AfterBitOrderChange_Select||, CODE, READONLY, ALIGN=1

                  GPL_AfterBitOrderChange_Select PROC
;;;585     */
;;;586    void GPL_AfterBitOrderChange_Select(uint32_t Select)
000000  214b              MOVS     r1,#0x4b
;;;587    {
;;;588        GPL->CR1.W = (GPL->CR1.W & (~GPL_AFTER_BIT_ORDER_MASK)) | Select;
000002  0609              LSLS     r1,r1,#24
000004  6949              LDR      r1,[r1,#0x14]
000006  22c0              MOVS     r2,#0xc0
000008  4391              BICS     r1,r1,r2
00000a  4301              ORRS     r1,r1,r0
00000c  224b              MOVS     r2,#0x4b
00000e  0612              LSLS     r2,r2,#24
000010  6151              STR      r1,[r2,#0x14]
;;;589    }
000012  4770              BX       lr
;;;590    
                          ENDP


                          AREA ||i.GPL_BeforeBitOrderChange_Select||, CODE, READONLY, ALIGN=1

                  GPL_BeforeBitOrderChange_Select PROC
;;;554     */
;;;555    void GPL_BeforeBitOrderChange_Select(uint32_t Select)
000000  214b              MOVS     r1,#0x4b
;;;556    {
;;;557        GPL->CR0.W = (GPL->CR0.W & (~GPL_BEFORE_BIT_ORDER_MASK)) | Select;
000002  0609              LSLS     r1,r1,#24
000004  6909              LDR      r1,[r1,#0x10]
000006  220c              MOVS     r2,#0xc
000008  4391              BICS     r1,r1,r2
00000a  4301              ORRS     r1,r1,r0
00000c  224b              MOVS     r2,#0x4b
00000e  0612              LSLS     r2,r2,#24
000010  6111              STR      r1,[r2,#0x10]
;;;558    }
000012  4770              BX       lr
;;;559    
                          ENDP


                          AREA ||i.GPL_ByteOrderChange_Cmd||, CODE, READONLY, ALIGN=1

                  GPL_ByteOrderChange_Cmd PROC
;;;481     */
;;;482    void GPL_ByteOrderChange_Cmd(FunctionalState State)
000000  2801              CMP      r0,#1
;;;483    {
;;;484        if(State == ENABLE)
000002  d108              BNE      |L3.22|
;;;485            GPL->CR0.W |= GPL_BYTE_ORDER_CHANGE_MASK;
000004  214b              MOVS     r1,#0x4b
000006  0609              LSLS     r1,r1,#24
000008  6909              LDR      r1,[r1,#0x10]
00000a  2202              MOVS     r2,#2
00000c  4311              ORRS     r1,r1,r2
00000e  224b              MOVS     r2,#0x4b
000010  0612              LSLS     r2,r2,#24
000012  6111              STR      r1,[r2,#0x10]
000014  e007              B        |L3.38|
                  |L3.22|
;;;486        else
;;;487            GPL->CR0.W &= (GPL_BYTE_ORDER_CHANGE_MASK);
000016  214b              MOVS     r1,#0x4b
000018  0609              LSLS     r1,r1,#24
00001a  6909              LDR      r1,[r1,#0x10]
00001c  2202              MOVS     r2,#2
00001e  4011              ANDS     r1,r1,r2
000020  224b              MOVS     r2,#0x4b
000022  0612              LSLS     r2,r2,#24
000024  6111              STR      r1,[r2,#0x10]
                  |L3.38|
;;;488    }
000026  4770              BX       lr
;;;489    
                          ENDP


                          AREA ||i.GPL_CRC_Cmd||, CODE, READONLY, ALIGN=1

                  GPL_CRC_Cmd PROC
;;;704     */
;;;705    void GPL_CRC_Cmd(FunctionalState State)
000000  2801              CMP      r0,#1
;;;706    {
;;;707        if(State == ENABLE)
000002  d108              BNE      |L4.22|
;;;708            GPL->CR1.W |= GPL_CRC_MASK;
000004  214b              MOVS     r1,#0x4b
000006  0609              LSLS     r1,r1,#24
000008  6949              LDR      r1,[r1,#0x14]
00000a  2201              MOVS     r2,#1
00000c  4311              ORRS     r1,r1,r2
00000e  224b              MOVS     r2,#0x4b
000010  0612              LSLS     r2,r2,#24
000012  6151              STR      r1,[r2,#0x14]
000014  e007              B        |L4.38|
                  |L4.22|
;;;709        else
;;;710            GPL->CR1.W &= (~GPL_CRC_MASK);
000016  214b              MOVS     r1,#0x4b
000018  0609              LSLS     r1,r1,#24
00001a  6949              LDR      r1,[r1,#0x14]
00001c  0849              LSRS     r1,r1,#1
00001e  0049              LSLS     r1,r1,#1
000020  224b              MOVS     r2,#0x4b
000022  0612              LSLS     r2,r2,#24
000024  6151              STR      r1,[r2,#0x14]
                  |L4.38|
;;;711    }
000026  4770              BX       lr
;;;712    
                          ENDP


                          AREA ||i.GPL_CRC_Data_Size_Select||, CODE, READONLY, ALIGN=1

                  GPL_CRC_Data_Size_Select PROC
;;;652     */
;;;653    void GPL_CRC_Data_Size_Select(uint32_t Select)
000000  214b              MOVS     r1,#0x4b
;;;654    {
;;;655        GPL->CR1.W = (GPL->CR1.W & (~GPL_CRC_DATA_SIZE_MASK)) | Select;
000002  0609              LSLS     r1,r1,#24
000004  6949              LDR      r1,[r1,#0x14]
000006  2230              MOVS     r2,#0x30
000008  4391              BICS     r1,r1,r2
00000a  4301              ORRS     r1,r1,r0
00000c  224b              MOVS     r2,#0x4b
00000e  0612              LSLS     r2,r2,#24
000010  6151              STR      r1,[r2,#0x14]
;;;656    }
000012  4770              BX       lr
;;;657    
                          ENDP


                          AREA ||i.GPL_CRC_Mode_Select||, CODE, READONLY, ALIGN=1

                  GPL_CRC_Mode_Select PROC
;;;623     */
;;;624    void GPL_CRC_Mode_Select(uint32_t Select)
000000  214b              MOVS     r1,#0x4b
;;;625    {
;;;626        GPL->CR1.W = (GPL->CR1.W & (~GPL_CRC_MODE_MASK)) | Select;
000002  0609              LSLS     r1,r1,#24
000004  6949              LDR      r1,[r1,#0x14]
000006  220c              MOVS     r2,#0xc
000008  4391              BICS     r1,r1,r2
00000a  4301              ORRS     r1,r1,r0
00000c  224b              MOVS     r2,#0x4b
00000e  0612              LSLS     r2,r2,#24
000010  6151              STR      r1,[r2,#0x14]
;;;627    }
000012  4770              BX       lr
;;;628    
                          ENDP


                          AREA ||i.GPL_CRC_SetInitValue||, CODE, READONLY, ALIGN=1

                  GPL_CRC_SetInitValue PROC
;;;677     */
;;;678    void GPL_CRC_SetInitValue(uint32_t InitialValue)
000000  214b              MOVS     r1,#0x4b
;;;679    {
;;;680        GPL->CRCINIT.W = InitialValue;
000002  0609              LSLS     r1,r1,#24
000004  6248              STR      r0,[r1,#0x24]
;;;681    }
000006  4770              BX       lr
;;;682    
                          ENDP


                          AREA ||i.GPL_DMA_Cmd||, CODE, READONLY, ALIGN=1

                  GPL_DMA_Cmd PROC
;;;742     */
;;;743    void GPL_DMA_Cmd(FunctionalState State)
000000  2801              CMP      r0,#1
;;;744    {
;;;745        if(State == ENABLE)
000002  d108              BNE      |L8.22|
;;;746            GPL->CR0.B[3] |= GPL_DMA_MASK;
000004  214b              MOVS     r1,#0x4b
000006  0609              LSLS     r1,r1,#24
000008  7cc9              LDRB     r1,[r1,#0x13]
00000a  2280              MOVS     r2,#0x80
00000c  4311              ORRS     r1,r1,r2
00000e  224b              MOVS     r2,#0x4b
000010  0612              LSLS     r2,r2,#24
000012  74d1              STRB     r1,[r2,#0x13]
000014  e007              B        |L8.38|
                  |L8.22|
;;;747        else
;;;748            GPL->CR0.B[3] &= (~GPL_DMA_MASK);
000016  214b              MOVS     r1,#0x4b
000018  0609              LSLS     r1,r1,#24
00001a  7cc9              LDRB     r1,[r1,#0x13]
00001c  2280              MOVS     r2,#0x80
00001e  4391              BICS     r1,r1,r2
000020  224b              MOVS     r2,#0x4b
000022  0612              LSLS     r2,r2,#24
000024  74d1              STRB     r1,[r2,#0x13]
                  |L8.38|
;;;749    }
000026  4770              BX       lr
;;;750    ///@}
                          ENDP


                          AREA ||i.GPL_DataInput||, CODE, READONLY, ALIGN=1

                  GPL_DataInput PROC
;;;777     */
;;;778    void GPL_DataInput(uint32_t Data)
000000  214b              MOVS     r1,#0x4b
;;;779    {
;;;780        GPL->DIN.W = Data;
000002  0609              LSLS     r1,r1,#24
000004  6188              STR      r0,[r1,#0x18]
;;;781    }
000006  4770              BX       lr
;;;782    
                          ENDP


                          AREA ||i.GPL_GetAllFlagStatus||, CODE, READONLY, ALIGN=1

                  GPL_GetAllFlagStatus PROC
;;;843     */
;;;844    uint32_t GPL_GetAllFlagStatus(void)
000000  204b              MOVS     r0,#0x4b
;;;845    {
;;;846        return GPL->STA.W;
000002  0600              LSLS     r0,r0,#24
000004  6800              LDR      r0,[r0,#0]
;;;847    }
000006  4770              BX       lr
;;;848    
                          ENDP


                          AREA ||i.GPL_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  GPL_GetFlagStatus PROC
;;;879     */
;;;880    DRV_Return GPL_GetFlagStatus(uint32_t GPL_FLAG)
000000  4601              MOV      r1,r0
;;;881    {
;;;882        if((GPL->STA.W & GPL_FLAG) == GPL_FLAG)
000002  204b              MOVS     r0,#0x4b
000004  0600              LSLS     r0,r0,#24
000006  6800              LDR      r0,[r0,#0]
000008  4008              ANDS     r0,r0,r1
00000a  4288              CMP      r0,r1
00000c  d101              BNE      |L11.18|
;;;883            return DRV_True;
00000e  2001              MOVS     r0,#1
                  |L11.16|
;;;884        else
;;;885            return DRV_False;
;;;886    }
000010  4770              BX       lr
                  |L11.18|
000012  2000              MOVS     r0,#0                 ;885
000014  e7fc              B        |L11.16|
;;;887    
                          ENDP


                          AREA ||i.GPL_GetOutputData||, CODE, READONLY, ALIGN=1

                  GPL_GetOutputData PROC
;;;802     */
;;;803    uint32_t GPL_GetOutputData(void)
000000  f3bf8f6f          ISB      
;;;804    {
;;;805        __ISB();
;;;806        return GPL->DOUT.W;
000004  204b              MOVS     r0,#0x4b
000006  0600              LSLS     r0,r0,#24
000008  69c0              LDR      r0,[r0,#0x1c]
;;;807    }
00000a  4770              BX       lr
;;;808    
                          ENDP


                          AREA ||i.GPL_GetParityCheckByte||, CODE, READONLY, ALIGN=1

                  GPL_GetParityCheckByte PROC
;;;381     */
;;;382    uint8_t GPL_GetParityCheckByte(uint32_t Data, uint8_t ByteX)
000000  4602              MOV      r2,r0
;;;383    {
;;;384        GPL->DIN.W = Data;
000002  204b              MOVS     r0,#0x4b
000004  0600              LSLS     r0,r0,#24
000006  6182              STR      r2,[r0,#0x18]
;;;385        switch(ByteX){
000008  2900              CMP      r1,#0
00000a  d006              BEQ      |L13.26|
00000c  2901              CMP      r1,#1
00000e  d00f              BEQ      |L13.48|
000010  2902              CMP      r1,#2
000012  d018              BEQ      |L13.70|
000014  2903              CMP      r1,#3
000016  d12c              BNE      |L13.114|
000018  e020              B        |L13.92|
                  |L13.26|
;;;386            case 0:
;;;387                if((GPL->STA.W & GPL_FLAG_PARITY8_BYTE_0) == 0)
00001a  204b              MOVS     r0,#0x4b
00001c  0600              LSLS     r0,r0,#24
00001e  6800              LDR      r0,[r0,#0]
000020  23ff              MOVS     r3,#0xff
000022  3301              ADDS     r3,#1
000024  4018              ANDS     r0,r0,r3
000026  2800              CMP      r0,#0
000028  d100              BNE      |L13.44|
                  |L13.42|
;;;388                    return 0;
;;;389                else
;;;390                    return 1;
;;;391    
;;;392            case 1:
;;;393                if((GPL->STA.W & GPL_FLAG_PARITY8_BYTE_1) == 0)
;;;394                    return 0;
;;;395                else
;;;396                    return 1;
;;;397    
;;;398            case 2:
;;;399                if((GPL->STA.W & GPL_FLAG_PARITY8_BYTE_2) == 0)
;;;400                    return 0;
;;;401                else
;;;402                    return 1;
;;;403    
;;;404            case 3:
;;;405                if((GPL->STA.W & GPL_FLAG_PARITY8_BYTE_3) == 0)
;;;406                    return 0;
;;;407                else
;;;408                    return 1;
;;;409    
;;;410            default:
;;;411                return 1;
;;;412        }
;;;413    }
00002a  4770              BX       lr
                  |L13.44|
00002c  2001              MOVS     r0,#1                 ;390
00002e  e7fc              B        |L13.42|
                  |L13.48|
000030  204b              MOVS     r0,#0x4b              ;393
000032  0600              LSLS     r0,r0,#24             ;393
000034  6800              LDR      r0,[r0,#0]            ;393
000036  2301              MOVS     r3,#1                 ;393
000038  025b              LSLS     r3,r3,#9              ;393
00003a  4018              ANDS     r0,r0,r3              ;393
00003c  2800              CMP      r0,#0                 ;393
00003e  d100              BNE      |L13.66|
000040  e7f3              B        |L13.42|
                  |L13.66|
000042  2001              MOVS     r0,#1                 ;396
000044  e7f1              B        |L13.42|
                  |L13.70|
000046  204b              MOVS     r0,#0x4b              ;399
000048  0600              LSLS     r0,r0,#24             ;399
00004a  6800              LDR      r0,[r0,#0]            ;399
00004c  2301              MOVS     r3,#1                 ;399
00004e  029b              LSLS     r3,r3,#10             ;399
000050  4018              ANDS     r0,r0,r3              ;399
000052  2800              CMP      r0,#0                 ;399
000054  d100              BNE      |L13.88|
000056  e7e8              B        |L13.42|
                  |L13.88|
000058  2001              MOVS     r0,#1                 ;402
00005a  e7e6              B        |L13.42|
                  |L13.92|
00005c  204b              MOVS     r0,#0x4b              ;405
00005e  0600              LSLS     r0,r0,#24             ;405
000060  6800              LDR      r0,[r0,#0]            ;405
000062  2301              MOVS     r3,#1                 ;405
000064  02db              LSLS     r3,r3,#11             ;405
000066  4018              ANDS     r0,r0,r3              ;405
000068  2800              CMP      r0,#0                 ;405
00006a  d100              BNE      |L13.110|
00006c  e7dd              B        |L13.42|
                  |L13.110|
00006e  2001              MOVS     r0,#1                 ;408
000070  e7db              B        |L13.42|
                  |L13.114|
000072  2001              MOVS     r0,#1                 ;411
000074  e7d9              B        |L13.42|
;;;414    
                          ENDP


                          AREA ||i.GPL_GetParityCheckByte_0||, CODE, READONLY, ALIGN=1

                  GPL_GetParityCheckByte_0 PROC
;;;236     */
;;;237    uint8_t GPL_GetParityCheckByte_0(uint32_t Data)
000000  4601              MOV      r1,r0
;;;238    {
;;;239        GPL->DIN.W = Data;
000002  204b              MOVS     r0,#0x4b
000004  0600              LSLS     r0,r0,#24
000006  6181              STR      r1,[r0,#0x18]
;;;240        if((GPL->STA.W & GPL_FLAG_PARITY8_BYTE_0) == 0)
000008  6800              LDR      r0,[r0,#0]
00000a  22ff              MOVS     r2,#0xff
00000c  3201              ADDS     r2,#1
00000e  4010              ANDS     r0,r0,r2
000010  2800              CMP      r0,#0
000012  d100              BNE      |L14.22|
                  |L14.20|
;;;241            return 0;
;;;242        else
;;;243            return 1;
;;;244    }
000014  4770              BX       lr
                  |L14.22|
000016  2001              MOVS     r0,#1                 ;243
000018  e7fc              B        |L14.20|
;;;245    
                          ENDP


                          AREA ||i.GPL_GetParityCheckByte_1||, CODE, READONLY, ALIGN=1

                  GPL_GetParityCheckByte_1 PROC
;;;268     */
;;;269    uint8_t GPL_GetParityCheckByte_1(uint32_t Data)
000000  4601              MOV      r1,r0
;;;270    {
;;;271        GPL->DIN.W = Data;
000002  204b              MOVS     r0,#0x4b
000004  0600              LSLS     r0,r0,#24
000006  6181              STR      r1,[r0,#0x18]
;;;272        if((GPL->STA.W & GPL_FLAG_PARITY8_BYTE_1) == 0)
000008  6800              LDR      r0,[r0,#0]
00000a  2201              MOVS     r2,#1
00000c  0252              LSLS     r2,r2,#9
00000e  4010              ANDS     r0,r0,r2
000010  2800              CMP      r0,#0
000012  d100              BNE      |L15.22|
                  |L15.20|
;;;273            return 0;
;;;274        else
;;;275            return 1;
;;;276    }
000014  4770              BX       lr
                  |L15.22|
000016  2001              MOVS     r0,#1                 ;275
000018  e7fc              B        |L15.20|
;;;277    
                          ENDP


                          AREA ||i.GPL_GetParityCheckByte_2||, CODE, READONLY, ALIGN=1

                  GPL_GetParityCheckByte_2 PROC
;;;300     */
;;;301    uint8_t GPL_GetParityCheckByte_2(uint32_t Data)
000000  4601              MOV      r1,r0
;;;302    {
;;;303        GPL->DIN.W = Data;
000002  204b              MOVS     r0,#0x4b
000004  0600              LSLS     r0,r0,#24
000006  6181              STR      r1,[r0,#0x18]
;;;304        if((GPL->STA.W & GPL_FLAG_PARITY8_BYTE_2) == 0)
000008  6800              LDR      r0,[r0,#0]
00000a  2201              MOVS     r2,#1
00000c  0292              LSLS     r2,r2,#10
00000e  4010              ANDS     r0,r0,r2
000010  2800              CMP      r0,#0
000012  d100              BNE      |L16.22|
                  |L16.20|
;;;305            return 0;
;;;306        else
;;;307            return 1;
;;;308    }
000014  4770              BX       lr
                  |L16.22|
000016  2001              MOVS     r0,#1                 ;307
000018  e7fc              B        |L16.20|
;;;309    
                          ENDP


                          AREA ||i.GPL_GetParityCheckByte_3||, CODE, READONLY, ALIGN=1

                  GPL_GetParityCheckByte_3 PROC
;;;332     */
;;;333    uint8_t GPL_GetParityCheckByte_3(uint32_t Data)
000000  4601              MOV      r1,r0
;;;334    {
;;;335        GPL->DIN.W = Data;
000002  204b              MOVS     r0,#0x4b
000004  0600              LSLS     r0,r0,#24
000006  6181              STR      r1,[r0,#0x18]
;;;336        if((GPL->STA.W & GPL_FLAG_PARITY8_BYTE_3) == 0)
000008  6800              LDR      r0,[r0,#0]
00000a  2201              MOVS     r2,#1
00000c  02d2              LSLS     r2,r2,#11
00000e  4010              ANDS     r0,r0,r2
000010  2800              CMP      r0,#0
000012  d100              BNE      |L17.22|
                  |L17.20|
;;;337            return 0;
;;;338        else
;;;339            return 1;
;;;340    }
000014  4770              BX       lr
                  |L17.22|
000016  2001              MOVS     r0,#1                 ;339
000018  e7fc              B        |L17.20|
;;;341    
                          ENDP


                          AREA ||i.GPL_GetParityCheckHalfWord||, CODE, READONLY, ALIGN=1

                  GPL_GetParityCheckHalfWord PROC
;;;128     */
;;;129    uint8_t GPL_GetParityCheckHalfWord(uint32_t Data, uint16_t HalfWordX)
000000  4602              MOV      r2,r0
;;;130    {
;;;131        GPL->DIN.W = Data;
000002  204b              MOVS     r0,#0x4b
000004  0600              LSLS     r0,r0,#24
000006  6182              STR      r2,[r0,#0x18]
;;;132        if(HalfWordX == 0x00)
000008  2900              CMP      r1,#0
00000a  d108              BNE      |L18.30|
;;;133        {
;;;134            if((GPL->STA.W & GPL_FLAG_PARITY16_LOW) == 0)
00000c  6800              LDR      r0,[r0,#0]
00000e  2301              MOVS     r3,#1
000010  041b              LSLS     r3,r3,#16
000012  4018              ANDS     r0,r0,r3
000014  2800              CMP      r0,#0
000016  d100              BNE      |L18.26|
                  |L18.24|
;;;135                return 0;
;;;136            else
;;;137                return 1;
;;;138        }
;;;139    
;;;140        if(HalfWordX == 0x01)
;;;141        {
;;;142            if((GPL->STA.W & GPL_FLAG_PARITY16_HIGH) == 0)
;;;143                return 0;
;;;144            else
;;;145                return 1;
;;;146        }
;;;147        return 1;
;;;148    }
000018  4770              BX       lr
                  |L18.26|
00001a  2001              MOVS     r0,#1                 ;137
00001c  e7fc              B        |L18.24|
                  |L18.30|
00001e  2901              CMP      r1,#1                 ;140
000020  d109              BNE      |L18.54|
000022  204b              MOVS     r0,#0x4b              ;142
000024  0600              LSLS     r0,r0,#24             ;142
000026  6800              LDR      r0,[r0,#0]            ;142
000028  044b              LSLS     r3,r1,#17             ;142
00002a  4018              ANDS     r0,r0,r3              ;142
00002c  2800              CMP      r0,#0                 ;142
00002e  d100              BNE      |L18.50|
000030  e7f2              B        |L18.24|
                  |L18.50|
000032  2001              MOVS     r0,#1                 ;145
000034  e7f0              B        |L18.24|
                  |L18.54|
000036  2001              MOVS     r0,#1                 ;147
000038  e7ee              B        |L18.24|
;;;149    
                          ENDP


                          AREA ||i.GPL_GetParityCheckHalfWord_High||, CODE, READONLY, ALIGN=1

                  GPL_GetParityCheckHalfWord_High PROC
;;;204     */
;;;205    uint8_t GPL_GetParityCheckHalfWord_High(uint32_t Data)
000000  4601              MOV      r1,r0
;;;206    {
;;;207        GPL->DIN.W = Data;
000002  204b              MOVS     r0,#0x4b
000004  0600              LSLS     r0,r0,#24
000006  6181              STR      r1,[r0,#0x18]
;;;208        if((GPL->STA.W & GPL_FLAG_PARITY16_HIGH) == 0)
000008  6800              LDR      r0,[r0,#0]
00000a  2201              MOVS     r2,#1
00000c  0452              LSLS     r2,r2,#17
00000e  4010              ANDS     r0,r0,r2
000010  2800              CMP      r0,#0
000012  d100              BNE      |L19.22|
                  |L19.20|
;;;209            return 0;
;;;210        else
;;;211            return 1;
;;;212    }
000014  4770              BX       lr
                  |L19.22|
000016  2001              MOVS     r0,#1                 ;211
000018  e7fc              B        |L19.20|
;;;213    
                          ENDP


                          AREA ||i.GPL_GetParityCheckHalfWord_Low||, CODE, READONLY, ALIGN=1

                  GPL_GetParityCheckHalfWord_Low PROC
;;;172     */
;;;173    uint8_t GPL_GetParityCheckHalfWord_Low(uint32_t Data)
000000  4601              MOV      r1,r0
;;;174    {
;;;175        GPL->DIN.W = Data;
000002  204b              MOVS     r0,#0x4b
000004  0600              LSLS     r0,r0,#24
000006  6181              STR      r1,[r0,#0x18]
;;;176        if((GPL->STA.W & GPL_FLAG_PARITY16_LOW) == 0)
000008  6800              LDR      r0,[r0,#0]
00000a  2201              MOVS     r2,#1
00000c  0412              LSLS     r2,r2,#16
00000e  4010              ANDS     r0,r0,r2
000010  2800              CMP      r0,#0
000012  d100              BNE      |L20.22|
                  |L20.20|
;;;177            return 0;
;;;178        else
;;;179            return 1;
;;;180    }
000014  4770              BX       lr
                  |L20.22|
000016  2001              MOVS     r0,#1                 ;179
000018  e7fc              B        |L20.20|
;;;181    
                          ENDP


                          AREA ||i.GPL_GetParityCheckWord||, CODE, READONLY, ALIGN=1

                  GPL_GetParityCheckWord PROC
;;;88      */
;;;89     uint8_t GPL_GetParityCheckWord(uint32_t Data)
000000  4601              MOV      r1,r0
;;;90     {
;;;91         GPL->DIN.W = Data;
000002  204b              MOVS     r0,#0x4b
000004  0600              LSLS     r0,r0,#24
000006  6181              STR      r1,[r0,#0x18]
;;;92         if((GPL->STA.W & GPL_FLAG_PARITY32) == 0)
000008  6800              LDR      r0,[r0,#0]
00000a  2201              MOVS     r2,#1
00000c  0392              LSLS     r2,r2,#14
00000e  4010              ANDS     r0,r0,r2
000010  2800              CMP      r0,#0
000012  d100              BNE      |L21.22|
                  |L21.20|
;;;93             return 0;
;;;94         else
;;;95             return 1;
;;;96     }
000014  4770              BX       lr
                  |L21.22|
000016  2001              MOVS     r0,#1                 ;95
000018  e7fc              B        |L21.20|
;;;97     
                          ENDP


                          AREA ||i.GPL_Inverse_Cmd||, CODE, READONLY, ALIGN=1

                  GPL_Inverse_Cmd PROC
;;;444     */
;;;445    void GPL_Inverse_Cmd(FunctionalState State)
000000  2801              CMP      r0,#1
;;;446    {
;;;447        if(State == ENABLE)
000002  d108              BNE      |L22.22|
;;;448            GPL->CR0.W |= GPL_INVERSE_MASK;
000004  214b              MOVS     r1,#0x4b
000006  0609              LSLS     r1,r1,#24
000008  6909              LDR      r1,[r1,#0x10]
00000a  2240              MOVS     r2,#0x40
00000c  4311              ORRS     r1,r1,r2
00000e  224b              MOVS     r2,#0x4b
000010  0612              LSLS     r2,r2,#24
000012  6111              STR      r1,[r2,#0x10]
000014  e007              B        |L22.38|
                  |L22.22|
;;;449        else
;;;450            GPL->CR0.W &= (~GPL_INVERSE_MASK);
000016  214b              MOVS     r1,#0x4b
000018  0609              LSLS     r1,r1,#24
00001a  6909              LDR      r1,[r1,#0x10]
00001c  2240              MOVS     r2,#0x40
00001e  4391              BICS     r1,r1,r2
000020  224b              MOVS     r2,#0x4b
000022  0612              LSLS     r2,r2,#24
000024  6111              STR      r1,[r2,#0x10]
                  |L22.38|
;;;451    }
000026  4770              BX       lr
;;;452    ///@}
                          ENDP


                          AREA ||i.GPL_ParityCheck_Select||, CODE, READONLY, ALIGN=1

                  GPL_ParityCheck_Select PROC
;;;60      */
;;;61     void GPL_ParityCheck_Select(uint32_t Parity)
000000  214b              MOVS     r1,#0x4b
;;;62     {
;;;63         GPL->CR0.W = (GPL->CR0.W & (~GPL_PARITY_MASK)) | Parity;
000002  0609              LSLS     r1,r1,#24
000004  6909              LDR      r1,[r1,#0x10]
000006  2204              MOVS     r2,#4
000008  4391              BICS     r1,r1,r2
00000a  4301              ORRS     r1,r1,r0
00000c  224b              MOVS     r2,#0x4b
00000e  0612              LSLS     r2,r2,#24
000010  6111              STR      r1,[r2,#0x10]
;;;64     }
000012  4770              BX       lr
;;;65     
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_GPL_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_GPL_DRV_c_dbaf1a54____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_GPL_DRV_c_dbaf1a54____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_GPL_DRV_c_dbaf1a54____REVSH|
#line 496
|__asm___18_MG32x02z_GPL_DRV_c_dbaf1a54____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
