; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_cmp_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_cmp_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_cmp_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_CMP_DRV.c]
                          THUMB

                          AREA ||i.CMP_ClearFlag||, CODE, READONLY, ALIGN=1

                  CMP_ClearFlag PROC
;;;642     */
;;;643    void CMP_ClearFlag(CMP_Struct* CMPx, uint32_t CMP_ITSrc)
000000  6001              STR      r1,[r0,#0]
;;;644    {
;;;645        CMPx->STA.W = CMP_ITSrc;
;;;646    }
000002  4770              BX       lr
;;;647    ///@}
                          ENDP


                          AREA ||i.CMP_Cmd||, CODE, READONLY, ALIGN=1

                  CMP_Cmd PROC
;;;93      */
;;;94     void CMP_Cmd(CMPAC_Struct* CMPACx, FunctionalState NewState)
000000  7802              LDRB     r2,[r0,#0]
;;;95     {
;;;96         CMPACx->CR.MBIT.EN = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7002              STRB     r2,[r0,#0]
;;;97     }
00000e  4770              BX       lr
;;;98     /**
                          ENDP


                          AREA ||i.CMP_DeInit||, CODE, READONLY, ALIGN=1

                  CMP_DeInit PROC
;;;56      */
;;;57     void CMP_DeInit(void)
000000  2000              MOVS     r0,#0
;;;58     {
;;;59          CMP->INT.W = 0x00000000;
000002  2117              MOVS     r1,#0x17
000004  0689              LSLS     r1,r1,#26
000006  6048              STR      r0,[r1,#4]
;;;60          CMP->ANA.W = 0x00000000;
000008  60c8              STR      r0,[r1,#0xc]
;;;61          CMP->CR0.W = 0x00000000;
00000a  6108              STR      r0,[r1,#0x10]
;;;62          CMP->CR1.W = 0x00000000;
00000c  6148              STR      r0,[r1,#0x14]
;;;63     #if defined(MG32_1ST)   
;;;64          CMP->CR2.W = 0x00000000;
00000e  6188              STR      r0,[r1,#0x18]
;;;65          CMP->CR3.W = 0x00000000;
000010  61c8              STR      r0,[r1,#0x1c]
;;;66     #endif
;;;67          CMP->STA.W = 0xFFFFFFFF;
000012  1e40              SUBS     r0,r0,#1
000014  6008              STR      r0,[r1,#0]
;;;68     }
000016  4770              BX       lr
;;;69     ///@}
                          ENDP


                          AREA ||i.CMP_FilterClockDivider_Select||, CODE, READONLY, ALIGN=1

                  CMP_FilterClockDivider_Select PROC
;;;167     */
;;;168    void CMP_FilterClockDivider_Select(CMPAC_Struct* CMPACx, CMP_SYNCHClockDivDef SYNCHClockDiv)
000000  b510              PUSH     {r4,lr}
;;;169    {    
;;;170        CMPACx->CR.MBIT.FDIV = SYNCHClockDiv;
000002  7882              LDRB     r2,[r0,#2]
000004  2330              MOVS     r3,#0x30
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2430              MOVS     r4,#0x30
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7082              STRB     r2,[r0,#2]
;;;171    }
000012  bd10              POP      {r4,pc}
;;;172    
                          ENDP


                          AREA ||i.CMP_FilterClock_Select||, CODE, READONLY, ALIGN=1

                  CMP_FilterClock_Select PROC
;;;145     */
;;;146    void CMP_FilterClock_Select(CMPAC_Struct* CMPACx, CMP_SynchClockSrcDef SYNCHClockSrc)
000000  b510              PUSH     {r4,lr}
;;;147    {    
;;;148        CMPACx->CR.MBIT.FSEL = SYNCHClockSrc;
000002  7882              LDRB     r2,[r0,#2]
000004  230c              MOVS     r3,#0xc
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  240c              MOVS     r4,#0xc
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7082              STRB     r2,[r0,#2]
;;;149    }
000012  bd10              POP      {r4,pc}
;;;150    
                          ENDP


                          AREA ||i.CMP_GetAllFlagStatus||, CODE, READONLY, ALIGN=1

                  CMP_GetAllFlagStatus PROC
;;;616     */
;;;617    uint32_t CMP_GetAllFlagStatus(CMP_Struct* CMPx)
000000  4601              MOV      r1,r0
;;;618    {
;;;619        return CMPx->STA.W;
000002  6808              LDR      r0,[r1,#0]
;;;620    }
000004  4770              BX       lr
;;;621    
                          ENDP


                          AREA ||i.CMP_GetOutput||, CODE, READONLY, ALIGN=2

                  CMP_GetOutput PROC
;;;672     */
;;;673    DRV_Return CMP_GetOutput (CMPAC_Struct* CMPACx)
000000  4601              MOV      r1,r0
;;;674    {
;;;675        DRV_Return RetBitV;
;;;676        
;;;677        RetBitV = DRV_Logic0; 
000002  2000              MOVS     r0,#0
;;;678        if (CMPACx == CMPAC0)
000004  4a1b              LDR      r2,|L7.116|
000006  4291              CMP      r1,r2
000008  d10a              BNE      |L7.32|
;;;679        {
;;;680            if (CMP->STA.MBIT.AC0_S == SET)
00000a  2217              MOVS     r2,#0x17
00000c  0692              LSLS     r2,r2,#26
00000e  7812              LDRB     r2,[r2,#0]
000010  07d2              LSLS     r2,r2,#31
000012  0fd2              LSRS     r2,r2,#31
000014  2a00              CMP      r2,#0
000016  d001              BEQ      |L7.28|
;;;681                RetBitV = DRV_Logic1;
000018  2001              MOVS     r0,#1
00001a  e029              B        |L7.112|
                  |L7.28|
;;;682            else
;;;683                RetBitV = DRV_Logic0;
00001c  2000              MOVS     r0,#0
00001e  e027              B        |L7.112|
                  |L7.32|
;;;684        }
;;;685        else if (CMPACx == CMPAC1)
000020  4a14              LDR      r2,|L7.116|
000022  1d12              ADDS     r2,r2,#4
000024  4291              CMP      r1,r2
000026  d10a              BNE      |L7.62|
;;;686        {
;;;687            if (CMP->STA.MBIT.AC1_S == SET)
000028  2217              MOVS     r2,#0x17
00002a  0692              LSLS     r2,r2,#26
00002c  7812              LDRB     r2,[r2,#0]
00002e  06d2              LSLS     r2,r2,#27
000030  0fd2              LSRS     r2,r2,#31
000032  2a00              CMP      r2,#0
000034  d001              BEQ      |L7.58|
;;;688                RetBitV = DRV_Logic1;
000036  2001              MOVS     r0,#1
000038  e01a              B        |L7.112|
                  |L7.58|
;;;689            else
;;;690                RetBitV = DRV_Logic0;
00003a  2000              MOVS     r0,#0
00003c  e018              B        |L7.112|
                  |L7.62|
;;;691        }
;;;692    #if defined(MG32_1ST)
;;;693        else if (CMPACx == CMPAC2)
00003e  4a0d              LDR      r2,|L7.116|
000040  3208              ADDS     r2,r2,#8
000042  4291              CMP      r1,r2
000044  d10a              BNE      |L7.92|
;;;694            if (CMP->STA.MBIT.AC2_S == SET)
000046  2217              MOVS     r2,#0x17
000048  0692              LSLS     r2,r2,#26
00004a  7852              LDRB     r2,[r2,#1]
00004c  07d2              LSLS     r2,r2,#31
00004e  0fd2              LSRS     r2,r2,#31
000050  2a00              CMP      r2,#0
000052  d001              BEQ      |L7.88|
;;;695                RetBitV = DRV_Logic1;
000054  2001              MOVS     r0,#1
000056  e00b              B        |L7.112|
                  |L7.88|
;;;696            else
;;;697                RetBitV = DRV_Logic0;
000058  2000              MOVS     r0,#0
00005a  e009              B        |L7.112|
                  |L7.92|
;;;698        else 
;;;699            if (CMP->STA.MBIT.AC3_S == SET)
00005c  2217              MOVS     r2,#0x17
00005e  0692              LSLS     r2,r2,#26
000060  7852              LDRB     r2,[r2,#1]
000062  06d2              LSLS     r2,r2,#27
000064  0fd2              LSRS     r2,r2,#31
000066  2a00              CMP      r2,#0
000068  d001              BEQ      |L7.110|
;;;700                RetBitV = DRV_Logic1;
00006a  2001              MOVS     r0,#1
00006c  e000              B        |L7.112|
                  |L7.110|
;;;701            else
;;;702                RetBitV = DRV_Logic0;
00006e  2000              MOVS     r0,#0
                  |L7.112|
;;;703    #endif
;;;704        
;;;705            return RetBitV;
;;;706            
;;;707    }
000070  4770              BX       lr
;;;708    ///@}
                          ENDP

000072  0000              DCW      0x0000
                  |L7.116|
                          DCD      0x5c000010

                          AREA ||i.CMP_GetSingleFlagStatus||, CODE, READONLY, ALIGN=1

                  CMP_GetSingleFlagStatus PROC
;;;595     */
;;;596    DRV_Return CMP_GetSingleFlagStatus(CMP_Struct* CMPx, uint32_t CMP_ITSrc)
000000  4602              MOV      r2,r0
;;;597    {
;;;598        if (CMPx->STA.W & CMP_ITSrc)
000002  6810              LDR      r0,[r2,#0]
000004  4008              ANDS     r0,r0,r1
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L8.14|
;;;599            return DRV_Happened;
00000a  2001              MOVS     r0,#1
                  |L8.12|
;;;600        else 
;;;601            return DRV_UnHappened;
;;;602        
;;;603    }
00000c  4770              BX       lr
                  |L8.14|
00000e  2000              MOVS     r0,#0                 ;601
000010  e7fc              B        |L8.12|
;;;604    
                          ENDP


                          AREA ||i.CMP_ITEA_Cmd||, CODE, READONLY, ALIGN=1

                  CMP_ITEA_Cmd PROC
;;;564     */
;;;565    void CMP_ITEA_Cmd(CMP_Struct* CMPx, FunctionalState NewState)
000000  7902              LDRB     r2,[r0,#4]
;;;566    {
;;;567        CMPx->INT.MBIT.IEA = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7102              STRB     r2,[r0,#4]
;;;568    }
00000e  4770              BX       lr
;;;569    
                          ENDP


                          AREA ||i.CMP_IT_Config||, CODE, READONLY, ALIGN=1

                  CMP_IT_Config PROC
;;;542     */
;;;543    void CMP_IT_Config(CMP_Struct* CMPx, uint32_t CMP_ITSrc, FunctionalState NewState)
000000  2a01              CMP      r2,#1
;;;544    {
;;;545        if (NewState == ENABLE)
000002  d103              BNE      |L10.12|
;;;546            CMPx->INT.W |= CMP_ITSrc;
000004  6843              LDR      r3,[r0,#4]
000006  430b              ORRS     r3,r3,r1
000008  6043              STR      r3,[r0,#4]
00000a  e002              B        |L10.18|
                  |L10.12|
;;;547        else
;;;548            CMPx->INT.W &= ~(CMP_ITSrc);
00000c  6843              LDR      r3,[r0,#4]
00000e  438b              BICS     r3,r3,r1
000010  6043              STR      r3,[r0,#4]
                  |L10.18|
;;;549    }
000012  4770              BX       lr
;;;550    
                          ENDP


                          AREA ||i.CMP_IVREF2_Cmd||, CODE, READONLY, ALIGN=1

                  CMP_IVREF2_Cmd PROC
;;;256     */
;;;257    void CMP_IVREF2_Cmd(CMP_Struct* CMPx, FunctionalState NewState)
000000  7b42              LDRB     r2,[r0,#0xd]
;;;258    {
;;;259        CMPx->ANA.MBIT.IVREF2_EN = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7342              STRB     r2,[r0,#0xd]
;;;260        
;;;261    }
00000e  4770              BX       lr
;;;262    
                          ENDP


                          AREA ||i.CMP_IVREF2_Select||, CODE, READONLY, ALIGN=1

                  CMP_IVREF2_Select PROC
;;;303     */
;;;304    DRV_Return CMP_IVREF2_Select(CMP_Struct* CMPx, uint8_t RefSel)
000000  b510              PUSH     {r4,lr}
;;;305    {
000002  4602              MOV      r2,r0
;;;306        if (RefSel > 63)
000004  293f              CMP      r1,#0x3f
000006  dd01              BLE      |L12.12|
;;;307            return DRV_Failure;
000008  2001              MOVS     r0,#1
                  |L12.10|
;;;308            
;;;309        CMP->ANA.MBIT.IVREF2_RS = RefSel;
;;;310        
;;;311        return DRV_Success;
;;;312    }
00000a  bd10              POP      {r4,pc}
                  |L12.12|
00000c  2017              MOVS     r0,#0x17              ;309
00000e  0680              LSLS     r0,r0,#26             ;309
000010  7b40              LDRB     r0,[r0,#0xd]          ;309
000012  23fc              MOVS     r3,#0xfc              ;309
000014  4398              BICS     r0,r0,r3              ;309
000016  008b              LSLS     r3,r1,#2              ;309
000018  24fc              MOVS     r4,#0xfc              ;309
00001a  4023              ANDS     r3,r3,r4              ;309
00001c  4318              ORRS     r0,r0,r3              ;309
00001e  2317              MOVS     r3,#0x17              ;309
000020  069b              LSLS     r3,r3,#26             ;309
000022  7358              STRB     r0,[r3,#0xd]          ;309
000024  2000              MOVS     r0,#0                 ;311
000026  e7f0              B        |L12.10|
;;;313    
                          ENDP


                          AREA ||i.CMP_IVREF_Cmd||, CODE, READONLY, ALIGN=1

                  CMP_IVREF_Cmd PROC
;;;236     */
;;;237    void CMP_IVREF_Cmd(CMP_Struct* CMPx, FunctionalState NewState)
000000  7b02              LDRB     r2,[r0,#0xc]
;;;238    {
;;;239        CMPx->ANA.MBIT.IVREF_EN = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7302              STRB     r2,[r0,#0xc]
;;;240    
;;;241    }
00000e  4770              BX       lr
;;;242        
                          ENDP


                          AREA ||i.CMP_IVREF_Select||, CODE, READONLY, ALIGN=1

                  CMP_IVREF_Select PROC
;;;277     */
;;;278    DRV_Return CMP_IVREF_Select(CMP_Struct* CMPx, uint8_t RefSel)
000000  b510              PUSH     {r4,lr}
;;;279    {
000002  4602              MOV      r2,r0
;;;280        
;;;281        if (RefSel > 63)
000004  293f              CMP      r1,#0x3f
000006  dd01              BLE      |L14.12|
;;;282            return DRV_Failure;
000008  2001              MOVS     r0,#1
                  |L14.10|
;;;283            
;;;284        CMP->ANA.MBIT.IVREF_RS = RefSel;
;;;285        
;;;286        return DRV_Success;
;;;287    }
00000a  bd10              POP      {r4,pc}
                  |L14.12|
00000c  2017              MOVS     r0,#0x17              ;284
00000e  0680              LSLS     r0,r0,#26             ;284
000010  7b00              LDRB     r0,[r0,#0xc]          ;284
000012  23fc              MOVS     r3,#0xfc              ;284
000014  4398              BICS     r0,r0,r3              ;284
000016  008b              LSLS     r3,r1,#2              ;284
000018  24fc              MOVS     r4,#0xfc              ;284
00001a  4023              ANDS     r3,r3,r4              ;284
00001c  4318              ORRS     r0,r0,r3              ;284
00001e  2317              MOVS     r3,#0x17              ;284
000020  069b              LSLS     r3,r3,#26             ;284
000022  7318              STRB     r0,[r3,#0xc]          ;284
000024  2000              MOVS     r0,#0                 ;286
000026  e7f0              B        |L14.10|
;;;288        
                          ENDP


                          AREA ||i.CMP_InverseOutputPin||, CODE, READONLY, ALIGN=1

                  CMP_InverseOutputPin PROC
;;;186     */
;;;187    void CMP_InverseOutputPin(CMPAC_Struct* CMPACx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;188    {
;;;189        CMPACx->CR.MBIT.PINV = NewState;
000002  7882              LDRB     r2,[r0,#2]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7082              STRB     r2,[r0,#2]
;;;190    }
000012  bd10              POP      {r4,pc}
;;;191    
                          ENDP


                          AREA ||i.CMP_NegativePin_Select||, CODE, READONLY, ALIGN=1

                  CMP_NegativePin_Select PROC
;;;468     */
;;;469    void CMP_NegativePin_Select(CMPAC_Struct* CMPACx, CMP_ACPinInputDef ACzNPin)
000000  b510              PUSH     {r4,lr}
;;;470    {
;;;471        CMPACx->CR.MBIT.NMUX = ACzNPin;
000002  7842              LDRB     r2,[r0,#1]
000004  2370              MOVS     r3,#0x70
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2470              MOVS     r4,#0x70
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7042              STRB     r2,[r0,#1]
;;;472        
;;;473    }
000012  bd10              POP      {r4,pc}
;;;474    
                          ENDP


                          AREA ||i.CMP_OutputPolarity_Select||, CODE, READONLY, ALIGN=1

                  CMP_OutputPolarity_Select PROC
;;;206     */
;;;207    void CMP_OutputPolarity_Select(CMPAC_Struct* CMPACx, CMP_OutputPolarityDef OutPorSel)
000000  7882              LDRB     r2,[r0,#2]
;;;208    {
;;;209        CMPACx->CR.MBIT.INV = OutPorSel;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7082              STRB     r2,[r0,#2]
;;;210    }
00000e  4770              BX       lr
;;;211    
                          ENDP


                          AREA ||i.CMP_PositivePin_Select||, CODE, READONLY, ALIGN=1

                  CMP_PositivePin_Select PROC
;;;443     */
;;;444    void CMP_PositivePin_Select(CMPAC_Struct* CMPACx, CMP_ACPinInputDef ACzPPin)
000000  7842              LDRB     r2,[r0,#1]
;;;445    {
;;;446        CMPACx->CR.MBIT.PMUX = ACzPPin;
000002  08d2              LSRS     r2,r2,#3
000004  00d2              LSLS     r2,r2,#3
000006  074b              LSLS     r3,r1,#29
000008  0f5b              LSRS     r3,r3,#29
00000a  431a              ORRS     r2,r2,r3
00000c  7042              STRB     r2,[r0,#1]
;;;447        
;;;448    }
00000e  4770              BX       lr
;;;449    
                          ENDP


                          AREA ||i.CMP_Power_Select||, CODE, READONLY, ALIGN=1

                  CMP_Power_Select PROC
;;;112     */
;;;113    void CMP_Power_Select(CMPAC_Struct* CMPACx, CMP_PowerLevelDef PowerLevelSel)
000000  b510              PUSH     {r4,lr}
;;;114    {
;;;115        CMPACx->CR.MBIT.RES = PowerLevelSel;
000002  7802              LDRB     r2,[r0,#0]
000004  2308              MOVS     r3,#8
000006  439a              BICS     r2,r2,r3
000008  00cb              LSLS     r3,r1,#3
00000a  2408              MOVS     r4,#8
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7002              STRB     r2,[r0,#0]
;;;116    
;;;117    }
000012  bd10              POP      {r4,pc}
;;;118    ///@}
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_CMP_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_CMP_DRV_c_bb787e0c____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_CMP_DRV_c_bb787e0c____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_CMP_DRV_c_bb787e0c____REVSH|
#line 496
|__asm___18_MG32x02z_CMP_DRV_c_bb787e0c____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
