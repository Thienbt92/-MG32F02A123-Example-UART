L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_I2C_MID_ex.c"
N/**
N ******************************************************************************
N * @file        MG32x02z_I2C_MID_ex.c
N * @brief       I2C Extended MID module driver.
N *              This file provides firmware functions to manage the following
N *              functionalities of I2C Extended peripheral:
N *                  + Extended features functions
N * @par         Project
N *              MG32x02z
N * @version     V1.01
N * @date        2020/08/04
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2020 megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N ******************************************************************************
N * @par         Disclaimer 
N *      The Demo software is provided "AS IS"  without any warranty, either 
N *      expressed or implied, including, but not limited to, the implied warranties 
N *      of merchantability and fitness for a particular purpose.  The author will 
N *      not be liable for any special, incidental, consequential or indirect 
N *      damages due to loss of data or any other reason. 
N *      These statements agree with the world wide and local dictated laws about 
N *      authorship and violence against these laws. 
N ******************************************************************************
N ******************************************************************************
N @verbatim
N ==============================================================================
N              ##### I2C peripheral Extended features  #####
N ==============================================================================
N
N [..] Comparing to other previous devices, the I2C interface for MG32x02z
N      devices contains the following additional features
N
N      (+) Possibility to disable or enable Analog Noise Filter
N      (+) Use of a configured Digital Noise Filter
N      (+) Use of a configured Pre Drive Time
N      (+) Disable or enable wakeup from Stop modes
N
N                    ##### How to use this driver #####
N ==============================================================================
N [..] This driver provides functions to configure Noise Filter and Wake Up Feature
N   (#) Configure I2C Digital noise filter using the function MID_I2CEx_ConfigDigitalFilter()
N   (#) Configure I2C PreDrive Time using the function MID_I2CEx_ConfigPreDriveTime()
N   (#) Configure the enable or disable of I2C Wake Up Mode using the functions :
N         (++) MID_I2CEx_EnableWakeUp()
N         (++) MID_I2CEx_DisableWakeUp()
N @endverbatim
N ******************************************************************************
N * @attention
N *
N * <h2><center>&copy; COPYRIGHT(c) 2020 megawin Technology Co., Ltd.</center></h2>
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *   1. Redistributions of source code must retain the above copyright notice,
N *      this list of conditions and the following disclaimer.
N *   2. Redistributions in binary form must reproduce the above copyright notice,
N *      this list of conditions and the following disclaimer in the documentation
N *      and/or other materials provided with the distribution.
N *   3. Neither the name of megawin Technology Co., Ltd. nor the names of its
N *      contributors may be used to endorse or promote products derived from this
N *      software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SMIDL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N ******************************************************************************
N */
N
N/* Includes ------------------------------------------------------------------*/
N#include "MG32x02z_I2C_MID_ex.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_I2C_MID_ex.h" 1
N/**
N ******************************************************************************
N * @file        MG32x02z_I2C_MID_ex.h
N * @brief       Header file of I2C MID Extended module.
N * @par         Project
N *              MG32x02z
N * @version     V1.02
N * @date        2021/04/21
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2020 megawin Technology Co., Ltd.
N *              All rights reserved.
N ******************************************************************************
N * @par 		Disclaimer 
N *		The Demo software is provided "AS IS"  without any warranty, either 
N *		expressed or implied, including, but not limited to, the implied warranties 
N *		of merchantability and fitness for a particular purpose.  The author will 
N *		not be liable for any special, incidental, consequential or indirect 
N *		damages due to loss of data or any other reason. 
N *		These statements agree with the world wide and local dictated laws about 
N *		authorship and violence against these laws. 
N ******************************************************************************
N ******************************************************************************
N */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef _MG32x02z_I2C_MID_EX_H
N#define _MG32x02z_I2C_MID_EX_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "MG32x02z_COMMON_MID.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_COMMON_MID.h" 1
N /**
N ******************************************************************************
N *
N * @file        MG32x02z_Common_MID.H
N * @brief       Header file of Common Configuration module.
N *
N * @par         Project
N *              MG32x02z
N * @version     V1.00
N * @date        2019/10/22
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2017 MegaWin Technology Co., Ltd.
N *              All rights reserved.
N *
N ******************************************************************************
N * @attention
N *
N * <h2><center>&copy; COPYRIGHT(c) 2019 megawin Technology Co., Ltd.</center></h2>
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *   1. Redistributions of source code must retain the above copyright notice,
N *      this list of conditions and the following disclaimer.
N *   2. Redistributions in binary form must reproduce the above copyright notice,
N *      this list of conditions and the following disclaimer in the documentation
N *      and/or other materials provided with the distribution.
N *   3. Neither the name of megawin Technology Co., Ltd. nor the names of its
N *      contributors may be used to endorse or promote products derived from this
N *      software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SMID_L THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N ******************************************************************************
N */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef _MG32x02z_COMMON_MID_H
N#define _MG32x02z_COMMON_MID_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include <stdio.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060044
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 55 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_COMMON_MID.h" 2
N#include "MG32x02z.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z.h
N *
N * @brief       MG32x02z Device Peripheral Access Layer Header File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:41 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z_H
N#define _MG32x02z_H
N#define _MG32x02z_H_VER                             3.9     /*!< File Version */
N
N
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N *************************************************
N *  Chip definitions
N *************************************************
N */
N// Chip Generation
N#if defined(MG32F02A132) || defined(MG32F02A072) || defined(MA862)
X#if 1L || 0L || 0L
N  #define MG32_1ST
N#elif defined(MG32F02A032)
S  #define MG32_2ND
S#elif defined(MG32F02A128) || defined(MG32F02U128) || defined(MG32F02A064) || defined(MG32F02U064)
S  #define MG32_3RD
S#elif defined(MG32F02V032)
S  #define MG32_4TH
N#endif
N
N#if defined(MG32F02U128) || defined(MG32F02U064)
X#if 0L || 0L
S  #define USB_TYPE    1
N#else
N  #define USB_TYPE    0
N#endif
N    
N
N/**
N *************************************************
N *  ARM CPU Configuration Setting
N *************************************************
N */
N#define __CM0_REV                 0 /*!< Core Revision r0p0                             */
N#define __MPU_PRESENT             0 /*!< Chip do not provide MPU                       */
N#define __NVIC_PRIO_BITS          2 /*!< Chip uses 2 Bits for the Priority Levels      */
N#define __Vendor_SysTickConfig    0 /*!< Set to 1 if different SysTick Config is used   */
N
N/**
N ******************************************************************************
N * @enum        IRQn
N *              Interrupt Number Definition
N ******************************************************************************
N */
Ntypedef enum IRQn
N{
N/******  Cortex-M0 Processor Exceptions Numbers Definitions *****************************************/
N    NMI_IRQn                    = -14 , /*!<  ;Non Maskable Interrupt                               */
N    HardFault_IRQn              = -13 , /*!<  ;Cortex-M0 Hard Fault Interrupt                       */
N    SVC_IRQn                    = -5 ,  /*!<  ;Cortex-M0 SV Call Interrupt                          */
N    PendSV_IRQn                 = -2 ,  /*!<  ;Cortex-M0 Pend SV Interrupt                          */
N    SysTick_IRQn                = -1 ,  /*!<  ;Cortex-M0 System Tick Interrupt                      */
N/******  Peripheral Interrupt Numbers Definitions ***************************************************/
N    WWDT_IRQn                   =  0 ,  /*!<  ;Window Watchdog                                      */
N    SYS_IRQn                    =  1 ,  /*!<  ;System global Interrupt                              */
N    EXINT0_IRQn                 =  3 ,  /*!<  ;EXIC EXINT0 (PA)                                     */
N    EXINT1_IRQn                 =  4 ,  /*!<  ;EXIC EXINT1 (PB)                                     */
N    EXINT2_IRQn                 =  5 ,  /*!<  ;EXIC EXINT2 (PC)                                     */
N    EXINT3_IRQn                 =  6 ,  /*!<  ;EXIC EXINT3/EXINT4 (PD/PE)                           */
N    COMP_IRQn                   =  7 ,  /*!<  ;Analog Comparators global Interrupt                  */
N    DMA_IRQn                    =  8 ,  /*!<  ;DMA all channel global Interrupt                     */
N    ADC_IRQn                    =  10 , /*!<  ;ADC                                                  */
N    DAC_IRQn                    =  11 , /*!<  ;DAC                                                  */
N    TM0x_IRQn                   =  12 , /*!<  ;Timer TM0x global Interrupt                          */
N    TM10_IRQn                   =  13 , /*!<  ;Timer TM10                                           */
N    TM1x_IRQn                   =  14 , /*!<  ;Timer TM16 ... global Interrupt                      */
N    TM20_IRQn                   =  15 , /*!<  ;Timer TM20                                           */
N    TM2x_IRQn                   =  16 , /*!<  ;Timer TM26 ... global Interrupt                      */
N    TM3x_IRQn                   =  17 , /*!<  ;Timer TM3x global Interrupt                          */
N    URT0_IRQn                   =  20 , /*!<  ;UART URT0                                            */
N    URT123_IRQn                 =  21 , /*!<  ;UART URT1/2/3 global Interrupt                       */
N    URT4x_IRQn                  =  22 , /*!<  ;UART URT4/5/6/7 global Interrupt                     */
N    SPI0_IRQn                   =  24 , /*!<  ;SPI0                                                 */
N    I2C0_IRQn                   =  28 , /*!<  ;I2C0                                                 */
N    I2Cx_IRQn                   =  29 , /*!<  ;I2C1 ... global Interrupt                            */
N    USB_IRQn                    =  30 , /*!<  ;USB                                                  */
N    APX_IRQn                    =  31 , /*!<  ;APX                                                  */
N} IRQn_Type;                    /*!< Interrupt Number Definition */
N
N
N#include "core_cm0.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\core_cm0.h" 1
N/**************************************************************************//**
N * @file     core_cm0.h
N * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
N * @version  V5.0.8
N * @date     21. August 2019
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S  #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__clang__)
X#elif 0L
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM0_H_GENERIC
N#define __CORE_CM0_H_GENERIC
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 35 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\core_cm0.h" 2
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex_M0
N  @{
N */
N
N#include "cmsis_version.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\cmsis_version.h" 1
N/**************************************************************************//**
N * @file     cmsis_version.h
N * @brief    CMSIS Core(M) Version definitions
N * @version  V5.0.4
N * @date     23. July 2019
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2019 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S  #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__clang__)
X#elif 0L
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CMSIS_VERSION_H
N#define __CMSIS_VERSION_H
N
N/*  CMSIS Version definitions */
N#define __CM_CMSIS_VERSION_MAIN  ( 5U)                                      /*!< [31:16] CMSIS Core(M) main version */
N#define __CM_CMSIS_VERSION_SUB   ( 4U)                                      /*!< [15:0]  CMSIS Core(M) sub version */
N#define __CM_CMSIS_VERSION       ((__CM_CMSIS_VERSION_MAIN << 16U) | \
N                                   __CM_CMSIS_VERSION_SUB           )       /*!< CMSIS Core(M) version number */
X#define __CM_CMSIS_VERSION       ((__CM_CMSIS_VERSION_MAIN << 16U) |                                    __CM_CMSIS_VERSION_SUB           )        
N#endif
L 64 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\core_cm0.h" 2
N 
N/*  CMSIS CM0 definitions */
N#define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] CMSIS HAL main version */
N#define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  CMSIS HAL sub version */
N#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
N                                    __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL version number */
X#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) |                                     __CM0_CMSIS_VERSION_SUB           )   
N
N#define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    This core does not support an FPU at all
N*/
N#define __FPU_USED       0U
N
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 0L
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
N  #endif
N
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_FP
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TI_ARM__ )
S  #if defined __TI_VFP_SUPPORT__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
N#endif
N
N#include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\cmsis_compiler.h" 1
N/**************************************************************************//**
N * @file     cmsis_compiler.h
N * @brief    CMSIS compiler generic header file
N * @version  V5.1.0
N * @date     09. October 2018
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_COMPILER_H
N#define __CMSIS_COMPILER_H
N
N#include <stdint.h>
N
N/*
N * Arm Compiler 4/5
N */
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS compiler ARMCC (Arm Compiler 5) header file
N * @version  V5.2.1
N * @date     26. March 2020
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2020 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060960 < 400677)
S  #error "Please use Arm Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* CMSIS compiler control architecture macros */
N#if ((defined (__TARGET_ARCH_6_M  ) && (__TARGET_ARCH_6_M   == 1)) || \
N     (defined (__TARGET_ARCH_6S_M ) && (__TARGET_ARCH_6S_M  == 1))   )
X#if ((0L && (__TARGET_ARCH_6_M   == 1)) ||      (1L && (1  == 1))   )
N  #define __ARM_ARCH_6M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7_M ) && (__TARGET_ARCH_7_M  == 1))
X#if (0L && (__TARGET_ARCH_7_M  == 1))
S  #define __ARM_ARCH_7M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7E_M) && (__TARGET_ARCH_7E_M == 1))
X#if (0L && (__TARGET_ARCH_7E_M == 1))
S  #define __ARM_ARCH_7EM__          1
N#endif
N
N  /* __ARM_ARCH_8M_BASE__  not applicable */
N  /* __ARM_ARCH_8M_MAIN__  not applicable */
N  /* __ARM_ARCH_8_1M_MAIN__  not applicable */
N
N/* CMSIS compiler control DSP macros */
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S  #define __ARM_FEATURE_DSP         1
N#endif
N
N/* CMSIS compiler specific defines */
N#ifndef   __ASM
N  #define __ASM                                  __asm
N#endif
N#ifndef   __INLINE
N  #define __INLINE                               __inline
N#endif
N#ifndef   __STATIC_INLINE
N  #define __STATIC_INLINE                        static __inline
N#endif
N#ifndef   __STATIC_FORCEINLINE                 
N  #define __STATIC_FORCEINLINE                   static __forceinline
N#endif           
N#ifndef   __NO_RETURN
N  #define __NO_RETURN                            __declspec(noreturn)
N#endif
N#ifndef   __USED
N  #define __USED                                 __attribute__((used))
N#endif
N#ifndef   __WEAK
N  #define __WEAK                                 __attribute__((weak))
N#endif
N#ifndef   __PACKED
N  #define __PACKED                               __attribute__((packed))
N#endif
N#ifndef   __PACKED_STRUCT
N  #define __PACKED_STRUCT                        __packed struct
N#endif
N#ifndef   __PACKED_UNION
N  #define __PACKED_UNION                         __packed union
N#endif
N#ifndef   __UNALIGNED_UINT32        /* deprecated */
N  #define __UNALIGNED_UINT32(x)                  (*((__packed uint32_t *)(x)))
N#endif
N#ifndef   __UNALIGNED_UINT16_WRITE
N  #define __UNALIGNED_UINT16_WRITE(addr, val)    ((*((__packed uint16_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT16_READ
N  #define __UNALIGNED_UINT16_READ(addr)          (*((const __packed uint16_t *)(addr)))
N#endif
N#ifndef   __UNALIGNED_UINT32_WRITE
N  #define __UNALIGNED_UINT32_WRITE(addr, val)    ((*((__packed uint32_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT32_READ
N  #define __UNALIGNED_UINT32_READ(addr)          (*((const __packed uint32_t *)(addr)))
N#endif
N#ifndef   __ALIGNED
N  #define __ALIGNED(x)                           __attribute__((aligned(x)))
N#endif
N#ifndef   __RESTRICT
N  #define __RESTRICT                             __restrict
N#endif
N#ifndef   __COMPILER_BARRIER
N  #define __COMPILER_BARRIER()                   __memory_changed()
N#endif
N
N/* #########################  Startup and Lowlevel Init  ######################## */
N
N#ifndef __PROGRAM_START
N#define __PROGRAM_START           __main
N#endif
N
N#ifndef __INITIAL_SP
N#define __INITIAL_SP              Image$$ARM_LIB_STACK$$ZI$$Limit
N#endif
N
N#ifndef __STACK_LIMIT
N#define __STACK_LIMIT             Image$$ARM_LIB_STACK$$ZI$$Base
N#endif
N
N#ifndef __VECTOR_TABLE
N#define __VECTOR_TABLE            __Vectors
N#endif
N
N#ifndef __VECTOR_TABLE_ATTRIBUTE
N#define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section("RESET")))
N#endif
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/**
N  \brief   Enable IRQ Interrupts
N  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __enable_irq();     */
N
N
N/**
N  \brief   Disable IRQ Interrupts
N  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Enable FIQ
S  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __enable_fault_irq                __enable_fiq
S
S
S/**
S  \brief   Disable FIQ
S  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __disable_fault_irq               __disable_fiq
S
S
S/**
S  \brief   Get Base Priority
S  \details Returns the current value of the Base Priority register.
S  \return               Base Priority register value
S */
S__STATIC_INLINE uint32_t  __get_BASEPRI(void)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  return(__regBasePri);
S}
S
S
S/**
S  \brief   Set Base Priority
S  \details Assigns the given value to the Base Priority register.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  __regBasePri = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Set Base Priority with condition
S  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
S           or the new value increases the BASEPRI priority level.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
S{
S  register uint32_t __regBasePriMax      __ASM("basepri_max");
S  __regBasePriMax = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Get Fault Mask
S  \details Returns the current value of the Fault Mask register.
S  \return               Fault Mask register value
S */
S__STATIC_INLINE uint32_t __get_FAULTMASK(void)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  return(__regFaultMask);
S}
S
S
S/**
S  \brief   Set Fault Mask
S  \details Assigns the given value to the Fault Mask register.
S  \param [in]    faultMask  Fault Mask value to set
S */
S__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  __regFaultMask = (faultMask & (uint32_t)1U);
S}
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N
N/**
N  \brief   Get FPSCR
N  \details Returns the current value of the Floating Point Status/Control register.
N  \return               Floating Point Status/Control register value
N */
N__STATIC_INLINE uint32_t __get_FPSCR(void)
Xstatic __inline uint32_t __get_FPSCR(void)
N{
N#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
N     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((0L && (__FPU_PRESENT == 1U)) &&      (1L && (0U    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
N#else
N   return(0U);
N#endif
N}
N
N
N/**
N  \brief   Set FPSCR
N  \details Assigns the given value to the Floating Point Status/Control register.
N  \param [in]    fpscr  Floating Point Status/Control value to set
N */
N__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
Xstatic __inline void __set_FPSCR(uint32_t fpscr)
N{
N#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
N     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((0L && (__FPU_PRESENT == 1U)) &&      (1L && (0U    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
N#else
N  (void)fpscr;
N#endif
N}
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB()                           __isb(0xF)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB()                           __dsb(0xF)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB()                           __dmb(0xF)
N
N                  
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x78563412.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 0x34127856.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For example, 0x0080 becomes 0x8000.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int16_t __REVSH(int16_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int16_t __REVSH(int16_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    op1  Value to rotate
N  \param [in]    op2  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S  #define __RBIT                          __rbit
N#else
N__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
X__attribute__((always_inline)) static __inline uint32_t __RBIT(uint32_t value)
N{
N  uint32_t result;
N  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
N
N  result = value;                      /* r will be reversed bits of v; first get LSB of v */
N  for (value >>= 1U; value != 0U; value >>= 1U)
N  {
N    result <<= 1U;
N    result |= value & 1U;
N    s--;
N  }
N  result <<= s;                        /* shift when v's highest bits are zero */
N  return result;
N}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   LDR Exclusive (8 bit)
S  \details Executes a exclusive LDR instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
S#else
S  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (16 bit)
S  \details Executes a exclusive LDR instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
S#else
S  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (32 bit)
S  \details Executes a exclusive LDR instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
S#else
S  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (8 bit)
S  \details Executes a exclusive STR instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (16 bit)
S  \details Executes a exclusive STR instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (32 bit)
S  \details Executes a exclusive STR instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   Remove the exclusive lock
S  \details Removes the exclusive lock which is created by LDREX.
S */
S#define __CLREX                           __clrex
S
S
S/**
S  \brief   Signed Saturate
S  \details Saturates a signed value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (1..32)
S  \return             Saturated value
S */
S#define __SSAT                            __ssat
S
S
S/**
S  \brief   Unsigned Saturate
S  \details Saturates an unsigned value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (0..31)
S  \return             Saturated value
S */
S#define __USAT                            __usat
S
S
S/**
S  \brief   Rotate Right with Extend (32 bit)
S  \details Moves each bit of a bitstring right by one bit.
S           The carry input is shifted in at the left end of the bitstring.
S  \param [in]    value  Value to rotate
S  \return               Rotated value
S */
S#ifndef __NO_EMBEDDED_ASM
S__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
S{
S  rrx r0, r0
S  bx lr
S}
S#endif
S
S
S/**
S  \brief   LDRT Unprivileged (8 bit)
S  \details Executes a Unprivileged LDRT instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (16 bit)
S  \details Executes a Unprivileged LDRT instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (32 bit)
S  \details Executes a Unprivileged LDRT instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
S
S
S/**
S  \brief   STRT Unprivileged (8 bit)
S  \details Executes a Unprivileged STRT instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRBT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (16 bit)
S  \details Executes a Unprivileged STRT instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRHT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (32 bit)
S  \details Executes a Unprivileged STRT instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRT(value, ptr)                __strt(value, ptr)
S
N#else  /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#else   
N
N/**
N  \brief   Signed Saturate
N  \details Saturates a signed value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (1..32)
N  \return             Saturated value
N */
N__attribute__((always_inline)) __STATIC_INLINE int32_t __SSAT(int32_t val, uint32_t sat)
X__attribute__((always_inline)) static __inline int32_t __SSAT(int32_t val, uint32_t sat)
N{
N  if ((sat >= 1U) && (sat <= 32U))
N  {
N    const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
N    const int32_t min = -1 - max ;
N    if (val > max)
N    {
N      return max;
N    }
N    else if (val < min)
N    {
N      return min;
N    }
N  }
N  return val;
N}
N
N/**
N  \brief   Unsigned Saturate
N  \details Saturates an unsigned value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (0..31)
N  \return             Saturated value
N */
N__attribute__((always_inline)) __STATIC_INLINE uint32_t __USAT(int32_t val, uint32_t sat)
X__attribute__((always_inline)) static __inline uint32_t __USAT(int32_t val, uint32_t sat)
N{
N  if (sat <= 31U)
N  {
N    const uint32_t max = ((1U << sat) - 1U);
N    if (val > (int32_t)max)
N    {
N      return max;
N    }
N    else if (val < 0)
N    {
N      return 0U;
N    }
N  }
N  return (uint32_t)val;
N}
N
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S#define __SADD8                           __sadd8
S#define __QADD8                           __qadd8
S#define __SHADD8                          __shadd8
S#define __UADD8                           __uadd8
S#define __UQADD8                          __uqadd8
S#define __UHADD8                          __uhadd8
S#define __SSUB8                           __ssub8
S#define __QSUB8                           __qsub8
S#define __SHSUB8                          __shsub8
S#define __USUB8                           __usub8
S#define __UQSUB8                          __uqsub8
S#define __UHSUB8                          __uhsub8
S#define __SADD16                          __sadd16
S#define __QADD16                          __qadd16
S#define __SHADD16                         __shadd16
S#define __UADD16                          __uadd16
S#define __UQADD16                         __uqadd16
S#define __UHADD16                         __uhadd16
S#define __SSUB16                          __ssub16
S#define __QSUB16                          __qsub16
S#define __SHSUB16                         __shsub16
S#define __USUB16                          __usub16
S#define __UQSUB16                         __uqsub16
S#define __UHSUB16                         __uhsub16
S#define __SASX                            __sasx
S#define __QASX                            __qasx
S#define __SHASX                           __shasx
S#define __UASX                            __uasx
S#define __UQASX                           __uqasx
S#define __UHASX                           __uhasx
S#define __SSAX                            __ssax
S#define __QSAX                            __qsax
S#define __SHSAX                           __shsax
S#define __USAX                            __usax
S#define __UQSAX                           __uqsax
S#define __UHSAX                           __uhsax
S#define __USAD8                           __usad8
S#define __USADA8                          __usada8
S#define __SSAT16                          __ssat16
S#define __USAT16                          __usat16
S#define __UXTB16                          __uxtb16
S#define __UXTAB16                         __uxtab16
S#define __SXTB16                          __sxtb16
S#define __SXTAB16                         __sxtab16
S#define __SMUAD                           __smuad
S#define __SMUADX                          __smuadx
S#define __SMLAD                           __smlad
S#define __SMLADX                          __smladx
S#define __SMLALD                          __smlald
S#define __SMLALDX                         __smlaldx
S#define __SMUSD                           __smusd
S#define __SMUSDX                          __smusdx
S#define __SMLSD                           __smlsd
S#define __SMLSDX                          __smlsdx
S#define __SMLSLD                          __smlsld
S#define __SMLSLDX                         __smlsldx
S#define __SEL                             __sel
S#define __QADD                            __qadd
S#define __QSUB                            __qsub
S
S#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
S                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
S
S#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
S                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
S
S#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
S                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
S
S#define __SXTB16_RORn(ARG1, ARG2)        __SXTB16(__ROR(ARG1, ARG2))
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 35 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\cmsis_compiler.h" 2
N
N
N/*
N * Arm Compiler 6.6 LTM (armclang)
N */
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050) && (__ARMCC_VERSION < 6100100)
S  #include "cmsis_armclang_ltm.h"
S
S  /*
S * Arm Compiler above 6.10.1 (armclang)
S */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6100100)
S  #include "cmsis_armclang.h"
S
S
S/*
S * GNU Compiler
S */
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S
S/*
S * IAR Compiler
S */
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iccarm.h>
S
S
S/*
S * TI Arm Compiler
S */
S#elif defined ( __TI_ARM__ )
S  #include <cmsis_ccs.h>
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __attribute__((packed))
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __attribute__((packed)) T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void*)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)                           __attribute__((aligned(x)))
S  #endif
S  #ifndef   __RESTRICT
S    #define __RESTRICT                             __restrict
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S/*
S * TASKING Compiler
S */
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __packed__
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __packed__
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __packed__
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __packed__ T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __align(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S/*
S * COSMIC Compiler
S */
S#elif defined ( __CSMC__ )
S   #include <cmsis_csm.h>
S
S #ifndef   __ASM
S    #define __ASM                                  _asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    // NO RETURN is automatically detected hence no warning here
S    #define __NO_RETURN
S  #endif
S  #ifndef   __USED
S    #warning No compiler specific solution for __USED. __USED is ignored.
S    #define __USED
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __weak
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               @packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        @packed struct
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         @packed union
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    @packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S#else
S  #error Unknown compiler.
N#endif
N
N
N#endif /* __CMSIS_COMPILER_H */
N
L 116 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\core_cm0.h" 2
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM0_H_DEPENDANT
N#define __CORE_CM0_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM0_REV
S    #define __CM0_REV               0x0000U
S    #warning "__CM0_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          2U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex_M0 */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
N    uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[1U];                
N        uint32_t RESERVED0[31U];
N  __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[1U];                
N        uint32_t RESERVED1[31U];
N  __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[1U];                
N        uint32_t RESERVED2[31U];
N  __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[1U];                
N        uint32_t RESERVED3[31U];
N        uint32_t RESERVED4[64U];
N  __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
X  volatile uint32_t IP[8U];                  
N}  NVIC_Type;
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N        uint32_t RESERVED0;
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N        uint32_t RESERVED1;
N  __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED */
X  volatile uint32_t SHP[2U];                 
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible over DAP and not via processor.
N            Therefore they are not covered by the Cortex-M0 header file.
N  @{
N */
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Core Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N#ifdef CMSIS_NVIC_VIRTUAL
S  #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
S    #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
S  #endif
S  #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
N#else
N  #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
N  #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
N  #define NVIC_EnableIRQ              __NVIC_EnableIRQ
N  #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
N  #define NVIC_DisableIRQ             __NVIC_DisableIRQ
N  #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
N  #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
N  #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
N/*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
N  #define NVIC_SetPriority            __NVIC_SetPriority
N  #define NVIC_GetPriority            __NVIC_GetPriority
N  #define NVIC_SystemReset            __NVIC_SystemReset
N#endif /* CMSIS_NVIC_VIRTUAL */
N
N#ifdef CMSIS_VECTAB_VIRTUAL
S  #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
S    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
S  #endif
S  #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
N#else
N  #define NVIC_SetVector              __NVIC_SetVector
N  #define NVIC_GetVector              __NVIC_GetVector
N#endif  /* (CMSIS_VECTAB_VIRTUAL) */
N
N#define NVIC_USER_IRQ_OFFSET          16
N
N
N/* The following EXC_RETURN values are saved the LR on exception entry */
N#define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */
N#define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */
N#define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */
N
N
N/* Interrupt Priorities are WORD accessible only under Armv6-M                  */
N/* The following MACROS handle generation of the register offset and byte masks */
N#define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
N#define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
N#define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
N
N#define __NVIC_SetPriorityGrouping(X) (void)(X)
N#define __NVIC_GetPriorityGrouping()  (0U)
N
N/**
N  \brief   Enable Interrupt
N  \details Enables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    __COMPILER_BARRIER();
X    __memory_changed();
N    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
N    __COMPILER_BARRIER();
X    __memory_changed();
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Enable status
N  \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt is not enabled.
N  \return             1  Interrupt is enabled.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Disable Interrupt
N  \details Disables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
N    __DSB();
X    __dsb(0xF);
N    __ISB();
X    __isb(0xF);
N  }
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the NVIC pending register and returns the pending bit for the specified device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N  \note    The priority cannot be set for every processor exception.
N */
N__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  = ((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N  else
N  {
N    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] = ((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[ ( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N  else
N  {
N    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N}
N
N
N/**
N  \brief   Encode Priority
N  \details Encodes the priority for an interrupt with the given priority group,
N           preemptive priority value, and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]     PriorityGroup  Used priority group.
N  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
N  \param [in]       SubPriority  Subpriority value (starting from 0).
N  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
N */
N__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(2)) ? (uint32_t)(2) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(2)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(2));
N
N  return (
N           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
N           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
N         );
N}
N
N
N/**
N  \brief   Decode Priority
N  \details Decodes an interrupt priority value with a given priority group to
N           preemptive priority value and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
N  \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC_GetPriority().
N  \param [in]     PriorityGroup  Used priority group.
N  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
N  \param [out]     pSubPriority  Subpriority value (starting from 0).
N */
N__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
Xstatic __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(2)) ? (uint32_t)(2) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(2)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(2));
N
N  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
N  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
N}
N
N
N
N/**
N  \brief   Set Interrupt Vector
N  \details Sets an interrupt vector in SRAM based interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N           Address 0 must be mapped to SRAM.
N  \param [in]   IRQn      Interrupt number
N  \param [in]   vector    Address of interrupt handler function
N */
N__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
Xstatic __inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
N{
N  uint32_t *vectors = (uint32_t *)(NVIC_USER_IRQ_OFFSET << 2);      /* point to 1st user interrupt */
X  uint32_t *vectors = (uint32_t *)(16 << 2);       
N  *(vectors + (int32_t)IRQn) = vector;                              /* use pointer arithmetic to access vector */
N  /* ARM Application Note 321 states that the M0 does not require the architectural barrier */
N}
N
N
N/**
N  \brief   Get Interrupt Vector
N  \details Reads an interrupt vector from interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn      Interrupt number.
N  \return                 Address of interrupt handler function
N */
N__STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
N{
N  uint32_t *vectors = (uint32_t *)(NVIC_USER_IRQ_OFFSET << 2);      /* point to 1st user interrupt */
X  uint32_t *vectors = (uint32_t *)(16 << 2);       
N  return *(vectors + (int32_t)IRQn);                                /* use pointer arithmetic to access vector */
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
X__declspec(noreturn) static __inline void __NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  __dsb(0xF);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FAUL << 16U) |
N                 SCB_AIRCR_SYSRESETREQ_Msk);
X                 (1UL << 2U));
N  __DSB();                                                          /* Ensure completion of memory access */
X  __dsb(0xF);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N/* ##########################  FPU functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_FpuFunctions FPU Functions
N  \brief    Function that provides FPU type.
N  @{
N */
N
N/**
N  \brief   get FPU type
N  \details returns the FPU type
N  \returns
N   - \b  0: No FPU
N   - \b  1: Single precision FPU
N   - \b  2: Double + Single precision FPU
N */
N__STATIC_INLINE uint32_t SCB_GetFPUType(void)
Xstatic __inline uint32_t SCB_GetFPUType(void)
N{
N    return 0U;           /* No FPU */
N}
N
N
N/*@} end of CMSIS_Core_FpuFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
X#if 1L && (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  __NVIC_SetPriority (SysTick_IRQn, (1UL << 2) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 107 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z.h" 2
N#include <stdint.h>
N
N/**
N *************************************************
N *  New type definitions
N *************************************************
N */
Ntypedef signed char boolean;		/*!< Boolean	*/
Ntypedef unsigned char byte;			/*!< Byte		*/
N//typedef signed char int8;
N//typedef signed char sint8;
N//typedef unsigned char uint8;
N//typedef signed short int16;
N//typedef signed short sint16;
N//typedef unsigned short uint16;
N//typedef signed int int16;
N//typedef signed int sint16;
N//typedef unsigned int uint16;
N//typedef signed long int32;
N//typedef signed long sint32;
N//typedef unsigned long uint32;
Ntypedef unsigned long long uint64;	/*!< Uint 64-bit	*/
Ntypedef float float32;				/*!< Float 32-bit	*/
Ntypedef double float64;				/*!< Float 64-bit	*/
N
N/**
N *************************************************
N *  @union		ctype
N *				Combined 32/16/8-bit type
N *************************************************
N */
Ntypedef union
N{								
N	__IO uint8_t    B[4];			/*!< Byte 8-bit 		*/
X	volatile uint8_t    B[4];			 
N	__IO uint16_t   H[2];			/*!< Half-Word 16-bit 	*/
X	volatile uint16_t   H[2];			 
N	__IO uint32_t   W;				/*!< Word 32-bit 		*/
X	volatile uint32_t   W;				 
N} ctype;
N
N
N/**
N *************************************************
N *  General definitions
N *************************************************
N */
N//#define     __I     volatile                /*!< defines 'read only' permissions		*/
N//#define     __O     volatile                /*!< defines 'write only' permissions		*/
N//#define     __IO    volatile                /*!< defines 'read / write' permissions	*/
N
N#define TRUE		1				/*!< True	*/
N#define FALSE		0				/*!< False	*/
N
N//#define ENABLE		1
N//#define DISABLE		0
N
N#define MASK8(val)  (((val) < 256) ? (val) : (val) < 65536 ? (val) >> 8 : (val) < 16777216 ?  (val) >> 16 : (val) >> 24)	/*!< Mask 8-bit		*/  
N#define MASK16(val)  (((val) < 65536) ? (val) : (val)>> 16) 																/*!< Mask 16-bit	*/
N
N/**
N ******************************************************************************
N * @enum        FunctionalState
N *              Enable/Disable
N ******************************************************************************
N */
Ntypedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;										/*!< Enable/Disable	*/
N/**
N ******************************************************************************
N * @enum        FlagStatus
N *              Clear/Se
N ******************************************************************************
N */
Ntypedef enum {CLR = 0, SET = !CLR} FlagStatus ,BitAction;											/*!< Clear/Set	*/
N/**
N ******************************************************************************
N * @enum        ITStatus
N *              None/Happened/Stable/Unstable
N ******************************************************************************
N */
Ntypedef enum {NONE = 0,  HAPPENED = !NONE, UNSTABLE = 0, STABLE = !UNSTABLE} ITStatus, CSCStatus;	/*!< None/Happened/Stable/Unstablee	*/       
N
N
N/**
N *************************************************
N *  Hardware Access
N *************************************************
N */
N 
N///**
N// * @brief  get register value
N// * @param  _reg : definitions of register name, like MODULE_REGNAME
N// */
N//#define HW_ReadReg(_reg)             (_reg)											/*!< Hardware Read Register */
N
N///**
N// * @brief  set register value
N// * @param  _reg : definitions of register name, like MODULE_REGNAME
N// * @param  _value : definitions of register value, like MODULE_REGNAME_xyz
N// */
N//#define HW_WriteReg(_reg, _value)     _reg = (_value)								/*!< Hardware Write Register */
N
N///**
N// * @brief  set register bits value =1
N// * @param  _reg : definitions of register name, like MODULE_REGNAME
N// * @param  _mask : definitions of register mask value, like MODULE_REGNAME_mask
N// */
N//#define HW_SetBit(_reg, _mask)		HW_WriteReg(_reg, (HW_ReadReg(_reg) | (_mask))) /*!< Hardware Set Register Bit */
N
N///**
N// * @brief  set register bits value =0
N// * @param  _reg : definitions of register name, like MODULE_REGNAME
N// * @param  _mask : definitions of register mask value, like MODULE_REGNAME_mask
N// */
N//#define HW_ClrBit(_reg, _mask)		HW_WriteReg(_reg, (HW_ReadReg(_reg) & ~(_mask)))    /*!< Hardware Clear Register Bit */
N
N/**
N * @brief  get register bit value
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  BIT : definitions of register mask value, like MODULE_REGNAME_mask
N */
N#define READ_BIT(REG, BIT)    ((REG) & (BIT))
N
N/**
N * @brief  clear register, value = 0
N * @param  REG : definitions of register name, like MODULE_REGNAME
N */
N#define CLEAR_REG(REG)        ((REG) = (0x0))                                       /*!< Hardware Clear Register */
N
N/**
N * @brief  set register value
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  VAL : definitions of register value, like MODULE_REGNAME_xyz
N */
N#define WRITE_REG(REG, VAL)   ((REG) = (VAL))                                       /*!< Hardware Write Register */
N
N/**
N * @brief  get register value
N * @param  REG : definitions of register name, like MODULE_REGNAME
N */
N#define READ_REG(REG)         ((REG))                                               /*!< Hardware Write Register */
N
N/**
N * @brief  set register bits value =1
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  BIT : definitions of register mask value, like MODULE_REGNAME_mask
N */
N#define SET_BIT(REG, BIT)     ((REG) |= (BIT))                                      /*!< Hardware Set Register Bit */
N
N/**
N * @brief  set register bits value =0
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  BIT : definitions of register mask value, like MODULE_REGNAME_mask
N */
N#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))                                     /*!< Hardware Clear Register Bit */
N
N/**
N * @brief  set register bits value =1
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  CLEARMASK : definitions of register mask value, like MODULE_REGNAME_mask
N * @param  SETMASK : definitions of register mask value, like MODULE_REGNAME_mask
N */
N#define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))  /*!< Hardware Register Modify */
N
N/**
N ******************************************************************************
N *
N *              Header Files Include
N *
N ******************************************************************************
N */
N//#include "MG32x02z__RegPointer.h"
N//#include "MG32x02z__RegAddress.h"
N//#include "MG32x02z_GPIO.h"
N//#include "MG32x02z_GPL.h"
N//#include "MG32x02z_DMA.h"
N//#include "MG32x02z_RST.h"
N//#include "MG32x02z_CSC.h"
N//#include "MG32x02z_PW.h"
N//#include "MG32x02z_SYS.h"
N//#include "MG32x02z_MEM.h"
N//#include "MG32x02z_EMB.h"
N//#include "MG32x02z_CFG.h"
N//#include "MG32x02z_EXIC.h"
N//#include "MG32x02z_I2C.h"
N//#include "MG32x02z_URT.h"
N//#include "MG32x02z_SPI.h"
N//#include "MG32x02z_TM.h"
N//#include "MG32x02z_ADC.h"
N//#include "MG32x02z_CMP.h"
N//#include "MG32x02z_DAC.h"
N//#include "MG32x02z_IWDT.h"
N//#include "MG32x02z_WWDT.h"
N//#include "MG32x02z_RTC.h"
N//#include "MG32x02z_APB.h"
N//#include "MG32x02z_CPU.h"
N
N#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050) /* ARM Compiler V6 */
X#if 1L && (5060960 >= 6010050)  
S  #ifndef __weak
S    #define __weak  __attribute__((weak))
S  #endif
S  #ifndef __packed
S    #define __packed  __attribute__((packed))
S  #endif
S#elif defined ( __GNUC__ ) && !defined (__CC_ARM) /* GNU Compiler */
X#elif 0L && !1L  
S  #ifndef __weak
S    #define __weak   __attribute__((weak))
S  #endif /* __weak */
S  #ifndef __packed
S    #define __packed __attribute__((__packed__))
S  #endif /* __packed */
N#endif /* __GNUC__ */
N
N/* Macro to get variable aligned on 4-bytes, for __ICCARM__ the directive "#pragma data_alignment=4" must be used instead */
N#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050) /* ARM Compiler V6 */
X#if 1L && (5060960 >= 6010050)  
S  #ifndef __ALIGN_BEGIN
S    #define __ALIGN_BEGIN
S  #endif
S  #ifndef __ALIGN_END
S    #define __ALIGN_END      __attribute__ ((aligned (4)))
S  #endif
S#elif defined ( __GNUC__ ) && !defined (__CC_ARM) /* GNU Compiler */
X#elif 0L && !1L  
S  #ifndef __ALIGN_END
S    #define __ALIGN_END    __attribute__ ((aligned (4)))
S  #endif /* __ALIGN_END */
S  #ifndef __ALIGN_BEGIN  
S    #define __ALIGN_BEGIN
S  #endif /* __ALIGN_BEGIN */
N#else
N  #ifndef __ALIGN_END
N    #define __ALIGN_END
N  #endif /* __ALIGN_END */
N  #ifndef __ALIGN_BEGIN      
N    #if defined   (__CC_ARM)      /* ARM Compiler V5*/
X    #if 1L       
N      #define __ALIGN_BEGIN    __align(4)  
N    #elif defined (__ICCARM__)    /* IAR Compiler */
S      #define __ALIGN_BEGIN 
N    #endif /* __CC_ARM */
N  #endif /* __ALIGN_BEGIN */
N#endif /* __GNUC__ */
N
N/** 
N  * @brief  __NOINLINE definition
N  */ 
N#if defined ( __CC_ARM   ) || (defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) || defined   (  __GNUC__  )
X#if 1L || (1L && (5060960 >= 6010050)) || 0L
N/* ARM V4/V5 and V6 & GNU Compiler
N   -------------------------------
N*/
N  #define __NOINLINE __attribute__ ( (noinline) )
N
N#elif defined ( __ICCARM__ )
S  /* ICCARM Compiler
S     ---------------
S  */
S  #define __NOINLINE _Pragma("optimize = no_inline")
S
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif  // _MG32x02z_H
N
N/*----------------------------------------------------------------------------*/
N/*                           End of file MG32x02z.h                           */
N/*----------------------------------------------------------------------------*/
L 56 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_COMMON_MID.h" 2
N#include "MG32x02z_SYS.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z_SYS.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_SYS.h
N *
N * @brief       MG32x02z SYS Register Definitions Header File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:41 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z_SYS_H
N#define _MG32x02z_SYS_H
N#define _MG32x02z_SYS_H_VER                         3.9     /*!< File Version */
N
N#if !(MG32x02z_H_VER == MG32x02z_SYS_H_VER)
S    #error "MG32x02z_SYS_H - Main/Module Version Mismatch !"
N#endif
N
N/**
N ******************************************************************************
N *
N * @struct      SYS_Struct
N *              SYS  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    __I uint32_t  RESERVED0;            /*!< RESERVED0  ~ Offset[0x00]  Reserved */
X    volatile const uint32_t  RESERVED0;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  IEA           :1;     //[0] System interrupt all enable
X            volatile uint8_t  IEA           :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :7;     //[7..1] 
X            volatile const  uint8_t                :7;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }INT;                               /*!< INT        ~ Offset[0x04]  SYS interrupt enable register */
N
N    __I uint32_t  RESERVED1;            /*!< RESERVED1  ~ Offset[0x08]  Reserved */
X    volatile const uint32_t  RESERVED1;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint32_t MID           :32;    //[31..0] Chip manufacture identification code.
X            volatile const  uint32_t MID           :32;    
N        }MBIT;
N    }MID;                               /*!< MID        ~ Offset[0x0C]  SYS chip manufacture identification code */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :1;     //[0] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :6;     //[7..2] 
X            volatile const  uint8_t                :6;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __IO uint8_t  CH0_LAST      :1;     //[16] DMA Channel-0 last loop command
X            volatile uint8_t  CH0_LAST      :1;     
N                                        //0 = Not
N                                        //1 = Yes
N            __IO uint8_t  CH1_LAST      :1;     //[17] DMA Channel-1 last loop command
X            volatile uint8_t  CH1_LAST      :1;     
N                                        //0 = Not
N                                        //1 = Yes
N            __IO uint8_t  CH2_LAST      :1;     //[18] DMA Channel-2 last loop command
X            volatile uint8_t  CH2_LAST      :1;     
N                                        //0 = Not
N                                        //1 = Yes
N            __IO uint8_t  GPR           :5;     //[23..19] General purpose data register bits.
X            volatile uint8_t  GPR           :5;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }CR0;                               /*!< CR0        ~ Offset[0x10]  SYS System control register 0 */
N
N} SYS_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        SYS  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define SYS_Base                        ((uint32_t)0x4C030000)              /*!< System and Chip Control */
N#define SYS                             ((SYS_Struct*) SYS_Base)
N///@}
N
N/**
N ******************************************************************************
N *
N * @name        SYS  [Register Definitions]
N *
N ******************************************************************************
N */
N/**
N ******************************************************************************
N * @name        SYS_INT  [register's definitions]
N *              Offset[0x04]  SYS interrupt enable register (0x4C030004)
N ******************************************************************************
N */
N///@{
N#define SYS_INT_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of SYS_INT */
N#define SYS_INT_IEA_mask_w                          ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define SYS_INT_IEA_mask_h0                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define SYS_INT_IEA_mask_b0                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define SYS_INT_IEA_disable_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define SYS_INT_IEA_disable_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define SYS_INT_IEA_disable_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define SYS_INT_IEA_enable_w                        ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define SYS_INT_IEA_enable_h0                       ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define SYS_INT_IEA_enable_b0                       ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        SYS_MID  [register's definitions]
N *              Offset[0x0C]  SYS chip manufacture identification code (0x4C03000C)
N ******************************************************************************
N */
N///@{
N#define SYS_MID_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of SYS_MID */
N#define SYS_MID_MID_mask_w                          ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define SYS_MID_MID_shift_w                         (0)                     /*!< Bit Shift of 32bit */
N#define SYS_MID_MID_shift_h0                        (0)                     /*!< Bit Shift of 16bit */
N#define SYS_MID_MID_shift_b0                        (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        SYS_CR0  [register's definitions]
N *              Offset[0x10]  SYS System control register 0 (0x4C030010)
N ******************************************************************************
N */
N///@{
N#define SYS_CR0_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of SYS_CR0 */
N#define SYS_CR0_GPR_mask_w                          ((uint32_t)0x00F80000)  /*!< Bit Mask of 32bit */
N#define SYS_CR0_GPR_mask_h1                         ((uint16_t)0x00F8)      /*!< Bit Mask of 16bit */
N#define SYS_CR0_GPR_mask_b2                         ((uint8_t )0xF8)        /*!< Bit Mask of 8bit */
N#define SYS_CR0_GPR_shift_w                         (19)                    /*!< Bit Shift of 32bit */
N#define SYS_CR0_GPR_shift_h1                        (3)                     /*!< Bit Shift of 16bit */
N#define SYS_CR0_GPR_shift_b2                        (3)                     /*!< Bit Shift of 8bit */
N
N#define SYS_CR0_CH2_LAST_mask_w                     ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define SYS_CR0_CH2_LAST_mask_h1                    ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define SYS_CR0_CH2_LAST_mask_b2                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define SYS_CR0_CH2_LAST_not_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Not of 32bit */
N#define SYS_CR0_CH2_LAST_not_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Not of 16bit */
N#define SYS_CR0_CH2_LAST_not_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0):Not of 8bit */
N#define SYS_CR0_CH2_LAST_yes_w                      ((uint32_t)0x00040000)  /*!< Bit Value =(1):Yes of 32bit */
N#define SYS_CR0_CH2_LAST_yes_h1                     ((uint16_t)0x0004)      /*!< Bit Value =(1):Yes of 16bit */
N#define SYS_CR0_CH2_LAST_yes_b2                     ((uint8_t )0x04)        /*!< Bit Value =(1):Yes of 8bit */
N
N#define SYS_CR0_CH1_LAST_mask_w                     ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define SYS_CR0_CH1_LAST_mask_h1                    ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define SYS_CR0_CH1_LAST_mask_b2                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define SYS_CR0_CH1_LAST_not_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Not of 32bit */
N#define SYS_CR0_CH1_LAST_not_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Not of 16bit */
N#define SYS_CR0_CH1_LAST_not_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0):Not of 8bit */
N#define SYS_CR0_CH1_LAST_yes_w                      ((uint32_t)0x00020000)  /*!< Bit Value =(1):Yes of 32bit */
N#define SYS_CR0_CH1_LAST_yes_h1                     ((uint16_t)0x0002)      /*!< Bit Value =(1):Yes of 16bit */
N#define SYS_CR0_CH1_LAST_yes_b2                     ((uint8_t )0x02)        /*!< Bit Value =(1):Yes of 8bit */
N
N#define SYS_CR0_CH0_LAST_mask_w                     ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define SYS_CR0_CH0_LAST_mask_h1                    ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define SYS_CR0_CH0_LAST_mask_b2                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define SYS_CR0_CH0_LAST_not_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Not of 32bit */
N#define SYS_CR0_CH0_LAST_not_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Not of 16bit */
N#define SYS_CR0_CH0_LAST_not_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0):Not of 8bit */
N#define SYS_CR0_CH0_LAST_yes_w                      ((uint32_t)0x00010000)  /*!< Bit Value =(1):Yes of 32bit */
N#define SYS_CR0_CH0_LAST_yes_h1                     ((uint16_t)0x0001)      /*!< Bit Value =(1):Yes of 16bit */
N#define SYS_CR0_CH0_LAST_yes_b2                     ((uint8_t )0x01)        /*!< Bit Value =(1):Yes of 8bit */
N
N///@}
N
N#endif  // _MG32x02z_SYS_H
N
N/*----------------------------------------------------------------------------*/
N/*                         End of file MG32x02z_SYS.h                         */
N/*----------------------------------------------------------------------------*/
L 57 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_COMMON_MID.h" 2
N#include "MG32x02z_CONF_MID.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_CONF_MID.h" 1
N /**
N ******************************************************************************
N *
N * @file        MG32x02z_CONF_MID.h
N * @brief       Header file of Configuration MID module.
N *
N * @par         Project
N *              MG32x02z
N * @version     V1.00
N * @date        2019/10/22
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2017 MegaWin Technology Co., Ltd.
N *              All rights reserved.
N * 
N ******************************************************************************
N * @attention
N *
N * <h2><center>&copy; COPYRIGHT(c) 2019 megawin Technology Co., Ltd.</center></h2>
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *   1. Redistributions of source code must retain the above copyright notice,
N *      this list of conditions and the following disclaimer.
N *   2. Redistributions in binary form must reproduce the above copyright notice,
N *      this list of conditions and the following disclaimer in the documentation
N *      and/or other materials provided with the distribution.
N *   3. Neither the name of megawin Technology Co., Ltd. nor the names of its
N *      contributors may be used to endorse or promote products derived from this
N *      software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SMID_L THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N ******************************************************************************
N */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef _MG32x02z_CONF_MID_H
N#define _MG32x02z_CONF_MID_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/
N
N/* ########################## XTAL/IHRCO Values adaptation ##################### */
N/**
N  * @brief Adjust the value of External Clock Input Speed (EXTCK) used in your application.
N  *        This value is used by the RCC MID_ module to compute the system frequency
N  *        (when EXTCK is used as system clock source, directly or through the PLL).  
N  */
N#if !defined  (EXTCK_VALUE) 
X#if !0L 
N  #define EXTCK_VALUE    ((uint32_t)12000000) /*!< Value of the External Input Clock Speed in Hz */
N#endif /* EXTCK_VALUE */
N
N/**
N  * @brief Adjust the value of External High Speed oscillator (XTAL) used in your application.
N  *        This value is used by the RCC MID_ module to compute the system frequency
N  *        (when XTAL is used as system clock source, directly or through the PLL).  
N  */
N#if !defined  (XTAL_VALUE) 
X#if !0L 
N  #define XTAL_VALUE    ((uint32_t)12000000) /*!< Value of the External oscillator in Hz */
N#endif /* XTAL_VALUE */
N
N/**
N  * @brief In the following line adjust the External High Speed oscillator (XTAL) Startup 
N  *        Timeout value 
N  */
N#if !defined  (XTAL_STARTUP_TIMEOUT)
X#if !0L
N  #define XTAL_STARTUP_TIMEOUT    ((uint32_t)100)   /*!< Time out for XTAL start up, in ms */
N#endif /* XTAL_STARTUP_TIMEOUT */
N
N/**
N  * @brief Internal High Speed oscillator (IHRCO) value.
N  *        This value is used by the RCC MID_ module to compute the system frequency
N  *        (when IHRCO is used as system clock source, directly or through the PLL). 
N  */
N#if !defined  (IHRCO_VALUE)
X#if !0L
N  #define IHRCO_VALUE    ((uint32_t)12000000) /*!< Value of the Internal oscillator in Hz*/
N#endif /* IHRCO_VALUE */
N
N/**
N  * @brief In the following line adjust the Internal High Speed oscillator (IHRCO) Startup 
N  *        Timeout value 
N  */
N#if !defined  (IHRCO_STARTUP_TIMEOUT) 
X#if !0L 
N #define IHRCO_STARTUP_TIMEOUT   ((uint32_t)5000) /*!< Time out for IHRCO start up */
N#endif /* IHRCO_STARTUP_TIMEOUT */  
N
N/**
N  * @brief Internal Low Speed oscillator (ILRCO) value.
N  */
N#if !defined  (ILRCO_VALUE) 
X#if !0L 
N #define ILRCO_VALUE  ((uint32_t)32000)    
N#endif /* ILRCO_VALUE */                      /*!< Value of the Internal Low Speed oscillator in Hz
N                                                   The real value may vary depending on the variations
N                                                   in voltage and temperature.  */
N
N/* Tip: To avoid modifying this file each time you need to use different XTAL,
N   ===  you can define the XTAL value in your toolchain compiler preprocessor. */
N
N/* ########################### System Configuration ######################### */
N/**
N  * @brief This is the MID_ system configuration section
N  */     
N#define  VDD_VALUE                    ((uint32_t)5000) /*!< Value of VDD in mv */           
N#define  TICK_INT_PRIORITY            ((uint32_t)0)    /*!< tick interrupt priority (lowest by default)  */            
N                                                       /*  Warning: Must be set to higher priority for MID_Delay()  */
N                                                       /*  and MID_GetTick() usage under interrupt context          */
N#define  USE_RTOS                       0              /*!< Application the RTOS */
N//#define  INSTRUCTION_CACHE_ENABLE     0
N//#define  DATA_CACHE_ENABLE            0
N/* ########################## Assert Selection ############################## */
N/**
N  * @brief Uncomment the line below to expanse the "assert_param" macro in the 
N  *        MID_ drivers code
N  */
N/* #define USE_FULL_ASSERT   1U */
N
N
N
N/* Includes ------------------------------------------------------------------*/
N
N
N
N/* Exported macro ------------------------------------------------------------*/
N#ifdef  USE_FULL_ASSERT
S/**
S  * @brief  The assert_param macro is used for function's parameters check.
S  * @param  expr: If expr is false, it calls assert_failed function
S  *         which reports the name of the source file and the source
S  *         line number of the call that failed. 
S  *         If expr is true, it returns no value.
S  * @retval None
S  */
S  #define assert_param(expr) ((expr) ? (void)0U : assert_failed((char *)__FILE__, __LINE__))
S/* Exported functions ------------------------------------------------------- */
S  void assert_failed(char* file, uint32_t line);
N#else
N  #define assert_param(expr) ((void)0U)
N#endif /* USE_FULL_ASSERT */    
N    
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __MG32x02z_CONF_MID_H */
N
N/************** (C) COPYRIGHT megawin Technology Co., Ltd. *****END OF FILE****/
N
N
L 58 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_COMMON_MID.h" 2
N#include "MG32x02z_CORTEX_MID.H"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_CORTEX_MID.H" 1
N /**
N ******************************************************************************
N *
N * @file        MG32x02z_Cortex_MID.h
N * @brief       Header file of CORTEX MID module.
N *
N * @par         Project
N *              MG32x02z
N * @version     V1.00
N * @date        2019/10/22
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2017 MegaWin Technology Co., Ltd.
N *              All rights reserved.
N *
N ******************************************************************************
N * @attention
N *
N * <h2><center>&copy; COPYRIGHT(c) 2019 megawin Technology Co., Ltd.</center></h2>
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *   1. Redistributions of source code must retain the above copyright notice,
N *      this list of conditions and the following disclaimer.
N *   2. Redistributions in binary form must reproduce the above copyright notice,
N *      this list of conditions and the following disclaimer in the documentation
N *      and/or other materials provided with the distribution.
N *   3. Neither the name of megawin Technology Co., Ltd. nor the names of its
N *      contributors may be used to endorse or promote products derived from this
N *      software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SMIDL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N ******************************************************************************
N */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef _MG32x02z_cortex_MID_H
N#define _MG32x02z_cortex_MID_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "MG32x02z_COMMON_MID.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_COMMON_MID.h" 1
N /**
N ******************************************************************************
N *
N * @file        MG32x02z_Common_MID.H
N * @brief       Header file of Common Configuration module.
N *
N * @par         Project
N *              MG32x02z
N * @version     V1.00
N * @date        2019/10/22
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2017 MegaWin Technology Co., Ltd.
N *              All rights reserved.
N *
N ******************************************************************************
N * @attention
N *
N * <h2><center>&copy; COPYRIGHT(c) 2019 megawin Technology Co., Ltd.</center></h2>
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *   1. Redistributions of source code must retain the above copyright notice,
N *      this list of conditions and the following disclaimer.
N *   2. Redistributions in binary form must reproduce the above copyright notice,
N *      this list of conditions and the following disclaimer in the documentation
N *      and/or other materials provided with the distribution.
N *   3. Neither the name of megawin Technology Co., Ltd. nor the names of its
N *      contributors may be used to endorse or promote products derived from this
N *      software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SMID_L THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
N * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
N * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N *
N ******************************************************************************
N */ 
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef _MG32x02z_COMMON_MID_H
S#define _MG32x02z_COMMON_MID_H
S
S#ifdef __cplusplus
S extern "C" {
S#endif
S
S/* Includes ------------------------------------------------------------------*/
S#include <stdio.h>
S#include "MG32x02z.h"
S#include "MG32x02z_SYS.h"
S#include "MG32x02z_CONF_MID.h"
S#include "MG32x02z_CORTEX_MID.H"
S
S/* Exported types ------------------------------------------------------------*/
S
S/** 
S  * @enum   MID_StatusTypeDef
S  * @brief  MID Status structures definition  
S  */  
Stypedef enum 
S{
S    MID_SUCCESS  = 0x00,    /*!< Success    */
S    MID_FAILURE  = 0x01,    /*!< Failure    */
S    MID_OK       = 0x00,    /*!< OK         */
S    MID_ERROR    = 0x01,    /*!< Error      */
S    MID_BUSY     = 0x02,    /*!< Busy       */
S    MID_TIMEOUT  = 0x03,    /*!< Timout     */
S}MID_StatusTypeDef;
S
S
S
S/** 
S  * @enum   MID_LockTypeDef
S  * @brief  MID Lock structures definition  
S  */
Stypedef enum 
S{
S    MID_UnLocked = 0x00,
S    MID_UNLOCKED = 0x00,
S    MID_Locked   = 0x01,
S    MID_LOCKED   = 0x01,
S}MID_LockTypeDef;
S
S
S
S
S#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))  /*!< MID Status param Check */
S
S
S/** 
S  * @enum   ErrorStatus
S  * @brief  MID Lock structures definition  
S  */
Stypedef enum
S{
S    ERROR = 0,
S    SUCCESS = !ERROR
S}   ErrorStatus;
S
S
S/** 
S  * @enum   MID_ProtectTypeDef
S  * @brief  MID Lock structures definition  
S  */
Stypedef enum
S{
S    RSTmodule    = (uint32_t)0x4C00000C,
S    CSCmodule    = (uint32_t)0x4C01000C,  
S    PWmodule     = (uint32_t)0x4C02000C,
S    MEMmodule    = (uint32_t)0x4D00000C,  
S    MEM2module   = (uint32_t)0x4D00000E,
S    CFGmodule    = (uint32_t)0x4FF0000C,
S    IWDTmodule   = (uint32_t)0x5D00000C,  
S    WWDTmodule   = (uint32_t)0x5D01000C,  
S    RTCmodule    = (uint32_t)0x5D04000C,
S}MID_ProtectTypeDef;          /*!< Definitions for protection function */
S
S
S
S/* Exported constants -------------------------------------------------------*/
S
S
S
S/* Exported macro ------------------------------------------------------------*/
S
S#define MID_MAX_DELAY               0xFFFFFFFFU      /*!< Max Delay Time */
S
S#define MID_IS_BIT_SET(REG, BIT)    (((REG) & (BIT)) == (BIT))
S#define MID_IS_BIT_CLR(REG, BIT)    (((REG) & (BIT)) == 0U)
S
S#define __MID_LINKDMA(__HANDLE__, __PPP_DMA_FIELD__, __DMA_HANDLE__)               \
S                        do{                                                      \
S                              (__HANDLE__)->__PPP_DMA_FIELD__ = &(__DMA_HANDLE__); \
S                              (__DMA_HANDLE__).Parent = (__HANDLE__);             \
S                          } while(0)
X#define __MID_LINKDMA(__HANDLE__, __PPP_DMA_FIELD__, __DMA_HANDLE__)                                       do{                                                                                    (__HANDLE__)->__PPP_DMA_FIELD__ = &(__DMA_HANDLE__);                               (__DMA_HANDLE__).Parent = (__HANDLE__);                                       } while(0)
S
S#define assert_param(expr) ((void)0U)               /*!< assert_param Not Check */
S        
S#define UNUSED(x) ((void)(x))                       /*!< UNUSED Function */
S
S/** @brief Reset the Handle's State field.
S  * @param "__HANDLE__" specifies the Peripheral Handle.
S  * @note  This macro can be used for the following purpose:
S  *          - When the Handle is declared as local variable; before passing it as parameter
S  *            to HAL_PPP_Init() for the first time, it is mandatory to use this macro
S  *            to set to 0 the Handle's "State" field.
S  *            Otherwise, "State" field may have any random value and the first time the function
S  *            HAL_PPP_Init() is called, the low level hardware initialization will be missed
S  *            (i.e. HAL_PPP_MspInit() will not be executed).
S  *          - When there is a need to reconfigure the low level hardware: instead of calling
S  *            HAL_PPP_DeInit() then HAL_PPP_Init(), user can make a call to this macro then HAL_PPP_Init().
S  *            In this later function, when the Handle's "State" field is set to 0, it will execute the function
S  *            HAL_PPP_MspInit() which will reconfigure the low level hardware.
S  * @retval None
S  */
S#define __MID_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = 0)
S
S#if (USE_RTOS == 1)
S  #error " USE_RTOS should be 0 in the current MID release "
S#else
S    #define __MID_LOCK(__HANDLE__)                                             \
S                                    do{                                        \
S                                        if((__HANDLE__)->Lock == MID_Locked)   \
S                                        {                                      \
S                                           return MID_BUSY;                    \
S                                        }                                      \
S                                        else                                   \
S                                        {                                      \
S                                           (__HANDLE__)->Lock = MID_Locked;    \
S                                        }                                      \
S                                      }while (0)  /*!< Module Lcok */
X    #define __MID_LOCK(__HANDLE__)                                                                                 do{                                                                                if((__HANDLE__)->Lock == MID_Locked)                                           {                                                                                 return MID_BUSY;                                                            }                                                                              else                                                                           {                                                                                 (__HANDLE__)->Lock = MID_Locked;                                            }                                                                            }while (0)   
S
S
S    #define __MID_UNLOCK(__HANDLE__)                                            \
S                                      do{                                       \
S                                          (__HANDLE__)->Lock = MID_UnLocked;    \
S                                        }while (0)  /*!< Module UnLcok */
X    #define __MID_UNLOCK(__HANDLE__)                                                                                  do{                                                                                 (__HANDLE__)->Lock = MID_UnLocked;                                            }while (0)   
S#endif /* USE_RTOS */
S
S#define __MID_UnProtectModule(__MODULE__)   ((__MODULE__)->Instance->KEY.H[0] = 0xA217U)        /*!< Module Register UnProtect */
S#define __MID_ProtectModule(__MODULE__)    ((__MODULE__)->Instance->KEY.H[0] = 0U)              /*!< Module Register Protect */
S
S/* Exported functions -------------------------------------------------------*/
S
S/** @name MID_Exported_Functions
S  * @{
S  */
S
S/** @name MID_Exported_Functions_Group1
S  * @{
S  */
S/* Initialization and de-initialization functions  ******************************/
SMID_StatusTypeDef MID_Init(void);
SMID_StatusTypeDef MID_DeInit(void);
Svoid MID_MspInit(void);
Svoid MID_MspDeInit(void);
SMID_StatusTypeDef MID_InitTick (uint32_t TickPriority);
S/**
S  * @}
S  */
S
S/** @name MID_Exported_Functions_Group2
S  * @{
S  */
S
S/* Peripheral Control functions  ************************************************/
Svoid MID_IncTick(void);
Svoid MID_ClearTick(void);
Svoid MID_Delay(__IO uint32_t Delay);
Suint32_t MID_GetTick(void);
Svoid MID_SuspendTick(void);
Svoid MID_ResumeTick(void);
SMID_StatusTypeDef MID_ProtectModuleReg(MID_ProtectTypeDef Module);
SMID_StatusTypeDef MID_UnProtectModuleReg(MID_ProtectTypeDef Module);
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* __MG32x02z_MID_COMMON */
N
N
N
N/************** (C) COPYRIGHT megawin Technology Co., Ltd. *****END OF FILE****/
N
N
L 55 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_CORTEX_MID.H" 2
N
N/** @addtogroup MG32x02z_Driver_MID
N  * @{
N  */
N
N/** @addtogroup CORTEX CORTEX
N  * @{
N  */ 
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/
N
N/** @defgroup CORTEX_Exported_Constants CORTEX Exported Constants
N  * @{
N  */
N  
N/** @defgroup CORTEX_SysTick_clock_source CORTEX SysTick clock source
N  * @{
N  */
N#define SYSTICK_CLKSOURCE_HCLK_DIV8    (0x00000000U)        /*!< Systick Clocl Source from HCLK DIV8 */
N#define SYSTICK_CLKSOURCE_HCLK         (0x00000004U)        /*!< Systick Clocl Source from HCLK */
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N  
N/* Exported Macros -----------------------------------------------------------*/
N
N/* Exported functions --------------------------------------------------------*/
N/** @addtogroup CORTEX_Exported_Functions CORTEX Exported Functions
N  * @{
N  */
N/** @addtogroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions 
N *  @brief    Initialization and Configuration functions
N * @{
N */
N/* Initialization and de-initialization functions *******************************/
Nvoid MID_NVIC_SetPriority(IRQn_Type IRQn,uint32_t PreemptPriority, uint32_t SubPriority);
Nvoid MID_NVIC_EnableIRQ(IRQn_Type IRQn);
Nvoid MID_NVIC_DisableIRQ(IRQn_Type IRQn);
Nvoid MID_NVIC_SystemReset(void);
Nuint32_t MID_SYSTICK_Config(uint32_t TicksNumb);
N/**
N  * @}
N  */
N
N/** @addtogroup CORTEX_Exported_Functions_Group2 Peripheral Control functions 
N *  @brief   Cortex control functions
N * @{
N */
N 
N/* Peripheral Control functions *************************************************/
Nuint32_t MID_NVIC_GetPriority(IRQn_Type IRQn);
Nuint32_t MID_NVIC_GetPendingIRQ(IRQn_Type IRQn);
Nvoid MID_NVIC_SetPendingIRQ(IRQn_Type IRQn);
Nvoid MID_NVIC_ClearPendingIRQ(IRQn_Type IRQn);
Nvoid MID_SYSTICK_EnableIRQ(void);
Nvoid MID_SYSTICK_DisableIRQ(void);
Nuint32_t MID_SYSTICK_GetCurrentValue(void);
Nvoid MID_SYSTICK_CLKSourceConfig(uint32_t CLKSource);
Nvoid MID_SYSTICK_IRQHandler(void);
Nvoid MID_SYSTICK_Callback(void);
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */ 
N
N/* Private types -------------------------------------------------------------*/ 
N/* Private variables ---------------------------------------------------------*/
N/* Private constants ---------------------------------------------------------*/
N/* Private macros ------------------------------------------------------------*/
N/** @defgroup CORTEX_Private_Macros CORTEX Private Macros
N  * @{
N  */
N#define IS_NVIC_PREEMPTION_PRIORITY(PRIORITY)  ((PRIORITY) < 0x4) /*!< NVIC PRIORITY Level Check*/
N
N#define IS_NVIC_DEVICE_IRQ(IRQ)                ((IRQ) >= 0x00)    /*!< NVIC Device IRQ Number Check */
N
N#define IS_SYSTICK_CLK_SOURCE(SOURCE) (((SOURCE) == SYSTICK_CLKSOURCE_HCLK) || \
N                                      ((SOURCE) == SYSTICK_CLKSOURCE_HCLK_DIV8)) /*!< SYSTICK Clock Source Check */
X#define IS_SYSTICK_CLK_SOURCE(SOURCE) (((SOURCE) == SYSTICK_CLKSOURCE_HCLK) ||                                       ((SOURCE) == SYSTICK_CLKSOURCE_HCLK_DIV8))  
N/**
N  * @}
N  */ 
N
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N    
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __MG32x02z_cortex_MID_H */
N 
N
N/************** (C) COPYRIGHT megawin Technology Co., Ltd. *****END OF FILE****/
N
N
L 59 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_COMMON_MID.h" 2
N
N/* Exported types ------------------------------------------------------------*/
N
N/** 
N  * @enum   MID_StatusTypeDef
N  * @brief  MID Status structures definition  
N  */  
Ntypedef enum 
N{
N    MID_SUCCESS  = 0x00,    /*!< Success    */
N    MID_FAILURE  = 0x01,    /*!< Failure    */
N    MID_OK       = 0x00,    /*!< OK         */
N    MID_ERROR    = 0x01,    /*!< Error      */
N    MID_BUSY     = 0x02,    /*!< Busy       */
N    MID_TIMEOUT  = 0x03,    /*!< Timout     */
N}MID_StatusTypeDef;
N
N
N
N/** 
N  * @enum   MID_LockTypeDef
N  * @brief  MID Lock structures definition  
N  */
Ntypedef enum 
N{
N    MID_UnLocked = 0x00,
N    MID_UNLOCKED = 0x00,
N    MID_Locked   = 0x01,
N    MID_LOCKED   = 0x01,
N}MID_LockTypeDef;
N
N
N
N
N#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))  /*!< MID Status param Check */
N
N
N/** 
N  * @enum   ErrorStatus
N  * @brief  MID Lock structures definition  
N  */
Ntypedef enum
N{
N    ERROR = 0,
N    SUCCESS = !ERROR
N}   ErrorStatus;
N
N
N/** 
N  * @enum   MID_ProtectTypeDef
N  * @brief  MID Lock structures definition  
N  */
Ntypedef enum
N{
N    RSTmodule    = (uint32_t)0x4C00000C,
N    CSCmodule    = (uint32_t)0x4C01000C,  
N    PWmodule     = (uint32_t)0x4C02000C,
N    MEMmodule    = (uint32_t)0x4D00000C,  
N    MEM2module   = (uint32_t)0x4D00000E,
N    CFGmodule    = (uint32_t)0x4FF0000C,
N    IWDTmodule   = (uint32_t)0x5D00000C,  
N    WWDTmodule   = (uint32_t)0x5D01000C,  
N    RTCmodule    = (uint32_t)0x5D04000C,
N}MID_ProtectTypeDef;          /*!< Definitions for protection function */
N
N
N
N/* Exported constants -------------------------------------------------------*/
N
N
N
N/* Exported macro ------------------------------------------------------------*/
N
N#define MID_MAX_DELAY               0xFFFFFFFFU      /*!< Max Delay Time */
N
N#define MID_IS_BIT_SET(REG, BIT)    (((REG) & (BIT)) == (BIT))
N#define MID_IS_BIT_CLR(REG, BIT)    (((REG) & (BIT)) == 0U)
N
N#define __MID_LINKDMA(__HANDLE__, __PPP_DMA_FIELD__, __DMA_HANDLE__)               \
N                        do{                                                      \
N                              (__HANDLE__)->__PPP_DMA_FIELD__ = &(__DMA_HANDLE__); \
N                              (__DMA_HANDLE__).Parent = (__HANDLE__);             \
N                          } while(0)
X#define __MID_LINKDMA(__HANDLE__, __PPP_DMA_FIELD__, __DMA_HANDLE__)                                       do{                                                                                    (__HANDLE__)->__PPP_DMA_FIELD__ = &(__DMA_HANDLE__);                               (__DMA_HANDLE__).Parent = (__HANDLE__);                                       } while(0)
N
N#define assert_param(expr) ((void)0U)               /*!< assert_param Not Check */
N        
N#define UNUSED(x) ((void)(x))                       /*!< UNUSED Function */
N
N/** @brief Reset the Handle's State field.
N  * @param "__HANDLE__" specifies the Peripheral Handle.
N  * @note  This macro can be used for the following purpose:
N  *          - When the Handle is declared as local variable; before passing it as parameter
N  *            to HAL_PPP_Init() for the first time, it is mandatory to use this macro
N  *            to set to 0 the Handle's "State" field.
N  *            Otherwise, "State" field may have any random value and the first time the function
N  *            HAL_PPP_Init() is called, the low level hardware initialization will be missed
N  *            (i.e. HAL_PPP_MspInit() will not be executed).
N  *          - When there is a need to reconfigure the low level hardware: instead of calling
N  *            HAL_PPP_DeInit() then HAL_PPP_Init(), user can make a call to this macro then HAL_PPP_Init().
N  *            In this later function, when the Handle's "State" field is set to 0, it will execute the function
N  *            HAL_PPP_MspInit() which will reconfigure the low level hardware.
N  * @retval None
N  */
N#define __MID_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = 0)
N
N#if (USE_RTOS == 1)
X#if (0 == 1)
S  #error " USE_RTOS should be 0 in the current MID release "
N#else
N    #define __MID_LOCK(__HANDLE__)                                             \
N                                    do{                                        \
N                                        if((__HANDLE__)->Lock == MID_Locked)   \
N                                        {                                      \
N                                           return MID_BUSY;                    \
N                                        }                                      \
N                                        else                                   \
N                                        {                                      \
N                                           (__HANDLE__)->Lock = MID_Locked;    \
N                                        }                                      \
N                                      }while (0)  /*!< Module Lcok */
X    #define __MID_LOCK(__HANDLE__)                                                                                 do{                                                                                if((__HANDLE__)->Lock == MID_Locked)                                           {                                                                                 return MID_BUSY;                                                            }                                                                              else                                                                           {                                                                                 (__HANDLE__)->Lock = MID_Locked;                                            }                                                                            }while (0)   
N
N
N    #define __MID_UNLOCK(__HANDLE__)                                            \
N                                      do{                                       \
N                                          (__HANDLE__)->Lock = MID_UnLocked;    \
N                                        }while (0)  /*!< Module UnLcok */
X    #define __MID_UNLOCK(__HANDLE__)                                                                                  do{                                                                                 (__HANDLE__)->Lock = MID_UnLocked;                                            }while (0)   
N#endif /* USE_RTOS */
N
N#define __MID_UnProtectModule(__MODULE__)   ((__MODULE__)->Instance->KEY.H[0] = 0xA217U)        /*!< Module Register UnProtect */
N#define __MID_ProtectModule(__MODULE__)    ((__MODULE__)->Instance->KEY.H[0] = 0U)              /*!< Module Register Protect */
N
N/* Exported functions -------------------------------------------------------*/
N
N/** @name MID_Exported_Functions
N  * @{
N  */
N
N/** @name MID_Exported_Functions_Group1
N  * @{
N  */
N/* Initialization and de-initialization functions  ******************************/
NMID_StatusTypeDef MID_Init(void);
NMID_StatusTypeDef MID_DeInit(void);
Nvoid MID_MspInit(void);
Nvoid MID_MspDeInit(void);
NMID_StatusTypeDef MID_InitTick (uint32_t TickPriority);
N/**
N  * @}
N  */
N
N/** @name MID_Exported_Functions_Group2
N  * @{
N  */
N
N/* Peripheral Control functions  ************************************************/
Nvoid MID_IncTick(void);
Nvoid MID_ClearTick(void);
Nvoid MID_Delay(__IO uint32_t Delay);
Xvoid MID_Delay(volatile uint32_t Delay);
Nuint32_t MID_GetTick(void);
Nvoid MID_SuspendTick(void);
Nvoid MID_ResumeTick(void);
NMID_StatusTypeDef MID_ProtectModuleReg(MID_ProtectTypeDef Module);
NMID_StatusTypeDef MID_UnProtectModuleReg(MID_ProtectTypeDef Module);
N/**
N  * @}
N  */
N
N/**
N  * @}
N  */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __MG32x02z_MID_COMMON */
N
N
N
N/************** (C) COPYRIGHT megawin Technology Co., Ltd. *****END OF FILE****/
N
N
L 35 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_I2C_MID_ex.h" 2
N#include "MG32x02z_I2C_MID.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_I2C_MID.h" 1
N/**
N ******************************************************************************
N * @file        MG32x02z_I2C_MID.h
N * @brief       Header file of I2C MID module.
N * @par         Project
N *              MG32x02z
N * @version     V1.12
N * @date        2021/04/21
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2020 megawin Technology Co., Ltd.
N *              All rights reserved.
N ******************************************************************************
N * @par         Disclaimer 
N *      The Demo software is provided "AS IS"  without any warranty, either 
N *      expressed or implied, including, but not limited to, the implied warranties 
N *      of merchantability and fitness for a particular purpose.  The author will 
N *      not be liable for any special, incidental, consequential or indirect 
N *      damages due to loss of data or any other reason. 
N *      These statements agree with the world wide and local dictated laws about 
N *      authorship and violence against these laws. 
N ******************************************************************************
N ******************************************************************************
N */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef _MG32x02z_I2C_MID_H
N#define _MG32x02z_I2C_MID_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include "MG32x02z_COMMON_MID.h"
N#include "MG32x02z_CSC_MID.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_CSC_MID.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_CSC_MID.H
N *
N * @brief       This is the C code format middleware head file for CSC module.
N *
N * @par         Project
N *              MG32x02z
N * @version     V1.03
N * @date        2021/03/26
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2021 MegaWin Technology Co., Ltd.
N *              All rights reserved.
N *
N ******************************************************************************
N * @par         Disclaimer 
N * The Demo software is provided "AS IS" without any warranty, either 
N * expressed or implied, including, but not limited to, the implied warranties 
N * of merchantability and fitness for a particular purpose. The author will 
N * not be liable for any special, incidental, consequential or indirect 
N * damages due to loss of data or any other reason. 
N * These statements agree with the world wide and local dictated laws about 
N * authorship and violence against these laws. 
N ******************************************************************************
N ******************************************************************************
N */ 
N 
N 
N#include "MG32x02z_COMMON_MID.h"
N#include "MG32x02z_CSC_Init.h"
L 1 ".\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132\MG32x02z_CSC_Init.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_CSC_Init.h
N *
N * @brief       This file is used to configure CSC setting.
N *              Device : MG32F02A132
N *
N * @par         Project
N *              MG32x02z
N * @version     V0.50
N * @date        2021/03/30 16:02 (H File Generated Date)
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2020 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N ******************************************************************************* 
N * @par         Disclaimer
N * The Demo software is provided "AS IS" without any warranty, either
N * expressed or implied, including, but not limited to, the implied warranties
N * of merchantability and fitness for a particular purpose. The author will
N * not be liable for any special, incidental, consequential or indirect
N * damages due to loss of data or any other reason.
N * These statements agree with the world wide and local dictated laws about
N * authorship and violence against these laws.
N *******************************************************************************
N */
N#include "MG32x02z.h"
N#include "MG32x02z_CSC.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z_CSC.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_CSC.h
N *
N * @brief       MG32x02z CSC Register Definitions Header File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:41 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z_CSC_H
N#define _MG32x02z_CSC_H
N#define _MG32x02z_CSC_H_VER                         3.9     /*!< File Version */
N
N#if !(MG32x02z_H_VER == MG32x02z_CSC_H_VER)
S    #error "MG32x02z_CSC_H - Main/Module Version Mismatch !"
N#endif
N
N/**
N ******************************************************************************
N *
N * @struct      CSC_Struct
N *              CSC  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :1;     //[0] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  XOSCF         :1;     //[1] XOSC clock stable and ready detect flag
X            volatile uint8_t  XOSCF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :2;     //[3..2] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  ILRCOF        :1;     //[4] ILRCO clock stable and ready detect flag
X            volatile uint8_t  ILRCOF        :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  IHRCOF        :1;     //[5] IHRCO clock stable and ready detect flag
X            volatile uint8_t  IHRCOF        :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  PLLF          :1;     //[6] PLL clock stable and ready detect flag
X            volatile uint8_t  PLLF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  MCDF          :1;     //[7] XOSC missing clock detect failure event flag
X            volatile uint8_t  MCDF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }STA;                               /*!< STA        ~ Offset[0x00]  CSC status register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  IEA           :1;     //[0] CSC interrupt all enable
X            volatile uint8_t  IEA           :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  XOSC_IE       :1;     //[1] XOSC clock stable interrupt enable.
X            volatile uint8_t  XOSC_IE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[3..2] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  ILRCO_IE      :1;     //[4] ILRCO clock stable interrupt enable.
X            volatile uint8_t  ILRCO_IE      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  IHRCO_IE      :1;     //[5] IHRCO clock stable interrupt enable.
X            volatile uint8_t  IHRCO_IE      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  PLL_IE        :1;     //[6] PLL clock stable interrupt enable.
X            volatile uint8_t  PLL_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  MCD_IE        :1;     //[7] XOSC missing clock detect failure event interrupt enable.
X            volatile uint8_t  MCD_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }INT;                               /*!< INT        ~ Offset[0x04]  CSC interrupt enable register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :8;     //[7..0] 
X            volatile const  uint8_t                :8;     
N            __IO uint8_t  PLL_MUL       :1;     //[8] CSC PLL multiplication factor select.
X            volatile uint8_t  PLL_MUL       :1;     
N                                        //0 = 16 : PLL input clock x 16
N                                        //1 = 24 : PLL input clock x 24
N            __I  uint8_t                :7;     //[15..9] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  XOSC_GN       :2;     //[17..16] Gain control bits of XOSC. (The default value is loaded from CFG OR after Warm reset)
X            volatile uint8_t  XOSC_GN       :2;     
N                                        //0x0 = 32K_Normal (for 32KHz crystal)
N                                        //0x1 = Medium
N                                        //0x2 = 32K_Lowest (for 32KHz crystal)
N                                        //0x3 = Reserved
N            __I  uint8_t                :6;     //[23..18] 
X            volatile const  uint8_t                :6;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }PLL;                               /*!< PLL        ~ Offset[0x08]  CSC OSC and PLL control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint16_t KEY           :16;    //[15..0] CSC key register
X            volatile uint16_t KEY           :16;    
N                                        //0 = Unprotected
N                                        //1 = Protected
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }KEY;                               /*!< KEY        ~ Offset[0x0C]  CSC write protected Key register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :3;     //[2..0] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  IHRCO_EN      :1;     //[3] IHRCO circuit enable.
X            volatile uint8_t  IHRCO_EN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  MCD_DIS       :1;     //[4] MCD missing clock detector circuit disable.
X            volatile uint8_t  MCD_DIS       :1;     
N                                        //0 = Enable
N                                        //1 = Disable
N            __IO uint8_t  PLL_EN        :1;     //[5] PLL circuit enable.
X            volatile uint8_t  PLL_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  LS_SEL        :2;     //[9..8] Input low speed clock source select
X            volatile uint8_t  LS_SEL        :2;     
N                                        //0x0 = Reserved
N                                        //0x1 = XOSC
N                                        //0x2 = ILRCO
N                                        //0x3 = CK_EXT
N            __IO uint8_t  HS_SEL        :2;     //[11..10] Input high speed clock source select
X            volatile uint8_t  HS_SEL        :2;     
N                                        //0x0 = IHRCO
N                                        //0x1 = XOSC
N                                        //0x2 = ILRCO
N                                        //0x3 = CK_EXT
N            __I  uint8_t                :1;     //[12] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[13] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  MAIN_SEL      :2;     //[15..14] System main clock source select.
X            volatile uint8_t  MAIN_SEL      :2;     
N                                        //0x0 = CK_HS
N                                        //0x1 = CK_PLLI
N                                        //0x2 = CK_PLLO
N                                        //0x3 = Reserved
N            __IO uint8_t  ST_SEL        :1;     //[16] System tick timer external clock source select.
X            volatile uint8_t  ST_SEL        :1;     
N                                        //0 = HCLK8 : HCLK divided by 8
N                                        //1 = CK_LS2 : CK_LS divided by 2
N            __I  uint8_t                :1;     //[17] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  IHRCO_SEL     :1;     //[18] IHRCO clock frequency trimming set select.
X            volatile uint8_t  IHRCO_SEL     :1;     
N                                        //0 = 12 : 12MHz from trimming set 0
N                                        //1 = 11 : 11.059MHz from trimming set 1
N            __I  uint8_t                :3;     //[21..19] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  MCD_SEL       :2;     //[23..22] Missing clock detection duration select.
X            volatile uint8_t  MCD_SEL       :2;     
N                                        //0x0 = 125us
N                                        //0x1 = 250us
N                                        //0x2 = 500us
N                                        //0x3 = 1ms
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }CR0;                               /*!< CR0        ~ Offset[0x10]  CSC clock source control register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PLLI_DIV      :2;     //[1..0] PLL input clock source divider
X            volatile uint8_t  PLLI_DIV      :2;     
N                                        //0x0 = DIV1 : divided by 1
N                                        //0x1 = DIV2 : divided by 2
N                                        //0x2 = DIV4 : divided by 4
N                                        //0x3 = DIV6 : divided by 6
N            __I  uint8_t                :2;     //[3..2] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  PLLO_DIV      :2;     //[5..4] PLL output clock source divider
X            volatile uint8_t  PLLO_DIV      :2;     
N                                        //0x0 = DIV4 : divided by 4
N                                        //0x1 = DIV3 : divided by 3
N                                        //0x2 = DIV2 : divided by 2
N                                        //0x3 = DIV1 : divided by 1
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  AHB_DIV       :4;     //[11..8] AHB clock source divider. Value 0~9 mean to divide by 1,2,4,8,16,32,64,128,256,512.
X            volatile uint8_t  AHB_DIV       :4;     
N                                        //0x0 = DIV1 : divided by 1
N                                        //0x1 = DIV2 : divided by 2
N                                        //0x2 = DIV4 : divided by 4
N                                        //0x3 = DIV8 : divided by 8
N                                        //0x4 = DIV16 : divided by 16
N                                        //0x5 = DIV32 : divided by 32
N                                        //0x6 = DIV64 : divided by 64
N                                        //0x7 = DIV128 : divided by 128
N                                        //0x8 = DIV256 : divided by 256
N                                        //0x9 = DIV512 : divided by 512
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  APB_DIV       :3;     //[18..16] APB clock source divider. Value 0~4 mean to divide by 1,2,4,8,16.
X            volatile uint8_t  APB_DIV       :3;     
N                                        //0x0 = DIV1 : divided by 1
N                                        //0x1 = DIV2 : divided by 2
N                                        //0x2 = DIV4 : divided by 4
N                                        //0x3 = DIV8 : divided by 8
N                                        //0x4 = DIV16 : divided by 16
N            __I  uint8_t                :5;     //[23..19] 
X            volatile const  uint8_t                :5;     
N            __I  uint8_t                :1;     //[24] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[25] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  UT_DIV        :2;     //[27..26] Unit time clock source divider.
X            volatile uint8_t  UT_DIV        :2;     
N                                        //0x0 = DIV32 : divided by 32
N                                        //0x1 = DIV8 : divided by 8
N                                        //0x2 = DIV16 : divided by 16
N                                        //0x3 = DIV128 : divided by 128
N            __I  uint8_t                :4;     //[31..28] 
X            volatile const  uint8_t                :4;     
N        }MBIT;
N    }DIV;                               /*!< DIV        ~ Offset[0x14]  CSC clock  divider register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  CKO_EN        :1;     //[0] Internal clock output enable. When enables, it will reset the output divider.
X            volatile uint8_t  CKO_EN        :1;     
N                                        //0x0 = Disable
N                                        //0x1 = Enable
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CKO_DIV       :2;     //[3..2] Internal clock output divider
X            volatile uint8_t  CKO_DIV       :2;     
N                                        //0x0 = DIV1 : divided by 1
N                                        //0x1 = DIV2 : divided by 2
N                                        //0x2 = DIV4 : divided by 4
N                                        //0x3 = DIV8 : divided by 8
N            __IO uint8_t  CKO_SEL       :3;     //[6..4] Internal clock output source select
X            volatile uint8_t  CKO_SEL       :3;     
N                                        //0x0 = CK_MAIN
N                                        //0x1 = CK_AHB
N                                        //0x2 = CK_APB
N                                        //0x3 = CK_HS
N                                        //0x4 = CK_LS
N                                        //0x5 = CK_XOSC
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CKO;                               /*!< CKO        ~ Offset[0x18]  CSC internal clock output control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  IOPA_EN       :1;     //[0] IO Port A clock source enable
X            volatile uint8_t  IOPA_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  IOPB_EN       :1;     //[1] IO Port B clock source enable
X            volatile uint8_t  IOPB_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  IOPC_EN       :1;     //[2] IO Port C clock source enable
X            volatile uint8_t  IOPC_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  IOPD_EN       :1;     //[3] IO Port D clock source enable
X            volatile uint8_t  IOPD_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  IOPE_EN       :1;     //[4] IO Port E clock source enable
X            volatile uint8_t  IOPE_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :3;     //[7..5] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  GPL_EN        :1;     //[8] GPL clock source enable.
X            volatile uint8_t  GPL_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :3;     //[11..9] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  EMB_EN        :1;     //[12] External memory bus clock source enable.
X            volatile uint8_t  EMB_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[14..13] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  DMA_EN        :1;     //[15] DMA clock source enable.
X            volatile uint8_t  DMA_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }AHB;                               /*!< AHB        ~ Offset[0x1C]  CSC AHB clock control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  ADC0_EN       :1;     //[0] ADC module clock source enable.
X            volatile uint8_t  ADC0_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CMP_EN        :1;     //[2] CMP module clock source enable.
X            volatile uint8_t  CMP_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  DAC_EN        :1;     //[3] DAC module clock source enable.
X            volatile uint8_t  DAC_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[4] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  RTC_EN        :1;     //[5] RTC module clock source enable
X            volatile uint8_t  RTC_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  IWDT_EN       :1;     //[6] IWDT module clock source enable
X            volatile uint8_t  IWDT_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  WWDT_EN       :1;     //[7] WWDT module clock source enable. (This register is reset only by Cold reset.)
X            volatile uint8_t  WWDT_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  I2C0_EN       :1;     //[8] I2C0 module clock source enable.
X            volatile uint8_t  I2C0_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  I2C1_EN       :1;     //[9] I2C1 module clock source enable.
X            volatile uint8_t  I2C1_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[11..10] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  SPI0_EN       :1;     //[12] SPI0 module clock source enable.
X            volatile uint8_t  SPI0_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[13] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :2;     //[15..14] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  URT0_EN       :1;     //[16] URT0 UART module clock source enable.
X            volatile uint8_t  URT0_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  URT1_EN       :1;     //[17] URT1 UART module clock source enable.
X            volatile uint8_t  URT1_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  URT2_EN       :1;     //[18] URT2 UART module clock source enable.
X            volatile uint8_t  URT2_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  URT3_EN       :1;     //[19] URT3 UART module clock source enable.
X            volatile uint8_t  URT3_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :4;     //[23..20] 
X            volatile const  uint8_t                :4;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }APB0;                              /*!< APB0       ~ Offset[0x20]  CSC APB clock control register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  TM00_EN       :1;     //[0] TM00 module clock source enable.
X            volatile uint8_t  TM00_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TM01_EN       :1;     //[1] TM01 module clock source enable.
X            volatile uint8_t  TM01_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[3..2] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  TM10_EN       :1;     //[4] TM10 module clock source enable.
X            volatile uint8_t  TM10_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[6..5] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  TM16_EN       :1;     //[7] TM11 module clock source enable.
X            volatile uint8_t  TM16_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TM20_EN       :1;     //[8] TM20 module clock source enable.
X            volatile uint8_t  TM20_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[10..9] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  TM26_EN       :1;     //[11] TM26 module clock source enable.
X            volatile uint8_t  TM26_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :3;     //[14..12] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  TM36_EN       :1;     //[15] TM36 module clock source enable.
X            volatile uint8_t  TM36_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }APB1;                              /*!< APB1       ~ Offset[0x24]  CSC APB clock control register 1 */
N
N    __I uint32_t  RESERVED0[2];         /*!< RESERVED0  ~ Offset[0x28]  Reserved */
X    volatile const uint32_t  RESERVED0[2];          
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  SLP_ADC0      :1;     //[0] ADC module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_ADC0      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  SLP_CMP       :1;     //[2] CMP module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_CMP       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SLP_DAC       :1;     //[3] DAC module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_DAC       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[4] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  SLP_RTC       :1;     //[5] IWDT module clock enable in SLEEP mode
X            volatile uint8_t  SLP_RTC       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SLP_IWDT      :1;     //[6] IWDT module clock enable in SLEEP mode
X            volatile uint8_t  SLP_IWDT      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SLP_WWDT      :1;     //[7] WWDT module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_WWDT      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SLP_I2C0      :1;     //[8] I2C0 module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_I2C0      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SLP_I2C1      :1;     //[9] I2C1 module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_I2C1      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[11..10] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  SLP_SPI0      :1;     //[12] SPI0 module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_SPI0      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :3;     //[15..13] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  SLP_URT0      :1;     //[16] URT0 UART module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_URT0      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SLP_URT1      :1;     //[17] URT1 UART module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_URT1      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SLP_URT2      :1;     //[18] URT2 UART module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_URT2      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SLP_URT3      :1;     //[19] URT3 UART module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_URT3      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :4;     //[23..20] 
X            volatile const  uint8_t                :4;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }SLP0;                              /*!< SLP0       ~ Offset[0x30]  CSC SLEEP mode clock enable register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  SLP_TM00      :1;     //[0] TM00 module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_TM00      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SLP_TM01      :1;     //[1] TM01 module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_TM01      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[3..2] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  SLP_TM10      :1;     //[4] TM10 module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_TM10      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[6..5] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  SLP_TM16      :1;     //[7] TM11 module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_TM16      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SLP_TM20      :1;     //[8] TM20 module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_TM20      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[10..9] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  SLP_TM26      :1;     //[11] TM26 module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_TM26      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :3;     //[14..12] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  SLP_TM36      :1;     //[15] TM36 module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_TM36      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :8;     //[23..16] 
X            volatile const  uint8_t                :8;     
N            __I  uint8_t                :6;     //[29..24] 
X            volatile const  uint8_t                :6;     
N            __IO uint8_t  SLP_EMB       :1;     //[30] EMB module clock enable in SLEEP mode.
X            volatile uint8_t  SLP_EMB       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[31] 
X            volatile const  uint8_t                :1;     
N        }MBIT;
N    }SLP1;                              /*!< SLP1       ~ Offset[0x34]  CSC SLEEP mode clock enable register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :1;     //[0] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[2] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[4] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  STP_RTC       :1;     //[5] IWDT module clock enable in STOP mode
X            volatile uint8_t  STP_RTC       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  STP_IWDT      :1;     //[6] IWDT module clock enable in STOP mode
X            volatile uint8_t  STP_IWDT      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }STP0;                              /*!< STP0       ~ Offset[0x38]  CSC STOP mode clock enable register 0 */
N
N    __I uint32_t  RESERVED1;            /*!< RESERVED1  ~ Offset[0x3C]  Reserved */
X    volatile const uint32_t  RESERVED1;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  ADC0_CKS      :1;     //[0] ADC0 process clock source select.
X            volatile uint8_t  ADC0_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :3;     //[3..1] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  CMP_CKS       :1;     //[4] CMP process clock source select.
X            volatile uint8_t  CMP_CKS       :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __IO uint8_t  DAC_CKS       :1;     //[5] DAC process clock source select.
X            volatile uint8_t  DAC_CKS       :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CKS0;                              /*!< CKS0       ~ Offset[0x40]  CSC clock source select register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  I2C0_CKS      :1;     //[0] I2C0 process clock source select.
X            volatile uint8_t  I2C0_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  I2C1_CKS      :1;     //[2] I2C1 process clock source select.
X            volatile uint8_t  I2C1_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :5;     //[7..3] 
X            volatile const  uint8_t                :5;     
N            __IO uint8_t  SPI0_CKS      :1;     //[8] SPI0 process clock source select.
X            volatile uint8_t  SPI0_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :7;     //[15..9] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  URT0_CKS      :1;     //[16] URT0 process clock source select.
X            volatile uint8_t  URT0_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :1;     //[17] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  URT1_CKS      :1;     //[18] URT1 process clock source select.
X            volatile uint8_t  URT1_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :1;     //[19] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  URT2_CKS      :1;     //[20] URT2 process clock source select.
X            volatile uint8_t  URT2_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :1;     //[21] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  URT3_CKS      :1;     //[22] URT3 process clock source select.
X            volatile uint8_t  URT3_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :1;     //[23] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }CKS1;                              /*!< CKS1       ~ Offset[0x44]  CSC clock source select register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  TM00_CKS      :1;     //[0] TM00 process clock source select.
X            volatile uint8_t  TM00_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  TM01_CKS      :1;     //[2] TM01 process clock source select.
X            volatile uint8_t  TM01_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :5;     //[7..3] 
X            volatile const  uint8_t                :5;     
N            __IO uint8_t  TM10_CKS      :1;     //[8] TM10 process clock source select.
X            volatile uint8_t  TM10_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :5;     //[13..9] 
X            volatile const  uint8_t                :5;     
N            __IO uint8_t  TM16_CKS      :1;     //[14] TM11 process clock source select.
X            volatile uint8_t  TM16_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :1;     //[15] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  TM20_CKS      :1;     //[16] TM20 process clock source select.
X            volatile uint8_t  TM20_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :5;     //[21..17] 
X            volatile const  uint8_t                :5;     
N            __IO uint8_t  TM26_CKS      :1;     //[22] TM26 process clock source select.
X            volatile uint8_t  TM26_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :1;     //[23] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :6;     //[29..24] 
X            volatile const  uint8_t                :6;     
N            __IO uint8_t  TM36_CKS      :1;     //[30] TM36 process clock source select.
X            volatile uint8_t  TM36_CKS      :1;     
N                                        //0x0 = CK_APB
N                                        //0x1 = CK_AHB
N            __I  uint8_t                :1;     //[31] 
X            volatile const  uint8_t                :1;     
N        }MBIT;
N    }CKS2;                              /*!< CKS2       ~ Offset[0x48]  CSC clock source select register 2 */
N
N} CSC_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        CSC  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define CSC_Base                        ((uint32_t)0x4C010000)              /*!< Clock Source Controller */
N#define CSC                             ((CSC_Struct*) CSC_Base)
N///@}
N
N/**
N ******************************************************************************
N *
N * @name        CSC  [Register Definitions]
N *
N ******************************************************************************
N */
N/**
N ******************************************************************************
N * @name        CSC_STA  [register's definitions]
N *              Offset[0x00]  CSC status register (0x4C010000)
N ******************************************************************************
N */
N///@{
N#define CSC_STA_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_STA */
N#define CSC_STA_MCDF_mask_w                         ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define CSC_STA_MCDF_mask_h0                        ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define CSC_STA_MCDF_mask_b0                        ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define CSC_STA_MCDF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define CSC_STA_MCDF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define CSC_STA_MCDF_normal_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define CSC_STA_MCDF_happened_w                     ((uint32_t)0x00000080)  /*!< Bit Value =(1):Happened of 32bit */
N#define CSC_STA_MCDF_happened_h0                    ((uint16_t)0x0080)      /*!< Bit Value =(1):Happened of 16bit */
N#define CSC_STA_MCDF_happened_b0                    ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define CSC_STA_PLLF_mask_w                         ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define CSC_STA_PLLF_mask_h0                        ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define CSC_STA_PLLF_mask_b0                        ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define CSC_STA_PLLF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define CSC_STA_PLLF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define CSC_STA_PLLF_normal_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define CSC_STA_PLLF_happened_w                     ((uint32_t)0x00000040)  /*!< Bit Value =(1):Happened of 32bit */
N#define CSC_STA_PLLF_happened_h0                    ((uint16_t)0x0040)      /*!< Bit Value =(1):Happened of 16bit */
N#define CSC_STA_PLLF_happened_b0                    ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define CSC_STA_IHRCOF_mask_w                       ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define CSC_STA_IHRCOF_mask_h0                      ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define CSC_STA_IHRCOF_mask_b0                      ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define CSC_STA_IHRCOF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define CSC_STA_IHRCOF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define CSC_STA_IHRCOF_normal_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define CSC_STA_IHRCOF_happened_w                   ((uint32_t)0x00000020)  /*!< Bit Value =(1):Happened of 32bit */
N#define CSC_STA_IHRCOF_happened_h0                  ((uint16_t)0x0020)      /*!< Bit Value =(1):Happened of 16bit */
N#define CSC_STA_IHRCOF_happened_b0                  ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define CSC_STA_ILRCOF_mask_w                       ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define CSC_STA_ILRCOF_mask_h0                      ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define CSC_STA_ILRCOF_mask_b0                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CSC_STA_ILRCOF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define CSC_STA_ILRCOF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define CSC_STA_ILRCOF_normal_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define CSC_STA_ILRCOF_happened_w                   ((uint32_t)0x00000010)  /*!< Bit Value =(1):Happened of 32bit */
N#define CSC_STA_ILRCOF_happened_h0                  ((uint16_t)0x0010)      /*!< Bit Value =(1):Happened of 16bit */
N#define CSC_STA_ILRCOF_happened_b0                  ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define CSC_STA_XOSCF_mask_w                        ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define CSC_STA_XOSCF_mask_h0                       ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CSC_STA_XOSCF_mask_b0                       ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CSC_STA_XOSCF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define CSC_STA_XOSCF_normal_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define CSC_STA_XOSCF_normal_b0                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define CSC_STA_XOSCF_happened_w                    ((uint32_t)0x00000002)  /*!< Bit Value =(1):Happened of 32bit */
N#define CSC_STA_XOSCF_happened_h0                   ((uint16_t)0x0002)      /*!< Bit Value =(1):Happened of 16bit */
N#define CSC_STA_XOSCF_happened_b0                   ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_INT  [register's definitions]
N *              Offset[0x04]  CSC interrupt enable register (0x4C010004)
N ******************************************************************************
N */
N///@{
N#define CSC_INT_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_INT */
N#define CSC_INT_MCD_IE_mask_w                       ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define CSC_INT_MCD_IE_mask_h0                      ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define CSC_INT_MCD_IE_mask_b0                      ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define CSC_INT_MCD_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_INT_MCD_IE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_INT_MCD_IE_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_INT_MCD_IE_enable_w                     ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_INT_MCD_IE_enable_h0                    ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_INT_MCD_IE_enable_b0                    ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_INT_PLL_IE_mask_w                       ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define CSC_INT_PLL_IE_mask_h0                      ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define CSC_INT_PLL_IE_mask_b0                      ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define CSC_INT_PLL_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_INT_PLL_IE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_INT_PLL_IE_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_INT_PLL_IE_enable_w                     ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_INT_PLL_IE_enable_h0                    ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_INT_PLL_IE_enable_b0                    ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_INT_IHRCO_IE_mask_w                     ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define CSC_INT_IHRCO_IE_mask_h0                    ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define CSC_INT_IHRCO_IE_mask_b0                    ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define CSC_INT_IHRCO_IE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_INT_IHRCO_IE_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_INT_IHRCO_IE_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_INT_IHRCO_IE_enable_w                   ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_INT_IHRCO_IE_enable_h0                  ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_INT_IHRCO_IE_enable_b0                  ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_INT_ILRCO_IE_mask_w                     ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define CSC_INT_ILRCO_IE_mask_h0                    ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define CSC_INT_ILRCO_IE_mask_b0                    ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CSC_INT_ILRCO_IE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_INT_ILRCO_IE_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_INT_ILRCO_IE_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_INT_ILRCO_IE_enable_w                   ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_INT_ILRCO_IE_enable_h0                  ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_INT_ILRCO_IE_enable_b0                  ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_INT_XOSC_IE_mask_w                      ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define CSC_INT_XOSC_IE_mask_h0                     ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CSC_INT_XOSC_IE_mask_b0                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CSC_INT_XOSC_IE_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_INT_XOSC_IE_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_INT_XOSC_IE_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_INT_XOSC_IE_enable_w                    ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_INT_XOSC_IE_enable_h0                   ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_INT_XOSC_IE_enable_b0                   ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_INT_IEA_mask_w                          ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CSC_INT_IEA_mask_h0                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_INT_IEA_mask_b0                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_INT_IEA_disable_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_INT_IEA_disable_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_INT_IEA_disable_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_INT_IEA_enable_w                        ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_INT_IEA_enable_h0                       ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_INT_IEA_enable_b0                       ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_PLL  [register's definitions]
N *              Offset[0x08]  CSC OSC and PLL control register (0x4C010008)
N ******************************************************************************
N */
N///@{
N#define CSC_PLL_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_PLL */
N#define CSC_PLL_XOSC_GN_mask_w                      ((uint32_t)0x00030000)  /*!< Bit Mask of 32bit */
N#define CSC_PLL_XOSC_GN_mask_h1                     ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define CSC_PLL_XOSC_GN_mask_b2                     ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define CSC_PLL_XOSC_GN_32k_normal_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):32K_Normal of 32bit */
N#define CSC_PLL_XOSC_GN_32k_normal_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0x0):32K_Normal of 16bit */
N#define CSC_PLL_XOSC_GN_32k_normal_b2               ((uint8_t )0x00)        /*!< Bit Value =(0x0):32K_Normal of 8bit */
N#define CSC_PLL_XOSC_GN_medium_w                    ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):Medium of 32bit */
N#define CSC_PLL_XOSC_GN_medium_h1                   ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Medium of 16bit */
N#define CSC_PLL_XOSC_GN_medium_b2                   ((uint8_t )0x01)        /*!< Bit Value =(0x1):Medium of 8bit */
N#define CSC_PLL_XOSC_GN_32k_lowest_w                ((uint32_t)0x00020000)  /*!< Bit Value =(0x2):32K_Lowest of 32bit */
N#define CSC_PLL_XOSC_GN_32k_lowest_h1               ((uint16_t)0x0002)      /*!< Bit Value =(0x2):32K_Lowest of 16bit */
N#define CSC_PLL_XOSC_GN_32k_lowest_b2               ((uint8_t )0x02)        /*!< Bit Value =(0x2):32K_Lowest of 8bit */
N
N#define CSC_PLL_PLL_MUL_mask_w                      ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CSC_PLL_PLL_MUL_mask_h0                     ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CSC_PLL_PLL_MUL_mask_b1                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_PLL_PLL_MUL_16_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):16 of 32bit */
N#define CSC_PLL_PLL_MUL_16_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):16 of 16bit */
N#define CSC_PLL_PLL_MUL_16_b1                       ((uint8_t )0x00)        /*!< Bit Value =(0):16 of 8bit */
N#define CSC_PLL_PLL_MUL_24_w                        ((uint32_t)0x00000100)  /*!< Bit Value =(1):24 of 32bit */
N#define CSC_PLL_PLL_MUL_24_h0                       ((uint16_t)0x0100)      /*!< Bit Value =(1):24 of 16bit */
N#define CSC_PLL_PLL_MUL_24_b1                       ((uint8_t )0x01)        /*!< Bit Value =(1):24 of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_KEY  [register's definitions]
N *              Offset[0x0C]  CSC write protected Key register (0x4C01000C)
N ******************************************************************************
N */
N///@{
N#define CSC_KEY_default                             ((uint32_t)0x00000001)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_KEY */
N#define CSC_KEY_KEY_mask_w                          ((uint32_t)0x0000FFFF)  /*!< Bit Mask of 32bit */
N#define CSC_KEY_KEY_mask_h0                         ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define CSC_KEY_KEY_unprotected_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Unprotected of 32bit */
N#define CSC_KEY_KEY_unprotected_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Unprotected of 16bit */
N#define CSC_KEY_KEY_unprotected_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Unprotected of 8bit */
N#define CSC_KEY_KEY_protected_w                     ((uint32_t)0x00000001)  /*!< Bit Value =(1):Protected of 32bit */
N#define CSC_KEY_KEY_protected_h0                    ((uint16_t)0x0001)      /*!< Bit Value =(1):Protected of 16bit */
N#define CSC_KEY_KEY_protected_b0                    ((uint8_t )0x01)        /*!< Bit Value =(1):Protected of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_CR0  [register's definitions]
N *              Offset[0x10]  CSC clock source control register 0 (0x4C010010)
N ******************************************************************************
N */
N///@{
N#define CSC_CR0_default                             ((uint32_t)0x00000200)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_CR0 */
N#define CSC_CR0_MCD_SEL_mask_w                      ((uint32_t)0x00C00000)  /*!< Bit Mask of 32bit */
N#define CSC_CR0_MCD_SEL_mask_h1                     ((uint16_t)0x00C0)      /*!< Bit Mask of 16bit */
N#define CSC_CR0_MCD_SEL_mask_b2                     ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define CSC_CR0_MCD_SEL_125us_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):125us of 32bit */
N#define CSC_CR0_MCD_SEL_125us_h1                    ((uint16_t)0x0000)      /*!< Bit Value =(0x0):125us of 16bit */
N#define CSC_CR0_MCD_SEL_125us_b2                    ((uint8_t )0x00)        /*!< Bit Value =(0x0):125us of 8bit */
N#define CSC_CR0_MCD_SEL_250us_w                     ((uint32_t)0x00400000)  /*!< Bit Value =(0x1):250us of 32bit */
N#define CSC_CR0_MCD_SEL_250us_h1                    ((uint16_t)0x0040)      /*!< Bit Value =(0x1):250us of 16bit */
N#define CSC_CR0_MCD_SEL_250us_b2                    ((uint8_t )0x40)        /*!< Bit Value =(0x1):250us of 8bit */
N#define CSC_CR0_MCD_SEL_500us_w                     ((uint32_t)0x00800000)  /*!< Bit Value =(0x2):500us of 32bit */
N#define CSC_CR0_MCD_SEL_500us_h1                    ((uint16_t)0x0080)      /*!< Bit Value =(0x2):500us of 16bit */
N#define CSC_CR0_MCD_SEL_500us_b2                    ((uint8_t )0x80)        /*!< Bit Value =(0x2):500us of 8bit */
N#define CSC_CR0_MCD_SEL_1ms_w                       ((uint32_t)0x00C00000)  /*!< Bit Value =(0x3):1ms of 32bit */
N#define CSC_CR0_MCD_SEL_1ms_h1                      ((uint16_t)0x00C0)      /*!< Bit Value =(0x3):1ms of 16bit */
N#define CSC_CR0_MCD_SEL_1ms_b2                      ((uint8_t )0xC0)        /*!< Bit Value =(0x3):1ms of 8bit */
N
N#define CSC_CR0_IHRCO_SEL_mask_w                    ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define CSC_CR0_IHRCO_SEL_mask_h1                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CSC_CR0_IHRCO_SEL_mask_b2                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CSC_CR0_IHRCO_SEL_12_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):12 of 32bit */
N#define CSC_CR0_IHRCO_SEL_12_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0):12 of 16bit */
N#define CSC_CR0_IHRCO_SEL_12_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0):12 of 8bit */
N#define CSC_CR0_IHRCO_SEL_11_w                      ((uint32_t)0x00040000)  /*!< Bit Value =(1):11 of 32bit */
N#define CSC_CR0_IHRCO_SEL_11_h1                     ((uint16_t)0x0004)      /*!< Bit Value =(1):11 of 16bit */
N#define CSC_CR0_IHRCO_SEL_11_b2                     ((uint8_t )0x04)        /*!< Bit Value =(1):11 of 8bit */
N
N#define CSC_CR0_ST_SEL_mask_w                       ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define CSC_CR0_ST_SEL_mask_h1                      ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_CR0_ST_SEL_mask_b2                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_CR0_ST_SEL_hclk8_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):HCLK8 of 32bit */
N#define CSC_CR0_ST_SEL_hclk8_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0):HCLK8 of 16bit */
N#define CSC_CR0_ST_SEL_hclk8_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0):HCLK8 of 8bit */
N#define CSC_CR0_ST_SEL_ck_ls2_w                     ((uint32_t)0x00010000)  /*!< Bit Value =(1):CK_LS2 of 32bit */
N#define CSC_CR0_ST_SEL_ck_ls2_h1                    ((uint16_t)0x0001)      /*!< Bit Value =(1):CK_LS2 of 16bit */
N#define CSC_CR0_ST_SEL_ck_ls2_b2                    ((uint8_t )0x01)        /*!< Bit Value =(1):CK_LS2 of 8bit */
N
N#define CSC_CR0_MAIN_SEL_mask_w                     ((uint32_t)0x0000C000)  /*!< Bit Mask of 32bit */
N#define CSC_CR0_MAIN_SEL_mask_h0                    ((uint16_t)0xC000)      /*!< Bit Mask of 16bit */
N#define CSC_CR0_MAIN_SEL_mask_b1                    ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define CSC_CR0_MAIN_SEL_ck_hs_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_HS of 32bit */
N#define CSC_CR0_MAIN_SEL_ck_hs_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_HS of 16bit */
N#define CSC_CR0_MAIN_SEL_ck_hs_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_HS of 8bit */
N#define CSC_CR0_MAIN_SEL_ck_plli_w                  ((uint32_t)0x00004000)  /*!< Bit Value =(0x1):CK_PLLI of 32bit */
N#define CSC_CR0_MAIN_SEL_ck_plli_h0                 ((uint16_t)0x4000)      /*!< Bit Value =(0x1):CK_PLLI of 16bit */
N#define CSC_CR0_MAIN_SEL_ck_plli_b1                 ((uint8_t )0x40)        /*!< Bit Value =(0x1):CK_PLLI of 8bit */
N#define CSC_CR0_MAIN_SEL_ck_pllo_w                  ((uint32_t)0x00008000)  /*!< Bit Value =(0x2):CK_PLLO of 32bit */
N#define CSC_CR0_MAIN_SEL_ck_pllo_h0                 ((uint16_t)0x8000)      /*!< Bit Value =(0x2):CK_PLLO of 16bit */
N#define CSC_CR0_MAIN_SEL_ck_pllo_b1                 ((uint8_t )0x80)        /*!< Bit Value =(0x2):CK_PLLO of 8bit */
N
N#define CSC_CR0_HS_SEL_mask_w                       ((uint32_t)0x00000C00)  /*!< Bit Mask of 32bit */
N#define CSC_CR0_HS_SEL_mask_h0                      ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define CSC_CR0_HS_SEL_mask_b1                      ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define CSC_CR0_HS_SEL_ihrco_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):IHRCO of 32bit */
N#define CSC_CR0_HS_SEL_ihrco_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0x0):IHRCO of 16bit */
N#define CSC_CR0_HS_SEL_ihrco_b1                     ((uint8_t )0x00)        /*!< Bit Value =(0x0):IHRCO of 8bit */
N#define CSC_CR0_HS_SEL_xosc_w                       ((uint32_t)0x00000400)  /*!< Bit Value =(0x1):XOSC of 32bit */
N#define CSC_CR0_HS_SEL_xosc_h0                      ((uint16_t)0x0400)      /*!< Bit Value =(0x1):XOSC of 16bit */
N#define CSC_CR0_HS_SEL_xosc_b1                      ((uint8_t )0x04)        /*!< Bit Value =(0x1):XOSC of 8bit */
N#define CSC_CR0_HS_SEL_ilrco_w                      ((uint32_t)0x00000800)  /*!< Bit Value =(0x2):ILRCO of 32bit */
N#define CSC_CR0_HS_SEL_ilrco_h0                     ((uint16_t)0x0800)      /*!< Bit Value =(0x2):ILRCO of 16bit */
N#define CSC_CR0_HS_SEL_ilrco_b1                     ((uint8_t )0x08)        /*!< Bit Value =(0x2):ILRCO of 8bit */
N#define CSC_CR0_HS_SEL_ck_ext_w                     ((uint32_t)0x00000C00)  /*!< Bit Value =(0x3):CK_EXT of 32bit */
N#define CSC_CR0_HS_SEL_ck_ext_h0                    ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):CK_EXT of 16bit */
N#define CSC_CR0_HS_SEL_ck_ext_b1                    ((uint8_t )0x0C)        /*!< Bit Value =(0x3):CK_EXT of 8bit */
N
N#define CSC_CR0_LS_SEL_mask_w                       ((uint32_t)0x00000300)  /*!< Bit Mask of 32bit */
N#define CSC_CR0_LS_SEL_mask_h0                      ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define CSC_CR0_LS_SEL_mask_b1                      ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define CSC_CR0_LS_SEL_xosc_w                       ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):XOSC of 32bit */
N#define CSC_CR0_LS_SEL_xosc_h0                      ((uint16_t)0x0100)      /*!< Bit Value =(0x1):XOSC of 16bit */
N#define CSC_CR0_LS_SEL_xosc_b1                      ((uint8_t )0x01)        /*!< Bit Value =(0x1):XOSC of 8bit */
N#define CSC_CR0_LS_SEL_ilrco_w                      ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):ILRCO of 32bit */
N#define CSC_CR0_LS_SEL_ilrco_h0                     ((uint16_t)0x0200)      /*!< Bit Value =(0x2):ILRCO of 16bit */
N#define CSC_CR0_LS_SEL_ilrco_b1                     ((uint8_t )0x02)        /*!< Bit Value =(0x2):ILRCO of 8bit */
N#define CSC_CR0_LS_SEL_ck_ext_w                     ((uint32_t)0x00000300)  /*!< Bit Value =(0x3):CK_EXT of 32bit */
N#define CSC_CR0_LS_SEL_ck_ext_h0                    ((uint16_t)0x0300)      /*!< Bit Value =(0x3):CK_EXT of 16bit */
N#define CSC_CR0_LS_SEL_ck_ext_b1                    ((uint8_t )0x03)        /*!< Bit Value =(0x3):CK_EXT of 8bit */
N
N#define CSC_CR0_PLL_EN_mask_w                       ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define CSC_CR0_PLL_EN_mask_h0                      ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define CSC_CR0_PLL_EN_mask_b0                      ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define CSC_CR0_PLL_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_CR0_PLL_EN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_CR0_PLL_EN_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_CR0_PLL_EN_enable_w                     ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_CR0_PLL_EN_enable_h0                    ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_CR0_PLL_EN_enable_b0                    ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_CR0_MCD_DIS_mask_w                      ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define CSC_CR0_MCD_DIS_mask_h0                     ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define CSC_CR0_MCD_DIS_mask_b0                     ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CSC_CR0_MCD_DIS_enable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Enable of 32bit */
N#define CSC_CR0_MCD_DIS_enable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Enable of 16bit */
N#define CSC_CR0_MCD_DIS_enable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Enable of 8bit */
N#define CSC_CR0_MCD_DIS_disable_w                   ((uint32_t)0x00000010)  /*!< Bit Value =(1):Disable of 32bit */
N#define CSC_CR0_MCD_DIS_disable_h0                  ((uint16_t)0x0010)      /*!< Bit Value =(1):Disable of 16bit */
N#define CSC_CR0_MCD_DIS_disable_b0                  ((uint8_t )0x10)        /*!< Bit Value =(1):Disable of 8bit */
N
N#define CSC_CR0_IHRCO_EN_mask_w                     ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define CSC_CR0_IHRCO_EN_mask_h0                    ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define CSC_CR0_IHRCO_EN_mask_b0                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define CSC_CR0_IHRCO_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_CR0_IHRCO_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_CR0_IHRCO_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_CR0_IHRCO_EN_enable_w                   ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_CR0_IHRCO_EN_enable_h0                  ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_CR0_IHRCO_EN_enable_b0                  ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_DIV  [register's definitions]
N *              Offset[0x14]  CSC clock  divider register (0x4C010014)
N ******************************************************************************
N */
N///@{
N#define CSC_DIV_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_DIV */
N#define CSC_DIV_UT_DIV_mask_w                       ((uint32_t)0x0C000000)  /*!< Bit Mask of 32bit */
N#define CSC_DIV_UT_DIV_mask_h1                      ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define CSC_DIV_UT_DIV_mask_b3                      ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define CSC_DIV_UT_DIV_div32_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):DIV32 of 32bit */
N#define CSC_DIV_UT_DIV_div32_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0x0):DIV32 of 16bit */
N#define CSC_DIV_UT_DIV_div32_b3                     ((uint8_t )0x00)        /*!< Bit Value =(0x0):DIV32 of 8bit */
N#define CSC_DIV_UT_DIV_div8_w                       ((uint32_t)0x04000000)  /*!< Bit Value =(0x1):DIV8 of 32bit */
N#define CSC_DIV_UT_DIV_div8_h1                      ((uint16_t)0x0400)      /*!< Bit Value =(0x1):DIV8 of 16bit */
N#define CSC_DIV_UT_DIV_div8_b3                      ((uint8_t )0x04)        /*!< Bit Value =(0x1):DIV8 of 8bit */
N#define CSC_DIV_UT_DIV_div16_w                      ((uint32_t)0x08000000)  /*!< Bit Value =(0x2):DIV16 of 32bit */
N#define CSC_DIV_UT_DIV_div16_h1                     ((uint16_t)0x0800)      /*!< Bit Value =(0x2):DIV16 of 16bit */
N#define CSC_DIV_UT_DIV_div16_b3                     ((uint8_t )0x08)        /*!< Bit Value =(0x2):DIV16 of 8bit */
N#define CSC_DIV_UT_DIV_div128_w                     ((uint32_t)0x0C000000)  /*!< Bit Value =(0x3):DIV128 of 32bit */
N#define CSC_DIV_UT_DIV_div128_h1                    ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):DIV128 of 16bit */
N#define CSC_DIV_UT_DIV_div128_b3                    ((uint8_t )0x0C)        /*!< Bit Value =(0x3):DIV128 of 8bit */
N
N#define CSC_DIV_APB_DIV_mask_w                      ((uint32_t)0x00070000)  /*!< Bit Mask of 32bit */
N#define CSC_DIV_APB_DIV_mask_h1                     ((uint16_t)0x0007)      /*!< Bit Mask of 16bit */
N#define CSC_DIV_APB_DIV_mask_b2                     ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define CSC_DIV_APB_DIV_div1_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):DIV1 of 32bit */
N#define CSC_DIV_APB_DIV_div1_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0x0):DIV1 of 16bit */
N#define CSC_DIV_APB_DIV_div1_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0x0):DIV1 of 8bit */
N#define CSC_DIV_APB_DIV_div2_w                      ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):DIV2 of 32bit */
N#define CSC_DIV_APB_DIV_div2_h1                     ((uint16_t)0x0001)      /*!< Bit Value =(0x1):DIV2 of 16bit */
N#define CSC_DIV_APB_DIV_div2_b2                     ((uint8_t )0x01)        /*!< Bit Value =(0x1):DIV2 of 8bit */
N#define CSC_DIV_APB_DIV_div4_w                      ((uint32_t)0x00020000)  /*!< Bit Value =(0x2):DIV4 of 32bit */
N#define CSC_DIV_APB_DIV_div4_h1                     ((uint16_t)0x0002)      /*!< Bit Value =(0x2):DIV4 of 16bit */
N#define CSC_DIV_APB_DIV_div4_b2                     ((uint8_t )0x02)        /*!< Bit Value =(0x2):DIV4 of 8bit */
N#define CSC_DIV_APB_DIV_div8_w                      ((uint32_t)0x00030000)  /*!< Bit Value =(0x3):DIV8 of 32bit */
N#define CSC_DIV_APB_DIV_div8_h1                     ((uint16_t)0x0003)      /*!< Bit Value =(0x3):DIV8 of 16bit */
N#define CSC_DIV_APB_DIV_div8_b2                     ((uint8_t )0x03)        /*!< Bit Value =(0x3):DIV8 of 8bit */
N#define CSC_DIV_APB_DIV_div16_w                     ((uint32_t)0x00040000)  /*!< Bit Value =(0x4):DIV16 of 32bit */
N#define CSC_DIV_APB_DIV_div16_h1                    ((uint16_t)0x0004)      /*!< Bit Value =(0x4):DIV16 of 16bit */
N#define CSC_DIV_APB_DIV_div16_b2                    ((uint8_t )0x04)        /*!< Bit Value =(0x4):DIV16 of 8bit */
N
N#define CSC_DIV_AHB_DIV_mask_w                      ((uint32_t)0x00000F00)  /*!< Bit Mask of 32bit */
N#define CSC_DIV_AHB_DIV_mask_h0                     ((uint16_t)0x0F00)      /*!< Bit Mask of 16bit */
N#define CSC_DIV_AHB_DIV_mask_b1                     ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define CSC_DIV_AHB_DIV_div1_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):DIV1 of 32bit */
N#define CSC_DIV_AHB_DIV_div1_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0x0):DIV1 of 16bit */
N#define CSC_DIV_AHB_DIV_div1_b1                     ((uint8_t )0x00)        /*!< Bit Value =(0x0):DIV1 of 8bit */
N#define CSC_DIV_AHB_DIV_div2_w                      ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):DIV2 of 32bit */
N#define CSC_DIV_AHB_DIV_div2_h0                     ((uint16_t)0x0100)      /*!< Bit Value =(0x1):DIV2 of 16bit */
N#define CSC_DIV_AHB_DIV_div2_b1                     ((uint8_t )0x01)        /*!< Bit Value =(0x1):DIV2 of 8bit */
N#define CSC_DIV_AHB_DIV_div4_w                      ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):DIV4 of 32bit */
N#define CSC_DIV_AHB_DIV_div4_h0                     ((uint16_t)0x0200)      /*!< Bit Value =(0x2):DIV4 of 16bit */
N#define CSC_DIV_AHB_DIV_div4_b1                     ((uint8_t )0x02)        /*!< Bit Value =(0x2):DIV4 of 8bit */
N#define CSC_DIV_AHB_DIV_div8_w                      ((uint32_t)0x00000300)  /*!< Bit Value =(0x3):DIV8 of 32bit */
N#define CSC_DIV_AHB_DIV_div8_h0                     ((uint16_t)0x0300)      /*!< Bit Value =(0x3):DIV8 of 16bit */
N#define CSC_DIV_AHB_DIV_div8_b1                     ((uint8_t )0x03)        /*!< Bit Value =(0x3):DIV8 of 8bit */
N#define CSC_DIV_AHB_DIV_div16_w                     ((uint32_t)0x00000400)  /*!< Bit Value =(0x4):DIV16 of 32bit */
N#define CSC_DIV_AHB_DIV_div16_h0                    ((uint16_t)0x0400)      /*!< Bit Value =(0x4):DIV16 of 16bit */
N#define CSC_DIV_AHB_DIV_div16_b1                    ((uint8_t )0x04)        /*!< Bit Value =(0x4):DIV16 of 8bit */
N#define CSC_DIV_AHB_DIV_div32_w                     ((uint32_t)0x00000500)  /*!< Bit Value =(0x5):DIV32 of 32bit */
N#define CSC_DIV_AHB_DIV_div32_h0                    ((uint16_t)0x0500)      /*!< Bit Value =(0x5):DIV32 of 16bit */
N#define CSC_DIV_AHB_DIV_div32_b1                    ((uint8_t )0x05)        /*!< Bit Value =(0x5):DIV32 of 8bit */
N#define CSC_DIV_AHB_DIV_div64_w                     ((uint32_t)0x00000600)  /*!< Bit Value =(0x6):DIV64 of 32bit */
N#define CSC_DIV_AHB_DIV_div64_h0                    ((uint16_t)0x0600)      /*!< Bit Value =(0x6):DIV64 of 16bit */
N#define CSC_DIV_AHB_DIV_div64_b1                    ((uint8_t )0x06)        /*!< Bit Value =(0x6):DIV64 of 8bit */
N#define CSC_DIV_AHB_DIV_div128_w                    ((uint32_t)0x00000700)  /*!< Bit Value =(0x7):DIV128 of 32bit */
N#define CSC_DIV_AHB_DIV_div128_h0                   ((uint16_t)0x0700)      /*!< Bit Value =(0x7):DIV128 of 16bit */
N#define CSC_DIV_AHB_DIV_div128_b1                   ((uint8_t )0x07)        /*!< Bit Value =(0x7):DIV128 of 8bit */
N#define CSC_DIV_AHB_DIV_div256_w                    ((uint32_t)0x00000800)  /*!< Bit Value =(0x8):DIV256 of 32bit */
N#define CSC_DIV_AHB_DIV_div256_h0                   ((uint16_t)0x0800)      /*!< Bit Value =(0x8):DIV256 of 16bit */
N#define CSC_DIV_AHB_DIV_div256_b1                   ((uint8_t )0x08)        /*!< Bit Value =(0x8):DIV256 of 8bit */
N#define CSC_DIV_AHB_DIV_div512_w                    ((uint32_t)0x00000900)  /*!< Bit Value =(0x9):DIV512 of 32bit */
N#define CSC_DIV_AHB_DIV_div512_h0                   ((uint16_t)0x0900)      /*!< Bit Value =(0x9):DIV512 of 16bit */
N#define CSC_DIV_AHB_DIV_div512_b1                   ((uint8_t )0x09)        /*!< Bit Value =(0x9):DIV512 of 8bit */
N
N#define CSC_DIV_PLLO_DIV_mask_w                     ((uint32_t)0x00000030)  /*!< Bit Mask of 32bit */
N#define CSC_DIV_PLLO_DIV_mask_h0                    ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define CSC_DIV_PLLO_DIV_mask_b0                    ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define CSC_DIV_PLLO_DIV_div4_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):DIV4 of 32bit */
N#define CSC_DIV_PLLO_DIV_div4_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0x0):DIV4 of 16bit */
N#define CSC_DIV_PLLO_DIV_div4_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0x0):DIV4 of 8bit */
N#define CSC_DIV_PLLO_DIV_div3_w                     ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):DIV3 of 32bit */
N#define CSC_DIV_PLLO_DIV_div3_h0                    ((uint16_t)0x0010)      /*!< Bit Value =(0x1):DIV3 of 16bit */
N#define CSC_DIV_PLLO_DIV_div3_b0                    ((uint8_t )0x10)        /*!< Bit Value =(0x1):DIV3 of 8bit */
N#define CSC_DIV_PLLO_DIV_div2_w                     ((uint32_t)0x00000020)  /*!< Bit Value =(0x2):DIV2 of 32bit */
N#define CSC_DIV_PLLO_DIV_div2_h0                    ((uint16_t)0x0020)      /*!< Bit Value =(0x2):DIV2 of 16bit */
N#define CSC_DIV_PLLO_DIV_div2_b0                    ((uint8_t )0x20)        /*!< Bit Value =(0x2):DIV2 of 8bit */
N#define CSC_DIV_PLLO_DIV_div1_w                     ((uint32_t)0x00000030)  /*!< Bit Value =(0x3):DIV1 of 32bit */
N#define CSC_DIV_PLLO_DIV_div1_h0                    ((uint16_t)0x0030)      /*!< Bit Value =(0x3):DIV1 of 16bit */
N#define CSC_DIV_PLLO_DIV_div1_b0                    ((uint8_t )0x30)        /*!< Bit Value =(0x3):DIV1 of 8bit */
N
N#define CSC_DIV_PLLI_DIV_mask_w                     ((uint32_t)0x00000003)  /*!< Bit Mask of 32bit */
N#define CSC_DIV_PLLI_DIV_mask_h0                    ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define CSC_DIV_PLLI_DIV_mask_b0                    ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define CSC_DIV_PLLI_DIV_div1_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):DIV1 of 32bit */
N#define CSC_DIV_PLLI_DIV_div1_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0x0):DIV1 of 16bit */
N#define CSC_DIV_PLLI_DIV_div1_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0x0):DIV1 of 8bit */
N#define CSC_DIV_PLLI_DIV_div2_w                     ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):DIV2 of 32bit */
N#define CSC_DIV_PLLI_DIV_div2_h0                    ((uint16_t)0x0001)      /*!< Bit Value =(0x1):DIV2 of 16bit */
N#define CSC_DIV_PLLI_DIV_div2_b0                    ((uint8_t )0x01)        /*!< Bit Value =(0x1):DIV2 of 8bit */
N#define CSC_DIV_PLLI_DIV_div4_w                     ((uint32_t)0x00000002)  /*!< Bit Value =(0x2):DIV4 of 32bit */
N#define CSC_DIV_PLLI_DIV_div4_h0                    ((uint16_t)0x0002)      /*!< Bit Value =(0x2):DIV4 of 16bit */
N#define CSC_DIV_PLLI_DIV_div4_b0                    ((uint8_t )0x02)        /*!< Bit Value =(0x2):DIV4 of 8bit */
N#define CSC_DIV_PLLI_DIV_div6_w                     ((uint32_t)0x00000003)  /*!< Bit Value =(0x3):DIV6 of 32bit */
N#define CSC_DIV_PLLI_DIV_div6_h0                    ((uint16_t)0x0003)      /*!< Bit Value =(0x3):DIV6 of 16bit */
N#define CSC_DIV_PLLI_DIV_div6_b0                    ((uint8_t )0x03)        /*!< Bit Value =(0x3):DIV6 of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_CKO  [register's definitions]
N *              Offset[0x18]  CSC internal clock output control register (0x4C010018)
N ******************************************************************************
N */
N///@{
N#define CSC_CKO_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_CKO */
N#define CSC_CKO_CKO_SEL_mask_w                      ((uint32_t)0x00000070)  /*!< Bit Mask of 32bit */
N#define CSC_CKO_CKO_SEL_mask_h0                     ((uint16_t)0x0070)      /*!< Bit Mask of 16bit */
N#define CSC_CKO_CKO_SEL_mask_b0                     ((uint8_t )0x70)        /*!< Bit Mask of 8bit */
N#define CSC_CKO_CKO_SEL_ck_main_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_MAIN of 32bit */
N#define CSC_CKO_CKO_SEL_ck_main_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_MAIN of 16bit */
N#define CSC_CKO_CKO_SEL_ck_main_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_MAIN of 8bit */
N#define CSC_CKO_CKO_SEL_ck_ahb_w                    ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKO_CKO_SEL_ck_ahb_h0                   ((uint16_t)0x0010)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKO_CKO_SEL_ck_ahb_b0                   ((uint8_t )0x10)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N#define CSC_CKO_CKO_SEL_ck_apb_w                    ((uint32_t)0x00000020)  /*!< Bit Value =(0x2):CK_APB of 32bit */
N#define CSC_CKO_CKO_SEL_ck_apb_h0                   ((uint16_t)0x0020)      /*!< Bit Value =(0x2):CK_APB of 16bit */
N#define CSC_CKO_CKO_SEL_ck_apb_b0                   ((uint8_t )0x20)        /*!< Bit Value =(0x2):CK_APB of 8bit */
N#define CSC_CKO_CKO_SEL_ck_hs_w                     ((uint32_t)0x00000030)  /*!< Bit Value =(0x3):CK_HS of 32bit */
N#define CSC_CKO_CKO_SEL_ck_hs_h0                    ((uint16_t)0x0030)      /*!< Bit Value =(0x3):CK_HS of 16bit */
N#define CSC_CKO_CKO_SEL_ck_hs_b0                    ((uint8_t )0x30)        /*!< Bit Value =(0x3):CK_HS of 8bit */
N#define CSC_CKO_CKO_SEL_ck_ls_w                     ((uint32_t)0x00000040)  /*!< Bit Value =(0x4):CK_LS of 32bit */
N#define CSC_CKO_CKO_SEL_ck_ls_h0                    ((uint16_t)0x0040)      /*!< Bit Value =(0x4):CK_LS of 16bit */
N#define CSC_CKO_CKO_SEL_ck_ls_b0                    ((uint8_t )0x40)        /*!< Bit Value =(0x4):CK_LS of 8bit */
N#define CSC_CKO_CKO_SEL_ck_xosc_w                   ((uint32_t)0x00000050)  /*!< Bit Value =(0x5):CK_XOSC of 32bit */
N#define CSC_CKO_CKO_SEL_ck_xosc_h0                  ((uint16_t)0x0050)      /*!< Bit Value =(0x5):CK_XOSC of 16bit */
N#define CSC_CKO_CKO_SEL_ck_xosc_b0                  ((uint8_t )0x50)        /*!< Bit Value =(0x5):CK_XOSC of 8bit */
N
N#define CSC_CKO_CKO_DIV_mask_w                      ((uint32_t)0x0000000C)  /*!< Bit Mask of 32bit */
N#define CSC_CKO_CKO_DIV_mask_h0                     ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define CSC_CKO_CKO_DIV_mask_b0                     ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define CSC_CKO_CKO_DIV_div1_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):DIV1 of 32bit */
N#define CSC_CKO_CKO_DIV_div1_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0x0):DIV1 of 16bit */
N#define CSC_CKO_CKO_DIV_div1_b0                     ((uint8_t )0x00)        /*!< Bit Value =(0x0):DIV1 of 8bit */
N#define CSC_CKO_CKO_DIV_div2_w                      ((uint32_t)0x00000004)  /*!< Bit Value =(0x1):DIV2 of 32bit */
N#define CSC_CKO_CKO_DIV_div2_h0                     ((uint16_t)0x0004)      /*!< Bit Value =(0x1):DIV2 of 16bit */
N#define CSC_CKO_CKO_DIV_div2_b0                     ((uint8_t )0x04)        /*!< Bit Value =(0x1):DIV2 of 8bit */
N#define CSC_CKO_CKO_DIV_div4_w                      ((uint32_t)0x00000008)  /*!< Bit Value =(0x2):DIV4 of 32bit */
N#define CSC_CKO_CKO_DIV_div4_h0                     ((uint16_t)0x0008)      /*!< Bit Value =(0x2):DIV4 of 16bit */
N#define CSC_CKO_CKO_DIV_div4_b0                     ((uint8_t )0x08)        /*!< Bit Value =(0x2):DIV4 of 8bit */
N#define CSC_CKO_CKO_DIV_div8_w                      ((uint32_t)0x0000000C)  /*!< Bit Value =(0x3):DIV8 of 32bit */
N#define CSC_CKO_CKO_DIV_div8_h0                     ((uint16_t)0x000C)      /*!< Bit Value =(0x3):DIV8 of 16bit */
N#define CSC_CKO_CKO_DIV_div8_b0                     ((uint8_t )0x0C)        /*!< Bit Value =(0x3):DIV8 of 8bit */
N
N#define CSC_CKO_CKO_EN_mask_w                       ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CSC_CKO_CKO_EN_mask_h0                      ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_CKO_CKO_EN_mask_b0                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_CKO_CKO_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Disable of 32bit */
N#define CSC_CKO_CKO_EN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Disable of 16bit */
N#define CSC_CKO_CKO_EN_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):Disable of 8bit */
N#define CSC_CKO_CKO_EN_enable_w                     ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):Enable of 32bit */
N#define CSC_CKO_CKO_EN_enable_h0                    ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Enable of 16bit */
N#define CSC_CKO_CKO_EN_enable_b0                    ((uint8_t )0x01)        /*!< Bit Value =(0x1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_AHB  [register's definitions]
N *              Offset[0x1C]  CSC AHB clock control register (0x4C01001C)
N ******************************************************************************
N */
N///@{
N#define CSC_AHB_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_AHB */
N#define CSC_AHB_DMA_EN_mask_w                       ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define CSC_AHB_DMA_EN_mask_h0                      ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define CSC_AHB_DMA_EN_mask_b1                      ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define CSC_AHB_DMA_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_AHB_DMA_EN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_AHB_DMA_EN_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_AHB_DMA_EN_enable_w                     ((uint32_t)0x00008000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_AHB_DMA_EN_enable_h0                    ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_AHB_DMA_EN_enable_b1                    ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_AHB_EMB_EN_mask_w                       ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define CSC_AHB_EMB_EN_mask_h0                      ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define CSC_AHB_EMB_EN_mask_b1                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CSC_AHB_EMB_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_AHB_EMB_EN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_AHB_EMB_EN_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_AHB_EMB_EN_enable_w                     ((uint32_t)0x00001000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_AHB_EMB_EN_enable_h0                    ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_AHB_EMB_EN_enable_b1                    ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_AHB_GPL_EN_mask_w                       ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CSC_AHB_GPL_EN_mask_h0                      ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CSC_AHB_GPL_EN_mask_b1                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_AHB_GPL_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_AHB_GPL_EN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_AHB_GPL_EN_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_AHB_GPL_EN_enable_w                     ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_AHB_GPL_EN_enable_h0                    ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_AHB_GPL_EN_enable_b1                    ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_AHB_IOPE_EN_mask_w                      ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define CSC_AHB_IOPE_EN_mask_h0                     ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define CSC_AHB_IOPE_EN_mask_b0                     ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CSC_AHB_IOPE_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_AHB_IOPE_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_AHB_IOPE_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_AHB_IOPE_EN_enable_w                    ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_AHB_IOPE_EN_enable_h0                   ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_AHB_IOPE_EN_enable_b0                   ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_AHB_IOPD_EN_mask_w                      ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define CSC_AHB_IOPD_EN_mask_h0                     ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define CSC_AHB_IOPD_EN_mask_b0                     ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define CSC_AHB_IOPD_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_AHB_IOPD_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_AHB_IOPD_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_AHB_IOPD_EN_enable_w                    ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_AHB_IOPD_EN_enable_h0                   ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_AHB_IOPD_EN_enable_b0                   ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_AHB_IOPC_EN_mask_w                      ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define CSC_AHB_IOPC_EN_mask_h0                     ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CSC_AHB_IOPC_EN_mask_b0                     ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CSC_AHB_IOPC_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_AHB_IOPC_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_AHB_IOPC_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_AHB_IOPC_EN_enable_w                    ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_AHB_IOPC_EN_enable_h0                   ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_AHB_IOPC_EN_enable_b0                   ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_AHB_IOPB_EN_mask_w                      ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define CSC_AHB_IOPB_EN_mask_h0                     ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CSC_AHB_IOPB_EN_mask_b0                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CSC_AHB_IOPB_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_AHB_IOPB_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_AHB_IOPB_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_AHB_IOPB_EN_enable_w                    ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_AHB_IOPB_EN_enable_h0                   ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_AHB_IOPB_EN_enable_b0                   ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_AHB_IOPA_EN_mask_w                      ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CSC_AHB_IOPA_EN_mask_h0                     ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_AHB_IOPA_EN_mask_b0                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_AHB_IOPA_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_AHB_IOPA_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_AHB_IOPA_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_AHB_IOPA_EN_enable_w                    ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_AHB_IOPA_EN_enable_h0                   ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_AHB_IOPA_EN_enable_b0                   ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_APB0  [register's definitions]
N *              Offset[0x20]  CSC APB clock control register 0 (0x4C010020)
N ******************************************************************************
N */
N///@{
N#define CSC_APB0_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_APB0 */
N#define CSC_APB0_URT3_EN_mask_w                     ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_URT3_EN_mask_h1                    ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_URT3_EN_mask_b2                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_URT3_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_URT3_EN_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_URT3_EN_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_URT3_EN_enable_w                   ((uint32_t)0x00080000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_URT3_EN_enable_h1                  ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_URT3_EN_enable_b2                  ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB0_URT2_EN_mask_w                     ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_URT2_EN_mask_h1                    ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_URT2_EN_mask_b2                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_URT2_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_URT2_EN_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_URT2_EN_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_URT2_EN_enable_w                   ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_URT2_EN_enable_h1                  ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_URT2_EN_enable_b2                  ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB0_URT1_EN_mask_w                     ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_URT1_EN_mask_h1                    ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_URT1_EN_mask_b2                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_URT1_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_URT1_EN_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_URT1_EN_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_URT1_EN_enable_w                   ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_URT1_EN_enable_h1                  ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_URT1_EN_enable_b2                  ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB0_URT0_EN_mask_w                     ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_URT0_EN_mask_h1                    ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_URT0_EN_mask_b2                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_URT0_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_URT0_EN_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_URT0_EN_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_URT0_EN_enable_w                   ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_URT0_EN_enable_h1                  ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_URT0_EN_enable_b2                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB0_SPI0_EN_mask_w                     ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_SPI0_EN_mask_h0                    ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_SPI0_EN_mask_b1                    ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_SPI0_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_SPI0_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_SPI0_EN_disable_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_SPI0_EN_enable_w                   ((uint32_t)0x00001000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_SPI0_EN_enable_h0                  ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_SPI0_EN_enable_b1                  ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB0_I2C1_EN_mask_w                     ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_I2C1_EN_mask_h0                    ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_I2C1_EN_mask_b1                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_I2C1_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_I2C1_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_I2C1_EN_disable_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_I2C1_EN_enable_w                   ((uint32_t)0x00000200)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_I2C1_EN_enable_h0                  ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_I2C1_EN_enable_b1                  ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB0_I2C0_EN_mask_w                     ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_I2C0_EN_mask_h0                    ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_I2C0_EN_mask_b1                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_I2C0_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_I2C0_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_I2C0_EN_disable_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_I2C0_EN_enable_w                   ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_I2C0_EN_enable_h0                  ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_I2C0_EN_enable_b1                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB0_WWDT_EN_mask_w                     ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_WWDT_EN_mask_h0                    ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_WWDT_EN_mask_b0                    ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_WWDT_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_WWDT_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_WWDT_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_WWDT_EN_enable_w                   ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_WWDT_EN_enable_h0                  ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_WWDT_EN_enable_b0                  ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB0_IWDT_EN_mask_w                     ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_IWDT_EN_mask_h0                    ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_IWDT_EN_mask_b0                    ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_IWDT_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_IWDT_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_IWDT_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_IWDT_EN_enable_w                   ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_IWDT_EN_enable_h0                  ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_IWDT_EN_enable_b0                  ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB0_RTC_EN_mask_w                      ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_RTC_EN_mask_h0                     ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_RTC_EN_mask_b0                     ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_RTC_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_RTC_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_RTC_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_RTC_EN_enable_w                    ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_RTC_EN_enable_h0                   ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_RTC_EN_enable_b0                   ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB0_DAC_EN_mask_w                      ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_DAC_EN_mask_h0                     ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_DAC_EN_mask_b0                     ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_DAC_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_DAC_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_DAC_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_DAC_EN_enable_w                    ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_DAC_EN_enable_h0                   ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_DAC_EN_enable_b0                   ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB0_CMP_EN_mask_w                      ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_CMP_EN_mask_h0                     ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_CMP_EN_mask_b0                     ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_CMP_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_CMP_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_CMP_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_CMP_EN_enable_w                    ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_CMP_EN_enable_h0                   ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_CMP_EN_enable_b0                   ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB0_ADC0_EN_mask_w                     ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CSC_APB0_ADC0_EN_mask_h0                    ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_APB0_ADC0_EN_mask_b0                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_APB0_ADC0_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB0_ADC0_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB0_ADC0_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB0_ADC0_EN_enable_w                   ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB0_ADC0_EN_enable_h0                  ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB0_ADC0_EN_enable_b0                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_APB1  [register's definitions]
N *              Offset[0x24]  CSC APB clock control register 1 (0x4C010024)
N ******************************************************************************
N */
N///@{
N#define CSC_APB1_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_APB1 */
N#define CSC_APB1_TM36_EN_mask_w                     ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define CSC_APB1_TM36_EN_mask_h0                    ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define CSC_APB1_TM36_EN_mask_b1                    ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define CSC_APB1_TM36_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB1_TM36_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB1_TM36_EN_disable_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB1_TM36_EN_enable_w                   ((uint32_t)0x00008000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB1_TM36_EN_enable_h0                  ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB1_TM36_EN_enable_b1                  ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB1_TM26_EN_mask_w                     ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define CSC_APB1_TM26_EN_mask_h0                    ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define CSC_APB1_TM26_EN_mask_b1                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define CSC_APB1_TM26_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB1_TM26_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB1_TM26_EN_disable_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB1_TM26_EN_enable_w                   ((uint32_t)0x00000800)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB1_TM26_EN_enable_h0                  ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB1_TM26_EN_enable_b1                  ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB1_TM20_EN_mask_w                     ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CSC_APB1_TM20_EN_mask_h0                    ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CSC_APB1_TM20_EN_mask_b1                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_APB1_TM20_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB1_TM20_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB1_TM20_EN_disable_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB1_TM20_EN_enable_w                   ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB1_TM20_EN_enable_h0                  ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB1_TM20_EN_enable_b1                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB1_TM16_EN_mask_w                     ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define CSC_APB1_TM16_EN_mask_h0                    ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define CSC_APB1_TM16_EN_mask_b0                    ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define CSC_APB1_TM16_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB1_TM16_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB1_TM16_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB1_TM16_EN_enable_w                   ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB1_TM16_EN_enable_h0                  ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB1_TM16_EN_enable_b0                  ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB1_TM10_EN_mask_w                     ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define CSC_APB1_TM10_EN_mask_h0                    ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define CSC_APB1_TM10_EN_mask_b0                    ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CSC_APB1_TM10_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB1_TM10_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB1_TM10_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB1_TM10_EN_enable_w                   ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB1_TM10_EN_enable_h0                  ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB1_TM10_EN_enable_b0                  ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB1_TM01_EN_mask_w                     ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define CSC_APB1_TM01_EN_mask_h0                    ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CSC_APB1_TM01_EN_mask_b0                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CSC_APB1_TM01_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB1_TM01_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB1_TM01_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB1_TM01_EN_enable_w                   ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB1_TM01_EN_enable_h0                  ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB1_TM01_EN_enable_b0                  ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_APB1_TM00_EN_mask_w                     ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CSC_APB1_TM00_EN_mask_h0                    ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_APB1_TM00_EN_mask_b0                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_APB1_TM00_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_APB1_TM00_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_APB1_TM00_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_APB1_TM00_EN_enable_w                   ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_APB1_TM00_EN_enable_h0                  ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_APB1_TM00_EN_enable_b0                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_SLP0  [register's definitions]
N *              Offset[0x30]  CSC SLEEP mode clock enable register 0 (0x4C010030)
N ******************************************************************************
N */
N///@{
N#define CSC_SLP0_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_SLP0 */
N#define CSC_SLP0_SLP_URT3_mask_w                    ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_URT3_mask_h1                   ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_URT3_mask_b2                   ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_URT3_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_URT3_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_URT3_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_URT3_enable_w                  ((uint32_t)0x00080000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_URT3_enable_h1                 ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_URT3_enable_b2                 ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP0_SLP_URT2_mask_w                    ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_URT2_mask_h1                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_URT2_mask_b2                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_URT2_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_URT2_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_URT2_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_URT2_enable_w                  ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_URT2_enable_h1                 ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_URT2_enable_b2                 ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP0_SLP_URT1_mask_w                    ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_URT1_mask_h1                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_URT1_mask_b2                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_URT1_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_URT1_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_URT1_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_URT1_enable_w                  ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_URT1_enable_h1                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_URT1_enable_b2                 ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP0_SLP_URT0_mask_w                    ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_URT0_mask_h1                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_URT0_mask_b2                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_URT0_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_URT0_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_URT0_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_URT0_enable_w                  ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_URT0_enable_h1                 ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_URT0_enable_b2                 ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP0_SLP_SPI0_mask_w                    ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_SPI0_mask_h0                   ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_SPI0_mask_b1                   ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_SPI0_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_SPI0_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_SPI0_disable_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_SPI0_enable_w                  ((uint32_t)0x00001000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_SPI0_enable_h0                 ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_SPI0_enable_b1                 ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP0_SLP_I2C1_mask_w                    ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_I2C1_mask_h0                   ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_I2C1_mask_b1                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_I2C1_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_I2C1_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_I2C1_disable_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_I2C1_enable_w                  ((uint32_t)0x00000200)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_I2C1_enable_h0                 ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_I2C1_enable_b1                 ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP0_SLP_I2C0_mask_w                    ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_I2C0_mask_h0                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_I2C0_mask_b1                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_I2C0_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_I2C0_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_I2C0_disable_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_I2C0_enable_w                  ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_I2C0_enable_h0                 ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_I2C0_enable_b1                 ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP0_SLP_WWDT_mask_w                    ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_WWDT_mask_h0                   ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_WWDT_mask_b0                   ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_WWDT_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_WWDT_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_WWDT_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_WWDT_enable_w                  ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_WWDT_enable_h0                 ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_WWDT_enable_b0                 ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP0_SLP_IWDT_mask_w                    ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_IWDT_mask_h0                   ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_IWDT_mask_b0                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_IWDT_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_IWDT_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_IWDT_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_IWDT_enable_w                  ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_IWDT_enable_h0                 ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_IWDT_enable_b0                 ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP0_SLP_RTC_mask_w                     ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_RTC_mask_h0                    ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_RTC_mask_b0                    ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_RTC_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_RTC_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_RTC_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_RTC_enable_w                   ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_RTC_enable_h0                  ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_RTC_enable_b0                  ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP0_SLP_DAC_mask_w                     ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_DAC_mask_h0                    ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_DAC_mask_b0                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_DAC_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_DAC_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_DAC_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_DAC_enable_w                   ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_DAC_enable_h0                  ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_DAC_enable_b0                  ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP0_SLP_CMP_mask_w                     ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_CMP_mask_h0                    ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_CMP_mask_b0                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_CMP_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_CMP_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_CMP_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_CMP_enable_w                   ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_CMP_enable_h0                  ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_CMP_enable_b0                  ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP0_SLP_ADC0_mask_w                    ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CSC_SLP0_SLP_ADC0_mask_h0                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_SLP0_SLP_ADC0_mask_b0                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_SLP0_SLP_ADC0_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP0_SLP_ADC0_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP0_SLP_ADC0_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP0_SLP_ADC0_enable_w                  ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP0_SLP_ADC0_enable_h0                 ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP0_SLP_ADC0_enable_b0                 ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_SLP1  [register's definitions]
N *              Offset[0x34]  CSC SLEEP mode clock enable register 1 (0x4C010034)
N ******************************************************************************
N */
N///@{
N#define CSC_SLP1_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_SLP1 */
N#define CSC_SLP1_SLP_EMB_mask_w                     ((uint32_t)0x40000000)  /*!< Bit Mask of 32bit */
N#define CSC_SLP1_SLP_EMB_mask_h1                    ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define CSC_SLP1_SLP_EMB_mask_b3                    ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define CSC_SLP1_SLP_EMB_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP1_SLP_EMB_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP1_SLP_EMB_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP1_SLP_EMB_enable_w                   ((uint32_t)0x40000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP1_SLP_EMB_enable_h1                  ((uint16_t)0x4000)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP1_SLP_EMB_enable_b3                  ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP1_SLP_TM36_mask_w                    ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define CSC_SLP1_SLP_TM36_mask_h0                   ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define CSC_SLP1_SLP_TM36_mask_b1                   ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define CSC_SLP1_SLP_TM36_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP1_SLP_TM36_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP1_SLP_TM36_disable_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP1_SLP_TM36_enable_w                  ((uint32_t)0x00008000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP1_SLP_TM36_enable_h0                 ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP1_SLP_TM36_enable_b1                 ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP1_SLP_TM26_mask_w                    ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define CSC_SLP1_SLP_TM26_mask_h0                   ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define CSC_SLP1_SLP_TM26_mask_b1                   ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define CSC_SLP1_SLP_TM26_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP1_SLP_TM26_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP1_SLP_TM26_disable_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP1_SLP_TM26_enable_w                  ((uint32_t)0x00000800)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP1_SLP_TM26_enable_h0                 ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP1_SLP_TM26_enable_b1                 ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP1_SLP_TM20_mask_w                    ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CSC_SLP1_SLP_TM20_mask_h0                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CSC_SLP1_SLP_TM20_mask_b1                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_SLP1_SLP_TM20_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP1_SLP_TM20_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP1_SLP_TM20_disable_b1                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP1_SLP_TM20_enable_w                  ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP1_SLP_TM20_enable_h0                 ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP1_SLP_TM20_enable_b1                 ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP1_SLP_TM16_mask_w                    ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define CSC_SLP1_SLP_TM16_mask_h0                   ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define CSC_SLP1_SLP_TM16_mask_b0                   ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define CSC_SLP1_SLP_TM16_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP1_SLP_TM16_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP1_SLP_TM16_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP1_SLP_TM16_enable_w                  ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP1_SLP_TM16_enable_h0                 ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP1_SLP_TM16_enable_b0                 ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP1_SLP_TM10_mask_w                    ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define CSC_SLP1_SLP_TM10_mask_h0                   ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define CSC_SLP1_SLP_TM10_mask_b0                   ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CSC_SLP1_SLP_TM10_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP1_SLP_TM10_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP1_SLP_TM10_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP1_SLP_TM10_enable_w                  ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP1_SLP_TM10_enable_h0                 ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP1_SLP_TM10_enable_b0                 ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP1_SLP_TM01_mask_w                    ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define CSC_SLP1_SLP_TM01_mask_h0                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CSC_SLP1_SLP_TM01_mask_b0                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CSC_SLP1_SLP_TM01_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP1_SLP_TM01_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP1_SLP_TM01_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP1_SLP_TM01_enable_w                  ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP1_SLP_TM01_enable_h0                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP1_SLP_TM01_enable_b0                 ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_SLP1_SLP_TM00_mask_w                    ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CSC_SLP1_SLP_TM00_mask_h0                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_SLP1_SLP_TM00_mask_b0                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_SLP1_SLP_TM00_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_SLP1_SLP_TM00_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_SLP1_SLP_TM00_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_SLP1_SLP_TM00_enable_w                  ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_SLP1_SLP_TM00_enable_h0                 ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_SLP1_SLP_TM00_enable_b0                 ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_STP0  [register's definitions]
N *              Offset[0x38]  CSC STOP mode clock enable register 0 (0x4C010038)
N ******************************************************************************
N */
N///@{
N#define CSC_STP0_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_STP0 */
N#define CSC_STP0_STP_IWDT_mask_w                    ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define CSC_STP0_STP_IWDT_mask_h0                   ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define CSC_STP0_STP_IWDT_mask_b0                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define CSC_STP0_STP_IWDT_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_STP0_STP_IWDT_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_STP0_STP_IWDT_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_STP0_STP_IWDT_enable_w                  ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_STP0_STP_IWDT_enable_h0                 ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_STP0_STP_IWDT_enable_b0                 ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CSC_STP0_STP_RTC_mask_w                     ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define CSC_STP0_STP_RTC_mask_h0                    ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define CSC_STP0_STP_RTC_mask_b0                    ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define CSC_STP0_STP_RTC_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CSC_STP0_STP_RTC_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CSC_STP0_STP_RTC_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CSC_STP0_STP_RTC_enable_w                   ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define CSC_STP0_STP_RTC_enable_h0                  ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define CSC_STP0_STP_RTC_enable_b0                  ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_CKS0  [register's definitions]
N *              Offset[0x40]  CSC clock source select register 0 (0x4C010040)
N ******************************************************************************
N */
N///@{
N#define CSC_CKS0_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_CKS0 */
N#define CSC_CKS0_DAC_CKS_mask_w                     ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define CSC_CKS0_DAC_CKS_mask_h0                    ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define CSC_CKS0_DAC_CKS_mask_b0                    ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define CSC_CKS0_DAC_CKS_ck_apb_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS0_DAC_CKS_ck_apb_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS0_DAC_CKS_ck_apb_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS0_DAC_CKS_ck_ahb_w                   ((uint32_t)0x00000020)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS0_DAC_CKS_ck_ahb_h0                  ((uint16_t)0x0020)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS0_DAC_CKS_ck_ahb_b0                  ((uint8_t )0x20)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS0_CMP_CKS_mask_w                     ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define CSC_CKS0_CMP_CKS_mask_h0                    ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define CSC_CKS0_CMP_CKS_mask_b0                    ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CSC_CKS0_CMP_CKS_ck_apb_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS0_CMP_CKS_ck_apb_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS0_CMP_CKS_ck_apb_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS0_CMP_CKS_ck_ahb_w                   ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS0_CMP_CKS_ck_ahb_h0                  ((uint16_t)0x0010)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS0_CMP_CKS_ck_ahb_b0                  ((uint8_t )0x10)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS0_ADC0_CKS_mask_w                    ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CSC_CKS0_ADC0_CKS_mask_h0                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_CKS0_ADC0_CKS_mask_b0                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_CKS0_ADC0_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS0_ADC0_CKS_ck_apb_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS0_ADC0_CKS_ck_apb_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS0_ADC0_CKS_ck_ahb_w                  ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS0_ADC0_CKS_ck_ahb_h0                 ((uint16_t)0x0001)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS0_ADC0_CKS_ck_ahb_b0                 ((uint8_t )0x01)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_CKS1  [register's definitions]
N *              Offset[0x44]  CSC clock source select register 1 (0x4C010044)
N ******************************************************************************
N */
N///@{
N#define CSC_CKS1_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_CKS1 */
N#define CSC_CKS1_URT3_CKS_mask_w                    ((uint32_t)0x00400000)  /*!< Bit Mask of 32bit */
N#define CSC_CKS1_URT3_CKS_mask_h1                   ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define CSC_CKS1_URT3_CKS_mask_b2                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define CSC_CKS1_URT3_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS1_URT3_CKS_ck_apb_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS1_URT3_CKS_ck_apb_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS1_URT3_CKS_ck_ahb_w                  ((uint32_t)0x00400000)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS1_URT3_CKS_ck_ahb_h1                 ((uint16_t)0x0040)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS1_URT3_CKS_ck_ahb_b2                 ((uint8_t )0x40)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS1_URT2_CKS_mask_w                    ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define CSC_CKS1_URT2_CKS_mask_h1                   ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define CSC_CKS1_URT2_CKS_mask_b2                   ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CSC_CKS1_URT2_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS1_URT2_CKS_ck_apb_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS1_URT2_CKS_ck_apb_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS1_URT2_CKS_ck_ahb_w                  ((uint32_t)0x00100000)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS1_URT2_CKS_ck_ahb_h1                 ((uint16_t)0x0010)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS1_URT2_CKS_ck_ahb_b2                 ((uint8_t )0x10)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS1_URT1_CKS_mask_w                    ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define CSC_CKS1_URT1_CKS_mask_h1                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CSC_CKS1_URT1_CKS_mask_b2                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CSC_CKS1_URT1_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS1_URT1_CKS_ck_apb_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS1_URT1_CKS_ck_apb_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS1_URT1_CKS_ck_ahb_w                  ((uint32_t)0x00040000)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS1_URT1_CKS_ck_ahb_h1                 ((uint16_t)0x0004)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS1_URT1_CKS_ck_ahb_b2                 ((uint8_t )0x04)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS1_URT0_CKS_mask_w                    ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define CSC_CKS1_URT0_CKS_mask_h1                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_CKS1_URT0_CKS_mask_b2                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_CKS1_URT0_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS1_URT0_CKS_ck_apb_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS1_URT0_CKS_ck_apb_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS1_URT0_CKS_ck_ahb_w                  ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS1_URT0_CKS_ck_ahb_h1                 ((uint16_t)0x0001)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS1_URT0_CKS_ck_ahb_b2                 ((uint8_t )0x01)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS1_SPI0_CKS_mask_w                    ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CSC_CKS1_SPI0_CKS_mask_h0                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CSC_CKS1_SPI0_CKS_mask_b1                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_CKS1_SPI0_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS1_SPI0_CKS_ck_apb_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS1_SPI0_CKS_ck_apb_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS1_SPI0_CKS_ck_ahb_w                  ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS1_SPI0_CKS_ck_ahb_h0                 ((uint16_t)0x0100)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS1_SPI0_CKS_ck_ahb_b1                 ((uint8_t )0x01)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS1_I2C1_CKS_mask_w                    ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define CSC_CKS1_I2C1_CKS_mask_h0                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CSC_CKS1_I2C1_CKS_mask_b0                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CSC_CKS1_I2C1_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS1_I2C1_CKS_ck_apb_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS1_I2C1_CKS_ck_apb_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS1_I2C1_CKS_ck_ahb_w                  ((uint32_t)0x00000004)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS1_I2C1_CKS_ck_ahb_h0                 ((uint16_t)0x0004)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS1_I2C1_CKS_ck_ahb_b0                 ((uint8_t )0x04)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS1_I2C0_CKS_mask_w                    ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CSC_CKS1_I2C0_CKS_mask_h0                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_CKS1_I2C0_CKS_mask_b0                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_CKS1_I2C0_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS1_I2C0_CKS_ck_apb_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS1_I2C0_CKS_ck_apb_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS1_I2C0_CKS_ck_ahb_w                  ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS1_I2C0_CKS_ck_ahb_h0                 ((uint16_t)0x0001)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS1_I2C0_CKS_ck_ahb_b0                 ((uint8_t )0x01)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CSC_CKS2  [register's definitions]
N *              Offset[0x48]  CSC clock source select register 2 (0x4C010048)
N ******************************************************************************
N */
N///@{
N#define CSC_CKS2_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CSC_CKS2 */
N#define CSC_CKS2_TM36_CKS_mask_w                    ((uint32_t)0x40000000)  /*!< Bit Mask of 32bit */
N#define CSC_CKS2_TM36_CKS_mask_h1                   ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define CSC_CKS2_TM36_CKS_mask_b3                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define CSC_CKS2_TM36_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS2_TM36_CKS_ck_apb_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS2_TM36_CKS_ck_apb_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS2_TM36_CKS_ck_ahb_w                  ((uint32_t)0x40000000)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS2_TM36_CKS_ck_ahb_h1                 ((uint16_t)0x4000)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS2_TM36_CKS_ck_ahb_b3                 ((uint8_t )0x40)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS2_TM26_CKS_mask_w                    ((uint32_t)0x00400000)  /*!< Bit Mask of 32bit */
N#define CSC_CKS2_TM26_CKS_mask_h1                   ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define CSC_CKS2_TM26_CKS_mask_b2                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define CSC_CKS2_TM26_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS2_TM26_CKS_ck_apb_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS2_TM26_CKS_ck_apb_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS2_TM26_CKS_ck_ahb_w                  ((uint32_t)0x00400000)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS2_TM26_CKS_ck_ahb_h1                 ((uint16_t)0x0040)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS2_TM26_CKS_ck_ahb_b2                 ((uint8_t )0x40)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS2_TM20_CKS_mask_w                    ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define CSC_CKS2_TM20_CKS_mask_h1                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_CKS2_TM20_CKS_mask_b2                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_CKS2_TM20_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS2_TM20_CKS_ck_apb_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS2_TM20_CKS_ck_apb_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS2_TM20_CKS_ck_ahb_w                  ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS2_TM20_CKS_ck_ahb_h1                 ((uint16_t)0x0001)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS2_TM20_CKS_ck_ahb_b2                 ((uint8_t )0x01)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS2_TM16_CKS_mask_w                    ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define CSC_CKS2_TM16_CKS_mask_h0                   ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define CSC_CKS2_TM16_CKS_mask_b1                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define CSC_CKS2_TM16_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS2_TM16_CKS_ck_apb_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS2_TM16_CKS_ck_apb_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS2_TM16_CKS_ck_ahb_w                  ((uint32_t)0x00004000)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS2_TM16_CKS_ck_ahb_h0                 ((uint16_t)0x4000)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS2_TM16_CKS_ck_ahb_b1                 ((uint8_t )0x40)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS2_TM10_CKS_mask_w                    ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CSC_CKS2_TM10_CKS_mask_h0                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CSC_CKS2_TM10_CKS_mask_b1                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_CKS2_TM10_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS2_TM10_CKS_ck_apb_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS2_TM10_CKS_ck_apb_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS2_TM10_CKS_ck_ahb_w                  ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS2_TM10_CKS_ck_ahb_h0                 ((uint16_t)0x0100)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS2_TM10_CKS_ck_ahb_b1                 ((uint8_t )0x01)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS2_TM01_CKS_mask_w                    ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define CSC_CKS2_TM01_CKS_mask_h0                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CSC_CKS2_TM01_CKS_mask_b0                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CSC_CKS2_TM01_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS2_TM01_CKS_ck_apb_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS2_TM01_CKS_ck_apb_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS2_TM01_CKS_ck_ahb_w                  ((uint32_t)0x00000004)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS2_TM01_CKS_ck_ahb_h0                 ((uint16_t)0x0004)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS2_TM01_CKS_ck_ahb_b0                 ((uint8_t )0x04)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N#define CSC_CKS2_TM00_CKS_mask_w                    ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CSC_CKS2_TM00_CKS_mask_h0                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CSC_CKS2_TM00_CKS_mask_b0                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CSC_CKS2_TM00_CKS_ck_apb_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):CK_APB of 32bit */
N#define CSC_CKS2_TM00_CKS_ck_apb_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):CK_APB of 16bit */
N#define CSC_CKS2_TM00_CKS_ck_apb_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):CK_APB of 8bit */
N#define CSC_CKS2_TM00_CKS_ck_ahb_w                  ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):CK_AHB of 32bit */
N#define CSC_CKS2_TM00_CKS_ck_ahb_h0                 ((uint16_t)0x0001)      /*!< Bit Value =(0x1):CK_AHB of 16bit */
N#define CSC_CKS2_TM00_CKS_ck_ahb_b0                 ((uint8_t )0x01)        /*!< Bit Value =(0x1):CK_AHB of 8bit */
N
N///@}
N
N#endif  // _MG32x02z_CSC_H
N
N/*----------------------------------------------------------------------------*/
N/*                         End of file MG32x02z_CSC.h                         */
N/*----------------------------------------------------------------------------*/
L 30 ".\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132\MG32x02z_CSC_Init.h" 2
N#include "MG32x02z_MEM.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z_MEM.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_MEM.h
N *
N * @brief       MG32x02z MEM Register Definitions Header File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:41 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z_MEM_H
N#define _MG32x02z_MEM_H
N#define _MG32x02z_MEM_H_VER                         3.9     /*!< File Version */
N
N#if !(MG32x02z_H_VER == MG32x02z_MEM_H_VER)
S    #error "MG32x02z_MEM_H - Main/Module Version Mismatch !"
N#endif
N
N/**
N ******************************************************************************
N *
N * @struct      MEM_Struct
N *              MEM  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  FBUSYF        :1;     //[0] Flash memory access busy flag.
X            volatile const  uint8_t  FBUSYF        :1;     
N                                        //0 = Normal (Not busy)
N                                        //1 = Busy
N            __IO uint8_t  EOPF          :1;     //[1] Flash memory end of processing flag
X            volatile uint8_t  EOPF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __I  uint8_t                :1;     //[2] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  IAEF          :1;     //[4] Memory code execution illegal address error detection flag
X            volatile uint8_t  IAEF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  WPEF          :1;     //[5] Flash memory write protect error detection flag
X            volatile uint8_t  WPEF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  RPEF          :1;     //[6] Flash memory read protect error detection flag
X            volatile uint8_t  RPEF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[8] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[9] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :6;     //[15..10] 
X            volatile const  uint8_t                :6;     
N            __I  uint8_t  IAPSEF        :1;     //[16] IAP Flash memory size setting error flag.
X            volatile const  uint8_t  IAPSEF        :1;     
N                                        //0 = Normal (Not busy)
N                                        //1 = ERR (Size over maximum value error)
N            __I  uint8_t                :1;     //[17] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[18] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :5;     //[23..19] 
X            volatile const  uint8_t                :5;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }STA;                               /*!< STA        ~ Offset[0x00]  MEM status register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  IEA           :1;     //[0] Memory controller interrupt all enable
X            volatile uint8_t  IEA           :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  EOP_IE        :1;     //[1] Flash memory end of processing interrupt enable.
X            volatile uint8_t  EOP_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[2] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  IAE_IE        :1;     //[4] Memory code execution illegal address error detection interrupt enable.
X            volatile uint8_t  IAE_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  WPE_IE        :1;     //[5] Flash memory write protect error detection interrupt enable.
X            volatile uint8_t  WPE_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  RPE_IE        :1;     //[6] Flash memory read protect error detection interrupt enable.
X            volatile uint8_t  RPE_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[8] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[9] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :6;     //[15..10] 
X            volatile const  uint8_t                :6;     
N            __I  uint8_t                :3;     //[18..16] 
X            volatile const  uint8_t                :3;     
N            __I  uint8_t                :1;     //[19] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  IAE_RE        :1;     //[20] Memory code execution illegal address detection reset enable.
X            volatile uint8_t  IAE_RE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  WPE_RE        :1;     //[21] Flash memory write protect error detection reset enable.
X            volatile uint8_t  WPE_RE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  RPE_RE        :1;     //[22] Flash memory read protect error detection reset enable.
X            volatile uint8_t  RPE_RE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[23] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[24] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[25] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :6;     //[31..26] 
X            volatile const  uint8_t                :6;     
N        }MBIT;
N    }INT;                               /*!< INT        ~ Offset[0x04]  MEM interrupt enable register */
N
N    __I uint32_t  RESERVED0;            /*!< RESERVED0  ~ Offset[0x08]  Reserved */
X    volatile const uint32_t  RESERVED0;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint16_t KEY           :16;    //[15..0] Reset key register
X            volatile uint16_t KEY           :16;    
N                                        //0 = Unprotected
N                                        //1 = Protected
N            __IO uint16_t KEY2          :16;    //[31..16] Reset key register-2
X            volatile uint16_t KEY2          :16;    
N                                        //0 = Unprotected
N                                        //1 = Protected
N        }MBIT;
N    }KEY;                               /*!< KEY        ~ Offset[0x0C]  MEM write protected key register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  EN            :1;     //[0] Memory controller enable.
X            volatile uint8_t  EN            :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  HF_EN         :1;     //[1] Flash memory data access error HardFault enable
X            volatile uint8_t  HF_EN         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  HOLD          :1;     //[2] CPU hold control under flash memory access
X            volatile uint8_t  HOLD          :1;     
N                                        //0 = Hold
N                                        //1 = Normal
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  MDS           :4;     //[7..4] AP/IAP flash memory access mode select.
X            volatile uint8_t  MDS           :4;     
N                                        //0x0 = No (No Operation)
N                                        //0x1 = Write (Write AP/IAP/ISPD Flash)
N                                        //0x2 = Erase (Erase a page of AP/IAP/ISPD Flash)
N                                        //0x3 = Reserved
N            __I  uint8_t                :1;     //[8] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[9] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[10] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[11] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  FWAIT         :2;     //[13..12] Flash memory read access wait state selection
X            volatile uint8_t  FWAIT         :2;     
N                                        //0x0 = Zero : Zero wait state if  25 MHz > CK_AHB
N                                        //0x1 = One : One wait state if 50MHz >CK_AHB> 25 MHz
N                                        //0x3 = Two : Two wait state if 75MHz >CK_AHB> 50 MHz
N            __I  uint8_t                :2;     //[15..14] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  BOOT_MS       :2;     //[17..16] System reset memory select and memory is mapped at 0x0000 0000
X            volatile uint8_t  BOOT_MS       :2;     
N                                        //0x0 = Application Flash
N                                        //0x1 = Boot Flash
N                                        //0x2 = Embedded SRAM
N                                        //0x3 = Reserved
N            __I  uint8_t                :2;     //[19..18] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  HSP_EN        :1;     //[20] Flash memory read high speed mode enable during reset
X            volatile uint8_t  HSP_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  IAP_AEN       :1;     //[21] IAP memory size MEM_IAP_SIZE register access enable
X            volatile uint8_t  IAP_AEN       :1;     
N                                        //0 = Disable : Register access lock
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[23..22] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }CR0;                               /*!< CR0        ~ Offset[0x10]  MEM control register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  AP_WEN        :1;     //[0] Flash AP memory write enable.
X            volatile uint8_t  AP_WEN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  IAP_WEN       :1;     //[1] Flash IAP memory write enable.
X            volatile uint8_t  IAP_WEN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  ISPD_WEN      :1;     //[2] Flash ISP data memory write enable for ISP program
X            volatile uint8_t  ISPD_WEN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  ISPD_REN      :1;     //[3] Flash ISP data memory read enable for ISP program
X            volatile uint8_t  ISPD_REN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  IAP_EXEC      :1;     //[4] Flash IAP data memory code execution function enable.
X            volatile uint8_t  IAP_EXEC      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :3;     //[7..5] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  ISP_WEN       :1;     //[8] Flash ISP Boot memory write enable
X            volatile uint8_t  ISP_WEN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  ISP_REN       :1;     //[9] Flash ISP Boot memory read enable for AP program
X            volatile uint8_t  ISP_REN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[10] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  OB_WEN        :1;     //[11] Flash OB0 Option-Byte memory write enable
X            volatile uint8_t  OB_WEN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CR1;                               /*!< CR1        ~ Offset[0x14]  MEM control register 1 */
N
N    __I uint32_t  RESERVED1;            /*!< RESERVED1  ~ Offset[0x18]  Reserved */
X    volatile const uint32_t  RESERVED1;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  SKEY          :8;     //[7..0] MEM sequential key register for AP/IAP/ISPD flash
X            volatile uint8_t  SKEY          :8;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __IO uint16_t SKEY2         :16;    //[31..16] Reserved for internal using
X            volatile uint16_t SKEY2         :16;    
N        }MBIT;
N    }SKEY;                              /*!< SKEY       ~ Offset[0x1C]  MEM Flash memory protected key register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t FADR          :32;    //[31..0] Flash memory access address register
X            volatile uint32_t FADR          :32;    
N        }MBIT;
N    }FADR;                              /*!< FADR       ~ Offset[0x20]  MEM Flash memory address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t FDAT          :32;    //[31..0] Flash memory access data register.
X            volatile uint32_t FDAT          :32;    
N        }MBIT;
N    }FDAT;                              /*!< FDAT       ~ Offset[0x24]  MEM Flash memory data register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :8;     //[7..0] 
X            volatile const  uint8_t                :8;     
N            __IO uint8_t  IAP_SIZE      :8;     //[15..8] IAP memory size select
X            volatile uint8_t  IAP_SIZE      :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }IAPSZ;                             /*!< IAPSZ      ~ Offset[0x28]  MEM Flash memory IAP size register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  OB1_WEN       :1;     //[0] Flash OB1 Option-Byte memory write enable
X            volatile uint8_t  OB1_WEN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :7;     //[7..1] 
X            volatile const  uint8_t                :7;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }MCR;                               /*!< MCR        ~ Offset[0x2C]  MEM manufacturer control register */
N
N} MEM_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        MEM  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define MEM_Base                        ((uint32_t)0x4D000000)              /*!< Internal Memory Controller */
N#define MEM                             ((MEM_Struct*) MEM_Base)
N///@}
N
N/**
N ******************************************************************************
N *
N * @name        MEM  [Register Definitions]
N *
N ******************************************************************************
N */
N/**
N ******************************************************************************
N * @name        MEM_STA  [register's definitions]
N *              Offset[0x00]  MEM status register (0x4D000000)
N ******************************************************************************
N */
N///@{
N#define MEM_STA_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of MEM_STA */
N#define MEM_STA_IAPSEF_mask_w                       ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define MEM_STA_IAPSEF_mask_h1                      ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define MEM_STA_IAPSEF_mask_b2                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define MEM_STA_IAPSEF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define MEM_STA_IAPSEF_normal_h1                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define MEM_STA_IAPSEF_normal_b2                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define MEM_STA_IAPSEF_err_w                        ((uint32_t)0x00010000)  /*!< Bit Value =(1):ERR of 32bit */
N#define MEM_STA_IAPSEF_err_h1                       ((uint16_t)0x0001)      /*!< Bit Value =(1):ERR of 16bit */
N#define MEM_STA_IAPSEF_err_b2                       ((uint8_t )0x01)        /*!< Bit Value =(1):ERR of 8bit */
N
N#define MEM_STA_RPEF_mask_w                         ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define MEM_STA_RPEF_mask_h0                        ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define MEM_STA_RPEF_mask_b0                        ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define MEM_STA_RPEF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define MEM_STA_RPEF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define MEM_STA_RPEF_normal_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define MEM_STA_RPEF_happened_w                     ((uint32_t)0x00000040)  /*!< Bit Value =(1):Happened of 32bit */
N#define MEM_STA_RPEF_happened_h0                    ((uint16_t)0x0040)      /*!< Bit Value =(1):Happened of 16bit */
N#define MEM_STA_RPEF_happened_b0                    ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define MEM_STA_WPEF_mask_w                         ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define MEM_STA_WPEF_mask_h0                        ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define MEM_STA_WPEF_mask_b0                        ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define MEM_STA_WPEF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define MEM_STA_WPEF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define MEM_STA_WPEF_normal_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define MEM_STA_WPEF_happened_w                     ((uint32_t)0x00000020)  /*!< Bit Value =(1):Happened of 32bit */
N#define MEM_STA_WPEF_happened_h0                    ((uint16_t)0x0020)      /*!< Bit Value =(1):Happened of 16bit */
N#define MEM_STA_WPEF_happened_b0                    ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define MEM_STA_IAEF_mask_w                         ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define MEM_STA_IAEF_mask_h0                        ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define MEM_STA_IAEF_mask_b0                        ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define MEM_STA_IAEF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define MEM_STA_IAEF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define MEM_STA_IAEF_normal_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define MEM_STA_IAEF_happened_w                     ((uint32_t)0x00000010)  /*!< Bit Value =(1):Happened of 32bit */
N#define MEM_STA_IAEF_happened_h0                    ((uint16_t)0x0010)      /*!< Bit Value =(1):Happened of 16bit */
N#define MEM_STA_IAEF_happened_b0                    ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define MEM_STA_EOPF_mask_w                         ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define MEM_STA_EOPF_mask_h0                        ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define MEM_STA_EOPF_mask_b0                        ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define MEM_STA_EOPF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define MEM_STA_EOPF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define MEM_STA_EOPF_normal_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define MEM_STA_EOPF_happened_w                     ((uint32_t)0x00000002)  /*!< Bit Value =(1):Happened of 32bit */
N#define MEM_STA_EOPF_happened_h0                    ((uint16_t)0x0002)      /*!< Bit Value =(1):Happened of 16bit */
N#define MEM_STA_EOPF_happened_b0                    ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define MEM_STA_FBUSYF_mask_w                       ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define MEM_STA_FBUSYF_mask_h0                      ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define MEM_STA_FBUSYF_mask_b0                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define MEM_STA_FBUSYF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define MEM_STA_FBUSYF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define MEM_STA_FBUSYF_normal_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define MEM_STA_FBUSYF_busy_w                       ((uint32_t)0x00000001)  /*!< Bit Value =(1):Busy of 32bit */
N#define MEM_STA_FBUSYF_busy_h0                      ((uint16_t)0x0001)      /*!< Bit Value =(1):Busy of 16bit */
N#define MEM_STA_FBUSYF_busy_b0                      ((uint8_t )0x01)        /*!< Bit Value =(1):Busy of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        MEM_INT  [register's definitions]
N *              Offset[0x04]  MEM interrupt enable register (0x4D000004)
N ******************************************************************************
N */
N///@{
N#define MEM_INT_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of MEM_INT */
N#define MEM_INT_RPE_RE_mask_w                       ((uint32_t)0x00400000)  /*!< Bit Mask of 32bit */
N#define MEM_INT_RPE_RE_mask_h1                      ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define MEM_INT_RPE_RE_mask_b2                      ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define MEM_INT_RPE_RE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_INT_RPE_RE_disable_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_INT_RPE_RE_disable_b2                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_INT_RPE_RE_enable_w                     ((uint32_t)0x00400000)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_INT_RPE_RE_enable_h1                    ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_INT_RPE_RE_enable_b2                    ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_INT_WPE_RE_mask_w                       ((uint32_t)0x00200000)  /*!< Bit Mask of 32bit */
N#define MEM_INT_WPE_RE_mask_h1                      ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define MEM_INT_WPE_RE_mask_b2                      ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define MEM_INT_WPE_RE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_INT_WPE_RE_disable_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_INT_WPE_RE_disable_b2                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_INT_WPE_RE_enable_w                     ((uint32_t)0x00200000)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_INT_WPE_RE_enable_h1                    ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_INT_WPE_RE_enable_b2                    ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_INT_IAE_RE_mask_w                       ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define MEM_INT_IAE_RE_mask_h1                      ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define MEM_INT_IAE_RE_mask_b2                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define MEM_INT_IAE_RE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_INT_IAE_RE_disable_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_INT_IAE_RE_disable_b2                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_INT_IAE_RE_enable_w                     ((uint32_t)0x00100000)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_INT_IAE_RE_enable_h1                    ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_INT_IAE_RE_enable_b2                    ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_INT_RPE_IE_mask_w                       ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define MEM_INT_RPE_IE_mask_h0                      ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define MEM_INT_RPE_IE_mask_b0                      ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define MEM_INT_RPE_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_INT_RPE_IE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_INT_RPE_IE_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_INT_RPE_IE_enable_w                     ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_INT_RPE_IE_enable_h0                    ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_INT_RPE_IE_enable_b0                    ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_INT_WPE_IE_mask_w                       ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define MEM_INT_WPE_IE_mask_h0                      ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define MEM_INT_WPE_IE_mask_b0                      ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define MEM_INT_WPE_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_INT_WPE_IE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_INT_WPE_IE_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_INT_WPE_IE_enable_w                     ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_INT_WPE_IE_enable_h0                    ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_INT_WPE_IE_enable_b0                    ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_INT_IAE_IE_mask_w                       ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define MEM_INT_IAE_IE_mask_h0                      ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define MEM_INT_IAE_IE_mask_b0                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define MEM_INT_IAE_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_INT_IAE_IE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_INT_IAE_IE_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_INT_IAE_IE_enable_w                     ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_INT_IAE_IE_enable_h0                    ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_INT_IAE_IE_enable_b0                    ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_INT_EOP_IE_mask_w                       ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define MEM_INT_EOP_IE_mask_h0                      ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define MEM_INT_EOP_IE_mask_b0                      ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define MEM_INT_EOP_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_INT_EOP_IE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_INT_EOP_IE_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_INT_EOP_IE_enable_w                     ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_INT_EOP_IE_enable_h0                    ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_INT_EOP_IE_enable_b0                    ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_INT_IEA_mask_w                          ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define MEM_INT_IEA_mask_h0                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define MEM_INT_IEA_mask_b0                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define MEM_INT_IEA_disable_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_INT_IEA_disable_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_INT_IEA_disable_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_INT_IEA_enable_w                        ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_INT_IEA_enable_h0                       ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_INT_IEA_enable_b0                       ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        MEM_KEY  [register's definitions]
N *              Offset[0x0C]  MEM write protected key register (0x4D00000C)
N ******************************************************************************
N */
N///@{
N#define MEM_KEY_default                             ((uint32_t)0x00010001)  /*!< Reg Reset Default Value */
N
N/* Bit fields of MEM_KEY */
N#define MEM_KEY_KEY2_mask_w                         ((uint32_t)0xFFFF0000)  /*!< Bit Mask of 32bit */
N#define MEM_KEY_KEY2_mask_h1                        ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define MEM_KEY_KEY2_unprotected_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Unprotected of 32bit */
N#define MEM_KEY_KEY2_unprotected_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Unprotected of 16bit */
N#define MEM_KEY_KEY2_unprotected_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Unprotected of 8bit */
N#define MEM_KEY_KEY2_protected_w                    ((uint32_t)0x00010000)  /*!< Bit Value =(1):Protected of 32bit */
N#define MEM_KEY_KEY2_protected_h1                   ((uint16_t)0x0001)      /*!< Bit Value =(1):Protected of 16bit */
N#define MEM_KEY_KEY2_protected_b2                   ((uint8_t )0x01)        /*!< Bit Value =(1):Protected of 8bit */
N
N#define MEM_KEY_KEY_mask_w                          ((uint32_t)0x0000FFFF)  /*!< Bit Mask of 32bit */
N#define MEM_KEY_KEY_mask_h0                         ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define MEM_KEY_KEY_unprotected_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Unprotected of 32bit */
N#define MEM_KEY_KEY_unprotected_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Unprotected of 16bit */
N#define MEM_KEY_KEY_unprotected_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Unprotected of 8bit */
N#define MEM_KEY_KEY_protected_w                     ((uint32_t)0x00000001)  /*!< Bit Value =(1):Protected of 32bit */
N#define MEM_KEY_KEY_protected_h0                    ((uint16_t)0x0001)      /*!< Bit Value =(1):Protected of 16bit */
N#define MEM_KEY_KEY_protected_b0                    ((uint8_t )0x01)        /*!< Bit Value =(1):Protected of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        MEM_CR0  [register's definitions]
N *              Offset[0x10]  MEM control register 0 (0x4D000010)
N ******************************************************************************
N */
N///@{
N#define MEM_CR0_default                             ((uint32_t)0x00200002)  /*!< Reg Reset Default Value */
N
N/* Bit fields of MEM_CR0 */
N#define MEM_CR0_IAP_AEN_mask_w                      ((uint32_t)0x00200000)  /*!< Bit Mask of 32bit */
N#define MEM_CR0_IAP_AEN_mask_h1                     ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define MEM_CR0_IAP_AEN_mask_b2                     ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define MEM_CR0_IAP_AEN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_CR0_IAP_AEN_disable_h1                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_CR0_IAP_AEN_disable_b2                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_CR0_IAP_AEN_enable_w                    ((uint32_t)0x00200000)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_CR0_IAP_AEN_enable_h1                   ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_CR0_IAP_AEN_enable_b2                   ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_CR0_HSP_EN_mask_w                       ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define MEM_CR0_HSP_EN_mask_h1                      ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define MEM_CR0_HSP_EN_mask_b2                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define MEM_CR0_HSP_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_CR0_HSP_EN_disable_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_CR0_HSP_EN_disable_b2                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_CR0_HSP_EN_enable_w                     ((uint32_t)0x00100000)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_CR0_HSP_EN_enable_h1                    ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_CR0_HSP_EN_enable_b2                    ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_CR0_BOOT_MS_mask_w                      ((uint32_t)0x00030000)  /*!< Bit Mask of 32bit */
N#define MEM_CR0_BOOT_MS_mask_h1                     ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define MEM_CR0_BOOT_MS_mask_b2                     ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define MEM_CR0_BOOT_MS_application_flash_w         ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Application Flash of 32bit */
N#define MEM_CR0_BOOT_MS_application_flash_h1        ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Application Flash of 16bit */
N#define MEM_CR0_BOOT_MS_application_flash_b2        ((uint8_t )0x00)        /*!< Bit Value =(0x0):Application Flash of 8bit */
N#define MEM_CR0_BOOT_MS_boot_flash_w                ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):Boot Flash of 32bit */
N#define MEM_CR0_BOOT_MS_boot_flash_h1               ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Boot Flash of 16bit */
N#define MEM_CR0_BOOT_MS_boot_flash_b2               ((uint8_t )0x01)        /*!< Bit Value =(0x1):Boot Flash of 8bit */
N#define MEM_CR0_BOOT_MS_embedded_sram_w             ((uint32_t)0x00020000)  /*!< Bit Value =(0x2):Embedded SRAM of 32bit */
N#define MEM_CR0_BOOT_MS_embedded_sram_h1            ((uint16_t)0x0002)      /*!< Bit Value =(0x2):Embedded SRAM of 16bit */
N#define MEM_CR0_BOOT_MS_embedded_sram_b2            ((uint8_t )0x02)        /*!< Bit Value =(0x2):Embedded SRAM of 8bit */
N
N#define MEM_CR0_FWAIT_mask_w                        ((uint32_t)0x00003000)  /*!< Bit Mask of 32bit */
N#define MEM_CR0_FWAIT_mask_h0                       ((uint16_t)0x3000)      /*!< Bit Mask of 16bit */
N#define MEM_CR0_FWAIT_mask_b1                       ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define MEM_CR0_FWAIT_zero_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Zero of 32bit */
N#define MEM_CR0_FWAIT_zero_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Zero of 16bit */
N#define MEM_CR0_FWAIT_zero_b1                       ((uint8_t )0x00)        /*!< Bit Value =(0x0):Zero of 8bit */
N#define MEM_CR0_FWAIT_one_w                         ((uint32_t)0x00001000)  /*!< Bit Value =(0x1):One of 32bit */
N#define MEM_CR0_FWAIT_one_h0                        ((uint16_t)0x1000)      /*!< Bit Value =(0x1):One of 16bit */
N#define MEM_CR0_FWAIT_one_b1                        ((uint8_t )0x10)        /*!< Bit Value =(0x1):One of 8bit */
N#define MEM_CR0_FWAIT_two_w                         ((uint32_t)0x00003000)  /*!< Bit Value =(0x3):Two of 32bit */
N#define MEM_CR0_FWAIT_two_h0                        ((uint16_t)0x3000)      /*!< Bit Value =(0x3):Two of 16bit */
N#define MEM_CR0_FWAIT_two_b1                        ((uint8_t )0x30)        /*!< Bit Value =(0x3):Two of 8bit */
N
N#define MEM_CR0_MDS_mask_w                          ((uint32_t)0x000000F0)  /*!< Bit Mask of 32bit */
N#define MEM_CR0_MDS_mask_h0                         ((uint16_t)0x00F0)      /*!< Bit Mask of 16bit */
N#define MEM_CR0_MDS_mask_b0                         ((uint8_t )0xF0)        /*!< Bit Mask of 8bit */
N#define MEM_CR0_MDS_no_w                            ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):No of 32bit */
N#define MEM_CR0_MDS_no_h0                           ((uint16_t)0x0000)      /*!< Bit Value =(0x0):No of 16bit */
N#define MEM_CR0_MDS_no_b0                           ((uint8_t )0x00)        /*!< Bit Value =(0x0):No of 8bit */
N#define MEM_CR0_MDS_write_w                         ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):Write of 32bit */
N#define MEM_CR0_MDS_write_h0                        ((uint16_t)0x0010)      /*!< Bit Value =(0x1):Write of 16bit */
N#define MEM_CR0_MDS_write_b0                        ((uint8_t )0x10)        /*!< Bit Value =(0x1):Write of 8bit */
N#define MEM_CR0_MDS_erase_w                         ((uint32_t)0x00000020)  /*!< Bit Value =(0x2):Erase of 32bit */
N#define MEM_CR0_MDS_erase_h0                        ((uint16_t)0x0020)      /*!< Bit Value =(0x2):Erase of 16bit */
N#define MEM_CR0_MDS_erase_b0                        ((uint8_t )0x20)        /*!< Bit Value =(0x2):Erase of 8bit */
N
N#define MEM_CR0_HOLD_mask_w                         ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define MEM_CR0_HOLD_mask_h0                        ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define MEM_CR0_HOLD_mask_b0                        ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define MEM_CR0_HOLD_hold_w                         ((uint32_t)0x00000000)  /*!< Bit Value =(0):Hold of 32bit */
N#define MEM_CR0_HOLD_hold_h0                        ((uint16_t)0x0000)      /*!< Bit Value =(0):Hold of 16bit */
N#define MEM_CR0_HOLD_hold_b0                        ((uint8_t )0x00)        /*!< Bit Value =(0):Hold of 8bit */
N#define MEM_CR0_HOLD_normal_w                       ((uint32_t)0x00000004)  /*!< Bit Value =(1):Normal of 32bit */
N#define MEM_CR0_HOLD_normal_h0                      ((uint16_t)0x0004)      /*!< Bit Value =(1):Normal of 16bit */
N#define MEM_CR0_HOLD_normal_b0                      ((uint8_t )0x04)        /*!< Bit Value =(1):Normal of 8bit */
N
N#define MEM_CR0_HF_EN_mask_w                        ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define MEM_CR0_HF_EN_mask_h0                       ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define MEM_CR0_HF_EN_mask_b0                       ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define MEM_CR0_HF_EN_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_CR0_HF_EN_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_CR0_HF_EN_disable_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_CR0_HF_EN_enable_w                      ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_CR0_HF_EN_enable_h0                     ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_CR0_HF_EN_enable_b0                     ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_CR0_EN_mask_w                           ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define MEM_CR0_EN_mask_h0                          ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define MEM_CR0_EN_mask_b0                          ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define MEM_CR0_EN_disable_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_CR0_EN_disable_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_CR0_EN_disable_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_CR0_EN_enable_w                         ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_CR0_EN_enable_h0                        ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_CR0_EN_enable_b0                        ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        MEM_CR1  [register's definitions]
N *              Offset[0x14]  MEM control register 1 (0x4D000014)
N ******************************************************************************
N */
N///@{
N#define MEM_CR1_default                             ((uint32_t)0x00000010)  /*!< Reg Reset Default Value */
N
N/* Bit fields of MEM_CR1 */
N#define MEM_CR1_OB_WEN_mask_w                       ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define MEM_CR1_OB_WEN_mask_h0                      ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define MEM_CR1_OB_WEN_mask_b1                      ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define MEM_CR1_OB_WEN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_CR1_OB_WEN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_CR1_OB_WEN_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_CR1_OB_WEN_enable_w                     ((uint32_t)0x00000800)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_CR1_OB_WEN_enable_h0                    ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_CR1_OB_WEN_enable_b1                    ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_CR1_ISP_REN_mask_w                      ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define MEM_CR1_ISP_REN_mask_h0                     ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define MEM_CR1_ISP_REN_mask_b1                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define MEM_CR1_ISP_REN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_CR1_ISP_REN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_CR1_ISP_REN_disable_b1                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_CR1_ISP_REN_enable_w                    ((uint32_t)0x00000200)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_CR1_ISP_REN_enable_h0                   ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_CR1_ISP_REN_enable_b1                   ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_CR1_ISP_WEN_mask_w                      ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define MEM_CR1_ISP_WEN_mask_h0                     ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define MEM_CR1_ISP_WEN_mask_b1                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define MEM_CR1_ISP_WEN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_CR1_ISP_WEN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_CR1_ISP_WEN_disable_b1                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_CR1_ISP_WEN_enable_w                    ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_CR1_ISP_WEN_enable_h0                   ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_CR1_ISP_WEN_enable_b1                   ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_CR1_IAP_EXEC_mask_w                     ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define MEM_CR1_IAP_EXEC_mask_h0                    ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define MEM_CR1_IAP_EXEC_mask_b0                    ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define MEM_CR1_IAP_EXEC_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_CR1_IAP_EXEC_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_CR1_IAP_EXEC_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_CR1_IAP_EXEC_enable_w                   ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_CR1_IAP_EXEC_enable_h0                  ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_CR1_IAP_EXEC_enable_b0                  ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_CR1_ISPD_REN_mask_w                     ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define MEM_CR1_ISPD_REN_mask_h0                    ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define MEM_CR1_ISPD_REN_mask_b0                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define MEM_CR1_ISPD_REN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_CR1_ISPD_REN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_CR1_ISPD_REN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_CR1_ISPD_REN_enable_w                   ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_CR1_ISPD_REN_enable_h0                  ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_CR1_ISPD_REN_enable_b0                  ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_CR1_ISPD_WEN_mask_w                     ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define MEM_CR1_ISPD_WEN_mask_h0                    ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define MEM_CR1_ISPD_WEN_mask_b0                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define MEM_CR1_ISPD_WEN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_CR1_ISPD_WEN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_CR1_ISPD_WEN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_CR1_ISPD_WEN_enable_w                   ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_CR1_ISPD_WEN_enable_h0                  ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_CR1_ISPD_WEN_enable_b0                  ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_CR1_IAP_WEN_mask_w                      ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define MEM_CR1_IAP_WEN_mask_h0                     ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define MEM_CR1_IAP_WEN_mask_b0                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define MEM_CR1_IAP_WEN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_CR1_IAP_WEN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_CR1_IAP_WEN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_CR1_IAP_WEN_enable_w                    ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_CR1_IAP_WEN_enable_h0                   ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_CR1_IAP_WEN_enable_b0                   ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define MEM_CR1_AP_WEN_mask_w                       ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define MEM_CR1_AP_WEN_mask_h0                      ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define MEM_CR1_AP_WEN_mask_b0                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define MEM_CR1_AP_WEN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_CR1_AP_WEN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_CR1_AP_WEN_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_CR1_AP_WEN_enable_w                     ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_CR1_AP_WEN_enable_h0                    ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_CR1_AP_WEN_enable_b0                    ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        MEM_SKEY  [register's definitions]
N *              Offset[0x1C]  MEM Flash memory protected key register (0x4D00001C)
N ******************************************************************************
N */
N///@{
N#define MEM_SKEY_default                            ((uint32_t)0x00000007)  /*!< Reg Reset Default Value */
N
N/* Bit fields of MEM_SKEY */
N#define MEM_SKEY_SKEY2_mask_w                       ((uint32_t)0xFFFF0000)  /*!< Bit Mask of 32bit */
N#define MEM_SKEY_SKEY2_mask_h1                      ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define MEM_SKEY_SKEY2_shift_w                      (16)                    /*!< Bit Shift of 32bit */
N#define MEM_SKEY_SKEY2_shift_h1                     (0)                     /*!< Bit Shift of 16bit */
N#define MEM_SKEY_SKEY2_shift_b2                     (0)                     /*!< Bit Shift of 8bit */
N
N#define MEM_SKEY_SKEY_mask_w                        ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define MEM_SKEY_SKEY_mask_h0                       ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define MEM_SKEY_SKEY_mask_b0                       ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define MEM_SKEY_SKEY_shift_w                       (0)                     /*!< Bit Shift of 32bit */
N#define MEM_SKEY_SKEY_shift_h0                      (0)                     /*!< Bit Shift of 16bit */
N#define MEM_SKEY_SKEY_shift_b0                      (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        MEM_FADR  [register's definitions]
N *              Offset[0x20]  MEM Flash memory address register (0x4D000020)
N ******************************************************************************
N */
N///@{
N#define MEM_FADR_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of MEM_FADR */
N#define MEM_FADR_FADR_mask_w                        ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define MEM_FADR_FADR_shift_w                       (0)                     /*!< Bit Shift of 32bit */
N#define MEM_FADR_FADR_shift_h0                      (0)                     /*!< Bit Shift of 16bit */
N#define MEM_FADR_FADR_shift_b0                      (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        MEM_FDAT  [register's definitions]
N *              Offset[0x24]  MEM Flash memory data register (0x4D000024)
N ******************************************************************************
N */
N///@{
N#define MEM_FDAT_default                            ((uint32_t)0xFFFFFFFF)  /*!< Reg Reset Default Value */
N
N/* Bit fields of MEM_FDAT */
N#define MEM_FDAT_FDAT_mask_w                        ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define MEM_FDAT_FDAT_shift_w                       (0)                     /*!< Bit Shift of 32bit */
N#define MEM_FDAT_FDAT_shift_h0                      (0)                     /*!< Bit Shift of 16bit */
N#define MEM_FDAT_FDAT_shift_b0                      (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        MEM_IAPSZ  [register's definitions]
N *              Offset[0x28]  MEM Flash memory IAP size register (0x4D000028)
N ******************************************************************************
N */
N///@{
N#define MEM_IAPSZ_default                           ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of MEM_IAPSZ */
N#define MEM_IAPSZ_IAP_SIZE_mask_w                   ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define MEM_IAPSZ_IAP_SIZE_mask_h0                  ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define MEM_IAPSZ_IAP_SIZE_mask_b1                  ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        MEM_MCR  [register's definitions]
N *              Offset[0x2C]  MEM manufacturer control register (0x4D00002C)
N ******************************************************************************
N */
N///@{
N#define MEM_MCR_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of MEM_MCR */
N#define MEM_MCR_OB1_WEN_mask_w                      ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define MEM_MCR_OB1_WEN_mask_h0                     ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define MEM_MCR_OB1_WEN_mask_b0                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define MEM_MCR_OB1_WEN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define MEM_MCR_OB1_WEN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define MEM_MCR_OB1_WEN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define MEM_MCR_OB1_WEN_enable_w                    ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define MEM_MCR_OB1_WEN_enable_h0                   ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define MEM_MCR_OB1_WEN_enable_b0                   ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N
N#endif  // _MG32x02z_MEM_H
N
N/*----------------------------------------------------------------------------*/
N/*                         End of file MG32x02z_MEM.h                         */
N/*----------------------------------------------------------------------------*/
L 31 ".\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132\MG32x02z_CSC_Init.h" 2
N#include "MG32x02z_GPIO.H"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z_GPIO.H" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_GPIO.h
N *
N * @brief       MG32x02z GPIO Register Definitions Header File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:41 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z_GPIO_H
N#define _MG32x02z_GPIO_H
N#define _MG32x02z_GPIO_H_VER                        3.9     /*!< File Version */
N
N#if !(MG32x02z_H_VER == MG32x02z_GPIO_H_VER)
S    #error "MG32x02z_GPIO_H - Main/Module Version Mismatch !"
N#endif
N
N/**
N ******************************************************************************
N *
N *              GPIO  [Module Structure Typedef]
N *
N ******************************************************************************
N */
N/**
N ******************************************************************************
N *
N * @struct      GPIO_Struct
N *              GPIO Input/Output Register Control Definitions  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  OUT0          :1;     //[0] IO pin PX0 output data bit.
X            volatile uint8_t  OUT0          :1;     
N            __IO uint8_t  OUT1          :1;     //[1] IO pin PX1 output data bit.
X            volatile uint8_t  OUT1          :1;     
N            __IO uint8_t  OUT2          :1;     //[2] IO pin PX2 output data bit.
X            volatile uint8_t  OUT2          :1;     
N            __IO uint8_t  OUT3          :1;     //[3] IO pin PX3 output data bit.
X            volatile uint8_t  OUT3          :1;     
N            __IO uint8_t  OUT4          :1;     //[4] IO pin PX4 output data bit.
X            volatile uint8_t  OUT4          :1;     
N            __IO uint8_t  OUT5          :1;     //[5] IO pin PX5 output data bit.
X            volatile uint8_t  OUT5          :1;     
N            __IO uint8_t  OUT6          :1;     //[6] IO pin PX6 output data bit.
X            volatile uint8_t  OUT6          :1;     
N            __IO uint8_t  OUT7          :1;     //[7] IO pin PX7 output data bit.
X            volatile uint8_t  OUT7          :1;     
N            __IO uint8_t  OUT8          :1;     //[8] IO pin PX8 output data bit.
X            volatile uint8_t  OUT8          :1;     
N            __IO uint8_t  OUT9          :1;     //[9] IO pin PX9 output data bit.
X            volatile uint8_t  OUT9          :1;     
N            __IO uint8_t  OUT10         :1;     //[10] IO pin PX10 output data bit.
X            volatile uint8_t  OUT10         :1;     
N            __IO uint8_t  OUT11         :1;     //[11] IO pin PX11 output data bit.
X            volatile uint8_t  OUT11         :1;     
N            __IO uint8_t  OUT12         :1;     //[12] IO pin PX12 output data bit.
X            volatile uint8_t  OUT12         :1;     
N            __IO uint8_t  OUT13         :1;     //[13] IO pin PX13 output data bit.
X            volatile uint8_t  OUT13         :1;     
N            __IO uint8_t  OUT14         :1;     //[14] IO pin PX14 output data bit.
X            volatile uint8_t  OUT14         :1;     
N            __IO uint8_t  OUT15         :1;     //[15] IO pin PX15 output data bit.
X            volatile uint8_t  OUT15         :1;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }OUT;                               /*!< OUT        ~ Offset[0x00]  PX output data register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  IN0           :1;     //[0] IO pin PX0 input pin status.
X            volatile const  uint8_t  IN0           :1;     
N            __I  uint8_t  IN1           :1;     //[1] IO pin PX1 input pin status.
X            volatile const  uint8_t  IN1           :1;     
N            __I  uint8_t  IN2           :1;     //[2] IO pin PX2 input pin status.
X            volatile const  uint8_t  IN2           :1;     
N            __I  uint8_t  IN3           :1;     //[3] IO pin PX3 input pin status.
X            volatile const  uint8_t  IN3           :1;     
N            __I  uint8_t  IN4           :1;     //[4] IO pin PX4 input pin status.
X            volatile const  uint8_t  IN4           :1;     
N            __I  uint8_t  IN5           :1;     //[5] IO pin PX5 input pin status.
X            volatile const  uint8_t  IN5           :1;     
N            __I  uint8_t  IN6           :1;     //[6] IO pin PX6 input pin status.
X            volatile const  uint8_t  IN6           :1;     
N            __I  uint8_t  IN7           :1;     //[7] IO pin PX7 input pin status.
X            volatile const  uint8_t  IN7           :1;     
N            __I  uint8_t  IN8           :1;     //[8] IO pin PX8 input pin status.
X            volatile const  uint8_t  IN8           :1;     
N            __I  uint8_t  IN9           :1;     //[9] IO pin PX9 input pin status.
X            volatile const  uint8_t  IN9           :1;     
N            __I  uint8_t  IN10          :1;     //[10] IO pin PX10 input pin status.
X            volatile const  uint8_t  IN10          :1;     
N            __I  uint8_t  IN11          :1;     //[11] IO pin PX11 input pin status.
X            volatile const  uint8_t  IN11          :1;     
N            __I  uint8_t  IN12          :1;     //[12] IO pin PX12 input pin status.
X            volatile const  uint8_t  IN12          :1;     
N            __I  uint8_t  IN13          :1;     //[13] IO pin PX13 input pin status.
X            volatile const  uint8_t  IN13          :1;     
N            __I  uint8_t  IN14          :1;     //[14] IO pin PX14 input pin status.
X            volatile const  uint8_t  IN14          :1;     
N            __I  uint8_t  IN15          :1;     //[15] IO pin PX15 input pin status.
X            volatile const  uint8_t  IN15          :1;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }IN;                                /*!< IN         ~ Offset[0x04]  PX input data register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __O  uint8_t  SET0          :1;     //[0] IO pin PX0 set data bit
X            volatile  uint8_t  SET0          :1;     
N            __O  uint8_t  SET1          :1;     //[1] IO pin PX1 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET1          :1;     
N            __O  uint8_t  SET2          :1;     //[2] IO pin PX2 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET2          :1;     
N            __O  uint8_t  SET3          :1;     //[3] IO pin PX3 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET3          :1;     
N            __O  uint8_t  SET4          :1;     //[4] IO pin PX4 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET4          :1;     
N            __O  uint8_t  SET5          :1;     //[5] IO pin PX5 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET5          :1;     
N            __O  uint8_t  SET6          :1;     //[6] IO pin PX6 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET6          :1;     
N            __O  uint8_t  SET7          :1;     //[7] IO pin PX7 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET7          :1;     
N            __O  uint8_t  SET8          :1;     //[8] IO pin PX8 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET8          :1;     
N            __O  uint8_t  SET9          :1;     //[9] IO pin PX9 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET9          :1;     
N            __O  uint8_t  SET10         :1;     //[10] IO pin PX10 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET10         :1;     
N            __O  uint8_t  SET11         :1;     //[11] IO pin PX11 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET11         :1;     
N            __O  uint8_t  SET12         :1;     //[12] IO pin PX12 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET12         :1;     
N            __O  uint8_t  SET13         :1;     //[13] IO pin PX13 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET13         :1;     
N            __O  uint8_t  SET14         :1;     //[14] IO pin PX14 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET14         :1;     
N            __O  uint8_t  SET15         :1;     //[15] IO pin PX15 set data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  SET15         :1;     
N            __O  uint8_t  CLR0          :1;     //[16] IO pin PX0 clear data bit
X            volatile  uint8_t  CLR0          :1;     
N            __O  uint8_t  CLR1          :1;     //[17] IO pin PX1 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR1          :1;     
N            __O  uint8_t  CLR2          :1;     //[18] IO pin PX2 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR2          :1;     
N            __O  uint8_t  CLR3          :1;     //[19] IO pin PX3 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR3          :1;     
N            __O  uint8_t  CLR4          :1;     //[20] IO pin PX4 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR4          :1;     
N            __O  uint8_t  CLR5          :1;     //[21] IO pin PX5 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR5          :1;     
N            __O  uint8_t  CLR6          :1;     //[22] IO pin PX6 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR6          :1;     
N            __O  uint8_t  CLR7          :1;     //[23] IO pin PX7 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR7          :1;     
N            __O  uint8_t  CLR8          :1;     //[24] IO pin PX8 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR8          :1;     
N            __O  uint8_t  CLR9          :1;     //[25] IO pin PX9 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR9          :1;     
N            __O  uint8_t  CLR10         :1;     //[26] IO pin PX10 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR10         :1;     
N            __O  uint8_t  CLR11         :1;     //[27] IO pin PX11 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR11         :1;     
N            __O  uint8_t  CLR12         :1;     //[28] IO pin PX12 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR12         :1;     
N            __O  uint8_t  CLR13         :1;     //[29] IO pin PX13 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR13         :1;     
N            __O  uint8_t  CLR14         :1;     //[30] IO pin PX14 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR14         :1;     
N            __O  uint8_t  CLR15         :1;     //[31] IO pin PX15 clear data bit. This bit is no effect for writing 0.
X            volatile  uint8_t  CLR15         :1;     
N        }MBIT;
N    }SC;                                /*!< SC         ~ Offset[0x08]  PX port set / clear register */
N
N    __I uint32_t  RESERVED0;            /*!< Offset[0x0C]       Reserved */
X    volatile const uint32_t  RESERVED0;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  SC0           :1;     //[0] GPIO Port set or clear bit for PX0.
X            volatile uint8_t  SC0           :1;     
N            __I  uint8_t                :7;     //[7..1] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  SC1           :1;     //[8] GPIO Port set or clear bit for PX1.
X            volatile uint8_t  SC1           :1;     
N            __I  uint8_t                :7;     //[15..9] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  SC2           :1;     //[16] GPIO Port set or clear bit for PX2.
X            volatile uint8_t  SC2           :1;     
N            __I  uint8_t                :7;     //[23..17] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  SC3           :1;     //[24] GPIO Port set or clear bit for PX3.
X            volatile uint8_t  SC3           :1;     
N            __I  uint8_t                :7;     //[31..25] 
X            volatile const  uint8_t                :7;     
N        }MBIT;
N    }SCR0;                              /*!< SCR0       ~ Offset[0x10]  PX port set and clear register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  SC4           :1;     //[0] GPIO Port set or clear bit for PX4.
X            volatile uint8_t  SC4           :1;     
N            __I  uint8_t                :7;     //[7..1] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  SC5           :1;     //[8] GPIO Port set or clear bit for PX5.
X            volatile uint8_t  SC5           :1;     
N            __I  uint8_t                :7;     //[15..9] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  SC6           :1;     //[16] GPIO Port set or clear bit for PX6.
X            volatile uint8_t  SC6           :1;     
N            __I  uint8_t                :7;     //[23..17] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  SC7           :1;     //[24] GPIO Port set or clear bit for PX7.
X            volatile uint8_t  SC7           :1;     
N            __I  uint8_t                :7;     //[31..25] 
X            volatile const  uint8_t                :7;     
N        }MBIT;
N    }SCR1;                              /*!< SCR1       ~ Offset[0x14]  PX port set and clear register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  SC8           :1;     //[0] GPIO Port set or clear bit for PX8.
X            volatile uint8_t  SC8           :1;     
N            __I  uint8_t                :7;     //[7..1] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  SC9           :1;     //[8] GPIO Port set or clear bit for PX9.
X            volatile uint8_t  SC9           :1;     
N            __I  uint8_t                :7;     //[15..9] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  SC10          :1;     //[16] GPIO Port set or clear bit for PX10.
X            volatile uint8_t  SC10          :1;     
N            __I  uint8_t                :7;     //[23..17] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  SC11          :1;     //[24] GPIO Port set and clear bit for PX11.
X            volatile uint8_t  SC11          :1;     
N            __I  uint8_t                :7;     //[31..25] 
X            volatile const  uint8_t                :7;     
N        }MBIT;
N    }SCR2;                              /*!< SCR2       ~ Offset[0x18]  PX port set and clear register 2 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  SC12          :1;     //[0] GPIO Port set or clear bit for PX12.
X            volatile uint8_t  SC12          :1;     
N            __I  uint8_t                :7;     //[7..1] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  SC13          :1;     //[8] GPIO Port set or clear bit for PX13.
X            volatile uint8_t  SC13          :1;     
N            __I  uint8_t                :7;     //[15..9] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  SC14          :1;     //[16] GPIO Port set or clear bit for PX14.
X            volatile uint8_t  SC14          :1;     
N            __I  uint8_t                :7;     //[23..17] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  SC15          :1;     //[24] GPIO Port set or clear bit for PX15.
X            volatile uint8_t  SC15          :1;     
N            __I  uint8_t                :7;     //[31..25] 
X            volatile const  uint8_t                :7;     
N        }MBIT;
N    }SCR3;                              /*!< SCR3       ~ Offset[0x1C]  PX port set and clear register 3 */
N
N} GPIO_Struct;
N
N/**
N ******************************************************************************
N *
N * @struct      IOM_Struct
N *              Port IO Mode/AFS Register Control Definitions  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR0;                              /*!< CR0        ~ Offset[0x00]  PX0 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR1;                              /*!< CR1        ~ Offset[0x04]  PX1 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR2;                              /*!< CR2        ~ Offset[0x08]  PX2 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR3;                              /*!< CR3        ~ Offset[0x0C]  PX3 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR4;                              /*!< CR4        ~ Offset[0x10]  PX4 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR5;                              /*!< CR5        ~ Offset[0x14]  PX5 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR6;                              /*!< CR6        ~ Offset[0x18]  PX6 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR7;                              /*!< CR7        ~ Offset[0x1C]  PX7 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR8;                              /*!< CR8        ~ Offset[0x20]  PX8 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR9;                              /*!< CR9        ~ Offset[0x24]  PX9 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR10;                             /*!< CR10       ~ Offset[0x28]  PX10 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR11;                             /*!< CR11       ~ Offset[0x2C]  PX11 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR12;                             /*!< CR12       ~ Offset[0x30]  PX12 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR13;                             /*!< CR13       ~ Offset[0x34]  PX13 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR14;                             /*!< CR14       ~ Offset[0x38]  PX14 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N    } CR15;                             /*!< CR15       ~ Offset[0x3C]  PX15 IO control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  FCKS          :3;     //[2..0] PX port input deglitch filter clock source select for all pins of the port.
X            volatile uint8_t  FCKS          :3;     
N                                        //0x0 = CLK_AHB
N                                        //0x1 = CLK_AHB_Div8 : CLK_AHB divide by 8
N                                        //0x2 = CLK_ILRCO
N                                        //0x3 = TM00_TRGO
N                                        //0x4 = CK_UT
N            __I  uint8_t                :3;     //[5..3] 
X            volatile const  uint8_t                :3;     
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }FLT;                               /*!< FLT        ~ Offset[0x40]  PX port input filter control register */
N
N} IOM_Struct;
N
N/**
N ******************************************************************************
N *
N * @struct      Pin_Struct
N *              Pin IO Mode/AFS Register Control Definitions  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  IOM           :3;     //[2..0] PX0 pin IO mode control bits.
X            volatile uint8_t  IOM           :3;     
N                                        //0x0 = AIO : analog IO
N                                        //0x1 = ODO : open drain output
N                                        //0x2 = PPO : push pull output
N                                        //0x3 = DIN : Digital input
N                                        //0x4 = QB : Quasi-Bidirectional output drive high one CLK
N            __IO uint8_t  HS            :1;     //[3] PX0 pin output high speed mode enable bit.
X            volatile uint8_t  HS            :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[4] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  PU            :1;     //[5] PX0 pin pull-up resister enable bit.
X            volatile uint8_t  PU            :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[6] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  INV           :1;     //[7] PX0 pin input inverse enable bit.
X            volatile uint8_t  INV           :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __IO uint8_t  ODC           :2;     //[9..8] PX0 pin output drive strength select.
X            volatile uint8_t  ODC           :2;     
N                                        //0x0 = Level0 : Drive strength-full
N                                        //0x1 = Level1 : Drive strength-1/2 (no function)
N                                        //0x2 = Level2 : Drive strength-1/4
N                                        //0x3 = Level3 : Drive strength-1/8 (no function)
N            __IO uint8_t  FDIV          :2;     //[11..10] PX0 pin input deglitch filter clock divider select.
X            volatile uint8_t  FDIV          :2;     
N                                        //0x0 = Bypass : Bypass filter
N                                        //0x1 = Div1 : Divided by 1
N                                        //0x2 = Div4 : Divided by 4
N                                        //0x3 = Div16 : Divided by 16
N            __IO uint8_t  AFS           :4;     //[15..12] PX0 pin alternate function select. Refer the GPIO AFS table for detail information.
X            volatile uint8_t  AFS           :4;     
N                                        //0x0 = AF0 : GPA0
N                                        //0x1 = AF1 : Reserved
N                                        //0x2 = AF2 : Reserved
N                                        //0x3 = AF3 : Reserved
N                                        //0x4 = AF4 : Reserved
N                                        //0x5 = AF5 : Reserved
N                                        //0x6 = AF6 : Reserved
N                                        //0x7 = AF7 : Reserved
N                                        //0x8 = AF8 : MA0
N                                        //0x9 = AF9 : Reserved
N            __I  uint16_t               :15;    //[30..16] 
X            volatile const  uint16_t               :15;    
N            __IO uint8_t  LCK           :1;     //[31] PX0 pin control register write un-locked control
X            volatile uint8_t  LCK           :1;     
N                                        //0 = Locked
N                                        //1 = Un-Locked
N        }MBIT;
N    }CR;                                /*!< CR         PXn IO control register (X={A,B,C,D,..},n={0~15}) */
N
N} Pin_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        GPIO  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define GPIOA_Base                      ((uint32_t)0x41000000)              /*!< GPIO Input/Output Register Control Definitions */
N#define GPIOB_Base                      ((uint32_t)0x41000020)              /*!< GPIO Input/Output Register Control Definitions */
N#define GPIOC_Base                      ((uint32_t)0x41000040)              /*!< GPIO Input/Output Register Control Definitions */
N#define GPIOD_Base                      ((uint32_t)0x41000060)              /*!< GPIO Input/Output Register Control Definitions */
N#define GPIOE_Base                      ((uint32_t)0x41000080)              /*!< GPIO Input/Output Register Control Definitions */
N#define GPIOA                           ((GPIO_Struct*) GPIOA_Base)
N#define GPIOB                           ((GPIO_Struct*) GPIOB_Base)
N#define GPIOC                           ((GPIO_Struct*) GPIOC_Base)
N#define GPIOD                           ((GPIO_Struct*) GPIOD_Base)
N#define GPIOE                           ((GPIO_Struct*) GPIOE_Base)
N
N#define IOMA_Base                       ((uint32_t)0x44000000)              /*!< Port IO Mode/AFS Register Control Definitions */
N#define IOMB_Base                       ((uint32_t)0x44010000)              /*!< Port IO Mode/AFS Register Control Definitions */
N#define IOMC_Base                       ((uint32_t)0x44020000)              /*!< Port IO Mode/AFS Register Control Definitions */
N#define IOMD_Base                       ((uint32_t)0x44030000)              /*!< Port IO Mode/AFS Register Control Definitions */
N#define IOME_Base                       ((uint32_t)0x44040000)              /*!< Port IO Mode/AFS Register Control Definitions */
N#define IOMA                            ((IOM_Struct*) IOMA_Base)
N#define IOMB                            ((IOM_Struct*) IOMB_Base)
N#define IOMC                            ((IOM_Struct*) IOMC_Base)
N#define IOMD                            ((IOM_Struct*) IOMD_Base)
N#define IOME                            ((IOM_Struct*) IOME_Base)
N#define PINA(PinNum)                    ((Pin_Struct*)((uint32_t) (IOMA_Base + (0x4*PinNum))))
N#define PINB(PinNum)                    ((Pin_Struct*)((uint32_t) (IOMB_Base + (0x4*PinNum))))
N#define PINC(PinNum)                    ((Pin_Struct*)((uint32_t) (IOMC_Base + (0x4*PinNum))))
N#define PIND(PinNum)                    ((Pin_Struct*)((uint32_t) (IOMD_Base + (0x4*PinNum))))
N#define PINE(PinNum)                    ((Pin_Struct*)((uint32_t) (IOME_Base + (0x4*PinNum))))
N///@}
N
N/**
N ******************************************************************************
N *
N * @name          [Register Definitions]
N *
N ******************************************************************************
N */
N
N/*----------------------------------------------------------------------------*/
N/* @module      IOP (GPIO Input/Output Register Control Definitions)          */
N/*----------------------------------------------------------------------------*/
N/**
N ******************************************************************************
N * @name        PX_OUT  [register's definitions]
N *              Offset[0x00]  PX output data register (0x41000000)
N ******************************************************************************
N */
N///@{
N#define PX_OUT_default                              ((uint32_t)0xFFFFFFFF)  /*!< Reg Reset Default Value */
N
N/* Bit fields of PX_OUT */
N#define PX_OUT_OUT15_mask_w                         ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT15_mask_h0                        ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT15_mask_b1                        ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT14_mask_w                         ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT14_mask_h0                        ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT14_mask_b1                        ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT13_mask_w                         ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT13_mask_h0                        ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT13_mask_b1                        ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT12_mask_w                         ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT12_mask_h0                        ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT12_mask_b1                        ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT11_mask_w                         ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT11_mask_h0                        ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT11_mask_b1                        ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT10_mask_w                         ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT10_mask_h0                        ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT10_mask_b1                        ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT9_mask_w                          ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT9_mask_h0                         ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT9_mask_b1                         ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT8_mask_w                          ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT8_mask_h0                         ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT8_mask_b1                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT7_mask_w                          ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT7_mask_h0                         ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT7_mask_b0                         ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT6_mask_w                          ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT6_mask_h0                         ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT6_mask_b0                         ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT5_mask_w                          ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT5_mask_h0                         ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT5_mask_b0                         ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT4_mask_w                          ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT4_mask_h0                         ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT4_mask_b0                         ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT3_mask_w                          ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT3_mask_h0                         ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT3_mask_b0                         ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT2_mask_w                          ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT2_mask_h0                         ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT2_mask_b0                         ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT1_mask_w                          ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT1_mask_h0                         ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT1_mask_b0                         ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N
N#define PX_OUT_OUT0_mask_w                          ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define PX_OUT_OUT0_mask_h0                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define PX_OUT_OUT0_mask_b0                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        PX_IN  [register's definitions]
N *              Offset[0x04]  PX input data register (0x41000004)
N ******************************************************************************
N */
N///@{
N#define PX_IN_default                               ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of PX_IN */
N#define PX_IN_IN15_mask_w                           ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN15_mask_h0                          ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN15_mask_b1                          ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN14_mask_w                           ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN14_mask_h0                          ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN14_mask_b1                          ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN13_mask_w                           ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN13_mask_h0                          ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN13_mask_b1                          ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN12_mask_w                           ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN12_mask_h0                          ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN12_mask_b1                          ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN11_mask_w                           ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN11_mask_h0                          ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN11_mask_b1                          ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN10_mask_w                           ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN10_mask_h0                          ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN10_mask_b1                          ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN9_mask_w                            ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN9_mask_h0                           ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN9_mask_b1                           ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN8_mask_w                            ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN8_mask_h0                           ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN8_mask_b1                           ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN7_mask_w                            ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN7_mask_h0                           ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN7_mask_b0                           ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN6_mask_w                            ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN6_mask_h0                           ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN6_mask_b0                           ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN5_mask_w                            ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN5_mask_h0                           ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN5_mask_b0                           ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN4_mask_w                            ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN4_mask_h0                           ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN4_mask_b0                           ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN3_mask_w                            ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN3_mask_h0                           ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN3_mask_b0                           ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN2_mask_w                            ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN2_mask_h0                           ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN2_mask_b0                           ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN1_mask_w                            ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN1_mask_h0                           ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN1_mask_b0                           ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N
N#define PX_IN_IN0_mask_w                            ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define PX_IN_IN0_mask_h0                           ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define PX_IN_IN0_mask_b0                           ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        PX_SC  [register's definitions]
N *              Offset[0x08]  PX port set / clear register (0x41000008)
N ******************************************************************************
N */
N///@{
N#define PX_SC_default                               ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of PX_SC */
N#define PX_SC_CLR15_mask_w                          ((uint32_t)0x80000000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR15_mask_h1                         ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR15_mask_b3                         ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR14_mask_w                          ((uint32_t)0x40000000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR14_mask_h1                         ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR14_mask_b3                         ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR13_mask_w                          ((uint32_t)0x20000000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR13_mask_h1                         ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR13_mask_b3                         ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR12_mask_w                          ((uint32_t)0x10000000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR12_mask_h1                         ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR12_mask_b3                         ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR11_mask_w                          ((uint32_t)0x08000000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR11_mask_h1                         ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR11_mask_b3                         ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR10_mask_w                          ((uint32_t)0x04000000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR10_mask_h1                         ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR10_mask_b3                         ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR9_mask_w                           ((uint32_t)0x02000000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR9_mask_h1                          ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR9_mask_b3                          ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR8_mask_w                           ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR8_mask_h1                          ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR8_mask_b3                          ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR7_mask_w                           ((uint32_t)0x00800000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR7_mask_h1                          ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR7_mask_b2                          ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR6_mask_w                           ((uint32_t)0x00400000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR6_mask_h1                          ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR6_mask_b2                          ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR5_mask_w                           ((uint32_t)0x00200000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR5_mask_h1                          ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR5_mask_b2                          ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR4_mask_w                           ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR4_mask_h1                          ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR4_mask_b2                          ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR3_mask_w                           ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR3_mask_h1                          ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR3_mask_b2                          ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR2_mask_w                           ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR2_mask_h1                          ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR2_mask_b2                          ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR1_mask_w                           ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR1_mask_h1                          ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR1_mask_b2                          ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_CLR0_mask_w                           ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define PX_SC_CLR0_mask_h1                          ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define PX_SC_CLR0_mask_b2                          ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET15_mask_w                          ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET15_mask_h0                         ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET15_mask_b1                         ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET14_mask_w                          ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET14_mask_h0                         ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET14_mask_b1                         ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET13_mask_w                          ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET13_mask_h0                         ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET13_mask_b1                         ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET12_mask_w                          ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET12_mask_h0                         ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET12_mask_b1                         ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET11_mask_w                          ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET11_mask_h0                         ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET11_mask_b1                         ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET10_mask_w                          ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET10_mask_h0                         ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET10_mask_b1                         ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET9_mask_w                           ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET9_mask_h0                          ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET9_mask_b1                          ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET8_mask_w                           ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET8_mask_h0                          ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET8_mask_b1                          ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET7_mask_w                           ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET7_mask_h0                          ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET7_mask_b0                          ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET6_mask_w                           ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET6_mask_h0                          ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET6_mask_b0                          ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET5_mask_w                           ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET5_mask_h0                          ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET5_mask_b0                          ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET4_mask_w                           ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET4_mask_h0                          ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET4_mask_b0                          ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET3_mask_w                           ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET3_mask_h0                          ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET3_mask_b0                          ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET2_mask_w                           ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET2_mask_h0                          ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET2_mask_b0                          ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET1_mask_w                           ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET1_mask_h0                          ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET1_mask_b0                          ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N
N#define PX_SC_SET0_mask_w                           ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define PX_SC_SET0_mask_h0                          ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define PX_SC_SET0_mask_b0                          ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        PX_SCR0  [register's definitions]
N *              Offset[0x10]  PX port set and clear register 0 (0x41000010)
N ******************************************************************************
N */
N///@{
N#define PX_SCR0_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of PX_SCR0 */
N#define PX_SCR0_SC3_mask_w                          ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define PX_SCR0_SC3_mask_h1                         ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define PX_SCR0_SC3_mask_b3                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SCR0_SC2_mask_w                          ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define PX_SCR0_SC2_mask_h1                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define PX_SCR0_SC2_mask_b2                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SCR0_SC1_mask_w                          ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define PX_SCR0_SC1_mask_h0                         ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define PX_SCR0_SC1_mask_b1                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SCR0_SC0_mask_w                          ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define PX_SCR0_SC0_mask_h0                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define PX_SCR0_SC0_mask_b0                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        PX_SCR1  [register's definitions]
N *              Offset[0x14]  PX port set and clear register 1 (0x41000014)
N ******************************************************************************
N */
N///@{
N#define PX_SCR1_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of PX_SCR1 */
N#define PX_SCR1_SC7_mask_w                          ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define PX_SCR1_SC7_mask_h1                         ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define PX_SCR1_SC7_mask_b3                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SCR1_SC6_mask_w                          ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define PX_SCR1_SC6_mask_h1                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define PX_SCR1_SC6_mask_b2                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SCR1_SC5_mask_w                          ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define PX_SCR1_SC5_mask_h0                         ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define PX_SCR1_SC5_mask_b1                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SCR1_SC4_mask_w                          ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define PX_SCR1_SC4_mask_h0                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define PX_SCR1_SC4_mask_b0                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        PX_SCR2  [register's definitions]
N *              Offset[0x18]  PX port set and clear register 2 (0x41000018)
N ******************************************************************************
N */
N///@{
N#define PX_SCR2_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of PX_SCR2 */
N#define PX_SCR2_SC11_mask_w                         ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define PX_SCR2_SC11_mask_h1                        ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define PX_SCR2_SC11_mask_b3                        ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SCR2_SC10_mask_w                         ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define PX_SCR2_SC10_mask_h1                        ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define PX_SCR2_SC10_mask_b2                        ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SCR2_SC9_mask_w                          ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define PX_SCR2_SC9_mask_h0                         ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define PX_SCR2_SC9_mask_b1                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SCR2_SC8_mask_w                          ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define PX_SCR2_SC8_mask_h0                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define PX_SCR2_SC8_mask_b0                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        PX_SCR3  [register's definitions]
N *              Offset[0x1C]  PX port set and clear register 3 (0x4100001C)
N ******************************************************************************
N */
N///@{
N#define PX_SCR3_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of PX_SCR3 */
N#define PX_SCR3_SC15_mask_w                         ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define PX_SCR3_SC15_mask_h1                        ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define PX_SCR3_SC15_mask_b3                        ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SCR3_SC14_mask_w                         ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define PX_SCR3_SC14_mask_h1                        ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define PX_SCR3_SC14_mask_b2                        ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SCR3_SC13_mask_w                         ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define PX_SCR3_SC13_mask_h0                        ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define PX_SCR3_SC13_mask_b1                        ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N#define PX_SCR3_SC12_mask_w                         ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define PX_SCR3_SC12_mask_h0                        ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define PX_SCR3_SC12_mask_b0                        ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        PX_CR  [register's definitions]
N *              Pin IO Mode/AFS Register Control Definitions
N ******************************************************************************
N */
N///@{
N#define PX_CR_LCK_mask_w                            ((uint32_t)0x80000000)  /*!< Bit Mask of 32bit */
N#define PX_CR_LCK_mask_h1                           ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define PX_CR_LCK_mask_b3                           ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define PX_CR_LCK_locked_w                          ((uint32_t)0x00000000)  /*!< Bit Value =(0):Locked of 32bit */
N#define PX_CR_LCK_locked_h1                         ((uint16_t)0x0000)      /*!< Bit Value =(0):Locked of 16bit */
N#define PX_CR_LCK_locked_b3                         ((uint8_t )0x00)        /*!< Bit Value =(0):Locked of 8bit */
N#define PX_CR_LCK_un_locked_w                       ((uint32_t)0x80000000)  /*!< Bit Value =(1):Un-Locked of 32bit */
N#define PX_CR_LCK_un_locked_h1                      ((uint16_t)0x8000)      /*!< Bit Value =(1):Un-Locked of 16bit */
N#define PX_CR_LCK_un_locked_b3                      ((uint8_t )0x80)        /*!< Bit Value =(1):Un-Locked of 8bit */
N
N#define PX_CR_AFS_mask_w                            ((uint32_t)0x0000F000)  /*!< Bit Mask of 32bit */
N#define PX_CR_AFS_mask_h0                           ((uint16_t)0xF000)      /*!< Bit Mask of 16bit */
N#define PX_CR_AFS_mask_b1                           ((uint8_t )0xF0)        /*!< Bit Mask of 8bit */
N#define PX_CR_AFS_af0_w                             ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):AF0 of 32bit */
N#define PX_CR_AFS_af0_h0                            ((uint16_t)0x0000)      /*!< Bit Value =(0x0):AF0 of 16bit */
N#define PX_CR_AFS_af0_b1                            ((uint8_t )0x00)        /*!< Bit Value =(0x0):AF0 of 8bit */
N#define PX_CR_AFS_af1_w                             ((uint32_t)0x00001000)  /*!< Bit Value =(0x1):AF1 of 32bit */
N#define PX_CR_AFS_af1_h0                            ((uint16_t)0x1000)      /*!< Bit Value =(0x1):AF1 of 16bit */
N#define PX_CR_AFS_af1_b1                            ((uint8_t )0x10)        /*!< Bit Value =(0x1):AF1 of 8bit */
N#define PX_CR_AFS_af2_w                             ((uint32_t)0x00002000)  /*!< Bit Value =(0x2):AF2 of 32bit */
N#define PX_CR_AFS_af2_h0                            ((uint16_t)0x2000)      /*!< Bit Value =(0x2):AF2 of 16bit */
N#define PX_CR_AFS_af2_b1                            ((uint8_t )0x20)        /*!< Bit Value =(0x2):AF2 of 8bit */
N#define PX_CR_AFS_af3_w                             ((uint32_t)0x00003000)  /*!< Bit Value =(0x3):AF3 of 32bit */
N#define PX_CR_AFS_af3_h0                            ((uint16_t)0x3000)      /*!< Bit Value =(0x3):AF3 of 16bit */
N#define PX_CR_AFS_af3_b1                            ((uint8_t )0x30)        /*!< Bit Value =(0x3):AF3 of 8bit */
N#define PX_CR_AFS_af4_w                             ((uint32_t)0x00004000)  /*!< Bit Value =(0x4):AF4 of 32bit */
N#define PX_CR_AFS_af4_h0                            ((uint16_t)0x4000)      /*!< Bit Value =(0x4):AF4 of 16bit */
N#define PX_CR_AFS_af4_b1                            ((uint8_t )0x40)        /*!< Bit Value =(0x4):AF4 of 8bit */
N#define PX_CR_AFS_af5_w                             ((uint32_t)0x00005000)  /*!< Bit Value =(0x5):AF5 of 32bit */
N#define PX_CR_AFS_af5_h0                            ((uint16_t)0x5000)      /*!< Bit Value =(0x5):AF5 of 16bit */
N#define PX_CR_AFS_af5_b1                            ((uint8_t )0x50)        /*!< Bit Value =(0x5):AF5 of 8bit */
N#define PX_CR_AFS_af6_w                             ((uint32_t)0x00006000)  /*!< Bit Value =(0x6):AF6 of 32bit */
N#define PX_CR_AFS_af6_h0                            ((uint16_t)0x6000)      /*!< Bit Value =(0x6):AF6 of 16bit */
N#define PX_CR_AFS_af6_b1                            ((uint8_t )0x60)        /*!< Bit Value =(0x6):AF6 of 8bit */
N#define PX_CR_AFS_af7_w                             ((uint32_t)0x00007000)  /*!< Bit Value =(0x7):AF7 of 32bit */
N#define PX_CR_AFS_af7_h0                            ((uint16_t)0x7000)      /*!< Bit Value =(0x7):AF7 of 16bit */
N#define PX_CR_AFS_af7_b1                            ((uint8_t )0x70)        /*!< Bit Value =(0x7):AF7 of 8bit */
N#define PX_CR_AFS_af8_w                             ((uint32_t)0x00008000)  /*!< Bit Value =(0x8):AF8 of 32bit */
N#define PX_CR_AFS_af8_h0                            ((uint16_t)0x8000)      /*!< Bit Value =(0x8):AF8 of 16bit */
N#define PX_CR_AFS_af8_b1                            ((uint8_t )0x80)        /*!< Bit Value =(0x8):AF8 of 8bit */
N#define PX_CR_AFS_af9_w                             ((uint32_t)0x00009000)  /*!< Bit Value =(0x9):AF9 of 32bit */
N#define PX_CR_AFS_af9_h0                            ((uint16_t)0x9000)      /*!< Bit Value =(0x9):AF9 of 16bit */
N#define PX_CR_AFS_af9_b1                            ((uint8_t )0x90)        /*!< Bit Value =(0x9):AF9 of 8bit */
N
N#define PX_CR_FDIV_mask_w                           ((uint32_t)0x00000C00)  /*!< Bit Mask of 32bit */
N#define PX_CR_FDIV_mask_h0                          ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define PX_CR_FDIV_mask_b1                          ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define PX_CR_FDIV_bypass_w                         ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Bypass of 32bit */
N#define PX_CR_FDIV_bypass_h0                        ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Bypass of 16bit */
N#define PX_CR_FDIV_bypass_b1                        ((uint8_t )0x00)        /*!< Bit Value =(0x0):Bypass of 8bit */
N#define PX_CR_FDIV_div1_w                           ((uint32_t)0x00000400)  /*!< Bit Value =(0x1):Div1 of 32bit */
N#define PX_CR_FDIV_div1_h0                          ((uint16_t)0x0400)      /*!< Bit Value =(0x1):Div1 of 16bit */
N#define PX_CR_FDIV_div1_b1                          ((uint8_t )0x04)        /*!< Bit Value =(0x1):Div1 of 8bit */
N#define PX_CR_FDIV_div4_w                           ((uint32_t)0x00000800)  /*!< Bit Value =(0x2):Div4 of 32bit */
N#define PX_CR_FDIV_div4_h0                          ((uint16_t)0x0800)      /*!< Bit Value =(0x2):Div4 of 16bit */
N#define PX_CR_FDIV_div4_b1                          ((uint8_t )0x08)        /*!< Bit Value =(0x2):Div4 of 8bit */
N#define PX_CR_FDIV_div16_w                          ((uint32_t)0x00000C00)  /*!< Bit Value =(0x3):Div16 of 32bit */
N#define PX_CR_FDIV_div16_h0                         ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):Div16 of 16bit */
N#define PX_CR_FDIV_div16_b1                         ((uint8_t )0x0C)        /*!< Bit Value =(0x3):Div16 of 8bit */
N
N#define PX_CR_ODC_mask_w                            ((uint32_t)0x00000300)  /*!< Bit Mask of 32bit */
N#define PX_CR_ODC_mask_h0                           ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define PX_CR_ODC_mask_b1                           ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define PX_CR_ODC_level0_w                          ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Level0 of 32bit */
N#define PX_CR_ODC_level0_h0                         ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Level0 of 16bit */
N#define PX_CR_ODC_level0_b1                         ((uint8_t )0x00)        /*!< Bit Value =(0x0):Level0 of 8bit */
N#define PX_CR_ODC_level1_w                          ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):Level1 of 32bit */
N#define PX_CR_ODC_level1_h0                         ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Level1 of 16bit */
N#define PX_CR_ODC_level1_b1                         ((uint8_t )0x01)        /*!< Bit Value =(0x1):Level1 of 8bit */
N#define PX_CR_ODC_level2_w                          ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):Level2 of 32bit */
N#define PX_CR_ODC_level2_h0                         ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Level2 of 16bit */
N#define PX_CR_ODC_level2_b1                         ((uint8_t )0x02)        /*!< Bit Value =(0x2):Level2 of 8bit */
N#define PX_CR_ODC_level3_w                          ((uint32_t)0x00000300)  /*!< Bit Value =(0x3):Level3 of 32bit */
N#define PX_CR_ODC_level3_h0                         ((uint16_t)0x0300)      /*!< Bit Value =(0x3):Level3 of 16bit */
N#define PX_CR_ODC_level3_b1                         ((uint8_t )0x03)        /*!< Bit Value =(0x3):Level3 of 8bit */
N
N#define PX_CR_INV_mask_w                            ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define PX_CR_INV_mask_h0                           ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define PX_CR_INV_mask_b0                           ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define PX_CR_INV_disable_w                         ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define PX_CR_INV_disable_h0                        ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define PX_CR_INV_disable_b0                        ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define PX_CR_INV_enable_w                          ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define PX_CR_INV_enable_h0                         ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define PX_CR_INV_enable_b0                         ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define PX_CR_PU_mask_w                             ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define PX_CR_PU_mask_h0                            ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define PX_CR_PU_mask_b0                            ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define PX_CR_PU_disable_w                          ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define PX_CR_PU_disable_h0                         ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define PX_CR_PU_disable_b0                         ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define PX_CR_PU_enable_w                           ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define PX_CR_PU_enable_h0                          ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define PX_CR_PU_enable_b0                          ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define PX_CR_HS_mask_w                             ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define PX_CR_HS_mask_h0                            ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define PX_CR_HS_mask_b0                            ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define PX_CR_HS_disable_w                          ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define PX_CR_HS_disable_h0                         ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define PX_CR_HS_disable_b0                         ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define PX_CR_HS_enable_w                           ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define PX_CR_HS_enable_h0                          ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define PX_CR_HS_enable_b0                          ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define PX_CR_IOM_mask_w                            ((uint32_t)0x00000007)  /*!< Bit Mask of 32bit */
N#define PX_CR_IOM_mask_h0                           ((uint16_t)0x0007)      /*!< Bit Mask of 16bit */
N#define PX_CR_IOM_mask_b0                           ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define PX_CR_IOM_aio_w                             ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):AIO of 32bit */
N#define PX_CR_IOM_aio_h0                            ((uint16_t)0x0000)      /*!< Bit Value =(0x0):AIO of 16bit */
N#define PX_CR_IOM_aio_b0                            ((uint8_t )0x00)        /*!< Bit Value =(0x0):AIO of 8bit */
N#define PX_CR_IOM_odo_w                             ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):ODO of 32bit */
N#define PX_CR_IOM_odo_h0                            ((uint16_t)0x0001)      /*!< Bit Value =(0x1):ODO of 16bit */
N#define PX_CR_IOM_odo_b0                            ((uint8_t )0x01)        /*!< Bit Value =(0x1):ODO of 8bit */
N#define PX_CR_IOM_ppo_w                             ((uint32_t)0x00000002)  /*!< Bit Value =(0x2):PPO of 32bit */
N#define PX_CR_IOM_ppo_h0                            ((uint16_t)0x0002)      /*!< Bit Value =(0x2):PPO of 16bit */
N#define PX_CR_IOM_ppo_b0                            ((uint8_t )0x02)        /*!< Bit Value =(0x2):PPO of 8bit */
N#define PX_CR_IOM_din_w                             ((uint32_t)0x00000003)  /*!< Bit Value =(0x3):DIN of 32bit */
N#define PX_CR_IOM_din_h0                            ((uint16_t)0x0003)      /*!< Bit Value =(0x3):DIN of 16bit */
N#define PX_CR_IOM_din_b0                            ((uint8_t )0x03)        /*!< Bit Value =(0x3):DIN of 8bit */
N#define PX_CR_IOM_qb_w                              ((uint32_t)0x00000004)  /*!< Bit Value =(0x4):QB of 32bit */
N#define PX_CR_IOM_qb_h0                             ((uint16_t)0x0004)      /*!< Bit Value =(0x4):QB of 16bit */
N#define PX_CR_IOM_qb_b0                             ((uint8_t )0x04)        /*!< Bit Value =(0x4):QB of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        PA  [register's definitions]
N *              Port IO Mode/AFS Register Control Definitions
N ******************************************************************************
N */
N///@{
N
N/**********************  PA_CR0  [register's definitions]**********************/
N/*!< Offset[0x00]  PA0 IO control register (0x44000000) */
N#define PA_CR0_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PA_CR1  [register's definitions]**********************/
N/*!< Offset[0x04]  PA1 IO control register (0x44000004) */
N#define PA_CR1_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PA_CR2  [register's definitions]**********************/
N/*!< Offset[0x08]  PA2 IO control register (0x44000008) */
N#define PA_CR2_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PA_CR3  [register's definitions]**********************/
N/*!< Offset[0x0C]  PA3 IO control register (0x4400000C) */
N#define PA_CR3_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PA_CR4  [register's definitions]**********************/
N/*!< Offset[0x10]  PA4 IO control register (0x44000010) */
N#define PA_CR4_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PA_CR5  [register's definitions]**********************/
N/*!< Offset[0x14]  PA5 IO control register (0x44000014) */
N#define PA_CR5_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PA_CR6  [register's definitions]**********************/
N/*!< Offset[0x18]  PA6 IO control register (0x44000018) */
N#define PA_CR6_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PA_CR7  [register's definitions]**********************/
N/*!< Offset[0x1C]  PA7 IO control register (0x4400001C) */
N#define PA_CR7_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PA_CR8  [register's definitions]**********************/
N/*!< Offset[0x20]  PA8 IO control register (0x44000020) */
N#define PA_CR8_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PA_CR9  [register's definitions]**********************/
N/*!< Offset[0x24]  PA9 IO control register (0x44000024) */
N#define PA_CR9_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PA_CR10  [register's definitions]**********************/
N/*!< Offset[0x28]  PA10 IO control register (0x44000028) */
N#define PA_CR10_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PA_CR11  [register's definitions]**********************/
N/*!< Offset[0x2C]  PA11 IO control register (0x4400002C) */
N#define PA_CR11_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PA_CR12  [register's definitions]**********************/
N/*!< Offset[0x30]  PA12 IO control register (0x44000030) */
N#define PA_CR12_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PA_CR13  [register's definitions]**********************/
N/*!< Offset[0x34]  PA13 IO control register (0x44000034) */
N#define PA_CR13_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PA_CR14  [register's definitions]**********************/
N/*!< Offset[0x38]  PA14 IO control register (0x44000038) */
N#define PA_CR14_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PA_CR15  [register's definitions]**********************/
N/*!< Offset[0x3C]  PA15 IO control register (0x4400003C) */
N#define PA_CR15_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PA_FLT  [register's definitions]**********************/
N/*!< Offset[0x40]  PA port input filter control register (0x44000040) */
N#define PA_FLT_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N///@}
N/**
N ******************************************************************************
N * @name        PB  [register's definitions]
N *              Port IO Mode/AFS Register Control Definitions
N ******************************************************************************
N */
N///@{
N
N/**********************  PB_CR0  [register's definitions]**********************/
N/*!< Offset[0x00]  PB0 IO control register (0x44010000) */
N#define PB_CR0_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PB_CR1  [register's definitions]**********************/
N/*!< Offset[0x04]  PB1 IO control register (0x44010004) */
N#define PB_CR1_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PB_CR2  [register's definitions]**********************/
N/*!< Offset[0x08]  PB2 IO control register (0x44010008) */
N#define PB_CR2_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PB_CR3  [register's definitions]**********************/
N/*!< Offset[0x0C]  PB3 IO control register (0x4401000C) */
N#define PB_CR3_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PB_CR4  [register's definitions]**********************/
N/*!< Offset[0x10]  PB4 IO control register (0x44010010) */
N#define PB_CR4_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PB_CR5  [register's definitions]**********************/
N/*!< Offset[0x14]  PB5 IO control register (0x44010014) */
N#define PB_CR5_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PB_CR6  [register's definitions]**********************/
N/*!< Offset[0x18]  PB6 IO control register (0x44010018) */
N#define PB_CR6_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PB_CR7  [register's definitions]**********************/
N/*!< Offset[0x1C]  PB7 IO control register (0x4401001C) */
N#define PB_CR7_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PB_CR8  [register's definitions]**********************/
N/*!< Offset[0x20]  PB8 IO control register (0x44010020) */
N#define PB_CR8_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PB_CR9  [register's definitions]**********************/
N/*!< Offset[0x24]  PB9 IO control register (0x44010024) */
N#define PB_CR9_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PB_CR10  [register's definitions]**********************/
N/*!< Offset[0x28]  PB10 IO control register (0x44010028) */
N#define PB_CR10_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PB_CR11  [register's definitions]**********************/
N/*!< Offset[0x2C]  PB11 IO control register (0x4401002C) */
N#define PB_CR11_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PB_CR12  [register's definitions]**********************/
N/*!< Offset[0x30]  PB12 IO control register (0x44010030) */
N#define PB_CR12_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PB_CR13  [register's definitions]**********************/
N/*!< Offset[0x34]  PB13 IO control register (0x44010034) */
N#define PB_CR13_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PB_CR14  [register's definitions]**********************/
N/*!< Offset[0x38]  PB14 IO control register (0x44010038) */
N#define PB_CR14_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PB_CR15  [register's definitions]**********************/
N/*!< Offset[0x3C]  PB15 IO control register (0x4401003C) */
N#define PB_CR15_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PB_FLT  [register's definitions]**********************/
N/*!< Offset[0x40]  PB port input filter control register (0x44010040) */
N#define PB_FLT_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N///@}
N/**
N ******************************************************************************
N * @name        PC  [register's definitions]
N *              Port IO Mode/AFS Register Control Definitions
N ******************************************************************************
N */
N///@{
N
N/**********************  PC_CR0  [register's definitions]**********************/
N/*!< Offset[0x00]  PC0 IO control register (0x44020000) */
N#define PC_CR0_default                              ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/**********************  PC_CR1  [register's definitions]**********************/
N/*!< Offset[0x04]  PC1 IO control register (0x44020004) */
N#define PC_CR1_default                              ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/**********************  PC_CR2  [register's definitions]**********************/
N/*!< Offset[0x08]  PC2 IO control register (0x44020008) */
N#define PC_CR2_default                              ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/**********************  PC_CR3  [register's definitions]**********************/
N/*!< Offset[0x0C]  PC3 IO control register (0x4402000C) */
N#define PC_CR3_default                              ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/**********************  PC_CR4  [register's definitions]**********************/
N/*!< Offset[0x10]  PC4 IO control register (0x44020010) */
N#define PC_CR4_default                              ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/**********************  PC_CR5  [register's definitions]**********************/
N/*!< Offset[0x14]  PC5 IO control register (0x44020014) */
N#define PC_CR5_default                              ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/**********************  PC_CR6  [register's definitions]**********************/
N/*!< Offset[0x18]  PC6 IO control register (0x44020018) */
N#define PC_CR6_default                              ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/**********************  PC_CR7  [register's definitions]**********************/
N/*!< Offset[0x1C]  PC7 IO control register (0x4402001C) */
N#define PC_CR7_default                              ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/**********************  PC_CR8  [register's definitions]**********************/
N/*!< Offset[0x20]  PC8 IO control register (0x44020020) */
N#define PC_CR8_default                              ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/**********************  PC_CR9  [register's definitions]**********************/
N/*!< Offset[0x24]  PC9 IO control register (0x44020024) */
N#define PC_CR9_default                              ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/*********************  PC_CR10  [register's definitions]**********************/
N/*!< Offset[0x28]  PC10 IO control register (0x44020028) */
N#define PC_CR10_default                             ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/*********************  PC_CR11  [register's definitions]**********************/
N/*!< Offset[0x2C]  PC11 IO control register (0x4402002C) */
N#define PC_CR11_default                             ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/*********************  PC_CR12  [register's definitions]**********************/
N/*!< Offset[0x30]  PC12 IO control register (0x44020030) */
N#define PC_CR12_default                             ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/*********************  PC_CR13  [register's definitions]**********************/
N/*!< Offset[0x34]  PC13 IO control register (0x44020034) */
N#define PC_CR13_default                             ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/*********************  PC_CR14  [register's definitions]**********************/
N/*!< Offset[0x38]  PC14 IO control register (0x44020038) */
N#define PC_CR14_default                             ((uint32_t)0x00000024)  /*!< Reg Reset Default Value */
N
N/**********************  PC_FLT  [register's definitions]**********************/
N/*!< Offset[0x40]  PC port input filter control register (0x44020040) */
N#define PC_FLT_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N///@}
N/**
N ******************************************************************************
N * @name        PD  [register's definitions]
N *              Port IO Mode/AFS Register Control Definitions
N ******************************************************************************
N */
N///@{
N
N/**********************  PD_CR0  [register's definitions]**********************/
N/*!< Offset[0x00]  PD0 IO control register (0x44030000) */
N#define PD_CR0_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PD_CR1  [register's definitions]**********************/
N/*!< Offset[0x04]  PD1 IO control register (0x44030004) */
N#define PD_CR1_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PD_CR2  [register's definitions]**********************/
N/*!< Offset[0x08]  PD2 IO control register (0x44030008) */
N#define PD_CR2_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PD_CR3  [register's definitions]**********************/
N/*!< Offset[0x0C]  PD3 IO control register (0x4403000C) */
N#define PD_CR3_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PD_CR4  [register's definitions]**********************/
N/*!< Offset[0x10]  PD4 IO control register (0x44030010) */
N#define PD_CR4_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PD_CR5  [register's definitions]**********************/
N/*!< Offset[0x14]  PD5 IO control register (0x44030014) */
N#define PD_CR5_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PD_CR6  [register's definitions]**********************/
N/*!< Offset[0x18]  PD6 IO control register (0x44030018) */
N#define PD_CR6_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PD_CR7  [register's definitions]**********************/
N/*!< Offset[0x1C]  PD7 IO control register (0x4403001C) */
N#define PD_CR7_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PD_CR8  [register's definitions]**********************/
N/*!< Offset[0x20]  PD8 IO control register (0x44030020) */
N#define PD_CR8_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PD_CR9  [register's definitions]**********************/
N/*!< Offset[0x24]  PD9 IO control register (0x44030024) */
N#define PD_CR9_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PD_CR10  [register's definitions]**********************/
N/*!< Offset[0x28]  PD10 IO control register (0x44030028) */
N#define PD_CR10_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PD_CR11  [register's definitions]**********************/
N/*!< Offset[0x2C]  PD11 IO control register (0x4403002C) */
N#define PD_CR11_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PD_CR12  [register's definitions]**********************/
N/*!< Offset[0x30]  PD12 IO control register (0x44030030) */
N#define PD_CR12_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PD_CR13  [register's definitions]**********************/
N/*!< Offset[0x34]  PD13 IO control register (0x44030034) */
N#define PD_CR13_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PD_CR14  [register's definitions]**********************/
N/*!< Offset[0x38]  PD14 IO control register (0x44030038) */
N#define PD_CR14_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PD_CR15  [register's definitions]**********************/
N/*!< Offset[0x3C]  PD15 IO control register (0x4403003C) */
N#define PD_CR15_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PD_FLT  [register's definitions]**********************/
N/*!< Offset[0x40]  PD port input filter control register (0x44030040) */
N#define PD_FLT_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N///@}
N/**
N ******************************************************************************
N * @name        PE  [register's definitions]
N *              Port IO Mode/AFS Register Control Definitions
N ******************************************************************************
N */
N///@{
N
N/**********************  PE_CR0  [register's definitions]**********************/
N/*!< Offset[0x00]  PE0 IO control register (0x44040000) */
N#define PE_CR0_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PE_CR1  [register's definitions]**********************/
N/*!< Offset[0x04]  PE1 IO control register (0x44040004) */
N#define PE_CR1_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PE_CR2  [register's definitions]**********************/
N/*!< Offset[0x08]  PE2 IO control register (0x44040008) */
N#define PE_CR2_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PE_CR3  [register's definitions]**********************/
N/*!< Offset[0x0C]  PE3 IO control register (0x4404000C) */
N#define PE_CR3_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PE_CR8  [register's definitions]**********************/
N/*!< Offset[0x20]  PE8 IO control register (0x44040020) */
N#define PE_CR8_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PE_CR9  [register's definitions]**********************/
N/*!< Offset[0x24]  PE9 IO control register (0x44040024) */
N#define PE_CR9_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PE_CR12  [register's definitions]**********************/
N/*!< Offset[0x30]  PE12 IO control register (0x44040030) */
N#define PE_CR12_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PE_CR13  [register's definitions]**********************/
N/*!< Offset[0x34]  PE13 IO control register (0x44040034) */
N#define PE_CR13_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PE_CR14  [register's definitions]**********************/
N/*!< Offset[0x38]  PE14 IO control register (0x44040038) */
N#define PE_CR14_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/*********************  PE_CR15  [register's definitions]**********************/
N/*!< Offset[0x3C]  PE15 IO control register (0x4404003C) */
N#define PE_CR15_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/**********************  PE_FLT  [register's definitions]**********************/
N/*!< Offset[0x40]  PE port input filter control register (0x44040040) */
N#define PE_FLT_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N///@}
N
N#endif  // _MG32x02z_GPIO_H
N
N/*----------------------------------------------------------------------------*/
N/*                        End of file MG32x02z_GPIO.h                         */
N/*----------------------------------------------------------------------------*/
L 32 ".\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132\MG32x02z_CSC_Init.h" 2
N
N
N#ifndef _MG32x02z_CSC_INIT_H
N/*!< _MG32x02z_CSC_INIT_H */ 
N#define _MG32x02z_CSC_INIT_H
N
N
N//*** <<< Use Configuration Wizard in Context Menu >>> ***
N/**
N ******************************************************************************
N *
N * @brief       CSC Initial Configure
N *
N ******************************************************************************
N */
N
N//<h> CSC Initial Configure
N
N//      <o> Enter XOSC Or External Clock Frequency 1~36000000Hz <1-36000000>
N//      <i> When use CK_HS = CK_XOSC or CK_EXT, this space must be entered at the correct frequency.
N//      <i> CK_XOSC = 1~25000000Hz, CK_EXT = 1~36000000Hz
N#define CONF_XOSC_EXTCK_FREQ             12000000    // 1
N
N//      <o.18> Select IHRCO <0=> 12MHz
N//                          <1=> 11.059MHz
N//      <i> IHRCO clock source frequency select.
N#define CONF_CSC_IHRCO_SEL                0x00000000  // 2  [18] IHRCO Select
N
N//          <o.16..17> Select XOSC Gain <0=> Normal Gain For 32 KHz
N//                                      <1=> Medium Gain 4 ~ 25MHz
N//                                      <2=> Lowest Gain For 32 KHz
N//          <i> Xtal oscillator gain select. 
N#define CONF_CSC_XOSC_GN                  0x00010000  // 3  [17:16] XOSC Gain
N
N//      <q.4> Disable MCD(Missing Clock Detector)
N#define CONF_CSC_MCD_DIS                  0x00000010  // 4  [4] MCD Disable
N//      <o.22..23> Select Missing Clock Detection Duration <0=> 125us
N//                                                         <1=> 250us
N//                                                         <2=> 500us
N//                                                         <3=> 1ms
N//      <i> MCD detection duration time select. Large time selection makes slow MCD response. 
N#define CONF_CSC_MCD_SEL                  0x00000000  // 5  [23:22] MCD Duration Select
N
N//      <o.10..11> Select CK_HS Source <0=> CK_IHRCO
N//                                     <1=> CK_XOSC
N//                                     <2=> CK_ILRCO
N//                                     <3=> CK_EXT
N//      <i> When Select CK_HS Source = CK_XOSC, MG32x02z_GPIO_Init.h Wizard PC13 configutaion and PC14 configutaion must disable.
N#define CONF_CSC_HS_SEL                   0x00000000  // 6  [11:10] CK_HS Select
N
N//      <h> Configure PLL
N//          <o.0..1> Select CK_PLLI Divider <0=> CK_HSx/1
N//                                          <1=> CK_HSx/2
N//                                          <2=> CK_HSx/4
N//                                          <3=> CK_HSx/6
N#define CONF_CSC_PLLI_DIV                 0x00000001  // 9  [1:0] PLLI DIV
N//          <o.8> Select CK_PLL Multiplication Factor <0=> CK_PLLIx16
N//                                                    <1=> CK_PLLIx24
N//          <i> CK_PLL output frequency = (CK_PLLI PLL input frequency) * (value)
N#define CONF_CSC_PLL_MUL                  0x00000000  // 10
N//          <o.4..5> Select CK_PLLO Divider <0=> CK_PLL/4
N//                                          <1=> CK_PLL/3
N//                                          <2=> CK_PLL/2
N//                                          <3=> CK_PLL/1
N#define CONF_CSC_PLLO_DIV                 0x00000000  // 12  [5:4] PLLO DIV
N//      </h>
N
N//      <o.14..15> Select CK_MAIN Source <0=> CK_HS
N//                                       <1=> CK_PLLI
N//                                       <2=> CK_PLLO 
N//      <i> When Select CK_MAIN Source = CK_PPLI, the PLL must enable.
N#define CONF_CSC_MAIN_SEL                 0x00000000  // 14  [15:14] CK_MAIN Select
N
N//      <o.8..9> Select CK_LS Source <1=> CK_XOSC
N//                                   <2=> CK_ILRCO
N//                                   <3=> CK_EXT
N//      <i> When Select CK_LS Source = CK_XOSC, MG32x02z_GPIO_Init.h Wizard PC13 configutaion and PC14 configutaion  must disable.
N#define CONF_CSC_LS_SEL                   0x00000200  // 15  [9:8] CK_LS Select
N
N//      <o.16> Select CK_ST Source <0=> HCLK/8
N//                                 <1=> CK_LS/2
N//      <i> System tick timer external clock source select.
N//      <i> This function is valid when CPU_CLKSOURCE is set 0(default).
N#define CONF_CSC_ST_SEL                   0x00000000  // 16  [16] CK_ST Select
N
N/**/
N//      <e.0> IHRCO/PLL Enable or XOSC/EXTCK AFS Pin Disable
N//      <i> The functions enable or disable by C-code checking if this CheckBox unchecked.
N//      <i> The functions enable or disable by following user setting if this CheckBox checked.
N#define CONF_CSC_CKIP_EN                  0x00000000  // 17  [0] 0=C-code auto checking
N
N//            <q.3> IHRCO_EN
N//            <i> IHRCO device enable
N#define CONF_CSC_CR0_IHRCO_EN             0x00000008  // 18  [3] IHRCO_EN
N
N
N//            <q.5> PLL_EN
N//            <i> PLL device enable
N#define CONF_CSC_CR0_PLL_EN               0x00000000  // 19  [5] PLL_EN (CSC_init.c and .h not used)
N
N
N//            <q.31> XOSC_EN
N//            <i> Crystal Oscillator and XIN/XOUT pins enable
N#define CONF_CFG_XOSC_EN                  0x00000000  // 20  [31] XOSC_EN
N
N
N//            <q.31> EXTCK_EN
N//            <i> External clock input and XIN pin enable if CK_EXT was selected in any HS/HS2/LS Mux
N#define CONF_CFG_EXTCK_EN                 0x00000000  // 21  [31] EXTCK pin enable (CSC_init.c and .h not used)
N
N//      </e>
N
N//      <o.16..18> Select APB Prescaler <0x00=> CK_MAIN/1
N//                                      <0x01=> CK_MAIN/2
N//                                      <0x02=> CK_MAIN/4
N//                                      <0x03=> CK_MAIN/8
N//                                      <0x04=> CK_MAIN/16
N//          <i> CK_APB frequency = (CK_MAIN frequency) / (selected Divider Value)
N#define CONF_CSC_APB_DIV                  0x00000000  // 22  [18:16] APB DIV
N
N//      <o.8..11> Select AHB Prescaler <0x00=> CK_APB/1
N//                                     <0x01=> CK_APB/2
N//                                     <0x02=> CK_APB/4
N//                                     <0x03=> CK_APB/8
N//                                     <0x04=> CK_APB/16
N//                                     <0x05=> CK_APB/32
N//                                     <0x06=> CK_APB/64
N//                                     <0x07=> CK_APB/128
N//                                     <0x08=> CK_APB/256
N//                                     <0x09=> CK_APB/512
N//          <i> CK_AHB frequency = (CK_APB frequency) / (selected Divider Value)
N#define CONF_CSC_AHB_DIV                  0x00000000  // 23  [11:8] AHB DIV
N
N//      <o.26..27> Select CK_UT Divider <0x00=> ILRCO/32
N//                                      <0x01=> ILRCO/8
N//                                      <0x02=> ILRCO/16
N//                                      <0x03=> ILRCO/128
N//          <i> CK_UT frequency = (ILRCO frequency) / (selected Divider Value)
N#define CONF_CSC_UT_DIV                   0x00000000  // 24  [27:26] UT DIV
N
N//      <h> Configure Peripheral ON Mode Clock
N//      <i> Peripheral module process clock enable when MCU is running ON mode.
N//          <q.0>  Port A
N//          <i> PA module process clock and register write-access enable.
N#define CONF_CSC_IOPA_EN                  0x00000001  // 30
N//          <q.1>  Port B
N//          <i> PB module process clock and register write-access enable.
N#define CONF_CSC_IOPB_EN                  0x00000002  // 31
N//          <q.2>  Port C
N//          <i> PC module process clock and register write-access enable.
N#define CONF_CSC_IOPC_EN                  0x00000004  // 32
N//          <q.3>  Port D
N//          <i> PD module process clock and register write-access enable.
N#define CONF_CSC_IOPD_EN                  0x00000008  // 33
N//          <q.4>  Port E
N//          <i> PE module process clock and register write-access enable.
N#define CONF_CSC_IOPE_EN                  0x00000010  // 34
N//          <q.8>  GPL
N//          <i> GPL clock source enable.
N#define CONF_CSC_GPL_EN                   0x00000100  // 35
N//          <q.12> EMB
N//          <i> EMB clock source enable.
N#define CONF_CSC_EMB_EN                   0x00001000  // 36
N//          <q.15> DMA
N//          <i> DMA clock source enable.
N#define CONF_CSC_DMA_EN                   0x00008000  // 37
N//          <e.0>  ADC0
N//          <i> ADC clock source enable.
N#define CONF_CSC_ADC0                     0x00000001  // 38
N//              <o.0>  Select ADCx_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> ADC Process clock source select.
N#define CONF_CSC_ADC0_CKS                 0x00000000  // 39
N//          </e>
N//          <e.2>  CMP
N//          <i> CMP clock source enable.
N#define CONF_CSC_CMP_EN                   0x00000004  // 40
N//              <o.4>  Select CMP_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> CMP Process clock source select.
N#define CONF_CSC_CMP_CKS                  0x00000004  // 41
N//          </e>
N//          <e.3>  DAC
N#define CONF_CSC_DAC_EN                   0x00000008  // 42
N//          <i> DAC clock source enable.
N//              <o.5>  Select CMP_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> DAC Process clock source select.
N#define CONF_CSC_DAC_CKS                  0x00000000  // 43
N//          </e>
N//          <q.5>  RTC
N//          <i> RTC clock source enable.
N#define CONF_CSC_RTC_EN                   0x00000020  // 50
N//          <q.6>  IWDT
N//          <i> IWDT clock source enable.
N#define CONF_CSC_IWDT_EN                  0x00000040  // 51
N//          <q.7>  WWDT
N//          <i> WWDT clock source enable.
N#define CONF_CSC_WWDT_EN                  0x00000080  // 52
N//          <e.8>  I2C0
N//          <i> I2C0 clock source enable.
N#define CONF_CSC_I2C0_EN                  0x00000100  // 53
N//              <o.0>  Select I2C0_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_I2C0_CKS                 0x00000000  // 54
N//          </e>
N//          <e.9>  I2C1
N//          <i> I2C1 clock source enable.
N#define CONF_CSC_I2C1_EN                  0x00000200  // 55
N//              <o.2>  Select I2C0_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_I2C1_CKS                 0x00000000  // 56
N//          </e>
N//          <e.12> SPI0
N//          <i> SPI0 clock source enable.
N#define CONF_CSC_SPI0_EN                  0x00001000  // 57
N//              <o.8>  Select SPI0_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_SPI0_CKS                 0x00000000  // 58
N//          </e>
N//          <e.16> URT0
N//          <i> URT0 clock source enable.
N#define CONF_CSC_URT0_EN                  0x00010000  // 59
N//              <o.16> Select URT0_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_URT0_CKS                 0x00000000  // 60
N//          </e>
N//          <e.17> URT1
N//          <i> URT1 clock source enable.
N#define CONF_CSC_URT1_EN                  0x00020000  // 61
N//              <o.18> Select URT1_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_URT1_CKS                 0x00000000  // 62
N//          </e>
N//          <e.18> URT2
N//          <i> URT2 clock source enable.
N#define CONF_CSC_URT2_EN                  0x00040000  // 63
N//              <o.20> Select URT2_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_URT2_CKS                 0x00000000  // 64
N//          </e>
N//          <e.19> URT3
N//          <i> URT3 clock source enable.
N#define CONF_CSC_URT3_EN                  0x00080000  // 65
N//              <o.22> Select URT3_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_URT3_CKS                 0x00000000  // 66
N//          </e>
N//          <e.0>  TM00
N//          <i> TM00 clock source enable.
N#define CONF_CSC_TM00_EN                  0x00000001  // 79
N//              <o.0>  Select TM00_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_TM00_CKS                 0x00000000  // 80
N//          </e>
N//          <e.1>  TM01
N//          <i> TM01 clock source enable.
N#define CONF_CSC_TM01_EN                  0x00000002  // 81
N//              <o.2>  Select TM01_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_TM01_CKS                 0x00000000  // 82
N//          </e>
N//          <e.4>  TM10
N//          <i> TM10 clock source enable.
N#define CONF_CSC_TM10_EN                  0x00000010  // 83
N//              <o.8>  Select TM10_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_TM10_CKS                 0x00000000  // 84
N//          </e>
N//          <e.7>  TM16
N//          <i> TM16 clock source enable.
N#define CONF_CSC_TM16_EN                  0x00000080  // 85
N//              <o.14> Select TM16_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_TM16_CKS                 0x00000000  // 86
N//          </e>
N//          <e.8>  TM20
N//          <i> TM20 clock source enable.
N#define CONF_CSC_TM20_EN                  0x00000100  // 87
N//              <o.16> Select TM20_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_TM20_CKS                 0x00000000  // 88
N//          </e>
N//          <e.11>  TM26
N//          <i> TM20 clock source enable.
N#define CONF_CSC_TM26_EN                  0x00000800  // 89
N//              <o.22> Select TM26_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_TM26_CKS                 0x00000000  // 90
N//          </e>
N//          <e.15> TM36
N//          <i> TM36 clock source enable.
N#define CONF_CSC_TM36_EN                  0x00008000  // 91
N//              <o.30> Select TM36_PR Source <0=> CK_APB <1=> CK_AHB
N//              <i> Process clock source select.
N#define CONF_CSC_TM36_CKS                 0x00000000  // 92
N//          </e>
N//      </h>
N
N//      <h> Configure Peripheral SLEEP Mode Clock
N//      <i> Peripheral module process clock enable when MCU is entering SLEEP mode.
N//          <q.0>  ADC0
N#define CONF_CSC_SLP_ADC0                 0x00000000  // 100
N//          <q.2>  CMP
N#define CONF_CSC_SLP_CMP                  0x00000000  // 101
N//          <q.3>  DAC
N#define CONF_CSC_SLP_DAC                  0x00000000  // 102
N//          <q.5>  RTC
N#define CONF_CSC_SLP_RTC                  0x00000000  // 103
N//          <q.6>  IWDT
N#define CONF_CSC_SLP_IWDT                 0x00000000  // 104
N//          <q.7>  WWDT
N#define CONF_CSC_SLP_WWDT                 0x00000000  // 105
N//          <q.8>  I2C0
N#define CONF_CSC_SLP_I2C0                 0x00000000  // 106
N//          <q.9>  I2C1
N#define CONF_CSC_SLP_I2C1                 0x00000000  // 107
N//          <q.12> SPI0
N#define CONF_CSC_SLP_SPI0                 0x00000000  // 108
N//          <q.16> URT0
N#define CONF_CSC_SLP_URT0                 0x00000000  // 109
N//          <q.17> URT1
N#define CONF_CSC_SLP_URT1                 0x00000000  // 110
N//          <q.18> URT2
N#define CONF_CSC_SLP_URT2                 0x00000000  // 111
N//          <q.20> URT3
N#define CONF_CSC_SLP_URT3                 0x00000000  // 112
N//          <q.0>  TM00
N#define CONF_CSC_SLP_TM00                 0x00000000  // 119
N//          <q.1>  TM01
N#define CONF_CSC_SLP_TM01                 0x00000000  // 120
N//          <q.4>  TM10
N#define CONF_CSC_SLP_TM10                 0x00000000  // 121
N//          <q.7>  TM16
N#define CONF_CSC_SLP_TM16                 0x00000000  // 122
N//          <q.8>  TM20
N#define CONF_CSC_SLP_TM20                 0x00000000  // 123
N//          <q.11> TM26
N#define CONF_CSC_SLP_TM26                 0x00000000  // 124
N//          <q.15> TM36
N#define CONF_CSC_SLP_TM36                 0x00000000  // 125
N//          <q.29> DMA
N#define CONF_CSC_SLP_DMA                  0x00000000  // 128
N//          <q.30> EMB
N#define CONF_CSC_SLP_EMB                  0x00000000  // 129
N//      </h>
N
N//      <h> Configure Peripheral STOP Mode Clock
N//      <i> Peripheral module process clock enable when MCU is entering STOP mode.
N//          <q.5>  RTC
N#define CONF_CSC_STP_RTC                  0x00000000  // 140
N//          <q.6>  IWDT
N#define CONF_CSC_STP_IWDT                 0x00000000  // 141
N//      </h>
N
N//      <e.0> Enable ICKO
N//      <i> Internal clock source output enable.
N#define CONF_CSC_CKO_EN                   0x00000000  // 150
N//          <o.2..3> Select ICKO Divider <0=> ICK/1
N//                                       <1=> ICK/2
N//                                       <2=> ICK/4
N//                                       <3=> ICK/8
N//          <i> Internal clock output divider select.
N#define CONF_CSC_CKO_DIV                  0x00000008  // 151
N//          <o.4..7> Select ICKO <0=> CK_MAIN
N//                               <1=> CK_AHB
N//                               <2=> CK_APB
N//                               <3=> CK_HS
N//                               <4=> CK_LS
N//                               <5=> CK_XOSC
N//          <i> Internal clock output source select.
N#define CONF_CSC_CKO_SEL                  0x00000000  // 152
N//      </e>
N//</h>
N
N//*** <<< end of configuration section >>>    ***
N
N// CSC_INT bit 0 ~ 31
N#define CONF_CSC_IEA                      0x00000000          // 000, 000
N#define CONF_CSC_XOSC_IE                  0x00000000          // 001, 001
N#define CONF_CSC_ILRCO_IE                 0x00000000          // 004, 004
N#define CONF_CSC_IHRCO_IE                 0x00000000          // 005, 005
N#define CONF_CSC_PLL_IE                   0x00000000          // 006, 006
N#define CONF_CSC_MCD_IE                   0x00000000          // 007, 007
N                                         
N#define CONF_CSC_PLL_MDS                  0x00000001 /*MG32_3RD must be retention and value is 0x00000001 */
N                                         
N#define CONF_CSC_STA              0X00000000
N#define CONF_CSC_INT              (CONF_CSC_IEA | CONF_CSC_XOSC_IE | CONF_CSC_ILRCO_IE | CONF_CSC_IHRCO_IE | CONF_CSC_PLL_IE | CONF_CSC_MCD_IE)
N#define CONF_CSC_KEY              0x00000000
N
N#define CONF_CSC_PLL              (CONF_CSC_PLL_MUL | CONF_CSC_XOSC_GN)
N#define CONF_CSC_CR0              (CONF_CSC_MCD_DIS | CONF_CSC_LS_SEL | CONF_CSC_HS_SEL | CONF_CSC_MAIN_SEL | CONF_CSC_ST_SEL | CONF_CSC_IHRCO_SEL | CONF_CSC_MCD_SEL)
N#define CONF_CSC_DIV              (CONF_CSC_PLLI_DIV | CONF_CSC_PLLO_DIV | CONF_CSC_AHB_DIV | CONF_CSC_APB_DIV | CONF_CSC_UT_DIV)
N
N#define CONF_CSC_CKO              (CONF_CSC_CKO_EN | CONF_CSC_CKO_DIV | CONF_CSC_CKO_SEL)
N#define CONF_CSC_AHB              (CONF_CSC_IOPA_EN | CONF_CSC_IOPB_EN | CONF_CSC_IOPC_EN | CONF_CSC_IOPD_EN | CONF_CSC_IOPE_EN | CONF_CSC_GPL_EN | CONF_CSC_EMB_EN | CONF_CSC_DMA_EN)
N#define CONF_CSC_APB0             (CONF_CSC_ADC0 | CONF_CSC_CMP_EN | CONF_CSC_DAC_EN | CONF_CSC_RTC_EN | CONF_CSC_IWDT_EN | CONF_CSC_WWDT_EN | CONF_CSC_I2C0_EN | CONF_CSC_I2C1_EN | CONF_CSC_SPI0_EN | CONF_CSC_URT0_EN | CONF_CSC_URT1_EN | CONF_CSC_URT2_EN | CONF_CSC_URT3_EN)
N#define CONF_CSC_APB1             (CONF_CSC_TM00_EN | CONF_CSC_TM01_EN | CONF_CSC_TM10_EN | CONF_CSC_TM16_EN | CONF_CSC_TM20_EN | CONF_CSC_TM26_EN | CONF_CSC_TM36_EN)
N#define CONF_CSC_SLP0             (CONF_CSC_SLP_ADC0 | CONF_CSC_SLP_CMP | CONF_CSC_SLP_DAC | CONF_CSC_SLP_RTC | CONF_CSC_SLP_IWDT | CONF_CSC_SLP_WWDT | CONF_CSC_SLP_I2C0 | CONF_CSC_SLP_I2C1 | CONF_CSC_SLP_SPI0 | CONF_CSC_SLP_URT0 | CONF_CSC_SLP_URT1 | CONF_CSC_SLP_URT2 | CONF_CSC_SLP_URT3)
N#define CONF_CSC_SLP1             (CONF_CSC_SLP_TM00 | CONF_CSC_SLP_TM01 | CONF_CSC_SLP_TM10 | CONF_CSC_SLP_TM16 | CONF_CSC_SLP_TM20 | CONF_CSC_SLP_TM26 | CONF_CSC_SLP_TM36 | CONF_CSC_SLP_EMB )
N#define CONF_CSC_STP0             (CONF_CSC_STP_RTC | CONF_CSC_STP_IWDT)
N#define CONF_CSC_STP1             0x00000000
N#define CONF_CSC_CSK0             (CONF_CSC_ADC0_CKS |  CONF_CSC_CMP_CKS |  CONF_CSC_DAC_CKS)
N#define CONF_CSC_CSK1             (CONF_CSC_I2C0_CKS | CONF_CSC_I2C1_CKS | CONF_CSC_SPI0_CKS | CONF_CSC_URT0_CKS | CONF_CSC_URT1_CKS | CONF_CSC_URT2_CKS | CONF_CSC_URT3_CKS)
N#define CONF_CSC_CSK2             (CONF_CSC_TM00_CKS | CONF_CSC_TM01_CKS | CONF_CSC_TM10_CKS | CONF_CSC_TM16_CKS | CONF_CSC_TM20_CKS | CONF_CSC_TM26_CKS | CONF_CSC_TM36_CKS)
N
N    /* Calculate CK_xxx Frequency */
N// CONF_CK_HS_FREQ
N#if CONF_CSC_HS_SEL == 0x00000000
X#if 0x00000000 == 0x00000000
N    #if CONF_CSC_IHRCO_SEL == 0x00000000
X    #if 0x00000000 == 0x00000000
N        #define CONF_CK_HS_FREQ   12000000
N    #else
S        #define CONF_CK_HS_FREQ   11059200
N    #endif
N#elif CONF_CSC_HS_SEL == 0x00000400
S    #define CONF_CK_HS_FREQ   CONF_XOSC_EXTCK_FREQ
S#elif CONF_CSC_HS_SEL == 0x00000800
S    #define CONF_CK_HS_FREQ   32000
S#elif CONF_CSC_HS_SEL == 0x00000C00
S    #define CONF_CK_HS_FREQ   CONF_XOSC_EXTCK_FREQ
N#endif
N
N// CONF_PLLI_DIV
N#if CONF_CSC_PLLI_DIV == 0x00000000
X#if 0x00000001 == 0x00000000
S    #define CONF_PLLI_DIV     1
N#elif CONF_CSC_PLLI_DIV == 0x00000001
X#elif 0x00000001 == 0x00000001
N    #define CONF_PLLI_DIV     2
N#elif CONF_CSC_PLLI_DIV == 0x00000002
S    #define CONF_PLLI_DIV     4
S#elif CONF_CSC_PLLI_DIV == 0x00000003
S    #define CONF_PLLI_DIV     6
N#endif
N
N// CONF_PLL_MUL
N    #if CONF_CSC_PLL_MUL == 0x00000000
X    #if 0x00000000 == 0x00000000
N        #define CONF_CSC_PLL_MUL_VAL      16
N    #elif CONF_CSC_PLL_MUL == 0x00000100
S        #define CONF_CSC_PLL_MUL_VAL      24
N    #endif
N// CONF_PLLO_DIV
N#if CONF_CSC_PLLO_DIV == 0x00000000
X#if 0x00000000 == 0x00000000
N    #define CONF_PLLO_DIV     4
N#elif CONF_CSC_PLLO_DIV == 0x00000010
S    #define CONF_PLLO_DIV     3
S#elif CONF_CSC_PLLO_DIV == 0x00000020
S    #define CONF_PLLO_DIV     2
S#elif CONF_CSC_PLLO_DIV == 0x00000030
S    #define CONF_PLLO_DIV     1
N#endif
N// CONF_CK_MAIN_FREQ
N#if CONF_CSC_MAIN_SEL == 0x00000000
X#if 0x00000000 == 0x00000000
N    #define CONF_CK_MAIN_FREQ     CONF_CK_HS_FREQ
N// When CK_AMIN = CK_PLLI
N#elif CONF_CSC_MAIN_SEL == 0x00004000
S    // When CSC_PLLI_SEL == CK_HS
S    #if CONF_CSC_PLLI_SEL == 0x00000000
S        #define CONF_CK_MAIN_FREQ     CONF_CK_HS_FREQ/CONF_PLLI_DIV
S    // When CSC_PLLI_SEL == CK_HS2
S    #else
S        #define CONF_CK_MAIN_FREQ     CONF_CK_HS2_FREQ/CONF_PLLI_DIV
S    #endif
S
S// When CK_MAIN == CK_PLLO 
S#elif CONF_CSC_MAIN_SEL == 0x00008000
S    // When CSC_PLLI_SEL == CK_HS
S    #if CONF_CSC_PLLI_SEL == 0x00000000
S        #define CONF_CK_MAIN_FREQ     CONF_CK_HS_FREQ /CONF_PLLI_DIV *CONF_CSC_PLL_MUL_VAL /CONF_PLLO_DIV
S    // When CSC_PLLI_SEL == CK_HS2
S    #else
S        #define CONF_CK_MAIN_FREQ     CONF_CK_HS2_FREQ /CONF_PLLI_DIV *CONF_CSC_PLL_MUL_VAL /CONF_PLLO_DIV
S    #endif
N#endif
N
N// CONF_CK_APB_FREQ
N#if CONF_CSC_APB_DIV == 0x00000000
X#if 0x00000000 == 0x00000000
N    #define CONF_CK_APB_FREQ      CONF_CK_MAIN_FREQ /1
N#elif CONF_CSC_APB_DIV == 0x00010000
S    #define CONF_CK_APB_FREQ      CONF_CK_MAIN_FREQ /2
S#elif CONF_CSC_APB_DIV == 0x00020000
S    #define CONF_CK_APB_FREQ      CONF_CK_MAIN_FREQ /4
S#elif CONF_CSC_APB_DIV == 0x00030000
S    #define CONF_CK_APB_FREQ      CONF_CK_MAIN_FREQ /8
S#elif CONF_CSC_APB_DIV == 0x00040000
S    #define CONF_CK_APB_FREQ      CONF_CK_MAIN_FREQ /16
N#endif
N
N// CONF_CK_AHB_FREQ
N#if CONF_CSC_AHB_DIV == 0x00000000
X#if 0x00000000 == 0x00000000
N    #define CONF_CK_AHB_FREQ      CONF_CK_APB_FREQ /1
N#elif CONF_CSC_AHB_DIV == 0x00000100
S    #define CONF_CK_AHB_FREQ      CONF_CK_APB_FREQ /2
S#elif CONF_CSC_AHB_DIV == 0x00000200
S    #define CONF_CK_AHB_FREQ      CONF_CK_APB_FREQ /4
S#elif CONF_CSC_AHB_DIV == 0x00000300
S    #define CONF_CK_AHB_FREQ      CONF_CK_APB_FREQ /8
S#elif CONF_CSC_AHB_DIV == 0x00000400
S    #define CONF_CK_AHB_FREQ      CONF_CK_APB_FREQ /16
S#elif CONF_CSC_AHB_DIV == 0x00000500
S    #define CONF_CK_AHB_FREQ      CONF_CK_APB_FREQ /32
S#elif CONF_CSC_AHB_DIV == 0x00000600
S    #define CONF_CK_AHB_FREQ      CONF_CK_APB_FREQ /64
S#elif CONF_CSC_AHB_DIV == 0x00000700
S    #define CONF_CK_AHB_FREQ      CONF_CK_APB_FREQ /128
S#elif CONF_CSC_AHB_DIV == 0x00000800
S    #define CONF_CK_AHB_FREQ      CONF_CK_APB_FREQ /256
S#elif CONF_CSC_AHB_DIV == 0x00000900
S    #define CONF_CK_AHB_FREQ      CONF_CK_APB_FREQ /512
N#endif
N
N// Flash wait state setting
N#if CONF_CK_AHB_FREQ <= 25000000
X#if 12000000 /1 /1 <= 25000000
N    #define CONF_FLASH_WAIT_STATE    MEM_CR0_FWAIT_zero_w
N#elif CONF_CK_AHB_FREQ <= 50000000
S    #define CONF_FLASH_WAIT_STATE    MEM_CR0_FWAIT_one_w
S#elif CONF_CK_AHB_FREQ > 50000000
S    #define CONF_FLASH_WAIT_STATE    MEM_CR0_FWAIT_two_w
N#endif
N
N/**
N ******************************************************************************
N *
N * @struct      CONF_CSC_InitConfig[]
N *              CSC initial configuration array
N *
N ******************************************************************************
N */
Nstatic const unsigned int CSC_InitConfig[] =
N{
N    CONF_CSC_STA,     /* CSC_STA 0 not use */
X    0X00000000,      
N    CONF_CSC_INT,     /* CSC_INT 1 not use */
X    (0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000),      
N    CONF_CSC_PLL,     /* CSC_PLL 2 */
X    (0x00000000 | 0x00010000),      
N    CONF_CSC_KEY,     /* CSC_KEY 3 not use */
X    0x00000000,      
N    CONF_CSC_CR0,     /* CSC_CR0 4 */
X    (0x00000010 | 0x00000200 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000),      
N    CONF_CSC_DIV,     /* CSC_DIV 5 */
X    (0x00000001 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000),      
N    CONF_CSC_CKO,     /* CSC_CKO 6 */
X    (0x00000000 | 0x00000008 | 0x00000000),      
N    CONF_CSC_AHB,     /* CSC_AHB 7 */
X    (0x00000001 | 0x00000002 | 0x00000004 | 0x00000008 | 0x00000010 | 0x00000100 | 0x00001000 | 0x00008000),      
N    CONF_CSC_APB0,    /* CSC_APB0 8 */
X    (0x00000001 | 0x00000004 | 0x00000008 | 0x00000020 | 0x00000040 | 0x00000080 | 0x00000100 | 0x00000200 | 0x00001000 | 0x00010000 | 0x00020000 | 0x00040000 | 0x00080000),     
N    CONF_CSC_APB1,    /* CSC_APB1 9 */
X    (0x00000001 | 0x00000002 | 0x00000010 | 0x00000080 | 0x00000100 | 0x00000800 | 0x00008000),     
N    CONF_CSC_SLP0,    /* CSC_SLP0 10 */
X    (0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000),     
N    CONF_CSC_SLP1,    /* CSC_SLP1 11 */
X    (0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 ),     
N    CONF_CSC_STP0,    /* CSC_STP0 12 */
X    (0x00000000 | 0x00000000),     
N    CONF_CSC_STP1,    /* CSC_STP1 13 */
X    0x00000000,     
N    CONF_CSC_CSK0,    /* CSC_CSK0 14 */
X    (0x00000000 | 0x00000004 | 0x00000000),     
N    CONF_CSC_CSK1,    /* CSC_CSK1 15 */
X    (0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000),     
N    CONF_CSC_CSK2,    /* CSC_CSK2 16 */
X    (0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000 | 0x00000000),     
N    0x000000000,      /* CSC_OTHER 17 . bit0: 0: extern clock, 1: crystal clock */
N    CONF_XOSC_EXTCK_FREQ,    /* XOSC_EXTCLK_FREQ 18 */
X    12000000,     
N    CONF_FLASH_WAIT_STATE,   /* CK_APB_FREQ 19 */
X    ((uint32_t)0x00000000),    
N};
N
N
N/**
N * @name    Function announce
N *   
N */
N///@{  
Nvoid CSC_Init (uint32_t* CSC_CFG);
N///@}
N
N
N#endif  // _MG32x02z_CSC_INIT_H
N
L 32 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_CSC_MID.h" 2
N#include "MG32x02z_CSC.h"
N#include "MG32x02z_CFG.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z_CFG.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_CFG.h
N *
N * @brief       MG32x02z CFG Register Definitions Header File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:41 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z_CFG_H
N#define _MG32x02z_CFG_H
N#define _MG32x02z_CFG_H_VER                         3.9     /*!< File Version */
N
N#if !(MG32x02z_H_VER == MG32x02z_CFG_H_VER)
S    #error "MG32x02z_CFG_H - Main/Module Version Mismatch !"
N#endif
N
N/**
N ******************************************************************************
N *
N * @struct      CFG_Struct
N *              CFG  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    __I uint32_t  RESERVED0[3];         /*!< RESERVED0  ~ Offset[0x00]  Reserved */
X    volatile const uint32_t  RESERVED0[3];          
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint16_t KEY           :16;    //[15..0] CFG key register
X            volatile uint16_t KEY           :16;    
N                                        //0 = Unprotected
N                                        //1 = Protected
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }KEY;                               /*!< KEY        ~ Offset[0x0C]  CFG write protected Key register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  BOOT_MS       :2;     //[1..0] System cold reset boot memory select and memory is mapped at 0x0000 0000
X            volatile const  uint8_t  BOOT_MS       :2;     
N                                        //0x0 = Application Flash
N                                        //0x1 = Boot Flash
N                                        //0x2 = Embedded SRAM
N                                        //0x3 = Reserved
N            __I  uint8_t                :5;     //[6..2] 
X            volatile const  uint8_t                :5;     
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  LOCK_DIS      :1;     //[8] Main Flash code locked enable
X            volatile const  uint8_t  LOCK_DIS      :1;     
N                                        //0 = Enable
N                                        //1 = Disable (Code dump on Writer is transparent)
N            __I  uint8_t                :7;     //[15..9] 
X            volatile const  uint8_t                :7;     
N            __I  uint8_t  BOD1_TH       :2;     //[17..16] BOD1 detect voltage threshold select.
X            volatile const  uint8_t  BOD1_TH       :2;     
N                                        //0x0 = 2.0v
N                                        //0x1 = 2.4v
N                                        //0x2 = 3.7v
N                                        //0x3 = 4.2v
N            __I  uint8_t                :2;     //[19..18] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :2;     //[21..20] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :2;     //[23..22] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t  BOD0_WE       :1;     //[24] BOD0 trigger Warm reset enable
X            volatile const  uint8_t  BOD0_WE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t  BOD1_WE       :1;     //[25] BOD1 trigger Warm reset enable
X            volatile const  uint8_t  BOD1_WE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :6;     //[31..26] 
X            volatile const  uint8_t                :6;     
N        }MBIT;
N    }OR00;                              /*!< OR00       ~ Offset[0x10]  CFG option byte register 00 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :8;     //[7..0] 
X            volatile const  uint8_t                :8;     
N            __I  uint8_t  IAP_SIZE      :8;     //[15..8] IAP memory size select
X            volatile const  uint8_t  IAP_SIZE      :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }OR01;                              /*!< OR01       ~ Offset[0x14]  CFG option byte register 01 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :8;     //[7..0] 
X            volatile const  uint8_t                :8;     
N            __I  uint8_t  ISP_SIZE      :8;     //[15..8] ISP memory size select
X            volatile const  uint8_t  ISP_SIZE      :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }OR02;                              /*!< OR02       ~ Offset[0x18]  CFG option byte register 02 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  IWDT_EN       :1;     //[0] IWDT enable after Cold reset
X            volatile const  uint8_t  IWDT_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t  IWDT_WP       :1;     //[1] IWDT registers write protected enable
X            volatile const  uint8_t  IWDT_WP       :1;     
N                                        //0 = Disable
N                                        //1 = Enable : Write-protected
N            __I  uint8_t  IWDT_WE       :1;     //[2] IWDT reset generation enable option
X            volatile const  uint8_t  IWDT_WE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  IWDT_DIV      :4;     //[7..4] IWDT internal clock CK_IWDT_INT input divider select
X            volatile const  uint8_t  IWDT_DIV      :4;     
N                                        //0x0 = DIV1 : divided by 1
N                                        //0x1 = DIV2 : divided by 2
N                                        //0x2 = DIV4 : divided by 4
N                                        //0x3 = DIV8 : divided by 8
N                                        //0x4 = DIV16 : divided by 16
N                                        //0x5 = DIV32 : divided by 32
N                                        //0x6 = DIV64 : divided by 64
N                                        //0x7 = DIV128 : divided by 128
N                                        //0x8 = DIV256 : divided by 256 
N                                        //0x9 = DIV512 : divided by 512
N                                        //0xA = DIV1024 : divided by 1024
N                                        //0xB = DIV2048 : divided by 2048
N                                        //0xC = DIV4096 : divided by 4096
N            __I  uint8_t  IWDT_SLP      :1;     //[8] IWDT counting control when chip in SLEEP mode
X            volatile const  uint8_t  IWDT_SLP      :1;     
N                                        //0 = Stop : Stop counting
N                                        //1 = Keep : Keep counting
N            __I  uint8_t  IWDT_STP      :1;     //[9] IWDT counting control when chip in STOP mode
X            volatile const  uint8_t  IWDT_STP      :1;     
N                                        //0 = Stop : Stop counting
N                                        //1 = Keep : Keep counting
N            __I  uint8_t                :6;     //[15..10] 
X            volatile const  uint8_t                :6;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }OR03;                              /*!< OR03       ~ Offset[0x1C]  CFG option byte register 03 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  IAP_AEN       :1;     //[0] IAP memory size MEM_IAP_SIZE register write  access disable.
X            volatile const  uint8_t  IAP_AEN       :1;     
N                                        //0 = Disable : Register access lock
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :5;     //[6..2] 
X            volatile const  uint8_t                :5;     
N            __I  uint8_t  HSP_EN        :1;     //[7] Flash memory high speed mode enable.
X            volatile const  uint8_t  HSP_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }OR04;                              /*!< OR04       ~ Offset[0x20]  CFG option byte register 04 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  EXRST_PIN     :1;     //[0] External reset pin control after power-on
X            volatile const  uint8_t  EXRST_PIN     :1;     
N                                        //0 = Enable
N                                        //1 = Disable
N            __I  uint8_t  SWD_PIN       :1;     //[1] SWD interface pin control after power-on
X            volatile const  uint8_t  SWD_PIN       :1;     
N                                        //0 = Enable
N                                        //1 = Disable
N            __I  uint8_t                :1;     //[2] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :5;     //[7..3] 
X            volatile const  uint8_t                :5;     
N            __I  uint8_t  PON_MDS       :1;     //[8] Fast power-up time mode select.
X            volatile const  uint8_t  PON_MDS       :1;     
N                                        //0= Fast : 4ms
N                                        //1= Slow : 32ms
N            __I  uint8_t                :7;     //[15..9] 
X            volatile const  uint8_t                :7;     
N            __I  uint8_t                :1;     //[16] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  HS_SEL        :1;     //[17] CK_HS clock source select after power-on (Cold reset)
X            volatile const  uint8_t  HS_SEL        :1;     
N                                        //0 = IHRCO
N                                        //1 = ILRCO
N            __I  uint8_t                :2;     //[19..18] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t  PLL_CTL       :2;     //[21..20] PLL control bits
X            volatile const  uint8_t  PLL_CTL       :2;     
N            __I  uint8_t  HSWKP         :2;     //[23..22] Wakeup delay selection from STOP mode.
X            volatile const  uint8_t  HSWKP         :2;     
N                                        //0x0 = 0us
N                                        //0x1 = 30us
N                                        //0x2 = 60us
N                                        //0x3 = 120us
N            __I  uint8_t  XOSC_GN       :2;     //[25..24] Gain control bits of XOSC.
X            volatile const  uint8_t  XOSC_GN       :2;     
N                                        //0x0 = 32K_Normal (for 32KHz crystal)
N                                        //0x1 = Medium
N                                        //0x2 = 32K_Lowest (for 32KHz crystal)
N                                        //0x3 = Reserved
N            __I  uint8_t                :2;     //[27..26] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t  XOSC_DB       :1;     //[28] XOSC clock debounce cycle select
X            volatile const  uint8_t  XOSC_DB       :1;     
N                                        //0 = 4096
N                                        //1 = 1024
N            __I  uint8_t                :1;     //[29] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[30] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  XOSC_EN       :1;     //[31] XOSC crystal oscillation circuit enable
X            volatile const  uint8_t  XOSC_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N        }MBIT;
N    }OR05;                              /*!< OR05       ~ Offset[0x24]  CFG option byte register 05 */
N
N    __I uint32_t  RESERVED1;            /*!< RESERVED1  ~ Offset[0x28]  Reserved */
X    volatile const uint32_t  RESERVED1;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :1;     //[0] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  CG21          :1;     //[1] OR control bit. (This bit is loaded by inverting from option byte flash data.)
X            volatile const  uint8_t  CG21          :1;     
N                                        //0= Disable
N                                        //1= Enable
N            __I  uint8_t  CG22          :1;     //[2] OR control bit. (This bit is loaded by inverting from option byte flash data.)
X            volatile const  uint8_t  CG22          :1;     
N                                        //0= Disable
N                                        //1= Enable
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[4] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  LVRDE         :1;     //[5] OR control bit. (This bit is loaded by inverting from option byte flash data.)
X            volatile const  uint8_t  LVRDE         :1;     
N                                        //0= Disable
N                                        //1= Enable
N            __I  uint8_t  LVRDS0        :1;     //[6] OR control bit. (This bit is loaded by inverting from option byte flash data.)
X            volatile const  uint8_t  LVRDS0        :1;     
N                                        //0= Disable
N                                        //1= Enable
N            __I  uint8_t  LVRDS1        :1;     //[7] OR control bit. (This bit is loaded by inverting from option byte flash data.)
X            volatile const  uint8_t  LVRDS1        :1;     
N                                        //0= Disable
N                                        //1= Enable
N            __I  uint8_t  PNDCE         :1;     //[8] OR control bit. (This bit is loaded by inverting from option byte flash data.)
X            volatile const  uint8_t  PNDCE         :1;     
N                                        //0= Disable
N                                        //1= Enable
N            __I  uint8_t  PNDRC         :1;     //[9] OR control bit. (This bit is loaded by inverting from option byte flash data.)
X            volatile const  uint8_t  PNDRC         :1;     
N                                        //0= Disable
N                                        //1= Enable
N            __I  uint8_t  PORDS         :1;     //[10] OR control bit. (This bit is loaded by inverting from option byte flash data.)
X            volatile const  uint8_t  PORDS         :1;     
N                                        //0= Disable
N                                        //1= Enable
N            __I  uint8_t  DPORDS        :1;     //[11] OR control bit. (This bit is loaded by inverting from option byte flash data.)
X            volatile const  uint8_t  DPORDS        :1;     
N                                        //0= Disable
N                                        //1= Enable
N            __I  uint8_t  CGIL          :1;     //[12] OR control bit. (This bit is loaded by inverting from option byte flash data.)
X            volatile const  uint8_t  CGIL          :1;     
N                                        //0= Disable
N                                        //1= Enable
N            __I  uint8_t  GF            :3;     //[15..13] OR control bit. (This bit is loaded by inverting from option byte flash data.)
X            volatile const  uint8_t  GF            :3;     
N                                        //0= Disable
N                                        //1= Enable
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }OR07;                              /*!< OR07       ~ Offset[0x2C]  CFG option byte register 07 */
N
N    __I uint32_t  RESERVED2;            /*!< RESERVED2  ~ Offset[0x30]  Reserved */
X    volatile const uint32_t  RESERVED2;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  VBG_OTRM      :3;     //[2..0] BandGap reference voltage output trimming bits.
X            volatile uint8_t  VBG_OTRM      :3;     
N            __I  uint8_t                :5;     //[7..3] 
X            volatile const  uint8_t                :5;     
N            __IO uint8_t  VBG_BTRM      :4;     //[11..8] BandGap buffer output trimming bits.
X            volatile uint8_t  VBG_BTRM      :4;     
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  DAC_CTRM0     :5;     //[20..16] DAC-0 output current trimming bits.
X            volatile uint8_t  DAC_CTRM0     :5;     
N            __I  uint8_t                :3;     //[23..21] 
X            volatile const  uint8_t                :3;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }OR11;                              /*!< OR11       ~ Offset[0x34]  CFG option byte register 11 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :8;     //[7..0] 
X            volatile const  uint8_t                :8;     
N            __IO uint8_t  BOD1_TRM      :4;     //[11..8] Reserved
X            volatile uint8_t  BOD1_TRM      :4;     
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  LVR_TRM       :4;     //[19..16] Reserved
X            volatile uint8_t  LVR_TRM       :4;     
N            __I  uint8_t                :4;     //[23..20] 
X            volatile const  uint8_t                :4;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }OR12;                              /*!< OR12       ~ Offset[0x38]  CFG option byte register 12 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  IHR0_FTRM     :7;     //[6..0] Reserved
X            volatile uint8_t  IHR0_FTRM     :7;     
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  IHR0_CTRM     :2;     //[9..8] Reserved
X            volatile uint8_t  IHR0_CTRM     :2;     
N            __I  uint8_t                :6;     //[15..10] 
X            volatile const  uint8_t                :6;     
N            __IO uint8_t  IHR1_FTRM     :7;     //[22..16] Reserved
X            volatile uint8_t  IHR1_FTRM     :7;     
N            __I  uint8_t                :1;     //[23] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  IHR1_CTRM     :2;     //[25..24] Reserved
X            volatile uint8_t  IHR1_CTRM     :2;     
N            __I  uint8_t                :6;     //[31..26] 
X            volatile const  uint8_t                :6;     
N        }MBIT;
N    }OR13;                              /*!< OR13       ~ Offset[0x3C]  CFG option byte register 13 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  ILR_TRM       :2;     //[1..0] Reserved
X            volatile uint8_t  ILR_TRM       :2;     
N            __I  uint8_t                :6;     //[7..2] 
X            volatile const  uint8_t                :6;     
N            __IO uint8_t  IHR_BGTV      :2;     //[9..8] Reserved
X            volatile uint8_t  IHR_BGTV      :2;     
N            __I  uint8_t                :3;     //[12..10] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  IHR_BGTI      :3;     //[15..13] Reserved
X            volatile uint8_t  IHR_BGTI      :3;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }OR14;                              /*!< OR14       ~ Offset[0x40]  CFG option byte register 14 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :8;     //[7..0] 
X            volatile const  uint8_t                :8;     
N            __IO uint8_t  ADC0_REFB     :6;     //[13..8] ADC0 reference voltage bottom level setting.
X            volatile uint8_t  ADC0_REFB     :6;     
N            __I  uint8_t                :2;     //[15..14] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  ADC0_REFM     :6;     //[21..16] ADC0 reference voltage middle level setting.
X            volatile uint8_t  ADC0_REFM     :6;     
N            __I  uint8_t                :2;     //[23..22] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  ADC0_REFT     :6;     //[29..24] ADC0 reference voltage top level setting.
X            volatile uint8_t  ADC0_REFT     :6;     
N            __I  uint8_t                :2;     //[31..30] 
X            volatile const  uint8_t                :2;     
N        }MBIT;
N    }OR15;                              /*!< OR15       ~ Offset[0x44]  CFG option byte register 15 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint16_t TEMP_CAL0     :12;    //[11..0] Temperature Sensor calibration value acquired at 25 degree-C.
X            volatile uint16_t TEMP_CAL0     :12;    
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __IO uint16_t TEMP_CAL1     :12;    //[27..16] Temperature Sensor calibration value acquired at 60 degree-C.
X            volatile uint16_t TEMP_CAL1     :12;    
N            __I  uint8_t                :4;     //[31..28] 
X            volatile const  uint8_t                :4;     
N        }MBIT;
N    }OR16;                              /*!< OR16       ~ Offset[0x48]  CFG option byte register 16 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  LDO_TRM       :3;     //[2..0] Reserved
X            volatile uint8_t  LDO_TRM       :3;     
N            __I  uint8_t                :5;     //[7..3] 
X            volatile const  uint8_t                :5;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }OR17;                              /*!< OR17       ~ Offset[0x4C]  CFG option byte register 17 */
N
N    __I uint32_t  RESERVED3[4];         /*!< RESERVED3  ~ Offset[0x50]  Reserved */
X    volatile const uint32_t  RESERVED3[4];          
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  POF0          :1;     //[0] Test using flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  POF0          :1;     
N            __IO uint8_t  POF1          :1;     //[1] Test using flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  POF1          :1;     
N            __IO uint8_t  POF2          :1;     //[2] Test using flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  POF2          :1;     
N            __IO uint8_t  DPORF         :1;     //[3] Test using flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  DPORF         :1;     
N            __IO uint8_t  LVRF0         :1;     //[4] Test using flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  LVRF0         :1;     
N            __IO uint8_t  DBLVRF        :1;     //[5] Test using flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  DBLVRF        :1;     
N            __IO uint8_t  PNDF          :1;     //[6] Test using flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  PNDF          :1;     
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }TST0;                              /*!< TST0       ~ Offset[0x60]  CFG Test register 0 (not load from flash memory) */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  FLH_WE        :1;     //[0] Enable flash write operation when BOD0 active(low voltage).
X            volatile uint8_t  FLH_WE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :7;     //[7..1] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  BOD_OE        :1;     //[8] BOD0/1 output enable
X            volatile uint8_t  BOD_OE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  LVR_DIS       :1;     //[9] LVR disable bit
X            volatile uint8_t  LVR_DIS       :1;     
N                                        //0 = Enable
N                                        //1 = Disable
N            __I  uint8_t                :6;     //[15..10] 
X            volatile const  uint8_t                :6;     
N            __IO uint8_t  IHRCK_OE      :1;     //[16] IHRCO clock output enable
X            volatile uint8_t  IHRCK_OE      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  ILRCK_OE      :1;     //[17] ILRCO clock output enable
X            volatile uint8_t  ILRCK_OE      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  ILRCO_EN      :1;     //[18] Internal Low frequency RC Oscillator Enable
X            volatile uint8_t  ILRCO_EN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :5;     //[23..19] 
X            volatile const  uint8_t                :5;     
N            __IO uint8_t  PLL_TST       :1;     //[24] PLL test enable.
X            volatile uint8_t  PLL_TST       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[25] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :6;     //[31..26] 
X            volatile const  uint8_t                :6;     
N        }MBIT;
N    }TST1;                              /*!< TST1       ~ Offset[0x64]  CFG Test register 1 (not load from flash memory) */
N
N} CFG_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        CFG  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define CFG_Base                        ((uint32_t)0x4FF00000)              /*!< Hardware Option Bytes Configure Control */
N#define CFG                             ((CFG_Struct*) CFG_Base)
N///@}
N
N/**
N ******************************************************************************
N *
N * @name        CFG  [Register Definitions]
N *
N ******************************************************************************
N */
N/**
N ******************************************************************************
N * @name        CFG_KEY  [register's definitions]
N *              Offset[0x0C]  CFG write protected Key register (0x4FF0000C)
N ******************************************************************************
N */
N///@{
N#define CFG_KEY_default                             ((uint32_t)0x00000001)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_KEY */
N#define CFG_KEY_KEY_mask_w                          ((uint32_t)0x0000FFFF)  /*!< Bit Mask of 32bit */
N#define CFG_KEY_KEY_mask_h0                         ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define CFG_KEY_KEY_unprotected_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Unprotected of 32bit */
N#define CFG_KEY_KEY_unprotected_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Unprotected of 16bit */
N#define CFG_KEY_KEY_unprotected_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Unprotected of 8bit */
N#define CFG_KEY_KEY_protected_w                     ((uint32_t)0x00000001)  /*!< Bit Value =(1):Protected of 32bit */
N#define CFG_KEY_KEY_protected_h0                    ((uint16_t)0x0001)      /*!< Bit Value =(1):Protected of 16bit */
N#define CFG_KEY_KEY_protected_b0                    ((uint8_t )0x01)        /*!< Bit Value =(1):Protected of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR00  [register's definitions]
N *              Offset[0x10]  CFG option byte register 00 (0x4FF00010)
N ******************************************************************************
N */
N///@{
N#define CFG_OR00_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR00 */
N#define CFG_OR00_BOD1_WE_mask_w                     ((uint32_t)0x02000000)  /*!< Bit Mask of 32bit */
N#define CFG_OR00_BOD1_WE_mask_h1                    ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define CFG_OR00_BOD1_WE_mask_b3                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CFG_OR00_BOD1_WE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR00_BOD1_WE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR00_BOD1_WE_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR00_BOD1_WE_enable_w                   ((uint32_t)0x02000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR00_BOD1_WE_enable_h1                  ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR00_BOD1_WE_enable_b3                  ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR00_BOD0_WE_mask_w                     ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define CFG_OR00_BOD0_WE_mask_h1                    ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CFG_OR00_BOD0_WE_mask_b3                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_OR00_BOD0_WE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR00_BOD0_WE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR00_BOD0_WE_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR00_BOD0_WE_enable_w                   ((uint32_t)0x01000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR00_BOD0_WE_enable_h1                  ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR00_BOD0_WE_enable_b3                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR00_BOD1_TH_mask_w                     ((uint32_t)0x00030000)  /*!< Bit Mask of 32bit */
N#define CFG_OR00_BOD1_TH_mask_h1                    ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define CFG_OR00_BOD1_TH_mask_b2                    ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define CFG_OR00_BOD1_TH_2_0v_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):2.0v of 32bit */
N#define CFG_OR00_BOD1_TH_2_0v_h1                    ((uint16_t)0x0000)      /*!< Bit Value =(0x0):2.0v of 16bit */
N#define CFG_OR00_BOD1_TH_2_0v_b2                    ((uint8_t )0x00)        /*!< Bit Value =(0x0):2.0v of 8bit */
N#define CFG_OR00_BOD1_TH_2_4v_w                     ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):2.4v of 32bit */
N#define CFG_OR00_BOD1_TH_2_4v_h1                    ((uint16_t)0x0001)      /*!< Bit Value =(0x1):2.4v of 16bit */
N#define CFG_OR00_BOD1_TH_2_4v_b2                    ((uint8_t )0x01)        /*!< Bit Value =(0x1):2.4v of 8bit */
N#define CFG_OR00_BOD1_TH_3_7v_w                     ((uint32_t)0x00020000)  /*!< Bit Value =(0x2):3.7v of 32bit */
N#define CFG_OR00_BOD1_TH_3_7v_h1                    ((uint16_t)0x0002)      /*!< Bit Value =(0x2):3.7v of 16bit */
N#define CFG_OR00_BOD1_TH_3_7v_b2                    ((uint8_t )0x02)        /*!< Bit Value =(0x2):3.7v of 8bit */
N#define CFG_OR00_BOD1_TH_4_2v_w                     ((uint32_t)0x00030000)  /*!< Bit Value =(0x3):4.2v of 32bit */
N#define CFG_OR00_BOD1_TH_4_2v_h1                    ((uint16_t)0x0003)      /*!< Bit Value =(0x3):4.2v of 16bit */
N#define CFG_OR00_BOD1_TH_4_2v_b2                    ((uint8_t )0x03)        /*!< Bit Value =(0x3):4.2v of 8bit */
N
N#define CFG_OR00_LOCK_DIS_mask_w                    ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CFG_OR00_LOCK_DIS_mask_h0                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CFG_OR00_LOCK_DIS_mask_b1                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_OR00_LOCK_DIS_enable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Enable of 32bit */
N#define CFG_OR00_LOCK_DIS_enable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Enable of 16bit */
N#define CFG_OR00_LOCK_DIS_enable_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Enable of 8bit */
N#define CFG_OR00_LOCK_DIS_disable_w                 ((uint32_t)0x00000100)  /*!< Bit Value =(1):Disable of 32bit */
N#define CFG_OR00_LOCK_DIS_disable_h0                ((uint16_t)0x0100)      /*!< Bit Value =(1):Disable of 16bit */
N#define CFG_OR00_LOCK_DIS_disable_b1                ((uint8_t )0x01)        /*!< Bit Value =(1):Disable of 8bit */
N
N#define CFG_OR00_BOOT_MS_mask_w                     ((uint32_t)0x00000003)  /*!< Bit Mask of 32bit */
N#define CFG_OR00_BOOT_MS_mask_h0                    ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define CFG_OR00_BOOT_MS_mask_b0                    ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define CFG_OR00_BOOT_MS_application_flash_w        ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Application Flash of 32bit */
N#define CFG_OR00_BOOT_MS_application_flash_h0       ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Application Flash of 16bit */
N#define CFG_OR00_BOOT_MS_application_flash_b0       ((uint8_t )0x00)        /*!< Bit Value =(0x0):Application Flash of 8bit */
N#define CFG_OR00_BOOT_MS_boot_flash_w               ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):Boot Flash of 32bit */
N#define CFG_OR00_BOOT_MS_boot_flash_h0              ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Boot Flash of 16bit */
N#define CFG_OR00_BOOT_MS_boot_flash_b0              ((uint8_t )0x01)        /*!< Bit Value =(0x1):Boot Flash of 8bit */
N#define CFG_OR00_BOOT_MS_embedded_sram_w            ((uint32_t)0x00000002)  /*!< Bit Value =(0x2):Embedded SRAM of 32bit */
N#define CFG_OR00_BOOT_MS_embedded_sram_h0           ((uint16_t)0x0002)      /*!< Bit Value =(0x2):Embedded SRAM of 16bit */
N#define CFG_OR00_BOOT_MS_embedded_sram_b0           ((uint8_t )0x02)        /*!< Bit Value =(0x2):Embedded SRAM of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR01  [register's definitions]
N *              Offset[0x14]  CFG option byte register 01 (0x4FF00014)
N ******************************************************************************
N */
N///@{
N#define CFG_OR01_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR01 */
N#define CFG_OR01_IAP_SIZE_mask_w                    ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define CFG_OR01_IAP_SIZE_mask_h0                   ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define CFG_OR01_IAP_SIZE_mask_b1                   ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define CFG_OR01_IAP_SIZE_shift_w                   (8)                     /*!< Bit Shift of 32bit */
N#define CFG_OR01_IAP_SIZE_shift_h0                  (8)                     /*!< Bit Shift of 16bit */
N#define CFG_OR01_IAP_SIZE_shift_b1                  (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR02  [register's definitions]
N *              Offset[0x18]  CFG option byte register 02 (0x4FF00018)
N ******************************************************************************
N */
N///@{
N#define CFG_OR02_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR02 */
N#define CFG_OR02_ISP_SIZE_mask_w                    ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define CFG_OR02_ISP_SIZE_mask_h0                   ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define CFG_OR02_ISP_SIZE_mask_b1                   ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define CFG_OR02_ISP_SIZE_shift_w                   (8)                     /*!< Bit Shift of 32bit */
N#define CFG_OR02_ISP_SIZE_shift_h0                  (8)                     /*!< Bit Shift of 16bit */
N#define CFG_OR02_ISP_SIZE_shift_b1                  (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR03  [register's definitions]
N *              Offset[0x1C]  CFG option byte register 03 (0x4FF0001C)
N ******************************************************************************
N */
N///@{
N#define CFG_OR03_default                            ((uint32_t)0x000000C0)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR03 */
N#define CFG_OR03_IWDT_STP_mask_w                    ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define CFG_OR03_IWDT_STP_mask_h0                   ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define CFG_OR03_IWDT_STP_mask_b1                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CFG_OR03_IWDT_STP_stop_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Stop of 32bit */
N#define CFG_OR03_IWDT_STP_stop_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Stop of 16bit */
N#define CFG_OR03_IWDT_STP_stop_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Stop of 8bit */
N#define CFG_OR03_IWDT_STP_keep_w                    ((uint32_t)0x00000200)  /*!< Bit Value =(1):Keep of 32bit */
N#define CFG_OR03_IWDT_STP_keep_h0                   ((uint16_t)0x0200)      /*!< Bit Value =(1):Keep of 16bit */
N#define CFG_OR03_IWDT_STP_keep_b1                   ((uint8_t )0x02)        /*!< Bit Value =(1):Keep of 8bit */
N
N#define CFG_OR03_IWDT_SLP_mask_w                    ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CFG_OR03_IWDT_SLP_mask_h0                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CFG_OR03_IWDT_SLP_mask_b1                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_OR03_IWDT_SLP_stop_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Stop of 32bit */
N#define CFG_OR03_IWDT_SLP_stop_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Stop of 16bit */
N#define CFG_OR03_IWDT_SLP_stop_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Stop of 8bit */
N#define CFG_OR03_IWDT_SLP_keep_w                    ((uint32_t)0x00000100)  /*!< Bit Value =(1):Keep of 32bit */
N#define CFG_OR03_IWDT_SLP_keep_h0                   ((uint16_t)0x0100)      /*!< Bit Value =(1):Keep of 16bit */
N#define CFG_OR03_IWDT_SLP_keep_b1                   ((uint8_t )0x01)        /*!< Bit Value =(1):Keep of 8bit */
N
N#define CFG_OR03_IWDT_DIV_mask_w                    ((uint32_t)0x000000F0)  /*!< Bit Mask of 32bit */
N#define CFG_OR03_IWDT_DIV_mask_h0                   ((uint16_t)0x00F0)      /*!< Bit Mask of 16bit */
N#define CFG_OR03_IWDT_DIV_mask_b0                   ((uint8_t )0xF0)        /*!< Bit Mask of 8bit */
N#define CFG_OR03_IWDT_DIV_div1_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):DIV1 of 32bit */
N#define CFG_OR03_IWDT_DIV_div1_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):DIV1 of 16bit */
N#define CFG_OR03_IWDT_DIV_div1_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):DIV1 of 8bit */
N#define CFG_OR03_IWDT_DIV_div2_w                    ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):DIV2 of 32bit */
N#define CFG_OR03_IWDT_DIV_div2_h0                   ((uint16_t)0x0010)      /*!< Bit Value =(0x1):DIV2 of 16bit */
N#define CFG_OR03_IWDT_DIV_div2_b0                   ((uint8_t )0x10)        /*!< Bit Value =(0x1):DIV2 of 8bit */
N#define CFG_OR03_IWDT_DIV_div4_w                    ((uint32_t)0x00000020)  /*!< Bit Value =(0x2):DIV4 of 32bit */
N#define CFG_OR03_IWDT_DIV_div4_h0                   ((uint16_t)0x0020)      /*!< Bit Value =(0x2):DIV4 of 16bit */
N#define CFG_OR03_IWDT_DIV_div4_b0                   ((uint8_t )0x20)        /*!< Bit Value =(0x2):DIV4 of 8bit */
N#define CFG_OR03_IWDT_DIV_div8_w                    ((uint32_t)0x00000030)  /*!< Bit Value =(0x3):DIV8 of 32bit */
N#define CFG_OR03_IWDT_DIV_div8_h0                   ((uint16_t)0x0030)      /*!< Bit Value =(0x3):DIV8 of 16bit */
N#define CFG_OR03_IWDT_DIV_div8_b0                   ((uint8_t )0x30)        /*!< Bit Value =(0x3):DIV8 of 8bit */
N#define CFG_OR03_IWDT_DIV_div16_w                   ((uint32_t)0x00000040)  /*!< Bit Value =(0x4):DIV16 of 32bit */
N#define CFG_OR03_IWDT_DIV_div16_h0                  ((uint16_t)0x0040)      /*!< Bit Value =(0x4):DIV16 of 16bit */
N#define CFG_OR03_IWDT_DIV_div16_b0                  ((uint8_t )0x40)        /*!< Bit Value =(0x4):DIV16 of 8bit */
N#define CFG_OR03_IWDT_DIV_div32_w                   ((uint32_t)0x00000050)  /*!< Bit Value =(0x5):DIV32 of 32bit */
N#define CFG_OR03_IWDT_DIV_div32_h0                  ((uint16_t)0x0050)      /*!< Bit Value =(0x5):DIV32 of 16bit */
N#define CFG_OR03_IWDT_DIV_div32_b0                  ((uint8_t )0x50)        /*!< Bit Value =(0x5):DIV32 of 8bit */
N#define CFG_OR03_IWDT_DIV_div64_w                   ((uint32_t)0x00000060)  /*!< Bit Value =(0x6):DIV64 of 32bit */
N#define CFG_OR03_IWDT_DIV_div64_h0                  ((uint16_t)0x0060)      /*!< Bit Value =(0x6):DIV64 of 16bit */
N#define CFG_OR03_IWDT_DIV_div64_b0                  ((uint8_t )0x60)        /*!< Bit Value =(0x6):DIV64 of 8bit */
N#define CFG_OR03_IWDT_DIV_div128_w                  ((uint32_t)0x00000070)  /*!< Bit Value =(0x7):DIV128 of 32bit */
N#define CFG_OR03_IWDT_DIV_div128_h0                 ((uint16_t)0x0070)      /*!< Bit Value =(0x7):DIV128 of 16bit */
N#define CFG_OR03_IWDT_DIV_div128_b0                 ((uint8_t )0x70)        /*!< Bit Value =(0x7):DIV128 of 8bit */
N#define CFG_OR03_IWDT_DIV_div256_w                  ((uint32_t)0x00000080)  /*!< Bit Value =(0x8):DIV256 of 32bit */
N#define CFG_OR03_IWDT_DIV_div256_h0                 ((uint16_t)0x0080)      /*!< Bit Value =(0x8):DIV256 of 16bit */
N#define CFG_OR03_IWDT_DIV_div256_b0                 ((uint8_t )0x80)        /*!< Bit Value =(0x8):DIV256 of 8bit */
N#define CFG_OR03_IWDT_DIV_div512_w                  ((uint32_t)0x00000090)  /*!< Bit Value =(0x9):DIV512 of 32bit */
N#define CFG_OR03_IWDT_DIV_div512_h0                 ((uint16_t)0x0090)      /*!< Bit Value =(0x9):DIV512 of 16bit */
N#define CFG_OR03_IWDT_DIV_div512_b0                 ((uint8_t )0x90)        /*!< Bit Value =(0x9):DIV512 of 8bit */
N#define CFG_OR03_IWDT_DIV_div1024_w                 ((uint32_t)0x000000A0)  /*!< Bit Value =(0xA):DIV1024 of 32bit */
N#define CFG_OR03_IWDT_DIV_div1024_h0                ((uint16_t)0x00A0)      /*!< Bit Value =(0xA):DIV1024 of 16bit */
N#define CFG_OR03_IWDT_DIV_div1024_b0                ((uint8_t )0xA0)        /*!< Bit Value =(0xA):DIV1024 of 8bit */
N#define CFG_OR03_IWDT_DIV_div2048_w                 ((uint32_t)0x000000B0)  /*!< Bit Value =(0xB):DIV2048 of 32bit */
N#define CFG_OR03_IWDT_DIV_div2048_h0                ((uint16_t)0x00B0)      /*!< Bit Value =(0xB):DIV2048 of 16bit */
N#define CFG_OR03_IWDT_DIV_div2048_b0                ((uint8_t )0xB0)        /*!< Bit Value =(0xB):DIV2048 of 8bit */
N#define CFG_OR03_IWDT_DIV_div4096_w                 ((uint32_t)0x000000C0)  /*!< Bit Value =(0xC):DIV4096 of 32bit */
N#define CFG_OR03_IWDT_DIV_div4096_h0                ((uint16_t)0x00C0)      /*!< Bit Value =(0xC):DIV4096 of 16bit */
N#define CFG_OR03_IWDT_DIV_div4096_b0                ((uint8_t )0xC0)        /*!< Bit Value =(0xC):DIV4096 of 8bit */
N
N#define CFG_OR03_IWDT_WE_mask_w                     ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define CFG_OR03_IWDT_WE_mask_h0                    ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CFG_OR03_IWDT_WE_mask_b0                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CFG_OR03_IWDT_WE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR03_IWDT_WE_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR03_IWDT_WE_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR03_IWDT_WE_enable_w                   ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR03_IWDT_WE_enable_h0                  ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR03_IWDT_WE_enable_b0                  ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR03_IWDT_WP_mask_w                     ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define CFG_OR03_IWDT_WP_mask_h0                    ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CFG_OR03_IWDT_WP_mask_b0                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CFG_OR03_IWDT_WP_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR03_IWDT_WP_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR03_IWDT_WP_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR03_IWDT_WP_enable_w                   ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR03_IWDT_WP_enable_h0                  ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR03_IWDT_WP_enable_b0                  ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR03_IWDT_EN_mask_w                     ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CFG_OR03_IWDT_EN_mask_h0                    ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CFG_OR03_IWDT_EN_mask_b0                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_OR03_IWDT_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR03_IWDT_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR03_IWDT_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR03_IWDT_EN_enable_w                   ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR03_IWDT_EN_enable_h0                  ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR03_IWDT_EN_enable_b0                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR04  [register's definitions]
N *              Offset[0x20]  CFG option byte register 04 (0x4FF00020)
N ******************************************************************************
N */
N///@{
N#define CFG_OR04_default                            ((uint32_t)0x00000001)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR04 */
N#define CFG_OR04_HSP_EN_mask_w                      ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define CFG_OR04_HSP_EN_mask_h0                     ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define CFG_OR04_HSP_EN_mask_b0                     ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define CFG_OR04_HSP_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR04_HSP_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR04_HSP_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR04_HSP_EN_enable_w                    ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR04_HSP_EN_enable_h0                   ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR04_HSP_EN_enable_b0                   ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR04_IAP_AEN_mask_w                     ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CFG_OR04_IAP_AEN_mask_h0                    ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CFG_OR04_IAP_AEN_mask_b0                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_OR04_IAP_AEN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR04_IAP_AEN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR04_IAP_AEN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR04_IAP_AEN_enable_w                   ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR04_IAP_AEN_enable_h0                  ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR04_IAP_AEN_enable_b0                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR05  [register's definitions]
N *              Offset[0x24]  CFG option byte register 05 (0x4FF00024)
N ******************************************************************************
N */
N///@{
N#define CFG_OR05_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR05 */
N#define CFG_OR05_XOSC_EN_mask_w                     ((uint32_t)0x80000000)  /*!< Bit Mask of 32bit */
N#define CFG_OR05_XOSC_EN_mask_h1                    ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define CFG_OR05_XOSC_EN_mask_b3                    ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define CFG_OR05_XOSC_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR05_XOSC_EN_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR05_XOSC_EN_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR05_XOSC_EN_enable_w                   ((uint32_t)0x80000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR05_XOSC_EN_enable_h1                  ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR05_XOSC_EN_enable_b3                  ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR05_XOSC_DB_mask_w                     ((uint32_t)0x10000000)  /*!< Bit Mask of 32bit */
N#define CFG_OR05_XOSC_DB_mask_h1                    ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define CFG_OR05_XOSC_DB_mask_b3                    ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CFG_OR05_XOSC_DB_4096_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):4096 of 32bit */
N#define CFG_OR05_XOSC_DB_4096_h1                    ((uint16_t)0x0000)      /*!< Bit Value =(0):4096 of 16bit */
N#define CFG_OR05_XOSC_DB_4096_b3                    ((uint8_t )0x00)        /*!< Bit Value =(0):4096 of 8bit */
N#define CFG_OR05_XOSC_DB_1024_w                     ((uint32_t)0x10000000)  /*!< Bit Value =(1):1024 of 32bit */
N#define CFG_OR05_XOSC_DB_1024_h1                    ((uint16_t)0x1000)      /*!< Bit Value =(1):1024 of 16bit */
N#define CFG_OR05_XOSC_DB_1024_b3                    ((uint8_t )0x10)        /*!< Bit Value =(1):1024 of 8bit */
N
N#define CFG_OR05_XOSC_GN_mask_w                     ((uint32_t)0x03000000)  /*!< Bit Mask of 32bit */
N#define CFG_OR05_XOSC_GN_mask_h1                    ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define CFG_OR05_XOSC_GN_mask_b3                    ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define CFG_OR05_XOSC_GN_32k_normal_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):32K_Normal of 32bit */
N#define CFG_OR05_XOSC_GN_32k_normal_h1              ((uint16_t)0x0000)      /*!< Bit Value =(0x0):32K_Normal of 16bit */
N#define CFG_OR05_XOSC_GN_32k_normal_b3              ((uint8_t )0x00)        /*!< Bit Value =(0x0):32K_Normal of 8bit */
N#define CFG_OR05_XOSC_GN_medium_w                   ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):Medium of 32bit */
N#define CFG_OR05_XOSC_GN_medium_h1                  ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Medium of 16bit */
N#define CFG_OR05_XOSC_GN_medium_b3                  ((uint8_t )0x01)        /*!< Bit Value =(0x1):Medium of 8bit */
N#define CFG_OR05_XOSC_GN_32k_lowest_w               ((uint32_t)0x02000000)  /*!< Bit Value =(0x2):32K_Lowest of 32bit */
N#define CFG_OR05_XOSC_GN_32k_lowest_h1              ((uint16_t)0x0200)      /*!< Bit Value =(0x2):32K_Lowest of 16bit */
N#define CFG_OR05_XOSC_GN_32k_lowest_b3              ((uint8_t )0x02)        /*!< Bit Value =(0x2):32K_Lowest of 8bit */
N
N#define CFG_OR05_HSWKP_mask_w                       ((uint32_t)0x00C00000)  /*!< Bit Mask of 32bit */
N#define CFG_OR05_HSWKP_mask_h1                      ((uint16_t)0x00C0)      /*!< Bit Mask of 16bit */
N#define CFG_OR05_HSWKP_mask_b2                      ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define CFG_OR05_HSWKP_0us_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):0us of 32bit */
N#define CFG_OR05_HSWKP_0us_h1                       ((uint16_t)0x0000)      /*!< Bit Value =(0x0):0us of 16bit */
N#define CFG_OR05_HSWKP_0us_b2                       ((uint8_t )0x00)        /*!< Bit Value =(0x0):0us of 8bit */
N#define CFG_OR05_HSWKP_30us_w                       ((uint32_t)0x00400000)  /*!< Bit Value =(0x1):30us of 32bit */
N#define CFG_OR05_HSWKP_30us_h1                      ((uint16_t)0x0040)      /*!< Bit Value =(0x1):30us of 16bit */
N#define CFG_OR05_HSWKP_30us_b2                      ((uint8_t )0x40)        /*!< Bit Value =(0x1):30us of 8bit */
N#define CFG_OR05_HSWKP_60us_w                       ((uint32_t)0x00800000)  /*!< Bit Value =(0x2):60us of 32bit */
N#define CFG_OR05_HSWKP_60us_h1                      ((uint16_t)0x0080)      /*!< Bit Value =(0x2):60us of 16bit */
N#define CFG_OR05_HSWKP_60us_b2                      ((uint8_t )0x80)        /*!< Bit Value =(0x2):60us of 8bit */
N#define CFG_OR05_HSWKP_120us_w                      ((uint32_t)0x00C00000)  /*!< Bit Value =(0x3):120us of 32bit */
N#define CFG_OR05_HSWKP_120us_h1                     ((uint16_t)0x00C0)      /*!< Bit Value =(0x3):120us of 16bit */
N#define CFG_OR05_HSWKP_120us_b2                     ((uint8_t )0xC0)        /*!< Bit Value =(0x3):120us of 8bit */
N
N#define CFG_OR05_PLL_CTL_mask_w                     ((uint32_t)0x00300000)  /*!< Bit Mask of 32bit */
N#define CFG_OR05_PLL_CTL_mask_h1                    ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define CFG_OR05_PLL_CTL_mask_b2                    ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define CFG_OR05_PLL_CTL_shift_w                    (20)                    /*!< Bit Shift of 32bit */
N#define CFG_OR05_PLL_CTL_shift_h1                   (4)                     /*!< Bit Shift of 16bit */
N#define CFG_OR05_PLL_CTL_shift_b2                   (4)                     /*!< Bit Shift of 8bit */
N
N#define CFG_OR05_HS_SEL_mask_w                      ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define CFG_OR05_HS_SEL_mask_h1                     ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CFG_OR05_HS_SEL_mask_b2                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CFG_OR05_HS_SEL_ihrco_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):IHRCO of 32bit */
N#define CFG_OR05_HS_SEL_ihrco_h1                    ((uint16_t)0x0000)      /*!< Bit Value =(0):IHRCO of 16bit */
N#define CFG_OR05_HS_SEL_ihrco_b2                    ((uint8_t )0x00)        /*!< Bit Value =(0):IHRCO of 8bit */
N#define CFG_OR05_HS_SEL_ilrco_w                     ((uint32_t)0x00020000)  /*!< Bit Value =(1):ILRCO of 32bit */
N#define CFG_OR05_HS_SEL_ilrco_h1                    ((uint16_t)0x0002)      /*!< Bit Value =(1):ILRCO of 16bit */
N#define CFG_OR05_HS_SEL_ilrco_b2                    ((uint8_t )0x02)        /*!< Bit Value =(1):ILRCO of 8bit */
N
N#define CFG_OR05_PON_MDS_mask_w                     ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CFG_OR05_PON_MDS_mask_h0                    ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CFG_OR05_PON_MDS_mask_b1                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_OR05_PON_MDS_fast_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Fast of 32bit */
N#define CFG_OR05_PON_MDS_fast_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Fast of 16bit */
N#define CFG_OR05_PON_MDS_fast_b1                    ((uint8_t )0x00)        /*!< Bit Value =(0):Fast of 8bit */
N#define CFG_OR05_PON_MDS_slow_w                     ((uint32_t)0x00000100)  /*!< Bit Value =(1):Slow of 32bit */
N#define CFG_OR05_PON_MDS_slow_h0                    ((uint16_t)0x0100)      /*!< Bit Value =(1):Slow of 16bit */
N#define CFG_OR05_PON_MDS_slow_b1                    ((uint8_t )0x01)        /*!< Bit Value =(1):Slow of 8bit */
N
N#define CFG_OR05_SWD_PIN_mask_w                     ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define CFG_OR05_SWD_PIN_mask_h0                    ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CFG_OR05_SWD_PIN_mask_b0                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CFG_OR05_SWD_PIN_enable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Enable of 32bit */
N#define CFG_OR05_SWD_PIN_enable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Enable of 16bit */
N#define CFG_OR05_SWD_PIN_enable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Enable of 8bit */
N#define CFG_OR05_SWD_PIN_disable_w                  ((uint32_t)0x00000002)  /*!< Bit Value =(1):Disable of 32bit */
N#define CFG_OR05_SWD_PIN_disable_h0                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Disable of 16bit */
N#define CFG_OR05_SWD_PIN_disable_b0                 ((uint8_t )0x02)        /*!< Bit Value =(1):Disable of 8bit */
N
N#define CFG_OR05_EXRST_PIN_mask_w                   ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CFG_OR05_EXRST_PIN_mask_h0                  ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CFG_OR05_EXRST_PIN_mask_b0                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_OR05_EXRST_PIN_enable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Enable of 32bit */
N#define CFG_OR05_EXRST_PIN_enable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Enable of 16bit */
N#define CFG_OR05_EXRST_PIN_enable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Enable of 8bit */
N#define CFG_OR05_EXRST_PIN_disable_w                ((uint32_t)0x00000001)  /*!< Bit Value =(1):Disable of 32bit */
N#define CFG_OR05_EXRST_PIN_disable_h0               ((uint16_t)0x0001)      /*!< Bit Value =(1):Disable of 16bit */
N#define CFG_OR05_EXRST_PIN_disable_b0               ((uint8_t )0x01)        /*!< Bit Value =(1):Disable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR07  [register's definitions]
N *              Offset[0x2C]  CFG option byte register 07 (0x4FF0002C)
N ******************************************************************************
N */
N///@{
N#define CFG_OR07_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR07 */
N#define CFG_OR07_GF_mask_w                          ((uint32_t)0x0000E000)  /*!< Bit Mask of 32bit */
N#define CFG_OR07_GF_mask_h0                         ((uint16_t)0xE000)      /*!< Bit Mask of 16bit */
N#define CFG_OR07_GF_mask_b1                         ((uint8_t )0xE0)        /*!< Bit Mask of 8bit */
N#define CFG_OR07_GF_disable_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR07_GF_disable_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR07_GF_disable_b1                      ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR07_GF_enable_w                        ((uint32_t)0x00002000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR07_GF_enable_h0                       ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR07_GF_enable_b1                       ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR07_CGIL_mask_w                        ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define CFG_OR07_CGIL_mask_h0                       ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define CFG_OR07_CGIL_mask_b1                       ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CFG_OR07_CGIL_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR07_CGIL_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR07_CGIL_disable_b1                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR07_CGIL_enable_w                      ((uint32_t)0x00001000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR07_CGIL_enable_h0                     ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR07_CGIL_enable_b1                     ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR07_DPORDS_mask_w                      ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define CFG_OR07_DPORDS_mask_h0                     ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define CFG_OR07_DPORDS_mask_b1                     ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define CFG_OR07_DPORDS_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR07_DPORDS_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR07_DPORDS_disable_b1                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR07_DPORDS_enable_w                    ((uint32_t)0x00000800)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR07_DPORDS_enable_h0                   ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR07_DPORDS_enable_b1                   ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR07_PORDS_mask_w                       ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define CFG_OR07_PORDS_mask_h0                      ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define CFG_OR07_PORDS_mask_b1                      ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CFG_OR07_PORDS_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR07_PORDS_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR07_PORDS_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR07_PORDS_enable_w                     ((uint32_t)0x00000400)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR07_PORDS_enable_h0                    ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR07_PORDS_enable_b1                    ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR07_PNDRC_mask_w                       ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define CFG_OR07_PNDRC_mask_h0                      ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define CFG_OR07_PNDRC_mask_b1                      ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CFG_OR07_PNDRC_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR07_PNDRC_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR07_PNDRC_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR07_PNDRC_enable_w                     ((uint32_t)0x00000200)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR07_PNDRC_enable_h0                    ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR07_PNDRC_enable_b1                    ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR07_PNDCE_mask_w                       ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CFG_OR07_PNDCE_mask_h0                      ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CFG_OR07_PNDCE_mask_b1                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_OR07_PNDCE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR07_PNDCE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR07_PNDCE_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR07_PNDCE_enable_w                     ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR07_PNDCE_enable_h0                    ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR07_PNDCE_enable_b1                    ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR07_LVRDS1_mask_w                      ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define CFG_OR07_LVRDS1_mask_h0                     ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define CFG_OR07_LVRDS1_mask_b0                     ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define CFG_OR07_LVRDS1_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR07_LVRDS1_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR07_LVRDS1_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR07_LVRDS1_enable_w                    ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR07_LVRDS1_enable_h0                   ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR07_LVRDS1_enable_b0                   ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR07_LVRDS0_mask_w                      ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define CFG_OR07_LVRDS0_mask_h0                     ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define CFG_OR07_LVRDS0_mask_b0                     ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define CFG_OR07_LVRDS0_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR07_LVRDS0_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR07_LVRDS0_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR07_LVRDS0_enable_w                    ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR07_LVRDS0_enable_h0                   ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR07_LVRDS0_enable_b0                   ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR07_LVRDE_mask_w                       ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define CFG_OR07_LVRDE_mask_h0                      ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define CFG_OR07_LVRDE_mask_b0                      ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define CFG_OR07_LVRDE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR07_LVRDE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR07_LVRDE_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR07_LVRDE_enable_w                     ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR07_LVRDE_enable_h0                    ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR07_LVRDE_enable_b0                    ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR07_CG22_mask_w                        ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define CFG_OR07_CG22_mask_h0                       ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CFG_OR07_CG22_mask_b0                       ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CFG_OR07_CG22_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR07_CG22_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR07_CG22_disable_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR07_CG22_enable_w                      ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR07_CG22_enable_h0                     ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR07_CG22_enable_b0                     ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_OR07_CG21_mask_w                        ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define CFG_OR07_CG21_mask_h0                       ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CFG_OR07_CG21_mask_b0                       ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CFG_OR07_CG21_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_OR07_CG21_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_OR07_CG21_disable_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_OR07_CG21_enable_w                      ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_OR07_CG21_enable_h0                     ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_OR07_CG21_enable_b0                     ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR11  [register's definitions]
N *              Offset[0x34]  CFG option byte register 11 (0x4FF00034)
N ******************************************************************************
N */
N///@{
N#define CFG_OR11_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR11 */
N#define CFG_OR11_DAC_CTRM0_mask_w                   ((uint32_t)0x001F0000)  /*!< Bit Mask of 32bit */
N#define CFG_OR11_DAC_CTRM0_mask_h1                  ((uint16_t)0x001F)      /*!< Bit Mask of 16bit */
N#define CFG_OR11_DAC_CTRM0_mask_b2                  ((uint8_t )0x1F)        /*!< Bit Mask of 8bit */
N#define CFG_OR11_DAC_CTRM0_shift_w                  (16)                    /*!< Bit Shift of 32bit */
N#define CFG_OR11_DAC_CTRM0_shift_h1                 (0)                     /*!< Bit Shift of 16bit */
N#define CFG_OR11_DAC_CTRM0_shift_b2                 (0)                     /*!< Bit Shift of 8bit */
N
N#define CFG_OR11_VBG_BTRM_mask_w                    ((uint32_t)0x00000F00)  /*!< Bit Mask of 32bit */
N#define CFG_OR11_VBG_BTRM_mask_h0                   ((uint16_t)0x0F00)      /*!< Bit Mask of 16bit */
N#define CFG_OR11_VBG_BTRM_mask_b1                   ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define CFG_OR11_VBG_BTRM_shift_w                   (8)                     /*!< Bit Shift of 32bit */
N#define CFG_OR11_VBG_BTRM_shift_h0                  (8)                     /*!< Bit Shift of 16bit */
N#define CFG_OR11_VBG_BTRM_shift_b1                  (0)                     /*!< Bit Shift of 8bit */
N
N#define CFG_OR11_VBG_OTRM_mask_w                    ((uint32_t)0x00000007)  /*!< Bit Mask of 32bit */
N#define CFG_OR11_VBG_OTRM_mask_h0                   ((uint16_t)0x0007)      /*!< Bit Mask of 16bit */
N#define CFG_OR11_VBG_OTRM_mask_b0                   ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define CFG_OR11_VBG_OTRM_shift_w                   (0)                     /*!< Bit Shift of 32bit */
N#define CFG_OR11_VBG_OTRM_shift_h0                  (0)                     /*!< Bit Shift of 16bit */
N#define CFG_OR11_VBG_OTRM_shift_b0                  (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR12  [register's definitions]
N *              Offset[0x38]  CFG option byte register 12 (0x4FF00038)
N ******************************************************************************
N */
N///@{
N#define CFG_OR12_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR12 */
N#define CFG_OR12_LVR_TRM_mask_w                     ((uint32_t)0x000F0000)  /*!< Bit Mask of 32bit */
N#define CFG_OR12_LVR_TRM_mask_h1                    ((uint16_t)0x000F)      /*!< Bit Mask of 16bit */
N#define CFG_OR12_LVR_TRM_mask_b2                    ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define CFG_OR12_LVR_TRM_shift_w                    (16)                    /*!< Bit Shift of 32bit */
N#define CFG_OR12_LVR_TRM_shift_h1                   (0)                     /*!< Bit Shift of 16bit */
N#define CFG_OR12_LVR_TRM_shift_b2                   (0)                     /*!< Bit Shift of 8bit */
N
N#define CFG_OR12_BOD1_TRM_mask_w                    ((uint32_t)0x00000F00)  /*!< Bit Mask of 32bit */
N#define CFG_OR12_BOD1_TRM_mask_h0                   ((uint16_t)0x0F00)      /*!< Bit Mask of 16bit */
N#define CFG_OR12_BOD1_TRM_mask_b1                   ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define CFG_OR12_BOD1_TRM_shift_w                   (8)                     /*!< Bit Shift of 32bit */
N#define CFG_OR12_BOD1_TRM_shift_h0                  (8)                     /*!< Bit Shift of 16bit */
N#define CFG_OR12_BOD1_TRM_shift_b1                  (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR13  [register's definitions]
N *              Offset[0x3C]  CFG option byte register 13 (0x4FF0003C)
N ******************************************************************************
N */
N///@{
N#define CFG_OR13_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR13 */
N#define CFG_OR13_IHR1_CTRM_mask_w                   ((uint32_t)0x03000000)  /*!< Bit Mask of 32bit */
N#define CFG_OR13_IHR1_CTRM_mask_h1                  ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define CFG_OR13_IHR1_CTRM_mask_b3                  ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define CFG_OR13_IHR1_CTRM_shift_w                  (24)                    /*!< Bit Shift of 32bit */
N#define CFG_OR13_IHR1_CTRM_shift_h1                 (8)                     /*!< Bit Shift of 16bit */
N#define CFG_OR13_IHR1_CTRM_shift_b3                 (0)                     /*!< Bit Shift of 8bit */
N
N#define CFG_OR13_IHR1_FTRM_mask_w                   ((uint32_t)0x007F0000)  /*!< Bit Mask of 32bit */
N#define CFG_OR13_IHR1_FTRM_mask_h1                  ((uint16_t)0x007F)      /*!< Bit Mask of 16bit */
N#define CFG_OR13_IHR1_FTRM_mask_b2                  ((uint8_t )0x7F)        /*!< Bit Mask of 8bit */
N#define CFG_OR13_IHR1_FTRM_shift_w                  (16)                    /*!< Bit Shift of 32bit */
N#define CFG_OR13_IHR1_FTRM_shift_h1                 (0)                     /*!< Bit Shift of 16bit */
N#define CFG_OR13_IHR1_FTRM_shift_b2                 (0)                     /*!< Bit Shift of 8bit */
N
N#define CFG_OR13_IHR0_CTRM_mask_w                   ((uint32_t)0x00000300)  /*!< Bit Mask of 32bit */
N#define CFG_OR13_IHR0_CTRM_mask_h0                  ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define CFG_OR13_IHR0_CTRM_mask_b1                  ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define CFG_OR13_IHR0_CTRM_shift_w                  (8)                     /*!< Bit Shift of 32bit */
N#define CFG_OR13_IHR0_CTRM_shift_h0                 (8)                     /*!< Bit Shift of 16bit */
N#define CFG_OR13_IHR0_CTRM_shift_b1                 (0)                     /*!< Bit Shift of 8bit */
N
N#define CFG_OR13_IHR0_FTRM_mask_w                   ((uint32_t)0x0000007F)  /*!< Bit Mask of 32bit */
N#define CFG_OR13_IHR0_FTRM_mask_h0                  ((uint16_t)0x007F)      /*!< Bit Mask of 16bit */
N#define CFG_OR13_IHR0_FTRM_mask_b0                  ((uint8_t )0x7F)        /*!< Bit Mask of 8bit */
N#define CFG_OR13_IHR0_FTRM_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define CFG_OR13_IHR0_FTRM_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define CFG_OR13_IHR0_FTRM_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR14  [register's definitions]
N *              Offset[0x40]  CFG option byte register 14 (0x4FF00040)
N ******************************************************************************
N */
N///@{
N#define CFG_OR14_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR14 */
N#define CFG_OR14_IHR_BGTI_mask_w                    ((uint32_t)0x0000E000)  /*!< Bit Mask of 32bit */
N#define CFG_OR14_IHR_BGTI_mask_h0                   ((uint16_t)0xE000)      /*!< Bit Mask of 16bit */
N#define CFG_OR14_IHR_BGTI_mask_b1                   ((uint8_t )0xE0)        /*!< Bit Mask of 8bit */
N#define CFG_OR14_IHR_BGTI_shift_w                   (13)                    /*!< Bit Shift of 32bit */
N#define CFG_OR14_IHR_BGTI_shift_h0                  (13)                    /*!< Bit Shift of 16bit */
N#define CFG_OR14_IHR_BGTI_shift_b1                  (5)                     /*!< Bit Shift of 8bit */
N
N#define CFG_OR14_IHR_BGTV_mask_w                    ((uint32_t)0x00000300)  /*!< Bit Mask of 32bit */
N#define CFG_OR14_IHR_BGTV_mask_h0                   ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define CFG_OR14_IHR_BGTV_mask_b1                   ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define CFG_OR14_IHR_BGTV_shift_w                   (8)                     /*!< Bit Shift of 32bit */
N#define CFG_OR14_IHR_BGTV_shift_h0                  (8)                     /*!< Bit Shift of 16bit */
N#define CFG_OR14_IHR_BGTV_shift_b1                  (0)                     /*!< Bit Shift of 8bit */
N
N#define CFG_OR14_ILR_TRM_mask_w                     ((uint32_t)0x00000003)  /*!< Bit Mask of 32bit */
N#define CFG_OR14_ILR_TRM_mask_h0                    ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define CFG_OR14_ILR_TRM_mask_b0                    ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define CFG_OR14_ILR_TRM_shift_w                    (0)                     /*!< Bit Shift of 32bit */
N#define CFG_OR14_ILR_TRM_shift_h0                   (0)                     /*!< Bit Shift of 16bit */
N#define CFG_OR14_ILR_TRM_shift_b0                   (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR15  [register's definitions]
N *              Offset[0x44]  CFG option byte register 15 (0x4FF00044)
N ******************************************************************************
N */
N///@{
N#define CFG_OR15_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR15 */
N#define CFG_OR15_ADC0_REFT_mask_w                   ((uint32_t)0x3F000000)  /*!< Bit Mask of 32bit */
N#define CFG_OR15_ADC0_REFT_mask_h1                  ((uint16_t)0x3F00)      /*!< Bit Mask of 16bit */
N#define CFG_OR15_ADC0_REFT_mask_b3                  ((uint8_t )0x3F)        /*!< Bit Mask of 8bit */
N#define CFG_OR15_ADC0_REFT_shift_w                  (24)                    /*!< Bit Shift of 32bit */
N#define CFG_OR15_ADC0_REFT_shift_h1                 (8)                     /*!< Bit Shift of 16bit */
N#define CFG_OR15_ADC0_REFT_shift_b3                 (0)                     /*!< Bit Shift of 8bit */
N
N#define CFG_OR15_ADC0_REFM_mask_w                   ((uint32_t)0x003F0000)  /*!< Bit Mask of 32bit */
N#define CFG_OR15_ADC0_REFM_mask_h1                  ((uint16_t)0x003F)      /*!< Bit Mask of 16bit */
N#define CFG_OR15_ADC0_REFM_mask_b2                  ((uint8_t )0x3F)        /*!< Bit Mask of 8bit */
N#define CFG_OR15_ADC0_REFM_shift_w                  (16)                    /*!< Bit Shift of 32bit */
N#define CFG_OR15_ADC0_REFM_shift_h1                 (0)                     /*!< Bit Shift of 16bit */
N#define CFG_OR15_ADC0_REFM_shift_b2                 (0)                     /*!< Bit Shift of 8bit */
N
N#define CFG_OR15_ADC0_REFB_mask_w                   ((uint32_t)0x00003F00)  /*!< Bit Mask of 32bit */
N#define CFG_OR15_ADC0_REFB_mask_h0                  ((uint16_t)0x3F00)      /*!< Bit Mask of 16bit */
N#define CFG_OR15_ADC0_REFB_mask_b1                  ((uint8_t )0x3F)        /*!< Bit Mask of 8bit */
N#define CFG_OR15_ADC0_REFB_shift_w                  (8)                     /*!< Bit Shift of 32bit */
N#define CFG_OR15_ADC0_REFB_shift_h0                 (8)                     /*!< Bit Shift of 16bit */
N#define CFG_OR15_ADC0_REFB_shift_b1                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR16  [register's definitions]
N *              Offset[0x48]  CFG option byte register 16 (0x4FF00048)
N ******************************************************************************
N */
N///@{
N#define CFG_OR16_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR16 */
N#define CFG_OR16_TEMP_CAL1_mask_w                   ((uint32_t)0x0FFF0000)  /*!< Bit Mask of 32bit */
N#define CFG_OR16_TEMP_CAL1_mask_h1                  ((uint16_t)0x0FFF)      /*!< Bit Mask of 16bit */
N#define CFG_OR16_TEMP_CAL1_shift_w                  (16)                    /*!< Bit Shift of 32bit */
N#define CFG_OR16_TEMP_CAL1_shift_h1                 (0)                     /*!< Bit Shift of 16bit */
N#define CFG_OR16_TEMP_CAL1_shift_b2                 (0)                     /*!< Bit Shift of 8bit */
N
N#define CFG_OR16_TEMP_CAL0_mask_w                   ((uint32_t)0x00000FFF)  /*!< Bit Mask of 32bit */
N#define CFG_OR16_TEMP_CAL0_mask_h0                  ((uint16_t)0x0FFF)      /*!< Bit Mask of 16bit */
N#define CFG_OR16_TEMP_CAL0_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define CFG_OR16_TEMP_CAL0_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define CFG_OR16_TEMP_CAL0_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_OR17  [register's definitions]
N *              Offset[0x4C]  CFG option byte register 17 (0x4FF0004C)
N ******************************************************************************
N */
N///@{
N#define CFG_OR17_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_OR17 */
N#define CFG_OR17_LDO_TRM_mask_w                     ((uint32_t)0x00000007)  /*!< Bit Mask of 32bit */
N#define CFG_OR17_LDO_TRM_mask_h0                    ((uint16_t)0x0007)      /*!< Bit Mask of 16bit */
N#define CFG_OR17_LDO_TRM_mask_b0                    ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define CFG_OR17_LDO_TRM_shift_w                    (0)                     /*!< Bit Shift of 32bit */
N#define CFG_OR17_LDO_TRM_shift_h0                   (0)                     /*!< Bit Shift of 16bit */
N#define CFG_OR17_LDO_TRM_shift_b0                   (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_TST0  [register's definitions]
N *              Offset[0x60]  CFG Test register 0 (not load from flash memory) (0x4FF00060)
N ******************************************************************************
N */
N///@{
N#define CFG_TST0_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_TST0 */
N#define CFG_TST0_PNDF_mask_w                        ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define CFG_TST0_PNDF_mask_h0                       ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define CFG_TST0_PNDF_mask_b0                       ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define CFG_TST0_PNDF_shift_w                       (6)                     /*!< Bit Shift of 32bit */
N#define CFG_TST0_PNDF_shift_h0                      (6)                     /*!< Bit Shift of 16bit */
N#define CFG_TST0_PNDF_shift_b0                      (6)                     /*!< Bit Shift of 8bit */
N
N#define CFG_TST0_DBLVRF_mask_w                      ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define CFG_TST0_DBLVRF_mask_h0                     ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define CFG_TST0_DBLVRF_mask_b0                     ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define CFG_TST0_DBLVRF_shift_w                     (5)                     /*!< Bit Shift of 32bit */
N#define CFG_TST0_DBLVRF_shift_h0                    (5)                     /*!< Bit Shift of 16bit */
N#define CFG_TST0_DBLVRF_shift_b0                    (5)                     /*!< Bit Shift of 8bit */
N
N#define CFG_TST0_LVRF0_mask_w                       ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define CFG_TST0_LVRF0_mask_h0                      ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define CFG_TST0_LVRF0_mask_b0                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define CFG_TST0_LVRF0_shift_w                      (4)                     /*!< Bit Shift of 32bit */
N#define CFG_TST0_LVRF0_shift_h0                     (4)                     /*!< Bit Shift of 16bit */
N#define CFG_TST0_LVRF0_shift_b0                     (4)                     /*!< Bit Shift of 8bit */
N
N#define CFG_TST0_DPORF_mask_w                       ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define CFG_TST0_DPORF_mask_h0                      ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define CFG_TST0_DPORF_mask_b0                      ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define CFG_TST0_DPORF_shift_w                      (3)                     /*!< Bit Shift of 32bit */
N#define CFG_TST0_DPORF_shift_h0                     (3)                     /*!< Bit Shift of 16bit */
N#define CFG_TST0_DPORF_shift_b0                     (3)                     /*!< Bit Shift of 8bit */
N
N#define CFG_TST0_POF2_mask_w                        ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define CFG_TST0_POF2_mask_h0                       ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CFG_TST0_POF2_mask_b0                       ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CFG_TST0_POF2_shift_w                       (2)                     /*!< Bit Shift of 32bit */
N#define CFG_TST0_POF2_shift_h0                      (2)                     /*!< Bit Shift of 16bit */
N#define CFG_TST0_POF2_shift_b0                      (2)                     /*!< Bit Shift of 8bit */
N
N#define CFG_TST0_POF1_mask_w                        ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define CFG_TST0_POF1_mask_h0                       ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CFG_TST0_POF1_mask_b0                       ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CFG_TST0_POF1_shift_w                       (1)                     /*!< Bit Shift of 32bit */
N#define CFG_TST0_POF1_shift_h0                      (1)                     /*!< Bit Shift of 16bit */
N#define CFG_TST0_POF1_shift_b0                      (1)                     /*!< Bit Shift of 8bit */
N
N#define CFG_TST0_POF0_mask_w                        ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CFG_TST0_POF0_mask_h0                       ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CFG_TST0_POF0_mask_b0                       ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_TST0_POF0_shift_w                       (0)                     /*!< Bit Shift of 32bit */
N#define CFG_TST0_POF0_shift_h0                      (0)                     /*!< Bit Shift of 16bit */
N#define CFG_TST0_POF0_shift_b0                      (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        CFG_TST1  [register's definitions]
N *              Offset[0x64]  CFG Test register 1 (not load from flash memory) (0x4FF00064)
N ******************************************************************************
N */
N///@{
N#define CFG_TST1_default                            ((uint32_t)0x00040000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of CFG_TST1 */
N#define CFG_TST1_PLL_TST_mask_w                     ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define CFG_TST1_PLL_TST_mask_h1                    ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CFG_TST1_PLL_TST_mask_b3                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_TST1_PLL_TST_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_TST1_PLL_TST_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_TST1_PLL_TST_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_TST1_PLL_TST_enable_w                   ((uint32_t)0x01000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_TST1_PLL_TST_enable_h1                  ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_TST1_PLL_TST_enable_b3                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_TST1_ILRCO_EN_mask_w                    ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define CFG_TST1_ILRCO_EN_mask_h1                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define CFG_TST1_ILRCO_EN_mask_b2                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define CFG_TST1_ILRCO_EN_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_TST1_ILRCO_EN_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_TST1_ILRCO_EN_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_TST1_ILRCO_EN_enable_w                  ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_TST1_ILRCO_EN_enable_h1                 ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_TST1_ILRCO_EN_enable_b2                 ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_TST1_ILRCK_OE_mask_w                    ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define CFG_TST1_ILRCK_OE_mask_h1                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define CFG_TST1_ILRCK_OE_mask_b2                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CFG_TST1_ILRCK_OE_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_TST1_ILRCK_OE_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_TST1_ILRCK_OE_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_TST1_ILRCK_OE_enable_w                  ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_TST1_ILRCK_OE_enable_h1                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_TST1_ILRCK_OE_enable_b2                 ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_TST1_IHRCK_OE_mask_w                    ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define CFG_TST1_IHRCK_OE_mask_h1                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CFG_TST1_IHRCK_OE_mask_b2                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_TST1_IHRCK_OE_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_TST1_IHRCK_OE_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_TST1_IHRCK_OE_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_TST1_IHRCK_OE_enable_w                  ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_TST1_IHRCK_OE_enable_h1                 ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_TST1_IHRCK_OE_enable_b2                 ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_TST1_LVR_DIS_mask_w                     ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define CFG_TST1_LVR_DIS_mask_h0                    ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define CFG_TST1_LVR_DIS_mask_b1                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define CFG_TST1_LVR_DIS_enable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Enable of 32bit */
N#define CFG_TST1_LVR_DIS_enable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Enable of 16bit */
N#define CFG_TST1_LVR_DIS_enable_b1                  ((uint8_t )0x00)        /*!< Bit Value =(0):Enable of 8bit */
N#define CFG_TST1_LVR_DIS_disable_w                  ((uint32_t)0x00000200)  /*!< Bit Value =(1):Disable of 32bit */
N#define CFG_TST1_LVR_DIS_disable_h0                 ((uint16_t)0x0200)      /*!< Bit Value =(1):Disable of 16bit */
N#define CFG_TST1_LVR_DIS_disable_b1                 ((uint8_t )0x02)        /*!< Bit Value =(1):Disable of 8bit */
N
N#define CFG_TST1_BOD_OE_mask_w                      ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define CFG_TST1_BOD_OE_mask_h0                     ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define CFG_TST1_BOD_OE_mask_b1                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_TST1_BOD_OE_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_TST1_BOD_OE_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_TST1_BOD_OE_disable_b1                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_TST1_BOD_OE_enable_w                    ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_TST1_BOD_OE_enable_h0                   ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_TST1_BOD_OE_enable_b1                   ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define CFG_TST1_FLH_WE_mask_w                      ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define CFG_TST1_FLH_WE_mask_h0                     ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define CFG_TST1_FLH_WE_mask_b0                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define CFG_TST1_FLH_WE_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define CFG_TST1_FLH_WE_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define CFG_TST1_FLH_WE_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define CFG_TST1_FLH_WE_enable_w                    ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define CFG_TST1_FLH_WE_enable_h0                   ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define CFG_TST1_FLH_WE_enable_b0                   ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N
N#endif  // _MG32x02z_CFG_H
N
N/*----------------------------------------------------------------------------*/
N/*                         End of file MG32x02z_CFG.h                         */
N/*----------------------------------------------------------------------------*/
L 34 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_CSC_MID.h" 2
N
N#ifndef __MG32x02z_CSC_MID_H
N/*!< _MG32x02z_CSC_MID_H */
N#define __MG32x02z_CSC_MID_H
N
N
N
N/*! @name 
N*/
N//!@{ 
N#define CSC_IHRCO_SELECT            CSC_CR0_IHRCO_SEL_mask_w    /*!< CK_IHRCO select mask */
N#define CSC_IHRCO_SELECT_12000000   CSC_CR0_IHRCO_SEL_12_w      /*!< CK_IHTCO select 12MHz */
N#define CSC_IHRCO_SELECT_11059200   CSC_CR0_IHRCO_SEL_11_w      /*!< CK_IHRCO select 11.0592MHz */
N#define ILRCO_VALUE                 ((uint32_t)32000)           /*!< CK_ILRCO frequency */
N
N#define MID_CSC_ICKO_CKO_SEL_MASK   CSC_CKO_CKO_SEL_mask_w      /*!< ICKO select mask */
N#define MID_CSC_ICKO_DIV_MASK       CSC_CKO_CKO_DIV_mask_w      /*!< ICKO divider mask */
N#define MID_CSC_ICKO_EN_MASK        CSC_CKO_CKO_EN_mask_w       /*!< ICKO enable mask */
N
N#define MID_CSC_MCD_SEL_MASK        CSC_CR0_MCD_SEL_mask_w      /*!< MCD select mask */
N#define MID_CSC_MCD_DIS_MASK        CSC_CR0_MCD_DIS_mask_w      /*!< MCD disable mask */
N#define MID_CSC_MCD_DIS_EN          CSC_CR0_MCD_DIS_enable_w    /*!< MCD enable */
N#define MID_CSC_MCD_DIS_DIS         CSC_CR0_MCD_DIS_disable_w   /*!< MCD disable */
N//!@}
N
N
N/*! @enum   MID_CSC_ICKO_Source_TypeDef
N    @brief  ICKO source select
N*/
Ntypedef enum
N{
N    MID_CSC_ICKO_CK_MAIN    = CSC_CKO_CKO_SEL_ck_main_w,    /*!< Select clock source CK_MAIN */
X    MID_CSC_ICKO_CK_MAIN    = ((uint32_t)0x00000000),     
N    MID_CSC_ICKO_CK_AHB     = CSC_CKO_CKO_SEL_ck_ahb_w,     /*!< Select clock source CK_AHB */
X    MID_CSC_ICKO_CK_AHB     = ((uint32_t)0x00000010),      
N    MID_CSC_ICKO_CK_APB     = CSC_CKO_CKO_SEL_ck_apb_w,     /*!< Select clock source CK_APB */
X    MID_CSC_ICKO_CK_APB     = ((uint32_t)0x00000020),      
N    MID_CSC_ICKO_CK_HS      = CSC_CKO_CKO_SEL_ck_hs_w,      /*!< Select clock source CK_HS */
X    MID_CSC_ICKO_CK_HS      = ((uint32_t)0x00000030),       
N    MID_CSC_ICKO_CK_LS      = CSC_CKO_CKO_SEL_ck_ls_w,      /*!< Select clock source CK_LS */
X    MID_CSC_ICKO_CK_LS      = ((uint32_t)0x00000040),       
N    MID_CSC_ICKO_CK_XOSC    = CSC_CKO_CKO_SEL_ck_xosc_w     /*!< Select clock source CK_XOSC */
X    MID_CSC_ICKO_CK_XOSC    = ((uint32_t)0x00000050)      
N}MID_CSC_ICKO_Source_TypeDef;
N
N
N/*! @enum   MID_CSC_ICKO_Div_TypeDef
N    @brief  ICKO divider select
N*/
Ntypedef enum
N{
N    MID_CSC_ICKO_DIV_1      = CSC_CKO_CKO_DIV_div1_w,       /*!< Select clock source divided by 1 */
X    MID_CSC_ICKO_DIV_1      = ((uint32_t)0x00000000),        
N    MID_CSC_ICKO_DIV_2      = CSC_CKO_CKO_DIV_div2_w,       /*!< Select clock source divided by 2 */
X    MID_CSC_ICKO_DIV_2      = ((uint32_t)0x00000004),        
N    MID_CSC_ICKO_DIV_4      = CSC_CKO_CKO_DIV_div4_w,       /*!< Select clock source divided by 4 */
X    MID_CSC_ICKO_DIV_4      = ((uint32_t)0x00000008),        
N    MID_CSC_ICKO_DIV_8      = CSC_CKO_CKO_DIV_div8_w        /*!< Select clock source divided by 8 */
X    MID_CSC_ICKO_DIV_8      = ((uint32_t)0x0000000C)         
N}MID_CSC_ICKO_Div_TypeDef;
N
N
N/*! @enum   MID_CSC_MCD_SEL_TypeDef
N    @brief  MCD duration select.
N*/
Ntypedef enum
N{
N    MID_CSC_MCD_125us  = CSC_CR0_MCD_SEL_125us_w,   /*!< Miss clock detection 125us */
X    MID_CSC_MCD_125us  = ((uint32_t)0x00000000),    
N    MID_CSC_MCD_250us  = CSC_CR0_MCD_SEL_250us_w,   /*!< Miss clock detection 250us */
X    MID_CSC_MCD_250us  = ((uint32_t)0x00400000),    
N    MID_CSC_MCD_500us  = CSC_CR0_MCD_SEL_500us_w,   /*!< Miss clock detection 500us */
X    MID_CSC_MCD_500us  = ((uint32_t)0x00800000),    
N    MID_CSC_MCD_1ms    = CSC_CR0_MCD_SEL_1ms_w,     /*!< Miss clock detection 1ms */
X    MID_CSC_MCD_1ms    = ((uint32_t)0x00C00000),      
N}MID_CSC_MCD_SEL_TypeDef;
N
N
N/*! @enum   MID_CSC_CK_PR_TypeDef
N    @brief  Peripheral clock source selection.
N*/
Ntypedef enum
N{
N    MID_CSC_CK_PR_CORE   =  0x00U,   /*!< Core is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_DMA    =  0x08U,   /*!< DMA is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_USB    =  0x10U,   /*!< USB is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_MEM    =  0x18U,   /*!< MEM is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_EMB    =  0x20U,   /*!< EMB is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_GPL    =  0x28U,   /*!< GPL is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_GPIOA  =  0x30U,   /*!< GPIOA is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_GPIOB  =  0x31U,   /*!< GPIOB is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_GPIOC  =  0x32U,   /*!< GPIOC is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_GPIOD  =  0x33U,   /*!< GPIOD is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_GPIOE  =  0x34U,   /*!< GPIOE is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_GPIOF  =  0x35U,   /*!< GPIOF is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_GPIOG  =  0x36U,   /*!< GPIOG is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_GPIOH  =  0x37U,   /*!< GPIOH is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_CMP    =  0x38U,   /*!< CMP is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_CMP0   =  0x38U,   /*!< CMP is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_CMP1   =  0x39U,   /*!< CMP is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_ADC    =  0x40U,   /*!< ADC is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_ADC0   =  0x40U,   /*!< ADC is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_ADC1   =  0x41U,   /*!< ADC is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_DAC    =  0x48U,   /*!< DAC is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_DAC0   =  0x48U,   /*!< DAC is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_DAC1   =  0x49U,   /*!< DAC is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_IWDT   =  0x50U,   /*!< IWDT is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_WWDT   =  0x51U,   /*!< WWDT is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_RTC    =  0x58U,   /*!< RTC is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_APX    =  0x60U,   /*!< APX is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_TM00   =  0x80U,   /*!< TM00 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_TM01   =  0x81U,   /*!< TM01 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_TM10   =  0x90U,   /*!< TM10 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_TM16   =  0x96U,   /*!< TM16 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_TM20   =  0xA0U,   /*!< TM20 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_TM26   =  0xA6U,   /*!< TM26 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_TM36   =  0xB6U,   /*!< TM36 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_URT0   =  0xD0U,   /*!< URT0 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_URT1   =  0xD1U,   /*!< URT1 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_URT2   =  0xD2U,   /*!< URT2 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_URT3   =  0xD3U,   /*!< URT3 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_URT4   =  0xD4U,   /*!< URT3 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_URT5   =  0xD5U,   /*!< URT3 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_URT6   =  0xD6U,   /*!< URT3 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_URT7   =  0xD7U,   /*!< URT3 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_SPI0   =  0xE0U,   /*!< SPI0 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_SPI1   =  0xE1U,   /*!< SPI1 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_SPI2   =  0xE2U,   /*!< SPI2 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_SPI3   =  0xE3U,   /*!< SPI3 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_I2C0   =  0xF0U,   /*!< I2C0 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_I2C1   =  0xF1U,   /*!< I2C1 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_I2C2   =  0xF2U,   /*!< I2C2 is in CSC CK_PR Freq */
N    MID_CSC_CK_PR_I2C3   =  0xF3U,   /*!< I2C3 is in CSC CK_PR Freq */
N}MID_CSC_CK_PR_TypeDef;
N
N
N/**
N * @name CSC_Interrupt_definition
N *      CSC Interrupt Definition
N */
N//!@{
N#define CSC_IT_IEA              CSC_INT_IEA_mask_w          /*!< CSC interrupt all enable. When disables                    */
N#define CSC_IT_XOSC             CSC_INT_XOSC_IE_mask_w      /*!< XOSC clock stable interrupt enable                         */
N#define CSC_IT_ILRCO            CSC_INT_ILRCO_IE_mask_w     /*!< ILRCO clock stable interrupt enable                        */
N#define CSC_IT_IHRCO            CSC_INT_IHRCO_IE_mask_w     /*!< IHRCO clock stable interrupt enable                        */
N#define CSC_IT_PLL              CSC_INT_PLL_IE_mask_w       /*!< PLL clock stable interrupt enable                          */
N#define CSC_IT_MCD              CSC_INT_MCD_IE_mask_w       /*!< XOSC missing clock detect failure event interrupt enable   */
N//!@}
N
N
N/**
N * @name CSC_Flag_definition
N *      CSC Flg Definition
N */
N//!@{
N#if defined(MG32_3RD)
X#if 0L
S#define CSC_FLAG_PLL_LOCKF      CSC_STA_PLL_LOCKF_mask_w    /*!< PLL clock lock status                          */
N#endif
N#define CSC_FLAG_XOSCF          CSC_STA_XOSCF_mask_w        /*!< XOSC clock stable and ready detect flag        */ 
N#define CSC_FLAG_ILRCOF         CSC_STA_ILRCOF_mask_w       /*!< ILRCO clock stable and ready detect flag       */
N#define CSC_FLAG_IHRCOF         CSC_STA_IHRCOF_mask_w       /*!< IHRCO clock stable and ready detect flag       */
N#define CSC_FLAG_PLLF           CSC_STA_PLLF_mask_w         /*!< PLL clock stable and ready detect flag         */
N#define CSC_FLAG_MCDF           CSC_STA_MCDF_mask_w         /*!< XOSC missing clock detect failure event flag   */
N//!@}
N
N
N/**
N *******************************************************************************
N * @brief       Enable the specified CSC interrupts.
N * @details  
N * @param[in]   "__INTERRUPT__" specifies the interrupt source to enable.
N *              This parameter can be one of the following values:
N *  @arg\b          SYS_IT_IEA: CSC interrupt all enable. When disables
N *  @arg\b          CSC_IT_XOSC: XOSC clock stable interrupt enable
N *  @arg\b          CSC_IT_ILRCO: ILRCO clock stable interrupt enable
N *  @arg\b          CSC_IT_IHRCO: IHRCO clock stable interrupt enable
N *  @arg\b          CSC_IT_PLL: PLL clock stable interrupt enable
N *  @arg\b          CSC_IT_MCD: XOSC missing clock detect failure event interrupt enable
N * @return      None
N * @note
N * @par         Example
N * @code
N    __DRV_CSC_ENABLE_IT(CSC_IT_PLL | SYS_IT_IEA);
N * @endcode
N *******************************************************************************
N */
N#define __DRV_CSC_ENABLE_IT(__INTERRUPT__)  SET_BIT(CSC->INT.W, (__INTERRUPT__))
N
N
N/**
N *******************************************************************************
N * @brief       Disable the specified CSC interrupts.
N * @details  
N * @param[in]   "__INTERRUPT__" specifies the interrupt source to enable.
N *              This parameter can be one of the following values:
N *  @arg\b          SYS_IT_IEA: CSC interrupt all enable. When disables
N *  @arg\b          CSC_IT_XOSC: XOSC clock stable interrupt enable
N *  @arg\b          CSC_IT_ILRCO: ILRCO clock stable interrupt enable
N *  @arg\b          CSC_IT_IHRCO: IHRCO clock stable interrupt enable
N *  @arg\b          CSC_IT_PLL: PLL clock stable interrupt enable
N *  @arg\b          CSC_IT_MCD: XOSC missing clock detect failure event interrupt enable
N * @return      None
N * @note
N * @par         Example
N * @code
N    __DRV_CSC_DISABLE_IT(CSC_IT_PLL);
N * @endcode
N *******************************************************************************
N */
N#define __DRV_CSC_DISABLE_IT(__INTERRUPT__)  CLEAR_BIT(CSC->INT.W, (__INTERRUPT__))
N
N
N/**
N *******************************************************************************
N * @brief       Check whether the specified CSC flag is set or not.
N * @details  
N * @param[in]   "__FLAG__" specifies the flag to check.
N *              This parameter can be one of the following values:
N *  @arg\b          CSC_FLAG_PLL_LOCKF: PLL clock lock status
N *  @arg\b          CSC_FLAG_XOSCF: XOSC clock stable and ready detect flag
N *  @arg\b          CSC_FLAG_ILRCOF: ILRCO clock stable and ready detect flag
N *  @arg\b          CSC_FLAG_IHRCOF: IHRCO clock stable and ready detect flag
N *  @arg\b          CSC_FLAG_PLLF: PLL clock stable and ready detect flag
N *  @arg\b          CSC_FLAG_MCDF: XOSC missing clock detect failure event flag
N * @return      The new state of __IT__ (SET or CLR).
N * @note
N * @par         Example
N * @code
N    if(__DRV_CSC_GET_FLAG(CSC_FLAG_PLL_LOCKF))
N * @endcode
N *******************************************************************************
N */
N#define __DRV_CSC_GET_FLAG(__FLAG__) (((CSC->STA.W) & (__FLAG__)) == (__FLAG__))
N
N
N/**
N *******************************************************************************
N * @brief       Clear CSC flag
N * @details  
N * @param[in]   "__FLAG__" specifies the flag to check.
N *              This parameter can be one of the following values:
N *  @arg\b          CSC_FLAG_PLL_LOCKF: PLL clock lock status
N *  @arg\b          CSC_FLAG_XOSCF: XOSC clock stable and ready detect flag
N *  @arg\b          CSC_FLAG_ILRCOF: ILRCO clock stable and ready detect flag
N *  @arg\b          CSC_FLAG_IHRCOF: IHRCO clock stable and ready detect flag
N *  @arg\b          CSC_FLAG_PLLF: PLL clock stable and ready detect flag
N *  @arg\b          CSC_FLAG_MCDF: XOSC missing clock detect failure event flag
N * @return      The new state of __IT__ (SET or CLR).
N * @note
N * @par         Example
N * @code
N    __MID_CSC_CLEAR_FLAG(CSC_FLAG_PLL_LOCKF);
N * @endcode
N *******************************************************************************
N */
N#define __DRV_CSC_CLEAR_FLAG(__FLAG__) SET_BIT(CSC->STA.W, (__FLAG__))
N
N
N/**
N * @name CSC_Periphery_Clock_Enable_Disable
N *      CSC Periphery Clock Enable/Disable
N */
N//!@{
N#define __DRV_CSC_GPIOA_CLK_ENABLE()    CSC->AHB.W |= CSC_AHB_IOPA_EN_mask_w        /*! GPIOA clock source enable   */
N#define __DRV_CSC_GPIOB_CLK_ENABLE()    CSC->AHB.W |= CSC_AHB_IOPB_EN_mask_w        /*! GPIOB clock source enable   */
N#define __DRV_CSC_GPIOC_CLK_ENABLE()    CSC->AHB.W |= CSC_AHB_IOPC_EN_mask_w        /*! GPIOC clock source enable   */
N#define __DRV_CSC_GPIOD_CLK_ENABLE()    CSC->AHB.W |= CSC_AHB_IOPD_EN_mask_w        /*! GPIOD clock source enable   */
N#if defined(MG32_1ST) || defined(MG32_3RD) 
X#if 1L || 0L 
N#define __DRV_CSC_GPIOE_CLK_ENABLE()    CSC->AHB.W |= CSC_AHB_IOPE_EN_mask_w        /*! GPIOE clock source enable   */
N#endif
N#define __DRV_CSC_GPL_CLK_ENABLE()      CSC->AHB.W |= CSC_AHB_GPL_EN_mask_w         /*! GPL clock source enable     */
N#if defined(MG32_1ST) || defined(MG32_3RD) 
X#if 1L || 0L 
N#define __DRV_CSC_EMB_CLK_ENABLE()      CSC->AHB.W |= CSC_AHB_EMB_EN_mask_w         /*! EMB clock source enable     */
N#endif
N#define __DRV_CSC_DMA_CLK_ENABLE()      CSC->AHB.W |= CSC_AHB_DMA_EN_mask_w         /*! DMA clock source enable     */
N#define __DRV_CSC_ADC0_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_ADC0_EN_mask_w      /*! ADC0 clock source enable    */
N#define __DRV_CSC_CMP_CLK_ENABLE()      CSC->APB0.W |= CSC_APB0_CMP_EN_mask_w       /*! CMP clock source enable     */
N#if defined(MG32_1ST) || defined(MG32_3RD) 
X#if 1L || 0L 
N#define __DRV_CSC_DAC_CLK_ENABLE()      CSC->APB0.W |= CSC_APB0_DAC_EN_mask_w       /*! DAC clock source enable     */
N#endif
N#define __DRV_CSC_RTC_CLK_ENABLE()      CSC->APB0.W |= CSC_APB0_RTC_EN_mask_w       /*! RTC clock source enable     */
N#define __DRV_CSC_IWDT_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_IWDT_EN_mask_w      /*! IWDT clock source enable    */
N#define __DRV_CSC_WWDT_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_WWDT_EN_mask_w      /*! WWDT clock source enable    */
N#define __DRV_CSC_I2C0_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_I2C0_EN_mask_w      /*! I2C0 clock source enable    */
N#if defined(MG32_1ST) || defined(MG32_3RD)                                                          
X#if 1L || 0L                                                          
N#define __DRV_CSC_I2C1_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_I2C1_EN_mask_w      /*! I2C1 clock source enable    */
N#endif                                                                              
N#define __DRV_CSC_SPI0_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_SPI0_EN_mask_w      /*! SPI0 clock source enable    */
N#define __DRV_CSC_URT0_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_URT0_EN_mask_w      /*! URT0 clock source enable    */
N#define __DRV_CSC_URT1_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_URT1_EN_mask_w      /*! URT1 clock source enable    */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_URT2_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_URT2_EN_mask_w      /*! URT2 clock source enable    */
N#endif 
N#if defined(MG32_1ST)
X#if 1L
N#define __DRV_CSC_URT3_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_URT3_EN_mask_w      /*! URT3 clock source enable    */
N#endif
N#if defined(MG32_3RD)                                                                        
X#if 0L                                                                        
S#define __DRV_CSC_URT4_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_URT4_EN_mask_w      /*! URT4 clock source enable    */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_URT5_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_URT5_EN_mask_w      /*! URT5 clock source enable    */
S#define __DRV_CSC_URT6_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_URT6_EN_mask_w      /*! URT6 clock source enable    */
S#define __DRV_CSC_URT7_CLK_ENABLE()     CSC->APB0.W |= CSC_APB0_URT7_EN_mask_w      /*! URT7 clock source enable    */
S#define __DRV_CSC_USB_CLK_ENABLE()      CSC->APB0.W |= CSC_APB0_USB_EN_mask_w       /*! USB clock source enable     */
S#define __DRV_CSC_APX_CLK_ENABLE()      CSC->APB0.W |= CSC_APB0_APX_EN_mask_w       /*! APX clock source enable     */
N#endif
N#define __DRV_CSC_TM00_CLK_ENABLE()     CSC->APB1.W |= CSC_APB1_TM00_EN_mask_w      /*! TM00 clock source enable    */
N#define __DRV_CSC_TM01_CLK_ENABLE()     CSC->APB1.W |= CSC_APB1_TM01_EN_mask_w      /*! TM01 clock source enable    */
N#define __DRV_CSC_TM10_CLK_ENABLE()     CSC->APB1.W |= CSC_APB1_TM10_EN_mask_w      /*! TM10 clock source enable    */
N#define __DRV_CSC_TM16_CLK_ENABLE()     CSC->APB1.W |= CSC_APB1_TM16_EN_mask_w      /*! TM16 clock source enable    */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_TM20_CLK_ENABLE()     CSC->APB1.W |= CSC_APB1_TM20_EN_mask_w      /*! TM20 clock source enable    */
N#endif
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_TM26_CLK_ENABLE()     CSC->APB1.W |= CSC_APB1_TM26_EN_mask_w      /*! TM26 clock source enable    */
N#endif
N#define __DRV_CSC_TM36_CLK_ENABLE()     CSC->APB1.W |= CSC_APB1_TM36_EN_mask_w      /*! TM36 clock source enable    */
N
N#define __DRV_CSC_GPIOA_CLK_DISABLE()   CSC->AHB.W &= ~CSC_AHB_IOPA_EN_mask_w       /*! GPIOA clock source disable   */
N#define __DRV_CSC_GPIOB_CLK_DISABLE()   CSC->AHB.W &= ~CSC_AHB_IOPB_EN_mask_w       /*! GPIOB clock source disable   */
N#define __DRV_CSC_GPIOC_CLK_DISABLE()   CSC->AHB.W &= ~CSC_AHB_IOPC_EN_mask_w       /*! GPIOC clock source disable   */
N#define __DRV_CSC_GPIOD_CLK_DISABLE()   CSC->AHB.W &= ~CSC_AHB_IOPD_EN_mask_w       /*! GPIOD clock source disable   */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_GPIOE_CLK_DISABLE()   CSC->AHB.W &= ~CSC_AHB_IOPE_EN_mask_w       /*! GPIOE clock source disable   */
N#endif
N#define __DRV_CSC_GPL_CLK_DISABLE()     CSC->AHB.W &= ~CSC_AHB_GPL_EN_mask_w        /*! GPL clock source disable     */
N#if defined(MG32_1ST) || defined(MG32_3RD) 
X#if 1L || 0L 
N#define __DRV_CSC_EMB_CLK_DISABLE()     CSC->AHB.W &= ~CSC_AHB_EMB_EN_mask_w        /*! EMB clock source disable     */
N#endif
N#define __DRV_CSC_DMA_CLK_DISABLE()     CSC->AHB.W &= ~CSC_AHB_DMA_EN_mask_w        /*! DMA clock source disable     */
N#define __DRV_CSC_ADC0_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_ADC0_EN_mask_w     /*! ADC0 clock source disable    */
N#define __DRV_CSC_CMP_CLK_DISABLE()     CSC->APB0.W &= ~CSC_APB0_CMP_EN_mask_w      /*! CMP clock source disable     */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_DAC_CLK_DISABLE()     CSC->APB0.W &= ~CSC_APB0_DAC_EN_mask_w      /*! DAC clock source disable     */
N#endif
N#define __DRV_CSC_RTC_CLK_DISABLE()     CSC->APB0.W &= ~CSC_APB0_RTC_EN_mask_w      /*! RTC clock source disable     */
N#define __DRV_CSC_IWDT_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_IWDT_EN_mask_w     /*! IWDT clock source disable    */
N#define __DRV_CSC_WWDT_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_WWDT_EN_mask_w     /*! WWDT clock source disable    */
N#define __DRV_CSC_I2C0_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_I2C0_EN_mask_w     /*! I2C0 clock source disable    */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_I2C1_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_I2C1_EN_mask_w     /*! I2C1 clock source disable    */
N#endif
N#define __DRV_CSC_SPI0_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_SPI0_EN_mask_w     /*! SPI0 clock source disable    */
N#define __DRV_CSC_URT0_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_URT0_EN_mask_w     /*! URT0 clock source disable    */
N#define __DRV_CSC_URT1_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_URT1_EN_mask_w     /*! URT1 clock source disable    */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_URT2_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_URT2_EN_mask_w     /*! URT2 clock source disable    */
N#endif
N#if defined(MG32_1ST) 
X#if 1L 
N#define __DRV_CSC_URT3_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_URT3_EN_mask_w     /*! URT3 clock source disable    */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_URT4_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_URT4_EN_mask_w     /*! URT4 clock source disable    */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_URT5_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_URT5_EN_mask_w     /*! URT5 clock source disable    */
S#define __DRV_CSC_URT6_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_URT6_EN_mask_w     /*! URT6 clock source disable    */
S#define __DRV_CSC_URT7_CLK_DISABLE()    CSC->APB0.W &= ~CSC_APB0_URT7_EN_mask_w     /*! URT7 clock source disable    */
S#define __DRV_CSC_USB_CLK_DISABLE()     CSC->APB0.W &= ~CSC_APB0_USB_EN_mask_w      /*! USB clock source disable     */
S#define __DRV_CSC_APX_CLK_DISABLE()     CSC->APB0.W &= ~CSC_APB0_APX_EN_mask_w      /*! APX clock source disable     */
N#endif
N#define __DRV_CSC_TM00_CLK_DISABLE()    CSC->APB1.W &= ~CSC_APB1_TM00_EN_mask_w     /*! TM00 clock source disable    */
N#define __DRV_CSC_TM01_CLK_DISABLE()    CSC->APB1.W &= ~CSC_APB1_TM01_EN_mask_w     /*! TM01 clock source disable    */
N#define __DRV_CSC_TM10_CLK_DISABLE()    CSC->APB1.W &= ~CSC_APB1_TM10_EN_mask_w     /*! TM10 clock source disable    */
N#define __DRV_CSC_TM16_CLK_DISABLE()    CSC->APB1.W &= ~CSC_APB1_TM16_EN_mask_w     /*! TM16 clock source disable    */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_TM20_CLK_DISABLE()    CSC->APB1.W &= ~CSC_APB1_TM20_EN_mask_w     /*! TM20 clock source disable    */
N#endif
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_TM26_CLK_DISABLE()    CSC->APB1.W &= ~CSC_APB1_TM26_EN_mask_w     /*! TM26 clock source disable    */
N#endif
N#define __DRV_CSC_TM36_CLK_DISABLE()    CSC->APB1.W &= ~CSC_APB1_TM36_EN_mask_w     /*! TM36 clock source disable    */
N//!@}
N
N
N/**
N * @name CSC_Periphery_SLEEP_Mode_Clock_Enable_Disable
N *      CSC Periphery SLEEP Mode Clock Enable/Disable
N */
N//!@{
N#define __DRV_CSC_SLP_ADC0_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_ADC0_mask_w     /*!< ADC module clock enable in SLEEP mode  */
N#define __DRV_CSC_SLP_CMP_CLK_ENABLE()      CSC->SLP0.W |= CSC_SLP0_SLP_CMP_mask_w      /*!< CMP module clock enable in SLEEP mode  */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_SLP_DAC_CLK_ENABLE()      CSC->SLP0.W |= CSC_SLP0_SLP_DAC_mask_w      /*!< DAC module clock enable in SLEEP mode  */
N#endif
N#define __DRV_CSC_SLP_RTC_CLK_ENABLE()      CSC->SLP0.W |= CSC_SLP0_SLP_RTC_mask_w      /*!< RTC module clock enable in SLEEP mode  */
N#define __DRV_CSC_SLP_IWDT_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_IWDT_mask_w     /*!< IWDT module clock enable in SLEEP mode */
N#define __DRV_CSC_SLP_WWDT_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_WWDT_mask_w     /*!< WWDT module clock enable in SLEEP mode */
N#define __DRV_CSC_SLP_I2C0_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_I2C0_mask_w     /*!< I2C0 module clock enable in SLEEP mode */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_SLP_I2C1_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_I2C1_mask_w     /*!< I2C1 module clock enable in SLEEP mode */
N#endif
N#define __DRV_CSC_SLP_SPI0_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_SPI0_mask_w     /*!< SPI0 module clock enable in SLEEP mode */
N#define __DRV_CSC_SLP_URT0_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_URT0_mask_w     /*!< URT0 module clock enable in SLEEP mode */
N#define __DRV_CSC_SLP_URT1_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_URT1_mask_w     /*!< URT1 module clock enable in SLEEP mode */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_SLP_URT2_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_URT2_mask_w     /*!< URT2 module clock enable in SLEEP mode */
N#endif
N#if defined(MG32_1ST)
X#if 1L
N#define __DRV_CSC_SLP_URT3_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_URT3_mask_w     /*!< URT3 module clock enable in SLEEP mode */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_SLP_URT4_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_URT4_mask_w     /*!< URT4 module clock enable in SLEEP mode */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_SLP_URT5_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_URT5_mask_w     /*!< URT5 module clock enable in SLEEP mode */
S#define __DRV_CSC_SLP_URT6_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_URT6_mask_w     /*!< URT6 module clock enable in SLEEP mode */
S#define __DRV_CSC_SLP_URT7_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP0_SLP_URT7_mask_w     /*!< URT7 module clock enable in SLEEP mode */
S#define __DRV_CSC_SLP_USB_CLK_ENABLE()      CSC->SLP0.W |= CSC_SLP0_SLP_USB_mask_w      /*!< USB module clock enable in SLEEP mode  */
S#define __DRV_CSC_SLP_APX_CLK_ENABLE()      CSC->SLP0.W |= CSC_SLP0_SLP_APX_mask_w      /*!< APX module clock enable in SLEEP mode  */
N#endif
N#define __DRV_CSC_SLP_TM00_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP1_SLP_TM00_mask_w     /*!< TM00 module clock enable in SLEEP mode */
N#define __DRV_CSC_SLP_TM01_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP1_SLP_TM01_mask_w     /*!< TM01 module clock enable in SLEEP mode */
N#define __DRV_CSC_SLP_TM10_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP1_SLP_TM10_mask_w     /*!< TM10 module clock enable in SLEEP mode */
N#define __DRV_CSC_SLP_TM16_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP1_SLP_TM16_mask_w     /*!< TM16 module clock enable in SLEEP mode */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_SLP_TM20_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP1_SLP_TM20_mask_w     /*!< TM20 module clock enable in SLEEP mode */
N#endif
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_SLP_TM26_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP1_SLP_TM26_mask_w     /*!< TM26 module clock enable in SLEEP mode */
N#endif
N#define __DRV_CSC_SLP_TM36_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP1_SLP_TM36_mask_w     /*!< TM36 module clock enable in SLEEP mode */
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_SLP_FLASH_CLK_ENABLE()    CSC->SLP0.W |= CSC_SLP1_SLP_FLASH_mask_w    /*!< FLASH module clock enable in SLEEP mode    */
S#define __DRV_CSC_SLP_SRAM_CLK_ENABLE()     CSC->SLP0.W |= CSC_SLP1_SLP_SRAM_mask_w     /*!< SRAM module clock enable in SLEEP mode     */
S#define __DRV_CSC_SLP_DMA_CLK_ENABLE()      CSC->SLP0.W |= CSC_SLP1_SLP_DMA_mask_w      /*!< DMA module clock enable in SLEEP mode      */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_SLP_EMB_CLK_ENABLE()      CSC->SLP0.W |= CSC_SLP1_SLP_EMB_mask_w      /*!< EMB module clock enable in SLEEP mode      */   
N#endif
N
N
N#define __DRV_CSC_SLP_ADC0_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_ADC0_mask_w   /*!< ADC module clock disable in SLEEP mode  */
N#define __DRV_CSC_SLP_CMP_CLK_DISABLE()      CSC->SLP0.W &= ~CSC_SLP0_SLP_CMP_mask_w    /*!< CMP module clock disable in SLEEP mode  */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_SLP_DAC_CLK_DISABLE()      CSC->SLP0.W &= ~CSC_SLP0_SLP_DAC_mask_w    /*!< DAC module clock disable in SLEEP mode  */
N#endif
N#define __DRV_CSC_SLP_RTC_CLK_DISABLE()      CSC->SLP0.W &= ~CSC_SLP0_SLP_RTC_mask_w    /*!< RTC module clock disable in SLEEP mode  */
N#define __DRV_CSC_SLP_IWDT_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_IWDT_mask_w   /*!< IWDT module clock disable in SLEEP mode */
N#define __DRV_CSC_SLP_WWDT_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_WWDT_mask_w   /*!< WWDT module clock disable in SLEEP mode */
N#define __DRV_CSC_SLP_I2C0_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_I2C0_mask_w   /*!< I2C0 module clock disable in SLEEP mode */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_SLP_I2C1_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_I2C1_mask_w   /*!< I2C1 module clock disable in SLEEP mode */
N#endif
N#define __DRV_CSC_SLP_SPI0_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_SPI0_mask_w   /*!< SPI0 module clock disable in SLEEP mode */
N#define __DRV_CSC_SLP_URT0_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_URT0_mask_w   /*!< URT0 module clock disable in SLEEP mode */
N#define __DRV_CSC_SLP_URT1_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_URT1_mask_w   /*!< URT1 module clock disable in SLEEP mode */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_SLP_URT2_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_URT2_mask_w   /*!< URT2 module clock disable in SLEEP mode */
N#endif
N#if defined(MG32_1ST)
X#if 1L
N#define __DRV_CSC_SLP_URT3_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_URT3_mask_w   /*!< URT3 module clock disable in SLEEP mode */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_SLP_URT4_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_URT4_mask_w   /*!< URT4 module clock disable in SLEEP mode */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_SLP_URT5_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_URT5_mask_w   /*!< URT5 module clock disable in SLEEP mode */
S#define __DRV_CSC_SLP_URT6_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_URT6_mask_w   /*!< URT6 module clock disable in SLEEP mode */
S#define __DRV_CSC_SLP_URT7_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP0_SLP_URT7_mask_w   /*!< URT7 module clock disable in SLEEP mode */
S#define __DRV_CSC_SLP_USB_CLK_DISABLE()      CSC->SLP0.W &= ~CSC_SLP0_SLP_USB_mask_w    /*!< USB module clock disable in SLEEP mode  */
S#define __DRV_CSC_SLP_APX_CLK_DISABLE()      CSC->SLP0.W &= ~CSC_SLP0_SLP_APX_mask_w    /*!< APX module clock disable in SLEEP mode  */
N#endif
N#define __DRV_CSC_SLP_TM00_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP1_SLP_TM00_mask_w   /*!< TM00 module clock disable in SLEEP mode */
N#define __DRV_CSC_SLP_TM01_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP1_SLP_TM01_mask_w   /*!< TM01 module clock disable in SLEEP mode */
N#define __DRV_CSC_SLP_TM10_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP1_SLP_TM10_mask_w   /*!< TM10 module clock disable in SLEEP mode */
N#define __DRV_CSC_SLP_TM16_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP1_SLP_TM16_mask_w   /*!< TM16 module clock disable in SLEEP mode */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_SLP_TM20_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP1_SLP_TM20_mask_w   /*!< TM20 module clock disable in SLEEP mode */
N#endif
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_SLP_TM26_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP1_SLP_TM26_mask_w   /*!< TM26 module clock disable in SLEEP mode */
N#endif
N#define __DRV_CSC_SLP_TM36_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP1_SLP_TM36_mask_w   /*!< TM36 module clock disable in SLEEP mode */
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_SLP_FLASH_CLK_DISABLE()    CSC->SLP0.W &= ~CSC_SLP1_SLP_FLASH_mask_w  /*!< FLASH module clock disable in SLEEP mode    */
S#define __DRV_CSC_SLP_SRAM_CLK_DISABLE()     CSC->SLP0.W &= ~CSC_SLP1_SLP_SRAM_mask_w   /*!< SRAM module clock disable in SLEEP mode     */
S#define __DRV_CSC_SLP_DMA_CLK_DISABLE()      CSC->SLP0.W &= ~CSC_SLP1_SLP_DMA_mask_w    /*!< DMA module clock disable in SLEEP mode      */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_SLP_EMB_CLK_DISABLE()      CSC->SLP0.W &= ~CSC_SLP1_SLP_EMB_mask_w    /*!< EMB module clock disable in SLEEP mode      */   
N#endif
N//!@}
N
N
N/**
N * @name CSC_Periphery_STOP_Mode_Clock_Enable_Disable
N *      CSC Periphery STOP Mode Clock Enable/Disable
N */
N//!@{
N#define __DRV_CSC_STP_RTC_CLK_ENABLE()      CSC->STP0.W |= CSC_STP0_STP_RTC_mask_w      /*!< IWDT module clock enable in STOP mode  */
N#define __DRV_CSC_STP_IWDT_CLK_ENABLE()     CSC->STP0.W |= CSC_STP0_STP_IWDT_mask_w     /*!< RTC module clock enable in STOP mode   */
N
N#define __DRV_CSC_STP_RTC_CLK_DISABLE()     CSC->STP0.W &= ~CSC_STP0_STP_RTC_mask_w     /*!< IWDT module clock disable in STOP mode */
N#define __DRV_CSC_STP_IWDT_CLK_DISABLE()    CSC->STP0.W &= ~CSC_STP0_STP_IWDT_mask_w    /*!< RTC module clock disable in STOP mode  */
N//!@}
N
N
N/**
N * @name CSC_Periphery_Clock_Source_Select
N *      CSC Periphery Clock_Source Select
N */
N//!@{
N#define __DRV_CSC_ADC0_CKS_CK_APB()     CSC->CKS0.W &= ~CSC_CKS0_ADC0_CKS_mask_w    /*!< ADC0 process clock source CK_APB */
N#define __DRV_CSC_CMP_CKS_CK_APB()      CSC->CKS0.W &= ~CSC_CKS0_CMP_CKS_mask_w     /*!< CMP process clock source CK_APB */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_DAC_CKS_CK_APB()      CSC->CKS0.W &= ~CSC_CKS0_DAC_CKS_mask_w     /*!< DAC process clock source CK_APB */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_APX_CKS_CK_APB()      CSC->CKS0.W &= ~CSC_CKS0_APX_CKS_mask_w     /*!< APB process clock source CK_APB */
N#endif
N#define __DRV_CSC_I2C0_CKS_CK_APB()     CSC->CKS1.W &= ~CSC_CKS1_I2C0_CKS_mask_w    /*!< I2C0 process clock source CK_APB */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_I2C1_CKS_CK_APB()     CSC->CKS1.W &= ~CSC_CKS1_I2C1_CKS_mask_w    /*!< I2C1 process clock source CK_APB */
N#endif
N#define __DRV_CSC_SPI0_CKS_CK_APB()     CSC->CKS1.W &= ~CSC_CKS1_SPI0_CKS_mask_w    /*!< SPI0 process clock source CK_APB */
N#define __DRV_CSC_URT0_CKS_CK_APB()     CSC->CKS1.W &= ~CSC_CKS1_URT0_CKS_mask_w    /*!< URT0 process clock source CK_APB */
N#define __DRV_CSC_URT1_CKS_CK_APB()     CSC->CKS1.W &= ~CSC_CKS1_URT1_CKS_mask_w    /*!< URT1 process clock source CK_APB */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_URT2_CKS_CK_APB()     CSC->CKS1.W &= ~CSC_CKS1_URT2_CKS_mask_w    /*!< URT2 process clock source CK_APB */
N#endif
N#if defined(MG32_1ST)
X#if 1L
N#define __DRV_CSC_URT3_CKS_CK_APB()     CSC->CKS1.W &= ~CSC_CKS1_URT3_CKS_mask_w    /*!< URT3 process clock source CK_APB */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_URT4_CKS_CK_APB()     CSC->CKS1.W &= ~CSC_CKS1_URT4_CKS_mask_w    /*!< URT4 process clock source CK_APB */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_URT5_CKS_CK_APB()     CSC->CKS1.W &= ~CSC_CKS1_URT5_CKS_mask_w    /*!< URT5 process clock source CK_APB */
S#define __DRV_CSC_URT6_CKS_CK_APB()     CSC->CKS1.W &= ~CSC_CKS1_URT6_CKS_mask_w    /*!< URT6 process clock source CK_APB */
S#define __DRV_CSC_URT7_CKS_CK_APB()     CSC->CKS1.W &= ~CSC_CKS1_URT7_CKS_mask_w    /*!< URT7 process clock source CK_APB */
N#endif
N#define __DRV_CSC_TM00_CKS_CK_APB()     CSC->CKS2.W &= ~CSC_CKS2_TM00_CKS_mask_w    /*!< TM00 process clock source CK_APB */
N#define __DRV_CSC_TM01_CKS_CK_APB()     CSC->CKS2.W &= ~CSC_CKS2_TM01_CKS_mask_w    /*!< TM01 process clock source CK_APB */
N#define __DRV_CSC_TM10_CKS_CK_APB()     CSC->CKS2.W &= ~CSC_CKS2_TM10_CKS_mask_w    /*!< TM10 process clock source CK_APB */
N#define __DRV_CSC_TM16_CKS_CK_APB()     CSC->CKS2.W &= ~CSC_CKS2_TM16_CKS_mask_w    /*!< TM16 process clock source CK_APB */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_TM20_CKS_CK_APB()     CSC->CKS2.W &= ~CSC_CKS2_TM20_CKS_mask_w    /*!< TM20 process clock source CK_APB */
N#endif
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_TM26_CKS_CK_APB()     CSC->CKS2.W &= ~CSC_CKS2_TM26_CKS_mask_w    /*!< TM26 process clock source CK_APB */
N#endif
N#define __DRV_CSC_TM36_CKS_CK_APB()     CSC->CKS2.W &= ~CSC_CKS2_TM36_CKS_mask_w    /*!< TM36 process clock source CK_APB */
N
N#define __DRV_CSC_ADC0_CKS_CK_AHB()     CSC->CKS0.W |= CSC_CKS0_ADC0_CKS_mask_w     /*!< ADC0 process clock source CK_AHB */
N#define __DRV_CSC_CMP_CKS_CK_AHB()      CSC->CKS0.W |= CSC_CKS0_CMP_CKS_mask_w      /*!< CMP process clock source CK_AHB */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_DAC_CKS_CK_AHB()      CSC->CKS0.W |= CSC_CKS0_DAC_CKS_mask_w      /*!< DAC process clock source CK_AHB */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_APX_CKS_CK_AHB()      CSC->CKS0.W |= CSC_CKS0_APX_CKS_mask_w      /*!< APB process clock source CK_AHB */
N#endif
N#define __DRV_CSC_I2C0_CKS_CK_AHB()     CSC->CKS1.W |= CSC_CKS1_I2C0_CKS_mask_w     /*!< I2C0 process clock source CK_AHB */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_I2C1_CKS_CK_AHB()     CSC->CKS1.W |= CSC_CKS1_I2C1_CKS_mask_w     /*!< I2C1 process clock source CK_AHB */
N#endif
N#define __DRV_CSC_SPI0_CKS_CK_AHB()     CSC->CKS1.W |= CSC_CKS1_SPI0_CKS_mask_w     /*!< SPI0 process clock source CK_AHB */
N#define __DRV_CSC_URT0_CKS_CK_AHB()     CSC->CKS1.W |= CSC_CKS1_URT0_CKS_mask_w     /*!< URT0 process clock source CK_AHB */
N#define __DRV_CSC_URT1_CKS_CK_AHB()     CSC->CKS1.W |= CSC_CKS1_URT1_CKS_mask_w     /*!< URT1 process clock source CK_AHB */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_URT2_CKS_CK_AHB()     CSC->CKS1.W |= CSC_CKS1_URT2_CKS_mask_w     /*!< URT2 process clock source CK_AHB */
N#endif
N#if defined(MG32_1ST)
X#if 1L
N#define __DRV_CSC_URT3_CKS_CK_AHB()     CSC->CKS1.W |= CSC_CKS1_URT3_CKS_mask_w     /*!< URT3 process clock source CK_AHB */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_URT4_CKS_CK_AHB()     CSC->CKS1.W |= CSC_CKS1_URT4_CKS_mask_w     /*!< URT4 process clock source CK_AHB */
N#endif
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_URT5_CKS_CK_AHB()     CSC->CKS1.W |= CSC_CKS1_URT5_CKS_mask_w     /*!< URT5 process clock source CK_AHB */
S#define __DRV_CSC_URT6_CKS_CK_AHB()     CSC->CKS1.W |= CSC_CKS1_URT6_CKS_mask_w     /*!< URT6 process clock source CK_AHB */
S#define __DRV_CSC_URT7_CKS_CK_AHB()     CSC->CKS1.W |= CSC_CKS1_URT7_CKS_mask_w     /*!< URT7 process clock source CK_AHB */
N#endif
N#define __DRV_CSC_TM00_CKS_CK_AHB()     CSC->CKS2.W |= CSC_CKS2_TM00_CKS_mask_w     /*!< TM00 process clock source CK_AHB */
N#define __DRV_CSC_TM01_CKS_CK_AHB()     CSC->CKS2.W |= CSC_CKS2_TM01_CKS_mask_w     /*!< TM01 process clock source CK_AHB */
N#define __DRV_CSC_TM10_CKS_CK_AHB()     CSC->CKS2.W |= CSC_CKS2_TM10_CKS_mask_w     /*!< TM10 process clock source CK_AHB */
N#define __DRV_CSC_TM16_CKS_CK_AHB()     CSC->CKS2.W |= CSC_CKS2_TM16_CKS_mask_w     /*!< TM16 process clock source CK_AHB */
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_TM20_CKS_CK_AHB()     CSC->CKS2.W |= CSC_CKS2_TM20_CKS_mask_w     /*!< TM20 process clock source CK_AHB */
N#endif
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N#define __DRV_CSC_TM26_CKS_CK_AHB()     CSC->CKS2.W |= CSC_CKS2_TM26_CKS_mask_w     /*!< TM26 process clock source CK_AHB */
N#endif
N#define __DRV_CSC_TM36_CKS_CK_AHB()     CSC->CKS2.W |= CSC_CKS2_TM36_CKS_mask_w     /*!< TM36 process clock source CK_AHB */
N#if defined(MG32_3RD)
X#if 0L
S#define __DRV_CSC_USB_CKS_CK_PLL()      CSC->CKS0.W &= ~CSC_CKS0_USB_CKS_mask_w     /*!< USB process clock source CK_PLL */
S#define __DRV_CSC_USB_CKS_CK_SYS()      CSC->CKS0.W |= CSC_CKS0_USB_CKS_mask_w      /*!< USB process clock source CK_SYS */
N#endif
N//!@}
N
N
N
N/**
N * @name    Function announce
N *          
N */ 
Nvoid MID_CSC_DeInit (void);
N
Nvoid MID_CSC_EnableMCD (MID_CSC_MCD_SEL_TypeDef CSC_MCSSelect);
Nvoid MID_CSC_DisableMCD (void);
Nvoid MID_CSC_ICKOConfig(MID_CSC_ICKO_Source_TypeDef CSC_ICKOSource, MID_CSC_ICKO_Div_TypeDef CSC_ICKODiv);
Nvoid MID_CSC_IRQHandler (void);
N
Nvoid MID_CSC_MCDCallback (void);
Nvoid MID_CSC_XOSCCallback (void);
Nvoid MID_CSC_IHRCOCallback (void);
Nvoid MID_CSC_ILRCOCallback (void);
Nvoid MID_CSC_PLLCallback (void);
N
Nuint32_t MID_CSC_GetCK_IHRCOFreq(void);
Nuint32_t MID_CSC_GetCK_HSFreq(void);
N#if defined(MG32_3RD)
X#if 0L
Suint32_t MID_CSC_GetCK_HS2Freq(void);
N#endif
Nuint32_t MID_CSC_GetCK_PLLOFreq(void);
Nuint32_t MID_CSC_GetCK_MAINFreq(void);
Nuint32_t MID_CSC_GetCK_APBFreq(void);
Nuint32_t MID_CSC_GetCK_AHBFreq(void);
Nuint32_t MID_CSC_GetCK_LSFreq(void);
Nuint32_t MID_CSC_GetCK_UTFreq(void);
Nuint32_t MID_CSC_GetCK_PRFreq(MID_CSC_CK_PR_TypeDef Module);
N
N#if defined(MG32_3RD)
X#if 0L
Suint32_t MID_CSC_GetCK_USBFreq (void);
N#endif
N
N#endif /* __MG32x02z_CSC_MID_H */
N
N
N
L 36 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_I2C_MID.h" 2
N#include "MG32x02z_DMA_MID.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_DMA_MID.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_DMA_MID.H
N *
N * @brief       This file provides firmware functions to manage the following 
N *              functionalities of the DMA peripheral:
N *
N * @par         Project
N *              MG32x02z
N * @version     V1.03
N * @date        2021/04/21
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2016 MegaWin Technology Co., Ltd.
N *              All rights reserved.
N *
N ******************************************************************************
N * @par 		Disclaimer 
N *		The Demo software is provided "AS IS"  without any warranty, either 
N *		expressed or implied, including, but not limited to, the implied warranties 
N *		of merchantability and fitness for a particular purpose.  The author will 
N *		not be liable for any special, incidental, consequential or indirect 
N *		damages due to loss of data or any other reason. 
N *		These statements agree with the world wide and local dictated laws about 
N *		authorship and violence against these laws. 
N ******************************************************************************
N ******************************************************************************
N */ 
N
N#ifndef _MG32x02z_DMA_MID_H
N
N/*!< _MG32x02z_DMA_DRV_H */ 
N#define _MG32x02z_DMA_MID_H
N
N#include "MG32x02z.H"
N#include "MG32x02z_Common_MID.H"
N#include "MG32x02z_DMA.H"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z_DMA.H" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_DMA.h
N *
N * @brief       MG32x02z DMA Register Definitions Header File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:41 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z_DMA_H
N#define _MG32x02z_DMA_H
N#define _MG32x02z_DMA_H_VER                         3.9     /*!< File Version */
N
N#if !(MG32x02z_H_VER == MG32x02z_DMA_H_VER)
S    #error "MG32x02z_DMA_H - Main/Module Version Mismatch !"
N#endif
N
N/**
N ******************************************************************************
N *
N * @struct      DMA_Struct
N *              DMA  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  CH0_GIF       :1;     //[0] DMA channel-0 global interrupt flag
X            volatile const  uint8_t  CH0_GIF       :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH0_TCF       :1;     //[1] DMA channel-0 transfer complete flag
X            volatile uint8_t  CH0_TCF       :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH0_THF       :1;     //[2] DMA channel-0 transfer half flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  CH0_THF       :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH0_ERRF      :1;     //[3] DMA channel-0 transfer error flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  CH0_ERRF      :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __I  uint8_t  CH1_GIF       :1;     //[4] DMA channel-1 global interrupt flag
X            volatile const  uint8_t  CH1_GIF       :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH1_TCF       :1;     //[5] DMA channel-1 transfer complete flag
X            volatile uint8_t  CH1_TCF       :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH1_THF       :1;     //[6] DMA channel-1 transfer half flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  CH1_THF       :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH1_ERRF      :1;     //[7] DMA channel-1 transfer error flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  CH1_ERRF      :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __I  uint8_t  CH2_GIF       :1;     //[8] DMA channel-2 global interrupt flag
X            volatile const  uint8_t  CH2_GIF       :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH2_TCF       :1;     //[9] DMA channel-2 transfer complete flag
X            volatile uint8_t  CH2_TCF       :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH2_THF       :1;     //[10] DMA channel-2 transfer half flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  CH2_THF       :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH2_ERRF      :1;     //[11] DMA channel-2 transfer error flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  CH2_ERRF      :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __I  uint16_t               :15;    //[30..16] 
X            volatile const  uint16_t               :15;    
N            __I  uint8_t                :1;     //[31] 
X            volatile const  uint8_t                :1;     
N        }MBIT;
N    }STA;                               /*!< STA        ~ Offset[0x00]  DMA status register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  IEA           :1;     //[0] DMA interrupt all enable
X            volatile uint8_t  IEA           :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :7;     //[7..1] 
X            volatile const  uint8_t                :7;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :15;    //[30..16] 
X            volatile const  uint16_t               :15;    
N            __I  uint8_t                :1;     //[31] 
X            volatile const  uint8_t                :1;     
N        }MBIT;
N    }INT;                               /*!< INT        ~ Offset[0x04]  DMA interrupt enable register */
N
N    __I uint32_t  RESERVED0[2];         /*!< RESERVED0  ~ Offset[0x08]  Reserved */
X    volatile const uint32_t  RESERVED0[2];          
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  EN            :1;     //[0] DMA controller enable.
X            volatile uint8_t  EN            :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  PRI_MDS       :1;     //[1] DMA channel priority mode select.
X            volatile uint8_t  PRI_MDS       :1;     
N                                        //0 = Round : control by Round Robin method
N                                        //1 = Level : control by channel priority level
N            __I  uint8_t                :2;     //[3..2] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  GPL_CHS       :2;     //[5..4] DMA channel select for extra GPL function
X            volatile uint8_t  GPL_CHS       :2;     
N                                        //0x0 = Disable : no any channel with GPL function
N                                        //0x1 = CH0
N                                        //0x2 = CH1
N                                        //0x3 = CH2
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __IO uint8_t  CH0_ENB       :1;     //[16] DMA channel-0 operation enable bit. This bit is as same as DMA_CH0_EN.
X            volatile uint8_t  CH0_ENB       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH1_ENB       :1;     //[17] DMA channel-0 operation enable bit. This bit is as same as DMA_CH1_EN.
X            volatile uint8_t  CH1_ENB       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH2_ENB       :1;     //[18] DMA channel-0 operation enable bit. This bit is as same as DMA_CH2_EN.
X            volatile uint8_t  CH2_ENB       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :5;     //[23..19] 
X            volatile const  uint8_t                :5;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }CR0;                               /*!< CR0        ~ Offset[0x10]  DMA global control register 0 */
N
N    __I uint32_t  RESERVED1;            /*!< RESERVED1  ~ Offset[0x14]  Reserved */
X    volatile const uint32_t  RESERVED1;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  MAIN_STA      :3;     //[2..0] DMA main state machine status for debug only.
X            volatile const  uint8_t  MAIN_STA      :3;     
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  CH_STA        :3;     //[6..4] DMA channel state machine status for debug only.
X            volatile const  uint8_t  CH_STA        :3;     
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  SEL_CH0       :1;     //[8] DMA channel select channel-0 status for debug only.
X            volatile const  uint8_t  SEL_CH0       :1;     
N            __I  uint8_t  SEL_CH1       :1;     //[9] DMA channel select channel-1 status for debug only.
X            volatile const  uint8_t  SEL_CH1       :1;     
N            __I  uint8_t  SEL_CH2       :1;     //[10] DMA channel select channel-2 status for debug only.
X            volatile const  uint8_t  SEL_CH2       :1;     
N            __I  uint8_t                :5;     //[15..11] 
X            volatile const  uint8_t                :5;     
N            __I  uint8_t  XMDS_CH0      :3;     //[18..16] DMA channel-0 XMDA control status for debug only.
X            volatile const  uint8_t  XMDS_CH0      :3;     
N            __I  uint8_t                :1;     //[19] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  XMDS_CH1      :3;     //[22..20] DMA channel-1 XMDA control status for debug only.
X            volatile const  uint8_t  XMDS_CH1      :3;     
N            __I  uint8_t                :1;     //[23] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  XMDS_CH2      :3;     //[26..24] DMA channel-2 XMDA control status for debug only.
X            volatile const  uint8_t  XMDS_CH2      :3;     
N            __I  uint8_t                :1;     //[27] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :4;     //[31..28] 
X            volatile const  uint8_t                :4;     
N        }MBIT;
N    }CR2;                               /*!< CR2        ~ Offset[0x18]  DMA global control register 2 */
N
N    __I uint32_t  RESERVED2;            /*!< RESERVED2  ~ Offset[0x1C]  Reserved */
X    volatile const uint32_t  RESERVED2;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  CH0_EN        :1;     //[0] DMA channel operation enable
X            volatile uint8_t  CH0_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH0_HOLD      :1;     //[1] DMA channel operation hold enable
X            volatile uint8_t  CH0_HOLD      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH0_LOOP      :1;     //[2] DMA loop mode enable
X            volatile uint8_t  CH0_LOOP      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH0_ADSEL     :1;     //[3] DMA address increased mode select
X            volatile uint8_t  CH0_ADSEL     :1;     
N                                        //0 = Normal : sequential increment 1
N                                        //1 = SKIP3 : address increment from 0 to 1,2 then return 0
N            __I  uint8_t                :2;     //[5..4] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :1;     //[6] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CH0_XMDS      :2;     //[9..8] DMA channel external pin trigger request mode select
X            volatile uint8_t  CH0_XMDS      :2;     
N                                        //0x0 = Disable : disable external request pin input
N                                        //0x1 = Single : single request mode
N                                        //0x2 = Block : block request mode
N                                        //0x3 = Demand : demand request mode(active high)
N            __IO uint8_t  CH0_PLS       :2;     //[11..10] DMA channel priority level select.
X            volatile uint8_t  CH0_PLS       :2;     
N                                        //0x0 = LV0 : lowest priority
N                                        //0x1 = LV1 : normal priority
N                                        //0x2 = LV2 : high priority
N                                        //0x3 = LV3 : highest priority
N            __IO uint8_t  CH0_BSIZE     :2;     //[13..12] DMA transfer burst size
X            volatile uint8_t  CH0_BSIZE     :2;     
N                                        //0x0 = One
N                                        //0x1 = Two
N                                        //0x2 = Reserved
N                                        //0x3 = Four
N            __I  uint8_t                :1;     //[14] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CH0_REQ       :1;     //[15] DMA channel data transfer request enable
X            volatile uint8_t  CH0_REQ       :1;     
N                                        //0 = No : no effect
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[16] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CH0_CIE       :1;     //[17] DMA channel-0 transfer complete interrupt enable.
X            volatile uint8_t  CH0_CIE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH0_HIE       :1;     //[18] DMA channel-0 transfer half interrupt enable.
X            volatile uint8_t  CH0_HIE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH0_EIE       :1;     //[19] DMA channel-0 transfer error interrupt enable.
X            volatile uint8_t  CH0_EIE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :4;     //[23..20] 
X            volatile const  uint8_t                :4;     
N            __I  uint8_t                :1;     //[24] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CH0_TC2F      :1;     //[25] DMA channel-0 transfer complete flag
X            volatile uint8_t  CH0_TC2F      :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH0_TH2F      :1;     //[26] DMA channel-0 transfer half flag
X            volatile uint8_t  CH0_TH2F      :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH0_ERR2F     :1;     //[27] DMA channel-0 transfer error flag
X            volatile uint8_t  CH0_ERR2F     :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __I  uint8_t                :4;     //[31..28] 
X            volatile const  uint8_t                :4;     
N        }MBIT;
N    }CH0A;                              /*!< CH0A       ~ Offset[0x20]  DMA channel-0 control register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  CH0_SRC       :4;     //[3..0] DMA channel transfer peripheral source select
X            volatile uint8_t  CH0_SRC       :4;     
N            __I  uint8_t                :4;     //[7..4] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  CH0_DET       :4;     //[11..8] DMA channel transfer peripheral destination select
X            volatile uint8_t  CH0_DET       :4;     
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  CH0_SINC      :1;     //[16] DMA source memory transfer address auto increased enable
X            volatile uint8_t  CH0_SINC      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH0_DINC      :1;     //[17] DMA destination memory transfer address auto increased enable
X            volatile uint8_t  CH0_DINC      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH0_SSYNC     :1;     //[18] DMA source process synchronization enable bit
X            volatile uint8_t  CH0_SSYNC     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH0_DSYNC     :1;     //[19] DMA destination process synchronization enable bit
X            volatile uint8_t  CH0_DSYNC     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[21..20] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :2;     //[23..22] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  CH0_XPIN      :1;     //[24] DMA channel external trigger pin select.
X            volatile uint8_t  CH0_XPIN      :1;     
N                                        //0x0 = TRG0 : DMA_TRG0 pin
N                                        //0x1 = TRG1 : DMA_TRG1 pin
N            __I  uint8_t                :7;     //[31..25] 
X            volatile const  uint8_t                :7;     
N        }MBIT;
N    }CH0B;                              /*!< CH0B       ~ Offset[0x24]  DMA channel-0 control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint16_t CH0_NUM       :16;    //[15..0] DMA transfer data count initial number
X            volatile uint16_t CH0_NUM       :16;    
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CH0NUM;                            /*!< CH0NUM     ~ Offset[0x28]  DMA channel-0 control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint16_t CH0_CNT       :16;    //[15..0] DMA transfer data count current value
X            volatile const  uint16_t CH0_CNT       :16;    
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CH0CNT;                            /*!< CH0CNT     ~ Offset[0x2C]  DMA channel-0 control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t CH0_SSA       :32;    //[31..0] DMA source memory transfer start address.
X            volatile uint32_t CH0_SSA       :32;    
N        }MBIT;
N    }CH0SSA;                            /*!< CH0SSA     ~ Offset[0x30]  DMA channel-0 source start address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint32_t CH0_SCA       :32;    //[31..0] DMA source memory transfer current address
X            volatile const  uint32_t CH0_SCA       :32;    
N        }MBIT;
N    }CH0SCA;                            /*!< CH0SCA     ~ Offset[0x34]  DMA channel-0 source current address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t CH0_DSA       :32;    //[31..0] DMA destination memory transfer start address.
X            volatile uint32_t CH0_DSA       :32;    
N        }MBIT;
N    }CH0DSA;                            /*!< CH0DSA     ~ Offset[0x38]  DMA channel-0 destination start address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint32_t CH0_DCA       :32;    //[31..0] DMA destination memory transfer current address
X            volatile const  uint32_t CH0_DCA       :32;    
N        }MBIT;
N    }CH0DCA;                            /*!< CH0DCA     ~ Offset[0x3C]  DMA channel-0 destination current address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  CH1_EN        :1;     //[0] DMA channel operation enable
X            volatile uint8_t  CH1_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH1_HOLD      :1;     //[1] DMA channel operation hold enable
X            volatile uint8_t  CH1_HOLD      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH1_LOOP      :1;     //[2] DMA loop mode enable
X            volatile uint8_t  CH1_LOOP      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH1_ADSEL     :1;     //[3] DMA address increased mode select
X            volatile uint8_t  CH1_ADSEL     :1;     
N                                        //0 = Normal : sequential increment 1
N                                        //1 = SKIP3 : address increment from 0 to 1,2 then return 0
N            __I  uint8_t                :2;     //[5..4] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :1;     //[6] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CH1_XMDS      :2;     //[9..8] DMA channel external pin trigger request mode select
X            volatile uint8_t  CH1_XMDS      :2;     
N                                        //0x0 = Disable : disable external request pin input
N                                        //0x1 = Single : single request mode
N                                        //0x2 = Block : block request mode
N                                        //0x3 = Demand : demand request mode(active high)
N            __IO uint8_t  CH1_PLS       :2;     //[11..10] DMA channel priority level select.
X            volatile uint8_t  CH1_PLS       :2;     
N                                        //0x0 = LV0 : lowest priority
N                                        //0x1 = LV1 : normal priority
N                                        //0x2 = LV2 : high priority
N                                        //0x3 = LV3 : highest priority
N            __IO uint8_t  CH1_BSIZE     :2;     //[13..12] DMA transfer burst size
X            volatile uint8_t  CH1_BSIZE     :2;     
N                                        //0x0 = One
N                                        //0x1 = Two
N                                        //0x2 = Reserved
N                                        //0x3 = Four
N            __I  uint8_t                :1;     //[14] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CH1_REQ       :1;     //[15] DMA channel data transfer request enable
X            volatile uint8_t  CH1_REQ       :1;     
N                                        //0 = No : no effect
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[16] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CH1_CIE       :1;     //[17] DMA channel-1 transfer complete interrupt enable.
X            volatile uint8_t  CH1_CIE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH1_HIE       :1;     //[18] DMA channel-1 transfer half interrupt enable.
X            volatile uint8_t  CH1_HIE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH1_EIE       :1;     //[19] DMA channel-1 transfer error interrupt enable.
X            volatile uint8_t  CH1_EIE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :4;     //[23..20] 
X            volatile const  uint8_t                :4;     
N            __I  uint8_t                :1;     //[24] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CH1_TC2F      :1;     //[25] DMA channel-1 transfer complete flag
X            volatile uint8_t  CH1_TC2F      :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH1_TH2F      :1;     //[26] DMA channel-1 transfer half flag
X            volatile uint8_t  CH1_TH2F      :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH1_ERR2F     :1;     //[27] DMA channel-1 transfer error flag
X            volatile uint8_t  CH1_ERR2F     :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __I  uint8_t                :4;     //[31..28] 
X            volatile const  uint8_t                :4;     
N        }MBIT;
N    }CH1A;                              /*!< CH1A       ~ Offset[0x40]  DMA channel-1 control register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  CH1_SRC       :4;     //[3..0] DMA channel transfer peripheral source select
X            volatile uint8_t  CH1_SRC       :4;     
N            __I  uint8_t                :4;     //[7..4] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  CH1_DET       :4;     //[11..8] DMA channel transfer peripheral destination select
X            volatile uint8_t  CH1_DET       :4;     
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  CH1_SINC      :1;     //[16] DMA source memory transfer address auto increased enable
X            volatile uint8_t  CH1_SINC      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH1_DINC      :1;     //[17] DMA destination memory transfer address auto increased enable
X            volatile uint8_t  CH1_DINC      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH1_SSYNC     :1;     //[18] DMA source process synchronization enable bit
X            volatile uint8_t  CH1_SSYNC     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH1_DSYNC     :1;     //[19] DMA destination process synchronization enable bit
X            volatile uint8_t  CH1_DSYNC     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[21..20] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :2;     //[23..22] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  CH1_XPIN      :1;     //[24] DMA channel external trigger pin select.
X            volatile uint8_t  CH1_XPIN      :1;     
N                                        //0x0 = TRG0 : DMA_TRG0 pin
N                                        //0x1 = TRG1 : DMA_TRG1 pin
N            __I  uint8_t                :7;     //[31..25] 
X            volatile const  uint8_t                :7;     
N        }MBIT;
N    }CH1B;                              /*!< CH1B       ~ Offset[0x44]  DMA channel-1 control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint16_t CH1_NUM       :16;    //[15..0] DMA transfer data count initial number
X            volatile uint16_t CH1_NUM       :16;    
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CH1NUM;                            /*!< CH1NUM     ~ Offset[0x48]  DMA channel-1 control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint16_t CH1_CNT       :16;    //[15..0] DMA transfer data count current value
X            volatile const  uint16_t CH1_CNT       :16;    
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CH1CNT;                            /*!< CH1CNT     ~ Offset[0x4C]  DMA channel-1 control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t CH1_SSA       :32;    //[31..0] DMA source memory transfer start address.
X            volatile uint32_t CH1_SSA       :32;    
N        }MBIT;
N    }CH1SSA;                            /*!< CH1SSA     ~ Offset[0x50]  DMA channel-1 source start address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint32_t CH1_SCA       :32;    //[31..0] DMA source memory transfer current address
X            volatile const  uint32_t CH1_SCA       :32;    
N        }MBIT;
N    }CH1SCA;                            /*!< CH1SCA     ~ Offset[0x54]  DMA channel-1 source current address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t CH1_DSA       :32;    //[31..0] DMA destination memory transfer start address.
X            volatile uint32_t CH1_DSA       :32;    
N        }MBIT;
N    }CH1DSA;                            /*!< CH1DSA     ~ Offset[0x58]  DMA channel-1 destination start address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint32_t CH1_DCA       :32;    //[31..0] DMA destination memory transfer current address
X            volatile const  uint32_t CH1_DCA       :32;    
N        }MBIT;
N    }CH1DCA;                            /*!< CH1DCA     ~ Offset[0x5C]  DMA channel-1 destination current address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  CH2_EN        :1;     //[0] DMA channel operation enable
X            volatile uint8_t  CH2_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH2_HOLD      :1;     //[1] DMA channel operation hold enable
X            volatile uint8_t  CH2_HOLD      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH2_LOOP      :1;     //[2] DMA loop mode enable
X            volatile uint8_t  CH2_LOOP      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH2_ADSEL     :1;     //[3] DMA address increased mode select
X            volatile uint8_t  CH2_ADSEL     :1;     
N                                        //0 = Normal : sequential increment 1
N                                        //1 = SKIP3 : address increment from 0 to 1,2 then return 0
N            __I  uint8_t                :2;     //[5..4] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :1;     //[6] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CH2_XMDS      :2;     //[9..8] DMA channel external pin trigger request mode select
X            volatile uint8_t  CH2_XMDS      :2;     
N                                        //0x0 = Disable : disable external request pin input
N                                        //0x1 = Single : single request mode
N                                        //0x2 = Block : block request mode
N                                        //0x3 = Demand : demand request mode(active high)
N            __IO uint8_t  CH2_PLS       :2;     //[11..10] DMA channel priority level select.
X            volatile uint8_t  CH2_PLS       :2;     
N                                        //0x0 = LV0 : lowest priority
N                                        //0x1 = LV1 : normal priority
N                                        //0x2 = LV2 : high priority
N                                        //0x3 = LV3 : highest priority
N            __IO uint8_t  CH2_BSIZE     :2;     //[13..12] DMA transfer burst size
X            volatile uint8_t  CH2_BSIZE     :2;     
N                                        //0x0 = One
N                                        //0x1 = Two
N                                        //0x2 = Reserved
N                                        //0x3 = Four
N            __I  uint8_t                :1;     //[14] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CH2_REQ       :1;     //[15] DMA channel data transfer request enable
X            volatile uint8_t  CH2_REQ       :1;     
N                                        //0 = No : no effect
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[16] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CH2_CIE       :1;     //[17] DMA channel-2 transfer complete interrupt enable.
X            volatile uint8_t  CH2_CIE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH2_HIE       :1;     //[18] DMA channel-2 transfer half interrupt enable.
X            volatile uint8_t  CH2_HIE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH2_EIE       :1;     //[19] DMA channel-2 transfer error interrupt enable.
X            volatile uint8_t  CH2_EIE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :4;     //[23..20] 
X            volatile const  uint8_t                :4;     
N            __I  uint8_t                :1;     //[24] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CH2_TC2F      :1;     //[25] DMA channel-2 transfer complete flag
X            volatile uint8_t  CH2_TC2F      :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH2_TH2F      :1;     //[26] DMA channel-2 transfer half flag
X            volatile uint8_t  CH2_TH2F      :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  CH2_ERR2F     :1;     //[27] DMA channel-2 transfer error flag
X            volatile uint8_t  CH2_ERR2F     :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __I  uint8_t                :4;     //[31..28] 
X            volatile const  uint8_t                :4;     
N        }MBIT;
N    }CH2A;                              /*!< CH2A       ~ Offset[0x60]  DMA channel-2 control register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  CH2_SRC       :4;     //[3..0] DMA channel transfer peripheral source select
X            volatile uint8_t  CH2_SRC       :4;     
N            __I  uint8_t                :4;     //[7..4] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  CH2_DET       :4;     //[11..8] DMA channel transfer peripheral destination select
X            volatile uint8_t  CH2_DET       :4;     
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  CH2_SINC      :1;     //[16] DMA source memory transfer address auto increased enable
X            volatile uint8_t  CH2_SINC      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH2_DINC      :1;     //[17] DMA destination memory transfer address auto increased enable
X            volatile uint8_t  CH2_DINC      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH2_SSYNC     :1;     //[18] DMA source process synchronization enable bit
X            volatile uint8_t  CH2_SSYNC     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CH2_DSYNC     :1;     //[19] DMA destination process synchronization enable bit
X            volatile uint8_t  CH2_DSYNC     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[21..20] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :2;     //[23..22] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  CH2_XPIN      :1;     //[24] DMA channel external trigger pin select.
X            volatile uint8_t  CH2_XPIN      :1;     
N                                        //0x0 = TRG0 : DMA_TRG0 pin
N                                        //0x1 = TRG1 : DMA_TRG1 pin
N            __I  uint8_t                :7;     //[31..25] 
X            volatile const  uint8_t                :7;     
N        }MBIT;
N    }CH2B;                              /*!< CH2B       ~ Offset[0x64]  DMA channel-2 control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint16_t CH2_NUM       :16;    //[15..0] DMA transfer data count initial number
X            volatile uint16_t CH2_NUM       :16;    
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CH2NUM;                            /*!< CH2NUM     ~ Offset[0x68]  DMA channel-2 control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint16_t CH2_CNT       :16;    //[15..0] DMA transfer data count current value
X            volatile const  uint16_t CH2_CNT       :16;    
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CH2CNT;                            /*!< CH2CNT     ~ Offset[0x6C]  DMA channel-2 control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t CH2_SSA       :32;    //[31..0] DMA source memory transfer start address.
X            volatile uint32_t CH2_SSA       :32;    
N        }MBIT;
N    }CH2SSA;                            /*!< CH2SSA     ~ Offset[0x70]  DMA channel-2 source start address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint32_t CH2_SCA       :32;    //[31..0] DMA source memory transfer current address
X            volatile const  uint32_t CH2_SCA       :32;    
N        }MBIT;
N    }CH2SCA;                            /*!< CH2SCA     ~ Offset[0x74]  DMA channel-2 source current address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t CH2_DSA       :32;    //[31..0] DMA destination memory transfer start address.
X            volatile uint32_t CH2_DSA       :32;    
N        }MBIT;
N    }CH2DSA;                            /*!< CH2DSA     ~ Offset[0x78]  DMA channel-2 destination start address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint32_t CH2_DCA       :32;    //[31..0] DMA destination memory transfer current address
X            volatile const  uint32_t CH2_DCA       :32;    
N        }MBIT;
N    }CH2DCA;                            /*!< CH2DCA     ~ Offset[0x7C]  DMA channel-2 destination current address register */
N
N} DMA_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        DMA  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define DMA_Base                        ((uint32_t)0x4BF00000)              /*!< Direct Memory Access Control */
N#define DMA                             ((DMA_Struct*) DMA_Base)
N///@}
N
N/**
N ******************************************************************************
N *
N * @name        DMA  [Register Definitions]
N *
N ******************************************************************************
N */
N/**
N ******************************************************************************
N * @name        DMA_STA  [register's definitions]
N *              Offset[0x00]  DMA status register (0x4BF00000)
N ******************************************************************************
N */
N///@{
N#define DMA_STA_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_STA */
N#define DMA_STA_CH2_ERRF_mask_w                     ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define DMA_STA_CH2_ERRF_mask_h0                    ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define DMA_STA_CH2_ERRF_mask_b1                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_STA_CH2_ERRF_normal_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_STA_CH2_ERRF_normal_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_STA_CH2_ERRF_normal_b1                  ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_STA_CH2_ERRF_happened_w                 ((uint32_t)0x00000800)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_STA_CH2_ERRF_happened_h0                ((uint16_t)0x0800)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_STA_CH2_ERRF_happened_b1                ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_STA_CH2_THF_mask_w                      ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define DMA_STA_CH2_THF_mask_h0                     ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define DMA_STA_CH2_THF_mask_b1                     ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_STA_CH2_THF_normal_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_STA_CH2_THF_normal_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_STA_CH2_THF_normal_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_STA_CH2_THF_happened_w                  ((uint32_t)0x00000400)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_STA_CH2_THF_happened_h0                 ((uint16_t)0x0400)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_STA_CH2_THF_happened_b1                 ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_STA_CH2_TCF_mask_w                      ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define DMA_STA_CH2_TCF_mask_h0                     ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define DMA_STA_CH2_TCF_mask_b1                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_STA_CH2_TCF_normal_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_STA_CH2_TCF_normal_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_STA_CH2_TCF_normal_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_STA_CH2_TCF_happened_w                  ((uint32_t)0x00000200)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_STA_CH2_TCF_happened_h0                 ((uint16_t)0x0200)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_STA_CH2_TCF_happened_b1                 ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_STA_CH2_GIF_mask_w                      ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define DMA_STA_CH2_GIF_mask_h0                     ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define DMA_STA_CH2_GIF_mask_b1                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_STA_CH2_GIF_normal_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_STA_CH2_GIF_normal_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_STA_CH2_GIF_normal_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_STA_CH2_GIF_happened_w                  ((uint32_t)0x00000100)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_STA_CH2_GIF_happened_h0                 ((uint16_t)0x0100)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_STA_CH2_GIF_happened_b1                 ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_STA_CH1_ERRF_mask_w                     ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define DMA_STA_CH1_ERRF_mask_h0                    ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define DMA_STA_CH1_ERRF_mask_b0                    ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define DMA_STA_CH1_ERRF_normal_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_STA_CH1_ERRF_normal_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_STA_CH1_ERRF_normal_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_STA_CH1_ERRF_happened_w                 ((uint32_t)0x00000080)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_STA_CH1_ERRF_happened_h0                ((uint16_t)0x0080)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_STA_CH1_ERRF_happened_b0                ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_STA_CH1_THF_mask_w                      ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define DMA_STA_CH1_THF_mask_h0                     ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define DMA_STA_CH1_THF_mask_b0                     ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define DMA_STA_CH1_THF_normal_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_STA_CH1_THF_normal_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_STA_CH1_THF_normal_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_STA_CH1_THF_happened_w                  ((uint32_t)0x00000040)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_STA_CH1_THF_happened_h0                 ((uint16_t)0x0040)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_STA_CH1_THF_happened_b0                 ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_STA_CH1_TCF_mask_w                      ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define DMA_STA_CH1_TCF_mask_h0                     ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define DMA_STA_CH1_TCF_mask_b0                     ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define DMA_STA_CH1_TCF_normal_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_STA_CH1_TCF_normal_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_STA_CH1_TCF_normal_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_STA_CH1_TCF_happened_w                  ((uint32_t)0x00000020)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_STA_CH1_TCF_happened_h0                 ((uint16_t)0x0020)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_STA_CH1_TCF_happened_b0                 ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_STA_CH1_GIF_mask_w                      ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define DMA_STA_CH1_GIF_mask_h0                     ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define DMA_STA_CH1_GIF_mask_b0                     ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define DMA_STA_CH1_GIF_normal_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_STA_CH1_GIF_normal_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_STA_CH1_GIF_normal_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_STA_CH1_GIF_happened_w                  ((uint32_t)0x00000010)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_STA_CH1_GIF_happened_h0                 ((uint16_t)0x0010)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_STA_CH1_GIF_happened_b0                 ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_STA_CH0_ERRF_mask_w                     ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define DMA_STA_CH0_ERRF_mask_h0                    ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define DMA_STA_CH0_ERRF_mask_b0                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_STA_CH0_ERRF_normal_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_STA_CH0_ERRF_normal_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_STA_CH0_ERRF_normal_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_STA_CH0_ERRF_happened_w                 ((uint32_t)0x00000008)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_STA_CH0_ERRF_happened_h0                ((uint16_t)0x0008)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_STA_CH0_ERRF_happened_b0                ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_STA_CH0_THF_mask_w                      ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define DMA_STA_CH0_THF_mask_h0                     ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define DMA_STA_CH0_THF_mask_b0                     ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_STA_CH0_THF_normal_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_STA_CH0_THF_normal_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_STA_CH0_THF_normal_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_STA_CH0_THF_happened_w                  ((uint32_t)0x00000004)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_STA_CH0_THF_happened_h0                 ((uint16_t)0x0004)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_STA_CH0_THF_happened_b0                 ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_STA_CH0_TCF_mask_w                      ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define DMA_STA_CH0_TCF_mask_h0                     ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define DMA_STA_CH0_TCF_mask_b0                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_STA_CH0_TCF_normal_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_STA_CH0_TCF_normal_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_STA_CH0_TCF_normal_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_STA_CH0_TCF_happened_w                  ((uint32_t)0x00000002)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_STA_CH0_TCF_happened_h0                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_STA_CH0_TCF_happened_b0                 ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_STA_CH0_GIF_mask_w                      ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define DMA_STA_CH0_GIF_mask_h0                     ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define DMA_STA_CH0_GIF_mask_b0                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_STA_CH0_GIF_normal_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_STA_CH0_GIF_normal_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_STA_CH0_GIF_normal_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_STA_CH0_GIF_happened_w                  ((uint32_t)0x00000001)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_STA_CH0_GIF_happened_h0                 ((uint16_t)0x0001)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_STA_CH0_GIF_happened_b0                 ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_INT  [register's definitions]
N *              Offset[0x04]  DMA interrupt enable register (0x4BF00004)
N ******************************************************************************
N */
N///@{
N#define DMA_INT_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_INT */
N#define DMA_INT_IEA_mask_w                          ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define DMA_INT_IEA_mask_h0                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define DMA_INT_IEA_mask_b0                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_INT_IEA_disable_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_INT_IEA_disable_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_INT_IEA_disable_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_INT_IEA_enable_w                        ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_INT_IEA_enable_h0                       ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_INT_IEA_enable_b0                       ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CR0  [register's definitions]
N *              Offset[0x10]  DMA global control register 0 (0x4BF00010)
N ******************************************************************************
N */
N///@{
N#define DMA_CR0_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CR0 */
N#define DMA_CR0_CH2_ENB_mask_w                      ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define DMA_CR0_CH2_ENB_mask_h1                     ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define DMA_CR0_CH2_ENB_mask_b2                     ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CR0_CH2_ENB_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CR0_CH2_ENB_disable_h1                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CR0_CH2_ENB_disable_b2                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CR0_CH2_ENB_enable_w                    ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CR0_CH2_ENB_enable_h1                   ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CR0_CH2_ENB_enable_b2                   ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CR0_CH1_ENB_mask_w                      ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define DMA_CR0_CH1_ENB_mask_h1                     ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define DMA_CR0_CH1_ENB_mask_b2                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CR0_CH1_ENB_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CR0_CH1_ENB_disable_h1                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CR0_CH1_ENB_disable_b2                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CR0_CH1_ENB_enable_w                    ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CR0_CH1_ENB_enable_h1                   ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CR0_CH1_ENB_enable_b2                   ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CR0_CH0_ENB_mask_w                      ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define DMA_CR0_CH0_ENB_mask_h1                     ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define DMA_CR0_CH0_ENB_mask_b2                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_CR0_CH0_ENB_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CR0_CH0_ENB_disable_h1                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CR0_CH0_ENB_disable_b2                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CR0_CH0_ENB_enable_w                    ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CR0_CH0_ENB_enable_h1                   ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CR0_CH0_ENB_enable_b2                   ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CR0_GPL_CHS_mask_w                      ((uint32_t)0x00000030)  /*!< Bit Mask of 32bit */
N#define DMA_CR0_GPL_CHS_mask_h0                     ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define DMA_CR0_GPL_CHS_mask_b0                     ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define DMA_CR0_GPL_CHS_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Disable of 32bit */
N#define DMA_CR0_GPL_CHS_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Disable of 16bit */
N#define DMA_CR0_GPL_CHS_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0x0):Disable of 8bit */
N#define DMA_CR0_GPL_CHS_ch0_w                       ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):CH0 of 32bit */
N#define DMA_CR0_GPL_CHS_ch0_h0                      ((uint16_t)0x0010)      /*!< Bit Value =(0x1):CH0 of 16bit */
N#define DMA_CR0_GPL_CHS_ch0_b0                      ((uint8_t )0x10)        /*!< Bit Value =(0x1):CH0 of 8bit */
N#define DMA_CR0_GPL_CHS_ch1_w                       ((uint32_t)0x00000020)  /*!< Bit Value =(0x2):CH1 of 32bit */
N#define DMA_CR0_GPL_CHS_ch1_h0                      ((uint16_t)0x0020)      /*!< Bit Value =(0x2):CH1 of 16bit */
N#define DMA_CR0_GPL_CHS_ch1_b0                      ((uint8_t )0x20)        /*!< Bit Value =(0x2):CH1 of 8bit */
N#define DMA_CR0_GPL_CHS_ch2_w                       ((uint32_t)0x00000030)  /*!< Bit Value =(0x3):CH2 of 32bit */
N#define DMA_CR0_GPL_CHS_ch2_h0                      ((uint16_t)0x0030)      /*!< Bit Value =(0x3):CH2 of 16bit */
N#define DMA_CR0_GPL_CHS_ch2_b0                      ((uint8_t )0x30)        /*!< Bit Value =(0x3):CH2 of 8bit */
N
N#define DMA_CR0_PRI_MDS_mask_w                      ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define DMA_CR0_PRI_MDS_mask_h0                     ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define DMA_CR0_PRI_MDS_mask_b0                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CR0_PRI_MDS_round_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Round of 32bit */
N#define DMA_CR0_PRI_MDS_round_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Round of 16bit */
N#define DMA_CR0_PRI_MDS_round_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Round of 8bit */
N#define DMA_CR0_PRI_MDS_level_w                     ((uint32_t)0x00000002)  /*!< Bit Value =(1):Level of 32bit */
N#define DMA_CR0_PRI_MDS_level_h0                    ((uint16_t)0x0002)      /*!< Bit Value =(1):Level of 16bit */
N#define DMA_CR0_PRI_MDS_level_b0                    ((uint8_t )0x02)        /*!< Bit Value =(1):Level of 8bit */
N
N#define DMA_CR0_EN_mask_w                           ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define DMA_CR0_EN_mask_h0                          ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define DMA_CR0_EN_mask_b0                          ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_CR0_EN_disable_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CR0_EN_disable_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CR0_EN_disable_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CR0_EN_enable_w                         ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CR0_EN_enable_h0                        ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CR0_EN_enable_b0                        ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CR2  [register's definitions]
N *              Offset[0x18]  DMA global control register 2 (0x4BF00018)
N ******************************************************************************
N */
N///@{
N#define DMA_CR2_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CR2 */
N#define DMA_CR2_XMDS_CH2_mask_w                     ((uint32_t)0x07000000)  /*!< Bit Mask of 32bit */
N#define DMA_CR2_XMDS_CH2_mask_h1                    ((uint16_t)0x0700)      /*!< Bit Mask of 16bit */
N#define DMA_CR2_XMDS_CH2_mask_b3                    ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define DMA_CR2_XMDS_CH2_shift_w                    (24)                    /*!< Bit Shift of 32bit */
N#define DMA_CR2_XMDS_CH2_shift_h1                   (8)                     /*!< Bit Shift of 16bit */
N#define DMA_CR2_XMDS_CH2_shift_b3                   (0)                     /*!< Bit Shift of 8bit */
N
N#define DMA_CR2_XMDS_CH1_mask_w                     ((uint32_t)0x00700000)  /*!< Bit Mask of 32bit */
N#define DMA_CR2_XMDS_CH1_mask_h1                    ((uint16_t)0x0070)      /*!< Bit Mask of 16bit */
N#define DMA_CR2_XMDS_CH1_mask_b2                    ((uint8_t )0x70)        /*!< Bit Mask of 8bit */
N#define DMA_CR2_XMDS_CH1_shift_w                    (20)                    /*!< Bit Shift of 32bit */
N#define DMA_CR2_XMDS_CH1_shift_h1                   (4)                     /*!< Bit Shift of 16bit */
N#define DMA_CR2_XMDS_CH1_shift_b2                   (4)                     /*!< Bit Shift of 8bit */
N
N#define DMA_CR2_XMDS_CH0_mask_w                     ((uint32_t)0x00070000)  /*!< Bit Mask of 32bit */
N#define DMA_CR2_XMDS_CH0_mask_h1                    ((uint16_t)0x0007)      /*!< Bit Mask of 16bit */
N#define DMA_CR2_XMDS_CH0_mask_b2                    ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define DMA_CR2_XMDS_CH0_shift_w                    (16)                    /*!< Bit Shift of 32bit */
N#define DMA_CR2_XMDS_CH0_shift_h1                   (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CR2_XMDS_CH0_shift_b2                   (0)                     /*!< Bit Shift of 8bit */
N
N#define DMA_CR2_SEL_CH2_mask_w                      ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define DMA_CR2_SEL_CH2_mask_h0                     ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define DMA_CR2_SEL_CH2_mask_b1                     ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CR2_SEL_CH2_shift_w                     (10)                    /*!< Bit Shift of 32bit */
N#define DMA_CR2_SEL_CH2_shift_h0                    (10)                    /*!< Bit Shift of 16bit */
N#define DMA_CR2_SEL_CH2_shift_b1                    (2)                     /*!< Bit Shift of 8bit */
N
N#define DMA_CR2_SEL_CH1_mask_w                      ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define DMA_CR2_SEL_CH1_mask_h0                     ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define DMA_CR2_SEL_CH1_mask_b1                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CR2_SEL_CH1_shift_w                     (9)                     /*!< Bit Shift of 32bit */
N#define DMA_CR2_SEL_CH1_shift_h0                    (9)                     /*!< Bit Shift of 16bit */
N#define DMA_CR2_SEL_CH1_shift_b1                    (1)                     /*!< Bit Shift of 8bit */
N
N#define DMA_CR2_SEL_CH0_mask_w                      ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define DMA_CR2_SEL_CH0_mask_h0                     ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define DMA_CR2_SEL_CH0_mask_b1                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_CR2_SEL_CH0_shift_w                     (8)                     /*!< Bit Shift of 32bit */
N#define DMA_CR2_SEL_CH0_shift_h0                    (8)                     /*!< Bit Shift of 16bit */
N#define DMA_CR2_SEL_CH0_shift_b1                    (0)                     /*!< Bit Shift of 8bit */
N
N#define DMA_CR2_CH_STA_mask_w                       ((uint32_t)0x00000070)  /*!< Bit Mask of 32bit */
N#define DMA_CR2_CH_STA_mask_h0                      ((uint16_t)0x0070)      /*!< Bit Mask of 16bit */
N#define DMA_CR2_CH_STA_mask_b0                      ((uint8_t )0x70)        /*!< Bit Mask of 8bit */
N#define DMA_CR2_CH_STA_shift_w                      (4)                     /*!< Bit Shift of 32bit */
N#define DMA_CR2_CH_STA_shift_h0                     (4)                     /*!< Bit Shift of 16bit */
N#define DMA_CR2_CH_STA_shift_b0                     (4)                     /*!< Bit Shift of 8bit */
N
N#define DMA_CR2_MAIN_STA_mask_w                     ((uint32_t)0x00000007)  /*!< Bit Mask of 32bit */
N#define DMA_CR2_MAIN_STA_mask_h0                    ((uint16_t)0x0007)      /*!< Bit Mask of 16bit */
N#define DMA_CR2_MAIN_STA_mask_b0                    ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define DMA_CR2_MAIN_STA_shift_w                    (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CR2_MAIN_STA_shift_h0                   (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CR2_MAIN_STA_shift_b0                   (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH0A  [register's definitions]
N *              Offset[0x20]  DMA channel-0 control register 0 (0x4BF00020)
N ******************************************************************************
N */
N///@{
N#define DMA_CH0A_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH0A */
N#define DMA_CH0A_CH0_ERR2F_mask_w                   ((uint32_t)0x08000000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_ERR2F_mask_h1                  ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_ERR2F_mask_b3                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_ERR2F_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_CH0A_CH0_ERR2F_normal_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_CH0A_CH0_ERR2F_normal_b3                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_CH0A_CH0_ERR2F_happened_w               ((uint32_t)0x08000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_CH0A_CH0_ERR2F_happened_h1              ((uint16_t)0x0800)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_CH0A_CH0_ERR2F_happened_b3              ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_CH0A_CH0_TH2F_mask_w                    ((uint32_t)0x04000000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_TH2F_mask_h1                   ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_TH2F_mask_b3                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_TH2F_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_CH0A_CH0_TH2F_normal_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_CH0A_CH0_TH2F_normal_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_CH0A_CH0_TH2F_happened_w                ((uint32_t)0x04000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_CH0A_CH0_TH2F_happened_h1               ((uint16_t)0x0400)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_CH0A_CH0_TH2F_happened_b3               ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_CH0A_CH0_TC2F_mask_w                    ((uint32_t)0x02000000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_TC2F_mask_h1                   ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_TC2F_mask_b3                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_TC2F_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_CH0A_CH0_TC2F_normal_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_CH0A_CH0_TC2F_normal_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_CH0A_CH0_TC2F_happened_w                ((uint32_t)0x02000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_CH0A_CH0_TC2F_happened_h1               ((uint16_t)0x0200)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_CH0A_CH0_TC2F_happened_b3               ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_CH0A_CH0_EIE_mask_w                     ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_EIE_mask_h1                    ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_EIE_mask_b2                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_EIE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH0A_CH0_EIE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH0A_CH0_EIE_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH0A_CH0_EIE_enable_w                   ((uint32_t)0x00080000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH0A_CH0_EIE_enable_h1                  ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH0A_CH0_EIE_enable_b2                  ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH0A_CH0_HIE_mask_w                     ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_HIE_mask_h1                    ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_HIE_mask_b2                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_HIE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH0A_CH0_HIE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH0A_CH0_HIE_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH0A_CH0_HIE_enable_w                   ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH0A_CH0_HIE_enable_h1                  ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH0A_CH0_HIE_enable_b2                  ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH0A_CH0_CIE_mask_w                     ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_CIE_mask_h1                    ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_CIE_mask_b2                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_CIE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH0A_CH0_CIE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH0A_CH0_CIE_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH0A_CH0_CIE_enable_w                   ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH0A_CH0_CIE_enable_h1                  ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH0A_CH0_CIE_enable_b2                  ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH0A_CH0_REQ_mask_w                     ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_REQ_mask_h0                    ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_REQ_mask_b1                    ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_REQ_no_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):No of 32bit */
N#define DMA_CH0A_CH0_REQ_no_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):No of 16bit */
N#define DMA_CH0A_CH0_REQ_no_b1                      ((uint8_t )0x00)        /*!< Bit Value =(0):No of 8bit */
N#define DMA_CH0A_CH0_REQ_enable_w                   ((uint32_t)0x00008000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH0A_CH0_REQ_enable_h0                  ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH0A_CH0_REQ_enable_b1                  ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH0A_CH0_BSIZE_mask_w                   ((uint32_t)0x00003000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_BSIZE_mask_h0                  ((uint16_t)0x3000)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_BSIZE_mask_b1                  ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_BSIZE_one_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):One of 32bit */
N#define DMA_CH0A_CH0_BSIZE_one_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):One of 16bit */
N#define DMA_CH0A_CH0_BSIZE_one_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):One of 8bit */
N#define DMA_CH0A_CH0_BSIZE_two_w                    ((uint32_t)0x00001000)  /*!< Bit Value =(0x1):Two of 32bit */
N#define DMA_CH0A_CH0_BSIZE_two_h0                   ((uint16_t)0x1000)      /*!< Bit Value =(0x1):Two of 16bit */
N#define DMA_CH0A_CH0_BSIZE_two_b1                   ((uint8_t )0x10)        /*!< Bit Value =(0x1):Two of 8bit */
N#define DMA_CH0A_CH0_BSIZE_four_w                   ((uint32_t)0x00003000)  /*!< Bit Value =(0x3):Four of 32bit */
N#define DMA_CH0A_CH0_BSIZE_four_h0                  ((uint16_t)0x3000)      /*!< Bit Value =(0x3):Four of 16bit */
N#define DMA_CH0A_CH0_BSIZE_four_b1                  ((uint8_t )0x30)        /*!< Bit Value =(0x3):Four of 8bit */
N
N#define DMA_CH0A_CH0_PLS_mask_w                     ((uint32_t)0x00000C00)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_PLS_mask_h0                    ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_PLS_mask_b1                    ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_PLS_lv0_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):LV0 of 32bit */
N#define DMA_CH0A_CH0_PLS_lv0_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0x0):LV0 of 16bit */
N#define DMA_CH0A_CH0_PLS_lv0_b1                     ((uint8_t )0x00)        /*!< Bit Value =(0x0):LV0 of 8bit */
N#define DMA_CH0A_CH0_PLS_lv1_w                      ((uint32_t)0x00000400)  /*!< Bit Value =(0x1):LV1 of 32bit */
N#define DMA_CH0A_CH0_PLS_lv1_h0                     ((uint16_t)0x0400)      /*!< Bit Value =(0x1):LV1 of 16bit */
N#define DMA_CH0A_CH0_PLS_lv1_b1                     ((uint8_t )0x04)        /*!< Bit Value =(0x1):LV1 of 8bit */
N#define DMA_CH0A_CH0_PLS_lv2_w                      ((uint32_t)0x00000800)  /*!< Bit Value =(0x2):LV2 of 32bit */
N#define DMA_CH0A_CH0_PLS_lv2_h0                     ((uint16_t)0x0800)      /*!< Bit Value =(0x2):LV2 of 16bit */
N#define DMA_CH0A_CH0_PLS_lv2_b1                     ((uint8_t )0x08)        /*!< Bit Value =(0x2):LV2 of 8bit */
N#define DMA_CH0A_CH0_PLS_lv3_w                      ((uint32_t)0x00000C00)  /*!< Bit Value =(0x3):LV3 of 32bit */
N#define DMA_CH0A_CH0_PLS_lv3_h0                     ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):LV3 of 16bit */
N#define DMA_CH0A_CH0_PLS_lv3_b1                     ((uint8_t )0x0C)        /*!< Bit Value =(0x3):LV3 of 8bit */
N
N#define DMA_CH0A_CH0_XMDS_mask_w                    ((uint32_t)0x00000300)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_XMDS_mask_h0                   ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_XMDS_mask_b1                   ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_XMDS_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Disable of 32bit */
N#define DMA_CH0A_CH0_XMDS_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Disable of 16bit */
N#define DMA_CH0A_CH0_XMDS_disable_b1                ((uint8_t )0x00)        /*!< Bit Value =(0x0):Disable of 8bit */
N#define DMA_CH0A_CH0_XMDS_single_w                  ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):Single of 32bit */
N#define DMA_CH0A_CH0_XMDS_single_h0                 ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Single of 16bit */
N#define DMA_CH0A_CH0_XMDS_single_b1                 ((uint8_t )0x01)        /*!< Bit Value =(0x1):Single of 8bit */
N#define DMA_CH0A_CH0_XMDS_block_w                   ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):Block of 32bit */
N#define DMA_CH0A_CH0_XMDS_block_h0                  ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Block of 16bit */
N#define DMA_CH0A_CH0_XMDS_block_b1                  ((uint8_t )0x02)        /*!< Bit Value =(0x2):Block of 8bit */
N#define DMA_CH0A_CH0_XMDS_demand_w                  ((uint32_t)0x00000300)  /*!< Bit Value =(0x3):Demand of 32bit */
N#define DMA_CH0A_CH0_XMDS_demand_h0                 ((uint16_t)0x0300)      /*!< Bit Value =(0x3):Demand of 16bit */
N#define DMA_CH0A_CH0_XMDS_demand_b1                 ((uint8_t )0x03)        /*!< Bit Value =(0x3):Demand of 8bit */
N
N#define DMA_CH0A_CH0_ADSEL_mask_w                   ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_ADSEL_mask_h0                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_ADSEL_mask_b0                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_ADSEL_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_CH0A_CH0_ADSEL_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_CH0A_CH0_ADSEL_normal_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_CH0A_CH0_ADSEL_skip3_w                  ((uint32_t)0x00000008)  /*!< Bit Value =(1):SKIP3 of 32bit */
N#define DMA_CH0A_CH0_ADSEL_skip3_h0                 ((uint16_t)0x0008)      /*!< Bit Value =(1):SKIP3 of 16bit */
N#define DMA_CH0A_CH0_ADSEL_skip3_b0                 ((uint8_t )0x08)        /*!< Bit Value =(1):SKIP3 of 8bit */
N
N#define DMA_CH0A_CH0_LOOP_mask_w                    ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_LOOP_mask_h0                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_LOOP_mask_b0                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_LOOP_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH0A_CH0_LOOP_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH0A_CH0_LOOP_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH0A_CH0_LOOP_enable_w                  ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH0A_CH0_LOOP_enable_h0                 ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH0A_CH0_LOOP_enable_b0                 ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH0A_CH0_HOLD_mask_w                    ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_HOLD_mask_h0                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_HOLD_mask_b0                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_HOLD_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH0A_CH0_HOLD_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH0A_CH0_HOLD_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH0A_CH0_HOLD_enable_w                  ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH0A_CH0_HOLD_enable_h0                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH0A_CH0_HOLD_enable_b0                 ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH0A_CH0_EN_mask_w                      ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define DMA_CH0A_CH0_EN_mask_h0                     ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define DMA_CH0A_CH0_EN_mask_b0                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_CH0A_CH0_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH0A_CH0_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH0A_CH0_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH0A_CH0_EN_enable_w                    ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH0A_CH0_EN_enable_h0                   ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH0A_CH0_EN_enable_b0                   ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH0B  [register's definitions]
N *              Offset[0x24]  DMA channel-0 control register 1 (0x4BF00024)
N ******************************************************************************
N */
N///@{
N#define DMA_CH0B_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH0B */
N#define DMA_CH0B_CH0_XPIN_mask_w                    ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0B_CH0_XPIN_mask_h1                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define DMA_CH0B_CH0_XPIN_mask_b3                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_CH0B_CH0_XPIN_trg0_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):TRG0 of 32bit */
N#define DMA_CH0B_CH0_XPIN_trg0_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):TRG0 of 16bit */
N#define DMA_CH0B_CH0_XPIN_trg0_b3                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):TRG0 of 8bit */
N#define DMA_CH0B_CH0_XPIN_trg1_w                    ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):TRG1 of 32bit */
N#define DMA_CH0B_CH0_XPIN_trg1_h1                   ((uint16_t)0x0100)      /*!< Bit Value =(0x1):TRG1 of 16bit */
N#define DMA_CH0B_CH0_XPIN_trg1_b3                   ((uint8_t )0x01)        /*!< Bit Value =(0x1):TRG1 of 8bit */
N
N#define DMA_CH0B_CH0_DSYNC_mask_w                   ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0B_CH0_DSYNC_mask_h1                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define DMA_CH0B_CH0_DSYNC_mask_b2                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_CH0B_CH0_DSYNC_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH0B_CH0_DSYNC_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH0B_CH0_DSYNC_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH0B_CH0_DSYNC_enable_w                 ((uint32_t)0x00080000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH0B_CH0_DSYNC_enable_h1                ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH0B_CH0_DSYNC_enable_b2                ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH0B_CH0_SSYNC_mask_w                   ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0B_CH0_SSYNC_mask_h1                  ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define DMA_CH0B_CH0_SSYNC_mask_b2                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CH0B_CH0_SSYNC_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH0B_CH0_SSYNC_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH0B_CH0_SSYNC_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH0B_CH0_SSYNC_enable_w                 ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH0B_CH0_SSYNC_enable_h1                ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH0B_CH0_SSYNC_enable_b2                ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH0B_CH0_DINC_mask_w                    ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0B_CH0_DINC_mask_h1                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define DMA_CH0B_CH0_DINC_mask_b2                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CH0B_CH0_DINC_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH0B_CH0_DINC_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH0B_CH0_DINC_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH0B_CH0_DINC_enable_w                  ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH0B_CH0_DINC_enable_h1                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH0B_CH0_DINC_enable_b2                 ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH0B_CH0_SINC_mask_w                    ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define DMA_CH0B_CH0_SINC_mask_h1                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define DMA_CH0B_CH0_SINC_mask_b2                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_CH0B_CH0_SINC_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH0B_CH0_SINC_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH0B_CH0_SINC_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH0B_CH0_SINC_enable_w                  ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH0B_CH0_SINC_enable_h1                 ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH0B_CH0_SINC_enable_b2                 ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH0B_CH0_DET_mask_w                     ((uint32_t)0x00000F00)  /*!< Bit Mask of 32bit */
N#define DMA_CH0B_CH0_DET_mask_h0                    ((uint16_t)0x0F00)      /*!< Bit Mask of 16bit */
N#define DMA_CH0B_CH0_DET_mask_b1                    ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define DMA_CH0B_CH0_DET_shift_w                    (8)                     /*!< Bit Shift of 32bit */
N#define DMA_CH0B_CH0_DET_shift_h0                   (8)                     /*!< Bit Shift of 16bit */
N#define DMA_CH0B_CH0_DET_shift_b1                   (0)                     /*!< Bit Shift of 8bit */
N
N#define DMA_CH0B_CH0_SRC_mask_w                     ((uint32_t)0x0000000F)  /*!< Bit Mask of 32bit */
N#define DMA_CH0B_CH0_SRC_mask_h0                    ((uint16_t)0x000F)      /*!< Bit Mask of 16bit */
N#define DMA_CH0B_CH0_SRC_mask_b0                    ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define DMA_CH0B_CH0_SRC_shift_w                    (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH0B_CH0_SRC_shift_h0                   (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH0B_CH0_SRC_shift_b0                   (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH0NUM  [register's definitions]
N *              Offset[0x28]  DMA channel-0 control register 1 (0x4BF00028)
N ******************************************************************************
N */
N///@{
N#define DMA_CH0NUM_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH0NUM */
N#define DMA_CH0NUM_CH0_NUM_mask_w                   ((uint32_t)0x0000FFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH0NUM_CH0_NUM_mask_h0                  ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define DMA_CH0NUM_CH0_NUM_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH0NUM_CH0_NUM_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH0NUM_CH0_NUM_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH0CNT  [register's definitions]
N *              Offset[0x2C]  DMA channel-0 control register 1 (0x4BF0002C)
N ******************************************************************************
N */
N///@{
N#define DMA_CH0CNT_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH0CNT */
N#define DMA_CH0CNT_CH0_CNT_mask_w                   ((uint32_t)0x0000FFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH0CNT_CH0_CNT_mask_h0                  ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define DMA_CH0CNT_CH0_CNT_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH0CNT_CH0_CNT_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH0CNT_CH0_CNT_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH0SSA  [register's definitions]
N *              Offset[0x30]  DMA channel-0 source start address register (0x4BF00030)
N ******************************************************************************
N */
N///@{
N#define DMA_CH0SSA_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH0SSA */
N#define DMA_CH0SSA_CH0_SSA_mask_w                   ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH0SSA_CH0_SSA_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH0SSA_CH0_SSA_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH0SSA_CH0_SSA_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH0SCA  [register's definitions]
N *              Offset[0x34]  DMA channel-0 source current address register (0x4BF00034)
N ******************************************************************************
N */
N///@{
N#define DMA_CH0SCA_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH0SCA */
N#define DMA_CH0SCA_CH0_SCA_mask_w                   ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH0SCA_CH0_SCA_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH0SCA_CH0_SCA_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH0SCA_CH0_SCA_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH0DSA  [register's definitions]
N *              Offset[0x38]  DMA channel-0 destination start address register (0x4BF00038)
N ******************************************************************************
N */
N///@{
N#define DMA_CH0DSA_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH0DSA */
N#define DMA_CH0DSA_CH0_DSA_mask_w                   ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH0DSA_CH0_DSA_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH0DSA_CH0_DSA_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH0DSA_CH0_DSA_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH0DCA  [register's definitions]
N *              Offset[0x3C]  DMA channel-0 destination current address register (0x4BF0003C)
N ******************************************************************************
N */
N///@{
N#define DMA_CH0DCA_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH0DCA */
N#define DMA_CH0DCA_CH0_DCA_mask_w                   ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH0DCA_CH0_DCA_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH0DCA_CH0_DCA_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH0DCA_CH0_DCA_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH1A  [register's definitions]
N *              Offset[0x40]  DMA channel-1 control register 0 (0x4BF00040)
N ******************************************************************************
N */
N///@{
N#define DMA_CH1A_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH1A */
N#define DMA_CH1A_CH1_ERR2F_mask_w                   ((uint32_t)0x08000000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_ERR2F_mask_h1                  ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_ERR2F_mask_b3                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_ERR2F_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_CH1A_CH1_ERR2F_normal_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_CH1A_CH1_ERR2F_normal_b3                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_CH1A_CH1_ERR2F_happened_w               ((uint32_t)0x08000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_CH1A_CH1_ERR2F_happened_h1              ((uint16_t)0x0800)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_CH1A_CH1_ERR2F_happened_b3              ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_CH1A_CH1_TH2F_mask_w                    ((uint32_t)0x04000000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_TH2F_mask_h1                   ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_TH2F_mask_b3                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_TH2F_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_CH1A_CH1_TH2F_normal_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_CH1A_CH1_TH2F_normal_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_CH1A_CH1_TH2F_happened_w                ((uint32_t)0x04000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_CH1A_CH1_TH2F_happened_h1               ((uint16_t)0x0400)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_CH1A_CH1_TH2F_happened_b3               ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_CH1A_CH1_TC2F_mask_w                    ((uint32_t)0x02000000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_TC2F_mask_h1                   ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_TC2F_mask_b3                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_TC2F_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_CH1A_CH1_TC2F_normal_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_CH1A_CH1_TC2F_normal_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_CH1A_CH1_TC2F_happened_w                ((uint32_t)0x02000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_CH1A_CH1_TC2F_happened_h1               ((uint16_t)0x0200)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_CH1A_CH1_TC2F_happened_b3               ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_CH1A_CH1_EIE_mask_w                     ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_EIE_mask_h1                    ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_EIE_mask_b2                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_EIE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH1A_CH1_EIE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH1A_CH1_EIE_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH1A_CH1_EIE_enable_w                   ((uint32_t)0x00080000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH1A_CH1_EIE_enable_h1                  ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH1A_CH1_EIE_enable_b2                  ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH1A_CH1_HIE_mask_w                     ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_HIE_mask_h1                    ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_HIE_mask_b2                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_HIE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH1A_CH1_HIE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH1A_CH1_HIE_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH1A_CH1_HIE_enable_w                   ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH1A_CH1_HIE_enable_h1                  ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH1A_CH1_HIE_enable_b2                  ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH1A_CH1_CIE_mask_w                     ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_CIE_mask_h1                    ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_CIE_mask_b2                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_CIE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH1A_CH1_CIE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH1A_CH1_CIE_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH1A_CH1_CIE_enable_w                   ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH1A_CH1_CIE_enable_h1                  ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH1A_CH1_CIE_enable_b2                  ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH1A_CH1_REQ_mask_w                     ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_REQ_mask_h0                    ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_REQ_mask_b1                    ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_REQ_no_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):No of 32bit */
N#define DMA_CH1A_CH1_REQ_no_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):No of 16bit */
N#define DMA_CH1A_CH1_REQ_no_b1                      ((uint8_t )0x00)        /*!< Bit Value =(0):No of 8bit */
N#define DMA_CH1A_CH1_REQ_enable_w                   ((uint32_t)0x00008000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH1A_CH1_REQ_enable_h0                  ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH1A_CH1_REQ_enable_b1                  ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH1A_CH1_BSIZE_mask_w                   ((uint32_t)0x00003000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_BSIZE_mask_h0                  ((uint16_t)0x3000)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_BSIZE_mask_b1                  ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_BSIZE_one_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):One of 32bit */
N#define DMA_CH1A_CH1_BSIZE_one_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):One of 16bit */
N#define DMA_CH1A_CH1_BSIZE_one_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):One of 8bit */
N#define DMA_CH1A_CH1_BSIZE_two_w                    ((uint32_t)0x00001000)  /*!< Bit Value =(0x1):Two of 32bit */
N#define DMA_CH1A_CH1_BSIZE_two_h0                   ((uint16_t)0x1000)      /*!< Bit Value =(0x1):Two of 16bit */
N#define DMA_CH1A_CH1_BSIZE_two_b1                   ((uint8_t )0x10)        /*!< Bit Value =(0x1):Two of 8bit */
N#define DMA_CH1A_CH1_BSIZE_four_w                   ((uint32_t)0x00003000)  /*!< Bit Value =(0x3):Four of 32bit */
N#define DMA_CH1A_CH1_BSIZE_four_h0                  ((uint16_t)0x3000)      /*!< Bit Value =(0x3):Four of 16bit */
N#define DMA_CH1A_CH1_BSIZE_four_b1                  ((uint8_t )0x30)        /*!< Bit Value =(0x3):Four of 8bit */
N
N#define DMA_CH1A_CH1_PLS_mask_w                     ((uint32_t)0x00000C00)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_PLS_mask_h0                    ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_PLS_mask_b1                    ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_PLS_lv0_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):LV0 of 32bit */
N#define DMA_CH1A_CH1_PLS_lv0_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0x0):LV0 of 16bit */
N#define DMA_CH1A_CH1_PLS_lv0_b1                     ((uint8_t )0x00)        /*!< Bit Value =(0x0):LV0 of 8bit */
N#define DMA_CH1A_CH1_PLS_lv1_w                      ((uint32_t)0x00000400)  /*!< Bit Value =(0x1):LV1 of 32bit */
N#define DMA_CH1A_CH1_PLS_lv1_h0                     ((uint16_t)0x0400)      /*!< Bit Value =(0x1):LV1 of 16bit */
N#define DMA_CH1A_CH1_PLS_lv1_b1                     ((uint8_t )0x04)        /*!< Bit Value =(0x1):LV1 of 8bit */
N#define DMA_CH1A_CH1_PLS_lv2_w                      ((uint32_t)0x00000800)  /*!< Bit Value =(0x2):LV2 of 32bit */
N#define DMA_CH1A_CH1_PLS_lv2_h0                     ((uint16_t)0x0800)      /*!< Bit Value =(0x2):LV2 of 16bit */
N#define DMA_CH1A_CH1_PLS_lv2_b1                     ((uint8_t )0x08)        /*!< Bit Value =(0x2):LV2 of 8bit */
N#define DMA_CH1A_CH1_PLS_lv3_w                      ((uint32_t)0x00000C00)  /*!< Bit Value =(0x3):LV3 of 32bit */
N#define DMA_CH1A_CH1_PLS_lv3_h0                     ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):LV3 of 16bit */
N#define DMA_CH1A_CH1_PLS_lv3_b1                     ((uint8_t )0x0C)        /*!< Bit Value =(0x3):LV3 of 8bit */
N
N#define DMA_CH1A_CH1_XMDS_mask_w                    ((uint32_t)0x00000300)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_XMDS_mask_h0                   ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_XMDS_mask_b1                   ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_XMDS_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Disable of 32bit */
N#define DMA_CH1A_CH1_XMDS_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Disable of 16bit */
N#define DMA_CH1A_CH1_XMDS_disable_b1                ((uint8_t )0x00)        /*!< Bit Value =(0x0):Disable of 8bit */
N#define DMA_CH1A_CH1_XMDS_single_w                  ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):Single of 32bit */
N#define DMA_CH1A_CH1_XMDS_single_h0                 ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Single of 16bit */
N#define DMA_CH1A_CH1_XMDS_single_b1                 ((uint8_t )0x01)        /*!< Bit Value =(0x1):Single of 8bit */
N#define DMA_CH1A_CH1_XMDS_block_w                   ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):Block of 32bit */
N#define DMA_CH1A_CH1_XMDS_block_h0                  ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Block of 16bit */
N#define DMA_CH1A_CH1_XMDS_block_b1                  ((uint8_t )0x02)        /*!< Bit Value =(0x2):Block of 8bit */
N#define DMA_CH1A_CH1_XMDS_demand_w                  ((uint32_t)0x00000300)  /*!< Bit Value =(0x3):Demand of 32bit */
N#define DMA_CH1A_CH1_XMDS_demand_h0                 ((uint16_t)0x0300)      /*!< Bit Value =(0x3):Demand of 16bit */
N#define DMA_CH1A_CH1_XMDS_demand_b1                 ((uint8_t )0x03)        /*!< Bit Value =(0x3):Demand of 8bit */
N
N#define DMA_CH1A_CH1_ADSEL_mask_w                   ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_ADSEL_mask_h0                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_ADSEL_mask_b0                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_ADSEL_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_CH1A_CH1_ADSEL_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_CH1A_CH1_ADSEL_normal_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_CH1A_CH1_ADSEL_skip3_w                  ((uint32_t)0x00000008)  /*!< Bit Value =(1):SKIP3 of 32bit */
N#define DMA_CH1A_CH1_ADSEL_skip3_h0                 ((uint16_t)0x0008)      /*!< Bit Value =(1):SKIP3 of 16bit */
N#define DMA_CH1A_CH1_ADSEL_skip3_b0                 ((uint8_t )0x08)        /*!< Bit Value =(1):SKIP3 of 8bit */
N
N#define DMA_CH1A_CH1_LOOP_mask_w                    ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_LOOP_mask_h0                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_LOOP_mask_b0                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_LOOP_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH1A_CH1_LOOP_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH1A_CH1_LOOP_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH1A_CH1_LOOP_enable_w                  ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH1A_CH1_LOOP_enable_h0                 ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH1A_CH1_LOOP_enable_b0                 ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH1A_CH1_HOLD_mask_w                    ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_HOLD_mask_h0                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_HOLD_mask_b0                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_HOLD_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH1A_CH1_HOLD_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH1A_CH1_HOLD_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH1A_CH1_HOLD_enable_w                  ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH1A_CH1_HOLD_enable_h0                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH1A_CH1_HOLD_enable_b0                 ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH1A_CH1_EN_mask_w                      ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define DMA_CH1A_CH1_EN_mask_h0                     ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define DMA_CH1A_CH1_EN_mask_b0                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_CH1A_CH1_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH1A_CH1_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH1A_CH1_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH1A_CH1_EN_enable_w                    ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH1A_CH1_EN_enable_h0                   ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH1A_CH1_EN_enable_b0                   ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH1B  [register's definitions]
N *              Offset[0x44]  DMA channel-1 control register 1 (0x4BF00044)
N ******************************************************************************
N */
N///@{
N#define DMA_CH1B_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH1B */
N#define DMA_CH1B_CH1_XPIN_mask_w                    ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1B_CH1_XPIN_mask_h1                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define DMA_CH1B_CH1_XPIN_mask_b3                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_CH1B_CH1_XPIN_trg0_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):TRG0 of 32bit */
N#define DMA_CH1B_CH1_XPIN_trg0_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):TRG0 of 16bit */
N#define DMA_CH1B_CH1_XPIN_trg0_b3                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):TRG0 of 8bit */
N#define DMA_CH1B_CH1_XPIN_trg1_w                    ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):TRG1 of 32bit */
N#define DMA_CH1B_CH1_XPIN_trg1_h1                   ((uint16_t)0x0100)      /*!< Bit Value =(0x1):TRG1 of 16bit */
N#define DMA_CH1B_CH1_XPIN_trg1_b3                   ((uint8_t )0x01)        /*!< Bit Value =(0x1):TRG1 of 8bit */
N
N#define DMA_CH1B_CH1_DSYNC_mask_w                   ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1B_CH1_DSYNC_mask_h1                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define DMA_CH1B_CH1_DSYNC_mask_b2                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_CH1B_CH1_DSYNC_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH1B_CH1_DSYNC_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH1B_CH1_DSYNC_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH1B_CH1_DSYNC_enable_w                 ((uint32_t)0x00080000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH1B_CH1_DSYNC_enable_h1                ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH1B_CH1_DSYNC_enable_b2                ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH1B_CH1_SSYNC_mask_w                   ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1B_CH1_SSYNC_mask_h1                  ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define DMA_CH1B_CH1_SSYNC_mask_b2                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CH1B_CH1_SSYNC_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH1B_CH1_SSYNC_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH1B_CH1_SSYNC_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH1B_CH1_SSYNC_enable_w                 ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH1B_CH1_SSYNC_enable_h1                ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH1B_CH1_SSYNC_enable_b2                ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH1B_CH1_DINC_mask_w                    ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1B_CH1_DINC_mask_h1                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define DMA_CH1B_CH1_DINC_mask_b2                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CH1B_CH1_DINC_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH1B_CH1_DINC_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH1B_CH1_DINC_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH1B_CH1_DINC_enable_w                  ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH1B_CH1_DINC_enable_h1                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH1B_CH1_DINC_enable_b2                 ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH1B_CH1_SINC_mask_w                    ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define DMA_CH1B_CH1_SINC_mask_h1                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define DMA_CH1B_CH1_SINC_mask_b2                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_CH1B_CH1_SINC_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH1B_CH1_SINC_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH1B_CH1_SINC_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH1B_CH1_SINC_enable_w                  ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH1B_CH1_SINC_enable_h1                 ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH1B_CH1_SINC_enable_b2                 ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH1B_CH1_DET_mask_w                     ((uint32_t)0x00000F00)  /*!< Bit Mask of 32bit */
N#define DMA_CH1B_CH1_DET_mask_h0                    ((uint16_t)0x0F00)      /*!< Bit Mask of 16bit */
N#define DMA_CH1B_CH1_DET_mask_b1                    ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define DMA_CH1B_CH1_DET_shift_w                    (8)                     /*!< Bit Shift of 32bit */
N#define DMA_CH1B_CH1_DET_shift_h0                   (8)                     /*!< Bit Shift of 16bit */
N#define DMA_CH1B_CH1_DET_shift_b1                   (0)                     /*!< Bit Shift of 8bit */
N
N#define DMA_CH1B_CH1_SRC_mask_w                     ((uint32_t)0x0000000F)  /*!< Bit Mask of 32bit */
N#define DMA_CH1B_CH1_SRC_mask_h0                    ((uint16_t)0x000F)      /*!< Bit Mask of 16bit */
N#define DMA_CH1B_CH1_SRC_mask_b0                    ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define DMA_CH1B_CH1_SRC_shift_w                    (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH1B_CH1_SRC_shift_h0                   (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH1B_CH1_SRC_shift_b0                   (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH1NUM  [register's definitions]
N *              Offset[0x48]  DMA channel-1 control register 1 (0x4BF00048)
N ******************************************************************************
N */
N///@{
N#define DMA_CH1NUM_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH1NUM */
N#define DMA_CH1NUM_CH1_NUM_mask_w                   ((uint32_t)0x0000FFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH1NUM_CH1_NUM_mask_h0                  ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define DMA_CH1NUM_CH1_NUM_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH1NUM_CH1_NUM_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH1NUM_CH1_NUM_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH1CNT  [register's definitions]
N *              Offset[0x4C]  DMA channel-1 control register 1 (0x4BF0004C)
N ******************************************************************************
N */
N///@{
N#define DMA_CH1CNT_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH1CNT */
N#define DMA_CH1CNT_CH1_CNT_mask_w                   ((uint32_t)0x0000FFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH1CNT_CH1_CNT_mask_h0                  ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define DMA_CH1CNT_CH1_CNT_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH1CNT_CH1_CNT_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH1CNT_CH1_CNT_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH1SSA  [register's definitions]
N *              Offset[0x50]  DMA channel-1 source start address register (0x4BF00050)
N ******************************************************************************
N */
N///@{
N#define DMA_CH1SSA_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH1SSA */
N#define DMA_CH1SSA_CH1_SSA_mask_w                   ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH1SSA_CH1_SSA_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH1SSA_CH1_SSA_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH1SSA_CH1_SSA_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH1SCA  [register's definitions]
N *              Offset[0x54]  DMA channel-1 source current address register (0x4BF00054)
N ******************************************************************************
N */
N///@{
N#define DMA_CH1SCA_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH1SCA */
N#define DMA_CH1SCA_CH1_SCA_mask_w                   ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH1SCA_CH1_SCA_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH1SCA_CH1_SCA_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH1SCA_CH1_SCA_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH1DSA  [register's definitions]
N *              Offset[0x58]  DMA channel-1 destination start address register (0x4BF00058)
N ******************************************************************************
N */
N///@{
N#define DMA_CH1DSA_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH1DSA */
N#define DMA_CH1DSA_CH1_DSA_mask_w                   ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH1DSA_CH1_DSA_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH1DSA_CH1_DSA_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH1DSA_CH1_DSA_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH1DCA  [register's definitions]
N *              Offset[0x5C]  DMA channel-1 destination current address register (0x4BF0005C)
N ******************************************************************************
N */
N///@{
N#define DMA_CH1DCA_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH1DCA */
N#define DMA_CH1DCA_CH1_DCA_mask_w                   ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH1DCA_CH1_DCA_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH1DCA_CH1_DCA_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH1DCA_CH1_DCA_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH2A  [register's definitions]
N *              Offset[0x60]  DMA channel-2 control register 0 (0x4BF00060)
N ******************************************************************************
N */
N///@{
N#define DMA_CH2A_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH2A */
N#define DMA_CH2A_CH2_ERR2F_mask_w                   ((uint32_t)0x08000000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_ERR2F_mask_h1                  ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_ERR2F_mask_b3                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_ERR2F_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_CH2A_CH2_ERR2F_normal_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_CH2A_CH2_ERR2F_normal_b3                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_CH2A_CH2_ERR2F_happened_w               ((uint32_t)0x08000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_CH2A_CH2_ERR2F_happened_h1              ((uint16_t)0x0800)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_CH2A_CH2_ERR2F_happened_b3              ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_CH2A_CH2_TH2F_mask_w                    ((uint32_t)0x04000000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_TH2F_mask_h1                   ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_TH2F_mask_b3                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_TH2F_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_CH2A_CH2_TH2F_normal_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_CH2A_CH2_TH2F_normal_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_CH2A_CH2_TH2F_happened_w                ((uint32_t)0x04000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_CH2A_CH2_TH2F_happened_h1               ((uint16_t)0x0400)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_CH2A_CH2_TH2F_happened_b3               ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_CH2A_CH2_TC2F_mask_w                    ((uint32_t)0x02000000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_TC2F_mask_h1                   ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_TC2F_mask_b3                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_TC2F_normal_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_CH2A_CH2_TC2F_normal_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_CH2A_CH2_TC2F_normal_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_CH2A_CH2_TC2F_happened_w                ((uint32_t)0x02000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define DMA_CH2A_CH2_TC2F_happened_h1               ((uint16_t)0x0200)      /*!< Bit Value =(1):Happened of 16bit */
N#define DMA_CH2A_CH2_TC2F_happened_b3               ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define DMA_CH2A_CH2_EIE_mask_w                     ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_EIE_mask_h1                    ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_EIE_mask_b2                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_EIE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH2A_CH2_EIE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH2A_CH2_EIE_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH2A_CH2_EIE_enable_w                   ((uint32_t)0x00080000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH2A_CH2_EIE_enable_h1                  ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH2A_CH2_EIE_enable_b2                  ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH2A_CH2_HIE_mask_w                     ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_HIE_mask_h1                    ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_HIE_mask_b2                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_HIE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH2A_CH2_HIE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH2A_CH2_HIE_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH2A_CH2_HIE_enable_w                   ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH2A_CH2_HIE_enable_h1                  ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH2A_CH2_HIE_enable_b2                  ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH2A_CH2_CIE_mask_w                     ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_CIE_mask_h1                    ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_CIE_mask_b2                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_CIE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH2A_CH2_CIE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH2A_CH2_CIE_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH2A_CH2_CIE_enable_w                   ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH2A_CH2_CIE_enable_h1                  ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH2A_CH2_CIE_enable_b2                  ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH2A_CH2_REQ_mask_w                     ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_REQ_mask_h0                    ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_REQ_mask_b1                    ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_REQ_no_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):No of 32bit */
N#define DMA_CH2A_CH2_REQ_no_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):No of 16bit */
N#define DMA_CH2A_CH2_REQ_no_b1                      ((uint8_t )0x00)        /*!< Bit Value =(0):No of 8bit */
N#define DMA_CH2A_CH2_REQ_enable_w                   ((uint32_t)0x00008000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH2A_CH2_REQ_enable_h0                  ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH2A_CH2_REQ_enable_b1                  ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH2A_CH2_BSIZE_mask_w                   ((uint32_t)0x00003000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_BSIZE_mask_h0                  ((uint16_t)0x3000)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_BSIZE_mask_b1                  ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_BSIZE_one_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):One of 32bit */
N#define DMA_CH2A_CH2_BSIZE_one_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):One of 16bit */
N#define DMA_CH2A_CH2_BSIZE_one_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):One of 8bit */
N#define DMA_CH2A_CH2_BSIZE_two_w                    ((uint32_t)0x00001000)  /*!< Bit Value =(0x1):Two of 32bit */
N#define DMA_CH2A_CH2_BSIZE_two_h0                   ((uint16_t)0x1000)      /*!< Bit Value =(0x1):Two of 16bit */
N#define DMA_CH2A_CH2_BSIZE_two_b1                   ((uint8_t )0x10)        /*!< Bit Value =(0x1):Two of 8bit */
N#define DMA_CH2A_CH2_BSIZE_four_w                   ((uint32_t)0x00003000)  /*!< Bit Value =(0x3):Four of 32bit */
N#define DMA_CH2A_CH2_BSIZE_four_h0                  ((uint16_t)0x3000)      /*!< Bit Value =(0x3):Four of 16bit */
N#define DMA_CH2A_CH2_BSIZE_four_b1                  ((uint8_t )0x30)        /*!< Bit Value =(0x3):Four of 8bit */
N
N#define DMA_CH2A_CH2_PLS_mask_w                     ((uint32_t)0x00000C00)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_PLS_mask_h0                    ((uint16_t)0x0C00)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_PLS_mask_b1                    ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_PLS_lv0_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):LV0 of 32bit */
N#define DMA_CH2A_CH2_PLS_lv0_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0x0):LV0 of 16bit */
N#define DMA_CH2A_CH2_PLS_lv0_b1                     ((uint8_t )0x00)        /*!< Bit Value =(0x0):LV0 of 8bit */
N#define DMA_CH2A_CH2_PLS_lv1_w                      ((uint32_t)0x00000400)  /*!< Bit Value =(0x1):LV1 of 32bit */
N#define DMA_CH2A_CH2_PLS_lv1_h0                     ((uint16_t)0x0400)      /*!< Bit Value =(0x1):LV1 of 16bit */
N#define DMA_CH2A_CH2_PLS_lv1_b1                     ((uint8_t )0x04)        /*!< Bit Value =(0x1):LV1 of 8bit */
N#define DMA_CH2A_CH2_PLS_lv2_w                      ((uint32_t)0x00000800)  /*!< Bit Value =(0x2):LV2 of 32bit */
N#define DMA_CH2A_CH2_PLS_lv2_h0                     ((uint16_t)0x0800)      /*!< Bit Value =(0x2):LV2 of 16bit */
N#define DMA_CH2A_CH2_PLS_lv2_b1                     ((uint8_t )0x08)        /*!< Bit Value =(0x2):LV2 of 8bit */
N#define DMA_CH2A_CH2_PLS_lv3_w                      ((uint32_t)0x00000C00)  /*!< Bit Value =(0x3):LV3 of 32bit */
N#define DMA_CH2A_CH2_PLS_lv3_h0                     ((uint16_t)0x0C00)      /*!< Bit Value =(0x3):LV3 of 16bit */
N#define DMA_CH2A_CH2_PLS_lv3_b1                     ((uint8_t )0x0C)        /*!< Bit Value =(0x3):LV3 of 8bit */
N
N#define DMA_CH2A_CH2_XMDS_mask_w                    ((uint32_t)0x00000300)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_XMDS_mask_h0                   ((uint16_t)0x0300)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_XMDS_mask_b1                   ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_XMDS_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Disable of 32bit */
N#define DMA_CH2A_CH2_XMDS_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Disable of 16bit */
N#define DMA_CH2A_CH2_XMDS_disable_b1                ((uint8_t )0x00)        /*!< Bit Value =(0x0):Disable of 8bit */
N#define DMA_CH2A_CH2_XMDS_single_w                  ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):Single of 32bit */
N#define DMA_CH2A_CH2_XMDS_single_h0                 ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Single of 16bit */
N#define DMA_CH2A_CH2_XMDS_single_b1                 ((uint8_t )0x01)        /*!< Bit Value =(0x1):Single of 8bit */
N#define DMA_CH2A_CH2_XMDS_block_w                   ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):Block of 32bit */
N#define DMA_CH2A_CH2_XMDS_block_h0                  ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Block of 16bit */
N#define DMA_CH2A_CH2_XMDS_block_b1                  ((uint8_t )0x02)        /*!< Bit Value =(0x2):Block of 8bit */
N#define DMA_CH2A_CH2_XMDS_demand_w                  ((uint32_t)0x00000300)  /*!< Bit Value =(0x3):Demand of 32bit */
N#define DMA_CH2A_CH2_XMDS_demand_h0                 ((uint16_t)0x0300)      /*!< Bit Value =(0x3):Demand of 16bit */
N#define DMA_CH2A_CH2_XMDS_demand_b1                 ((uint8_t )0x03)        /*!< Bit Value =(0x3):Demand of 8bit */
N
N#define DMA_CH2A_CH2_ADSEL_mask_w                   ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_ADSEL_mask_h0                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_ADSEL_mask_b0                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_ADSEL_normal_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define DMA_CH2A_CH2_ADSEL_normal_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define DMA_CH2A_CH2_ADSEL_normal_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define DMA_CH2A_CH2_ADSEL_skip3_w                  ((uint32_t)0x00000008)  /*!< Bit Value =(1):SKIP3 of 32bit */
N#define DMA_CH2A_CH2_ADSEL_skip3_h0                 ((uint16_t)0x0008)      /*!< Bit Value =(1):SKIP3 of 16bit */
N#define DMA_CH2A_CH2_ADSEL_skip3_b0                 ((uint8_t )0x08)        /*!< Bit Value =(1):SKIP3 of 8bit */
N
N#define DMA_CH2A_CH2_LOOP_mask_w                    ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_LOOP_mask_h0                   ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_LOOP_mask_b0                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_LOOP_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH2A_CH2_LOOP_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH2A_CH2_LOOP_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH2A_CH2_LOOP_enable_w                  ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH2A_CH2_LOOP_enable_h0                 ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH2A_CH2_LOOP_enable_b0                 ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH2A_CH2_HOLD_mask_w                    ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_HOLD_mask_h0                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_HOLD_mask_b0                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_HOLD_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH2A_CH2_HOLD_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH2A_CH2_HOLD_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH2A_CH2_HOLD_enable_w                  ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH2A_CH2_HOLD_enable_h0                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH2A_CH2_HOLD_enable_b0                 ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH2A_CH2_EN_mask_w                      ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define DMA_CH2A_CH2_EN_mask_h0                     ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define DMA_CH2A_CH2_EN_mask_b0                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_CH2A_CH2_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH2A_CH2_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH2A_CH2_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH2A_CH2_EN_enable_w                    ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH2A_CH2_EN_enable_h0                   ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH2A_CH2_EN_enable_b0                   ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH2B  [register's definitions]
N *              Offset[0x64]  DMA channel-2 control register 1 (0x4BF00064)
N ******************************************************************************
N */
N///@{
N#define DMA_CH2B_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH2B */
N#define DMA_CH2B_CH2_XPIN_mask_w                    ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2B_CH2_XPIN_mask_h1                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define DMA_CH2B_CH2_XPIN_mask_b3                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_CH2B_CH2_XPIN_trg0_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):TRG0 of 32bit */
N#define DMA_CH2B_CH2_XPIN_trg0_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):TRG0 of 16bit */
N#define DMA_CH2B_CH2_XPIN_trg0_b3                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):TRG0 of 8bit */
N#define DMA_CH2B_CH2_XPIN_trg1_w                    ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):TRG1 of 32bit */
N#define DMA_CH2B_CH2_XPIN_trg1_h1                   ((uint16_t)0x0100)      /*!< Bit Value =(0x1):TRG1 of 16bit */
N#define DMA_CH2B_CH2_XPIN_trg1_b3                   ((uint8_t )0x01)        /*!< Bit Value =(0x1):TRG1 of 8bit */
N
N#define DMA_CH2B_CH2_DSYNC_mask_w                   ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2B_CH2_DSYNC_mask_h1                  ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define DMA_CH2B_CH2_DSYNC_mask_b2                  ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define DMA_CH2B_CH2_DSYNC_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH2B_CH2_DSYNC_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH2B_CH2_DSYNC_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH2B_CH2_DSYNC_enable_w                 ((uint32_t)0x00080000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH2B_CH2_DSYNC_enable_h1                ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH2B_CH2_DSYNC_enable_b2                ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH2B_CH2_SSYNC_mask_w                   ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2B_CH2_SSYNC_mask_h1                  ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define DMA_CH2B_CH2_SSYNC_mask_b2                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define DMA_CH2B_CH2_SSYNC_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH2B_CH2_SSYNC_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH2B_CH2_SSYNC_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH2B_CH2_SSYNC_enable_w                 ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH2B_CH2_SSYNC_enable_h1                ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH2B_CH2_SSYNC_enable_b2                ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH2B_CH2_DINC_mask_w                    ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2B_CH2_DINC_mask_h1                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define DMA_CH2B_CH2_DINC_mask_b2                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define DMA_CH2B_CH2_DINC_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH2B_CH2_DINC_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH2B_CH2_DINC_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH2B_CH2_DINC_enable_w                  ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH2B_CH2_DINC_enable_h1                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH2B_CH2_DINC_enable_b2                 ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH2B_CH2_SINC_mask_w                    ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define DMA_CH2B_CH2_SINC_mask_h1                   ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define DMA_CH2B_CH2_SINC_mask_b2                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define DMA_CH2B_CH2_SINC_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define DMA_CH2B_CH2_SINC_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define DMA_CH2B_CH2_SINC_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define DMA_CH2B_CH2_SINC_enable_w                  ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define DMA_CH2B_CH2_SINC_enable_h1                 ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define DMA_CH2B_CH2_SINC_enable_b2                 ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define DMA_CH2B_CH2_DET_mask_w                     ((uint32_t)0x00000F00)  /*!< Bit Mask of 32bit */
N#define DMA_CH2B_CH2_DET_mask_h0                    ((uint16_t)0x0F00)      /*!< Bit Mask of 16bit */
N#define DMA_CH2B_CH2_DET_mask_b1                    ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define DMA_CH2B_CH2_DET_shift_w                    (8)                     /*!< Bit Shift of 32bit */
N#define DMA_CH2B_CH2_DET_shift_h0                   (8)                     /*!< Bit Shift of 16bit */
N#define DMA_CH2B_CH2_DET_shift_b1                   (0)                     /*!< Bit Shift of 8bit */
N
N#define DMA_CH2B_CH2_SRC_mask_w                     ((uint32_t)0x0000000F)  /*!< Bit Mask of 32bit */
N#define DMA_CH2B_CH2_SRC_mask_h0                    ((uint16_t)0x000F)      /*!< Bit Mask of 16bit */
N#define DMA_CH2B_CH2_SRC_mask_b0                    ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define DMA_CH2B_CH2_SRC_shift_w                    (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH2B_CH2_SRC_shift_h0                   (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH2B_CH2_SRC_shift_b0                   (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH2NUM  [register's definitions]
N *              Offset[0x68]  DMA channel-2 control register 1 (0x4BF00068)
N ******************************************************************************
N */
N///@{
N#define DMA_CH2NUM_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH2NUM */
N#define DMA_CH2NUM_CH2_NUM_mask_w                   ((uint32_t)0x0000FFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH2NUM_CH2_NUM_mask_h0                  ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define DMA_CH2NUM_CH2_NUM_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH2NUM_CH2_NUM_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH2NUM_CH2_NUM_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH2CNT  [register's definitions]
N *              Offset[0x6C]  DMA channel-2 control register 1 (0x4BF0006C)
N ******************************************************************************
N */
N///@{
N#define DMA_CH2CNT_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH2CNT */
N#define DMA_CH2CNT_CH2_CNT_mask_w                   ((uint32_t)0x0000FFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH2CNT_CH2_CNT_mask_h0                  ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define DMA_CH2CNT_CH2_CNT_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH2CNT_CH2_CNT_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH2CNT_CH2_CNT_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH2SSA  [register's definitions]
N *              Offset[0x70]  DMA channel-2 source start address register (0x4BF00070)
N ******************************************************************************
N */
N///@{
N#define DMA_CH2SSA_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH2SSA */
N#define DMA_CH2SSA_CH2_SSA_mask_w                   ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH2SSA_CH2_SSA_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH2SSA_CH2_SSA_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH2SSA_CH2_SSA_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH2SCA  [register's definitions]
N *              Offset[0x74]  DMA channel-2 source current address register (0x4BF00074)
N ******************************************************************************
N */
N///@{
N#define DMA_CH2SCA_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH2SCA */
N#define DMA_CH2SCA_CH2_SCA_mask_w                   ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH2SCA_CH2_SCA_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH2SCA_CH2_SCA_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH2SCA_CH2_SCA_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH2DSA  [register's definitions]
N *              Offset[0x78]  DMA channel-2 destination start address register (0x4BF00078)
N ******************************************************************************
N */
N///@{
N#define DMA_CH2DSA_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH2DSA */
N#define DMA_CH2DSA_CH2_DSA_mask_w                   ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH2DSA_CH2_DSA_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH2DSA_CH2_DSA_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH2DSA_CH2_DSA_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        DMA_CH2DCA  [register's definitions]
N *              Offset[0x7C]  DMA channel-2 destination current address register (0x4BF0007C)
N ******************************************************************************
N */
N///@{
N#define DMA_CH2DCA_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of DMA_CH2DCA */
N#define DMA_CH2DCA_CH2_DCA_mask_w                   ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define DMA_CH2DCA_CH2_DCA_shift_w                  (0)                     /*!< Bit Shift of 32bit */
N#define DMA_CH2DCA_CH2_DCA_shift_h0                 (0)                     /*!< Bit Shift of 16bit */
N#define DMA_CH2DCA_CH2_DCA_shift_b0                 (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N
N#endif  // _MG32x02z_DMA_H
N
N/*----------------------------------------------------------------------------*/
N/*                         End of file MG32x02z_DMA.h                         */
N/*----------------------------------------------------------------------------*/
L 38 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_DMA_MID.h" 2
N#include "MG32x02z__ExtraStruct.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z__ExtraStruct.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z__ExtraStruct.h
N *
N * @brief       MG32x02z Extra Structure Definition File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:42 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z__ExtraStruct_H
N#define _MG32x02z__ExtraStruct_H
N#define _MG32x02z__ExtraStruct_H_VER                3.9     /*!< File Version */
N
N/**
N ******************************************************************************
N *
N * @struct      DMAChannel_Struct
N *              DMAChannel  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  EN            :1;     //[0] DMA channel operation enable.
X            volatile uint8_t  EN            :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  HOLD          :1;     //[1] DMA channel operation hold enable
X            volatile uint8_t  HOLD          :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  LOOP          :1;     //[2] DMA destination or peripheral transfer address auto increased enable.
X            volatile uint8_t  LOOP          :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  ADSEL         :1;     //[3] DMA address increased mode select
X            volatile uint8_t  ADSEL         :1;     
N                                        //0 = Normal : sequential increment 1
N                                        //1 = SKIP3 : address increment from 0 to 1,2 then return 0
N            __I  uint8_t                :2;     //[5..4] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :1;     //[6] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  XMDS          :2;     //[9..8] DMA channel external pin trigger request mode select
X            volatile uint8_t  XMDS          :2;     
N                                        //0x0 = Disable : disable external request pin input
N                                        //0x1 = Single : single request mode
N                                        //0x2 = Block : block request mode
N                                        //0x3 = Demand : demand request mode(active high)
N            __IO uint8_t  PLS           :2;     //[11..10] DMA channel priority level select.
X            volatile uint8_t  PLS           :2;     
N                                        //0x0 = LV0 : lowest priority
N                                        //0x1 = LV1 : normal priority
N                                        //0x2 = LV2 : high priority
N                                        //0x3 = LV3 : highest priority
N            __IO uint8_t  BSIZE         :2;     //[13..12] DMA transfer burst size
X            volatile uint8_t  BSIZE         :2;     
N                                        //0x0 = One
N                                        //0x1 = Two
N                                        //0x2 = Reserved
N                                        //0x3 = Four
N            __I  uint8_t                :1;     //[14] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  REQ           :1;     //[15] DMA channel data transfer request enable
X            volatile uint8_t  REQ           :1;     
N                                        //0 = No : no effect
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[16] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CIE           :1;     //[17] DMA channel-x transfer complete interrupt enable.
X            volatile uint8_t  CIE           :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  HIE           :1;     //[18] DMA channel-x transfer half interrupt enable.
X            volatile uint8_t  HIE           :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  EIE           :1;     //[19] DMA channel-x transfer error interrupt enable.
X            volatile uint8_t  EIE           :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :4;     //[23..20] 
X            volatile const  uint8_t                :4;     
N            __I  uint8_t                :1;     //[24] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  TC2F          :1;     //[25] DMA channel-x transfer complete flag
X            volatile uint8_t  TC2F          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  TH2F          :1;     //[26] DMA channel-x transfer half flag
X            volatile uint8_t  TH2F          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __IO uint8_t  ERR2F         :1;     //[27] DMA channel-x transfer error flag
X            volatile uint8_t  ERR2F         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (reset event happened)
N            __I  uint8_t                :4;     //[31..28] 
X            volatile const  uint8_t                :4;     
N        }MBIT;
N    }A;                                 /*!< A          ~ Offset[0x20]  DMA channel-x control register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  SRC           :4;     //[3..0] DMA channel transfer peripheral source select
X            volatile uint8_t  SRC           :4;     
N            __I  uint8_t                :4;     //[7..4] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  DET           :4;     //[11..8] DMA channel transfer peripheral destination select
X            volatile uint8_t  DET           :4;     
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  SINC          :1;     //[16] DMA source or memory transfer address auto increased enable
X            volatile uint8_t  SINC          :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  DINC          :1;     //[17] DMA destination or peripheral transfer address auto increased enable
X            volatile uint8_t  DINC          :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SSYNC         :1;     //[18] DMA source process synchronization enable bit
X            volatile uint8_t  SSYNC         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  DSYNC         :1;     //[19] DMA destination process synchronization enable bit
X            volatile uint8_t  DSYNC         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[21..20] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :2;     //[23..22] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  XPIN          :1;     //[24] DMA channel external trigger pin select.
X            volatile uint8_t  XPIN          :1;     
N                                        //0x0 = TRG0 : DMA_TRG0 pin
N                                        //0x1 = TRG1 : DMA_TRG1 pin
N            __I  uint8_t                :7;     //[31..25] 
X            volatile const  uint8_t                :7;     
N        }MBIT;
N    }B;                                 /*!< B          ~ Offset[0x24]  DMA channel-x control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint16_t NUM           :16;    //[15..0] DMA transfer data count initial number
X            volatile uint16_t NUM           :16;    
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }NUM;                               /*!< NUM        ~ Offset[0x28]  DMA channel-x control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint16_t CNT           :16;    //[15..0] DMA transfer data count current value
X            volatile const  uint16_t CNT           :16;    
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CNT;                               /*!< CNT        ~ Offset[0x2C]  DMA channel-x control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t SSA           :32;    //[31..0] DMA source or memory transfer start address.
X            volatile uint32_t SSA           :32;    
N        }MBIT;
N    }SSA;                               /*!< SSA        ~ Offset[0x30]  DMA channel-x source start address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint32_t SCA           :32;    //[31..0] DMA source or memory transfer current address
X            volatile const  uint32_t SCA           :32;    
N        }MBIT;
N    }SCA;                               /*!< SCA        ~ Offset[0x34]  DMA channel-x source current address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t DSA           :32;    //[31..0] DMA destination or peripheral transfer start address.
X            volatile uint32_t DSA           :32;    
N        }MBIT;
N    }DSA;                               /*!< DSA        ~ Offset[0x38]  DMA channel-x destination start address register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint32_t DCA           :32;    //[31..0] DMA destination or peripheral transfer current address
X            volatile const  uint32_t DCA           :32;    
N        }MBIT;
N    }DCA;                               /*!< DCA        ~ Offset[0x3C]  DMA channel-x destination current address register */
N
N} DMAChannel_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        DMAChannel  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define DMAChannel0_Base                ((uint32_t)0x4BF00020)              /*!< Direct Memory Access Channel Control */
N#define DMAChannel1_Base                ((uint32_t)0x4BF00040)              /*!< Direct Memory Access Channel Control */
N#define DMAChannel2_Base                ((uint32_t)0x4BF00060)              /*!< Direct Memory Access Channel Control */
N#define DMAChannel0                     ((DMAChannel_Struct*) DMAChannel0_Base)
N#define DMAChannel1                     ((DMAChannel_Struct*) DMAChannel1_Base)
N#define DMAChannel2                     ((DMAChannel_Struct*) DMAChannel2_Base)
N///@}
N/**
N ******************************************************************************
N *
N * @struct      CMPAC_Struct
N *              CMPAC  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  EN            :1;     //[0] Analog comparator CMPx power-on enable bit
X            volatile uint8_t  EN            :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[2] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  RES           :1;     //[3] CMPx compare response time select.
X            volatile uint8_t  RES           :1;     
N                                        //0x0 = 200ns 
N                                        //0x1 = 10us (5~10us)
N            __I  uint8_t                :2;     //[5..4] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  PMUX          :3;     //[10..8] CMPx Analog input positive channel selection.
X            volatile uint8_t  PMUX          :3;     
N                                        //0x0 =  IVREF
N                                        //0x1 = CMPx_I0
N                                        //0x2 = CMPx_I1
N                                        //0x3 = CMP_C0
N                                        //0x4 = CMP_C1
N                                        //0x5 = LDO_Core
N            __I  uint8_t                :1;     //[11] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  NMUX          :3;     //[14..12] CMPx Analog input negative channel selection.
X            volatile uint8_t  NMUX          :3;     
N                                        //0x0 =  IVREF
N                                        //0x1 = CMPx_I0
N                                        //0x2 = CMPx_I1
N                                        //0x3 = CMP_C0
N                                        //0x4 = CMP_C1
N                                        //0x5 = LDO_Core
N            __I  uint8_t                :1;     //[15] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  INV           :1;     //[16] CMPx analog comparator output signal polarity select.
X            volatile uint8_t  INV           :1;     
N                                        //0 = Positive
N                                        //1 = Negative
N            __IO uint8_t  PINV          :1;     //[17] CMPx output to pins' signal inverse enable.
X            volatile uint8_t  PINV          :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  FSEL          :2;     //[19..18] CMPx analog comparator output signal select with synchronized filter
X            volatile uint8_t  FSEL          :2;     
N                                        //0x0 = Bypass
N                                        //0x1 = CMP_CK : filter with CMP_CLK 
N                                        //0x2 = TM00_TRGO : filter with TM00_TRGO
N                                        //0x3 = TM01_TRGO : filter with TM01_TRGO
N            __IO uint8_t  FDIV          :2;     //[21..20] CMPx analog comparator output synchronized filter divider.
X            volatile uint8_t  FDIV          :2;     
N                                        //0x0 = DIV1 : divided by 1
N                                        //0x1 = DIV2 : divided by 2
N                                        //0x2 = DIV4 : divided by 4
N                                        //0x3 = DIV8 : divided by 8
N            __I  uint8_t                :2;     //[23..22] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :6;     //[29..24] 
X            volatile const  uint8_t                :6;     
N            __I  uint8_t                :2;     //[31..30] 
X            volatile const  uint8_t                :2;     
N        }MBIT;
N    }CR;                                /*!< CR         ~ Offset[0x10]  CMP Analog comparator-x control register */
N
N} CMPAC_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        CMPAC  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define CMPAC0_Base                     ((uint32_t)0x5C000010)              /*!< Analog Comparator Control */
N#define CMPAC1_Base                     ((uint32_t)0x5C000014)              /*!< Analog Comparator Control */
N#define CMPAC2_Base                     ((uint32_t)0x5C000018)              /*!< Analog Comparator Control */
N#define CMPAC3_Base                     ((uint32_t)0x5C00001C)              /*!< Analog Comparator Control */
N#define CMPAC0                          ((CMPAC_Struct*) CMPAC0_Base)
N#define CMPAC1                          ((CMPAC_Struct*) CMPAC1_Base)
N#define CMPAC2                          ((CMPAC_Struct*) CMPAC2_Base)
N#define CMPAC3                          ((CMPAC_Struct*) CMPAC3_Base)
N///@}
N/**
N ******************************************************************************
N *
N * @struct      OBM_Struct
N *              OBM  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  MDS           :2;     //[1..0] OBMx break operation mode select
X            volatile uint8_t  MDS           :2;     
N                                        //0x0 = AND : AND signal of all break channels' output
N                                        //0x1 = CLR : STA bit is cleared by falling edge of OR signal
N                                        //0x2 = SET : STA bit is set by falling edge of OR signal
N                                        //0x3 = TOGGLE : STA bit is toggle by falling edge of OR signal
N            __I  uint8_t                :2;     //[3..2] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  STA           :1;     //[4] OBMx break switching signal initial state
X            volatile uint8_t  STA           :1;     
N                                        //0 = 0 (Output 0)
N                                        //1 = 1 (Output 1)
N            __IO uint8_t  LCK           :1;     //[5] OBMx break switching signal initial state write control
X            volatile uint8_t  LCK           :1;     
N                                        //0 = Locked
N                                        //1 = Un-Locked
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  BKN0          :1;     //[8] OBMx break source-0 signal inverse enable bit.
X            volatile uint8_t  BKN0          :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __IO uint8_t  BKN1          :1;     //[9] OBMx break source-1 signal inverse enable bit.
X            volatile uint8_t  BKN1          :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __IO uint8_t  BKN2          :1;     //[10] OBMx break source-2 signal inverse enable bit.
X            volatile uint8_t  BKN2          :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __I  uint8_t                :5;     //[15..11] 
X            volatile const  uint8_t                :5;     
N            __IO uint8_t  BKS0          :4;     //[19..16] OBMx break signal source channel-0 select.
X            volatile uint8_t  BKS0          :4;     
N                                        //0x0 = BK0 : Output 1
N                                        //0x1 = BK1
N                                        //0x2 = BK2
N                                        //0x3 = BK3
N                                        //0x4 = BK4
N                                        //0x5 = BK5
N                                        //0x6 = BK6
N                                        //0x7 = BK7
N                                        //0x8 = BK8
N                                        //0x9 = BK9
N                                        //0xA = BK10
N                                        //0xB = BK11
N                                        //0xC = BK12
N                                        //0xD = BK13
N                                        //0xE = BK14
N                                        //0xF = BK15
N            __IO uint8_t  BKS1          :4;     //[23..20] OBMx break signal source channel-1 select.
X            volatile uint8_t  BKS1          :4;     
N                                        //0x0 = BK0 : Output 1
N                                        //0x1 = BK1
N                                        //0x2 = BK2
N                                        //0x3 = BK3
N                                        //0x4 = BK4
N                                        //0x5 = BK5
N                                        //0x6 = BK6
N                                        //0x7 = BK7
N                                        //0x8 = BK8
N                                        //0x9 = BK9
N                                        //0xA = BK10
N                                        //0xB = BK11
N                                        //0xC = BK12
N                                        //0xD = BK13
N                                        //0xE = BK14
N                                        //0xF = BK15
N            __IO uint8_t  BKS2          :4;     //[27..24] OBMx break signal source channel-2 select.
X            volatile uint8_t  BKS2          :4;     
N                                        //0x0 = BK0 : Output 1
N                                        //0x1 = BK1
N                                        //0x2 = BK2
N                                        //0x3 = BK3
N                                        //0x4 = BK4
N                                        //0x5 = BK5
N                                        //0x6 = BK6
N                                        //0x7 = BK7
N                                        //0x8 = BK8
N                                        //0x9 = BK9
N                                        //0xA = BK10
N                                        //0xB = BK11
N                                        //0xC = BK12
N                                        //0xD = BK13
N                                        //0xE = BK14
N                                        //0xF = BK15
N            __I  uint8_t                :4;     //[31..28] 
X            volatile const  uint8_t                :4;     
N        }MBIT;
N    }OBMx0;                             /*!< OBMx0      ~ Offset[0x20]  APB OBMx control register-0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  INV0          :1;     //[0] OBMx source channel-0 signal inverse enable bit.
X            volatile uint8_t  INV0          :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __IO uint8_t  INV1          :1;     //[1] OBMx source channel-1 signal inverse enable bit.
X            volatile uint8_t  INV1          :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __IO uint8_t  POL           :1;     //[2] OBMx output signal inverse enable bit.
X            volatile uint8_t  POL           :1;     
N                                        //0 = Disable
N                                        //1 = Enable 
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  FCKS          :2;     //[5..4] OBMx output deglitch filter clock source select
X            volatile uint8_t  FCKS          :2;     
N                                        //0x0 = Disable
N                                        //0x1 = APB : CLK_APB
N                                        //0x2 = APB_DIV8 : CLK_APB divide by 8
N                                        //0x3 = TM00_TRGO
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __IO uint8_t  MUX0          :4;     //[19..16] OBMx output source channel-0 signal select.
X            volatile uint8_t  MUX0          :4;     
N                                        //0x0 = SR0 : Output 0
N                                        //0x1 = SR1
N                                        //0x2 = SR2
N                                        //0x3 = SR3
N                                        //0x4 = SR4
N                                        //0x5 = SR5
N                                        //0x6 = SR6
N                                        //0x7 = SR7
N                                        //0x8 = SR8
N                                        //0x9 = SR9
N                                        //0xA = SR10
N                                        //0xB = SR11
N                                        //0xC = SR12
N                                        //0xD = SR13
N                                        //0xE = SR14
N                                        //0xF = SR15
N            __IO uint8_t  MUX1          :4;     //[23..20] OBMx output source channel-1 signal select.
X            volatile uint8_t  MUX1          :4;     
N                                        //0x0 = SR0 : Output 0
N                                        //0x1 = SR1
N                                        //0x2 = SR2
N                                        //0x3 = SR3
N                                        //0x4 = SR4
N                                        //0x5 = SR5
N                                        //0x6 = SR6
N                                        //0x7 = SR7
N                                        //0x8 = SR8
N                                        //0x9 = SR9
N                                        //0xA = SR10
N                                        //0xB = SR11
N                                        //0xC = SR12
N                                        //0xD = SR13
N                                        //0xE = SR14
N                                        //0xF = SR15
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }OBMx1;                             /*!< OBMx1      ~ Offset[0x24]  APB OBMx control register-1 */
N
N} OBM_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        OBM  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define OBM0_Base                       ((uint32_t)0x5F000020)              /*!< APB OBM Control */
N#define OBM1_Base                       ((uint32_t)0x5F000028)              /*!< APB OBM Control */
N#define OBM0                            ((OBM_Struct*) OBM0_Base)
N#define OBM1                            ((OBM_Struct*) OBM1_Base)
N///@}
N
N/**
N ******************************************************************************
N *
N * @struct      EXIC_PX_Struct
N *              EXIC_PX  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PIN0_PF        :1;     /*!< [0] EXIC pin input interrupt pending flag x for external input interrupt pin of PX*/ 
X            volatile uint8_t  PIN0_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN1_PF        :1;     /*!< [1] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN1_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN2_PF        :1;     /*!< [2] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN2_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN3_PF        :1;     /*!< [3] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN3_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN4_PF        :1;     /*!< [4] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN4_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN5_PF        :1;     /*!< [5] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN5_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN6_PF        :1;     /*!< [6] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN6_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN7_PF        :1;     /*!< [7] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN7_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN8_PF        :1;     /*!< [8] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN8_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN9_PF        :1;     /*!< [9] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN9_PF        :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN10_PF       :1;     /*!< [10] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN10_PF       :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN11_PF       :1;     /*!< [11] Refer to EXIC_PX0_PF. */ 
X            volatile uint8_t  PIN11_PF       :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN12_PF       :1;     /*!< [12] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN12_PF       :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN13_PF       :1;     /*!< [13] Refer to EXIC_PX0_PF.*/ 
X            volatile uint8_t  PIN13_PF       :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN14_PF       :1;     /*!< [14] Refer to EXIC_PX0_PF. */ 
X            volatile uint8_t  PIN14_PF       :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __IO uint8_t  PIN15_PF       :1;     /*!< [15] Refer to EXIC_PX0_PF. */ 
X            volatile uint8_t  PIN15_PF       :1;       
N                                                 /*!< 0 = Normal : No event occurred */ 
N                                                 /*!< 1 = Happened : Event happened */ 
N            __I  uint16_t               :16;     /*!< [31..16] */ 
X            volatile const  uint16_t               :16;       
N        }MBIT;
N    }PF;                                        /*!< PX_PF      ~ Offset[0x20]  EXIC PX input interrupt pending flag register */                           
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PIN0_TRGS      :2;     /*!<[1..0] External interrupt pin edge/level trigger event select */ 
X            volatile uint8_t  PIN0_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN1_TRGS      :2;     /*!<[3..2] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN1_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN2_TRGS      :2;     /*!<[5..4] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN2_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN3_TRGS      :2;     /*!<[7..6] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN3_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN4_TRGS      :2;     /*!<[9..8] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN4_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN5_TRGS      :2;     /*!<[11..10] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN5_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN6_TRGS      :2;     /*!<[13..12] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN6_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN7_TRGS      :2;     /*!<[15..14] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN7_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN8_TRGS      :2;     /*!<[17..16] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN8_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN9_TRGS      :2;     /*!<[19..18] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN9_TRGS      :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN10_TRGS     :2;     /*!<[21..20] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN10_TRGS     :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN11_TRGS     :2;     /*!<[23..22] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN11_TRGS     :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN12_TRGS     :2;     /*!<[25..24] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN12_TRGS     :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN13_TRGS     :2;     /*!<[27..26] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN13_TRGS     :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN14_TRGS     :2;     /*!<[29..28] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN14_TRGS     :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N            __IO uint8_t  PIN15_TRGS     :2;     /*!<[31..30] Refer to EXIC_PX0_TRGS. */ 
X            volatile uint8_t  PIN15_TRGS     :2;       
N                                                 /*!<0x0 = No : No updated flag */ 
N                                                 /*!<0x1 = Level */ 
N                                                 /*!<0x2 = Edge */ 
N                                                 /*!<0x3 = Dual-edge */ 
N        }MBIT;
N    }TRGS;                                       /*!< PX_TRGS    ~ Offset[0x24]  EXIC PX Pad input trigger select register */        
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  PIN0_OM        :1;    /*!<[0] External interrupt pin of PX OR mask bit x */
X            volatile uint8_t  PIN0_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN1_OM        :1;    /*!<[1] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN1_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN2_OM        :1;    /*!<[2] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN2_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN3_OM        :1;    /*!<[3] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN3_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN4_OM        :1;    /*!<[4] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN4_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN5_OM        :1;    /*!<[5] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN5_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN6_OM        :1;    /*!<[6] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN6_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN7_OM        :1;    /*!<[7] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN7_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN8_OM        :1;    /*!<[8] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN8_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN9_OM        :1;    /*!<[9] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN9_OM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN10_OM       :1;    /*!<[10] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN10_OM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN11_OM       :1;    /*!<[11] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN11_OM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN12_OM       :1;    /*!<[12] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN12_OM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN13_OM       :1;    /*!<[13] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN13_OM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN14_OM       :1;    /*!<[14] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN14_OM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN15_OM       :1;    /*!<[15] Refer to EXIC_PX0_OM. */
X            volatile uint8_t  PIN15_OM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN0_AM        :1;    /*!<[16] External interrupt pin of PX AND mask bit x */
X            volatile uint8_t  PIN0_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable  */
N            __IO uint8_t  PIN1_AM        :1;    /*!<[17] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN1_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN2_AM        :1;    /*!<[18] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN2_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN3_AM        :1;    /*!<[19] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN3_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN4_AM        :1;    /*!<[20] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN4_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN5_AM        :1;    /*!<[21] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN5_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN6_AM        :1;    /*!<[22] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN6_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN7_AM        :1;    /*!<[23] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN7_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN8_AM        :1;    /*!<[24] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN8_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN9_AM        :1;    /*!<[25] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN9_AM        :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN10_AM       :1;    /*!<[26] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN10_AM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN11_AM       :1;    /*!<[27] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN11_AM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN12_AM       :1;    /*!<[28] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN12_AM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN13_AM       :1;    /*!<[29] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN13_AM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN14_AM       :1;    /*!<[30] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN14_AM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable */
N            __IO uint8_t  PIN15_AM       :1;    /*!<[31] Refer to EXIC_PX0_AM. */
X            volatile uint8_t  PIN15_AM       :1;     
N                                                /*!<0 = Disable (Mask) */
N                                                /*!<1 = Enable    */
N                                        
N        }MBIT;                                  
N    }MSK;                                       /*!< PX_MSK     ~ Offset[0x28]  EXIC PX AOI Mask register */
N}EXIC_PX_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        EXIC_PX  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define EXIC_PA_Base    ((uint32_t)(0x50000000+0x20))   /*!< EXIC PA Register Control Definitions base address*/
N#define EXIC_PB_Base    ((uint32_t)(0x50000000+0x30))   /*!< EXIC PB Register Control Definitions base address*/
N#define EXIC_PC_Base    ((uint32_t)(0x50000000+0x40))   /*!< EXIC PC Register Control Definitions bass address*/
N#define EXIC_PD_Base    ((uint32_t)(0x50000000+0x50))   /*!< EXIC PD Register Control Definitions bass address*/
N
N#define EXIC_PA         ((EXIC_PX_Struct*) EXIC_PA_Base)    /*!< EXIC PA Register Control Definitions */
N#define EXIC_PB         ((EXIC_PX_Struct*) EXIC_PB_Base)    /*!< EXIC PB Register Control Definitions */
N#define EXIC_PC         ((EXIC_PX_Struct*) EXIC_PC_Base)    /*!< EXIC PC Register Control Definitions */
N#define EXIC_PD         ((EXIC_PX_Struct*) EXIC_PD_Base)    /*!< EXIC PD Register Control Definitions */
N///@}
N
N
N#endif  // _MG32x02z__ExtraStruct_H
N
N/*----------------------------------------------------------------------------*/
N/*                    End of file MG32x02z__ExtraStruct.h                     */
N/*----------------------------------------------------------------------------*/
L 39 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_DMA_MID.h" 2
N#include "MG32x02z_SYS.H"
N
N
N/** 
N * @enum		MID_DMA_CallbackIDTypeDef
N * @brief		MID DMA Callback ID structure definition
N */        
Ntypedef enum
N{
N  MID_DMA_XFER_CPLT_CB_ID          = 0x00U,                 /*!< Full transfer.                             */
N  MID_DMA_XFER_HALFCPLT_CB_ID      = 0x01U,                 /*!< Half transfer.                             */
N  MID_DMA_XFER_ERROR_CB_ID         = 0x02U,                 /*!< Error.                                     */ 
N  MID_DMA_XFER_ABORT_CB_ID         = 0x03U,                 /*!< Abort.                                     */ 
N  MID_DMA_XFER_ALL_CB_ID           = 0x04U                  /*!< All.                                       */ 
N    
N}MID_DMA_CallbackIDTypeDef;                                                                 
N
N
N/** 
N * @enum		MID_DMA_StateTypeDef
N * @brief		MID State structures definition 
N */        
Ntypedef enum 
N{ 
N    MID_DMA_STATE_BUSY,                                     /*!< An internal process is running.            */ 
N    MID_DMA_STATE_READY,                                    /*!< Peripheral Initialized and ready for use.  */
N    MID_DMA_STATE_RESET,                                    /*!< DMA not yet initialized or disabled.       */    
N} MID_DMA_StateTypeDef;
N
N/** 
N  * @brief  HAL DMA Error Code structure definition  
N  */ 
Ntypedef enum
N{
N  MID_DMA_FULL_TRANSFER      = 0x00U,                       /*!< Full transfer.                             */
N  MID_DMA_HALF_TRANSFER      = 0x01U                        /*!< Half Transfer.                             */
N}MID_DMA_LevelCompleteTypeDef;      
N
N/**
N * @name	DMA_Error_Code
N *   		DMA Error Code
N */ 
N//!@{
N#define MID_DMA_ERROR_NONE          (0x00000000U)           /*!< No error.                                  */
N#define MID_DMA_ERROR_TE            (0x00000001U)           /*!< Transfer error.                            */
N#define MID_DMA_ERROR_NO_XFER       (0x00000004U)           /*!< no ongoin transfer.                        */
N#define MID_DMA_ERROR_TIMEOUT       (0x00000020U)           /*!< Timeout error.                             */
N#define MID_DMA_ERROR_NOT_SUPPORTED (0x00000100U)           /*!< Not supported mode.                        */     
N//!@}
N
N
N/**
N * @name	DMA_Destination_incremented_mode
N *   		DMA Peripheral incremented mode
N */ 
N//!@{
N#define DMA_DINC_ENABLE         DMA_CH0B_CH0_DINC_enable_w  /*!< Peripheral increment mode Enable.          */
N#define DMA_DINC_DISABLE        DMA_CH0B_CH0_DINC_disable_w /*!< Peripheral increment mode Disable.         */
N//!@}
N
N/**
N * @name	DMA_Source_incremented_mode
N *   		DMA Memory incremented mode
N */ 
N//!@{
N#define DMA_SINC_ENABLE         DMA_CH0B_CH0_SINC_enable_w  /*!< Peripheral increment mode Enable.          */
N#define DMA_SINC_DISABLE        DMA_CH0B_CH0_SINC_disable_w /*!< Peripheral increment mode Disable.         */
N//!@}
N
N/**
N * @name	DMA_BurstSize_Mode
N *   		DMA transfer burst size
N */ 
N//!@{
N#define DMA_BSIZE_1BYTE         DMA_CH0A_CH0_BSIZE_one_w    /*!< Burst size setting : 1 byte.               */ 
N#define DMA_BSIZE_2BYTE         DMA_CH0A_CH0_BSIZE_two_w    /*!< Burst size setting : 2 byte.               */
N#define DMA_BSIZE_4BYTE         DMA_CH0A_CH0_BSIZE_four_w   /*!< Burst size setting : 4 byte.               */
N//!@}
N
N#if defined(MG32_1ST)
X#if 1L
N/**
N * @name	DMA_Source_MemPeri
N *   		DMA source from memory or peripheral
N */ 
N//!@{
N#define MID_DMA_MEMORY_READ         (0x0000U)               /*!< DMA source from memory.                    */                  
N#define MID_DMA_ADC0_SAMPLE         (0x0001U)               /*!< DMA source from ADC0.                      */
N#define MID_DMA_I2C0_READ           (0x0002U)               /*!< DMA source from I2C0_RX.                   */
N#define MID_DMA_I2C1_READ           (0x0003U)               /*!< DMA source from I2C1_RX.                   */
N#define MID_DMA_URT0_READ           (0x0004U)               /*!< DMA source from URT0_RX.                   */
N#define MID_DMA_URT1_READ           (0x0005U)               /*!< DMA source from URT1_RX.                   */
N#define MID_DMA_URT2_READ           (0x0006U)               /*!< DMA source from URT2_RX.                   */
N#define MID_DMA_URT3_READ           (0x0007U)               /*!< DMA source from URT3_RX.                   */
N#define MID_DMA_SPI0_READ           (0x0008U)               /*!< DMA source from SPI0_RX.                   */
N#define MID_DMA_TM36_CAPTURE3       (0x000FU)               /*!< DMA source from TM36 channel3 capture data.*/
N//!@}
N
N/**
N * @name	DMA_Destination_MemPeri
N *   		DMA destination can be memory or peripheral
N */ 
N//!@{
N#define MID_DMA_MEMORY_WRITE        (0x0000U)               /*!< DMA destination is memory.                 */           
N#define MID_DMA_DAC_WRITE           (0x0100U)               /*!< DMA destination is DAC0.                   */
N#define MID_DMA_I2C0_WRITE          (0x0200U)               /*!< DMA destination is I2C0_TX.                */
N#define MID_DMA_I2C1_WRITE          (0x0300U)               /*!< DMA destination is I2C1_TX.                */
N#define MID_DMA_URT0_WRITE          (0x0400U)               /*!< DMA destination is URT0_TX.                */
N#define MID_DMA_URT1_WRITE          (0x0500U)               /*!< DMA destination is URT1_TX.                */
N#define MID_DMA_URT2_WRITE          (0x0600U)               /*!< DMA destination is URT2_TX.                */
N#define MID_DMA_URT3_WRITE          (0x0700U)               /*!< DMA destination is URT3_TX.                */
N#define MID_DMA_SPI0_WRITE          (0x0800U)               /*!< DMA destination is SPI0_TX.                */
N#define MID_DMA_GPL_WRITE           (0x0B00U)               /*!< DMA destination is GPL.                    */
N#define MID_DMA_TM36_CC0B_WRITE     (0x0C00U)               /*!< DMA destination is TM36's CC0B.            */
N#define MID_DMA_TM36_CC1B_WRITE     (0x0D00U)               /*!< DMA destination is TM36's CC1B.            */
N#define MID_DMA_TM36_CC2B_WRITE     (0x0E00U)               /*!< DMA destination is TM36's CC2B.            */
N//!@}
N#endif
N
N#if defined(MG32_2ND)
X#if 0L
S/**
S * @name	DMA_Source_MemPeri
S *   		DMA source from memory or peripheral
S */ 
S//!@{
S#define MID_DMA_MEMORY_READ         (0x0000U)               /*!< DMA source from memory.                    */                  
S#define MID_DMA_ADC0_SAMPLE         (0x0001U)               /*!< DMA source from ADC0.                      */
S#define MID_DMA_I2C0_READ           (0x0002U)               /*!< DMA source from I2C0_RX.                   */
S#define MID_DMA_URT0_READ           (0x0004U)               /*!< DMA source from URT0_RX.                   */
S#define MID_DMA_URT1_READ           (0x0005U)               /*!< DMA source from URT1_RX.                   */
S#define MID_DMA_SPI0_READ           (0x0008U)               /*!< DMA source from SPI0_RX.                   */
S#define MID_DMA_TM36_CAPTURE3       (0x000FU)               /*!< DMA source from TM36 channel3 capture data.*/
S//!@}
S
S/**
S * @name	DMA_Destination_MemPeri
S *   		DMA destination can be memory or peripheral
S */ 
S//!@{
S#define MID_DMA_MEMORY_WRITE        (0x0000U)               /*!< DMA destination is memory.                 */           
S#define MID_DMA_I2C0_WRITE          (0x0200U)               /*!< DMA destination is I2C0_TX.                */
S#define MID_DMA_URT0_WRITE          (0x0400U)               /*!< DMA destination is URT0_TX.                */
S#define MID_DMA_URT1_WRITE          (0x0500U)               /*!< DMA destination is URT1_TX.                */
S#define MID_DMA_SPI0_WRITE          (0x0800U)               /*!< DMA destination is SPI0_TX.                */
S#define MID_DMA_GPL_WRITE           (0x0B00U)               /*!< DMA destination is GPL.                    */
S#define MID_DMA_TM36_CC0B_WRITE     (0x0C00U)               /*!< DMA destination is TM36's CC0B.            */
S#define MID_DMA_TM36_CC1B_WRITE     (0x0D00U)               /*!< DMA destination is TM36's CC1B.            */
S#define MID_DMA_TM36_CC2B_WRITE     (0x0E00U)               /*!< DMA destination is TM36's CC2B.            */
S//!@}
N#endif
N
N#if defined(MG32_3RD)
X#if 0L
S/**
S * @name	DMA_Source_MemPeri
S *   		DMA source from memory or peripheral
S */ 
S//!@{
S#define MID_DMA_MEMORY_READ         (0x0000U)               /*!< DMA source from memory */                  
S#define MID_DMA_ADC0_SAMPLE         (0x0001U)               /*!< DMA source from ADC0 */
S#define MID_DMA_I2C0_READ           (0x0002U)               /*!< DMA source from I2C0_RX */
S#define MID_DMA_I2C1_READ           (0x0003U)               /*!< DMA source from I2C1_RX */
S#define MID_DMA_URT0_READ           (0x0004U)               /*!< DMA source from URT0_RX */
S#define MID_DMA_URT1_READ           (0x0005U)               /*!< DMA source from URT1_RX */
S#define MID_DMA_URT2_READ           (0x0006U)               /*!< DMA source from URT2_RX */
S#define MID_DMA_SPI0_READ           (0x0008U)               /*!< DMA source from SPI0_RX */
S#define MID_DMA_USB_READ            (0x000AU)               /*!< DMA source from USB_RX */
S#define MID_DMA_TM36_CAPTURE3       (0x000FU)               /*!< DMA source from TM36 channel3 capture data */
S//!@}
S
S/**
S * @name	DMA_Destination_MemPeri
S *   		DMA destination can be memory or peripheral
S */ 
S//!@{
S#define MID_DMA_MEMORY_WRITE        (0x0000U)               /*!< DMA destination is memory */           
S#define MID_DMA_DAC_WRITE           (0x0100U)               /*!< DMA destination is DAC0 */
S#define MID_DMA_I2C0_WRITE          (0x0200U)               /*!< DMA destination is I2C0_TX */
S#define MID_DMA_I2C1_WRITE          (0x0300U)               /*!< DMA destination is I2C1_TX */
S#define MID_DMA_URT0_WRITE          (0x0400U)               /*!< DMA destination is URT0_TX */
S#define MID_DMA_URT1_WRITE          (0x0500U)               /*!< DMA destination is URT1_TX */
S#define MID_DMA_URT2_WRITE          (0x0600U)               /*!< DMA destination is URT2_TX */
S#define MID_DMA_SPI0_WRITE          (0x0800U)               /*!< DMA destination is SPI0_TX */
S#define MID_DMA_USB_WRITE           (0x000AU)               /*!< DMA destination from USB_TX */
S#define MID_DMA_GPL_WRITE           (0x0B00U)               /*!< DMA destination is GPL */
S#define MID_DMA_TM36_CC0B_WRITE     (0x0C00U)               /*!< DMA destination is TM36's CC0B */
S#define MID_DMA_TM36_CC1B_WRITE     (0x0D00U)               /*!< DMA destination is TM36's CC1B */
S#define MID_DMA_TM36_CC2B_WRITE     (0x0E00U)               /*!< DMA destination is TM36's CC2B */
S//!@}
N#endif
N
N
N/**
N * @name	DMA_Memory_AddressMode
N *   		DMA memory address increase mode
N */ 
N//!@{
N#define MID_DMA_MEMORY_NORMAL       DMA_CH0A_CH0_ADSEL_normal_w /*!< DMA memory access in one by one.       */
N#define MID_DMA_MEMORY_SKIP3        DMA_CH0A_CH0_ADSEL_skip3_w  /*!< Enable memory access with SKIP3 mode.  */
N//!@}
N
N/**
N * @name	DMA_Priority_level
N *   		DMA Priority level
N */ 
N//!@{
N#define DMA_PRIORITY_LOW            DMA_CH0A_CH0_PLS_lv0_w  /*!< Priority level : Low.                      */
N#define DMA_PRIORITY_MEDIUM         DMA_CH0A_CH0_PLS_lv1_w  /*!< Priority level : Medium.                   */
N#define DMA_PRIORITY_HIGH           DMA_CH0A_CH0_PLS_lv2_w  /*!< Priority level : High.                     */
N#define DMA_PRIORITY_VERY_HIGH      DMA_CH0A_CH0_PLS_lv3_w  /*!< Priority level : Very_High.                */
N//!@}
N
N#if !defined(MG32_2ND)
X#if !0L
N/**
N * @name	DMA_Priority_Mode
N *   		DMA Priority mode
N */ 
N//!@{
N#define DMA_ROUND_ROBIN             DMA_CR0_PRI_MDS_round_w  /*!< Priority mode : round robin.              */
N#define DMA_LEVEL                   DMA_CR0_PRI_MDS_level_w  /*!< Priority mode : Priority level.           */
N//!@}
N#endif
N
N/**
N * @name	DMA_ChannelFlag
N *   		DMA flag Definition
N */ 
N//!@{
N#define DMA_CH_FLAG_ERRF            DMA_CH0A_CH0_ERR2F_mask_w   /*!< DMA Channel Error Flag.                */
N#define DMA_CH_FLAG_HALF            DMA_CH0A_CH0_TH2F_mask_w    /*!< DMA Channel Half Flag.                 */
N#define DMA_CH_FLAG_COMPLETE        DMA_CH0A_CH0_TC2F_mask_w    /*!< DMA Channel Complete Flag.             */
N#define DMA_CH_ALL_FLAG             (DMA_CH_FLAG_ERRF | DMA_CH_FLAG_HALF | DMA_CH_FLAG_COMPLETE)    /*!< DMA channel flag (include ERRF, HALF, COMPLETE). */
N//!@}
N
N/**
N * @name	DMA_interrupt_enable_definitions
N *   		DMA interrupt enable definitions
N */ 
N//!@{
N#define DMA_IT_TC                   DMA_CH0A_CH0_CIE_enable_w   /*!< DMA Channel complete interrupt.        */
N#define DMA_IT_HT                   DMA_CH0A_CH0_HIE_enable_w   /*!< DMA Channel half interrupt.            */
N#define DMA_IT_TE                   DMA_CH0A_CH0_EIE_enable_w   /*!< DMA Channel error interrupt.           */    
N//!@}
N
N/**
N * @name	DMA_LoopMode_Active
N *   		DMA loop mode enable definitions
N */ 
N//!@{
N#define DMA_LOOP_ENABLE             DMA_CH0A_CH0_LOOP_enable_w  /*!< Enable DMA loop mode.                  */
N#define DMA_LOOP_DISABLE            DMA_CH0A_CH0_LOOP_disable_w /*!< DMA access once cycle.                 */  
N//!@}
N
N
N
N/** 
N * @struct  DMA_InitTypeDef
N * @brief   DMA Configuration Structure definition
N */        
Ntypedef struct {				
N    uint32_t SrcPeri;               /*!< Specifies the source from memory or peripheral.
N                                         This parameter can be a value of reference DMA_Source_MemPeri */
N                                    
N    uint32_t DesPeri;               /*!< Specifies the destination to memory or peripheral.
N                                         This parameter can be a value of reference DMA_Destination_MemPeri */
N                                    
N    uint32_t BSize;                 /*!< Specifies the Peripheral data width.
N                                         This parameter can be a value of reference DMA_BurstSize_Mode */
N                    
N    uint32_t MEMMode;               /*!< Specifies the operation mode of the DMA Channelx.
N                                         This parameter can be a value of reference DMA_Memory_AddressMode */
N                                    
N#if defined(MG32_1ST) || defined(MG32_3RD)    
X#if 1L || 0L    
N    uint32_t Priority;              /*!< Specifies the software priority for the DMA Channelx.
N                                         This parameter can be a value of reference DMA_Priority_level only apply in Priority level mode */
N#endif
N                                        
N    uint32_t LoopMode;              /*!< Specifies the loop mode for the DMA Channelx.
N                                         This parameter can be a value of reference DMA_LoopMode_Active */
N} DMA_InitTypeDef;				
N
N
N
N/** 
N * @struct  DMA_HandleTypeDef
N * @brief   DMA handle Structure definition
N */        
Ntypedef struct __DMA_HandleTypeDef 
N{  
N    DMA_Struct            *Instance;                                                      /*!< Register base address                  */
N                                                                                            
N    DMA_InitTypeDef       Init;                                                           /*!< DMA communication parameters           */ 
N                                                                                            
N    MID_LockTypeDef       Lock;                                                           /*!< DMA locking object                     */  
N                                                                                            
N    MID_DMA_StateTypeDef  State;                                                          /*!< DMA transfer state                     */
N
N#if defined(MG32_1ST) || defined(MG32_3RD)    
X#if 1L || 0L    
N    uint32_t              PriorityMode;                                                   /*!< DMA Priority Mode select .                
N                                                                                                This parameter can be a value of reference DMA_Priority_Mode */
N#endif
N    
N    uint32_t              ExtraGPL_Channel;                                               /*!< DMA data send to GPL calculating
N                                                                                               0 : Disable data to GPL.
N                                                                                               1 : GPL data from DMA channel-0.
N                                                                                               2 : GPL data from DMA channel-1.
N                                                                                               3 : GPL data from DMA channel-2.
N                                                                                               */  
N                                                                                            
N    void                  *Parent;                                                        /*!< Parent object state                    */  
N                                                                                            
N    void                  (* XferCpltCallback)( struct __DMA_HandleTypeDef * mDMA);       /*!< DMA transfer complete callback         */
N                                                                                            
N    void                  (* XferHalfCpltCallback)( struct __DMA_HandleTypeDef * mDMA);   /*!< DMA Half transfer complete callback    */
N                                                                                            
N    void                  (* XferErrorCallback)( struct __DMA_HandleTypeDef * mDMA);      /*!< DMA transfer error callback            */
N                                                                                            
N    void                  (* XferAbortCallback)( struct __DMA_HandleTypeDef * mDMA);      /*!< DMA transfer abort callback            */  
N                                                                                            
N    __IO uint32_t         ErrorCode;                                                      /*!< DMA Error code                         */
X    volatile uint32_t         ErrorCode;                                                       
N                                                                                            
N    DMAChannel_Struct     *DMAChannelIndex;                                                /*!< DMA Channel Struct                     */
N    
N} DMA_HandleTypeDef;    
N
N
N
N/**
N *******************************************************************************
N * @brief       Clear the DMA interrupt pending bits.
N * @param[in]   "__HANDLECH__" : pointer to a DMAChannel_Struct.
N * @param[in]   "__FLAG__" : specifies the DMA interrupt flag to clear.
N *  @arg\b	    DMA_CH_FLAG_ERRF : DMA Channel Error Flag.
N *  @arg\b	    DMA_CH_FLAG_HALF : DMA Channel Half Flag.
N *  @arg\b	    DMA_CH_FLAG_COMPLETE : DMA Channel Complete Flag.
N*  @arg\b	    DMA_CH_ALL_FLAG :  Any flag of ERRF, HALF, COMPLETE  
N * @return		None
N * @note 
N * @par         Example
N * @code
N    __DRV_DMA_CLEAR_FLAG(hADC.DMA_Handle->DMAChannelIndex, DMA_CH_FLAG_COMPLETE);
N * @endcode
N *******************************************************************************
N */
N#define __DRV_DMA_CLEAR_FLAG(__HANDLECH__,__FLAG__)     ((__HANDLECH__)->A.W |= (__FLAG__))
N
N/**
N *******************************************************************************
N * @brief       Get the DMA interrupt pending bits.
N * @param[in]   "__HANDLECH__" : pointer to a DMAChannel_Struct.
N * @param[in]   "__FLAG__" : specifies the DMA interrupt flag to clear.
N *  @arg\b	    DMA_CH_FLAG_ERRF : DMA Channel Error Flag.
N *  @arg\b	    DMA_CH_FLAG_HALF : DMA Channel Half Flag.
N *  @arg\b	    DMA_CH_FLAG_COMPLETE : DMA Channel Complete Flag.
N*  @arg\b	    DMA_CH_ALL_FLAG :  Any flag of ERRF, HALF, COMPLETE  
N * @return		None
N * @note 
N * @par         Example
N * @code
N    __DRV_DMA_GET_FLAG(hADC.DMA_Handle->DMAChannelIndex, DMA_CH_FLAG_COMPLETE);
N * @endcode
N *******************************************************************************
N */
N#define __DRV_DMA_GET_FLAG(__HANDLECH__,__FLAG__)      (((__HANDLECH__)->A.W & (__FLAG__)) == (__FLAG__))
N
N
N/**
N *******************************************************************************
N * @brief       Enables the specified DMA All interrupt.
N * @param[in]   "__HANDLE__" : pointer to a DMA_HandleTypeDef
N * @return		None
N * @note 
N * @par         Example
N * @code
N    __DRV_DMA_ENABLE_ITEA(&DMA_Handle);
N * @endcode
N *******************************************************************************
N */
N#define __DRV_DMA_ENABLE_ITEA(__HANDLE__)    ((__HANDLE__)->Instance->INT.W |= DMA_INT_IEA_enable_w)
N
N/**
N *******************************************************************************
N * @brief       Disables the specified DMA All interrupt.
N * @param[in]   "__HANDLE__" : pointer to a DMA_HandleTypeDef
N * @return		None
N * @note 
N * @par         Example
N * @code
N    __DRV_DMA_DISABLE_ITEA(&DMA_Handle);
N * @endcode
N *******************************************************************************
N */
N#define __DRV_DMA_DISABLE_ITEA(__HANDLE__)    ((__HANDLE__)->Instance->INT.W &= ~DMA_INT_IEA_enable_w)
N
N/**
N *******************************************************************************
N * @brief       Enables the specified DMA interrupt.
N * @param[in]   "__HANDLECH__" : pointer to a DMAChannel_Struct.
N * @param[in]   "__INTERRUPT__" : specifies the DMA interrupt source to enable.
N *  @arg\b      DMA_IT_TC : Complete flag.
N *  @arg\b      DMA_IT_HT : Half size flag.
N *  @arg\b      DMA_IT_TE : Error flag.
N * @return		None
N * @note 
N * @par         Example
N * @code
N    __DRV_DMA_ENABLE_IT(hADC.DMA_Handle->DMAChannelIndex, DMA_IT_HT);
N * @endcode
N *******************************************************************************
N */
N#define __DRV_DMA_ENABLE_IT(__HANDLECH__,__INTERRUPT__)  \
N        ((__HANDLECH__)->A.W  |= (__INTERRUPT__)) 
X#define __DRV_DMA_ENABLE_IT(__HANDLECH__,__INTERRUPT__)          ((__HANDLECH__)->A.W  |= (__INTERRUPT__)) 
N
N/**
N *******************************************************************************
N * @brief       Disables the specified DMA interrupt.
N * @param[in]   "__HANDLECH__" : pointer to a DMAChannel_Struct.
N * @param[in]   "__INTERRUPT__" : specifies the DMA interrupt source to disable.
N *  @arg\b      DMA_IT_TC : Complete flag.
N *  @arg\b      DMA_IT_HT : Half size flag.
N *  @arg\b      DMA_IT_TE : Error flag.
N * @return		None
N * @note 
N * @par         Example
N * @code
N    __DRV_DMA_DISABLE_IT(hADC.DMA_Handle->DMAChannelIndex, DMA_IT_HT);
N * @endcode
N *******************************************************************************
N */
N#define __DRV_DMA_DISABLE_IT(__HANDLECH__,__INTERRUPT__)  \
N        ((__HANDLECH__)->A.W  &= ~(__INTERRUPT__)) 
X#define __DRV_DMA_DISABLE_IT(__HANDLECH__,__INTERRUPT__)          ((__HANDLECH__)->A.W  &= ~(__INTERRUPT__)) 
N
N/**
N *******************************************************************************
N * @brief       Start the DMA request.
N * @param[in]   "__HANDLECH__" : pointer to a DMAChannel_Struct.
N * @return		None
N * @note 
N * @par         Example
N * @code
N    __DRV_DMA_START_REQUEST(hADC.DMA_Handle->DMAChannelIndex);;
N * @endcode
N *******************************************************************************
N */
N#define __DRV_DMA_START_REQUEST(__HANDLECH__)    ((__HANDLECH__)->A.W |= DMA_CH0A_CH0_REQ_mask_w)
N
N/**
N *******************************************************************************
N * @brief       Set DMA with the last transmission.
N * @return		None
N * @note 
N * @par         Example
N * @code
N    __DRV_DMA_SET_LASTCYCLE(hADC.DMA_Handle->DMAChannelIndex);
N * @endcode
N *******************************************************************************
N */
N#if defined(MG32_1ST)
X#if 1L
N#define __DRV_DMA_SET_LASTCYCLE(__HANDLECH__)       \
N    do{                                             \
N        if((__HANDLECH__) == DMAChannel0)           \
N            SYS->CR0.W |= (SYS_CR0_CH0_LAST_yes_w); \
N        else if ((__HANDLECH__) == DMAChannel1)     \
N            SYS->CR0.W |= (SYS_CR0_CH1_LAST_yes_w); \
N        else if ((__HANDLECH__) == DMAChannel2)     \
N            SYS->CR0.W |= (SYS_CR0_CH2_LAST_yes_w); \
N    }while (0)
X#define __DRV_DMA_SET_LASTCYCLE(__HANDLECH__)           do{                                                     if((__HANDLECH__) == DMAChannel0)                       SYS->CR0.W |= (SYS_CR0_CH0_LAST_yes_w);         else if ((__HANDLECH__) == DMAChannel1)                 SYS->CR0.W |= (SYS_CR0_CH1_LAST_yes_w);         else if ((__HANDLECH__) == DMAChannel2)                 SYS->CR0.W |= (SYS_CR0_CH2_LAST_yes_w);     }while (0)
N#else
S    #define __DRV_DMA_SET_LASTCYCLE(__HANDLECH__)       ((__HANDLECH__)->A.W |= (DMA_CH0A_CH0_LAST_yes_w))
N#endif 
N
N
N/**
N * @name    Function announce
N * @brief   DMA base initial/Deinitial	
N */ 
N///@{
NMID_StatusTypeDef MID_DMA_Init(DMA_HandleTypeDef *mDMA);
NMID_StatusTypeDef MID_DMA_DeInit(DMA_HandleTypeDef *mDMA);
NMID_StatusTypeDef MID_DMA_Start(DMA_HandleTypeDef *mDMA, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
NMID_StatusTypeDef MID_DMA_Start_IT(DMA_HandleTypeDef *mDMA, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
NMID_StatusTypeDef MID_DMA_Abort(DMA_HandleTypeDef *mDMA);
NMID_StatusTypeDef MID_DMA_Abort_IT(DMA_HandleTypeDef *mDMA);
NMID_StatusTypeDef MID_DMA_PollForTransfer(DMA_HandleTypeDef *mDMA, uint32_t CompleteLevel, uint32_t Timeout);
Nvoid MID_DMA_IRQHandler(DMA_HandleTypeDef *mDMA);
NMID_StatusTypeDef MID_DMA_RegisterCallback(DMA_HandleTypeDef *mDMA, MID_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _mDMA));
NMID_StatusTypeDef MID_DMA_UnRegisterCallback(DMA_HandleTypeDef *mDMA, MID_DMA_CallbackIDTypeDef CallbackID);
NMID_DMA_StateTypeDef MID_DMA_GetState(DMA_HandleTypeDef *mDMA);
Nuint32_t MID_DMA_GetError(DMA_HandleTypeDef *mDMA);
N///@}
N
N
N
N/**
N * @name    Function announce
N * @brief   addtogroup TM_Private_Functions
N */ 
N///@{
Nstatic void DMA_SetConfig(DMA_HandleTypeDef *mDMA, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
N///@}
N
N#endif
L 37 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_I2C_MID.h" 2
N#include "MG32x02z_I2C.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z_I2C.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_I2C.h
N *
N * @brief       MG32x02z I2C Register Definitions Header File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:41 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z_I2C_H
N#define _MG32x02z_I2C_H
N#define _MG32x02z_I2C_H_VER                         3.9     /*!< File Version */
N
N#if !(MG32x02z_H_VER == MG32x02z_I2C_H_VER)
S    #error "MG32x02z_I2C_H - Main/Module Version Mismatch !"
N#endif
N
N/**
N ******************************************************************************
N *
N * @struct      I2C_Struct
N *              I2C  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  BUSYF         :1;     //[0] I2C busy flag. (set and clear by hardware)
X            volatile const  uint8_t  BUSYF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Busy (Event happened)
N            __IO uint8_t  EVENTF        :1;     //[1] I2C status event interrupt Flag
X            volatile uint8_t  EVENTF        :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  BUFF          :1;     //[2] I2C buffer mode event flag. (set by hardware , clear by software setting 1)
X            volatile uint8_t  BUFF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  ERRF          :1;     //[3] I2C error interrupt flag for invalid no ack, bus arbitration lost bus error or data o
X            volatile uint8_t  ERRF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  TMOUTF        :1;     //[4] I2C time-out detect flag. (set and clear by hardware)
X            volatile uint8_t  TMOUTF        :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :1;     //[5] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  RXF           :1;     //[6] I2C Receive data register not empty
X            volatile uint8_t  RXF           :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  TXF           :1;     //[7] I2C Transmit data register empty
X            volatile uint8_t  TXF           :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  RSTRF         :1;     //[8] I2C repeat start asserted flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  RSTRF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  STOPF         :1;     //[9] I2C stop detection flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  STOPF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  CNTF          :1;     //[10] I2C buffer count I2C_BUF_CNT empty status
X            volatile uint8_t  CNTF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  ERRCF         :1;     //[11] I2C master mode NACK error flag and state control bit
X            volatile uint8_t  ERRCF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  SADRF         :1;     //[12] I2C slave mode slave address matched flag
X            volatile uint8_t  SADRF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t  SLAF          :1;     //[13] I2C slave mode detection status.
X            volatile const  uint8_t  SLAF          :1;     
N            __I  uint8_t  MSTF          :1;     //[14] I2C master mode detection status. It set by Start command and clear by Stop state.
X            volatile const  uint8_t  MSTF          :1;     
N            __I  uint8_t  RWF           :1;     //[15] I2C read or write transfer direction status
X            volatile const  uint8_t  RWF           :1;     
N                                        //0 = Write
N                                        //1 = Read
N            __IO uint8_t  TSCF          :1;     //[16] I2C shadow buffer transfer complete flag
X            volatile uint8_t  TSCF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  STPSTRF       :1;     //[17] I2C Stop or Start detection flag.  (set by hardware and clear by software writing 1)
X            volatile uint8_t  STPSTRF       :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  TXRF          :1;     //[18] I2C  transmit data register remained status
X            volatile uint8_t  TXRF          :1;     
N                                        //0 = No data
N                                        //1 = Remained data
N            __IO uint8_t  ROVRF         :1;     //[19] I2C data buffer receive overrun error flag
X            volatile uint8_t  ROVRF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  TOVRF         :1;     //[20] I2C data buffer transmit underrun error flag
X            volatile uint8_t  TOVRF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  NACKF         :1;     //[21] I2C Not Acknowledge received error flag
X            volatile uint8_t  NACKF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  ALOSF         :1;     //[22] I2C bus arbitration lost error flag
X            volatile uint8_t  ALOSF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  BERRF         :1;     //[23] I2C bus error flag for invalid Stop/Start state
X            volatile uint8_t  BERRF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :1;     //[24] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :7;     //[31..25] 
X            volatile const  uint8_t                :7;     
N        }MBIT;
N    }STA;                               /*!< STA        ~ Offset[0x00]  I2C status register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  IEA           :1;     //[0] I2C interrupt all enable
X            volatile uint8_t  IEA           :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  EVENT_IE      :1;     //[1] I2C status event interrupt enable.
X            volatile uint8_t  EVENT_IE      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  BUF_IE        :1;     //[2] I2C buffer mode event Interrupt enable
X            volatile uint8_t  BUF_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  ERR_IE        :1;     //[3] I2C no ack error, bus arbitration lost, bus error or data overrun interrupt enable.
X            volatile uint8_t  ERR_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TMOUT_IE      :1;     //[4] I2C timeout error interrupt enable.
X            volatile uint8_t  TMOUT_IE      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[5] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[6] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[8] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[9] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :6;     //[15..10] 
X            volatile const  uint8_t                :6;     
N            __I  uint8_t                :1;     //[16] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[17] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :6;     //[23..18] 
X            volatile const  uint8_t                :6;     
N            __I  uint8_t                :1;     //[24] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :5;     //[29..25] 
X            volatile const  uint8_t                :5;     
N            __I  uint8_t  SCLF          :1;     //[30] I2C SCL line status bit.
X            volatile const  uint8_t  SCLF          :1;     
N            __I  uint8_t  SDAF          :1;     //[31] I2C SDA line status bit.
X            volatile const  uint8_t  SDAF          :1;     
N        }MBIT;
N    }INT;                               /*!< INT        ~ Offset[0x04]  I2C interrupt enable register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :2;     //[1..0] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  CK_SEL        :2;     //[3..2] I2C internal clock CK_I2C source select
X            volatile uint8_t  CK_SEL        :2;     
N                                        //0x0 = PROC : CK_I2C_PR process clock from CSC
N                                        //0x1 = Reserved
N                                        //0x2 = TM00_TRGO
N                                        //0x3 = Reserved
N            __IO uint8_t  CK_DIV        :3;     //[6..4] I2C internal clock CK_I2C_INT input divider
X            volatile uint8_t  CK_DIV        :3;     
N                                        //0x0 = DIV1 : divided by 1
N                                        //0x1 = DIV2 : divided by 2
N                                        //0x2 = DIV4 : divided by 4
N                                        //0x3 = DIV8 : divided by 8
N                                        //0x4 = DIV16 : divided by 16
N                                        //0x5 = DIV32 : divided by 32
N                                        //0x6 = DIV64 : divided by 64
N                                        //0x7 = DIV128 : divided by 128
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CK_PSC        :3;     //[10..8] I2C internal clock CK_I2C_INT prescaler
X            volatile uint8_t  CK_PSC        :3;     
N            __I  uint8_t                :1;     //[11] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  TMO_CKS       :1;     //[12] I2C timeout clock source select.
X            volatile uint8_t  TMO_CKS       :1;     
N                                        //0 = CK_UT
N                                        //1 = DIV64 (CK_I2C_PSC divided by 64)
N            __I  uint8_t                :3;     //[15..13] 
X            volatile const  uint8_t                :3;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CLK;                               /*!< CLK        ~ Offset[0x08]  I2C clock source register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  SA_RW         :1;     //[0] I2C slave mode grabbed read/write bit.
X            volatile const  uint8_t  SA_RW         :1;     
N            __I  uint8_t  SA_CODE       :7;     //[7..1] I2C slave mode grabbed slave address code
X            volatile const  uint8_t  SA_CODE       :7;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }SAC;                               /*!< SAC        ~ Offset[0x0C]  I2C slave mode slave address code register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  EN            :1;     //[0] I2C function enable bit
X            volatile uint8_t  EN            :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SADR_EN       :1;     //[1] I2C slave mode main slave address detect enable
X            volatile uint8_t  SADR_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SADR2_EN      :1;     //[2] I2C slave mode 2nd slave address detect enable
X            volatile uint8_t  SADR2_EN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  MDS           :2;     //[5..4] I2C operation mode select. The monitor mode is only support for Buffer mode.
X            volatile uint8_t  MDS           :2;     
N                                        //0x0 = I2C : Single/Multi-Master/ Slave mode
N                                        //0x1 = Monitor : Monitor-Slave mode
N                                        //0x2 = Reserved
N                                        //0x3 = Reserved
N            __IO uint8_t  BUF_EN        :1;     //[6] I2C data buffer enable bit
X            volatile uint8_t  BUF_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  GC_EN         :1;     //[7] I2C general call address 0x00 recognized enable bit.
X            volatile uint8_t  GC_EN         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[9..8] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :1;     //[10] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  SFBD_EN       :1;     //[11] I2C SDA first bit drive high enable when data transmitted
X            volatile uint8_t  SFBD_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  SCLS_DIS      :1;     //[12] I2C slave mode clock SCL stretching low control disable
X            volatile uint8_t  SCLS_DIS      :1;     
N                                        //0 = Enable
N                                        //1 = Disable
N            __I  uint8_t                :1;     //[13] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  PDRV_SEL      :2;     //[15..14] I2C pre-drive time select for both SCL and SDA by CK_I2C clock time.
X            volatile uint8_t  PDRV_SEL      :2;     
N                                        //0x0 = 0T (disable pre-drive)
N                                        //0x1 = 1T
N                                        //0x2 = 2T
N                                        //0x3 = 3T
N            __I  uint8_t                :8;     //[23..16] 
X            volatile const  uint8_t                :8;     
N            __I  uint8_t                :6;     //[29..24] 
X            volatile const  uint8_t                :6;     
N            __IO uint8_t  DMA_RXEN      :1;     //[30] Direct memory access enable to receive
X            volatile uint8_t  DMA_RXEN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  DMA_TXEN      :1;     //[31] Direct memory access enable to transmit
X            volatile uint8_t  DMA_TXEN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N        }MBIT;
N    }CR0;                               /*!< CR0        ~ Offset[0x10]  I2C control register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  LT            :5;     //[4..0] I2C SCL low cycle time by CK_I2C_INT clock time
X            volatile uint8_t  LT            :5;     
N            __I  uint8_t                :3;     //[7..5] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  HT            :4;     //[11..8] I2C SCL high cycle time by CK_I2C_INT clock time
X            volatile uint8_t  HT            :4;     
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CR1;                               /*!< CR1        ~ Offset[0x14]  I2C control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  STA           :1;     //[0] I2C START enable bit.
X            volatile uint8_t  STA           :1;     
N            __IO uint8_t  STO           :1;     //[1] I2C STOP enable bit.
X            volatile uint8_t  STO           :1;     
N            __IO uint8_t  AA            :1;     //[2] I2C assert Acknowledge enable bit.
X            volatile uint8_t  AA            :1;     
N            __IO uint8_t  CMD_TC        :1;     //[3] I2C command preload enable control bit
X            volatile uint8_t  CMD_TC        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  STA_LCK       :1;     //[4] I2C_STA bit write access protected control
X            volatile uint8_t  STA_LCK       :1;     
N                                        //0 = Locked
N                                        //1 = un-Locked
N            __IO uint8_t  STO_LCK       :1;     //[5] I2C_STO bit write access protected control
X            volatile uint8_t  STO_LCK       :1;     
N                                        //0 = Locked
N                                        //1 = un-Locked
N            __IO uint8_t  AA_LCK        :1;     //[6] I2C_AA bit write access protected control
X            volatile uint8_t  AA_LCK        :1;     
N                                        //0 = Locked
N                                        //1 = un-Locked
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  BUF_CNT       :3;     //[10..8] I2C transmitted or received data byte count threshold
X            volatile uint8_t  BUF_CNT       :3;     
N                                        //0x0 = Reserved
N                                        //0x1 = 1-byte
N                                        //0x2 = 2-byte
N                                        //0x3 = 3-byte
N                                        //0x4 = 4-byte
N            __I  uint8_t                :5;     //[15..11] 
X            volatile const  uint8_t                :5;     
N            __I  uint8_t  ACNT          :3;     //[18..16] I2C transmitted or received data actual byte count value
X            volatile const  uint8_t  ACNT          :3;     
N                                        //0x0 = 0-byte
N                                        //0x1 = 1-byte
N                                        //0x2 = 2-byte
N                                        //0x3 = 3-byte
N                                        //0x4 = 4-byte
N            __I  uint8_t                :5;     //[23..19] 
X            volatile const  uint8_t                :5;     
N            __I  uint8_t                :1;     //[24] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[25] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[26] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :5;     //[31..27] 
X            volatile const  uint8_t                :5;     
N        }MBIT;
N    }CR2;                               /*!< CR2        ~ Offset[0x18]  I2C control register 2 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :1;     //[0] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  SADR          :7;     //[7..1] I2C slave mode main slave address detection request address value.
X            volatile uint8_t  SADR          :7;     
N            __I  uint8_t                :1;     //[8] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  SADR2         :7;     //[15..9] I2C slave mode 2nd slave address detection request address value.
X            volatile uint8_t  SADR2         :7;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }SADR;                              /*!< SADR       ~ Offset[0x1C]  I2C slave address detect register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  TMO_EN        :1;     //[0] I2C timeout detect enable.
X            volatile uint8_t  TMO_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  TMO_MDS       :2;     //[3..2] I2C timeout detection mode select
X            volatile uint8_t  TMO_MDS       :2;     
N                                        //0x0 = SCL-low (SCL low timeout)
N                                        //0x1 = SCL-SDA-high (both SCL and SDA high timeout for bus idle condition)
N                                        //0x2 = General (general counter)
N            __I  uint8_t                :4;     //[7..4] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  TMO_CNT       :8;     //[15..8] I2C timeout setting value.
X            volatile uint8_t  TMO_CNT       :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }TMOUT;                             /*!< TMOUT      ~ Offset[0x20]  I2C timeout control register */
N
N    __I uint32_t  RESERVED0;            /*!< RESERVED0  ~ Offset[0x24]  Reserved */
X    volatile const uint32_t  RESERVED0;             
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  EVENT         :8;     //[7..0] I2C status event code
X            volatile const  uint8_t  EVENT         :8;     
N            __IO uint8_t  EVENTF2       :1;     //[8] I2C status event interrupt Flag
X            volatile uint8_t  EVENTF2       :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :7;     //[15..9] 
X            volatile const  uint8_t                :7;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }STA2;                              /*!< STA2       ~ Offset[0x28]  I2C status register 2 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  SBUF          :8;     //[7..0] I2C data shift buffer register
X            volatile uint8_t  SBUF          :8;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }SBUF;                              /*!< SBUF       ~ Offset[0x2C]  I2C data shift buffer register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t DAT           :32;    //[31..0] I2C data byte register
X            volatile uint32_t DAT           :32;    
N        }MBIT;
N    }DAT;                               /*!< DAT        ~ Offset[0x30]  I2C data register */
N
N} I2C_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        I2C  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define I2C0_Base                       ((uint32_t)0x51000000)              /*!< I2C Control Module-0 */
N#define I2C1_Base                       ((uint32_t)0x51010000)              /*!< I2C Control Module-1 */
N#define I2C0                            ((I2C_Struct*) I2C0_Base)
N#define I2C1                            ((I2C_Struct*) I2C1_Base)
N///@}
N
N/**
N ******************************************************************************
N *
N * @name        I2C  [Register Definitions]
N *
N ******************************************************************************
N */
N/**
N ******************************************************************************
N * @name        I2C_STA  [register's definitions]
N *              Offset[0x00]  I2C status register
N ******************************************************************************
N */
N///@{
N#define I2C_STA_default                             ((uint32_t)0x00000080)  /*!< Reg Reset Default Value */
N
N/* Bit fields of I2C_STA */
N#define I2C_STA_BERRF_mask_w                        ((uint32_t)0x00800000)  /*!< Bit Mask of 32bit */
N#define I2C_STA_BERRF_mask_h1                       ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define I2C_STA_BERRF_mask_b2                       ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define I2C_STA_BERRF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_BERRF_normal_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_BERRF_normal_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_BERRF_happened_w                    ((uint32_t)0x00800000)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_BERRF_happened_h1                   ((uint16_t)0x0080)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_BERRF_happened_b2                   ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_ALOSF_mask_w                        ((uint32_t)0x00400000)  /*!< Bit Mask of 32bit */
N#define I2C_STA_ALOSF_mask_h1                       ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define I2C_STA_ALOSF_mask_b2                       ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define I2C_STA_ALOSF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_ALOSF_normal_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_ALOSF_normal_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_ALOSF_happened_w                    ((uint32_t)0x00400000)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_ALOSF_happened_h1                   ((uint16_t)0x0040)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_ALOSF_happened_b2                   ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_NACKF_mask_w                        ((uint32_t)0x00200000)  /*!< Bit Mask of 32bit */
N#define I2C_STA_NACKF_mask_h1                       ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define I2C_STA_NACKF_mask_b2                       ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define I2C_STA_NACKF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_NACKF_normal_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_NACKF_normal_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_NACKF_happened_w                    ((uint32_t)0x00200000)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_NACKF_happened_h1                   ((uint16_t)0x0020)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_NACKF_happened_b2                   ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_TOVRF_mask_w                        ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define I2C_STA_TOVRF_mask_h1                       ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define I2C_STA_TOVRF_mask_b2                       ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define I2C_STA_TOVRF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_TOVRF_normal_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_TOVRF_normal_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_TOVRF_happened_w                    ((uint32_t)0x00100000)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_TOVRF_happened_h1                   ((uint16_t)0x0010)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_TOVRF_happened_b2                   ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_ROVRF_mask_w                        ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define I2C_STA_ROVRF_mask_h1                       ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define I2C_STA_ROVRF_mask_b2                       ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define I2C_STA_ROVRF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_ROVRF_normal_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_ROVRF_normal_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_ROVRF_happened_w                    ((uint32_t)0x00080000)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_ROVRF_happened_h1                   ((uint16_t)0x0008)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_ROVRF_happened_b2                   ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_TXRF_mask_w                         ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define I2C_STA_TXRF_mask_h1                        ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define I2C_STA_TXRF_mask_b2                        ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define I2C_STA_TXRF_no_data_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):No data of 32bit */
N#define I2C_STA_TXRF_no_data_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0):No data of 16bit */
N#define I2C_STA_TXRF_no_data_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0):No data of 8bit */
N#define I2C_STA_TXRF_remained_data_w                ((uint32_t)0x00040000)  /*!< Bit Value =(1):Remained data of 32bit */
N#define I2C_STA_TXRF_remained_data_h1               ((uint16_t)0x0004)      /*!< Bit Value =(1):Remained data of 16bit */
N#define I2C_STA_TXRF_remained_data_b2               ((uint8_t )0x04)        /*!< Bit Value =(1):Remained data of 8bit */
N
N#define I2C_STA_STPSTRF_mask_w                      ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define I2C_STA_STPSTRF_mask_h1                     ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define I2C_STA_STPSTRF_mask_b2                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define I2C_STA_STPSTRF_normal_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_STPSTRF_normal_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_STPSTRF_normal_b2                   ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_STPSTRF_happened_w                  ((uint32_t)0x00020000)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_STPSTRF_happened_h1                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_STPSTRF_happened_b2                 ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_TSCF_mask_w                         ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define I2C_STA_TSCF_mask_h1                        ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define I2C_STA_TSCF_mask_b2                        ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define I2C_STA_TSCF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_TSCF_normal_h1                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_TSCF_normal_b2                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_TSCF_happened_w                     ((uint32_t)0x00010000)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_TSCF_happened_h1                    ((uint16_t)0x0001)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_TSCF_happened_b2                    ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_RWF_mask_w                          ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define I2C_STA_RWF_mask_h0                         ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define I2C_STA_RWF_mask_b1                         ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define I2C_STA_RWF_write_w                         ((uint32_t)0x00000000)  /*!< Bit Value =(0):Write of 32bit */
N#define I2C_STA_RWF_write_h0                        ((uint16_t)0x0000)      /*!< Bit Value =(0):Write of 16bit */
N#define I2C_STA_RWF_write_b1                        ((uint8_t )0x00)        /*!< Bit Value =(0):Write of 8bit */
N#define I2C_STA_RWF_read_w                          ((uint32_t)0x00008000)  /*!< Bit Value =(1):Read of 32bit */
N#define I2C_STA_RWF_read_h0                         ((uint16_t)0x8000)      /*!< Bit Value =(1):Read of 16bit */
N#define I2C_STA_RWF_read_b1                         ((uint8_t )0x80)        /*!< Bit Value =(1):Read of 8bit */
N
N#define I2C_STA_MSTF_mask_w                         ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define I2C_STA_MSTF_mask_h0                        ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define I2C_STA_MSTF_mask_b1                        ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define I2C_STA_MSTF_shift_w                        (14)                    /*!< Bit Shift of 32bit */
N#define I2C_STA_MSTF_shift_h0                       (14)                    /*!< Bit Shift of 16bit */
N#define I2C_STA_MSTF_shift_b1                       (6)                     /*!< Bit Shift of 8bit */
N
N#define I2C_STA_SLAF_mask_w                         ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define I2C_STA_SLAF_mask_h0                        ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define I2C_STA_SLAF_mask_b1                        ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define I2C_STA_SLAF_shift_w                        (13)                    /*!< Bit Shift of 32bit */
N#define I2C_STA_SLAF_shift_h0                       (13)                    /*!< Bit Shift of 16bit */
N#define I2C_STA_SLAF_shift_b1                       (5)                     /*!< Bit Shift of 8bit */
N
N#define I2C_STA_SADRF_mask_w                        ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define I2C_STA_SADRF_mask_h0                       ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define I2C_STA_SADRF_mask_b1                       ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define I2C_STA_SADRF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_SADRF_normal_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_SADRF_normal_b1                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_SADRF_happened_w                    ((uint32_t)0x00001000)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_SADRF_happened_h0                   ((uint16_t)0x1000)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_SADRF_happened_b1                   ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_ERRCF_mask_w                        ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define I2C_STA_ERRCF_mask_h0                       ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define I2C_STA_ERRCF_mask_b1                       ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define I2C_STA_ERRCF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_ERRCF_normal_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_ERRCF_normal_b1                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_ERRCF_happened_w                    ((uint32_t)0x00000800)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_ERRCF_happened_h0                   ((uint16_t)0x0800)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_ERRCF_happened_b1                   ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_CNTF_mask_w                         ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define I2C_STA_CNTF_mask_h0                        ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define I2C_STA_CNTF_mask_b1                        ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define I2C_STA_CNTF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_CNTF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_CNTF_normal_b1                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_CNTF_happened_w                     ((uint32_t)0x00000400)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_CNTF_happened_h0                    ((uint16_t)0x0400)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_CNTF_happened_b1                    ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_STOPF_mask_w                        ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define I2C_STA_STOPF_mask_h0                       ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define I2C_STA_STOPF_mask_b1                       ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define I2C_STA_STOPF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_STOPF_normal_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_STOPF_normal_b1                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_STOPF_happened_w                    ((uint32_t)0x00000200)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_STOPF_happened_h0                   ((uint16_t)0x0200)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_STOPF_happened_b1                   ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_RSTRF_mask_w                        ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define I2C_STA_RSTRF_mask_h0                       ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define I2C_STA_RSTRF_mask_b1                       ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define I2C_STA_RSTRF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_RSTRF_normal_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_RSTRF_normal_b1                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_RSTRF_happened_w                    ((uint32_t)0x00000100)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_RSTRF_happened_h0                   ((uint16_t)0x0100)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_RSTRF_happened_b1                   ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_TXF_mask_w                          ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define I2C_STA_TXF_mask_h0                         ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define I2C_STA_TXF_mask_b0                         ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define I2C_STA_TXF_normal_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_TXF_normal_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_TXF_normal_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_TXF_happened_w                      ((uint32_t)0x00000080)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_TXF_happened_h0                     ((uint16_t)0x0080)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_TXF_happened_b0                     ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_RXF_mask_w                          ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define I2C_STA_RXF_mask_h0                         ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define I2C_STA_RXF_mask_b0                         ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define I2C_STA_RXF_normal_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_RXF_normal_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_RXF_normal_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_RXF_happened_w                      ((uint32_t)0x00000040)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_RXF_happened_h0                     ((uint16_t)0x0040)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_RXF_happened_b0                     ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_TMOUTF_mask_w                       ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define I2C_STA_TMOUTF_mask_h0                      ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define I2C_STA_TMOUTF_mask_b0                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define I2C_STA_TMOUTF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_TMOUTF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_TMOUTF_normal_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_TMOUTF_happened_w                   ((uint32_t)0x00000010)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_TMOUTF_happened_h0                  ((uint16_t)0x0010)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_TMOUTF_happened_b0                  ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_ERRF_mask_w                         ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define I2C_STA_ERRF_mask_h0                        ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define I2C_STA_ERRF_mask_b0                        ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define I2C_STA_ERRF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_ERRF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_ERRF_normal_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_ERRF_happened_w                     ((uint32_t)0x00000008)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_ERRF_happened_h0                    ((uint16_t)0x0008)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_ERRF_happened_b0                    ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_BUFF_mask_w                         ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define I2C_STA_BUFF_mask_h0                        ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define I2C_STA_BUFF_mask_b0                        ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define I2C_STA_BUFF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_BUFF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_BUFF_normal_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_BUFF_happened_w                     ((uint32_t)0x00000004)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_BUFF_happened_h0                    ((uint16_t)0x0004)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_BUFF_happened_b0                    ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_EVENTF_mask_w                       ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define I2C_STA_EVENTF_mask_h0                      ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define I2C_STA_EVENTF_mask_b0                      ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define I2C_STA_EVENTF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_EVENTF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_EVENTF_normal_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_EVENTF_happened_w                   ((uint32_t)0x00000002)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA_EVENTF_happened_h0                  ((uint16_t)0x0002)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA_EVENTF_happened_b0                  ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA_BUSYF_mask_w                        ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define I2C_STA_BUSYF_mask_h0                       ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define I2C_STA_BUSYF_mask_b0                       ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define I2C_STA_BUSYF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA_BUSYF_normal_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA_BUSYF_normal_b0                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA_BUSYF_busy_w                        ((uint32_t)0x00000001)  /*!< Bit Value =(1):Busy of 32bit */
N#define I2C_STA_BUSYF_busy_h0                       ((uint16_t)0x0001)      /*!< Bit Value =(1):Busy of 16bit */
N#define I2C_STA_BUSYF_busy_b0                       ((uint8_t )0x01)        /*!< Bit Value =(1):Busy of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        I2C_INT  [register's definitions]
N *              Offset[0x04]  I2C interrupt enable register
N ******************************************************************************
N */
N///@{
N#define I2C_INT_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of I2C_INT */
N#define I2C_INT_SDAF_mask_w                         ((uint32_t)0x80000000)  /*!< Bit Mask of 32bit */
N#define I2C_INT_SDAF_mask_h1                        ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define I2C_INT_SDAF_mask_b3                        ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define I2C_INT_SDAF_shift_w                        (31)                    /*!< Bit Shift of 32bit */
N#define I2C_INT_SDAF_shift_h1                       (15)                    /*!< Bit Shift of 16bit */
N#define I2C_INT_SDAF_shift_b3                       (7)                     /*!< Bit Shift of 8bit */
N
N#define I2C_INT_SCLF_mask_w                         ((uint32_t)0x40000000)  /*!< Bit Mask of 32bit */
N#define I2C_INT_SCLF_mask_h1                        ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define I2C_INT_SCLF_mask_b3                        ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define I2C_INT_SCLF_shift_w                        (30)                    /*!< Bit Shift of 32bit */
N#define I2C_INT_SCLF_shift_h1                       (14)                    /*!< Bit Shift of 16bit */
N#define I2C_INT_SCLF_shift_b3                       (6)                     /*!< Bit Shift of 8bit */
N
N#define I2C_INT_TMOUT_IE_mask_w                     ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define I2C_INT_TMOUT_IE_mask_h0                    ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define I2C_INT_TMOUT_IE_mask_b0                    ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define I2C_INT_TMOUT_IE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_INT_TMOUT_IE_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_INT_TMOUT_IE_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_INT_TMOUT_IE_enable_w                   ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_INT_TMOUT_IE_enable_h0                  ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_INT_TMOUT_IE_enable_b0                  ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define I2C_INT_ERR_IE_mask_w                       ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define I2C_INT_ERR_IE_mask_h0                      ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define I2C_INT_ERR_IE_mask_b0                      ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define I2C_INT_ERR_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_INT_ERR_IE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_INT_ERR_IE_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_INT_ERR_IE_enable_w                     ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_INT_ERR_IE_enable_h0                    ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_INT_ERR_IE_enable_b0                    ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define I2C_INT_BUF_IE_mask_w                       ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define I2C_INT_BUF_IE_mask_h0                      ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define I2C_INT_BUF_IE_mask_b0                      ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define I2C_INT_BUF_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_INT_BUF_IE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_INT_BUF_IE_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_INT_BUF_IE_enable_w                     ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_INT_BUF_IE_enable_h0                    ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_INT_BUF_IE_enable_b0                    ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define I2C_INT_EVENT_IE_mask_w                     ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define I2C_INT_EVENT_IE_mask_h0                    ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define I2C_INT_EVENT_IE_mask_b0                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define I2C_INT_EVENT_IE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_INT_EVENT_IE_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_INT_EVENT_IE_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_INT_EVENT_IE_enable_w                   ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_INT_EVENT_IE_enable_h0                  ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_INT_EVENT_IE_enable_b0                  ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define I2C_INT_IEA_mask_w                          ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define I2C_INT_IEA_mask_h0                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define I2C_INT_IEA_mask_b0                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define I2C_INT_IEA_disable_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_INT_IEA_disable_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_INT_IEA_disable_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_INT_IEA_enable_w                        ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_INT_IEA_enable_h0                       ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_INT_IEA_enable_b0                       ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        I2C_CLK  [register's definitions]
N *              Offset[0x08]  I2C clock source register
N ******************************************************************************
N */
N///@{
N#define I2C_CLK_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of I2C_CLK */
N#define I2C_CLK_TMO_CKS_mask_w                      ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define I2C_CLK_TMO_CKS_mask_h0                     ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define I2C_CLK_TMO_CKS_mask_b1                     ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define I2C_CLK_TMO_CKS_ck_ut_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):CK_UT of 32bit */
N#define I2C_CLK_TMO_CKS_ck_ut_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):CK_UT of 16bit */
N#define I2C_CLK_TMO_CKS_ck_ut_b1                    ((uint8_t )0x00)        /*!< Bit Value =(0):CK_UT of 8bit */
N#define I2C_CLK_TMO_CKS_div64_w                     ((uint32_t)0x00001000)  /*!< Bit Value =(1):DIV64 of 32bit */
N#define I2C_CLK_TMO_CKS_div64_h0                    ((uint16_t)0x1000)      /*!< Bit Value =(1):DIV64 of 16bit */
N#define I2C_CLK_TMO_CKS_div64_b1                    ((uint8_t )0x10)        /*!< Bit Value =(1):DIV64 of 8bit */
N
N#define I2C_CLK_CK_PSC_mask_w                       ((uint32_t)0x00000700)  /*!< Bit Mask of 32bit */
N#define I2C_CLK_CK_PSC_mask_h0                      ((uint16_t)0x0700)      /*!< Bit Mask of 16bit */
N#define I2C_CLK_CK_PSC_mask_b1                      ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define I2C_CLK_CK_PSC_shift_w                      (8)                     /*!< Bit Shift of 32bit */
N#define I2C_CLK_CK_PSC_shift_h0                     (8)                     /*!< Bit Shift of 16bit */
N#define I2C_CLK_CK_PSC_shift_b1                     (0)                     /*!< Bit Shift of 8bit */
N
N#define I2C_CLK_CK_DIV_mask_w                       ((uint32_t)0x00000070)  /*!< Bit Mask of 32bit */
N#define I2C_CLK_CK_DIV_mask_h0                      ((uint16_t)0x0070)      /*!< Bit Mask of 16bit */
N#define I2C_CLK_CK_DIV_mask_b0                      ((uint8_t )0x70)        /*!< Bit Mask of 8bit */
N#define I2C_CLK_CK_DIV_div1_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):DIV1 of 32bit */
N#define I2C_CLK_CK_DIV_div1_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0x0):DIV1 of 16bit */
N#define I2C_CLK_CK_DIV_div1_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0x0):DIV1 of 8bit */
N#define I2C_CLK_CK_DIV_div2_w                       ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):DIV2 of 32bit */
N#define I2C_CLK_CK_DIV_div2_h0                      ((uint16_t)0x0010)      /*!< Bit Value =(0x1):DIV2 of 16bit */
N#define I2C_CLK_CK_DIV_div2_b0                      ((uint8_t )0x10)        /*!< Bit Value =(0x1):DIV2 of 8bit */
N#define I2C_CLK_CK_DIV_div4_w                       ((uint32_t)0x00000020)  /*!< Bit Value =(0x2):DIV4 of 32bit */
N#define I2C_CLK_CK_DIV_div4_h0                      ((uint16_t)0x0020)      /*!< Bit Value =(0x2):DIV4 of 16bit */
N#define I2C_CLK_CK_DIV_div4_b0                      ((uint8_t )0x20)        /*!< Bit Value =(0x2):DIV4 of 8bit */
N#define I2C_CLK_CK_DIV_div8_w                       ((uint32_t)0x00000030)  /*!< Bit Value =(0x3):DIV8 of 32bit */
N#define I2C_CLK_CK_DIV_div8_h0                      ((uint16_t)0x0030)      /*!< Bit Value =(0x3):DIV8 of 16bit */
N#define I2C_CLK_CK_DIV_div8_b0                      ((uint8_t )0x30)        /*!< Bit Value =(0x3):DIV8 of 8bit */
N#define I2C_CLK_CK_DIV_div16_w                      ((uint32_t)0x00000040)  /*!< Bit Value =(0x4):DIV16 of 32bit */
N#define I2C_CLK_CK_DIV_div16_h0                     ((uint16_t)0x0040)      /*!< Bit Value =(0x4):DIV16 of 16bit */
N#define I2C_CLK_CK_DIV_div16_b0                     ((uint8_t )0x40)        /*!< Bit Value =(0x4):DIV16 of 8bit */
N#define I2C_CLK_CK_DIV_div32_w                      ((uint32_t)0x00000050)  /*!< Bit Value =(0x5):DIV32 of 32bit */
N#define I2C_CLK_CK_DIV_div32_h0                     ((uint16_t)0x0050)      /*!< Bit Value =(0x5):DIV32 of 16bit */
N#define I2C_CLK_CK_DIV_div32_b0                     ((uint8_t )0x50)        /*!< Bit Value =(0x5):DIV32 of 8bit */
N#define I2C_CLK_CK_DIV_div64_w                      ((uint32_t)0x00000060)  /*!< Bit Value =(0x6):DIV64 of 32bit */
N#define I2C_CLK_CK_DIV_div64_h0                     ((uint16_t)0x0060)      /*!< Bit Value =(0x6):DIV64 of 16bit */
N#define I2C_CLK_CK_DIV_div64_b0                     ((uint8_t )0x60)        /*!< Bit Value =(0x6):DIV64 of 8bit */
N#define I2C_CLK_CK_DIV_div128_w                     ((uint32_t)0x00000070)  /*!< Bit Value =(0x7):DIV128 of 32bit */
N#define I2C_CLK_CK_DIV_div128_h0                    ((uint16_t)0x0070)      /*!< Bit Value =(0x7):DIV128 of 16bit */
N#define I2C_CLK_CK_DIV_div128_b0                    ((uint8_t )0x70)        /*!< Bit Value =(0x7):DIV128 of 8bit */
N
N#define I2C_CLK_CK_SEL_mask_w                       ((uint32_t)0x0000000C)  /*!< Bit Mask of 32bit */
N#define I2C_CLK_CK_SEL_mask_h0                      ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define I2C_CLK_CK_SEL_mask_b0                      ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define I2C_CLK_CK_SEL_proc_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):PROC of 32bit */
N#define I2C_CLK_CK_SEL_proc_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0x0):PROC of 16bit */
N#define I2C_CLK_CK_SEL_proc_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0x0):PROC of 8bit */
N#define I2C_CLK_CK_SEL_tm00_trgo_w                  ((uint32_t)0x00000008)  /*!< Bit Value =(0x2):TM00_TRGO of 32bit */
N#define I2C_CLK_CK_SEL_tm00_trgo_h0                 ((uint16_t)0x0008)      /*!< Bit Value =(0x2):TM00_TRGO of 16bit */
N#define I2C_CLK_CK_SEL_tm00_trgo_b0                 ((uint8_t )0x08)        /*!< Bit Value =(0x2):TM00_TRGO of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        I2C_SAC  [register's definitions]
N *              Offset[0x0C]  I2C slave mode slave address code register
N ******************************************************************************
N */
N///@{
N#define I2C_SAC_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of I2C_SAC */
N#define I2C_SAC_SA_CODE_mask_w                      ((uint32_t)0x000000FE)  /*!< Bit Mask of 32bit */
N#define I2C_SAC_SA_CODE_mask_h0                     ((uint16_t)0x00FE)      /*!< Bit Mask of 16bit */
N#define I2C_SAC_SA_CODE_mask_b0                     ((uint8_t )0xFE)        /*!< Bit Mask of 8bit */
N#define I2C_SAC_SA_CODE_shift_w                     (1)                     /*!< Bit Shift of 32bit */
N#define I2C_SAC_SA_CODE_shift_h0                    (1)                     /*!< Bit Shift of 16bit */
N#define I2C_SAC_SA_CODE_shift_b0                    (1)                     /*!< Bit Shift of 8bit */
N
N#define I2C_SAC_SA_RW_mask_w                        ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define I2C_SAC_SA_RW_mask_h0                       ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define I2C_SAC_SA_RW_mask_b0                       ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define I2C_SAC_SA_RW_shift_w                       (0)                     /*!< Bit Shift of 32bit */
N#define I2C_SAC_SA_RW_shift_h0                      (0)                     /*!< Bit Shift of 16bit */
N#define I2C_SAC_SA_RW_shift_b0                      (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        I2C_CR0  [register's definitions]
N *              Offset[0x10]  I2C control register 0
N ******************************************************************************
N */
N///@{
N#define I2C_CR0_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of I2C_CR0 */
N#define I2C_CR0_DMA_TXEN_mask_w                     ((uint32_t)0x80000000)  /*!< Bit Mask of 32bit */
N#define I2C_CR0_DMA_TXEN_mask_h1                    ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define I2C_CR0_DMA_TXEN_mask_b3                    ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define I2C_CR0_DMA_TXEN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_CR0_DMA_TXEN_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_CR0_DMA_TXEN_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_CR0_DMA_TXEN_enable_w                   ((uint32_t)0x80000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_CR0_DMA_TXEN_enable_h1                  ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_CR0_DMA_TXEN_enable_b3                  ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define I2C_CR0_DMA_RXEN_mask_w                     ((uint32_t)0x40000000)  /*!< Bit Mask of 32bit */
N#define I2C_CR0_DMA_RXEN_mask_h1                    ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define I2C_CR0_DMA_RXEN_mask_b3                    ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define I2C_CR0_DMA_RXEN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_CR0_DMA_RXEN_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_CR0_DMA_RXEN_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_CR0_DMA_RXEN_enable_w                   ((uint32_t)0x40000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_CR0_DMA_RXEN_enable_h1                  ((uint16_t)0x4000)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_CR0_DMA_RXEN_enable_b3                  ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define I2C_CR0_PDRV_SEL_mask_w                     ((uint32_t)0x0000C000)  /*!< Bit Mask of 32bit */
N#define I2C_CR0_PDRV_SEL_mask_h0                    ((uint16_t)0xC000)      /*!< Bit Mask of 16bit */
N#define I2C_CR0_PDRV_SEL_mask_b1                    ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define I2C_CR0_PDRV_SEL_0t_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):0T of 32bit */
N#define I2C_CR0_PDRV_SEL_0t_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0x0):0T of 16bit */
N#define I2C_CR0_PDRV_SEL_0t_b1                      ((uint8_t )0x00)        /*!< Bit Value =(0x0):0T of 8bit */
N#define I2C_CR0_PDRV_SEL_1t_w                       ((uint32_t)0x00004000)  /*!< Bit Value =(0x1):1T of 32bit */
N#define I2C_CR0_PDRV_SEL_1t_h0                      ((uint16_t)0x4000)      /*!< Bit Value =(0x1):1T of 16bit */
N#define I2C_CR0_PDRV_SEL_1t_b1                      ((uint8_t )0x40)        /*!< Bit Value =(0x1):1T of 8bit */
N#define I2C_CR0_PDRV_SEL_2t_w                       ((uint32_t)0x00008000)  /*!< Bit Value =(0x2):2T of 32bit */
N#define I2C_CR0_PDRV_SEL_2t_h0                      ((uint16_t)0x8000)      /*!< Bit Value =(0x2):2T of 16bit */
N#define I2C_CR0_PDRV_SEL_2t_b1                      ((uint8_t )0x80)        /*!< Bit Value =(0x2):2T of 8bit */
N#define I2C_CR0_PDRV_SEL_3t_w                       ((uint32_t)0x0000C000)  /*!< Bit Value =(0x3):3T of 32bit */
N#define I2C_CR0_PDRV_SEL_3t_h0                      ((uint16_t)0xC000)      /*!< Bit Value =(0x3):3T of 16bit */
N#define I2C_CR0_PDRV_SEL_3t_b1                      ((uint8_t )0xC0)        /*!< Bit Value =(0x3):3T of 8bit */
N
N#define I2C_CR0_SCLS_DIS_mask_w                     ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define I2C_CR0_SCLS_DIS_mask_h0                    ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define I2C_CR0_SCLS_DIS_mask_b1                    ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define I2C_CR0_SCLS_DIS_enable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Enable of 32bit */
N#define I2C_CR0_SCLS_DIS_enable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Enable of 16bit */
N#define I2C_CR0_SCLS_DIS_enable_b1                  ((uint8_t )0x00)        /*!< Bit Value =(0):Enable of 8bit */
N#define I2C_CR0_SCLS_DIS_disable_w                  ((uint32_t)0x00001000)  /*!< Bit Value =(1):Disable of 32bit */
N#define I2C_CR0_SCLS_DIS_disable_h0                 ((uint16_t)0x1000)      /*!< Bit Value =(1):Disable of 16bit */
N#define I2C_CR0_SCLS_DIS_disable_b1                 ((uint8_t )0x10)        /*!< Bit Value =(1):Disable of 8bit */
N
N#define I2C_CR0_SFBD_EN_mask_w                      ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define I2C_CR0_SFBD_EN_mask_h0                     ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define I2C_CR0_SFBD_EN_mask_b1                     ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define I2C_CR0_SFBD_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_CR0_SFBD_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_CR0_SFBD_EN_disable_b1                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_CR0_SFBD_EN_enable_w                    ((uint32_t)0x00000800)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_CR0_SFBD_EN_enable_h0                   ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_CR0_SFBD_EN_enable_b1                   ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define I2C_CR0_GC_EN_mask_w                        ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define I2C_CR0_GC_EN_mask_h0                       ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define I2C_CR0_GC_EN_mask_b0                       ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define I2C_CR0_GC_EN_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_CR0_GC_EN_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_CR0_GC_EN_disable_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_CR0_GC_EN_enable_w                      ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_CR0_GC_EN_enable_h0                     ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_CR0_GC_EN_enable_b0                     ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define I2C_CR0_BUF_EN_mask_w                       ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define I2C_CR0_BUF_EN_mask_h0                      ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define I2C_CR0_BUF_EN_mask_b0                      ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define I2C_CR0_BUF_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_CR0_BUF_EN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_CR0_BUF_EN_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_CR0_BUF_EN_enable_w                     ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_CR0_BUF_EN_enable_h0                    ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_CR0_BUF_EN_enable_b0                    ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define I2C_CR0_MDS_mask_w                          ((uint32_t)0x00000030)  /*!< Bit Mask of 32bit */
N#define I2C_CR0_MDS_mask_h0                         ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define I2C_CR0_MDS_mask_b0                         ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define I2C_CR0_MDS_i2c_w                           ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):I2C of 32bit */
N#define I2C_CR0_MDS_i2c_h0                          ((uint16_t)0x0000)      /*!< Bit Value =(0x0):I2C of 16bit */
N#define I2C_CR0_MDS_i2c_b0                          ((uint8_t )0x00)        /*!< Bit Value =(0x0):I2C of 8bit */
N#define I2C_CR0_MDS_monitor_w                       ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):Monitor of 32bit */
N#define I2C_CR0_MDS_monitor_h0                      ((uint16_t)0x0010)      /*!< Bit Value =(0x1):Monitor of 16bit */
N#define I2C_CR0_MDS_monitor_b0                      ((uint8_t )0x10)        /*!< Bit Value =(0x1):Monitor of 8bit */
N
N#define I2C_CR0_SADR2_EN_mask_w                     ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define I2C_CR0_SADR2_EN_mask_h0                    ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define I2C_CR0_SADR2_EN_mask_b0                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define I2C_CR0_SADR2_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_CR0_SADR2_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_CR0_SADR2_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_CR0_SADR2_EN_enable_w                   ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_CR0_SADR2_EN_enable_h0                  ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_CR0_SADR2_EN_enable_b0                  ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define I2C_CR0_SADR_EN_mask_w                      ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define I2C_CR0_SADR_EN_mask_h0                     ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define I2C_CR0_SADR_EN_mask_b0                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define I2C_CR0_SADR_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_CR0_SADR_EN_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_CR0_SADR_EN_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_CR0_SADR_EN_enable_w                    ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_CR0_SADR_EN_enable_h0                   ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_CR0_SADR_EN_enable_b0                   ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define I2C_CR0_EN_mask_w                           ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define I2C_CR0_EN_mask_h0                          ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define I2C_CR0_EN_mask_b0                          ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define I2C_CR0_EN_disable_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_CR0_EN_disable_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_CR0_EN_disable_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_CR0_EN_enable_w                         ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_CR0_EN_enable_h0                        ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_CR0_EN_enable_b0                        ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        I2C_CR1  [register's definitions]
N *              Offset[0x14]  I2C control register 1
N ******************************************************************************
N */
N///@{
N#define I2C_CR1_default                             ((uint32_t)0x00000504)  /*!< Reg Reset Default Value */
N
N/* Bit fields of I2C_CR1 */
N#define I2C_CR1_HT_mask_w                           ((uint32_t)0x00000F00)  /*!< Bit Mask of 32bit */
N#define I2C_CR1_HT_mask_h0                          ((uint16_t)0x0F00)      /*!< Bit Mask of 16bit */
N#define I2C_CR1_HT_mask_b1                          ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N
N#define I2C_CR1_LT_mask_w                           ((uint32_t)0x0000001F)  /*!< Bit Mask of 32bit */
N#define I2C_CR1_LT_mask_h0                          ((uint16_t)0x001F)      /*!< Bit Mask of 16bit */
N#define I2C_CR1_LT_mask_b0                          ((uint8_t )0x1F)        /*!< Bit Mask of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        I2C_CR2  [register's definitions]
N *              Offset[0x18]  I2C control register 2
N ******************************************************************************
N */
N///@{
N#define I2C_CR2_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of I2C_CR2 */
N#define I2C_CR2_ACNT_mask_w                         ((uint32_t)0x00070000)  /*!< Bit Mask of 32bit */
N#define I2C_CR2_ACNT_mask_h1                        ((uint16_t)0x0007)      /*!< Bit Mask of 16bit */
N#define I2C_CR2_ACNT_mask_b2                        ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define I2C_CR2_ACNT_0_byte_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):0-byte of 32bit */
N#define I2C_CR2_ACNT_0_byte_h1                      ((uint16_t)0x0000)      /*!< Bit Value =(0x0):0-byte of 16bit */
N#define I2C_CR2_ACNT_0_byte_b2                      ((uint8_t )0x00)        /*!< Bit Value =(0x0):0-byte of 8bit */
N#define I2C_CR2_ACNT_1_byte_w                       ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):1-byte of 32bit */
N#define I2C_CR2_ACNT_1_byte_h1                      ((uint16_t)0x0001)      /*!< Bit Value =(0x1):1-byte of 16bit */
N#define I2C_CR2_ACNT_1_byte_b2                      ((uint8_t )0x01)        /*!< Bit Value =(0x1):1-byte of 8bit */
N#define I2C_CR2_ACNT_2_byte_w                       ((uint32_t)0x00020000)  /*!< Bit Value =(0x2):2-byte of 32bit */
N#define I2C_CR2_ACNT_2_byte_h1                      ((uint16_t)0x0002)      /*!< Bit Value =(0x2):2-byte of 16bit */
N#define I2C_CR2_ACNT_2_byte_b2                      ((uint8_t )0x02)        /*!< Bit Value =(0x2):2-byte of 8bit */
N#define I2C_CR2_ACNT_3_byte_w                       ((uint32_t)0x00030000)  /*!< Bit Value =(0x3):3-byte of 32bit */
N#define I2C_CR2_ACNT_3_byte_h1                      ((uint16_t)0x0003)      /*!< Bit Value =(0x3):3-byte of 16bit */
N#define I2C_CR2_ACNT_3_byte_b2                      ((uint8_t )0x03)        /*!< Bit Value =(0x3):3-byte of 8bit */
N#define I2C_CR2_ACNT_4_byte_w                       ((uint32_t)0x00040000)  /*!< Bit Value =(0x4):4-byte of 32bit */
N#define I2C_CR2_ACNT_4_byte_h1                      ((uint16_t)0x0004)      /*!< Bit Value =(0x4):4-byte of 16bit */
N#define I2C_CR2_ACNT_4_byte_b2                      ((uint8_t )0x04)        /*!< Bit Value =(0x4):4-byte of 8bit */
N
N#define I2C_CR2_BUF_CNT_mask_w                      ((uint32_t)0x00000700)  /*!< Bit Mask of 32bit */
N#define I2C_CR2_BUF_CNT_mask_h0                     ((uint16_t)0x0700)      /*!< Bit Mask of 16bit */
N#define I2C_CR2_BUF_CNT_mask_b1                     ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define I2C_CR2_BUF_CNT_1_byte_w                    ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):1-byte of 32bit */
N#define I2C_CR2_BUF_CNT_1_byte_h0                   ((uint16_t)0x0100)      /*!< Bit Value =(0x1):1-byte of 16bit */
N#define I2C_CR2_BUF_CNT_1_byte_b1                   ((uint8_t )0x01)        /*!< Bit Value =(0x1):1-byte of 8bit */
N#define I2C_CR2_BUF_CNT_2_byte_w                    ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):2-byte of 32bit */
N#define I2C_CR2_BUF_CNT_2_byte_h0                   ((uint16_t)0x0200)      /*!< Bit Value =(0x2):2-byte of 16bit */
N#define I2C_CR2_BUF_CNT_2_byte_b1                   ((uint8_t )0x02)        /*!< Bit Value =(0x2):2-byte of 8bit */
N#define I2C_CR2_BUF_CNT_3_byte_w                    ((uint32_t)0x00000300)  /*!< Bit Value =(0x3):3-byte of 32bit */
N#define I2C_CR2_BUF_CNT_3_byte_h0                   ((uint16_t)0x0300)      /*!< Bit Value =(0x3):3-byte of 16bit */
N#define I2C_CR2_BUF_CNT_3_byte_b1                   ((uint8_t )0x03)        /*!< Bit Value =(0x3):3-byte of 8bit */
N#define I2C_CR2_BUF_CNT_4_byte_w                    ((uint32_t)0x00000400)  /*!< Bit Value =(0x4):4-byte of 32bit */
N#define I2C_CR2_BUF_CNT_4_byte_h0                   ((uint16_t)0x0400)      /*!< Bit Value =(0x4):4-byte of 16bit */
N#define I2C_CR2_BUF_CNT_4_byte_b1                   ((uint8_t )0x04)        /*!< Bit Value =(0x4):4-byte of 8bit */
N
N#define I2C_CR2_AA_LCK_mask_w                       ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define I2C_CR2_AA_LCK_mask_h0                      ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define I2C_CR2_AA_LCK_mask_b0                      ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define I2C_CR2_AA_LCK_locked_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Locked of 32bit */
N#define I2C_CR2_AA_LCK_locked_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Locked of 16bit */
N#define I2C_CR2_AA_LCK_locked_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Locked of 8bit */
N#define I2C_CR2_AA_LCK_un_locked_w                  ((uint32_t)0x00000040)  /*!< Bit Value =(1):un-Locked of 32bit */
N#define I2C_CR2_AA_LCK_un_locked_h0                 ((uint16_t)0x0040)      /*!< Bit Value =(1):un-Locked of 16bit */
N#define I2C_CR2_AA_LCK_un_locked_b0                 ((uint8_t )0x40)        /*!< Bit Value =(1):un-Locked of 8bit */
N
N#define I2C_CR2_STO_LCK_mask_w                      ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define I2C_CR2_STO_LCK_mask_h0                     ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define I2C_CR2_STO_LCK_mask_b0                     ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define I2C_CR2_STO_LCK_locked_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Locked of 32bit */
N#define I2C_CR2_STO_LCK_locked_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Locked of 16bit */
N#define I2C_CR2_STO_LCK_locked_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Locked of 8bit */
N#define I2C_CR2_STO_LCK_un_locked_w                 ((uint32_t)0x00000020)  /*!< Bit Value =(1):un-Locked of 32bit */
N#define I2C_CR2_STO_LCK_un_locked_h0                ((uint16_t)0x0020)      /*!< Bit Value =(1):un-Locked of 16bit */
N#define I2C_CR2_STO_LCK_un_locked_b0                ((uint8_t )0x20)        /*!< Bit Value =(1):un-Locked of 8bit */
N
N#define I2C_CR2_STA_LCK_mask_w                      ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define I2C_CR2_STA_LCK_mask_h0                     ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define I2C_CR2_STA_LCK_mask_b0                     ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define I2C_CR2_STA_LCK_locked_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Locked of 32bit */
N#define I2C_CR2_STA_LCK_locked_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Locked of 16bit */
N#define I2C_CR2_STA_LCK_locked_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Locked of 8bit */
N#define I2C_CR2_STA_LCK_un_locked_w                 ((uint32_t)0x00000010)  /*!< Bit Value =(1):un-Locked of 32bit */
N#define I2C_CR2_STA_LCK_un_locked_h0                ((uint16_t)0x0010)      /*!< Bit Value =(1):un-Locked of 16bit */
N#define I2C_CR2_STA_LCK_un_locked_b0                ((uint8_t )0x10)        /*!< Bit Value =(1):un-Locked of 8bit */
N
N#define I2C_CR2_CMD_TC_mask_w                       ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define I2C_CR2_CMD_TC_mask_h0                      ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define I2C_CR2_CMD_TC_mask_b0                      ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define I2C_CR2_CMD_TC_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_CR2_CMD_TC_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_CR2_CMD_TC_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_CR2_CMD_TC_enable_w                     ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_CR2_CMD_TC_enable_h0                    ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_CR2_CMD_TC_enable_b0                    ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define I2C_CR2_AA_mask_w                           ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define I2C_CR2_AA_mask_h0                          ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define I2C_CR2_AA_mask_b0                          ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define I2C_CR2_AA_shift_w                          (2)                     /*!< Bit Shift of 32bit */
N#define I2C_CR2_AA_shift_h0                         (2)                     /*!< Bit Shift of 16bit */
N#define I2C_CR2_AA_shift_b0                         (2)                     /*!< Bit Shift of 8bit */
N
N#define I2C_CR2_STO_mask_w                          ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define I2C_CR2_STO_mask_h0                         ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define I2C_CR2_STO_mask_b0                         ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define I2C_CR2_STO_shift_w                         (1)                     /*!< Bit Shift of 32bit */
N#define I2C_CR2_STO_shift_h0                        (1)                     /*!< Bit Shift of 16bit */
N#define I2C_CR2_STO_shift_b0                        (1)                     /*!< Bit Shift of 8bit */
N
N#define I2C_CR2_STA_mask_w                          ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define I2C_CR2_STA_mask_h0                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define I2C_CR2_STA_mask_b0                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define I2C_CR2_STA_shift_w                         (0)                     /*!< Bit Shift of 32bit */
N#define I2C_CR2_STA_shift_h0                        (0)                     /*!< Bit Shift of 16bit */
N#define I2C_CR2_STA_shift_b0                        (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        I2C_SADR  [register's definitions]
N *              Offset[0x1C]  I2C slave address detect register
N ******************************************************************************
N */
N///@{
N#define I2C_SADR_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of I2C_SADR */
N#define I2C_SADR_SADR2_mask_w                       ((uint32_t)0x0000FE00)  /*!< Bit Mask of 32bit */
N#define I2C_SADR_SADR2_mask_h0                      ((uint16_t)0xFE00)      /*!< Bit Mask of 16bit */
N#define I2C_SADR_SADR2_mask_b1                      ((uint8_t )0xFE)        /*!< Bit Mask of 8bit */
N#define I2C_SADR_SADR2_shift_w                      (9)                     /*!< Bit Shift of 32bit */
N#define I2C_SADR_SADR2_shift_h0                     (9)                     /*!< Bit Shift of 16bit */
N#define I2C_SADR_SADR2_shift_b1                     (1)                     /*!< Bit Shift of 8bit */
N
N#define I2C_SADR_SADR_mask_w                        ((uint32_t)0x000000FE)  /*!< Bit Mask of 32bit */
N#define I2C_SADR_SADR_mask_h0                       ((uint16_t)0x00FE)      /*!< Bit Mask of 16bit */
N#define I2C_SADR_SADR_mask_b0                       ((uint8_t )0xFE)        /*!< Bit Mask of 8bit */
N#define I2C_SADR_SADR_shift_w                       (1)                     /*!< Bit Shift of 32bit */
N#define I2C_SADR_SADR_shift_h0                      (1)                     /*!< Bit Shift of 16bit */
N#define I2C_SADR_SADR_shift_b0                      (1)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        I2C_TMOUT  [register's definitions]
N *              Offset[0x20]  I2C timeout control register
N ******************************************************************************
N */
N///@{
N#define I2C_TMOUT_default                           ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of I2C_TMOUT */
N#define I2C_TMOUT_TMO_CNT_mask_w                    ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define I2C_TMOUT_TMO_CNT_mask_h0                   ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define I2C_TMOUT_TMO_CNT_mask_b1                   ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define I2C_TMOUT_TMO_CNT_shift_w                   (8)                     /*!< Bit Shift of 32bit */
N#define I2C_TMOUT_TMO_CNT_shift_h0                  (8)                     /*!< Bit Shift of 16bit */
N#define I2C_TMOUT_TMO_CNT_shift_b1                  (0)                     /*!< Bit Shift of 8bit */
N
N#define I2C_TMOUT_TMO_MDS_mask_w                    ((uint32_t)0x0000000C)  /*!< Bit Mask of 32bit */
N#define I2C_TMOUT_TMO_MDS_mask_h0                   ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define I2C_TMOUT_TMO_MDS_mask_b0                   ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define I2C_TMOUT_TMO_MDS_scl_low_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):SCL-low of 32bit */
N#define I2C_TMOUT_TMO_MDS_scl_low_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0x0):SCL-low of 16bit */
N#define I2C_TMOUT_TMO_MDS_scl_low_b0                ((uint8_t )0x00)        /*!< Bit Value =(0x0):SCL-low of 8bit */
N#define I2C_TMOUT_TMO_MDS_scl_sda_high_w            ((uint32_t)0x00000004)  /*!< Bit Value =(0x1):SCL-SDA-high of 32bit */
N#define I2C_TMOUT_TMO_MDS_scl_sda_high_h0           ((uint16_t)0x0004)      /*!< Bit Value =(0x1):SCL-SDA-high of 16bit */
N#define I2C_TMOUT_TMO_MDS_scl_sda_high_b0           ((uint8_t )0x04)        /*!< Bit Value =(0x1):SCL-SDA-high of 8bit */
N#define I2C_TMOUT_TMO_MDS_general_w                 ((uint32_t)0x00000008)  /*!< Bit Value =(0x2):General of 32bit */
N#define I2C_TMOUT_TMO_MDS_general_h0                ((uint16_t)0x0008)      /*!< Bit Value =(0x2):General of 16bit */
N#define I2C_TMOUT_TMO_MDS_general_b0                ((uint8_t )0x08)        /*!< Bit Value =(0x2):General of 8bit */
N
N#define I2C_TMOUT_TMO_EN_mask_w                     ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define I2C_TMOUT_TMO_EN_mask_h0                    ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define I2C_TMOUT_TMO_EN_mask_b0                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define I2C_TMOUT_TMO_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define I2C_TMOUT_TMO_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define I2C_TMOUT_TMO_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define I2C_TMOUT_TMO_EN_enable_w                   ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define I2C_TMOUT_TMO_EN_enable_h0                  ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define I2C_TMOUT_TMO_EN_enable_b0                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        I2C_STA2  [register's definitions]
N *              Offset[0x28]  I2C status register 2
N ******************************************************************************
N */
N///@{
N#define I2C_STA2_default                            ((uint32_t)0x000000F8)  /*!< Reg Reset Default Value */
N
N/* Bit fields of I2C_STA2 */
N#define I2C_STA2_EVENTF2_mask_w                     ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define I2C_STA2_EVENTF2_mask_h0                    ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define I2C_STA2_EVENTF2_mask_b1                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define I2C_STA2_EVENTF2_normal_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define I2C_STA2_EVENTF2_normal_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define I2C_STA2_EVENTF2_normal_b1                  ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define I2C_STA2_EVENTF2_happened_w                 ((uint32_t)0x00000100)  /*!< Bit Value =(1):Happened of 32bit */
N#define I2C_STA2_EVENTF2_happened_h0                ((uint16_t)0x0100)      /*!< Bit Value =(1):Happened of 16bit */
N#define I2C_STA2_EVENTF2_happened_b1                ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define I2C_STA2_EVENT_mask_w                       ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define I2C_STA2_EVENT_mask_h0                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define I2C_STA2_EVENT_mask_b0                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define I2C_STA2_EVENT_shift_w                      (0)                     /*!< Bit Shift of 32bit */
N#define I2C_STA2_EVENT_shift_h0                     (0)                     /*!< Bit Shift of 16bit */
N#define I2C_STA2_EVENT_shift_b0                     (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        I2C_SBUF  [register's definitions]
N *              Offset[0x2C]  I2C data shift buffer register
N ******************************************************************************
N */
N///@{
N#define I2C_SBUF_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of I2C_SBUF */
N#define I2C_SBUF_SBUF_mask_w                        ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define I2C_SBUF_SBUF_mask_h0                       ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define I2C_SBUF_SBUF_mask_b0                       ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define I2C_SBUF_SBUF_shift_w                       (0)                     /*!< Bit Shift of 32bit */
N#define I2C_SBUF_SBUF_shift_h0                      (0)                     /*!< Bit Shift of 16bit */
N#define I2C_SBUF_SBUF_shift_b0                      (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        I2C_DAT  [register's definitions]
N *              Offset[0x30]  I2C data register
N ******************************************************************************
N */
N///@{
N#define I2C_DAT_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of I2C_DAT */
N#define I2C_DAT_DAT_mask_w                          ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define I2C_DAT_DAT_shift_w                         (0)                     /*!< Bit Shift of 32bit */
N#define I2C_DAT_DAT_shift_h0                        (0)                     /*!< Bit Shift of 16bit */
N#define I2C_DAT_DAT_shift_b0                        (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N
N#endif  // _MG32x02z_I2C_H
N
N/*----------------------------------------------------------------------------*/
N/*                         End of file MG32x02z_I2C.h                         */
N/*----------------------------------------------------------------------------*/
L 38 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_I2C_MID.h" 2
N
N/** @name I2C I2C 
N * @brief I2C MID module driver
N * @{
N */
N
N/* Exported types ------------------------------------------------------------*/
N/**
N ******************************************************************************
N * @struct I2C_InitTypeDef
N * @brief  I2C Initial Configuration Structure definition
N ******************************************************************************
N */
Ntypedef struct{
N
N    uint32_t Timing;              /*!< Specifies the I2C_TIMINGR_register value.
N                                    This parameter calculated by referring to I2C initialization
N                                           section in Reference manual */
N
N    uint32_t OwnAddress1;         /*!< Specifies the first device own address.
N                                    This parameter can be a 7-bit address. */
N
N#if defined(MG32_2ND) || defined(MG32_3RD)
X#if 0L || 0L
S    uint32_t OwnAddress1Masks;    /*!< Specifies the acknowledge mask address second device own address
S                                    This parameter can be a value of reference I2C_OWN_ADDRESS1_MASKS */
N#endif
N
N    uint32_t DualAddressMode;     /*!< Specifies if dual addressing mode is selected.
N                                    This parameter can be a value of reference I2C_DUAL_ADDRESSING_MODE */
N
N    uint32_t OwnAddress2;         /*!< Specifies the second device own address if dual addressing mode is selected
N                                    This parameter can be a 7-bit address. */
N
N    uint32_t GeneralCallMode;     /*!< Specifies if general call mode is selected.
N                                    This parameter can be a value of reference I2C_GENERAL_CALL_ADDRESSING_MODE */
N
N}I2C_InitTypeDef;
N
N/**
N ******************************************************************************
N * @enum MID_I2C_ModeTypeDef 
N * @brief  MID Mode structure definition
N *        @arg Bit7 Master Transmit Data NACK not Error
N *        @arg Bit[9:8] Master Trnasfer End Type, Repeat Start or Stop, 0:None / 01:RepeatStart / 10:Stop / 11:Stop and Start
N *        @arg Bit[11:10] Operating Mode, 00:None / 01:Master / 10:Slave / MEM
N *        @arg Bit12 Slave Transmit Data transfer use DMA
N *        @arg Bit13 Slave Receive Data transfer use DMA
N *        @arg Bit14 Master Receive Data transfer use DMA
N *        @arg Bit15 Master Transmit Data transfer use DMA
N ******************************************************************************
N */
Ntypedef enum{
N    MID_I2C_MODE_NONE                       = 0x0000U,      /*!< No I2C communication on going                         */
N    MID_I2C_MODE_NACKNext                   = 0x0080U,      /*!< I2C NACK Bypasss                                      */
N    MID_I2C_MODE_MASK                       = 0x0300U,      /*!< I2C Transfer End Type, Stop or Start                  */
N    MID_I2C_MODE_STOPSTART                  = 0x0300U,      /*!< I2C Transfer End Type, Stop or Start                  */
N    MID_I2C_MODE_RREPEATSTART               = 0x0100U,      /*!< I2C Transfer End Type, Repeat Start                   */
N    MID_I2C_MODE_STOP                       = 0x0200U,      /*!< I2C Transfer End Type, Stop                           */
N    MID_I2C_MODE_MASTER                     = 0x0400U,      /*!< I2C communication is in Master Mode                   */
N    MID_I2C_MODE_MASTER_NONE                = 0x0000U,      /*!<                                                       */
N    MID_I2C_MODE_MASTER_RREPEATSTART        = 0x0500U,      /*!<                                                       */
N    MID_I2C_MODE_MASTER_STOP                = 0x0600U,      /*!<                                                       */
N    MID_I2C_MODE_SLAVE                      = 0x0800U,      /*!< I2C communication is in Slave Mode                    */
N    MID_I2C_MODE_MEM                        = 0x0C00U,      /*!< I2C communication is in Memory Mode                   */
N    MID_I2C_MODE_DMA_MTX                    = 0x8000U,      /*!< I2C Master Transmit communication use DMA             */
N    MID_I2C_MODE_DMA_MRX                    = 0x4000U,      /*!< I2C Master Receive communication use DMA              */
N    MID_I2C_MODE_DMA_SRX                    = 0x2000U,      /*!< I2C Slave Transmit communication use DMA              */
N    MID_I2C_MODE_DMA_STX                    = 0x1000U,      /*!< I2C Slave Receive communication use DMA               */
N    MID_I2C_MODE_MASTER_TRANSMIT_DMA_STOP   = 0x8600U,      /*!<                                                       */
N    MID_I2C_MODE_MASTER_TRANSMIT_DMA_RREPEATSTART = 0x8500U,      /*!<                                                       */
N    MID_I2C_MODE_MASTER_RECEIVE_DMA_STOP    = 0x4600U,      /*!<                                                       */
N    MID_I2C_MODE_MASTER_RECEIVE_DMA_RREPEATSTART = 0x4500U,      /*!<                                                       */
N    MID_I2C_MODE_SLAVE_TRANSMIT_DMA         = 0x2800U,      /*!<                                                       */
N    MID_I2C_MODE_SLAVE_RECEIVE_DMA          = 0x1800U,      /*!<                                                       */
N}MID_I2C_ModeTypeDef;
N
N/**
N ******************************************************************************
N * @enum MID_I2C_StateTypeDef
N * @brief  MID State structure definition
N *        @arg Bit0 Intrinsic process state
N *        @arg Bit1 Tx state, 0:Ready (no Tx operation ongoing), 1:Busy (Tx operation ongoing).
N *        @arg Bit2 Rx state, 0:Ready (no Tx operation ongoing), 1:Busy (Rx operation ongoing)
N *        @arg Bit3 Address Listen Mode is ongoing
N *        @arg Bit4 Error information
N *        @arg Bit5 Reserved
N *        @arg Bit6 Abort user request ongoing
N *        @arg Bit7 Peripheral initialization status
N ******************************************************************************
N */
Ntypedef enum{
N    MID_I2C_STATE_RESET                 = 0x00,         /*!< Peripheral is not yet Initialized                     */
N    MID_I2C_STATE_BUSY                  = 0x01,         /*!< An internal process is ongoing                        */
N    MID_I2C_STATE_BUSY_TX               = 0x83,         /*!< Data Transmission process is ongoing                  */
N    MID_I2C_STATE_BUSY_RX               = 0x85,         /*!< Data Reception process is ongoing                     */
N    MID_I2C_STATE_TX                    = 0x02,         /*!< Address Data Transmission process is ongoing          */
N    MID_I2C_STATE_RX                    = 0x04,         /*!< Address Data Reception process is ongoing             */
N    MID_I2C_STATE_ABORT                 = 0x08,         /*!< Abort user request ongoing                            */
N    MID_I2C_STATE_ERROR                 = 0x10,         /*!< Error                                                 */
N    MID_I2C_STATE_ERROR_TX              = 0x92,         /*!< Address Data Transmission process is ongoing          */
N    MID_I2C_STATE_ERROR_RX              = 0x94,         /*!< Address Data Transmission process is ongoing          */
N    MID_I2C_STATE_LISTEN                = 0x20,         /*!< Address Listen Mode is ongoing                        */
N//    MID_I2C_STATE_LISTEN_TX             = 0xA2,         /*!< Address Listen Mode and Data Transmission process is ongoing */
N//    MID_I2C_STATE_LISTEN_RX             = 0xA4,         /*!< Address Listen Mode and Data Reception process is ongoing */
N    MID_I2C_STATE_READY                 = 0x80,         /*!< Peripheral Initialized and ready for use              */
N//    MID_I2C_STATE_TIMEOUT               = 0x40,         /*!< Timeout state                                         */
N}MID_I2C_StateTypeDef;
N
N/**
N ******************************************************************************
N * @enum MID_I2C_ErrorTypeDef
N * @brief  I2C Error Code definition
N *        @arg Bit0 Bus error
N *        @arg Bit1 ArbitrationLost error
N *        @arg Bit2 ACKF NACK error
N *        @arg Bit3 Over error
N *        @arg Bit4 DMA transfer error
N *        @arg Bit5 Timeout error
N *        @arg Bit6 DMA Parameter Error
N *        @arg Bit7 Invalid Callback error
N *        @arg Bit8 Invalid Parameters error
N ******************************************************************************
N */
Ntypedef enum{
N    MID_I2C_ERROR_NONE                = 0x0000U,        /*!< No error                                              */
N    MID_I2C_ERROR_BERR                = 0x0001U,        /*!< BERR error                                            */
N    MID_I2C_ERROR_ARLO                = 0x0002U,        /*!< ARLO error                                            */
N    MID_I2C_ERROR_NACKF               = 0x0004U,        /*!< ACKF NACK error                                       */
N    MID_I2C_ERROR_UNDER               = 0x0004U,        /*!< Under Issue                                       */
N    MID_I2C_ERROR_OVR                 = 0x0008U,        /*!< OVR error                                             */
N    MID_I2C_ERROR_DMACH               = 0x0010U,        /*!< DMA transfer error                                    */
N    MID_I2C_ERROR_TIMEOUT             = 0x0020U,        /*!< Timeout error                                         */
N    MID_I2C_ERROR_DMA_PARAM           = 0x0040U,        /*!< DMA Paramter error                                    */
N  #if (USE_MID_I2C_REGISTER_CALLBACKS == 1)
S    MID_I2C_ERROR_INVALID_CALLBACK    = 0x0080U,        /*!< Invalid Callback error */
N  #endif /* USE_MID_I2C_REGISTER_CALLBACKS */
N    MID_I2C_ERROR_INVALID_PARAM       = 0x0100U,        /*!< Invalid Parameters error */
N}MID_I2C_ErrorTypeDef;
N
N/**
N ******************************************************************************
N * @struct I2C_HandleTypeDef
N * @brief  I2C handle Structure definition
N ******************************************************************************
N */
Ntypedef struct __I2C_HandleTypeDef{
N
N    I2C_Struct                *Instance;            /*!< I2C registers base address                            */
N
N    I2C_InitTypeDef            Init;                /*!< I2C communication parameters                          */
N
N    __IO uint8_t              *pBuffPtr;            /*!< Pointer to I2C transfer buffer                        */
X    volatile uint8_t              *pBuffPtr;             
N
N    __IO uint16_t              DevAddress;          /*!< I2C Target Device Address                             */
X    volatile uint16_t              DevAddress;           
N
N    __IO uint16_t              XferSize;            /*!< I2C transfer size                                     */
X    volatile uint16_t              XferSize;             
N
N    __IO uint16_t              XferCount;           /*!< I2C transfer counter                                  */
X    volatile uint16_t              XferCount;            
N
N    MID_StatusTypeDef(*XferISR)(struct __I2C_HandleTypeDef *mI2C, uint32_t ITFlags, uint32_t ITSources);
N                                                    /*!< I2C transfer IRQ handler function pointer             */
N
N    DMA_HandleTypeDef         *hdmatx;              /*!< I2C Tx DMA handle parameters                          */
N
N    DMA_HandleTypeDef         *hdmarx;              /*!< I2C Rx DMA handle parameters                          */
N
N    MID_LockTypeDef            Lock;                /*!< I2C locking object                                    */
N
N    MID_I2C_ModeTypeDef        Mode;                /*!< I2C communication mode @ref MID_I2C_ModeTypeDef       */
N
N    MID_I2C_StateTypeDef       State;               /*!< I2C communication state @ref MID_I2C_StateTypeDef     */
N
N    MID_I2C_ErrorTypeDef       ErrorCode;           /*!< I2C Error Code @ref MID_I2C_ErrorTypeDef              */
N}I2C_HandleTypeDef; /*!< __I2C_HandleTypeDef */
N
N/* Exported constants --------------------------------------------------------*/
N
N/**
N ******************************************************************************
N * @name    I2C_DUAL_ADDRESSING_MODE I2C Dual Addressing Mode
N * @{
N ******************************************************************************
N */
N#define I2C_DUALADDRESS_DISABLE         (0x00000000U)                           /*!< Dual Addressing Disable    */
N#define I2C_DUALADDRESS_ENABLE          I2C_CR0_SADR2_EN_mask_w                 /*!< Dual Addressing Enable     */
N/** @} */
N
N#if defined(MG32_2ND) || defined(MG32_3RD)
X#if 0L || 0L
S/**
S * @name    I2C_OWN_ADDRESS1_MASKS 
S *              I2C Own Address1 Masks
S * @{
S */
S#define I2C_OA1_NOMASK                  ((uint8_t)0xFEU)                        /*!<                            */
S#define I2C_OA1_MASK01                  ((uint8_t)0xFCU)                        /*!<                            */
S#define I2C_OA1_MASK02                  ((uint8_t)0xF8U)                        /*!<                            */
S#define I2C_OA1_MASK03                  ((uint8_t)0xF0U)                        /*!<                            */
S#define I2C_OA1_MASK04                  ((uint8_t)0xE0U)                        /*!<                            */
S#define I2C_OA1_MASK05                  ((uint8_t)0xC0U)                        /*!<                            */
S#define I2C_OA1_MASK06                  ((uint8_t)0x80U)                        /*!<                            */
S#define I2C_OA1_MASK07                  ((uint8_t)0x00U)                        /*!<                            */
S/** @} */
N#endif
N
N/**
N ******************************************************************************
N * @name    I2C_GENERAL_CALL_ADDRESSING_MODE I2C General Call Addressing Mode
N * @{
N ******************************************************************************
N */
N#define I2C_GENERALCALL_DISABLE         (0x00000000U)                           /*!< General Call Disable       */
N#define I2C_GENERALCALL_ENABLE          I2C_CR0_GC_EN_mask_w                    /*!< General Call Enable        */
N/** @} */
N
N/**
N * @name    I2C_MEMORY_ADDRESS_SIZE I2C Memory Address Size
N * @{
N */
N#define I2C_MEMADD_SIZE_8BIT            (0x00000001U)                           /*!< Memory Address 8Bit        */
N#define I2C_MEMADD_SIZE_16BIT           (0x00000002U)                           /*!< Memory Address 16Bit       */
N/** @} */
N
N/**
N  * @name   I2C_XFERDIRECTION I2C Transfer Direction Master Point of View
N  * @{
N  */
N#define I2C_DIRECTION_TRANSMIT          (0x00000000U)                           /*!< Transmiter                 */
N#define I2C_DIRECTION_RECEIVE           (0x00000001U)                           /*!< Receive                    */
N/** @} */
N
N/**
N * @name    I2C_Interrupt_configuration_definition I2C Interrupt configuration definition
N * @brief       I2C Interrupt definition
N *              Elements values convention: 0xXXXXXXXX
N *                  - XXXXXXXX  : Interrupt control mask
N * @{
N */
N#define I2C_IT_IEA                      I2C_INT_IEA_mask_w                      /*!< I2C All Interupt           */
N#define I2C_IT_EVENT                    I2C_INT_EVENT_IE_mask_w                 /*!< Event Interrupt            */
N#define I2C_IT_ERR                      I2C_INT_ERR_IE_mask_w                   /*!< Error Interrupt            */
N#define I2C_IT_TMOUT                    I2C_INT_TMOUT_IE_mask_w                 /*!< TimeOut Counter Interrupt  */
N#if defined(MG32_2ND) || defined(MG32_3RD)
X#if 0L || 0L
S  #define I2C_IT_STPSTR                 I2C_INT_STPSTR_IE_mask_w                /*!< Bus Start or Stop Interrupt */
N#endif
N/** @} */
N
N/**
N * @name    I2C_Flag_definition I2C Flag definition
N * @{
N */
N#define I2C_FLAG_BUSY                   I2C_STA_BUSYF_mask_w                    /*!< Busy                       */
N
N#define I2C_FLAG_EVENT                  I2C_STA_EVENTF_mask_w                   /*!< Event                      */
N
N#define I2C_FLAG_BUF                    I2C_STA_BUFF_mask_w                     /*!< BUFF                       */
N#define I2C_FLAG_RX                     I2C_STA_RXF_mask_w                      /*!< Receiv buffer full.        */
N#define I2C_FLAG_TX                     I2C_STA_TXF_mask_w                      /*!< Transmit buffer empty.     */
N#define I2C_FLAG_RSTR                   I2C_STA_RSTRF_mask_w                    /*!< Bus Repeat Start.          */
N#define I2C_FLAG_STOP                   I2C_STA_STOPF_mask_w                    /*!< Bus Stop.                  */
N#define I2C_FLAG_STPSTR                 I2C_STA_STPSTRF_mask_w                  /*!< Bus Start or Stop          */
N#define I2C_FLAG_SADR                   I2C_STA_SADRF_mask_w                    /*!< Master address match / unmatch, Slave address match. */
N
N#define I2C_FLAG_ERR                    I2C_STA_ERRF_mask_w                     /*!< AError                     */
N#define I2C_FLAG_BERR                   I2C_STA_BERRF_mask_w                    /*!< Bus Error.                 */
N#define I2C_FLAG_ALOS                   I2C_STA_ALOSF_mask_w                    /*!< Arbitration Lost Error     */
N#define I2C_FLAG_NACK                   I2C_STA_NACKF_mask_w                    /*!< Not Acknowledge Error      */
N#define I2C_FLAG_TOVR                   I2C_STA_TOVRF_mask_w                    /*!< with Stretching disable and Slave Transmit Buffer under. */
N#define I2C_FLAG_ROVR                   I2C_STA_ROVRF_mask_w                    /*!< with Stretching disable and Slave Receive Buffer Over. */
N
N#define I2C_FLAG_TMOUT                  I2C_STA_TMOUTF_mask_w                   /*!< Timeout Count              */
N
N
N#define I2C_FLAG_RW                     I2C_STA_RWF_mask_w                      /*!< 0: MT / SR / SRGC          */
N                                                                                /*   1: MR / ST                 */
N#define I2C_FLAG_MST                    I2C_STA_MSTF_mask_w                     /*!< Master Mode                */
N#define I2C_FLAG_SLA                    I2C_STA_SLAF_mask_w                     /*!< Slave Mode                 */
N#define I2C_FLAG_TXR                    I2C_STA_TXRF_mask_w                     /*!< Showdown Buffer            */
N#define I2C_FLAG_CNT                    I2C_STA_CNTF_mask_w                     /*!< Buffer Counter             */
N#define I2C_FLAG_TSC                    I2C_STA_TSCF_mask_w                     /*!< Shift Buffer               */
N
N#if defined(MG32_2ND) || defined(MG32_3RD)
X#if 0L || 0L
S  #define I2C_FLAG_WUP                    I2C_STA_WUPF_mask_w                   /*!< Stop Wake-Up               */
N#endif
N/** @} */
N
N/* Exported macros -----------------------------------------------------------*/
N/**
N ******************************************************************************
N * @brief Reset I2C handle state.
N * @param[in]  "__HANDLE__" specifies the I2C Handle.
N * @return None
N ******************************************************************************
N */
N#define __DRV_I2C_RESET_HANDLE_STATE(__HANDLE__)                ((__HANDLE__)->State = MID_I2C_STATE_RESET) /*!< State Reset                */
N
N/**
N ******************************************************************************
N * @brief  Enable the specified I2C interrupt.
N * @param  "__HANDLE__" specifies the I2C Handle.
N * @param  "__INTERRUPT__" specifies the interrupt source to enable.
N *        This parameter can be one of the following values:
N *           @arg I2C_IT_IEA    All I2C interrupt enable
N *           @arg I2C_IT_EVENT  Transfer complete interrupt enable
N *           @arg I2C_IT_ERR    Errors interrupt enable
N *           @arg I2C_IT_TMOUT  TimeOut interrupt eanble
N *           @arg I2C_IT_WUP    MCU STOP Mode detection interrupt enable
N *           @arg I2C_IT_STPSTR START / STOP detection interrupt enable
N * @return None
N ******************************************************************************
N */
N#define __DRV_I2C_ENABLE_IT(__HANDLE__, __INTERRUPT__)          ((__HANDLE__)->Instance->INT.W |= (__INTERRUPT__))  /*!<                            */
N
N/**
N ******************************************************************************
N * @brief  Disable the specified I2C interrupt.
N * @param  "__HANDLE__" specifies the I2C Handle.
N * @param  "__INTERRUPT__" specifies the interrupt source to disable.
N *        This parameter can be one of the following values:
N *            @arg I2C_IT_IEA    All I2C interrupt enable
N *            @arg I2C_IT_EVENT  Transfer complete interrupt enable
N *            @arg I2C_IT_ERR    Errors interrupt enable
N *            @arg I2C_IT_TMOUT  TimeOut interrupt eanble
N *            @arg I2C_IT_WUP    MCU STOP Mode detection interrupt enable
N *            @arg I2C_IT_STPSTR START / STOP detection interrupt enable
N * @return None
N ******************************************************************************
N */
N#define __DRV_I2C_DISABLE_IT(__HANDLE__, __INTERRUPT__)         ((__HANDLE__)->Instance->INT.W &= (~(__INTERRUPT__)))   /*!<                            */
N
N/**
N ******************************************************************************
N * @brief  Check whether the specified I2C interrupt source is enabled or not.
N * @param  "__HANDLE__" specifies the I2C Handle.
N * @param  "__INTERRUPT__" specifies the I2C interrupt source to check.
N *          This parameter can be one of the following values:
N *            @arg I2C_IT_IEA    All I2C interrupt enable
N *            @arg I2C_IT_EVENT  Transfer complete interrupt enable
N *            @arg I2C_IT_ERR    Errors interrupt enable
N *            @arg I2C_IT_TMOUT  TimeOut interrupt eanble
N *            @arg I2C_IT_WUP    MCU STOP Mode detection interrupt enable
N *            @arg I2C_IT_STPSTR START / STOP detection interrupt enable
N * @return The new state of __INTERRUPT__ (SET or RESET).
N ******************************************************************************
N */
N#define __DRV_I2C_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)      ((((__HANDLE__)->Instance->INT.W & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET) /*!<                            */
N
N/**
N ******************************************************************************
N * @brief  Check whether the specified I2C flag is set or not.
N * @param  "__HANDLE__" specifies the I2C Handle.
N * @param  "__FLAG__" specifies the flag to check.
N *        This parameter can be one of the following values:
N *            @arg I2C_FLAG_EVENT   Byte Mode status event interrupt Flag.
N *            @arg I2C_FLAG_BUF     Buffer mode event flag.
N *            @arg I2C_FLAG_RX      Receive data register not empty
N *            @arg I2C_FLAG_TX      Transmit data register empty 
N *            @arg I2C_FLAG_RSTR    Output Repeat start asserted flag
N *            @arg I2C_FLAG_STOP    Output Stop detection flag
N *            @arg I2C_FLAG_SADR    Address matched / unmatched
N *            @arg I2C_FLAG_ERR     Error interrupt
N *            @arg I2C_FLAG_BERR    Bus error flag for invalid Stop/Start state
N *            @arg I2C_FLAG_ALOS    Bus arbitration lost
N *            @arg I2C_FLAG_NACK    Not Acknowledge received error
N *            @arg I2C_FLAG_TOVR    Transmit underrun
N *            @arg I2C_FLAG_ROVR    Receive overrun
N *            @arg I2C_FLAG_TMOUT   Time-out detect
N *            @arg I2C_FLAG_BUSY    I2C HW Busy
N *            @arg I2C_FLAG_RW      Read or write transfer direction status
N *            @arg I2C_FLAG_MST     Master mode detection status
N *            @arg I2C_FLAG_SLA     Slave address matched condition and clear by Start/Stop conditions.
N *            @arg I2C_FLAG_TXR     Transmit data register empty.
N *            @arg I2C_FLAG_CNT     Count I2C0_BUF_CNT empty status.
N *            @arg I2C_FLAG_TSC     Shadow buffer transfer complete flag.
N *            @arg I2C_FLAG_WUP     Wakeup from STOP mode flag.
N *            @arg I2C_FLAG_STPSTR  Stop or Start detection flag.
N * @return The new state of __FLAG__ (SET or RESET).
N ******************************************************************************
N */
N#define __DRV_I2C_GET_FLAG(__HANDLE__, __FLAG__) (((((__HANDLE__)->Instance->STA.W) & (__FLAG__)) == (__FLAG__)) ? SET : CLR)   /*!<                            */
N
N/**
N ******************************************************************************
N * @brief  Clear the I2C pending flags which are cleared by writing 1 in a specific bit.
N * @param  "__HANDLE__" specifies the I2C Handle.
N * @param  "__FLAG__" specifies the flag to clear.
N *          This parameter can be any combination of the following values:
N *            @arg I2C_FLAG_EVENT   Byte Mode status event interrupt Flag.
N *            @arg I2C_FLAG_BUF     Buffer mode event flag.
N *            @arg I2C_FLAG_RX      Receive data register not empty
N *            @arg I2C_FLAG_TX      Transmit data register empty 
N *            @arg I2C_FLAG_RSTR    Output Repeat start asserted flag
N *            @arg I2C_FLAG_STOP    Output Stop detection flag
N *            @arg I2C_FLAG_SADR    Address matched / unmatched
N *            @arg I2C_FLAG_ERR     Error interrupt
N *            @arg I2C_FLAG_BERR    Bus error flag for invalid Stop/Start state
N *            @arg I2C_FLAG_ALOS    Bus arbitration lost
N *            @arg I2C_FLAG_NACK    Not Acknowledge received error
N *            @arg I2C_FLAG_TOVR    Transmit underrun
N *            @arg I2C_FLAG_ROVR    Receive overrun
N *            @arg I2C_FLAG_TMOUT   Time-out detect
N *            @arg I2C_FLAG_BUSY    I2C HW Busy
N *            @arg I2C_FLAG_RW      Read or write transfer direction status
N *            @arg I2C_FLAG_MST     Master mode detection status
N *            @arg I2C_FLAG_SLA     Slave address matched condition and clear by Start/Stop conditions.
N *            @arg I2C_FLAG_TXR     Transmit data register empty.
N *            @arg I2C_FLAG_CNT     Count I2C0_BUF_CNT empty status.
N *            @arg I2C_FLAG_TSC     Shadow buffer transfer complete flag.
N *            @arg I2C_FLAG_WUP     Wakeup from STOP mode flag.
N *            @arg I2C_FLAG_STPSTR  Stop or Start detection flag.
N * @return None
N ******************************************************************************
N */
N#define __DRV_I2C_CLEAR_FLAG(__HANDLE__, __FLAG__) ((__HANDLE__)->Instance->STA.W = (__FLAG__))
N
N/**
N ******************************************************************************
N * @brief  Enable the specified I2C peripheral.
N * @param  "__HANDLE__" specifies the I2C Handle.
N * @return None
N ******************************************************************************
N */
N#define __DRV_I2C_ENABLE(__HANDLE__)                            ((__HANDLE__)->Instance->CR0.W |= I2C_CR0_EN_mask_w)
N
N/**
N ******************************************************************************
N * @brief  Disable the specified I2C peripheral.
N * @param  "__HANDLE__" specifies the I2C Handle.
N * @return None
N ******************************************************************************
N */
N#define __DRV_I2C_DISABLE(__HANDLE__)                           ((__HANDLE__)->Instance->CR0.W &= (~I2C_CR0_EN_mask_w))
N
N/**
N ******************************************************************************
N * @brief  Generate a Non-Acknowledge I2C peripheral in Master and Slave mode.
N * @param  "__HANDLE__": specifies the I2C Handle.
N * @return None
N * @{
N ******************************************************************************
N */
N#define __DRV_I2C_GENERATE_NACK(__HANDLE__)                     ((__HANDLE__)->Instance->CR2.B[0] = (((__HANDLE__)->Instance->CR2.B[0] & ~I2C_CR2_AA_mask_b0) | I2C_CR2_AA_LCK_mask_b0))    /*!< Non-Acknowledge            */
N#define __DRV_I2C_AA_0(__HANDLE__)                              ((__HANDLE__)->Instance->CR2.B[0] = I2C_CR2_AA_LCK_mask_b0)                                                                 /*!< Non-Acknowledge            */
N#define __DRV_I2C_AA_1(__HANDLE__)                              ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_AA_mask_b0 | I2C_CR2_AA_LCK_mask_b0))                                          /*!< Acknowledge                */
N#define __DRV_I2C_PAA_0(__HANDLE__)                             ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_AA_LCK_mask_b0))                                      /*!< Set Pre Non-Acknowledge    */
N#define __DRV_I2C_PAA_1(__HANDLE__)                             ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_AA_mask_b0 | I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_AA_LCK_mask_b0))                 /*!< Set Pre Acknowledge        */
N/** @} */
N
N/**
N ******************************************************************************
N * @brief  Generate a Bus Start I2C peripheral in Master mode.
N * @param  "__HANDLE__": specifies the I2C Handle.
N * @return None
N * @{
N ******************************************************************************
N */
N#define __DRV_I2C_STA_0(__HANDLE__)                             ((__HANDLE__)->Instance->CR2.B[0] = I2C_CR2_STA_LCK_mask_b0)                                                               /*!< Clear Bus START Bit        */
N#define __DRV_I2C_STA_1(__HANDLE__)                             ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_STA_mask_b0 | I2C_CR2_STA_LCK_mask_b0))                                       /*!< Set Bus START Bit          */
N#define __DRV_I2C_PSTA_0(__HANDLE__)                            ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_STA_LCK_mask_b0))                                    /*!< Clear Bus START Pre Bit    */
N#define __DRV_I2C_PSTA_1(__HANDLE__)                            ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_STA_mask_b0 | I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_STA_LCK_mask_b0))              /*!< Set Bus START Pre Bit      */
N/** @} */
N
N/**
N ******************************************************************************
N * @brief  Generate a Bus Stop I2C peripheral in Master mode.
N * @param  "__HANDLE__": specifies the I2C Handle.
N * @return None
N * @{
N ******************************************************************************
N */
N#define __DRV_I2C_GENERATE_STOP(__HANDLE__)                     ((__HANDLE__)->Instance->CR2.B[0] = (((__HANDLE__)->Instance->CR2.B[0] & ~I2C_CR2_STO_mask_b0) | I2C_CR2_STO_LCK_mask_b0)) /*!< Set Bus STOP Bit          */
N#define __DRV_I2C_STO_0(__HANDLE__)                             ((__HANDLE__)->Instance->CR2.B[0] = I2C_CR2_STO_LCK_mask_b0)                                                               /*!< Clear Bus STOP Bit        */
N#define __DRV_I2C_STO_1(__HANDLE__)                             ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_STO_mask_b0 | I2C_CR2_STO_LCK_mask_b0))                                       /*!< Set Bus STOP Bit          */
N#define __DRV_I2C_PSTO_0(__HANDLE__)                            ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_STO_LCK_mask_b0))                                    /*!< Clear Bus STOP Pre Bit    */
N#define __DRV_I2C_PSTO_1(__HANDLE__)                            ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_STO_mask_b0 | I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_STO_LCK_mask_b0))              /*!< Set Bus STOP Pre Bit      */
N/** @} */
N
N/**
N ******************************************************************************
N * @brief  Generate a Bus Start / STOP  / NACK, I2C peripheral in Slave or Master mode.
N * @param  "__HANDLE__": specifies the I2C Handle.
N * @return None
N * @{
N ******************************************************************************
N */
N#define __DRV_I2C_PSTA_PSTO_PAA_111(__HANDLE__)                 ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_STA_mask_b0 | I2C_CR2_STO_mask_b0 | I2C_CR2_AA_mask_b0))     /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge pre Bit */
N#define __DRV_I2C_PSTA_PSTO_PAA_110(__HANDLE__)                 ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_STA_mask_b0 | I2C_CR2_STO_mask_b0))                          /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge pre Bit */
N#define __DRV_I2C_PSTA_PSTO_PAA_101(__HANDLE__)                 ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_STA_mask_b0 | I2C_CR2_AA_mask_b0))                           /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge pre Bit */
N#define __DRV_I2C_PSTA_PSTO_PAA_100(__HANDLE__)                 ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_STA_mask_b0))                                                /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge pre Bit */
N#define __DRV_I2C_PSTA_PSTO_PAA_011(__HANDLE__)                 ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_STO_mask_b0 | I2C_CR2_AA_mask_b0))                           /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge pre Bit */
N#define __DRV_I2C_PSTA_PSTO_PAA_010(__HANDLE__)                 ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_STO_mask_b0))                                                /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge pre Bit */
N#define __DRV_I2C_PSTA_PSTO_PAA_001(__HANDLE__)                 ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_AA_mask_b0))                                                 /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge pre Bit */
N#define __DRV_I2C_PSTA_PSTO_PAA_000(__HANDLE__)                 ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_CMD_TC_mask_b0 | I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0))                                                                      /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge pre Bit */
N
N#define __DRV_I2C_STA_STO_AA_111(__HANDLE__)                    ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_STA_mask_b0 | I2C_CR2_STO_mask_b0 | I2C_CR2_AA_mask_b0))                              /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge Bit */
N#define __DRV_I2C_STA_STO_AA_110(__HANDLE__)                    ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_STA_mask_b0 | I2C_CR2_STO_mask_b0))                                                   /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge Bit */
N#define __DRV_I2C_STA_STO_AA_101(__HANDLE__)                    ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_STA_mask_b0 | I2C_CR2_AA_mask_b0))                                                    /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge Bit */
N#define __DRV_I2C_STA_STO_AA_100(__HANDLE__)                    ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_STA_mask_b0))                                                                         /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge Bit */
N#define __DRV_I2C_STA_STO_AA_011(__HANDLE__)                    ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_STO_mask_b0 | I2C_CR2_AA_mask_b0))                                                    /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge Bit */
N#define __DRV_I2C_STA_STO_AA_010(__HANDLE__)                    ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_STO_mask_b0))                                                                         /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge Bit */
N#define __DRV_I2C_STA_STO_AA_001(__HANDLE__)                    ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0 | I2C_CR2_AA_mask_b0))                                                                          /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge Bit */
N#define __DRV_I2C_STA_STO_AA_000(__HANDLE__)                    ((__HANDLE__)->Instance->CR2.B[0] = (I2C_CR2_STA_LCK_mask_b0 | I2C_CR2_STO_LCK_mask_b0 | I2C_CR2_AA_LCK_mask_b0))                                                                                               /*!< Synchronize Set and Clear Bus-Start / Bus-Stop / Acknowledge Bit */
N/** @} */
N
N/**
N ******************************************************************************
N * @brief  Other Control, I2C peripheral in Slave or Master mode.
N * @param  "__HANDLE__": specifies the I2C Handle.
N * @return None
N * @{
N ******************************************************************************
N */
N#define __DRV_I2C_WAIT_BusSTOP(__HANDLE__)                      while(((__HANDLE__)->Instance->CR2.B[0] & I2C_CR2_STO_mask_b0) != 0)        /*!< Master Mode Wait Output Bus-Stop */
N#define __DRV_I2C_WAIT_EVENT_FLAG(__HANDLE__)                   while(((__HANDLE__)->Instance->STA2.B[1] & I2C_STA2_EVENTF2_mask_b1) == 0)  /*!< Polling Event Flag Set */
N#define __DRV_I2C_CLEAR_EVENT_FLAG(__HANDLE__)                  ((__HANDLE__)->Instance->STA2.B[1] = I2C_STA2_EVENTF2_mask_b1)              /*!< Clear Event Flag Set */
N#define __DRV_I2C_GET_EVENTCODE(__HANDLE__)                     ((__HANDLE__)->Instance->STA2.B[0] & 0xF8)                                  /*!< Get Event State Code */
N
N#define __DRV_I2C_WRITE_SBUF(__HANDLE__, __DATA__)              ((__HANDLE__)->Instance->SBUF.B[0] = (__DATA__))                            /*!< Write Shift Buffer */
N#define __DRV_I2C_READ_SBUF(__HANDLE__)                         ((__HANDLE__)->Instance->SBUF.B[0])                                         /*!< Read Shift Buffer */
N
N#define I2C_GET_ADDR_MATCH(__HANDLE__)            (((__HANDLE__)->Instance->SAC & 0xF8) >> 16U)                                             /*!< Get Match Own Address */
N#define I2C_GET_OWN_ADDRESS1(__HANDLE__)          ((__HANDLE__)->Instance->OAR1 & I2C_OAR1_OA1)                                             /*!< Get Own Address1 */
N#define I2C_GET_OWN_ADDRESS2(__HANDLE__)          ((__HANDLE__)->Instance->OAR2 & I2C_OAR2_OA2)                                             /*!< Get Own Address2 */
N
N#define I2C_MEM_ADD_MSB(__ADDRESS__)              ((uint8_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)(0xFF00U))) >> 8U)))          /*!< Memory Address MSB First */
N#define I2C_MEM_ADD_LSB(__ADDRESS__)              ((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)(0x00FFU))))                              /*!< Memory Address LSB First */
N/** @} */
N
N/* Include I2C HAL Extended module */
N#include "MG32x02z_I2C_MID_ex.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_I2C_MID_ex.h" 1
N/**
N ******************************************************************************
N * @file        MG32x02z_I2C_MID_ex.h
N * @brief       Header file of I2C MID Extended module.
N * @par         Project
N *              MG32x02z
N * @version     V1.02
N * @date        2021/04/21
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2020 megawin Technology Co., Ltd.
N *              All rights reserved.
N ******************************************************************************
N * @par 		Disclaimer 
N *		The Demo software is provided "AS IS"  without any warranty, either 
N *		expressed or implied, including, but not limited to, the implied warranties 
N *		of merchantability and fitness for a particular purpose.  The author will 
N *		not be liable for any special, incidental, consequential or indirect 
N *		damages due to loss of data or any other reason. 
N *		These statements agree with the world wide and local dictated laws about 
N *		authorship and violence against these laws. 
N ******************************************************************************
N ******************************************************************************
N */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef _MG32x02z_I2C_MID_EX_H
S#define _MG32x02z_I2C_MID_EX_H
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S/* Includes ------------------------------------------------------------------*/
S#include "MG32x02z_COMMON_MID.h"
S#include "MG32x02z_I2C_MID.h"
S
S/* Exported types ------------------------------------------------------------*/
S/* Exported constants --------------------------------------------------------*/
S
S/**
S @ @name I2CEx_PreDriveTime I2C Extended Pre-Drive Time
S * @{
S */
S#define I2C_PDT_MASK                    I2C_CR0_PDRV_SEL_mask_w     /*!< Pre-Drive Time Mask            */
S#define I2C_PDT_NONE                    I2C_CR0_PDRV_SEL_0t_w       /*!< Zero Pre-Drive Time            */
S#define I2C_PDT_0T                      I2C_CR0_PDRV_SEL_0t_w       /*!< 0 I2C_PR CLK Pre-Drive Time    */
S#define I2C_PDT_1T                      I2C_CR0_PDRV_SEL_1t_w       /*!< 1 I2C_PR CLK Pre-Drive Time    */
S#define I2C_PDT_2T                      I2C_CR0_PDRV_SEL_2t_w       /*!< 2 I2C_PR CLK Pre-Drive Time    */
S#define I2C_PDT_3T                      I2C_CR0_PDRV_SEL_3t_w       /*!< 3 I2C_PR CLK Pre-Drive Time    */
S/**
S  * @}
S  */
S
S/* Exported macro ------------------------------------------------------------*/
S/* Exported functions --------------------------------------------------------*/
S/* Peripheral Control functions  ************************************************/
S
SMID_StatusTypeDef MID_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter);
SMID_StatusTypeDef MID_I2CEx_ConfigPreDriveTime(I2C_HandleTypeDef *hi2c, uint32_t PreDriveTimeSelection);
S
S#if defined(MG32_2ND) || defined(MG32_3RD)
S  MID_StatusTypeDef MID_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c);
S  MID_StatusTypeDef MID_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c);
S#endif
S
S/* Private constants ---------------------------------------------------------*/
S/* Private macros ------------------------------------------------------------*/
S/**
S * @brief  I2CEx Parameter check
S * @{
S */
S#define IS_I2C_DIGITAL_FILTER(FILTER)   ((FILTER) <= 0x0000000FU)
S
S#define IS_I2C_FASTMODEPLUS(__CONFIG__) (((__CONFIG__) == I2C_PDT_MASK)     || \
S                                         ((__CONFIG__) == I2C_PDT_NONE)    || \
S                                         ((__CONFIG__) == I2C_PDT_0T)     || \
S                                         ((__CONFIG__) == I2C_PDT_1T)     || \
S                                         ((__CONFIG__) == I2C_PDT_2T)     || \
S                                         ((__CONFIG__) == I2C_PDT_3T)     || \
S                                         ((__CONFIG__) == I2C_PDT_MASK))    /*!< I2CEx_PreDriveTime I2C Extended Pre-Drive Time */
X#define IS_I2C_FASTMODEPLUS(__CONFIG__) (((__CONFIG__) == I2C_PDT_MASK)     ||                                          ((__CONFIG__) == I2C_PDT_NONE)    ||                                          ((__CONFIG__) == I2C_PDT_0T)     ||                                          ((__CONFIG__) == I2C_PDT_1T)     ||                                          ((__CONFIG__) == I2C_PDT_2T)     ||                                          ((__CONFIG__) == I2C_PDT_3T)     ||                                          ((__CONFIG__) == I2C_PDT_MASK))     
S/**
S * @}
S */
S
S/* Private Functions ---------------------------------------------------------*/
S/* Private functions are defined in MG32x02z_I2C_MID_ex.c file */
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* __MG32x02z_I2C_MID_EX_H */
N
N/************** (C) COPYRIGHT megawin Technology Co., Ltd. *****END OF FILE****/
N
N
L 567 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_I2C_MID.h" 2
N
N/* Exported functions --------------------------------------------------------*/
N/** @name   I2C_Exported_Functions I2C Exported Functions
N * @{
N */
N
N/**
N ******************************************************************************
N * @name    I2C_Exported_Functions_Group1 Initialization and de-initialization functions
N * @{
N ******************************************************************************
N */
N/* Initialization and de-initialization functions******************************/
Nuint32_t MID_I2C_GetInitTiming(I2C_HandleTypeDef *mI2C, uint32_t SCLClock);
NMID_StatusTypeDef MID_I2C_Init(I2C_HandleTypeDef *mI2C);
N// MID_StatusTypeDef MID_I2C_DeInit (I2C_HandleTypeDef *mI2C);
Nvoid MID_I2C_MspInit(I2C_HandleTypeDef *mI2C);
Nvoid MID_I2C_MspDeInit(I2C_HandleTypeDef *mI2C);
N/**
N * @}
N */
N
N/**
N ******************************************************************************
N * @name    I2C_Exported_Functions_Group2 Input and Output operation functions
N * @{
N ******************************************************************************
N */
N/* IO operation functions ****************************************************/
N /******* Blocking mode: Polling */
NMID_StatusTypeDef MID_I2C_IsDeviceReady(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout);
NMID_StatusTypeDef MID_I2C_Master_Transmit(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);
NMID_StatusTypeDef MID_I2C_Master_Transmit_RepeatStart(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);
NMID_StatusTypeDef MID_I2C_Master_Receive(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);
NMID_StatusTypeDef MID_I2C_Slave_Transmit(I2C_HandleTypeDef *mI2C, uint8_t *pData, uint16_t Size, uint32_t Timeout);
NMID_StatusTypeDef MID_I2C_Slave_Receive(I2C_HandleTypeDef *mI2C, uint8_t *pData, uint16_t Size, uint32_t Timeout);
NMID_StatusTypeDef MID_I2C_Mem_Write(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
NMID_StatusTypeDef MID_I2C_Mem_Read(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
N
N /******* Non-Blocking mode: Interrupt */
NMID_StatusTypeDef MID_I2C_Master_Transmit_IT(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
NMID_StatusTypeDef MID_I2C_Master_Transmit_RepeatStart_IT(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
NMID_StatusTypeDef MID_I2C_Master_Receive_IT(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
NMID_StatusTypeDef MID_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *mI2C, uint8_t *pData, uint16_t Size);
NMID_StatusTypeDef MID_I2C_Slave_Receive_IT(I2C_HandleTypeDef *mI2C, uint8_t *pData, uint16_t Size);
NMID_StatusTypeDef MID_I2C_Mem_Write_IT(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
NMID_StatusTypeDef MID_I2C_Mem_Read_IT(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
N
N /******* Non-Blocking mode: DMA */
NMID_StatusTypeDef MID_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
NMID_StatusTypeDef MID_I2C_Master_Transmit_RepeatStart_DMA(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
NMID_StatusTypeDef MID_I2C_Master_Receive_DMA(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
NMID_StatusTypeDef MID_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *mI2C, uint8_t *pData, uint16_t Size);
NMID_StatusTypeDef MID_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *mI2C, uint8_t *pData, uint16_t Size);
NMID_StatusTypeDef MID_I2C_Mem_Write_DMA(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
NMID_StatusTypeDef MID_I2C_Mem_Read_DMA(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
N
N/**
N * @}
N */
N
N/**
N ******************************************************************************
N * @name    I2C_IRQ_Handler_and_Callbacks 
N *              IRQ Handler and Callbacks
N * @{
N ******************************************************************************
N */
N/******* I2C IRQHandler and Callbacks used in non blocking modes (Interrupt and DMA) */
Nvoid MID_I2C_IRQHandler(I2C_HandleTypeDef *mI2C);
Nvoid MID_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *mI2C);
Nvoid MID_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *mI2C);
Nvoid MID_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *mI2C);
Nvoid MID_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *mI2C);
Nvoid MID_I2C_AddrCallback(I2C_HandleTypeDef *mI2C, uint8_t TransferDirection, uint16_t AddrMatchCode);
Nvoid MID_I2C_ErrorCallback(I2C_HandleTypeDef *mI2C);
N/**
N * @}
N */
N
N/**
N ******************************************************************************
N * @name    I2C_Exported_Functions_Group3 Peripheral State, Mode and Error functions
N * @{
N ******************************************************************************
N */
N/* Peripheral State, Mode and Error functions *********************************/
NMID_I2C_ModeTypeDef MID_I2C_GetMode(I2C_HandleTypeDef *mI2C);
NMID_I2C_StateTypeDef MID_I2C_GetState(I2C_HandleTypeDef *mI2C);
NMID_I2C_ErrorTypeDef MID_I2C_GetError(I2C_HandleTypeDef *mI2C);
N
N/**
N * @}
N */
N
N/** 
N * @}
N */
N
N/* Private constants ---------------------------------------------------------*/
N
N/* Private macros ------------------------------------------------------------*/
N
N/**
N * @brief  Parameter check
N * @{
N */
N/****************************** I2C Instances *********************************/
N#if defined(MG32_1ST) || defined(MG32_3RD)
X#if 1L || 0L
N  #define IS_I2C_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C0) || \
N                                         ((INSTANCE) == I2C1))
X  #define IS_I2C_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C0) ||                                          ((INSTANCE) == I2C1))
N#elif defined(MG32_2ND)
S  #define IS_I2C_ALL_INSTANCE(INSTANCE) ((INSTANCE) == I2C0)
N#endif
N
N/****************** I2C Instances : wakeup capability from stop modes *********/
N#if defined(MG32_2ND)
X#if 0L
S  #define IS_I2C_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) ((INSTANCE) == I2C0)
S#elif defined(MG32_3RD)
X#elif 0L
S  #define IS_I2C_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) (((INSTANCE) == I2C0) || \
S                                                     ((INSTANCE) == I2C1))
X  #define IS_I2C_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) (((INSTANCE) == I2C0) ||                                                      ((INSTANCE) == I2C1))
N#endif
N
N#define IS_I2C_ADDRESSING_MODE(MODE)    ((MODE) == I2C_ADDRESSINGMODE_7BIT)
N
N#define IS_I2C_DUAL_ADDRESS(ADDRESS)    (((ADDRESS) == I2C_DUALADDRESS_DISABLE) || \
N                                         ((ADDRESS) == I2C_DUALADDRESS_ENABLE)) /*!< DUAL_ADDRESS Parameter check */
X#define IS_I2C_DUAL_ADDRESS(ADDRESS)    (((ADDRESS) == I2C_DUALADDRESS_DISABLE) ||                                          ((ADDRESS) == I2C_DUALADDRESS_ENABLE))  
N
N#define IS_I2C_OWN_ADDRESS1_MASK(MASK)  (((MASK) == I2C_OA1_NOMASK)  || \
N                                         ((MASK) == I2C_OA1_MASK01) || \
N                                         ((MASK) == I2C_OA1_MASK02) || \
N                                         ((MASK) == I2C_OA1_MASK03) || \
N                                         ((MASK) == I2C_OA1_MASK04) || \
N                                         ((MASK) == I2C_OA1_MASK05) || \
N                                         ((MASK) == I2C_OA1_MASK06) || \
N                                         ((MASK) == I2C_OA1_MASK07))            /*!< OWN_ADDRESS1 Parameter check */
X#define IS_I2C_OWN_ADDRESS1_MASK(MASK)  (((MASK) == I2C_OA1_NOMASK)  ||                                          ((MASK) == I2C_OA1_MASK01) ||                                          ((MASK) == I2C_OA1_MASK02) ||                                          ((MASK) == I2C_OA1_MASK03) ||                                          ((MASK) == I2C_OA1_MASK04) ||                                          ((MASK) == I2C_OA1_MASK05) ||                                          ((MASK) == I2C_OA1_MASK06) ||                                          ((MASK) == I2C_OA1_MASK07))             
N
N#define IS_I2C_GENERAL_CALL(CALL)       (((CALL) == I2C_GENERALCALL_DISABLE) || \
N                                         ((CALL) == I2C_GENERALCALL_ENABLE))    /*!< GENERAL_CALL Parameter check */
X#define IS_I2C_GENERAL_CALL(CALL)       (((CALL) == I2C_GENERALCALL_DISABLE) ||                                          ((CALL) == I2C_GENERALCALL_ENABLE))     
N
N#define IS_I2C_MEMADD_SIZE(SIZE)        (((SIZE) == I2C_MEMADD_SIZE_8BIT) || \
N                                         ((SIZE) == I2C_MEMADD_SIZE_16BIT))     /*!< MEMADD_SIZE Parameter check */
X#define IS_I2C_MEMADD_SIZE(SIZE)        (((SIZE) == I2C_MEMADD_SIZE_8BIT) ||                                          ((SIZE) == I2C_MEMADD_SIZE_16BIT))      
N
N#define IS_TRANSFER_MODE(MODE)           ((MODE) == I2C_SOFTEND_MODE)           /*!< TRANSFER_MODE Parameter check */
N
N#define IS_I2C_OWN_ADDRESS1(ADDRESS1)             ((ADDRESS1) <= 0x000000FFU)   /*!< OWN_ADDRESS1 Parameter check */
N#define IS_I2C_OWN_ADDRESS2(ADDRESS2)             ((ADDRESS2) <= (uint16_t)0x00FFU)  /*!< OWN_ADDRESS2 Parameter check */
N
N/**
N * @brief  Other I2C peripheral.
N */
N#define I2C_TIMING_CLEAR_MASK   ((uint32_t)0xFFFFFFFFU)  /*!< I2C TIMING clear register Mask */
N#define I2C_TIMEOUT_BUSY        ((uint32_t)25U)          /*!< 25 ms */
N#define I2C_TIMEOUT_FLAG        ((uint32_t)25U)          /*!< 25 ms */
N
N/** @} */
N
N/* Private Functions ---------------------------------------------------------*/
N
N/** @name   I2C_Private_Functions
N * @{
N */
N
Nstatic void I2C_ListenP(I2C_HandleTypeDef *mI2C);
Nstatic MID_StatusTypeDef I2C_BytemodeMasterEventHandle(I2C_HandleTypeDef *mI2C);
Nstatic MID_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *mI2C, uint32_t ITFlags, uint32_t ITSources);
Nstatic MID_StatusTypeDef I2C_BytemodeSlaveEventHandle(I2C_HandleTypeDef *mI2C);
Nstatic MID_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *mI2C, uint32_t ITFlags, uint32_t ITSources);
Nstatic MID_StatusTypeDef I2C_WaitOnEVENTFlagUntilTimeout(I2C_HandleTypeDef *mI2C, uint32_t Timeout, uint32_t Tickstart);
Nstatic void I2C_DMACplt(DMA_HandleTypeDef *mDMA);
Nstatic void I2C_DMAError(DMA_HandleTypeDef *mDMA);
N
N/** 
N * @}
N */
N
N/** 
N * @}
N */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __MG32x02z_I2C_MID_H */
N
N/************** (C) COPYRIGHT megawin Technology Co., Ltd. *****END OF FILE****/
L 36 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include\MG32x02z_I2C_MID_ex.h" 2
N
N/* Exported types ------------------------------------------------------------*/
N/* Exported constants --------------------------------------------------------*/
N
N/**
N @ @name I2CEx_PreDriveTime I2C Extended Pre-Drive Time
N * @{
N */
N#define I2C_PDT_MASK                    I2C_CR0_PDRV_SEL_mask_w     /*!< Pre-Drive Time Mask            */
N#define I2C_PDT_NONE                    I2C_CR0_PDRV_SEL_0t_w       /*!< Zero Pre-Drive Time            */
N#define I2C_PDT_0T                      I2C_CR0_PDRV_SEL_0t_w       /*!< 0 I2C_PR CLK Pre-Drive Time    */
N#define I2C_PDT_1T                      I2C_CR0_PDRV_SEL_1t_w       /*!< 1 I2C_PR CLK Pre-Drive Time    */
N#define I2C_PDT_2T                      I2C_CR0_PDRV_SEL_2t_w       /*!< 2 I2C_PR CLK Pre-Drive Time    */
N#define I2C_PDT_3T                      I2C_CR0_PDRV_SEL_3t_w       /*!< 3 I2C_PR CLK Pre-Drive Time    */
N/**
N  * @}
N  */
N
N/* Exported macro ------------------------------------------------------------*/
N/* Exported functions --------------------------------------------------------*/
N/* Peripheral Control functions  ************************************************/
N
NMID_StatusTypeDef MID_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter);
NMID_StatusTypeDef MID_I2CEx_ConfigPreDriveTime(I2C_HandleTypeDef *hi2c, uint32_t PreDriveTimeSelection);
N
N#if defined(MG32_2ND) || defined(MG32_3RD)
X#if 0L || 0L
S  MID_StatusTypeDef MID_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c);
S  MID_StatusTypeDef MID_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c);
N#endif
N
N/* Private constants ---------------------------------------------------------*/
N/* Private macros ------------------------------------------------------------*/
N/**
N * @brief  I2CEx Parameter check
N * @{
N */
N#define IS_I2C_DIGITAL_FILTER(FILTER)   ((FILTER) <= 0x0000000FU)
N
N#define IS_I2C_FASTMODEPLUS(__CONFIG__) (((__CONFIG__) == I2C_PDT_MASK)     || \
N                                         ((__CONFIG__) == I2C_PDT_NONE)    || \
N                                         ((__CONFIG__) == I2C_PDT_0T)     || \
N                                         ((__CONFIG__) == I2C_PDT_1T)     || \
N                                         ((__CONFIG__) == I2C_PDT_2T)     || \
N                                         ((__CONFIG__) == I2C_PDT_3T)     || \
N                                         ((__CONFIG__) == I2C_PDT_MASK))    /*!< I2CEx_PreDriveTime I2C Extended Pre-Drive Time */
X#define IS_I2C_FASTMODEPLUS(__CONFIG__) (((__CONFIG__) == I2C_PDT_MASK)     ||                                          ((__CONFIG__) == I2C_PDT_NONE)    ||                                          ((__CONFIG__) == I2C_PDT_0T)     ||                                          ((__CONFIG__) == I2C_PDT_1T)     ||                                          ((__CONFIG__) == I2C_PDT_2T)     ||                                          ((__CONFIG__) == I2C_PDT_3T)     ||                                          ((__CONFIG__) == I2C_PDT_MASK))     
N/**
N * @}
N */
N
N/* Private Functions ---------------------------------------------------------*/
N/* Private functions are defined in MG32x02z_I2C_MID_ex.c file */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __MG32x02z_I2C_MID_EX_H */
N
N/************** (C) COPYRIGHT megawin Technology Co., Ltd. *****END OF FILE****/
N
N
L 81 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_I2C_MID_ex.c" 2
N
N/** @name MG32x02z_Driver_MID
N * @{
N */
N
N/** @name I2CEx I2CEx
N * @brief I2C Extended MID module driver
N * @{
N */
N
N// #ifdef MID_I2C_MODULE_ENABLED
N
N/* Private typedef -----------------------------------------------------------*/
N/* Private define ------------------------------------------------------------*/
N/* Private macro -------------------------------------------------------------*/
N/* Private variables ---------------------------------------------------------*/
N/* Private function prototypes -----------------------------------------------*/
N/* Private functions ---------------------------------------------------------*/
N
N/** @name I2CEx_Exported_Functions I2C Extended Exported Functions
N * @{
N */
N
N/** @name    I2CEx_Exported_Functions_Group1 Extended features functions
N * @brief    Extended features functions
N *
N@verbatim
N ===============================================================================
N                      ##### Extended features functions #####
N ===============================================================================
N    [..] This section provides functions allowing to:
N      (+) Configure Noise Filters
N      (+) Configure Wake Up Feature
N      (+) Configure Fast Mode Plus
N
N@endverbatim
N * @{
N */
N
N/**
N ******************************************************************************
N * @brief  Configure I2C Digital noise filter.
N * @param  mI2C: Pointer to a I2C_HandleTypeDef structure that contains
N *               the configuration information for the specified I2Cx peripheral.
N * @param  DigitalFilter: Coefficient of digital noise filter between 0x00 and 0x0F.
N * @retval MID status
N ******************************************************************************
N */
NMID_StatusTypeDef MID_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *mI2C, uint32_t DigitalFilter)
N{
N    uint32_t tmpreg = 0U;
N
N    /* Check the parameters */
N    assert_param(IS_I2C_ALL_INSTANCE(mI2C->Instance));
X    ((void)0U);
N    assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
X    ((void)0U);
N
N    if((mI2C->State & MID_I2C_STATE_READY) != 0)
N    {
N        /* Process Locked */
N        __MID_LOCK(mI2C);
X        do{ if((mI2C)->Lock == MID_Locked) { return MID_BUSY; } else { (mI2C)->Lock = MID_Locked; } }while (0);
N
N        mI2C->State = MID_I2C_STATE_BUSY;
N
N        /* Disable the selected I2C peripheral */
N        __DRV_I2C_DISABLE(mI2C);
X        ((mI2C)->Instance ->CR0 . W &= (~((uint32_t)0x00000001)));
N
N        /* Get the old register value */
N        // tmpreg = mI2C->Instance->CR1;
N
N        /* Reset I2Cx DNF bits [11:8] */
N        // tmpreg &= ~(I2C_CR1_DNF);
N
N        /* Set I2Cx DNF coefficient */
N        tmpreg |= DigitalFilter << 8U;
N
N        /* Store the new register value */
N        // mI2C->Instance->CR1 = tmpreg;
N
N        __DRV_I2C_ENABLE(mI2C);
X        ((mI2C)->Instance ->CR0 . W |= ((uint32_t)0x00000001));
N
N        mI2C->State = MID_I2C_STATE_READY;
N
N        /* Process Unlocked */
N        __MID_UNLOCK(mI2C);
X        do{ (mI2C)->Lock = MID_UnLocked; }while (0);
N
N        return MID_OK;
N    }
N    else
N    {
N        return MID_BUSY;
N    }
N}
N
N/**
N ******************************************************************************
N * @brief Config the I2C Pre-Drive Time driving capability.
N * @param mI2C: I2C handle. 
N * @param PreDriveTimeSelection: Selects the Pre-Drive Time.
N *   This parameter can be one of the reference I2CEx_PreDriveTime values
N * @retval None
N ******************************************************************************
N */
NMID_StatusTypeDef MID_I2CEx_ConfigPreDriveTime(I2C_HandleTypeDef *mI2C, uint32_t PreDriveTimeSelection)
N{
N    uint32_t lRegTmp;
N    /* Check the parameter */
N    assert_param(IS_I2C_PREDRIVETIME(PreDriveTimeSelection));
X    ((void)0U);
N
N    if((mI2C->State & MID_I2C_STATE_READY) != 0)
N    {
N        /* Process Locked */
N        __MID_LOCK(mI2C);
X        do{ if((mI2C)->Lock == MID_Locked) { return MID_BUSY; } else { (mI2C)->Lock = MID_Locked; } }while (0);
N
N        mI2C->State = MID_I2C_STATE_BUSY;
N
N        /* Disable the selected I2C peripheral */
N        __DRV_I2C_DISABLE(mI2C);
X        ((mI2C)->Instance ->CR0 . W &= (~((uint32_t)0x00000001)));
N
N        /* Enable wakeup from stop mode */
N        lRegTmp = mI2C->Instance->CR0.W;
N        lRegTmp &= ~I2C_PDT_MASK;
X        lRegTmp &= ~((uint32_t)0x0000C000);
N        lRegTmp |= PreDriveTimeSelection;
N        mI2C->Instance->CR0.W = lRegTmp;
N
N        __DRV_I2C_ENABLE(mI2C);
X        ((mI2C)->Instance ->CR0 . W |= ((uint32_t)0x00000001));
N
N        mI2C->State = MID_I2C_STATE_READY;
N
N        /* Process Unlocked */
N        __MID_UNLOCK(mI2C);
X        do{ (mI2C)->Lock = MID_UnLocked; }while (0);
N
N        return MID_OK;
N    }
N    else
N    {
N        return MID_BUSY;
N    }
N}
N
N#if defined(MG32_2ND) || defined(MG32_3RD)
X#if 0L || 0L
S/**
S ******************************************************************************
S * @brief  Enable I2C wakeup from stop mode.
S * @param  mI2C: Pointer to a I2C_HandleTypeDef structure that contains
S *               the configuration information for the specified I2Cx peripheral.
S * @retval MID status
S ******************************************************************************
S */
SMID_StatusTypeDef MID_I2CEx_EnableWakeUp (I2C_HandleTypeDef *mI2C)
S{
S    /* Check the parameters */
S    assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(mI2C->Instance));
S
S    if((mI2C->State & MID_I2C_STATE_READY) != 0)
S    {
S        /* Process Locked */
S        __MID_LOCK(mI2C);
S
S        mI2C->State = MID_I2C_STATE_BUSY;
S
S        /* Disable the selected I2C peripheral */
S        __DRV_I2C_DISABLE(mI2C);
S
S        /* Enable wakeup from stop mode */
S        mI2C->Instance->INT.W |= I2C_INT_WUP_IE_mask_w;
S
S        __DRV_I2C_ENABLE(mI2C);
S
S        mI2C->State = MID_I2C_STATE_READY;
S
S        /* Process Unlocked */
S        __MID_UNLOCK(mI2C);
S
S        return MID_OK;
S    }
S    else
S    {
S        return MID_BUSY;
S    }
S}
S
S/**
S ******************************************************************************
S * @brief  Disable I2C wakeup from stop mode.
S * @param  mI2C: Pointer to a I2C_HandleTypeDef structure that contains
S *               the configuration information for the specified I2Cx peripheral.
S * @retval MID status
S ******************************************************************************
S */
SMID_StatusTypeDef MID_I2CEx_DisableWakeUp (I2C_HandleTypeDef *mI2C)
S{
S    /* Check the parameters */
S    assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(mI2C->Instance));
S
S    if((mI2C->State & MID_I2C_STATE_READY) != 0)
S    {
S        /* Process Locked */
S        __MID_LOCK(mI2C);
S
S        mI2C->State = MID_I2C_STATE_BUSY;
S
S        /* Disable the selected I2C peripheral */
S        __DRV_I2C_DISABLE(mI2C);
S
S        /* Enable wakeup from stop mode */
S        mI2C->Instance->INT.W &= (~I2C_INT_WUP_IE_mask_w);
S
S        __DRV_I2C_ENABLE(mI2C);
S
S        mI2C->State = MID_I2C_STATE_READY;
S
S        /* Process Unlocked */
S        __MID_UNLOCK(mI2C);
S
S        return MID_OK;
S    }
S    else
S    {
S        return MID_BUSY;
S    }
S}
N#endif
N
N/**
N * @}
N */
N
N/**
N * @}
N */
N
N// #endif /* MID_I2C_MODULE_ENABLED */
N/**
N * @}
N */
N
N/**
N * @}
N */
N
N/************** (C) COPYRIGHT megawin Technology Co., Ltd. *****END OF FILE****/
N
N
