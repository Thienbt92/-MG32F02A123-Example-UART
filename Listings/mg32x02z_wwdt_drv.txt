; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_wwdt_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_wwdt_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_wwdt_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_WWDT_DRV.c]
                          THUMB

                          AREA ||i.WWDT_CLK_Select||, CODE, READONLY, ALIGN=2

                  WWDT_CLK_Select PROC
;;;51      */
;;;52     void WWDT_CLK_Select(WWDT_CLKS_TypeDef WWDT_CLKS)
000000  4905              LDR      r1,|L1.24|
;;;53     {
;;;54         WWDT->CLK.MBIT.CK_SEL = WWDT_CLKS;
000002  7a09              LDRB     r1,[r1,#8]
000004  2204              MOVS     r2,#4
000006  4391              BICS     r1,r1,r2
000008  0082              LSLS     r2,r0,#2
00000a  2304              MOVS     r3,#4
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L1.24|
000012  7211              STRB     r1,[r2,#8]
;;;55     }
000014  4770              BX       lr
;;;56     
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0x5d010000

                          AREA ||i.WWDT_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDT_ClearFlag PROC
;;;413     */
;;;414    void WWDT_ClearFlag (uint32_t WWDT_ITSrc)
000000  4901              LDR      r1,|L2.8|
;;;415    {
;;;416        WWDT->STA.W = WWDT_ITSrc;
000002  6008              STR      r0,[r1,#0]
;;;417    }
000004  4770              BX       lr
;;;418    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x5d010000

                          AREA ||i.WWDT_Cmd||, CODE, READONLY, ALIGN=2

                  WWDT_Cmd PROC
;;;127     */
;;;128    void WWDT_Cmd (FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;129    {
;;;130        if(NewState != DISABLE)
000002  d007              BEQ      |L3.20|
;;;131        {
;;;132            WWDT->CR0.MBIT.EN = 1;
000004  4907              LDR      r1,|L3.36|
000006  7c09              LDRB     r1,[r1,#0x10]
000008  0849              LSRS     r1,r1,#1
00000a  0049              LSLS     r1,r1,#1
00000c  1c49              ADDS     r1,r1,#1
00000e  4a05              LDR      r2,|L3.36|
000010  7411              STRB     r1,[r2,#0x10]
000012  e005              B        |L3.32|
                  |L3.20|
;;;133        }
;;;134        else
;;;135        {
;;;136            WWDT->CR0.MBIT.EN = 0;
000014  4903              LDR      r1,|L3.36|
000016  7c09              LDRB     r1,[r1,#0x10]
000018  0849              LSRS     r1,r1,#1
00001a  0049              LSLS     r1,r1,#1
00001c  4a01              LDR      r2,|L3.36|
00001e  7411              STRB     r1,[r2,#0x10]
                  |L3.32|
;;;137        }
;;;138    }
000020  4770              BX       lr
;;;139    ///@}
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      0x5d010000

                          AREA ||i.WWDT_DIV_Select||, CODE, READONLY, ALIGN=2

                  WWDT_DIV_Select PROC
;;;78      */
;;;79     void WWDT_DIV_Select (WWDT_DIVS_TypeDef WWDT_DIVS)
000000  4905              LDR      r1,|L4.24|
;;;80     {
;;;81         WWDT->CLK.MBIT.CK_DIV = WWDT_DIVS;
000002  7a09              LDRB     r1,[r1,#8]
000004  2270              MOVS     r2,#0x70
000006  4391              BICS     r1,r1,r2
000008  0102              LSLS     r2,r0,#4
00000a  2370              MOVS     r3,#0x70
00000c  401a              ANDS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  4a01              LDR      r2,|L4.24|
000012  7211              STRB     r1,[r2,#8]
;;;82     }
000014  4770              BX       lr
;;;83     
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x5d010000

                          AREA ||i.WWDT_GetAllFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDT_GetAllFlagStatus PROC
;;;358     */
;;;359    uint32_t WWDT_GetAllFlagStatus (void)
000000  4801              LDR      r0,|L5.8|
;;;360    {
;;;361        return WWDT->STA.W;
000002  6800              LDR      r0,[r0,#0]
;;;362    }
000004  4770              BX       lr
;;;363    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x5d010000

                          AREA ||i.WWDT_GetCounter||, CODE, READONLY, ALIGN=2

                  WWDT_GetCounter PROC
;;;158     */
;;;159    uint16_t WWDT_GetCounter (void)
000000  4801              LDR      r0,|L6.8|
;;;160    {
;;;161        return WWDT->CNT.H[0];
000002  8b00              LDRH     r0,[r0,#0x18]
;;;162    } 
000004  4770              BX       lr
;;;163    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x5d010000

                          AREA ||i.WWDT_GetReloadReg||, CODE, READONLY, ALIGN=2

                  WWDT_GetReloadReg PROC
;;;195     */
;;;196    uint16_t WWDT_GetReloadReg (void)
000000  4801              LDR      r0,|L7.8|
;;;197    {
;;;198        return WWDT->RLR.H[0];
000002  8b80              LDRH     r0,[r0,#0x1c]
;;;199    }
000004  4770              BX       lr
;;;200    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x5d010000

                          AREA ||i.WWDT_GetSingleFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDT_GetSingleFlagStatus PROC
;;;381     */
;;;382    DRV_Return WWDT_GetSingleFlagStatus (uint32_t WWDT_ITSrc)
000000  4601              MOV      r1,r0
;;;383    {
;;;384        DRV_Return bitstatus = DRV_Normal;
000002  2000              MOVS     r0,#0
;;;385        
;;;386        if ((WWDT->STA.W & WWDT_ITSrc) != (uint32_t)DISABLE)
000004  4a04              LDR      r2,|L8.24|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  2a00              CMP      r2,#0
00000c  d001              BEQ      |L8.18|
;;;387        {
;;;388            bitstatus = DRV_Happened;
00000e  2001              MOVS     r0,#1
000010  e000              B        |L8.20|
                  |L8.18|
;;;389        }
;;;390        else
;;;391        {
;;;392            bitstatus = DRV_Normal;
000012  2000              MOVS     r0,#0
                  |L8.20|
;;;393        }
;;;394        return  bitstatus;
;;;395    }	
000014  4770              BX       lr
;;;396    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x5d010000

                          AREA ||i.WWDT_GetWarningThreshold||, CODE, READONLY, ALIGN=2

                  WWDT_GetWarningThreshold PROC
;;;273     */
;;;274    uint16_t WWDT_GetWarningThreshold (void)
000000  4801              LDR      r0,|L9.8|
;;;275    {
;;;276        return WWDT->WRN.H[0];
000002  8880              LDRH     r0,[r0,#4]
;;;277    }
000004  4770              BX       lr
;;;278    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      0x5d010020

                          AREA ||i.WWDT_GetWindowThreshold||, CODE, READONLY, ALIGN=2

                  WWDT_GetWindowThreshold PROC
;;;234     */
;;;235    uint16_t WWDT_GetWindowThreshold (void)
000000  4801              LDR      r0,|L10.8|
;;;236    {
;;;237        return WWDT->WIN.H[0];
000002  8800              LDRH     r0,[r0,#0]
;;;238    }
000004  4770              BX       lr
;;;239    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x5d010020

                          AREA ||i.WWDT_IT_Config||, CODE, READONLY, ALIGN=2

                  WWDT_IT_Config PROC
;;;437     */
;;;438    void WWDT_IT_Config (uint32_t WWDT_ITSrc, FunctionalState NewState)
000000  460a              MOV      r2,r1
;;;439    {
;;;440        uint32_t  Reg;
;;;441        
;;;442        Reg = WWDT->INT.W;
000002  4b07              LDR      r3,|L11.32|
000004  6859              LDR      r1,[r3,#4]
;;;443        
;;;444        if(NewState != DISABLE)
000006  2a00              CMP      r2,#0
000008  d003              BEQ      |L11.18|
;;;445        {
;;;446            Reg |= WWDT_ITSrc;
00000a  460b              MOV      r3,r1
00000c  4303              ORRS     r3,r3,r0
00000e  4619              MOV      r1,r3
000010  e002              B        |L11.24|
                  |L11.18|
;;;447        }
;;;448        else
;;;449        {
;;;450            Reg &= ~WWDT_ITSrc;
000012  460b              MOV      r3,r1
000014  4383              BICS     r3,r3,r0
000016  4619              MOV      r1,r3
                  |L11.24|
;;;451        }
;;;452        WWDT->INT.W = Reg;
000018  4b01              LDR      r3,|L11.32|
00001a  6059              STR      r1,[r3,#4]
;;;453    }
00001c  4770              BX       lr
;;;454    ///@}
                          ENDP

00001e  0000              DCW      0x0000
                  |L11.32|
                          DCD      0x5d010000

                          AREA ||i.WWDT_PDIV_Select||, CODE, READONLY, ALIGN=2

                  WWDT_PDIV_Select PROC
;;;99      */
;;;100    void WWDT_PDIV_Select (WWDT_PDIVS_TypeDef WWDT_PDIVS)
000000  4904              LDR      r1,|L12.20|
;;;101    {
;;;102        WWDT->CLK.MBIT.CK_PDIV = WWDT_PDIVS;
000002  7a49              LDRB     r1,[r1,#9]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  07c2              LSLS     r2,r0,#31
00000a  0fd2              LSRS     r2,r2,#31
00000c  4311              ORRS     r1,r1,r2
00000e  4a01              LDR      r2,|L12.20|
000010  7251              STRB     r1,[r2,#9]
;;;103    }
000012  4770              BX       lr
;;;104    
                          ENDP

                  |L12.20|
                          DCD      0x5d010000

                          AREA ||i.WWDT_RefreshCounter||, CODE, READONLY, ALIGN=2

                  WWDT_RefreshCounter PROC
;;;176     */
;;;177    void WWDT_RefreshCounter (void)
000000  4801              LDR      r0,|L13.8|
;;;178    {
;;;179        WWDT->KEY.H[0] = 0x2014;
000002  4902              LDR      r1,|L13.12|
000004  8188              STRH     r0,[r1,#0xc]
;;;180    }
000006  4770              BX       lr
;;;181    
                          ENDP

                  |L13.8|
                          DCD      0x00002014
                  |L13.12|
                          DCD      0x5d010000

                          AREA ||i.WWDT_RstEvent_Config||, CODE, READONLY, ALIGN=2

                  WWDT_RstEvent_Config PROC
;;;322     */
;;;323    void WWDT_RstEvent_Config (uint8_t WWDT_RSTGS, FunctionalState NewState)
000000  460a              MOV      r2,r1
;;;324    {
;;;325        uint8_t Reg;
;;;326        
;;;327        Reg = WWDT->CR0.B[0];
000002  4b07              LDR      r3,|L14.32|
000004  7c19              LDRB     r1,[r3,#0x10]
;;;328        if(NewState != DISABLE)
000006  2a00              CMP      r2,#0
000008  d003              BEQ      |L14.18|
;;;329        {
;;;330            Reg |= WWDT_RSTGS;
00000a  460b              MOV      r3,r1
00000c  4303              ORRS     r3,r3,r0
00000e  4619              MOV      r1,r3
000010  e002              B        |L14.24|
                  |L14.18|
;;;331        }
;;;332        else
;;;333        {
;;;334            Reg &= ~WWDT_RSTGS;
000012  460b              MOV      r3,r1
000014  4383              BICS     r3,r3,r0
000016  4619              MOV      r1,r3
                  |L14.24|
;;;335        }
;;;336            
;;;337        WWDT->CR0.B[0] = Reg;
000018  4b01              LDR      r3,|L14.32|
00001a  7419              STRB     r1,[r3,#0x10]
;;;338    }
00001c  4770              BX       lr
;;;339    ///@}
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      0x5d010000

                          AREA ||i.WWDT_SetReloadReg||, CODE, READONLY, ALIGN=2

                  WWDT_SetReloadReg PROC
;;;215     */
;;;216    void WWDT_SetReloadReg (uint16_t WWDT_RLR)
000000  4901              LDR      r1,|L15.8|
;;;217    {
;;;218        WWDT->RLR.H[0] = WWDT_RLR;
000002  8388              STRH     r0,[r1,#0x1c]
;;;219    }
000004  4770              BX       lr
;;;220    
                          ENDP

000006  0000              DCW      0x0000
                  |L15.8|
                          DCD      0x5d010000

                          AREA ||i.WWDT_SetWarningThreshold||, CODE, READONLY, ALIGN=2

                  WWDT_SetWarningThreshold PROC
;;;293     */
;;;294    void WWDT_SetWarningThreshold (uint16_t WWDT_WRN)
000000  4901              LDR      r1,|L16.8|
;;;295    {
;;;296        WWDT->WRN.H[0] = WWDT_WRN;
000002  8088              STRH     r0,[r1,#4]
;;;297    }
000004  4770              BX       lr
;;;298    ///@}
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      0x5d010020

                          AREA ||i.WWDT_SetWindowThreshold||, CODE, READONLY, ALIGN=2

                  WWDT_SetWindowThreshold PROC
;;;254     */
;;;255    void WWDT_SetWindowThreshold (uint16_t WWDT_WIN)
000000  4901              LDR      r1,|L17.8|
;;;256    {
;;;257        WWDT->WIN.H[0] = WWDT_WIN;
000002  8008              STRH     r0,[r1,#0]
;;;258    }
000004  4770              BX       lr
;;;259    
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x5d010020

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_WWDT_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_MG32x02z_WWDT_DRV_c_385f7f3e____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___19_MG32x02z_WWDT_DRV_c_385f7f3e____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_MG32x02z_WWDT_DRV_c_385f7f3e____REVSH|
#line 496
|__asm___19_MG32x02z_WWDT_DRV_c_385f7f3e____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
