; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_rst_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_rst_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_rst_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_RST_DRV.c]
                          THUMB

                          AREA ||i.RST_CRstSource_Config||, CODE, READONLY, ALIGN=1

                  RST_CRstSource_Config PROC
;;;179     */
;;;180    void RST_CRstSource_Config (uint32_t RST_CRS, FunctionalState NewState) 
000000  460a              MOV      r2,r1
;;;181    {
;;;182        uint32_t  Reg_32;
;;;183        
;;;184        Reg_32 = RST->CE.W;
000002  2313              MOVS     r3,#0x13
000004  069b              LSLS     r3,r3,#26
000006  6959              LDR      r1,[r3,#0x14]
;;;185        
;;;186        // When NewState is ENABLE
;;;187        if(NewState != DISABLE)
000008  2a00              CMP      r2,#0
00000a  d003              BEQ      |L1.20|
;;;188        {
;;;189            Reg_32 |= RST_CRS;
00000c  460b              MOV      r3,r1
00000e  4303              ORRS     r3,r3,r0
000010  4619              MOV      r1,r3
000012  e002              B        |L1.26|
                  |L1.20|
;;;190        }
;;;191    
;;;192        // When NewState is DISABLE
;;;193        else
;;;194        {
;;;195            Reg_32 &= ~RST_CRS;
000014  460b              MOV      r3,r1
000016  4383              BICS     r3,r3,r0
000018  4619              MOV      r1,r3
                  |L1.26|
;;;196        }
;;;197        
;;;198        RST->CE.W = Reg_32;
00001a  2313              MOVS     r3,#0x13
00001c  069b              LSLS     r3,r3,#26
00001e  6159              STR      r1,[r3,#0x14]
;;;199    }
000020  4770              BX       lr
;;;200    
                          ENDP


                          AREA ||i.RST_ClearFlag||, CODE, READONLY, ALIGN=1

                  RST_ClearFlag PROC
;;;135     */
;;;136    void RST_ClearFlag (uint32_t RST_FLAG)
000000  2113              MOVS     r1,#0x13
;;;137    {
;;;138        RST->STA.W = RST_FLAG;
000002  0689              LSLS     r1,r1,#26
000004  6008              STR      r0,[r1,#0]
;;;139    }
000006  4770              BX       lr
;;;140    ///@}
                          ENDP


                          AREA ||i.RST_ForceRstPeriph_SW||, CODE, READONLY, ALIGN=1

                  RST_ForceRstPeriph_SW PROC
;;;359     */
;;;360    void RST_ForceRstPeriph_SW (RST_SoftForceReset_Type ForceReset, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;361    {
000002  460a              MOV      r2,r1
;;;362        uint32_t  Reg;
;;;363    
;;;364        if(ForceReset < 32)
000004  2820              CMP      r0,#0x20
000006  da12              BGE      |L3.46|
;;;365        {
;;;366            Reg = (0x00000001 << ForceReset);
000008  2101              MOVS     r1,#1
00000a  4081              LSLS     r1,r1,r0
;;;367            
;;;368            if(NewState != DISABLE)
00000c  2a00              CMP      r2,#0
00000e  d007              BEQ      |L3.32|
;;;369            {
;;;370                RST->AHB.W |= Reg;
000010  2313              MOVS     r3,#0x13
000012  069b              LSLS     r3,r3,#26
000014  69db              LDR      r3,[r3,#0x1c]
000016  430b              ORRS     r3,r3,r1
000018  2413              MOVS     r4,#0x13
00001a  06a4              LSLS     r4,r4,#26
00001c  61e3              STR      r3,[r4,#0x1c]
00001e  e006              B        |L3.46|
                  |L3.32|
;;;371            }
;;;372            else
;;;373            {
;;;374                RST->AHB.W &= ~Reg;
000020  2313              MOVS     r3,#0x13
000022  069b              LSLS     r3,r3,#26
000024  69db              LDR      r3,[r3,#0x1c]
000026  438b              BICS     r3,r3,r1
000028  2413              MOVS     r4,#0x13
00002a  06a4              LSLS     r4,r4,#26
00002c  61e3              STR      r3,[r4,#0x1c]
                  |L3.46|
;;;375            }
;;;376        }
;;;377        
;;;378        if((32 <=ForceReset) & (ForceReset < 64))
00002e  2820              CMP      r0,#0x20
000030  db01              BLT      |L3.54|
000032  2301              MOVS     r3,#1
000034  e000              B        |L3.56|
                  |L3.54|
000036  2300              MOVS     r3,#0
                  |L3.56|
000038  2840              CMP      r0,#0x40
00003a  da01              BGE      |L3.64|
00003c  2401              MOVS     r4,#1
00003e  e000              B        |L3.66|
                  |L3.64|
000040  2400              MOVS     r4,#0
                  |L3.66|
000042  4023              ANDS     r3,r3,r4
000044  2b00              CMP      r3,#0
000046  d015              BEQ      |L3.116|
;;;379        {
;;;380            Reg = (0x00000001 << (ForceReset & 0x1F));
000048  06c4              LSLS     r4,r0,#27
00004a  0ee4              LSRS     r4,r4,#27
00004c  2301              MOVS     r3,#1
00004e  40a3              LSLS     r3,r3,r4
000050  4619              MOV      r1,r3
;;;381            
;;;382            if(NewState != DISABLE)
000052  2a00              CMP      r2,#0
000054  d007              BEQ      |L3.102|
;;;383            {
;;;384                RST->APB0.W |= Reg;
000056  2313              MOVS     r3,#0x13
000058  069b              LSLS     r3,r3,#26
00005a  6a1b              LDR      r3,[r3,#0x20]
00005c  430b              ORRS     r3,r3,r1
00005e  2413              MOVS     r4,#0x13
000060  06a4              LSLS     r4,r4,#26
000062  6223              STR      r3,[r4,#0x20]
000064  e006              B        |L3.116|
                  |L3.102|
;;;385            }
;;;386            else
;;;387            {
;;;388                RST->APB0.W &= ~Reg;
000066  2313              MOVS     r3,#0x13
000068  069b              LSLS     r3,r3,#26
00006a  6a1b              LDR      r3,[r3,#0x20]
00006c  438b              BICS     r3,r3,r1
00006e  2413              MOVS     r4,#0x13
000070  06a4              LSLS     r4,r4,#26
000072  6223              STR      r3,[r4,#0x20]
                  |L3.116|
;;;389            }
;;;390        }
;;;391        
;;;392        if((64 <=ForceReset) & (ForceReset < 96))
000074  2840              CMP      r0,#0x40
000076  db01              BLT      |L3.124|
000078  2301              MOVS     r3,#1
00007a  e000              B        |L3.126|
                  |L3.124|
00007c  2300              MOVS     r3,#0
                  |L3.126|
00007e  2860              CMP      r0,#0x60
000080  da01              BGE      |L3.134|
000082  2401              MOVS     r4,#1
000084  e000              B        |L3.136|
                  |L3.134|
000086  2400              MOVS     r4,#0
                  |L3.136|
000088  4023              ANDS     r3,r3,r4
00008a  2b00              CMP      r3,#0
00008c  d015              BEQ      |L3.186|
;;;393        {
;;;394            Reg = (0x00000001 << (ForceReset & 0x1F));
00008e  06c4              LSLS     r4,r0,#27
000090  0ee4              LSRS     r4,r4,#27
000092  2301              MOVS     r3,#1
000094  40a3              LSLS     r3,r3,r4
000096  4619              MOV      r1,r3
;;;395            
;;;396            if(NewState != DISABLE)
000098  2a00              CMP      r2,#0
00009a  d007              BEQ      |L3.172|
;;;397            {
;;;398                RST->APB1.W |= Reg;
00009c  2313              MOVS     r3,#0x13
00009e  069b              LSLS     r3,r3,#26
0000a0  6a5b              LDR      r3,[r3,#0x24]
0000a2  430b              ORRS     r3,r3,r1
0000a4  2413              MOVS     r4,#0x13
0000a6  06a4              LSLS     r4,r4,#26
0000a8  6263              STR      r3,[r4,#0x24]
0000aa  e006              B        |L3.186|
                  |L3.172|
;;;399            }
;;;400            else
;;;401            {
;;;402                RST->APB1.W &= ~Reg;
0000ac  2313              MOVS     r3,#0x13
0000ae  069b              LSLS     r3,r3,#26
0000b0  6a5b              LDR      r3,[r3,#0x24]
0000b2  438b              BICS     r3,r3,r1
0000b4  2413              MOVS     r4,#0x13
0000b6  06a4              LSLS     r4,r4,#26
0000b8  6263              STR      r3,[r4,#0x24]
                  |L3.186|
;;;403            }
;;;404        }
;;;405    }
0000ba  bd10              POP      {r4,pc}
;;;406    ///@}
                          ENDP


                          AREA ||i.RST_GetAllFlagStatus||, CODE, READONLY, ALIGN=1

                  RST_GetAllFlagStatus PROC
;;;48      */
;;;49     uint32_t RST_GetAllFlagStatus (void)
000000  2013              MOVS     r0,#0x13
;;;50     {
;;;51         return RST->STA.W;
000002  0680              LSLS     r0,r0,#26
000004  6800              LDR      r0,[r0,#0]
;;;52     }
000006  4770              BX       lr
;;;53     
                          ENDP


                          AREA ||i.RST_GetSingleFlagStatus||, CODE, READONLY, ALIGN=1

                  RST_GetSingleFlagStatus PROC
;;;87      */
;;;88     DRV_Return RST_GetSingleFlagStatus (uint32_t RST_FLAG)                      
000000  4601              MOV      r1,r0
;;;89     {                                                                           
;;;90         DRV_Return bitstatus = DRV_Normal;
000002  2000              MOVS     r0,#0
;;;91         
;;;92         if ((RST->STA.W & RST_FLAG) != (uint32_t)CLR)
000004  2213              MOVS     r2,#0x13
000006  0692              LSLS     r2,r2,#26
000008  6812              LDR      r2,[r2,#0]
00000a  400a              ANDS     r2,r2,r1
00000c  2a00              CMP      r2,#0
00000e  d001              BEQ      |L5.20|
;;;93         {
;;;94             bitstatus = DRV_Happened;
000010  2001              MOVS     r0,#1
000012  e000              B        |L5.22|
                  |L5.20|
;;;95         }
;;;96         else
;;;97         {
;;;98             bitstatus = DRV_Normal;
000014  2000              MOVS     r0,#0
                  |L5.22|
;;;99         }
;;;100        return  bitstatus;
;;;101    }
000016  4770              BX       lr
;;;102    
                          ENDP


                          AREA ||i.RST_TriggerSystemRst_SW||, CODE, READONLY, ALIGN=1

                  RST_TriggerSystemRst_SW PROC
;;;428     */
;;;429    void RST_TriggerSystemRst_SW (FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;430    {
;;;431        if(NewState != DISABLE)
000002  d008              BEQ      |L6.22|
;;;432        {
;;;433            RST->CR0.B[0] |= RST_CR0_SW_EN_mask_b0;
000004  2113              MOVS     r1,#0x13
000006  0689              LSLS     r1,r1,#26
000008  7c09              LDRB     r1,[r1,#0x10]
00000a  2202              MOVS     r2,#2
00000c  4311              ORRS     r1,r1,r2
00000e  2213              MOVS     r2,#0x13
000010  0692              LSLS     r2,r2,#26
000012  7411              STRB     r1,[r2,#0x10]
000014  e007              B        |L6.38|
                  |L6.22|
;;;434        }
;;;435        else
;;;436        {
;;;437            RST->CR0.B[0] &= ~RST_CR0_SW_EN_mask_b0;
000016  2113              MOVS     r1,#0x13
000018  0689              LSLS     r1,r1,#26
00001a  7c09              LDRB     r1,[r1,#0x10]
00001c  2202              MOVS     r2,#2
00001e  4391              BICS     r1,r1,r2
000020  2213              MOVS     r2,#0x13
000022  0692              LSLS     r2,r2,#26
000024  7411              STRB     r1,[r2,#0x10]
                  |L6.38|
;;;438        }
;;;439    }
000026  4770              BX       lr
;;;440    
                          ENDP


                          AREA ||i.RST_WRstGPIOLock_Config||, CODE, READONLY, ALIGN=1

                  RST_WRstGPIOLock_Config PROC
;;;286     */
;;;287    void RST_WRstGPIOLock_Config (uint32_t RST_Px_DISx, FunctionalState NewState)
000000  460a              MOV      r2,r1
;;;288    {
;;;289        uint32_t  Reg;
;;;290        
;;;291        Reg = RST->CR0.W;
000002  2313              MOVS     r3,#0x13
000004  069b              LSLS     r3,r3,#26
000006  6919              LDR      r1,[r3,#0x10]
;;;292        
;;;293        if(NewState == DISABLE)
000008  2a00              CMP      r2,#0
00000a  d103              BNE      |L7.20|
;;;294        {
;;;295            Reg &= ~RST_Px_DISx; 
00000c  460b              MOV      r3,r1
00000e  4383              BICS     r3,r3,r0
000010  4619              MOV      r1,r3
000012  e002              B        |L7.26|
                  |L7.20|
;;;296        }
;;;297        else
;;;298        {
;;;299            Reg |= RST_Px_DISx;
000014  460b              MOV      r3,r1
000016  4303              ORRS     r3,r3,r0
000018  4619              MOV      r1,r3
                  |L7.26|
;;;300        }
;;;301        
;;;302        RST->CR0.W = Reg;
00001a  2313              MOVS     r3,#0x13
00001c  069b              LSLS     r3,r3,#26
00001e  6119              STR      r1,[r3,#0x10]
;;;303        
;;;304    }
000020  4770              BX       lr
;;;305    ///@}
                          ENDP


                          AREA ||i.RST_WRstSource_Config||, CODE, READONLY, ALIGN=1

                  RST_WRstSource_Config PROC
;;;232     */
;;;233    void RST_WRstSource_Config (uint32_t RST_WRS, FunctionalState NewState) 
000000  460a              MOV      r2,r1
;;;234    {
;;;235        uint32_t  Reg_32;
;;;236        
;;;237        Reg_32 = RST->WE.W;
000002  2313              MOVS     r3,#0x13
000004  069b              LSLS     r3,r3,#26
000006  6999              LDR      r1,[r3,#0x18]
;;;238        
;;;239        // When NewState is ENABLE
;;;240        if(NewState != DISABLE)
000008  2a00              CMP      r2,#0
00000a  d003              BEQ      |L8.20|
;;;241        {
;;;242            Reg_32 |= RST_WRS;
00000c  460b              MOV      r3,r1
00000e  4303              ORRS     r3,r3,r0
000010  4619              MOV      r1,r3
000012  e002              B        |L8.26|
                  |L8.20|
;;;243        }
;;;244    
;;;245        // When NewState is DISABLE
;;;246        else
;;;247        {
;;;248            Reg_32 &= ~RST_WRS;
000014  460b              MOV      r3,r1
000016  4383              BICS     r3,r3,r0
000018  4619              MOV      r1,r3
                  |L8.26|
;;;249        }
;;;250        
;;;251        RST->WE.W = Reg_32;
00001a  2313              MOVS     r3,#0x13
00001c  069b              LSLS     r3,r3,#26
00001e  6199              STR      r1,[r3,#0x18]
;;;252    }
000020  4770              BX       lr
;;;253    ///@}
                          ENDP


                          AREA ||i.RST_WWDTWRstMask_Cmd||, CODE, READONLY, ALIGN=1

                  RST_WWDTWRstMask_Cmd PROC
;;;455     */
;;;456    void RST_WWDTWRstMask_Cmd (FunctionalState NewState)
000000  2800              CMP      r0,#0
;;;457    {
;;;458        if(NewState != DISABLE)
000002  d008              BEQ      |L9.22|
;;;459        {
;;;460            RST->CR0.B[3] |= RST_CR0_WWDT_WDIS_mask_b3;
000004  2113              MOVS     r1,#0x13
000006  0689              LSLS     r1,r1,#26
000008  7cc9              LDRB     r1,[r1,#0x13]
00000a  2201              MOVS     r2,#1
00000c  4311              ORRS     r1,r1,r2
00000e  2213              MOVS     r2,#0x13
000010  0692              LSLS     r2,r2,#26
000012  74d1              STRB     r1,[r2,#0x13]
000014  e007              B        |L9.38|
                  |L9.22|
;;;461        }
;;;462        else
;;;463        {
;;;464            RST->CR0.B[3] &= ~RST_CR0_WWDT_WDIS_mask_b3;
000016  2113              MOVS     r1,#0x13
000018  0689              LSLS     r1,r1,#26
00001a  7cc9              LDRB     r1,[r1,#0x13]
00001c  084a              LSRS     r2,r1,#1
00001e  0052              LSLS     r2,r2,#1
000020  2113              MOVS     r1,#0x13
000022  0689              LSLS     r1,r1,#26
000024  74ca              STRB     r2,[r1,#0x13]
                  |L9.38|
;;;465        }
;;;466    }
000026  4770              BX       lr
;;;467    
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_RST_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_RST_DRV_c_0e9731ea____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_RST_DRV_c_0e9731ea____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_RST_DRV_c_0e9731ea____REVSH|
#line 496
|__asm___18_MG32x02z_RST_DRV_c_0e9731ea____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
