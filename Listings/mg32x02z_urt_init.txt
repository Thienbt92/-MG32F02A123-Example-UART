; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_urt_init.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_urt_init.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_urt_init.crf RTE\MG32x02z_ChipInit_Wizard\MG32F02A132\MG32x02z_URT_Init.c]
                          THUMB

                          AREA ||i.URT_Config||, CODE, READONLY, ALIGN=2

                  URT_Config PROC
;;;55     
;;;56     uint8_t URT_Config(URT_Struct* URTX , uint32_t URT_Freq, uint32_t BaudRate)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;57     {
000002  b082              SUB      sp,sp,#8
000004  4604              MOV      r4,r0
;;;58         uint32_t TRXOverSamplingSampleNumber;
;;;59         uint32_t Tmp;
;;;60     	
;;;61         uint8_t BST_SOL,OVSMP,REM;    
;;;62         //==========================================
;;;63         //Baudrate
;;;64         Tmp = URT_Freq / BaudRate;
000006  9904              LDR      r1,[sp,#0x10]
000008  9803              LDR      r0,[sp,#0xc]
00000a  f7fffffe          BL       __aeabi_uidivmod
00000e  9001              STR      r0,[sp,#4]
;;;65         if(Tmp<8)
000010  9801              LDR      r0,[sp,#4]
000012  2808              CMP      r0,#8
000014  d202              BCS      |L1.28|
;;;66         {
;;;67             return(URT_INIT_WIZARD_FAILURE);
000016  2001              MOVS     r0,#1
                  |L1.24|
;;;68         }
;;;69     	//================TX and RX oversamplig value===================
;;;70     	BST_SOL = 0;
;;;71     	for(OVSMP=8;OVSMP<32;OVSMP++)
;;;72     	{
;;;73     		REM = Tmp % OVSMP;
;;;74     		if(REM==0)
;;;75     		{
;;;76                 if( (Tmp / OVSMP)<4096)
;;;77                 {
;;;78     			    TRXOverSamplingSampleNumber = OVSMP;
;;;79     			    break;
;;;80                 }
;;;81     		}
;;;82     		else
;;;83     		{
;;;84     			if((OVSMP-REM)>BST_SOL || (OVSMP-REM)==BST_SOL)
;;;85     			{
;;;86     				BST_SOL = OVSMP - REM;
;;;87     				TRXOverSamplingSampleNumber = OVSMP;
;;;88     			}
;;;89     		}
;;;90     	}
;;;91         
;;;92     	URTX->CLK.W = URTX->CLK.W & (~(URT_CLK_TX_CKS_mask_w| URT_CLK_RX_CKS_mask_w | URT_CLK_CK_SEL_mask_w));
;;;93     	Tmp = Tmp / (TRXOverSamplingSampleNumber);
;;;94         if(Tmp>4096)
;;;95         {
;;;96             return(URT_INIT_WIZARD_FAILURE);
;;;97         }
;;;98         URTX->RLR.H[0] = (Tmp - 1);
;;;99          
;;;100        
;;;101        TRXOverSamplingSampleNumber = TRXOverSamplingSampleNumber - 1;
;;;102        URTX->CR1.B[3] = TRXOverSamplingSampleNumber;
;;;103        URTX->CR1.B[1] = TRXOverSamplingSampleNumber;
;;;104        
;;;105        URTX->CLK.W = URTX->CLK.W | (URT_CLK_BR_MDS_combined_w | URT_CLK_BR_EN_enable_w);
;;;106        
;;;107        //===========================
;;;108        //1. Data is 8bit , Data order is LSB , no parity bit , stop bit is 1bit 
;;;109        //2. Data bit no inverse
;;;110        URTX->CR1.B[2] = (URT_CR1_TXDSIZE_8bit_b2 | URT_CR1_TXMSB_EN_disable_b2 | URT_CR1_TXPAR_EN_disable_b2 | URT_CR1_TXSTP_LEN_1bit_b2);
;;;111        URTX->CR1.B[0] = (URT_CR1_RXDSIZE_8bit_b0 | URT_CR1_RXMSB_EN_disable_b0 | URT_CR1_RXPAR_EN_disable_b0 | URT_CR1_RXSTP_LEN_1bit_b0);
;;;112        
;;;113        URTX->CR4.B[0] = ((URT_CR4_RDAT_INV_disable_b0 | URT_CR4_TDAT_INV_disable_b0) | (URT_CR4_RDAT_CLR_enable_b0 | URT_CR4_TDAT_CLR_enable_b0));
;;;114        
;;;115        //=============================
;;;116        //1. Set URT mode
;;;117        //2. Data line is 2 line
;;;118        //3. RX shadow buffer level is 1byte.
;;;119        //4. RX oversampling majority vote set. (3 sample bits method)
;;;120        URTX->CR0.W = (URTX->CR0.W & (~ (URT_CR0_MDS_mask_w | URT_CR0_DAT_LINE_mask_w | URT_CR0_RX_TH_mask_w | URT_CR0_OS_MDS_mask_w)));
;;;121        
;;;122        //============================
;;;123        //1. Enable RX & TX
;;;124        //2. Enable URT 
;;;125        URTX->CR2.W = URTX->CR2.W | (URT_CR2_TX_EN_mask_w | URT_CR2_RX_EN_mask_w);                                   
;;;126        URTX->CR0.W = URTX->CR0.W | URT_CR0_EN_mask_w;                                                              
;;;127        
;;;128        return(URT_INIT_WIZARD_SUCCESS);
;;;129    }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
                  |L1.28|
00001c  2000              MOVS     r0,#0                 ;70
00001e  9000              STR      r0,[sp,#0]            ;70
000020  2508              MOVS     r5,#8                 ;71
000022  e01e              B        |L1.98|
                  |L1.36|
000024  4629              MOV      r1,r5                 ;73
000026  9801              LDR      r0,[sp,#4]            ;73
000028  f7fffffe          BL       __aeabi_uidivmod
00002c  b2cf              UXTB     r7,r1                 ;73
00002e  2f00              CMP      r7,#0                 ;74
000030  d109              BNE      |L1.70|
000032  4629              MOV      r1,r5                 ;76
000034  9801              LDR      r0,[sp,#4]            ;76
000036  f7fffffe          BL       __aeabi_uidivmod
00003a  2101              MOVS     r1,#1                 ;76
00003c  0309              LSLS     r1,r1,#12             ;76
00003e  4288              CMP      r0,r1                 ;76
000040  d20d              BCS      |L1.94|
000042  462e              MOV      r6,r5                 ;78
000044  e00f              B        |L1.102|
                  |L1.70|
000046  1be9              SUBS     r1,r5,r7              ;84
000048  9800              LDR      r0,[sp,#0]            ;84
00004a  4281              CMP      r1,r0                 ;84
00004c  dc03              BGT      |L1.86|
00004e  1be9              SUBS     r1,r5,r7              ;84
000050  9800              LDR      r0,[sp,#0]            ;84
000052  4281              CMP      r1,r0                 ;84
000054  d103              BNE      |L1.94|
                  |L1.86|
000056  1be8              SUBS     r0,r5,r7              ;86
000058  b2c0              UXTB     r0,r0                 ;86
00005a  9000              STR      r0,[sp,#0]            ;86
00005c  462e              MOV      r6,r5                 ;87
                  |L1.94|
00005e  1c68              ADDS     r0,r5,#1              ;71
000060  b2c5              UXTB     r5,r0                 ;71
                  |L1.98|
000062  2d20              CMP      r5,#0x20              ;71
000064  dbde              BLT      |L1.36|
                  |L1.102|
000066  bf00              NOP                            ;79
000068  68a0              LDR      r0,[r4,#8]            ;92
00006a  4917              LDR      r1,|L1.200|
00006c  4008              ANDS     r0,r0,r1              ;92
00006e  60a0              STR      r0,[r4,#8]            ;92
000070  4631              MOV      r1,r6                 ;93
000072  9801              LDR      r0,[sp,#4]            ;93
000074  f7fffffe          BL       __aeabi_uidivmod
000078  9001              STR      r0,[sp,#4]            ;93
00007a  2101              MOVS     r1,#1                 ;94
00007c  0309              LSLS     r1,r1,#12             ;94
00007e  9801              LDR      r0,[sp,#4]            ;94
000080  4288              CMP      r0,r1                 ;94
000082  d901              BLS      |L1.136|
000084  2001              MOVS     r0,#1                 ;96
000086  e7c7              B        |L1.24|
                  |L1.136|
000088  9801              LDR      r0,[sp,#4]            ;98
00008a  1e40              SUBS     r0,r0,#1              ;98
00008c  84a0              STRH     r0,[r4,#0x24]         ;98
00008e  1e76              SUBS     r6,r6,#1              ;101
000090  75e6              STRB     r6,[r4,#0x17]         ;102
000092  7566              STRB     r6,[r4,#0x15]         ;103
000094  68a0              LDR      r0,[r4,#8]            ;105
000096  2103              MOVS     r1,#3                 ;105
000098  0609              LSLS     r1,r1,#24             ;105
00009a  4308              ORRS     r0,r0,r1              ;105
00009c  60a0              STR      r0,[r4,#8]            ;105
00009e  2140              MOVS     r1,#0x40              ;110
0000a0  75a1              STRB     r1,[r4,#0x16]         ;110
0000a2  2040              MOVS     r0,#0x40              ;111
0000a4  7520              STRB     r0,[r4,#0x14]         ;111
0000a6  21c0              MOVS     r1,#0xc0              ;113
0000a8  2020              MOVS     r0,#0x20              ;113
0000aa  5501              STRB     r1,[r0,r4]            ;113
0000ac  6920              LDR      r0,[r4,#0x10]         ;120
0000ae  4907              LDR      r1,|L1.204|
0000b0  4008              ANDS     r0,r0,r1              ;120
0000b2  6120              STR      r0,[r4,#0x10]         ;120
0000b4  69a0              LDR      r0,[r4,#0x18]         ;125
0000b6  210c              MOVS     r1,#0xc               ;125
0000b8  4308              ORRS     r0,r0,r1              ;125
0000ba  61a0              STR      r0,[r4,#0x18]         ;125
0000bc  6920              LDR      r0,[r4,#0x10]         ;126
0000be  2101              MOVS     r1,#1                 ;126
0000c0  4308              ORRS     r0,r0,r1              ;126
0000c2  6120              STR      r0,[r4,#0x10]         ;126
0000c4  2000              MOVS     r0,#0                 ;128
0000c6  e7a7              B        |L1.24|
;;;130    
                          ENDP

                  |L1.200|
                          DCD      0xffccfff1
                  |L1.204|
                          DCD      0xfffcff85

                          AREA ||i.URT_Init||, CODE, READONLY, ALIGN=1

                  URT_Init PROC
;;;204     */
;;;205    uint8_t URT_Init(void)
000000  2000              MOVS     r0,#0
;;;206    {
;;;207        #if CONF_URT_INITBR_H_EN == 1
;;;208        
;;;209            #if CONF_URT0_INITBR_EN == 1
;;;210                URT_Config2(URT0 , CONF_URT0_INITBR_BRM, CONF_URT0_INITBR_CR1, CONF_URT0_INITBR_RLR);     // Enable URT0 and baudrate calculation by MG32x02z_URT_InitBR.h
;;;211            #endif
;;;212            #if CONF_URT1_INITBR_EN == 1
;;;213                URT_Config2(URT1 , CONF_URT1_INITBR_BRM, CONF_URT1_INITBR_CR1, CONF_URT1_INITBR_RLR);     // Enable URT0 and baudrate calculation by MG32x02z_URT_InitBR.h
;;;214            #endif
;;;215            #if CONF_URT2_INITBR_EN == 1
;;;216                URT_Config2(URT2 , CONF_URT2_INITBR_BRM, CONF_URT2_INITBR_CR1, CONF_URT2_INITBR_RLR);     // Enable URT0 and baudrate calculation by MG32x02z_URT_InitBR.h
;;;217            #endif
;;;218            #if CONF_URT3_INITBR_EN == 1
;;;219                URT_Config2(URT3 , CONF_URT3_INITBR_BRM, CONF_URT3_INITBR_CR1, CONF_URT3_INITBR_RLR);     // Enable URT0 and baudrate calculation by MG32x02z_URT_InitBR.h
;;;220            #endif
;;;221    
;;;222            return(URT_INIT_WIZARD_SUCCESS);
;;;223        #else
;;;224            uint8_t Result = URT_INIT_WIZARD_SUCCESS;
;;;225            
;;;226            #if CONF_URT0_INIT_EN == 1
;;;227                if(URT_Config(URT0,CONF_URT0_Freq,CONF_URT0_INIT_BD)!=URT_INIT_WIZARD_FAILURE)            // Enable URT0 and baudrate calculation middeware select ( In MG32x02z_URT_Init.h)
;;;228                {
;;;229                    Result = URT_INIT_WIZARD_FAILURE;
;;;230                }
;;;231            #endif
;;;232            #if CONF_URT1_INIT_EN == 1
;;;233                if(URT_Config(URT1,CONF_URT1_Freq,CONF_URT1_INIT_BD)!=URT_INIT_WIZARD_FAILURE)            // Enable URT1 and baudrate calculation middeware select ( In MG32x02z_URT_Init.h)
;;;234                {
;;;235                    Result = URT_INIT_WIZARD_FAILURE;
;;;236                }
;;;237            #endif
;;;238            #if CONF_URT2_INIT_EN == 1
;;;239                if(URT_Config(URT2,CONF_URT2_Freq,CONF_URT2_INIT_BD)!=URT_INIT_WIZARD_FAILURE)            // Enable URT2 and baudrate calculation middeware select ( In MG32x02z_URT_Init.h)
;;;240                {
;;;241                    Result = URT_INIT_WIZARD_FAILURE;
;;;242                }
;;;243            #endif
;;;244            #if CONF_URT3_INIT_EN == 1
;;;245                if(URT_Config(URT3,CONF_URT3_Freq,CONF_URT3_INIT_BD)!=URT_INIT_WIZARD_FAILURE)            // Enable URT3 and baudrate calculation middeware select ( In MG32x02z_URT_Init.h)
;;;246                {
;;;247                    Result = URT_INIT_WIZARD_FAILURE;
;;;248                }
;;;249            #endif
;;;250            
;;;251            return(Result);
;;;252        #endif
;;;253    }
000002  4770              BX       lr
;;;254    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CSC_InitConfig
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00010000
                          DCD      0x00000000
                          DCD      0x00000210
                          DCD      0x00000001
                          DCD      0x00000008
                          DCD      0x0000911f
                          DCD      0x000f13ed
                          DCD      0x00008993
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00b71b00
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "RTE\\MG32x02z_ChipInit_Wizard\\MG32F02A132\\MG32x02z_URT_Init.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_MG32x02z_URT_Init_c_8606a301____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___19_MG32x02z_URT_Init_c_8606a301____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_MG32x02z_URT_Init_c_8606a301____REVSH|
#line 496
|__asm___19_MG32x02z_URT_Init_c_8606a301____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
