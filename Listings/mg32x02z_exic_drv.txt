; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_exic_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_exic_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_exic_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_EXIC_DRV.c]
                          THUMB

                          AREA ||i.EXIC_ClearPxTriggerEventFlag||, CODE, READONLY, ALIGN=1

                  EXIC_ClearPxTriggerEventFlag PROC
;;;379     */
;;;380    void EXIC_ClearPxTriggerEventFlag(EXIC_PX_Struct* EXIC_PX , uint16_t EXIC_Pin_PF)
000000  8001              STRH     r1,[r0,#0]
;;;381    {
;;;382        EXIC_PX->PF.H[0] = EXIC_Pin_PF;
;;;383    }
000002  4770              BX       lr
;;;384    
                          ENDP


                          AREA ||i.EXIC_ClearPxTriggerITFlag||, CODE, READONLY, ALIGN=1

                  EXIC_ClearPxTriggerITFlag PROC
;;;404     */
;;;405    void EXIC_ClearPxTriggerITFlag( EXIC_ITFlag_Typdef EXIC_PX , uint8_t EXIC_PX_ITFlag)
000000  b510              PUSH     {r4,lr}
;;;406    {
;;;407        uint16_t PX_ITF_CLR;
;;;408        
;;;409        PX_ITF_CLR = ( EXIC_PX_ITFlag << (EXIC_PX_ITF_Shift * EXIC_PX));
000002  0084              LSLS     r4,r0,#2
000004  460b              MOV      r3,r1
000006  40a3              LSLS     r3,r3,r4
000008  b29a              UXTH     r2,r3
;;;410        
;;;411        EXIC->STA.H[0] = PX_ITF_CLR;
00000a  2305              MOVS     r3,#5
00000c  071b              LSLS     r3,r3,#28
00000e  801a              STRH     r2,[r3,#0]
;;;412    }
000010  bd10              POP      {r4,pc}
;;;413    
                          ENDP


                          AREA ||i.EXIC_GetITSourceID||, CODE, READONLY, ALIGN=2

                  EXIC_GetITSourceID PROC
;;;428     */
;;;429    uint8_t EXIC_GetITSourceID(IRQn_Type ITSourceNum)
000000  4601              MOV      r1,r0
;;;430    {
;;;431        uint8_t tmp;
;;;432        
;;;433    
;;;434        tmp = *((volatile uint8_t*)((uint32_t)EXIC_ID_ADR_Base + ITSourceNum));
000002  4a02              LDR      r2,|L3.12|
000004  188a              ADDS     r2,r1,r2
000006  7810              LDRB     r0,[r2,#0]
;;;435        return(tmp);
;;;436    }
000008  4770              BX       lr
;;;437    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x50000060

                          AREA ||i.EXIC_GetPinxTriggerEventSingleFlagStatus||, CODE, READONLY, ALIGN=1

                  EXIC_GetPinxTriggerEventSingleFlagStatus PROC
;;;276     */
;;;277    DRV_Return EXIC_GetPinxTriggerEventSingleFlagStatus(EXIC_PX_Struct* EXIC_PX , uint16_t EXIC_Pin_PF)
000000  4602              MOV      r2,r0
;;;278    {
;;;279        if((EXIC_PX->PF.H[0]&EXIC_Pin_PF)==0)
000002  8810              LDRH     r0,[r2,#0]
000004  4008              ANDS     r0,r0,r1
000006  2800              CMP      r0,#0
000008  d100              BNE      |L4.12|
                  |L4.10|
;;;280        {
;;;281            return(DRV_UnHappened);
;;;282        }
;;;283        else
;;;284        {
;;;285            return(DRV_Happened);
;;;286        } 
;;;287    }
00000a  4770              BX       lr
                  |L4.12|
00000c  2001              MOVS     r0,#1                 ;285
00000e  e7fc              B        |L4.10|
;;;288    
                          ENDP


                          AREA ||i.EXIC_GetPxAllTriggerEventFlagStatus||, CODE, READONLY, ALIGN=1

                  EXIC_GetPxAllTriggerEventFlagStatus PROC
;;;223     */
;;;224    uint16_t EXIC_GetPxAllTriggerEventFlagStatus(EXIC_PX_Struct* EXIC_PX)
000000  4601              MOV      r1,r0
;;;225    {
;;;226        return(EXIC_PX->PF.W);
000002  6808              LDR      r0,[r1,#0]
000004  b280              UXTH     r0,r0
;;;227    }
000006  4770              BX       lr
;;;228    
                          ENDP


                          AREA ||i.EXIC_GetPxAllTriggerITFlagStatus||, CODE, READONLY, ALIGN=1

                  EXIC_GetPxAllTriggerITFlagStatus PROC
;;;246     */
;;;247    uint8_t EXIC_GetPxAllTriggerITFlagStatus( EXIC_ITFlag_Typdef EXIC_PX_ITFlag)
000000  4602              MOV      r2,r0
;;;248    {
;;;249        uint16_t Tmp;
;;;250        
;;;251        Tmp = EXIC->STA.H[0];
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  8801              LDRH     r1,[r0,#0]
;;;252        Tmp = EXIC->STA.H[0] >> (EXIC_PX_ITF_Shift * EXIC_PX_ITFlag);
000008  8800              LDRH     r0,[r0,#0]
00000a  0093              LSLS     r3,r2,#2
00000c  4118              ASRS     r0,r0,r3
00000e  4601              MOV      r1,r0
;;;253        Tmp = Tmp & EXIC_PX_ITF_Mask;
000010  4608              MOV      r0,r1
000012  2302              MOVS     r3,#2
000014  4018              ANDS     r0,r0,r3
000016  1c41              ADDS     r1,r0,#1
;;;254        return(Tmp);
000018  4608              MOV      r0,r1
;;;255    }
00001a  4770              BX       lr
;;;256    
                          ENDP


                          AREA ||i.EXIC_GetPxTriggerAndITFlagStatus||, CODE, READONLY, ALIGN=1

                  EXIC_GetPxTriggerAndITFlagStatus PROC
;;;306     */
;;;307    DRV_Return EXIC_GetPxTriggerAndITFlagStatus( EXIC_ITFlag_Typdef EXIC_PX_ITFlag)      
000000  4601              MOV      r1,r0
;;;308    {
;;;309        uint32_t PX_AF_CMP;
;;;310        
;;;311        PX_AF_CMP = EXIC->STA.H[0];
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  8802              LDRH     r2,[r0,#0]
;;;312        PX_AF_CMP = EXIC->STA.H[0] >> (EXIC_PX_ITF_Shift * EXIC_PX_ITFlag);
000008  8800              LDRH     r0,[r0,#0]
00000a  008b              LSLS     r3,r1,#2
00000c  4118              ASRS     r0,r0,r3
00000e  4602              MOV      r2,r0
;;;313        PX_AF_CMP = PX_AF_CMP & EXIC_PX_AF;
000010  2002              MOVS     r0,#2
000012  4002              ANDS     r2,r2,r0
;;;314        
;;;315        if(PX_AF_CMP==0)
000014  2a00              CMP      r2,#0
000016  d101              BNE      |L7.28|
;;;316        {
;;;317            return(DRV_UnHappened);
000018  2000              MOVS     r0,#0
                  |L7.26|
;;;318        }
;;;319        else
;;;320        {
;;;321            return(DRV_Happened);
;;;322        }
;;;323    }
00001a  4770              BX       lr
                  |L7.28|
00001c  2001              MOVS     r0,#1                 ;321
00001e  e7fc              B        |L7.26|
;;;324    
                          ENDP


                          AREA ||i.EXIC_GetPxTriggerOrITFlagStatus||, CODE, READONLY, ALIGN=1

                  EXIC_GetPxTriggerOrITFlagStatus PROC
;;;342     */
;;;343    DRV_Return EXIC_GetPxTriggerOrITFlagStatus( EXIC_ITFlag_Typdef EXIC_PX_ITFlag)    
000000  4601              MOV      r1,r0
;;;344    {
;;;345        uint32_t PX_OF_CMP;
;;;346        
;;;347        PX_OF_CMP = EXIC->STA.H[0];
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  8802              LDRH     r2,[r0,#0]
;;;348        PX_OF_CMP = EXIC->STA.H[0] >> (EXIC_PX_ITF_Shift * EXIC_PX_ITFlag);
000008  8800              LDRH     r0,[r0,#0]
00000a  008b              LSLS     r3,r1,#2
00000c  4118              ASRS     r0,r0,r3
00000e  4602              MOV      r2,r0
;;;349        PX_OF_CMP = PX_OF_CMP & EXIC_PX_OF;
000010  07d2              LSLS     r2,r2,#31
000012  0fd2              LSRS     r2,r2,#31
;;;350        
;;;351        if(PX_OF_CMP==0)
000014  2a00              CMP      r2,#0
000016  d101              BNE      |L8.28|
;;;352        {
;;;353            return(DRV_UnHappened);
000018  2000              MOVS     r0,#0
                  |L8.26|
;;;354        }
;;;355        else
;;;356        {
;;;357            return(DRV_Happened);
;;;358        }
;;;359    }
00001a  4770              BX       lr
                  |L8.28|
00001c  2001              MOVS     r0,#1                 ;357
00001e  e7fc              B        |L8.26|
;;;360    
                          ENDP


                          AREA ||i.EXIC_NMITrigger_SW||, CODE, READONLY, ALIGN=1

                  EXIC_NMITrigger_SW PROC
;;;495     */
;;;496    void EXIC_NMITrigger_SW(void)
000000  2005              MOVS     r0,#5
;;;497    {
;;;498        EXIC->CR0.MBIT.NMI_SW = ENABLE;
000002  0700              LSLS     r0,r0,#28
000004  7c00              LDRB     r0,[r0,#0x10]
000006  2102              MOVS     r1,#2
000008  4388              BICS     r0,r0,r1
00000a  1c80              ADDS     r0,r0,#2
00000c  2105              MOVS     r1,#5
00000e  0709              LSLS     r1,r1,#28
000010  7408              STRB     r0,[r1,#0x10]
;;;499    }
000012  4770              BX       lr
;;;500    
                          ENDP


                          AREA ||i.EXIC_NMI_Cmd||, CODE, READONLY, ALIGN=1

                  EXIC_NMI_Cmd PROC
;;;476     */
;;;477    void EXIC_NMI_Cmd(FunctionalState NMI_State)
000000  2105              MOVS     r1,#5
;;;478    {
;;;479        EXIC->CR0.MBIT.EM_NMI = NMI_State;
000002  0709              LSLS     r1,r1,#28
000004  7c49              LDRB     r1,[r1,#0x11]
000006  0849              LSRS     r1,r1,#1
000008  0049              LSLS     r1,r1,#1
00000a  07c2              LSLS     r2,r0,#31
00000c  0fd2              LSRS     r2,r2,#31
00000e  4311              ORRS     r1,r1,r2
000010  2205              MOVS     r2,#5
000012  0712              LSLS     r2,r2,#28
000014  7451              STRB     r1,[r2,#0x11]
;;;480    }
000016  4770              BX       lr
;;;481    
                          ENDP


                          AREA ||i.EXIC_PxTriggerAndMask_Select||, CODE, READONLY, ALIGN=1

                  EXIC_PxTriggerAndMask_Select PROC
;;;104     */
;;;105    void EXIC_PxTriggerAndMask_Select(EXIC_PX_Struct* EXIC_PX , uint16_t  EXIC_MSK_PIN)
000000  8141              STRH     r1,[r0,#0xa]
;;;106    {
;;;107        EXIC_PX->MSK.H[1] = EXIC_MSK_PIN;
;;;108    }
000002  4770              BX       lr
;;;109    
                          ENDP


                          AREA ||i.EXIC_PxTriggerAndUnmatch_Cmd||, CODE, READONLY, ALIGN=1

                  EXIC_PxTriggerAndUnmatch_Cmd PROC
;;;149     */
;;;150    void EXIC_PxTriggerAndUnmatch_Cmd(uint32_t EXIC_PX_IT, FunctionalState PX_unMatch_Cmd)
000000  2901              CMP      r1,#1
;;;151    {
;;;152        if(PX_unMatch_Cmd==ENABLE)
000002  d108              BNE      |L12.22|
;;;153        {
;;;154            EXIC->CR0.B[3] = EXIC->CR0.B[3] | (uint8_t) EXIC_PX_IT;
000004  2205              MOVS     r2,#5
000006  0712              LSLS     r2,r2,#28
000008  7cd2              LDRB     r2,[r2,#0x13]
00000a  b2c3              UXTB     r3,r0
00000c  431a              ORRS     r2,r2,r3
00000e  2305              MOVS     r3,#5
000010  071b              LSLS     r3,r3,#28
000012  74da              STRB     r2,[r3,#0x13]
000014  e006              B        |L12.36|
                  |L12.22|
;;;155        }
;;;156        else
;;;157        {
;;;158            EXIC->CR0.B[3] = EXIC->CR0.B[3] & ((uint8_t) (~EXIC_PX_IT));
000016  2205              MOVS     r2,#5
000018  0712              LSLS     r2,r2,#28
00001a  7cd2              LDRB     r2,[r2,#0x13]
00001c  4382              BICS     r2,r2,r0
00001e  2305              MOVS     r3,#5
000020  071b              LSLS     r3,r3,#28
000022  74da              STRB     r2,[r3,#0x13]
                  |L12.36|
;;;159        }
;;;160    }
000024  4770              BX       lr
;;;161    
                          ENDP


                          AREA ||i.EXIC_PxTriggerITEA_Cmd||, CODE, READONLY, ALIGN=1

                  EXIC_PxTriggerITEA_Cmd PROC
;;;193     */
;;;194    void EXIC_PxTriggerITEA_Cmd(uint32_t EXIC_PX_IT, FunctionalState EXIC_IT_State)
000000  2901              CMP      r1,#1
;;;195    {    
;;;196        if(EXIC_IT_State==ENABLE)
000002  d107              BNE      |L13.20|
;;;197        {
;;;198            EXIC->INT.W = EXIC->INT.W | EXIC_PX_IT;
000004  2205              MOVS     r2,#5
000006  0712              LSLS     r2,r2,#28
000008  6852              LDR      r2,[r2,#4]
00000a  4302              ORRS     r2,r2,r0
00000c  2305              MOVS     r3,#5
00000e  071b              LSLS     r3,r3,#28
000010  605a              STR      r2,[r3,#4]
000012  e006              B        |L13.34|
                  |L13.20|
;;;199        }
;;;200        else
;;;201        {
;;;202            EXIC->INT.W = EXIC->INT.W & (~EXIC_PX_IT);
000014  2205              MOVS     r2,#5
000016  0712              LSLS     r2,r2,#28
000018  6852              LDR      r2,[r2,#4]
00001a  4382              BICS     r2,r2,r0
00001c  2305              MOVS     r3,#5
00001e  071b              LSLS     r3,r3,#28
000020  605a              STR      r2,[r3,#4]
                  |L13.34|
;;;203        }
;;;204    } 
000022  4770              BX       lr
;;;205    
                          ENDP


                          AREA ||i.EXIC_PxTriggerMode_Select||, CODE, READONLY, ALIGN=2

                  EXIC_PxTriggerMode_Select PROC
;;;72      */
;;;73     DRV_Return EXIC_PxTriggerMode_Select(EXIC_PX_Struct* EXIC_PX ,EXIC_TRGSTypeDef* EXIC_PX_TRGS )
000000  b510              PUSH     {r4,lr}
;;;74     {
000002  4602              MOV      r2,r0
;;;75         uint32_t Tmp;
;;;76         
;;;77         if((EXIC_PX_TRGS->EXIC_Pin & (~EXIC_TRGS_ALL))!=0)
000004  4c0a              LDR      r4,|L14.48|
000006  6808              LDR      r0,[r1,#0]
000008  4020              ANDS     r0,r0,r4
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L14.18|
;;;78         {
;;;79             return(DRV_Failure);
00000e  2001              MOVS     r0,#1
                  |L14.16|
;;;80         }
;;;81         
;;;82         Tmp = EXIC_PX->TRGS.W;
;;;83         Tmp = Tmp & (~((EXIC_PX_TRGS->EXIC_Pin) * Dual_edge));
;;;84         Tmp = Tmp | ((EXIC_PX_TRGS->EXIC_Pin) * (EXIC_PX_TRGS->EXIC_TRGS_Mode));
;;;85         EXIC_PX->TRGS.W = Tmp;
;;;86         return(DRV_Success);
;;;87     }
000010  bd10              POP      {r4,pc}
                  |L14.18|
000012  6853              LDR      r3,[r2,#4]            ;82
000014  6808              LDR      r0,[r1,#0]            ;83
000016  0044              LSLS     r4,r0,#1              ;83
000018  1904              ADDS     r4,r0,r4              ;83
00001a  4618              MOV      r0,r3                 ;83
00001c  43a0              BICS     r0,r0,r4              ;83
00001e  4603              MOV      r3,r0                 ;83
000020  790c              LDRB     r4,[r1,#4]            ;84
000022  6808              LDR      r0,[r1,#0]            ;84
000024  4360              MULS     r0,r4,r0              ;84
000026  4303              ORRS     r3,r3,r0              ;84
000028  6053              STR      r3,[r2,#4]            ;85
00002a  2000              MOVS     r0,#0                 ;86
00002c  e7f0              B        |L14.16|
;;;88     
                          ENDP

00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      0xaaaaaaaa

                          AREA ||i.EXIC_PxTriggerOrMask_Select||, CODE, READONLY, ALIGN=1

                  EXIC_PxTriggerOrMask_Select PROC
;;;125     */
;;;126    void EXIC_PxTriggerOrMask_Select(EXIC_PX_Struct* EXIC_PX , uint16_t  EXIC_MSK_PIN)
000000  8101              STRH     r1,[r0,#8]
;;;127    {
;;;128        EXIC_PX->MSK.H[0] = EXIC_MSK_PIN;
;;;129    }
000002  4770              BX       lr
;;;130    
                          ENDP


                          AREA ||i.EXIC_RXEV_Cmd||, CODE, READONLY, ALIGN=1

                  EXIC_RXEV_Cmd PROC
;;;453     */
;;;454    void EXIC_RXEV_Cmd(FunctionalState RXEV_State)
000000  2105              MOVS     r1,#5
;;;455    {
;;;456        EXIC->CR0.MBIT.EM_RXEV = RXEV_State;
000002  0709              LSLS     r1,r1,#28
000004  7c49              LDRB     r1,[r1,#0x11]
000006  2202              MOVS     r2,#2
000008  4391              BICS     r1,r1,r2
00000a  0042              LSLS     r2,r0,#1
00000c  2302              MOVS     r3,#2
00000e  401a              ANDS     r2,r2,r3
000010  4311              ORRS     r1,r1,r2
000012  2205              MOVS     r2,#5
000014  0712              LSLS     r2,r2,#28
000016  7451              STRB     r1,[r2,#0x11]
;;;457    }
000018  4770              BX       lr
;;;458    
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_EXIC_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_MG32x02z_EXIC_DRV_c_111a328f____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___19_MG32x02z_EXIC_DRV_c_111a328f____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_MG32x02z_EXIC_DRV_c_111a328f____REVSH|
#line 496
|__asm___19_MG32x02z_EXIC_DRV_c_111a328f____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
