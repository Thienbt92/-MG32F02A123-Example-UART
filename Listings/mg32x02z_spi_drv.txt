; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_spi_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_spi_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_spi_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_SPI_DRV.c]
                          THUMB

                          AREA ||i.SPI_BidirectionalOutput_Cmd||, CODE, READONLY, ALIGN=2

                  SPI_BidirectionalOutput_Cmd PROC
;;;1007    */
;;;1008   void SPI_BidirectionalOutput_Cmd (SPI_Struct* SPIx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1009   { 
;;;1010       SPIx->CR2.MBIT.BDIR_OE = NewState;
000002  7e02              LDRB     r2,[r0,#0x18]
000004  2304              MOVS     r3,#4
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  2404              MOVS     r4,#4
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7602              STRB     r2,[r0,#0x18]
;;;1011       
;;;1012   #if (defined(MG32_1ST))
;;;1013       if(NewState != DISABLE)
000012  2900              CMP      r1,#0
000014  d00c              BEQ      |L1.48|
;;;1014       {
;;;1015           if(PIND(2)->CR.MBIT.AFS == 7)
000016  4a0d              LDR      r2,|L1.76|
000018  7a52              LDRB     r2,[r2,#9]
00001a  0912              LSRS     r2,r2,#4
00001c  2a07              CMP      r2,#7
00001e  d113              BNE      |L1.72|
;;;1016           {
;;;1017               PIND(2)->CR.MBIT.IOM = 2;
000020  4a0a              LDR      r2,|L1.76|
000022  7a12              LDRB     r2,[r2,#8]
000024  08d2              LSRS     r2,r2,#3
000026  00d2              LSLS     r2,r2,#3
000028  1c92              ADDS     r2,r2,#2
00002a  4b08              LDR      r3,|L1.76|
00002c  721a              STRB     r2,[r3,#8]
00002e  e00b              B        |L1.72|
                  |L1.48|
;;;1018           }
;;;1019       }
;;;1020       else
;;;1021       {
;;;1022           if(PIND(2)->CR.MBIT.AFS == 7)
000030  4a06              LDR      r2,|L1.76|
000032  7a52              LDRB     r2,[r2,#9]
000034  0912              LSRS     r2,r2,#4
000036  2a07              CMP      r2,#7
000038  d106              BNE      |L1.72|
;;;1023           {
;;;1024               PIND(2)->CR.MBIT.IOM = 3;
00003a  4a04              LDR      r2,|L1.76|
00003c  7a12              LDRB     r2,[r2,#8]
00003e  08d2              LSRS     r2,r2,#3
000040  00d2              LSLS     r2,r2,#3
000042  1cd2              ADDS     r2,r2,#3
000044  4b01              LDR      r3,|L1.76|
000046  721a              STRB     r2,[r3,#8]
                  |L1.72|
;;;1025           }
;;;1026       }
;;;1027   #endif
;;;1028   }
000048  bd10              POP      {r4,pc}
;;;1029   
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      0x44030000

                          AREA ||i.SPI_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_ClearFlag PROC
;;;1433    */
;;;1434   void SPI_ClearFlag (SPI_Struct* SPIx, uint32_t SPI_Flag)
000000  8001              STRH     r1,[r0,#0]
;;;1435   {
;;;1436       SPIx->STA.H[0] = SPI_Flag;
;;;1437   }
000002  4770              BX       lr
;;;1438   
                          ENDP


                          AREA ||i.SPI_ClearRxData||, CODE, READONLY, ALIGN=1

                  SPI_ClearRxData PROC
;;;687     */
;;;688    void SPI_ClearRxData (SPI_Struct* SPIx)
000000  7d01              LDRB     r1,[r0,#0x14]
;;;689    {
;;;690        SPIx->CR1.MBIT.RDAT_CLR = 1;
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1
000006  1c49              ADDS     r1,r1,#1
000008  7501              STRB     r1,[r0,#0x14]
;;;691    }
00000a  4770              BX       lr
;;;692     
                          ENDP


                          AREA ||i.SPI_ClearTxData||, CODE, READONLY, ALIGN=1

                  SPI_ClearTxData PROC
;;;751     */
;;;752    void SPI_ClearTxData (SPI_Struct* SPIx)
000000  7d01              LDRB     r1,[r0,#0x14]
;;;753    {
;;;754        SPIx->CR1.MBIT.TDAT_CLR = 1;
000002  2202              MOVS     r2,#2
000004  4391              BICS     r1,r1,r2
000006  1c89              ADDS     r1,r1,#2
000008  7501              STRB     r1,[r0,#0x14]
;;;755    }
00000a  4770              BX       lr
;;;756     
                          ENDP


                          AREA ||i.SPI_ClockOutputSignal_Select||, CODE, READONLY, ALIGN=1

                  SPI_ClockOutputSignal_Select PROC
;;;1158    */
;;;1159   void SPI_ClockOutputSignal_Select (SPI_Struct* SPIx, CKOMUX_Enum SPI_CKOS)
000000  b510              PUSH     {r4,lr}
;;;1160   {
;;;1161       SPIx->CR2.MBIT.CKO_MUX = SPI_CKOS;
000002  7ec2              LDRB     r2,[r0,#0x1b]
000004  2370              MOVS     r3,#0x70
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2470              MOVS     r4,#0x70
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  76c2              STRB     r2,[r0,#0x1b]
;;;1162   }
000012  bd10              POP      {r4,pc}
;;;1163   
                          ENDP


                          AREA ||i.SPI_ClockPhase_Select||, CODE, READONLY, ALIGN=1

                  SPI_ClockPhase_Select PROC
;;;597     */
;;;598    void SPI_ClockPhase_Select (SPI_Struct* SPIx, CPHA_Enum SPI_CPHAS)
000000  b510              PUSH     {r4,lr}
;;;599    {
;;;600        SPIx->CR0.MBIT.CPHA = SPI_CPHAS;
000002  7c02              LDRB     r2,[r0,#0x10]
000004  2304              MOVS     r3,#4
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  2404              MOVS     r4,#4
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7402              STRB     r2,[r0,#0x10]
;;;601    }
000012  bd10              POP      {r4,pc}
;;;602    
                          ENDP


                          AREA ||i.SPI_ClockPolarity_Select||, CODE, READONLY, ALIGN=1

                  SPI_ClockPolarity_Select PROC
;;;619     */
;;;620    void SPI_ClockPolarity_Select (SPI_Struct* SPIx, CPOL_Enum SPI_CPOLS)
000000  b510              PUSH     {r4,lr}
;;;621    {
;;;622        SPIx->CR0.MBIT.CPOL = SPI_CPOLS;
000002  7c02              LDRB     r2,[r0,#0x10]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7402              STRB     r2,[r0,#0x10]
;;;623    }
000012  bd10              POP      {r4,pc}
;;;624    
                          ENDP


                          AREA ||i.SPI_Clock_Select||, CODE, READONLY, ALIGN=1

                  SPI_Clock_Select PROC
;;;82      */
;;;83     void SPI_Clock_Select (SPI_Struct* SPIx, SPI_CLKS_Enum SPI_CLKS)
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85         SPIx->CLK.MBIT.CK_SEL = SPI_CLKS;
000002  7a02              LDRB     r2,[r0,#8]
000004  230c              MOVS     r3,#0xc
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  240c              MOVS     r4,#0xc
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7202              STRB     r2,[r0,#8]
;;;86     }
000012  bd10              POP      {r4,pc}
;;;87     
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;545     */
;;;546    void SPI_Cmd(SPI_Struct* SPIx, FunctionalState NewState)
000000  7c02              LDRB     r2,[r0,#0x10]
;;;547    {
;;;548        SPIx->CR0.MBIT.EN = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7402              STRB     r2,[r0,#0x10]
;;;549    }
00000e  4770              BX       lr
;;;550    
                          ENDP


                          AREA ||i.SPI_DataLineOutput_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_DataLineOutput_Cmd PROC
;;;956     */
;;;957    void SPI_DataLineOutput_Cmd (SPI_Struct* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;958    {
;;;959        if(NewState != DISABLE)
000002  d004              BEQ      |L10.14|
;;;960        {
;;;961            SPIx->CR2.MBIT.TX_DIS = 0;
000004  7e02              LDRB     r2,[r0,#0x18]
000006  2380              MOVS     r3,#0x80
000008  439a              BICS     r2,r2,r3
00000a  7602              STRB     r2,[r0,#0x18]
00000c  e004              B        |L10.24|
                  |L10.14|
;;;962        }
;;;963        else
;;;964        {
;;;965            SPIx->CR2.MBIT.TX_DIS = 1;
00000e  7e02              LDRB     r2,[r0,#0x18]
000010  2380              MOVS     r3,#0x80
000012  439a              BICS     r2,r2,r3
000014  3280              ADDS     r2,r2,#0x80
000016  7602              STRB     r2,[r0,#0x18]
                  |L10.24|
;;;966        }
;;;967    }
000018  4770              BX       lr
;;;968    
                          ENDP


                          AREA ||i.SPI_DataLine_Select||, CODE, READONLY, ALIGN=1

                  SPI_DataLine_Select PROC
;;;934     */
;;;935    void SPI_DataLine_Select (SPI_Struct* SPIx, DATALINE_Enum SPI_LINES)
000000  b510              PUSH     {r4,lr}
;;;936    {
;;;937        SPIx->CR2.MBIT.DAT_LINE = SPI_LINES;
000002  7e02              LDRB     r2,[r0,#0x18]
000004  2370              MOVS     r3,#0x70
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2470              MOVS     r4,#0x70
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7602              STRB     r2,[r0,#0x18]
;;;938    }  
000012  bd10              POP      {r4,pc}
;;;939    
                          ENDP


                          AREA ||i.SPI_DataSize_Select||, CODE, READONLY, ALIGN=1

                  SPI_DataSize_Select PROC
;;;908     */
;;;909    void SPI_DataSize_Select (SPI_Struct* SPIx, DSIZE_Enum SPI_DSIZES)
000000  7e82              LDRB     r2,[r0,#0x1a]
;;;910    {
;;;911        SPIx->CR2.MBIT.DSIZE = SPI_DSIZES;
000002  0952              LSRS     r2,r2,#5
000004  0152              LSLS     r2,r2,#5
000006  06cb              LSLS     r3,r1,#27
000008  0edb              LSRS     r3,r3,#27
00000a  431a              ORRS     r2,r2,r3
00000c  7682              STRB     r2,[r0,#0x1a]
;;;912    }
00000e  4770              BX       lr
;;;913    
                          ENDP


                          AREA ||i.SPI_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_DeInit PROC
;;;48      */
;;;49     void SPI_DeInit (SPI_Struct* SPIx)
000000  2100              MOVS     r1,#0
;;;50     {
;;;51         SPIx->CR0.W = 0x00000000;
000002  6101              STR      r1,[r0,#0x10]
;;;52         SPIx->STA.W = 0x00000FD8;
000004  4904              LDR      r1,|L13.24|
000006  6001              STR      r1,[r0,#0]
;;;53         SPIx->INT.W = 0x00000000;
000008  2100              MOVS     r1,#0
00000a  6041              STR      r1,[r0,#4]
;;;54         SPIx->CLK.W = 0x00000000;
00000c  6081              STR      r1,[r0,#8]
;;;55         SPIx->CR1.W = 0x00000000;
00000e  6141              STR      r1,[r0,#0x14]
;;;56         SPIx->CR2.W = 0x03000100;
000010  4902              LDR      r1,|L13.28|
000012  6181              STR      r1,[r0,#0x18]
;;;57     }
000014  4770              BX       lr
;;;58     ///@} 
                          ENDP

000016  0000              DCW      0x0000
                  |L13.24|
                          DCD      0x00000fd8
                  |L13.28|
                          DCD      0x03000100

                          AREA ||i.SPI_Divider_Select||, CODE, READONLY, ALIGN=1

                  SPI_Divider_Select PROC
;;;158     */
;;;159    void SPI_Divider_Select (SPI_Struct* SPIx, SPI_DIV_Enum SPI_DIVS)
000000  b510              PUSH     {r4,lr}
;;;160    {
;;;161        SPIx->CLK.MBIT.CK_DIV = SPI_DIVS;
000002  7a02              LDRB     r2,[r0,#8]
000004  2330              MOVS     r3,#0x30
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2430              MOVS     r4,#0x30
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7202              STRB     r2,[r0,#8]
;;;162    }
000012  bd10              POP      {r4,pc}
;;;163    
                          ENDP


                          AREA ||i.SPI_FirstBit_Select||, CODE, READONLY, ALIGN=1

                  SPI_FirstBit_Select PROC
;;;641     */ 
;;;642    void SPI_FirstBit_Select (SPI_Struct* SPIx, SPI_FBS_Enum SPI_FBS)
000000  b510              PUSH     {r4,lr}
;;;643    {
;;;644        SPIx->CR0.MBIT.LSB_EN = SPI_FBS;
000002  7c02              LDRB     r2,[r0,#0x10]
000004  2308              MOVS     r3,#8
000006  439a              BICS     r2,r2,r3
000008  00cb              LSLS     r3,r1,#3
00000a  2408              MOVS     r4,#8
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7402              STRB     r2,[r0,#0x10]
;;;645    }
000012  bd10              POP      {r4,pc}
;;;646    ///@} 
                          ENDP


                          AREA ||i.SPI_GetAllFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_GetAllFlagStatus PROC
;;;1361    */
;;;1362   uint32_t SPI_GetAllFlagStatus (SPI_Struct* SPIx)
000000  4601              MOV      r1,r0
;;;1363   {
;;;1364       return (SPIx->STA.W & 0x0000FFFF);
000002  6808              LDR      r0,[r1,#0]
000004  b280              UXTH     r0,r0
;;;1365   }
000006  4770              BX       lr
;;;1366   
                          ENDP


                          AREA ||i.SPI_GetDataBufferReceivedBytes||, CODE, READONLY, ALIGN=1

                  SPI_GetDataBufferReceivedBytes PROC
;;;707     */
;;;708    uint8_t SPI_GetDataBufferReceivedBytes (SPI_Struct* SPIx)
000000  4601              MOV      r1,r0
;;;709    {
;;;710        return SPIx->STA.MBIT.RNUM;
000002  78c8              LDRB     r0,[r1,#3]
000004  0740              LSLS     r0,r0,#29
000006  0f40              LSRS     r0,r0,#29
;;;711    }
000008  4770              BX       lr
;;;712     
                          ENDP


                          AREA ||i.SPI_GetNSSInputStatust||, CODE, READONLY, ALIGN=1

                  SPI_GetNSSInputStatust PROC
;;;475     */
;;;476    DRV_Return SPI_GetNSSInputStatust (SPI_Struct* SPIx)
000000  4601              MOV      r1,r0
;;;477    {
;;;478        DRV_Return bitstatus = DRV_Low;
000002  2000              MOVS     r0,#0
;;;479        
;;;480        if(SPIx->CR2.MBIT.NSS_SWI != 0)
000004  7eca              LDRB     r2,[r1,#0x1b]
000006  0792              LSLS     r2,r2,#30
000008  0fd2              LSRS     r2,r2,#31
00000a  2a00              CMP      r2,#0
00000c  d000              BEQ      |L18.16|
;;;481        {
;;;482            bitstatus = DRV_High;
00000e  2001              MOVS     r0,#1
                  |L18.16|
;;;483        }
;;;484        return bitstatus;
;;;485    }
000010  4770              BX       lr
;;;486    
                          ENDP


                          AREA ||i.SPI_GetRxData||, CODE, READONLY, ALIGN=1

                  SPI_GetRxData PROC
;;;791     */
;;;792    uint32_t SPI_GetRxData (SPI_Struct* SPIx)
000000  4601              MOV      r1,r0
;;;793    {
;;;794        return SPIx->RDAT.W;
000002  6b08              LDR      r0,[r1,#0x30]
;;;795    } 
000004  4770              BX       lr
;;;796     
                          ENDP


                          AREA ||i.SPI_GetRxShadowBufferLevel||, CODE, READONLY, ALIGN=1

                  SPI_GetRxShadowBufferLevel PROC
;;;668     */
;;;669    uint8_t SPI_GetRxShadowBufferLevel (SPI_Struct* SPIx)
000000  4601              MOV      r1,r0
;;;670    {
;;;671        return SPIx->STA.MBIT.RX_LVL;
000002  7888              LDRB     r0,[r1,#2]
000004  0740              LSLS     r0,r0,#29
000006  0f40              LSRS     r0,r0,#29
;;;672    }
000008  4770              BX       lr
;;;673    
                          ENDP


                          AREA ||i.SPI_GetSingleFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_GetSingleFlagStatus PROC
;;;1394    */
;;;1395   DRV_Return SPI_GetSingleFlagStatus (SPI_Struct* SPIx, uint32_t SPI_Flag)
000000  4602              MOV      r2,r0
;;;1396   {
;;;1397       
;;;1398       DRV_Return bitstatus = DRV_Normal;
000002  2000              MOVS     r0,#0
;;;1399       
;;;1400       if((SPIx->STA.W & SPI_Flag) != 0)
000004  6813              LDR      r3,[r2,#0]
000006  400b              ANDS     r3,r3,r1
000008  2b00              CMP      r3,#0
00000a  d000              BEQ      |L21.14|
;;;1401       {
;;;1402           bitstatus = DRV_Happened; 
00000c  2001              MOVS     r0,#1
                  |L21.14|
;;;1403       }
;;;1404       
;;;1405       return bitstatus;
;;;1406   }
00000e  4770              BX       lr
;;;1407    
                          ENDP


                          AREA ||i.SPI_GetTxData||, CODE, READONLY, ALIGN=1

                  SPI_GetTxData PROC
;;;854     */
;;;855    uint32_t SPI_GetTxData (SPI_Struct* SPIx)
000000  4601              MOV      r1,r0
;;;856    {
;;;857        return SPIx->TDAT.W;
000002  6b48              LDR      r0,[r1,#0x34]
;;;858    }
000004  4770              BX       lr
;;;859     
                          ENDP


                          AREA ||i.SPI_GetTxShadowBufferLevel||, CODE, READONLY, ALIGN=1

                  SPI_GetTxShadowBufferLevel PROC
;;;771     */
;;;772    uint8_t SPI_GetTxShadowBufferLevel (SPI_Struct* SPIx)
000000  4601              MOV      r1,r0
;;;773    {
;;;774        return SPIx->STA.MBIT.TX_LVL;
000002  7888              LDRB     r0,[r1,#2]
000004  0640              LSLS     r0,r0,#25
000006  0f40              LSRS     r0,r0,#29
;;;775    }
000008  4770              BX       lr
;;;776     
                          ENDP


                          AREA ||i.SPI_ITEA_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_ITEA_Cmd PROC
;;;1493    */
;;;1494   void SPI_ITEA_Cmd (SPI_Struct* SPIx, FunctionalState NewState)
000000  7902              LDRB     r2,[r0,#4]
;;;1495   {
;;;1496       SPIx->INT.MBIT.IEA  = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7102              STRB     r2,[r0,#4]
;;;1497   }
00000e  4770              BX       lr
;;;1498   ///@}
                          ENDP


                          AREA ||i.SPI_IT_Config||, CODE, READONLY, ALIGN=1

                  SPI_IT_Config PROC
;;;1464    */
;;;1465   void SPI_IT_Config (SPI_Struct* SPIx, uint32_t SPI_INTS, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;1466   {
;;;1467       if(NewState != DISABLE)
000002  d003              BEQ      |L25.12|
;;;1468       {
;;;1469           SPIx->INT.W |= SPI_INTS;
000004  6843              LDR      r3,[r0,#4]
000006  430b              ORRS     r3,r3,r1
000008  6043              STR      r3,[r0,#4]
00000a  e002              B        |L25.18|
                  |L25.12|
;;;1470       }
;;;1471       else
;;;1472       {
;;;1473           SPIx->INT.W &= ~SPI_INTS;
00000c  6843              LDR      r3,[r0,#4]
00000e  438b              BICS     r3,r3,r1
000010  6043              STR      r3,[r0,#4]
                  |L25.18|
;;;1474       }
;;;1475   }
000012  4770              BX       lr
;;;1476    
                          ENDP


                          AREA ||i.SPI_LoopBackMode_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_LoopBackMode_Cmd PROC
;;;1132    */
;;;1133   void SPI_LoopBackMode_Cmd (SPI_Struct* SPIx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1134   {
;;;1135       SPIx->CR0.MBIT.LBM_EN = NewState;
000002  7c82              LDRB     r2,[r0,#0x12]
000004  2308              MOVS     r3,#8
000006  439a              BICS     r2,r2,r3
000008  00cb              LSLS     r3,r1,#3
00000a  2408              MOVS     r4,#8
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7482              STRB     r2,[r0,#0x12]
;;;1136   }
000012  bd10              POP      {r4,pc}
;;;1137    
                          ENDP


                          AREA ||i.SPI_ModeAndNss_Select||, CODE, READONLY, ALIGN=1

                  SPI_ModeAndNss_Select PROC
;;;261     */
;;;262    void SPI_ModeAndNss_Select (SPI_Struct* SPIx, MODNSS_Enum SPI_MNS)
000000  6902              LDR      r2,[r0,#0x10]
;;;263    {
;;;264        SPIx->CR0.W &= ~0x00000330;
000002  2333              MOVS     r3,#0x33
000004  011b              LSLS     r3,r3,#4
000006  439a              BICS     r2,r2,r3
000008  6102              STR      r2,[r0,#0x10]
;;;265        SPIx->CR0.W |= SPI_MNS;
00000a  6902              LDR      r2,[r0,#0x10]
00000c  430a              ORRS     r2,r2,r1
00000e  6102              STR      r2,[r0,#0x10]
;;;266    }
000010  4770              BX       lr
;;;267    
                          ENDP


                          AREA ||i.SPI_ModfHappenedAction_Select||, CODE, READONLY, ALIGN=1

                  SPI_ModfHappenedAction_Select PROC
;;;284     */
;;;285    void SPI_ModfHappenedAction_Select (SPI_Struct* SPIx, MODF_Enum SPI_MODFS)
000000  b510              PUSH     {r4,lr}
;;;286    {
;;;287        SPIx->CR0.MBIT.MODF_SEL = SPI_MODFS;
000002  7c42              LDRB     r2,[r0,#0x11]
000004  2380              MOVS     r3,#0x80
000006  439a              BICS     r2,r2,r3
000008  01cb              LSLS     r3,r1,#7
00000a  2480              MOVS     r4,#0x80
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7442              STRB     r2,[r0,#0x11]
;;;288    }
000012  bd10              POP      {r4,pc}
;;;289    
                          ENDP


                          AREA ||i.SPI_MosiMisoSignalSwap_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_MosiMisoSignalSwap_Cmd PROC
;;;1086    */
;;;1087   void SPI_MosiMisoSignalSwap_Cmd (SPI_Struct* SPIx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1088   {
;;;1089       SPIx->CR0.MBIT.IO_SWP = NewState;
000002  7c02              LDRB     r2,[r0,#0x10]
000004  2380              MOVS     r3,#0x80
000006  439a              BICS     r2,r2,r3
000008  01cb              LSLS     r3,r1,#7
00000a  2480              MOVS     r4,#0x80
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7402              STRB     r2,[r0,#0x10]
;;;1090   }
000012  bd10              POP      {r4,pc}
;;;1091   
                          ENDP


                          AREA ||i.SPI_NSSInputSignal_Select||, CODE, READONLY, ALIGN=1

                  SPI_NSSInputSignal_Select PROC
;;;306     */ 
;;;307    void SPI_NSSInputSignal_Select (SPI_Struct* SPIx, NSSI_Enum SPI_NSSIS)
000000  b510              PUSH     {r4,lr}
;;;308    {
;;;309        SPIx->CR0.MBIT.NSSI_SEL = SPI_NSSIS;
000002  7c42              LDRB     r2,[r0,#0x11]
000004  2304              MOVS     r3,#4
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  2404              MOVS     r4,#4
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7442              STRB     r2,[r0,#0x11]
;;;310    }
000012  bd10              POP      {r4,pc}
;;;311    
                          ENDP


                          AREA ||i.SPI_NSSInputStatusControl_SW||, CODE, READONLY, ALIGN=1

                  SPI_NSSInputStatusControl_SW PROC
;;;502     */
;;;503    void SPI_NSSInputStatusControl_SW (SPI_Struct* SPIx, uint8_t NSSIState)
000000  b510              PUSH     {r4,lr}
;;;504    {
;;;505        SPIx->CR2.MBIT.NSS_SWI = NSSIState;
000002  7ec2              LDRB     r2,[r0,#0x1b]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  76c2              STRB     r2,[r0,#0x1b]
;;;506    }
000012  bd10              POP      {r4,pc}
;;;507    
                          ENDP


                          AREA ||i.SPI_NSSOutputStatusControl_SW||, CODE, READONLY, ALIGN=1

                  SPI_NSSOutputStatusControl_SW PROC
;;;524     */
;;;525    void SPI_NSSOutputStatusControl_SW (SPI_Struct* SPIx, DRV_Return NewStatus)
000000  7ec2              LDRB     r2,[r0,#0x1b]
;;;526    {
;;;527        SPIx->CR2.MBIT.NSS_SWO = NewStatus;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  76c2              STRB     r2,[r0,#0x1b]
;;;528    }
00000e  4770              BX       lr
;;;529    
                          ENDP


                          AREA ||i.SPI_NssInputInverse_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_NssInputInverse_Cmd PROC
;;;356     */
;;;357    void SPI_NssInputInverse_Cmd (SPI_Struct* SPIx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;358    {
;;;359        SPIx->CR0.MBIT.NSSI_INV = NewState;
000002  7c42              LDRB     r2,[r0,#0x11]
000004  2320              MOVS     r3,#0x20
000006  439a              BICS     r2,r2,r3
000008  014b              LSLS     r3,r1,#5
00000a  2420              MOVS     r4,#0x20
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7442              STRB     r2,[r0,#0x11]
;;;360    }
000012  bd10              POP      {r4,pc}
;;;361     
                          ENDP


                          AREA ||i.SPI_NssInputOutputSoftwareControl_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_NssInputOutputSoftwareControl_Cmd PROC
;;;400     */
;;;401    void SPI_NssInputOutputSoftwareControl_Cmd (SPI_Struct* SPIx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;402    {
;;;403        #if (defined(MG32_1ST))
;;;404            SPIx->CR0.MBIT.NSS_SWEN = NewState;
000002  7c42              LDRB     r2,[r0,#0x11]
000004  2308              MOVS     r3,#8
000006  439a              BICS     r2,r2,r3
000008  00cb              LSLS     r3,r1,#3
00000a  2408              MOVS     r4,#8
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7442              STRB     r2,[r0,#0x11]
;;;405        #endif
;;;406        #if (defined(MG32_2ND) || defined(MG32_3RD))
;;;407            SPIx->CR0.MBIT.NSS_SWEN = NewState;
;;;408            SPIx->CR0.MBIT.NSSI_SWEN = NewState;
;;;409        #endif
;;;410    }
000012  bd10              POP      {r4,pc}
;;;411    
                          ENDP


                          AREA ||i.SPI_NssOutputInverse_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_NssOutputInverse_Cmd PROC
;;;378     */
;;;379    void SPI_NssOutputInverse_Cmd (SPI_Struct* SPIx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;380    {
;;;381        SPIx->CR0.MBIT.NSSO_INV = NewState;
000002  7c42              LDRB     r2,[r0,#0x11]
000004  2310              MOVS     r3,#0x10
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2410              MOVS     r4,#0x10
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7442              STRB     r2,[r0,#0x11]
;;;382    }
000012  bd10              POP      {r4,pc}
;;;383     
                          ENDP


                          AREA ||i.SPI_PreDivider_Select||, CODE, READONLY, ALIGN=1

                  SPI_PreDivider_Select PROC
;;;106     */
;;;107    void SPI_PreDivider_Select (SPI_Struct* SPIx, SPI_PDIV_Enum SPI_PDIVS)
000000  b510              PUSH     {r4,lr}
;;;108    {
;;;109        SPIx->CLK.MBIT.CK_PDIV = SPI_PDIVS;
000002  7a42              LDRB     r2,[r0,#9]
000004  2330              MOVS     r3,#0x30
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2430              MOVS     r4,#0x30
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7242              STRB     r2,[r0,#9]
;;;110    }
000012  bd10              POP      {r4,pc}
;;;111    
                          ENDP


                          AREA ||i.SPI_Prescaler_Select||, CODE, READONLY, ALIGN=1

                  SPI_Prescaler_Select PROC
;;;134     */
;;;135    void SPI_Prescaler_Select (SPI_Struct* SPIx, SPI_PSC_Enum SPI_PSCS)
000000  7a42              LDRB     r2,[r0,#9]
;;;136    {
;;;137        SPIx->CLK.MBIT.CK_PSC = SPI_PSCS;
000002  08d2              LSRS     r2,r2,#3
000004  00d2              LSLS     r2,r2,#3
000006  074b              LSLS     r3,r1,#29
000008  0f5b              LSRS     r3,r3,#29
00000a  431a              ORRS     r2,r2,r3
00000c  7242              STRB     r2,[r0,#9]
;;;138    } 
00000e  4770              BX       lr
;;;139    
                          ENDP


                          AREA ||i.SPI_RXDMA_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_RXDMA_Cmd PROC
;;;1310    */
;;;1311   void SPI_RXDMA_Cmd (SPI_Struct* SPIx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1312   {
;;;1313       SPIx->CR0.MBIT.DMA_RXEN = NewState;
000002  7cc2              LDRB     r2,[r0,#0x13]
000004  2340              MOVS     r3,#0x40
000006  439a              BICS     r2,r2,r3
000008  018b              LSLS     r3,r1,#6
00000a  2440              MOVS     r4,#0x40
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  74c2              STRB     r2,[r0,#0x13]
;;;1314   }
000012  bd10              POP      {r4,pc}
;;;1315   
                          ENDP


                          AREA ||i.SPI_SendCopyMode_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_SendCopyMode_Cmd PROC
;;;985     */
;;;986    void SPI_SendCopyMode_Cmd (SPI_Struct* SPIx, FunctionalState NewState)
000000  460a              MOV      r2,r1
;;;987    {
;;;988        SPIx->CR2.MBIT.COPY_EN = DISABLE;
000002  7e01              LDRB     r1,[r0,#0x18]
000004  2308              MOVS     r3,#8
000006  4399              BICS     r1,r1,r3
000008  7601              STRB     r1,[r0,#0x18]
;;;989    }
00000a  4770              BX       lr
;;;990    
                          ENDP


                          AREA ||i.SPI_SetDataBufferReceivedBytes||, CODE, READONLY, ALIGN=1

                  SPI_SetDataBufferReceivedBytes PROC
;;;732     */
;;;733    void SPI_SetDataBufferReceivedBytes (SPI_Struct* SPIx, RNUM_Enum SPI_RNUMS)
000000  78c2              LDRB     r2,[r0,#3]
;;;734    {
;;;735        SPIx->STA.MBIT.RNUM = SPI_RNUMS;
000002  08d2              LSRS     r2,r2,#3
000004  00d2              LSLS     r2,r2,#3
000006  074b              LSLS     r3,r1,#29
000008  0f5b              LSRS     r3,r3,#29
00000a  431a              ORRS     r2,r2,r3
00000c  70c2              STRB     r2,[r0,#3]
;;;736    }
00000e  4770              BX       lr
;;;737    
                          ENDP


                          AREA ||i.SPI_SetTxData||, CODE, READONLY, ALIGN=1

                  SPI_SetTxData PROC
;;;817     */
;;;818    void SPI_SetTxData (SPI_Struct* SPIx, Byte_Enum SPI_Byte, uint32_t SPI_DAT)
000000  b510              PUSH     {r4,lr}
;;;819    {
;;;820        switch(SPI_Byte)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L41.20|
000006  2901              CMP      r1,#1
000008  d007              BEQ      |L41.26|
00000a  2902              CMP      r1,#2
00000c  d007              BEQ      |L41.30|
00000e  2903              CMP      r1,#3
000010  d109              BNE      |L41.38|
000012  e006              B        |L41.34|
                  |L41.20|
;;;821        {
;;;822            case SPI_1Byte: 
;;;823                SPIx->TDAT.B[0] = SPI_DAT;
000014  2334              MOVS     r3,#0x34
000016  541a              STRB     r2,[r3,r0]
;;;824            break;
000018  e005              B        |L41.38|
                  |L41.26|
;;;825            
;;;826            case SPI_2Byte: 
;;;827                SPIx->TDAT.H[0] = SPI_DAT;
00001a  8682              STRH     r2,[r0,#0x34]
;;;828            break;
00001c  e003              B        |L41.38|
                  |L41.30|
;;;829            
;;;830            case SPI_3Byte: 
;;;831                SPIx->TDAT3.W = SPI_DAT;
00001e  6382              STR      r2,[r0,#0x38]
;;;832            break;
000020  e001              B        |L41.38|
                  |L41.34|
;;;833            
;;;834            case SPI_4Byte: 
;;;835                SPIx->TDAT.W = SPI_DAT;
000022  6342              STR      r2,[r0,#0x34]
;;;836            break;
000024  bf00              NOP      
                  |L41.38|
000026  bf00              NOP                            ;824
;;;837        }
;;;838    }
000028  bd10              POP      {r4,pc}
;;;839     
                          ENDP


                          AREA ||i.SPI_SingleMasterModeNssPulse_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_SingleMasterModeNssPulse_Cmd PROC
;;;328     */
;;;329    void SPI_SingleMasterModeNssPulse_Cmd (SPI_Struct* SPIx, FunctionalState NewState)
000000  460a              MOV      r2,r1
;;;330    {
;;;331    #if (defined(MG32_2ND) || defined(MG32_3RD))
;;;332        // For Version B
;;;333        SPIx->CR0.MBIT.NSS_PEN = NewState;
;;;334    #elif (defined(MG32_1ST))
;;;335        // For Version A
;;;336        SPIx->CR0.MBIT.NSS_PEN = 1;
000002  7c41              LDRB     r1,[r0,#0x11]
000004  2340              MOVS     r3,#0x40
000006  4399              BICS     r1,r1,r3
000008  3140              ADDS     r1,r1,#0x40
00000a  7441              STRB     r1,[r0,#0x11]
;;;337    #endif
;;;338    }
00000c  4770              BX       lr
;;;339    
                          ENDP


                          AREA ||i.SPI_SlaveModeReceivedThreshold_Select||, CODE, READONLY, ALIGN=1

                  SPI_SlaveModeReceivedThreshold_Select PROC
;;;878     */
;;;879    void SPI_SlaveModeReceivedThreshold_Select (SPI_Struct* SPIx, Byte_Enum SPI_RxTH)
000000  7e42              LDRB     r2,[r0,#0x19]
;;;880    {
;;;881        SPIx->CR2.MBIT.RX_TH = SPI_RxTH;
000002  0892              LSRS     r2,r2,#2
000004  0092              LSLS     r2,r2,#2
000006  078b              LSLS     r3,r1,#30
000008  0f9b              LSRS     r3,r3,#30
00000a  431a              ORRS     r2,r2,r3
00000c  7642              STRB     r2,[r0,#0x19]
;;;882    }
00000e  4770              BX       lr
;;;883    ///@} 
                          ENDP


                          AREA ||i.SPI_TXDMA_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_TXDMA_Cmd PROC
;;;1288    */
;;;1289   void SPI_TXDMA_Cmd (SPI_Struct* SPIx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;1290   {
;;;1291       SPIx->CR0.MBIT.DMA_TXEN = NewState;
000002  7cc2              LDRB     r2,[r0,#0x13]
000004  2380              MOVS     r3,#0x80
000006  439a              BICS     r2,r2,r3
000008  01cb              LSLS     r3,r1,#7
00000a  2480              MOVS     r4,#0x80
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  74c2              STRB     r2,[r0,#0x13]
;;;1292   } 
000012  bd10              POP      {r4,pc}
;;;1293   
                          ENDP


                          AREA ||i.SPI_TransferBidirection_Select||, CODE, READONLY, ALIGN=2

                  SPI_TransferBidirection_Select PROC
;;;1046    */
;;;1047   void SPI_TransferBidirection_Select (SPI_Struct* SPIx, SPI_BDIR_Enum BDIR_SEL)
000000  b510              PUSH     {r4,lr}
;;;1048   {
;;;1049       
;;;1050       SPIx->CR2.MBIT.BDIR_OE = BDIR_SEL;
000002  7e02              LDRB     r2,[r0,#0x18]
000004  2304              MOVS     r3,#4
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  2404              MOVS     r4,#4
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7602              STRB     r2,[r0,#0x18]
;;;1051   
;;;1052   #if (defined(MG32_1ST))    
;;;1053       if(BDIR_SEL == SPI_BDIR_OUT)
000012  2901              CMP      r1,#1
000014  d10c              BNE      |L45.48|
;;;1054       {
;;;1055           if(PIND(2)->CR.MBIT.AFS == 7)
000016  4a0d              LDR      r2,|L45.76|
000018  7a52              LDRB     r2,[r2,#9]
00001a  0912              LSRS     r2,r2,#4
00001c  2a07              CMP      r2,#7
00001e  d113              BNE      |L45.72|
;;;1056           {
;;;1057               PIND(2)->CR.MBIT.IOM = 2;
000020  4a0a              LDR      r2,|L45.76|
000022  7a12              LDRB     r2,[r2,#8]
000024  08d2              LSRS     r2,r2,#3
000026  00d2              LSLS     r2,r2,#3
000028  1c92              ADDS     r2,r2,#2
00002a  4b08              LDR      r3,|L45.76|
00002c  721a              STRB     r2,[r3,#8]
00002e  e00b              B        |L45.72|
                  |L45.48|
;;;1058           }
;;;1059       }
;;;1060       else
;;;1061       {
;;;1062           if(PIND(2)->CR.MBIT.AFS == 7)
000030  4a06              LDR      r2,|L45.76|
000032  7a52              LDRB     r2,[r2,#9]
000034  0912              LSRS     r2,r2,#4
000036  2a07              CMP      r2,#7
000038  d106              BNE      |L45.72|
;;;1063           {
;;;1064               PIND(2)->CR.MBIT.IOM = 3;
00003a  4a04              LDR      r2,|L45.76|
00003c  7a12              LDRB     r2,[r2,#8]
00003e  08d2              LSRS     r2,r2,#3
000040  00d2              LSLS     r2,r2,#3
000042  1cd2              ADDS     r2,r2,#3
000044  4b01              LDR      r3,|L45.76|
000046  721a              STRB     r2,[r3,#8]
                  |L45.72|
;;;1065           }
;;;1066       }
;;;1067   #endif
;;;1068   }
000048  bd10              POP      {r4,pc}
;;;1069   
                          ENDP

00004a  0000              DCW      0x0000
                  |L45.76|
                          DCD      0x44030000

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_SPI_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_SPI_DRV_c_a2ad70c2____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_SPI_DRV_c_a2ad70c2____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_SPI_DRV_c_a2ad70c2____REVSH|
#line 496
|__asm___18_MG32x02z_SPI_DRV_c_a2ad70c2____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
