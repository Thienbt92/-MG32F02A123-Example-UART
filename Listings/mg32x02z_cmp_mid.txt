; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_cmp_mid.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_cmp_mid.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_cmp_mid.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_CMP_MID.c]
                          THUMB

                          AREA ||i.MID_CMP_DeInit||, CODE, READONLY, ALIGN=1

                  MID_CMP_DeInit PROC
;;;158     */
;;;159    MID_StatusTypeDef MID_CMP_DeInit(CMP_HandleTypeDef *mCMP)
000000  b510              PUSH     {r4,lr}
;;;160    {
000002  4604              MOV      r4,r0
;;;161    
;;;162        /* Process locked */
;;;163        __MID_LOCK(mCMP);
000004  bf00              NOP      
000006  202c              MOVS     r0,#0x2c
000008  5d00              LDRB     r0,[r0,r4]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L1.18|
00000e  2002              MOVS     r0,#2
                  |L1.16|
;;;164    
;;;165        /* Check the CMP handle allocation and lock status */
;;;166        if(mCMP == NULL) 
;;;167        {
;;;168            return MID_FAILURE;
;;;169        }
;;;170        else
;;;171        {
;;;172            /* 1. Disable CMP */
;;;173            __DRV_CMP_DISABLE(mCMP);
;;;174    
;;;175            /* 2. Reset CMP register */
;;;176            mCMP->Instance->CR.W = (0x00000000U);
;;;177    
;;;178            /* DeInit the low level hardware: GPIO, CLOCK and NVIC */
;;;179            MID_CMP_MspDeInit(mCMP);
;;;180    
;;;181            /* Set CMP state */
;;;182            mCMP->State = MID_CMP_STATE_RESET;
;;;183        }
;;;184    
;;;185        /* Process unlocked */
;;;186        __MID_UNLOCK(mCMP);
;;;187    
;;;188        /* Return function status */
;;;189        return MID_SUCCESS;
;;;190    }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  2101              MOVS     r1,#1                 ;163
000014  202c              MOVS     r0,#0x2c              ;163
000016  5501              STRB     r1,[r0,r4]            ;163
000018  bf00              NOP                            ;163
00001a  2c00              CMP      r4,#0                 ;166
00001c  d101              BNE      |L1.34|
00001e  2001              MOVS     r0,#1                 ;168
000020  e7f6              B        |L1.16|
                  |L1.34|
000022  6820              LDR      r0,[r4,#0]            ;173
000024  6800              LDR      r0,[r0,#0]            ;173
000026  0840              LSRS     r0,r0,#1              ;173
000028  0040              LSLS     r0,r0,#1              ;173
00002a  6821              LDR      r1,[r4,#0]            ;173
00002c  6008              STR      r0,[r1,#0]            ;173
00002e  2000              MOVS     r0,#0                 ;176
000030  6821              LDR      r1,[r4,#0]            ;176
000032  6008              STR      r0,[r1,#0]            ;176
000034  4620              MOV      r0,r4                 ;179
000036  f7fffffe          BL       MID_CMP_MspDeInit
00003a  2000              MOVS     r0,#0                 ;182
00003c  6320              STR      r0,[r4,#0x30]         ;182
00003e  bf00              NOP                            ;186
000040  2100              MOVS     r1,#0                 ;186
000042  202c              MOVS     r0,#0x2c              ;186
000044  5501              STRB     r1,[r0,r4]            ;186
000046  bf00              NOP                            ;186
000048  2000              MOVS     r0,#0                 ;189
00004a  e7e1              B        |L1.16|
;;;191    
                          ENDP


                          AREA ||i.MID_CMP_GetOutputLevel||, CODE, READONLY, ALIGN=2

                  MID_CMP_GetOutputLevel PROC
;;;555     */
;;;556    uint32_t MID_CMP_GetOutputLevel(CMP_HandleTypeDef* mCMP)
000000  4601              MOV      r1,r0
;;;557    {
;;;558        uint32_t STABITDef=0x00000000U;
000002  2200              MOVS     r2,#0
;;;559        
;;;560        if(mCMP->Instance == CMPAC0)
000004  4b1a              LDR      r3,|L2.112|
000006  6808              LDR      r0,[r1,#0]
000008  4298              CMP      r0,r3
00000a  d105              BNE      |L2.24|
;;;561            STABITDef = CMP->STA.W & CMP_STA_AC0_S_mask_w;
00000c  2017              MOVS     r0,#0x17
00000e  0680              LSLS     r0,r0,#26
000010  6800              LDR      r0,[r0,#0]
000012  07c2              LSLS     r2,r0,#31
000014  0fd2              LSRS     r2,r2,#31
000016  e024              B        |L2.98|
                  |L2.24|
;;;562        else if(mCMP->Instance == CMPAC1)
000018  4b15              LDR      r3,|L2.112|
00001a  1d1b              ADDS     r3,r3,#4
00001c  6808              LDR      r0,[r1,#0]
00001e  4298              CMP      r0,r3
000020  d106              BNE      |L2.48|
;;;563            STABITDef = CMP->STA.W & CMP_STA_AC1_S_mask_w;
000022  2017              MOVS     r0,#0x17
000024  0680              LSLS     r0,r0,#26
000026  6800              LDR      r0,[r0,#0]
000028  2310              MOVS     r3,#0x10
00002a  4018              ANDS     r0,r0,r3
00002c  4602              MOV      r2,r0
00002e  e018              B        |L2.98|
                  |L2.48|
;;;564        #if defined(MG32_1ST)   
;;;565        else if(mCMP->Instance == CMPAC2)
000030  4b0f              LDR      r3,|L2.112|
000032  3308              ADDS     r3,r3,#8
000034  6808              LDR      r0,[r1,#0]
000036  4298              CMP      r0,r3
000038  d107              BNE      |L2.74|
;;;566            STABITDef = CMP->STA.W & CMP_STA_AC2_S_mask_w;
00003a  2017              MOVS     r0,#0x17
00003c  0680              LSLS     r0,r0,#26
00003e  6800              LDR      r0,[r0,#0]
000040  23ff              MOVS     r3,#0xff
000042  3301              ADDS     r3,#1
000044  4018              ANDS     r0,r0,r3
000046  4602              MOV      r2,r0
000048  e00b              B        |L2.98|
                  |L2.74|
;;;567        else if(mCMP->Instance == CMPAC3)
00004a  4b09              LDR      r3,|L2.112|
00004c  330c              ADDS     r3,r3,#0xc
00004e  6808              LDR      r0,[r1,#0]
000050  4298              CMP      r0,r3
000052  d106              BNE      |L2.98|
;;;568            STABITDef = CMP->STA.W & CMP_STA_AC3_S_mask_w;
000054  2017              MOVS     r0,#0x17
000056  0680              LSLS     r0,r0,#26
000058  6800              LDR      r0,[r0,#0]
00005a  2301              MOVS     r3,#1
00005c  031b              LSLS     r3,r3,#12
00005e  4018              ANDS     r0,r0,r3
000060  4602              MOV      r2,r0
                  |L2.98|
;;;569        #endif
;;;570        
;;;571        if(STABITDef != 0U)
000062  2a00              CMP      r2,#0
000064  d001              BEQ      |L2.106|
;;;572        {
;;;573            return(CMP_OUTPUTLEVEL_HIGH);
000066  2001              MOVS     r0,#1
                  |L2.104|
;;;574        }
;;;575        return(CMP_OUTPUTLEVEL_LOW);
;;;576    }
000068  4770              BX       lr
                  |L2.106|
00006a  2000              MOVS     r0,#0                 ;575
00006c  e7fc              B        |L2.104|
;;;577    
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      0x5c000010

                          AREA ||i.MID_CMP_GetState||, CODE, READONLY, ALIGN=1

                  MID_CMP_GetState PROC
;;;657     */
;;;658    uint32_t MID_CMP_GetState(CMP_HandleTypeDef *mCMP)
000000  4601              MOV      r1,r0
;;;659    {
;;;660      /* Check the CMP handle allocation */
;;;661      if(mCMP == NULL)
000002  2900              CMP      r1,#0
000004  d100              BNE      |L3.8|
                  |L3.6|
;;;662      {
;;;663        return MID_CMP_STATE_RESET;
;;;664      }
;;;665    
;;;666      return mCMP->State;
;;;667    }
000006  4770              BX       lr
                  |L3.8|
000008  6b08              LDR      r0,[r1,#0x30]         ;666
00000a  e7fc              B        |L3.6|
;;;668    
                          ENDP


                          AREA ||i.MID_CMP_IRQHandler||, CODE, READONLY, ALIGN=1

                  MID_CMP_IRQHandler PROC
;;;490     */
;;;491    void MID_CMP_IRQHandler(CMP_HandleTypeDef* mCMP)
000000  b510              PUSH     {r4,lr}
;;;492    {
000002  4604              MOV      r4,r0
;;;493        /* ========== Check CMP flag ========== */
;;;494        if(__DRV_CMP_GET_FLAG(CMP_CMP0_FLAG_RISING) || __DRV_CMP_GET_FLAG(CMP_CMP0_FLAG_FALLING))
000004  2017              MOVS     r0,#0x17
000006  0680              LSLS     r0,r0,#26
000008  6800              LDR      r0,[r0,#0]
00000a  2104              MOVS     r1,#4
00000c  4008              ANDS     r0,r0,r1
00000e  2804              CMP      r0,#4
000010  d006              BEQ      |L4.32|
000012  2017              MOVS     r0,#0x17
000014  0680              LSLS     r0,r0,#26
000016  6800              LDR      r0,[r0,#0]
000018  2108              MOVS     r1,#8
00001a  4008              ANDS     r0,r0,r1
00001c  2808              CMP      r0,#8
00001e  d107              BNE      |L4.48|
                  |L4.32|
;;;495        {
;;;496            /* Clear CMP Exti pending bit */
;;;497            __DRV_CMP_CLEAR_FLAG(CMP_CMP0_FLAG_ALL);
000020  200c              MOVS     r0,#0xc
000022  2117              MOVS     r1,#0x17
000024  0689              LSLS     r1,r1,#26
000026  6008              STR      r0,[r1,#0]
;;;498            
;;;499            /* CMP trigger user callback */
;;;500            MID_CMP_TriggerCallbackAC0(mCMP);    
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       MID_CMP_TriggerCallbackAC0
00002e  e044              B        |L4.186|
                  |L4.48|
;;;501        }
;;;502        else if(__DRV_CMP_GET_FLAG(CMP_CMP1_FLAG_RISING) || __DRV_CMP_GET_FLAG(CMP_CMP1_FLAG_FALLING))
000030  2017              MOVS     r0,#0x17
000032  0680              LSLS     r0,r0,#26
000034  6800              LDR      r0,[r0,#0]
000036  2140              MOVS     r1,#0x40
000038  4008              ANDS     r0,r0,r1
00003a  2840              CMP      r0,#0x40
00003c  d006              BEQ      |L4.76|
00003e  2017              MOVS     r0,#0x17
000040  0680              LSLS     r0,r0,#26
000042  6800              LDR      r0,[r0,#0]
000044  2180              MOVS     r1,#0x80
000046  4008              ANDS     r0,r0,r1
000048  2880              CMP      r0,#0x80
00004a  d107              BNE      |L4.92|
                  |L4.76|
;;;503        {
;;;504            /* Clear CMP Exti pending bit */
;;;505            __DRV_CMP_CLEAR_FLAG(CMP_CMP1_FLAG_ALL);
00004c  20c0              MOVS     r0,#0xc0
00004e  2117              MOVS     r1,#0x17
000050  0689              LSLS     r1,r1,#26
000052  6008              STR      r0,[r1,#0]
;;;506            
;;;507            /* CMP trigger user callback */
;;;508            MID_CMP_TriggerCallbackAC1(mCMP);    
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       MID_CMP_TriggerCallbackAC1
00005a  e02e              B        |L4.186|
                  |L4.92|
;;;509        }
;;;510        #if defined(MG32_1ST)
;;;511            else if(__DRV_CMP_GET_FLAG(CMP_CMP2_FLAG_RISING) || __DRV_CMP_GET_FLAG(CMP_CMP2_FLAG_FALLING))
00005c  2017              MOVS     r0,#0x17
00005e  0680              LSLS     r0,r0,#26
000060  6800              LDR      r0,[r0,#0]
000062  2101              MOVS     r1,#1
000064  0289              LSLS     r1,r1,#10
000066  4008              ANDS     r0,r0,r1
000068  4288              CMP      r0,r1
00006a  d006              BEQ      |L4.122|
00006c  2017              MOVS     r0,#0x17
00006e  0680              LSLS     r0,r0,#26
000070  6800              LDR      r0,[r0,#0]
000072  0049              LSLS     r1,r1,#1
000074  4008              ANDS     r0,r0,r1
000076  4288              CMP      r0,r1
000078  d108              BNE      |L4.140|
                  |L4.122|
;;;512            {
;;;513                /* Clear CMP Exti pending bit */
;;;514                __DRV_CMP_CLEAR_FLAG(CMP_CMP2_FLAG_ALL);
00007a  2003              MOVS     r0,#3
00007c  0280              LSLS     r0,r0,#10
00007e  2117              MOVS     r1,#0x17
000080  0689              LSLS     r1,r1,#26
000082  6008              STR      r0,[r1,#0]
;;;515                
;;;516                /* CMP trigger user callback */
;;;517                MID_CMP_TriggerCallbackAC2(mCMP);    
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       MID_CMP_TriggerCallbackAC2
00008a  e016              B        |L4.186|
                  |L4.140|
;;;518            }
;;;519            else if(__DRV_CMP_GET_FLAG(CMP_CMP3_FLAG_RISING) || __DRV_CMP_GET_FLAG(CMP_CMP3_FLAG_FALLING))
00008c  2017              MOVS     r0,#0x17
00008e  0680              LSLS     r0,r0,#26
000090  6800              LDR      r0,[r0,#0]
000092  2101              MOVS     r1,#1
000094  0389              LSLS     r1,r1,#14
000096  4008              ANDS     r0,r0,r1
000098  4288              CMP      r0,r1
00009a  d006              BEQ      |L4.170|
00009c  2017              MOVS     r0,#0x17
00009e  0680              LSLS     r0,r0,#26
0000a0  6800              LDR      r0,[r0,#0]
0000a2  0049              LSLS     r1,r1,#1
0000a4  4008              ANDS     r0,r0,r1
0000a6  4288              CMP      r0,r1
0000a8  d107              BNE      |L4.186|
                  |L4.170|
;;;520            {
;;;521                /* Clear CMP Exti pending bit */
;;;522                __DRV_CMP_CLEAR_FLAG(CMP_CMP3_FLAG_ALL);
0000aa  2003              MOVS     r0,#3
0000ac  0380              LSLS     r0,r0,#14
0000ae  2117              MOVS     r1,#0x17
0000b0  0689              LSLS     r1,r1,#26
0000b2  6008              STR      r0,[r1,#0]
;;;523                
;;;524                /* CMP trigger user callback */
;;;525                MID_CMP_TriggerCallbackAC3(mCMP);    
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       MID_CMP_TriggerCallbackAC3
                  |L4.186|
;;;526            }
;;;527        #endif
;;;528    
;;;529    }
0000ba  bd10              POP      {r4,pc}
;;;530    
                          ENDP


                          AREA ||i.MID_CMP_Init||, CODE, READONLY, ALIGN=2

                  MID_CMP_Init PROC
;;;72      */
;;;73     MID_StatusTypeDef MID_CMP_Init(CMP_HandleTypeDef* mCMP)
000000  b570              PUSH     {r4-r6,lr}
;;;74     {
000002  4604              MOV      r4,r0
;;;75         uint32_t tmpREG;
;;;76         
;;;77         /* Check CMP handle */
;;;78         if(mCMP == NULL) 
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L5.12|
;;;79         {
;;;80             return MID_FAILURE;
000008  2001              MOVS     r0,#1
                  |L5.10|
;;;81         }
;;;82         else
;;;83         {
;;;84             /* Init the low level hardware : SYSCFG to access comparators */
;;;85             MID_CMP_MspInit(mCMP);
;;;86             
;;;87             /* Change CMP peripheral state */
;;;88             mCMP->State = MID_CMP_STATE_BUSY;
;;;89         
;;;90             // ------------------------------------------------------------------------
;;;91             /* Config of CMP parameters:                                              */
;;;92             // ------------------------------------------------------------------------
;;;93             tmpREG = mCMP->Init.InvertingInput      | 
;;;94                      mCMP->Init.NonInvertingInput   | 
;;;95                      mCMP->Init.ComparatorPol       | 
;;;96                      mCMP->Init.OutputPol           | 
;;;97             #if defined(MG32_2ND) || defined(MG32_3RD)
;;;98                      mCMP->Init.Hysteresis          |
;;;99             #endif
;;;100                     mCMP->Init.Mode                | 
;;;101                     mCMP->Init.OutputSync          | 
;;;102                     mCMP->Init.SyncFilterDIV; 
;;;103            
;;;104            mCMP->Instance->CR.W = tmpREG;
;;;105            
;;;106            // internal VREF0 : En/Dis & R-ladder selection
;;;107            if((mCMP->Instance == CMPAC0) && ((mCMP->Init.InvertingInput == CMP_INVERTINGINPUT_IVREF) || (mCMP->Init.NonInvertingInput == CMP_NONINVERTINGINPUT_IVREF))) 
;;;108            {
;;;109                if(mCMP->IntVref.IntVREF0_Level > 63)
;;;110                {
;;;111                    mCMP->State = MID_CMP_STATE_RESET;
;;;112                    return MID_FAILURE;                         // parameter failure
;;;113                }
;;;114                
;;;115                // enable internal VREF0 and config R-ladder
;;;116                tmpREG = CMP->ANA.W & ~CMP_ANA_IVREF_RS_mask_w;
;;;117                tmpREG |= (mCMP->IntVref.IntVREF0_Level << 2) | CMP_ANA_IVREF_EN_enable_w;
;;;118                CMP->ANA.W = tmpREG;
;;;119            }
;;;120            
;;;121            // internal VREF1 : En/Dis & R-ladder selection
;;;122            if((mCMP->Instance != CMPAC0) && ((mCMP->Init.InvertingInput == CMP_INVERTINGINPUT_IVREF) || (mCMP->Init.NonInvertingInput == CMP_NONINVERTINGINPUT_IVREF))) 
;;;123            {
;;;124                if(mCMP->IntVref.IntVREF1_Level > 63)
;;;125                {
;;;126                    mCMP->State = MID_CMP_STATE_RESET;
;;;127                    return MID_FAILURE;                         // parameter failure
;;;128                }
;;;129                
;;;130                // enable internal VREF0 and config R-ladder
;;;131                tmpREG = CMP->ANA.W & ~CMP_ANA_IVREF2_RS_mask_w;
;;;132                tmpREG |= (mCMP->IntVref.IntVREF1_Level << 10) | CMP_ANA_IVREF2_EN_enable_w;
;;;133                CMP->ANA.W = tmpREG;
;;;134                
;;;135            }        
;;;136            /* Initialize the CMP state*/
;;;137            mCMP->State = MID_CMP_STATE_READY;
;;;138        }
;;;139        
;;;140        /* Return function status */
;;;141        return MID_SUCCESS;
;;;142    }
00000a  bd70              POP      {r4-r6,pc}
                  |L5.12|
00000c  4620              MOV      r0,r4                 ;85
00000e  f7fffffe          BL       MID_CMP_MspInit
000012  2002              MOVS     r0,#2                 ;88
000014  6320              STR      r0,[r4,#0x30]         ;88
000016  68a1              LDR      r1,[r4,#8]            ;93
000018  6860              LDR      r0,[r4,#4]            ;93
00001a  4308              ORRS     r0,r0,r1              ;93
00001c  68e1              LDR      r1,[r4,#0xc]          ;93
00001e  4308              ORRS     r0,r0,r1              ;93
000020  6921              LDR      r1,[r4,#0x10]         ;93
000022  4308              ORRS     r0,r0,r1              ;93
000024  6961              LDR      r1,[r4,#0x14]         ;93
000026  4308              ORRS     r0,r0,r1              ;93
000028  69e1              LDR      r1,[r4,#0x1c]         ;93
00002a  4308              ORRS     r0,r0,r1              ;93
00002c  4605              MOV      r5,r0                 ;93
00002e  6a21              LDR      r1,[r4,#0x20]         ;93
000030  430d              ORRS     r5,r5,r1              ;93
000032  6820              LDR      r0,[r4,#0]            ;104
000034  6005              STR      r5,[r0,#0]            ;104
000036  4921              LDR      r1,|L5.188|
000038  6820              LDR      r0,[r4,#0]            ;107
00003a  4288              CMP      r0,r1                 ;107
00003c  d119              BNE      |L5.114|
00003e  6860              LDR      r0,[r4,#4]            ;107
000040  2800              CMP      r0,#0                 ;107
000042  d002              BEQ      |L5.74|
000044  68a0              LDR      r0,[r4,#8]            ;107
000046  2800              CMP      r0,#0                 ;107
000048  d113              BNE      |L5.114|
                  |L5.74|
00004a  6a60              LDR      r0,[r4,#0x24]         ;109
00004c  283f              CMP      r0,#0x3f              ;109
00004e  d903              BLS      |L5.88|
000050  2000              MOVS     r0,#0                 ;111
000052  6320              STR      r0,[r4,#0x30]         ;111
000054  2001              MOVS     r0,#1                 ;112
000056  e7d8              B        |L5.10|
                  |L5.88|
000058  2017              MOVS     r0,#0x17              ;116
00005a  0680              LSLS     r0,r0,#26             ;116
00005c  68c0              LDR      r0,[r0,#0xc]          ;116
00005e  21fc              MOVS     r1,#0xfc              ;116
000060  4388              BICS     r0,r0,r1              ;116
000062  4605              MOV      r5,r0                 ;116
000064  6a60              LDR      r0,[r4,#0x24]         ;117
000066  0080              LSLS     r0,r0,#2              ;117
000068  1c40              ADDS     r0,r0,#1              ;117
00006a  4305              ORRS     r5,r5,r0              ;117
00006c  2017              MOVS     r0,#0x17              ;118
00006e  0680              LSLS     r0,r0,#26             ;118
000070  60c5              STR      r5,[r0,#0xc]          ;118
                  |L5.114|
000072  4912              LDR      r1,|L5.188|
000074  6820              LDR      r0,[r4,#0]            ;122
000076  4288              CMP      r0,r1                 ;122
000078  d01b              BEQ      |L5.178|
00007a  6860              LDR      r0,[r4,#4]            ;122
00007c  2800              CMP      r0,#0                 ;122
00007e  d002              BEQ      |L5.134|
000080  68a0              LDR      r0,[r4,#8]            ;122
000082  2800              CMP      r0,#0                 ;122
000084  d115              BNE      |L5.178|
                  |L5.134|
000086  6aa0              LDR      r0,[r4,#0x28]         ;124
000088  283f              CMP      r0,#0x3f              ;124
00008a  d903              BLS      |L5.148|
00008c  2000              MOVS     r0,#0                 ;126
00008e  6320              STR      r0,[r4,#0x30]         ;126
000090  2001              MOVS     r0,#1                 ;127
000092  e7ba              B        |L5.10|
                  |L5.148|
000094  2017              MOVS     r0,#0x17              ;131
000096  0680              LSLS     r0,r0,#26             ;131
000098  68c0              LDR      r0,[r0,#0xc]          ;131
00009a  213f              MOVS     r1,#0x3f              ;131
00009c  0289              LSLS     r1,r1,#10             ;131
00009e  4388              BICS     r0,r0,r1              ;131
0000a0  4605              MOV      r5,r0                 ;131
0000a2  6aa0              LDR      r0,[r4,#0x28]         ;132
0000a4  0280              LSLS     r0,r0,#10             ;132
0000a6  30ff              ADDS     r0,r0,#0xff           ;132
0000a8  3001              ADDS     r0,#1                 ;132
0000aa  4305              ORRS     r5,r5,r0              ;132
0000ac  2017              MOVS     r0,#0x17              ;133
0000ae  0680              LSLS     r0,r0,#26             ;133
0000b0  60c5              STR      r5,[r0,#0xc]          ;133
                  |L5.178|
0000b2  2001              MOVS     r0,#1                 ;137
0000b4  6320              STR      r0,[r4,#0x30]         ;137
0000b6  2000              MOVS     r0,#0                 ;141
0000b8  e7a7              B        |L5.10|
;;;143    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L5.188|
                          DCD      0x5c000010

                          AREA ||i.MID_CMP_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_CMP_MspDeInit PROC
;;;214     */
;;;215    __weak void MID_CMP_MspDeInit(CMP_HandleTypeDef* mCMP)
000000  4770              BX       lr
;;;216    {
;;;217      /* Prevent unused argument(s) compilation warning */
;;;218      UNUSED(mCMP);
;;;219      /* NOTE : This function Should not be modified, when the callback is needed,
;;;220                the MID_CMP_MspDeInit could be implemented in the user file
;;;221       */
;;;222    }
;;;223    ///@} 
                          ENDP


                          AREA ||i.MID_CMP_MspInit||, CODE, READONLY, ALIGN=1

                  MID_CMP_MspInit PROC
;;;198     */
;;;199    __weak void MID_CMP_MspInit(CMP_HandleTypeDef* mCMP)
000000  4770              BX       lr
;;;200    {
;;;201      /* Prevent unused argument(s) compilation warning */
;;;202      UNUSED(mCMP);
;;;203      /* NOTE : This function Should not be modified, when the callback is needed,
;;;204                the MID_CMP_MspInit could be implemented in the user file
;;;205       */
;;;206    }
;;;207    
                          ENDP


                          AREA ||i.MID_CMP_Start||, CODE, READONLY, ALIGN=1

                  MID_CMP_Start PROC
;;;242     */
;;;243    MID_StatusTypeDef MID_CMP_Start(CMP_HandleTypeDef* mCMP)
000000  b570              PUSH     {r4-r6,lr}
;;;244    {
000002  4604              MOV      r4,r0
;;;245        uint32_t tickstart;
;;;246        
;;;247        /* Get tick count */
;;;248        tickstart = MID_GetTick();
000004  f7fffffe          BL       MID_GetTick
000008  4605              MOV      r5,r0
;;;249        
;;;250        /* Check the CMP handle allocation and lock status */
;;;251        if(mCMP == NULL)
00000a  2c00              CMP      r4,#0
00000c  d101              BNE      |L8.18|
;;;252        {
;;;253            return MID_FAILURE;
00000e  2001              MOVS     r0,#1
                  |L8.16|
;;;254        }
;;;255        else
;;;256        {
;;;257    
;;;258            if(mCMP->State == MID_CMP_STATE_READY)
;;;259            {
;;;260                /* Enable the selected comparator */
;;;261                __DRV_CMP_ENABLE(mCMP);
;;;262    
;;;263                /* Set MID CMP handle state */
;;;264                mCMP->State = MID_CMP_STATE_BUSY;
;;;265    
;;;266                /* Delay for CMP settle time */
;;;267                while((MID_GetTick()-tickstart) < CMP_Settle_Time);
;;;268    
;;;269                /* Set MID CMP handle state */
;;;270                mCMP->State = MID_CMP_STATE_READY;
;;;271            }
;;;272            else
;;;273            {
;;;274                return MID_FAILURE;
;;;275            }
;;;276        }
;;;277        
;;;278        return MID_SUCCESS;
;;;279    }
000010  bd70              POP      {r4-r6,pc}
                  |L8.18|
000012  6b20              LDR      r0,[r4,#0x30]         ;258
000014  2801              CMP      r0,#1                 ;258
000016  d110              BNE      |L8.58|
000018  6820              LDR      r0,[r4,#0]            ;261
00001a  6800              LDR      r0,[r0,#0]            ;261
00001c  2101              MOVS     r1,#1                 ;261
00001e  4308              ORRS     r0,r0,r1              ;261
000020  6821              LDR      r1,[r4,#0]            ;261
000022  6008              STR      r0,[r1,#0]            ;261
000024  2002              MOVS     r0,#2                 ;264
000026  6320              STR      r0,[r4,#0x30]         ;264
000028  bf00              NOP                            ;267
                  |L8.42|
00002a  f7fffffe          BL       MID_GetTick
00002e  1b40              SUBS     r0,r0,r5              ;267
000030  2802              CMP      r0,#2                 ;267
000032  d3fa              BCC      |L8.42|
000034  2001              MOVS     r0,#1                 ;270
000036  6320              STR      r0,[r4,#0x30]         ;270
000038  e001              B        |L8.62|
                  |L8.58|
00003a  2001              MOVS     r0,#1                 ;274
00003c  e7e8              B        |L8.16|
                  |L8.62|
00003e  2000              MOVS     r0,#0                 ;278
000040  e7e6              B        |L8.16|
;;;280    
                          ENDP


                          AREA ||i.MID_CMP_Start_IT||, CODE, READONLY, ALIGN=2

                  MID_CMP_Start_IT PROC
;;;353     */
;;;354    MID_StatusTypeDef MID_CMP_Start_IT(CMP_HandleTypeDef* mCMP)
000000  b510              PUSH     {r4,lr}
;;;355    {
000002  4604              MOV      r4,r0
;;;356        
;;;357        /* Check the CMP handle allocation and lock status */
;;;358        if(mCMP == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L9.12|
;;;359        {
;;;360            return MID_FAILURE;
000008  2001              MOVS     r0,#1
                  |L9.10|
;;;361        }
;;;362        else
;;;363        {
;;;364            MID_CMP_Start(mCMP);
;;;365            
;;;366            if(mCMP->State == MID_CMP_STATE_READY)
;;;367            {
;;;368                if(mCMP->Instance == CMPAC0)
;;;369                {
;;;370                    CMP->INT.W |= mCMP->Init.TriggerMode;
;;;371                    __DRV_CMP_ENABLE_ITEA();
;;;372                }
;;;373                if(mCMP->Instance == CMPAC1)
;;;374                {
;;;375                    CMP->INT.W |= (mCMP->Init.TriggerMode << 4);
;;;376                    __DRV_CMP_ENABLE_ITEA();
;;;377                }
;;;378                #if defined(MG32_1ST)
;;;379                    if(mCMP->Instance == CMPAC2)
;;;380                    {
;;;381                        CMP->INT.W |= (mCMP->Init.TriggerMode << 8);
;;;382                        __DRV_CMP_ENABLE_ITEA();
;;;383                    }
;;;384                    if(mCMP->Instance == CMPAC3)
;;;385                    {
;;;386                        CMP->INT.W |= (mCMP->Init.TriggerMode << 12);
;;;387                        __DRV_CMP_ENABLE_ITEA();
;;;388                    }
;;;389                #endif
;;;390                else
;;;391                {
;;;392                    return MID_FAILURE;
;;;393                }
;;;394            }
;;;395            else
;;;396            {
;;;397                return MID_FAILURE;
;;;398            }
;;;399        }
;;;400        
;;;401        return MID_SUCCESS;
;;;402    }
00000a  bd10              POP      {r4,pc}
                  |L9.12|
00000c  4620              MOV      r0,r4                 ;364
00000e  f7fffffe          BL       MID_CMP_Start
000012  6b20              LDR      r0,[r4,#0x30]         ;366
000014  2801              CMP      r0,#1                 ;366
000016  d154              BNE      |L9.194|
000018  492c              LDR      r1,|L9.204|
00001a  6820              LDR      r0,[r4,#0]            ;368
00001c  4288              CMP      r0,r1                 ;368
00001e  d10e              BNE      |L9.62|
000020  2017              MOVS     r0,#0x17              ;370
000022  0680              LSLS     r0,r0,#26             ;370
000024  6840              LDR      r0,[r0,#4]            ;370
000026  69a1              LDR      r1,[r4,#0x18]         ;370
000028  4308              ORRS     r0,r0,r1              ;370
00002a  2117              MOVS     r1,#0x17              ;370
00002c  0689              LSLS     r1,r1,#26             ;370
00002e  6048              STR      r0,[r1,#4]            ;370
000030  4608              MOV      r0,r1                 ;371
000032  6840              LDR      r0,[r0,#4]            ;371
000034  2101              MOVS     r1,#1                 ;371
000036  4308              ORRS     r0,r0,r1              ;371
000038  2117              MOVS     r1,#0x17              ;371
00003a  0689              LSLS     r1,r1,#26             ;371
00003c  6048              STR      r0,[r1,#4]            ;371
                  |L9.62|
00003e  4923              LDR      r1,|L9.204|
000040  1d09              ADDS     r1,r1,#4              ;373
000042  6820              LDR      r0,[r4,#0]            ;373
000044  4288              CMP      r0,r1                 ;373
000046  d10f              BNE      |L9.104|
000048  2017              MOVS     r0,#0x17              ;375
00004a  0680              LSLS     r0,r0,#26             ;375
00004c  6840              LDR      r0,[r0,#4]            ;375
00004e  69a1              LDR      r1,[r4,#0x18]         ;375
000050  0109              LSLS     r1,r1,#4              ;375
000052  4308              ORRS     r0,r0,r1              ;375
000054  2117              MOVS     r1,#0x17              ;375
000056  0689              LSLS     r1,r1,#26             ;375
000058  6048              STR      r0,[r1,#4]            ;375
00005a  4608              MOV      r0,r1                 ;376
00005c  6840              LDR      r0,[r0,#4]            ;376
00005e  2101              MOVS     r1,#1                 ;376
000060  4308              ORRS     r0,r0,r1              ;376
000062  2117              MOVS     r1,#0x17              ;376
000064  0689              LSLS     r1,r1,#26             ;376
000066  6048              STR      r0,[r1,#4]            ;376
                  |L9.104|
000068  4918              LDR      r1,|L9.204|
00006a  3108              ADDS     r1,r1,#8              ;379
00006c  6820              LDR      r0,[r4,#0]            ;379
00006e  4288              CMP      r0,r1                 ;379
000070  d10f              BNE      |L9.146|
000072  2017              MOVS     r0,#0x17              ;381
000074  0680              LSLS     r0,r0,#26             ;381
000076  6840              LDR      r0,[r0,#4]            ;381
000078  69a1              LDR      r1,[r4,#0x18]         ;381
00007a  0209              LSLS     r1,r1,#8              ;381
00007c  4308              ORRS     r0,r0,r1              ;381
00007e  2117              MOVS     r1,#0x17              ;381
000080  0689              LSLS     r1,r1,#26             ;381
000082  6048              STR      r0,[r1,#4]            ;381
000084  4608              MOV      r0,r1                 ;382
000086  6840              LDR      r0,[r0,#4]            ;382
000088  2101              MOVS     r1,#1                 ;382
00008a  4308              ORRS     r0,r0,r1              ;382
00008c  2117              MOVS     r1,#0x17              ;382
00008e  0689              LSLS     r1,r1,#26             ;382
000090  6048              STR      r0,[r1,#4]            ;382
                  |L9.146|
000092  490e              LDR      r1,|L9.204|
000094  310c              ADDS     r1,r1,#0xc            ;384
000096  6820              LDR      r0,[r4,#0]            ;384
000098  4288              CMP      r0,r1                 ;384
00009a  d110              BNE      |L9.190|
00009c  2017              MOVS     r0,#0x17              ;386
00009e  0680              LSLS     r0,r0,#26             ;386
0000a0  6840              LDR      r0,[r0,#4]            ;386
0000a2  69a1              LDR      r1,[r4,#0x18]         ;386
0000a4  0309              LSLS     r1,r1,#12             ;386
0000a6  4308              ORRS     r0,r0,r1              ;386
0000a8  2117              MOVS     r1,#0x17              ;386
0000aa  0689              LSLS     r1,r1,#26             ;386
0000ac  6048              STR      r0,[r1,#4]            ;386
0000ae  4608              MOV      r0,r1                 ;387
0000b0  6840              LDR      r0,[r0,#4]            ;387
0000b2  2101              MOVS     r1,#1                 ;387
0000b4  4308              ORRS     r0,r0,r1              ;387
0000b6  2117              MOVS     r1,#0x17              ;387
0000b8  0689              LSLS     r1,r1,#26             ;387
0000ba  6048              STR      r0,[r1,#4]            ;387
0000bc  e003              B        |L9.198|
                  |L9.190|
0000be  2001              MOVS     r0,#1                 ;392
0000c0  e7a3              B        |L9.10|
                  |L9.194|
0000c2  2001              MOVS     r0,#1                 ;397
0000c4  e7a1              B        |L9.10|
                  |L9.198|
0000c6  2000              MOVS     r0,#0                 ;401
0000c8  e79f              B        |L9.10|
;;;403    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L9.204|
                          DCD      0x5c000010

                          AREA ||i.MID_CMP_Stop||, CODE, READONLY, ALIGN=2

                  MID_CMP_Stop PROC
;;;293     */
;;;294    MID_StatusTypeDef MID_CMP_Stop(CMP_HandleTypeDef* mCMP)
000000  4601              MOV      r1,r0
;;;295    {
;;;296        #if defined(MG32_1ST)
;;;297        uint32_t tmpREG=0;
000002  2200              MOVS     r2,#0
;;;298        #endif
;;;299        
;;;300        /* Check the CMP handle allocation and lock status */
;;;301        if(mCMP == NULL)
000004  2900              CMP      r1,#0
000006  d101              BNE      |L10.12|
;;;302        {
;;;303            return MID_FAILURE;
000008  2001              MOVS     r0,#1
                  |L10.10|
;;;304        }
;;;305        else
;;;306        {
;;;307            /* Stop potential conversion on going, on regular group */
;;;308            __DRV_CMP_DISABLE(mCMP);
;;;309            
;;;310            // disable IVREF0/1
;;;311            if((mCMP->Instance == CMPAC0) && (((mCMP->Instance->CR.W & CMP_CR0_AC0_NMUX_mask_w) == 0) || ((mCMP->Instance->CR.W & CMP_CR0_AC0_PMUX_mask_w) == 0)))
;;;312            {
;;;313                // enable internal VREF0 and config R-ladder
;;;314                CMP->ANA.W &= ~CMP_ANA_IVREF_EN_enable_w;
;;;315            }
;;;316    
;;;317            if(mCMP->Instance != CMPAC0) 
;;;318            {
;;;319                //
;;;320                #if defined(MG32_2ND) || defined(MG32_3RD)
;;;321                if((CMP->CR1.W & CMP_CR1_AC1_EN_enable_b0) == 0)
;;;322                    CMP->ANA.W &= ~CMP_ANA_IVREF2_EN_enable_w;
;;;323                #endif
;;;324                #if defined(MG32_1ST)
;;;325                if((CMP->CR2.W & CMP_CR2_AC2_EN_enable_b0) != 0)
;;;326                    tmpREG += 1;
;;;327                if((CMP->CR3.W & CMP_CR3_AC3_EN_enable_b0) != 0)
;;;328                    tmpREG += 1;
;;;329                
;;;330                if(tmpREG == 0)
;;;331                    CMP->ANA.W &= ~CMP_ANA_IVREF2_EN_enable_w;
;;;332                #endif
;;;333            }
;;;334            
;;;335            
;;;336            /* Set CMP state */
;;;337            mCMP->State = MID_CMP_STATE_READY;
;;;338        }
;;;339        
;;;340        return MID_SUCCESS;
;;;341    }
00000a  4770              BX       lr
                  |L10.12|
00000c  6808              LDR      r0,[r1,#0]            ;308
00000e  6800              LDR      r0,[r0,#0]            ;308
000010  0840              LSRS     r0,r0,#1              ;308
000012  0040              LSLS     r0,r0,#1              ;308
000014  680b              LDR      r3,[r1,#0]            ;308
000016  6018              STR      r0,[r3,#0]            ;308
000018  4b1d              LDR      r3,|L10.144|
00001a  6808              LDR      r0,[r1,#0]            ;311
00001c  4298              CMP      r0,r3                 ;311
00001e  d114              BNE      |L10.74|
000020  6808              LDR      r0,[r1,#0]            ;311
000022  6800              LDR      r0,[r0,#0]            ;311
000024  2307              MOVS     r3,#7                 ;311
000026  031b              LSLS     r3,r3,#12             ;311
000028  4018              ANDS     r0,r0,r3              ;311
00002a  2800              CMP      r0,#0                 ;311
00002c  d005              BEQ      |L10.58|
00002e  6808              LDR      r0,[r1,#0]            ;311
000030  6800              LDR      r0,[r0,#0]            ;311
000032  111b              ASRS     r3,r3,#4              ;311
000034  4018              ANDS     r0,r0,r3              ;311
000036  2800              CMP      r0,#0                 ;311
000038  d107              BNE      |L10.74|
                  |L10.58|
00003a  2017              MOVS     r0,#0x17              ;314
00003c  0680              LSLS     r0,r0,#26             ;314
00003e  68c0              LDR      r0,[r0,#0xc]          ;314
000040  0840              LSRS     r0,r0,#1              ;314
000042  0040              LSLS     r0,r0,#1              ;314
000044  2317              MOVS     r3,#0x17              ;314
000046  069b              LSLS     r3,r3,#26             ;314
000048  60d8              STR      r0,[r3,#0xc]          ;314
                  |L10.74|
00004a  4b11              LDR      r3,|L10.144|
00004c  6808              LDR      r0,[r1,#0]            ;317
00004e  4298              CMP      r0,r3                 ;317
000050  d01a              BEQ      |L10.136|
000052  2017              MOVS     r0,#0x17              ;325
000054  0680              LSLS     r0,r0,#26             ;325
000056  6980              LDR      r0,[r0,#0x18]         ;325
000058  07c0              LSLS     r0,r0,#31             ;325
00005a  0fc0              LSRS     r0,r0,#31             ;325
00005c  2800              CMP      r0,#0                 ;325
00005e  d000              BEQ      |L10.98|
000060  1c52              ADDS     r2,r2,#1              ;326
                  |L10.98|
000062  2017              MOVS     r0,#0x17              ;327
000064  0680              LSLS     r0,r0,#26             ;327
000066  69c0              LDR      r0,[r0,#0x1c]         ;327
000068  07c0              LSLS     r0,r0,#31             ;327
00006a  0fc0              LSRS     r0,r0,#31             ;327
00006c  2800              CMP      r0,#0                 ;327
00006e  d000              BEQ      |L10.114|
000070  1c52              ADDS     r2,r2,#1              ;328
                  |L10.114|
000072  2a00              CMP      r2,#0                 ;330
000074  d108              BNE      |L10.136|
000076  2017              MOVS     r0,#0x17              ;331
000078  0680              LSLS     r0,r0,#26             ;331
00007a  68c0              LDR      r0,[r0,#0xc]          ;331
00007c  23ff              MOVS     r3,#0xff              ;331
00007e  3301              ADDS     r3,#1                 ;331
000080  4398              BICS     r0,r0,r3              ;331
000082  2317              MOVS     r3,#0x17              ;331
000084  069b              LSLS     r3,r3,#26             ;331
000086  60d8              STR      r0,[r3,#0xc]          ;331
                  |L10.136|
000088  2001              MOVS     r0,#1                 ;337
00008a  6308              STR      r0,[r1,#0x30]         ;337
00008c  2000              MOVS     r0,#0                 ;340
00008e  e7bc              B        |L10.10|
;;;342    
                          ENDP

                  |L10.144|
                          DCD      0x5c000010

                          AREA ||i.MID_CMP_Stop_IT||, CODE, READONLY, ALIGN=2

                  MID_CMP_Stop_IT PROC
;;;417     */
;;;418    MID_StatusTypeDef MID_CMP_Stop_IT(CMP_HandleTypeDef* mCMP)
000000  b510              PUSH     {r4,lr}
;;;419    {
000002  4604              MOV      r4,r0
;;;420    
;;;421        /* Process locked */
;;;422        __MID_LOCK(mCMP);
000004  bf00              NOP      
000006  202c              MOVS     r0,#0x2c
000008  5d00              LDRB     r0,[r0,r4]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L11.18|
00000e  2002              MOVS     r0,#2
                  |L11.16|
;;;423    
;;;424        /* Disable interrupt */
;;;425        if(mCMP->State == MID_CMP_STATE_READY)
;;;426        {
;;;427            if(mCMP->Instance == CMPAC0)
;;;428            {
;;;429                CMP->INT.W &= ~mCMP->Init.TriggerMode;
;;;430            }
;;;431            if(mCMP->Instance == CMPAC1)
;;;432            {
;;;433                CMP->INT.W &= ~(mCMP->Init.TriggerMode << 4);
;;;434            }
;;;435            #if defined(MG32_1ST)
;;;436                if(mCMP->Instance == CMPAC2)
;;;437                {
;;;438                    CMP->INT.W &= ~(mCMP->Init.TriggerMode << 8);
;;;439                }
;;;440                if(mCMP->Instance == CMPAC3)
;;;441                {
;;;442                    CMP->INT.W &= ~(mCMP->Init.TriggerMode << 12);
;;;443                }
;;;444            #endif
;;;445            else
;;;446            {
;;;447                return MID_FAILURE;
;;;448            }
;;;449        }
;;;450        else
;;;451        {
;;;452            return MID_FAILURE;
;;;453        }
;;;454        
;;;455    
;;;456        // disable ITEA
;;;457        if((CMP->INT.W & (0xFFFFFFFE)) == 0x00000000U)
;;;458            __DRV_CMP_DISABLE_ITEA();
;;;459        
;;;460        /* Stop comparator */
;;;461        MID_CMP_Stop(mCMP);
;;;462        
;;;463        /* Process unlocked */
;;;464        __MID_UNLOCK(mCMP);
;;;465    
;;;466        /* Return function status */
;;;467        return MID_SUCCESS;
;;;468    }
000010  bd10              POP      {r4,pc}
                  |L11.18|
000012  2101              MOVS     r1,#1                 ;422
000014  202c              MOVS     r0,#0x2c              ;422
000016  5501              STRB     r1,[r0,r4]            ;422
000018  bf00              NOP                            ;422
00001a  6b20              LDR      r0,[r4,#0x30]         ;425
00001c  2801              CMP      r0,#1                 ;425
00001e  d138              BNE      |L11.146|
000020  4929              LDR      r1,|L11.200|
000022  6820              LDR      r0,[r4,#0]            ;427
000024  4288              CMP      r0,r1                 ;427
000026  d107              BNE      |L11.56|
000028  2017              MOVS     r0,#0x17              ;429
00002a  0680              LSLS     r0,r0,#26             ;429
00002c  6840              LDR      r0,[r0,#4]            ;429
00002e  69a1              LDR      r1,[r4,#0x18]         ;429
000030  4388              BICS     r0,r0,r1              ;429
000032  2117              MOVS     r1,#0x17              ;429
000034  0689              LSLS     r1,r1,#26             ;429
000036  6048              STR      r0,[r1,#4]            ;429
                  |L11.56|
000038  4923              LDR      r1,|L11.200|
00003a  1d09              ADDS     r1,r1,#4              ;431
00003c  6820              LDR      r0,[r4,#0]            ;431
00003e  4288              CMP      r0,r1                 ;431
000040  d108              BNE      |L11.84|
000042  2017              MOVS     r0,#0x17              ;433
000044  0680              LSLS     r0,r0,#26             ;433
000046  6840              LDR      r0,[r0,#4]            ;433
000048  69a1              LDR      r1,[r4,#0x18]         ;433
00004a  0109              LSLS     r1,r1,#4              ;433
00004c  4388              BICS     r0,r0,r1              ;433
00004e  2117              MOVS     r1,#0x17              ;433
000050  0689              LSLS     r1,r1,#26             ;433
000052  6048              STR      r0,[r1,#4]            ;433
                  |L11.84|
000054  491c              LDR      r1,|L11.200|
000056  3108              ADDS     r1,r1,#8              ;436
000058  6820              LDR      r0,[r4,#0]            ;436
00005a  4288              CMP      r0,r1                 ;436
00005c  d108              BNE      |L11.112|
00005e  2017              MOVS     r0,#0x17              ;438
000060  0680              LSLS     r0,r0,#26             ;438
000062  6840              LDR      r0,[r0,#4]            ;438
000064  69a1              LDR      r1,[r4,#0x18]         ;438
000066  0209              LSLS     r1,r1,#8              ;438
000068  4388              BICS     r0,r0,r1              ;438
00006a  2117              MOVS     r1,#0x17              ;438
00006c  0689              LSLS     r1,r1,#26             ;438
00006e  6048              STR      r0,[r1,#4]            ;438
                  |L11.112|
000070  4915              LDR      r1,|L11.200|
000072  310c              ADDS     r1,r1,#0xc            ;440
000074  6820              LDR      r0,[r4,#0]            ;440
000076  4288              CMP      r0,r1                 ;440
000078  d109              BNE      |L11.142|
00007a  2017              MOVS     r0,#0x17              ;442
00007c  0680              LSLS     r0,r0,#26             ;442
00007e  6840              LDR      r0,[r0,#4]            ;442
000080  69a1              LDR      r1,[r4,#0x18]         ;442
000082  0309              LSLS     r1,r1,#12             ;442
000084  4388              BICS     r0,r0,r1              ;442
000086  2117              MOVS     r1,#0x17              ;442
000088  0689              LSLS     r1,r1,#26             ;442
00008a  6048              STR      r0,[r1,#4]            ;442
00008c  e003              B        |L11.150|
                  |L11.142|
00008e  2001              MOVS     r0,#1                 ;447
000090  e7be              B        |L11.16|
                  |L11.146|
000092  2001              MOVS     r0,#1                 ;452
000094  e7bc              B        |L11.16|
                  |L11.150|
000096  2017              MOVS     r0,#0x17              ;457
000098  0680              LSLS     r0,r0,#26             ;457
00009a  6840              LDR      r0,[r0,#4]            ;457
00009c  0840              LSRS     r0,r0,#1              ;457
00009e  0040              LSLS     r0,r0,#1              ;457
0000a0  2800              CMP      r0,#0                 ;457
0000a2  d107              BNE      |L11.180|
0000a4  2017              MOVS     r0,#0x17              ;458
0000a6  0680              LSLS     r0,r0,#26             ;458
0000a8  6840              LDR      r0,[r0,#4]            ;458
0000aa  0840              LSRS     r0,r0,#1              ;458
0000ac  0040              LSLS     r0,r0,#1              ;458
0000ae  2117              MOVS     r1,#0x17              ;458
0000b0  0689              LSLS     r1,r1,#26             ;458
0000b2  6048              STR      r0,[r1,#4]            ;458
                  |L11.180|
0000b4  4620              MOV      r0,r4                 ;461
0000b6  f7fffffe          BL       MID_CMP_Stop
0000ba  bf00              NOP                            ;464
0000bc  2100              MOVS     r1,#0                 ;464
0000be  202c              MOVS     r0,#0x2c              ;464
0000c0  5501              STRB     r1,[r0,r4]            ;464
0000c2  bf00              NOP                            ;464
0000c4  2000              MOVS     r0,#0                 ;467
0000c6  e7a3              B        |L11.16|
;;;469    ///@} 
                          ENDP

                  |L11.200|
                          DCD      0x5c000010

                          AREA ||i.MID_CMP_TriggerCallbackAC0||, CODE, READONLY, ALIGN=1

                  MID_CMP_TriggerCallbackAC0 PROC
;;;585     */
;;;586    __weak void MID_CMP_TriggerCallbackAC0(CMP_HandleTypeDef* mCMP)
000000  4770              BX       lr
;;;587    {
;;;588      /* Prevent unused argument(s) compilation warning */
;;;589      UNUSED(mCMP);
;;;590      /* NOTE : This function Should not be modified, when the callback is needed,
;;;591                the MID_CMP_TriggerCallbackAC0 could be implemented in the user file
;;;592       */
;;;593    }
;;;594    
                          ENDP


                          AREA ||i.MID_CMP_TriggerCallbackAC1||, CODE, READONLY, ALIGN=1

                  MID_CMP_TriggerCallbackAC1 PROC
;;;601     */
;;;602    __weak void MID_CMP_TriggerCallbackAC1(CMP_HandleTypeDef* mCMP)
000000  4770              BX       lr
;;;603    {
;;;604      /* Prevent unused argument(s) compilation warning */
;;;605      UNUSED(mCMP);
;;;606      /* NOTE : This function Should not be modified, when the callback is needed,
;;;607                the MID_CMP_TriggerCallbackAC1 could be implemented in the user file
;;;608       */
;;;609    }
;;;610    
                          ENDP


                          AREA ||i.MID_CMP_TriggerCallbackAC2||, CODE, READONLY, ALIGN=1

                  MID_CMP_TriggerCallbackAC2 PROC
;;;617     */
;;;618    __weak void MID_CMP_TriggerCallbackAC2(CMP_HandleTypeDef* mCMP)
000000  4770              BX       lr
;;;619    {
;;;620      /* Prevent unused argument(s) compilation warning */
;;;621      UNUSED(mCMP);
;;;622      /* NOTE : This function Should not be modified, when the callback is needed,
;;;623                the MID_CMP_TriggerCallbackAC2 could be implemented in the user file
;;;624       */
;;;625    }
;;;626    
                          ENDP


                          AREA ||i.MID_CMP_TriggerCallbackAC3||, CODE, READONLY, ALIGN=1

                  MID_CMP_TriggerCallbackAC3 PROC
;;;633     */
;;;634    __weak void MID_CMP_TriggerCallbackAC3(CMP_HandleTypeDef* mCMP)
000000  4770              BX       lr
;;;635    {
;;;636      /* Prevent unused argument(s) compilation warning */
;;;637      UNUSED(mCMP);
;;;638      /* NOTE : This function Should not be modified, when the callback is needed,
;;;639                the MID_CMP_TriggerCallbackAC3 could be implemented in the user file
;;;640       */
;;;641    }
;;;642    ///@} 
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_CMP_MID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_CMP_MID_c_31a76b6a____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_CMP_MID_c_31a76b6a____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_CMP_MID_c_31a76b6a____REVSH|
#line 496
|__asm___18_MG32x02z_CMP_MID_c_31a76b6a____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
