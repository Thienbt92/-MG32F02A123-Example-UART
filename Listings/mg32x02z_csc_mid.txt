; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_csc_mid.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_csc_mid.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_csc_mid.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_CSC_MID.c]
                          THUMB

                          AREA ||i.MID_CSC_DeInit||, CODE, READONLY, ALIGN=2

                  MID_CSC_DeInit PROC
;;;61      */
;;;62     void MID_CSC_DeInit (void)
000000  4837              LDR      r0,|L1.224|
;;;63     {
;;;64     
;;;65         // Unprotect CSC reigster
;;;66         CSC->KEY.H[0] = 0xA217;
000002  4938              LDR      r1,|L1.228|
000004  8188              STRH     r0,[r1,#0xc]
;;;67         
;;;68         // When CK_HS default setting CK_IHRCO
;;;69     #if defined(MG321ST) 
;;;70         // When CK_HS default setting CK_IHRCO
;;;71         if((CFG->OR05.W & CFG_OR05_HS_SEL_mask_w) == CFG_OR05_HS_SEL_ihrco_w)
;;;72         {   
;;;73             // When IHRCO disable
;;;74             if((CSC->CR0.W & CSC_CR0_IHRCO_EN_mask_w) == CSC_CR0_IHRCO_EN_disable_w)
;;;75             {
;;;76                 // Clear IHRCOF
;;;77                 CSC->STA.W = CSC_STA_IHRCOF_mask_w;
;;;78                 // Enable IHRCO
;;;79                 CSC->CR0.W |= CSC_CR0_IHRCO_EN_enable_w;
;;;80                 // Waiting IHRCOF happened
;;;81                 while((CSC->STA.W & CSC_STA_IHRCOF_mask_w)== CSC_STA_IHRCOF_normal_w);
;;;82                 // Clear IHRCOF
;;;83                 CSC->STA.W = CSC_STA_IHRCOF_mask_w;
;;;84             }
;;;85         }
;;;86     #endif
;;;87     
;;;88     #if defined(MG32_2ND) || defined(MG32_3RD)
;;;89         // When CK_HS default setting CK_IHRCO
;;;90         if((CFG->OR05.W & CFG_OR05_HS_SEL_mask_w) == CFG_OR05_HS_SEL_ihrco_w)
;;;91         {
;;;92             // When IHRCO_STA not ready
;;;93             if((CSC->STA.W & CSC_STA_IHRCO_STA_mask_w) == CSC_STA_IHRCO_STA_unready_w)
;;;94             {
;;;95                 // Clear IHRCOF
;;;96                 CSC->STA.W = CSC_STA_IHRCOF_mask_w;
;;;97                 // Enable IHRCO
;;;98                 CSC->CR0.W |= CSC_CR0_IHRCO_EN_enable_w;
;;;99                 // Waiting IHRCOF happened
;;;100                while((CSC->STA.W & CSC_STA_IHRCO_STA_mask_w)== CSC_STA_IHRCO_STA_unready_w);
;;;101                // Clear IHRCOF
;;;102                CSC->STA.W = CSC_STA_IHRCOF_mask_w;
;;;103            }
;;;104        }
;;;105    #endif     
;;;106        
;;;107        
;;;108        
;;;109        // MCD ON
;;;110        CSC->CR0.W &= ~CSC_CR0_MCD_DIS_mask_w;
000006  4608              MOV      r0,r1
000008  6900              LDR      r0,[r0,#0x10]
00000a  2110              MOVS     r1,#0x10
00000c  4388              BICS     r0,r0,r1
00000e  4935              LDR      r1,|L1.228|
000010  6108              STR      r0,[r1,#0x10]
;;;111        // ICKO OFF
;;;112        CSC->CKO.W &= ~CSC_CKO_CKO_EN_mask_w;
000012  4608              MOV      r0,r1
000014  6980              LDR      r0,[r0,#0x18]
000016  0840              LSRS     r0,r0,#1
000018  0040              LSLS     r0,r0,#1
00001a  6188              STR      r0,[r1,#0x18]
;;;113        // All interrupts disabled
;;;114        CSC->INT.W = 0x00000000;
00001c  2000              MOVS     r0,#0
00001e  6048              STR      r0,[r1,#4]
;;;115        // Peripheral clocks not modify
;;;116        // CK_AHB, CK_APB prescaler set to 1.
;;;117        CSC->DIV.W &= ~(CSC_DIV_APB_DIV_mask_w | CSC_DIV_AHB_DIV_mask_w);  
000020  4608              MOV      r0,r1
000022  6940              LDR      r0,[r0,#0x14]
000024  4930              LDR      r1,|L1.232|
000026  4008              ANDS     r0,r0,r1
000028  492e              LDR      r1,|L1.228|
00002a  6148              STR      r0,[r1,#0x14]
;;;118        
;;;119        
;;;120        // system clock source is CK_IHRCO or CK_ILRCO
;;;121    #if defined(MG32_1ST) 
;;;122        // When CK_MAIN switch to CK_HS
;;;123        if((CSC->CR0.W & CSC_CR0_MAIN_SEL_mask_w) != CSC_CR0_MAIN_SEL_ck_hs_w)
00002c  4608              MOV      r0,r1
00002e  6900              LDR      r0,[r0,#0x10]
000030  2103              MOVS     r1,#3
000032  0389              LSLS     r1,r1,#14
000034  4008              ANDS     r0,r0,r1
000036  2800              CMP      r0,#0
000038  d004              BEQ      |L1.68|
;;;124        {    
;;;125            // CK_MIN = CK_HS
;;;126            CSC->CR0.W &= ~CSC_CR0_MAIN_SEL_mask_w;
00003a  482a              LDR      r0,|L1.228|
00003c  6900              LDR      r0,[r0,#0x10]
00003e  4388              BICS     r0,r0,r1
000040  4928              LDR      r1,|L1.228|
000042  6108              STR      r0,[r1,#0x10]
                  |L1.68|
;;;127            /* Delay 200us */
;;;128        }
;;;129        
;;;130        // When CK_HS default source CK_IHRCO
;;;131        if((CFG->OR05.W & CFG_OR05_HS_SEL_mask_w) == CFG_OR05_HS_SEL_ihrco_w)
000044  4829              LDR      r0,|L1.236|
000046  6a40              LDR      r0,[r0,#0x24]
000048  2101              MOVS     r1,#1
00004a  0449              LSLS     r1,r1,#17
00004c  4008              ANDS     r0,r0,r1
00004e  2800              CMP      r0,#0
000050  d10c              BNE      |L1.108|
;;;132        {
;;;133            // When CK_HS not CK_IHRCO
;;;134            if((CSC->CR0.W & CSC_CR0_HS_SEL_mask_w) != CSC_CR0_HS_SEL_ihrco_w)
000052  4824              LDR      r0,|L1.228|
000054  6900              LDR      r0,[r0,#0x10]
000056  2103              MOVS     r1,#3
000058  0289              LSLS     r1,r1,#10
00005a  4008              ANDS     r0,r0,r1
00005c  2800              CMP      r0,#0
00005e  d018              BEQ      |L1.146|
;;;135            {   
;;;136                // CSC CK_HS = CK_IHRCO
;;;137                CSC->CR0.W &= ~CSC_CR0_HS_SEL_mask_w;
000060  4820              LDR      r0,|L1.228|
000062  6900              LDR      r0,[r0,#0x10]
000064  4388              BICS     r0,r0,r1
000066  491f              LDR      r1,|L1.228|
000068  6108              STR      r0,[r1,#0x10]
00006a  e012              B        |L1.146|
                  |L1.108|
;;;138                /* Delay 200us */
;;;139            }
;;;140        }
;;;141        // When CK_HS default source CK_ILRCO
;;;142        else
;;;143        {
;;;144            // When CK_HS not CK_ILRCO
;;;145            if((CSC->CR0.W & CSC_CR0_HS_SEL_mask_w) != CSC_CR0_HS_SEL_ilrco_w)
00006c  481d              LDR      r0,|L1.228|
00006e  6900              LDR      r0,[r0,#0x10]
000070  2103              MOVS     r1,#3
000072  0289              LSLS     r1,r1,#10
000074  4008              ANDS     r0,r0,r1
000076  2101              MOVS     r1,#1
000078  02c9              LSLS     r1,r1,#11
00007a  4288              CMP      r0,r1
00007c  d009              BEQ      |L1.146|
;;;146            {
;;;147                // CSC CK_HS = CK_ILRCO
;;;148                CSC->CR0.W = (CSC->CR0.W & ~CSC_CR0_HS_SEL_mask_w) | CSC_CR0_HS_SEL_ilrco_w;
00007e  4819              LDR      r0,|L1.228|
000080  6900              LDR      r0,[r0,#0x10]
000082  2103              MOVS     r1,#3
000084  0289              LSLS     r1,r1,#10
000086  4388              BICS     r0,r0,r1
000088  2101              MOVS     r1,#1
00008a  02c9              LSLS     r1,r1,#11
00008c  1840              ADDS     r0,r0,r1
00008e  4915              LDR      r1,|L1.228|
000090  6108              STR      r0,[r1,#0x10]
                  |L1.146|
;;;149                /* Delay 200us */
;;;150            }
;;;151        }
;;;152    #endif
;;;153        
;;;154    #if defined(MG32_2ND) || defined(MG32_3RD)
;;;155        // Wh// When CK_MAIN switch to CK_HS
;;;156        if((CSC->CR0.W & CSC_CR0_MAIN_SEL_mask_w) != CSC_CR0_MAIN_SEL_ck_hs_w)
;;;157        { 
;;;158            // CK_MIN = CK_HS
;;;159            CSC->CR0.W &= ~CSC_CR0_MAIN_SEL_mask_w;
;;;160            // Wait CK_MAIN to CK_HS
;;;161            while((CSC->STA.W & CSC_STA_MAIN_STA_mask_w) != CSC_STA_MAIN_STA_ck_hs_w);
;;;162        }
;;;163        
;;;164        // When CK_HS default source CK_IHRCO
;;;165        if((CFG->OR05.W & CFG_OR05_HS_SEL_mask_w) == CFG_OR05_HS_SEL_ihrco_w)
;;;166        {
;;;167            // When CK_HS not CK_IHRCO
;;;168            if((CSC->CR0.W & CSC_CR0_HS_SEL_mask_w) != CSC_CR0_HS_SEL_ihrco_w)
;;;169            {   
;;;170                // CSC CK_HS = CK_IHRCO
;;;171                CSC->CR0.W &= ~CSC_CR0_HS_SEL_mask_w;
;;;172                // Waitting CK_HS = CK_IHRCO
;;;173                while((CSC->STA.W & CSC_STA_HS_STA_mask_w) != CSC_STA_HS_STA_ihrco_w);
;;;174                
;;;175            }
;;;176        }
;;;177        // When CK_HS default source CK_ILRCO
;;;178        else
;;;179        {
;;;180            // When CK_HS not CK_ILRCO
;;;181            if((CSC->CR0.W & CSC_CR0_HS_SEL_mask_w) != CSC_CR0_HS_SEL_ilrco_w)
;;;182            {
;;;183                // CSC CK_HS = CK_IHRCO
;;;184                CSC->CR0.W = (CSC->CR0.W & ~CSC_CR0_HS_SEL_mask_w) | CSC_CR0_HS_SEL_ilrco_w;
;;;185                // Waitting CK_HS = CK_ILRCO
;;;186                while((CSC->STA.W & CSC_STA_HS_STA_mask_w) != CSC_STA_HS_STA_ilrco_w);
;;;187            }
;;;188        }
;;;189    #endif
;;;190        // Disable PLL
;;;191        CSC->CR0.W &= ~CSC_CR0_PLL_EN_mask_w;
000092  4814              LDR      r0,|L1.228|
000094  6900              LDR      r0,[r0,#0x10]
000096  2120              MOVS     r1,#0x20
000098  4388              BICS     r0,r0,r1
00009a  4912              LDR      r1,|L1.228|
00009c  6108              STR      r0,[r1,#0x10]
;;;192        CSC->DIV.W = CSC->DIV.W & ~(CSC_DIV_PLLI_DIV_mask_w | CSC_DIV_PLLO_DIV_mask_w);
00009e  4608              MOV      r0,r1
0000a0  6940              LDR      r0,[r0,#0x14]
0000a2  2133              MOVS     r1,#0x33
0000a4  4388              BICS     r0,r0,r1
0000a6  490f              LDR      r1,|L1.228|
0000a8  6148              STR      r0,[r1,#0x14]
;;;193        
;;;194        // CK_ILRCO, CK_LS, CK_UT and RTC clock not modify 
;;;195        if((CSC->CR0.W & CSC_CR0_LS_SEL_mask_w) == CSC_CR0_LS_SEL_ilrco_w)
0000aa  4608              MOV      r0,r1
0000ac  6900              LDR      r0,[r0,#0x10]
0000ae  2103              MOVS     r1,#3
0000b0  0209              LSLS     r1,r1,#8
0000b2  4008              ANDS     r0,r0,r1
0000b4  2101              MOVS     r1,#1
0000b6  0249              LSLS     r1,r1,#9
0000b8  4288              CMP      r0,r1
0000ba  d10d              BNE      |L1.216|
;;;196        {
;;;197            // CK_XOSC OFF
;;;198            IOMC->CR13.W &= ~PX_CR_AFS_mask_w;
0000bc  480c              LDR      r0,|L1.240|
0000be  6b40              LDR      r0,[r0,#0x34]
0000c0  210f              MOVS     r1,#0xf
0000c2  0309              LSLS     r1,r1,#12
0000c4  4388              BICS     r0,r0,r1
0000c6  490a              LDR      r1,|L1.240|
0000c8  6348              STR      r0,[r1,#0x34]
;;;199            IOMC->CR14.W &= ~PX_CR_AFS_mask_w;
0000ca  4608              MOV      r0,r1
0000cc  6b80              LDR      r0,[r0,#0x38]
0000ce  210f              MOVS     r1,#0xf
0000d0  0309              LSLS     r1,r1,#12
0000d2  4388              BICS     r0,r0,r1
0000d4  4906              LDR      r1,|L1.240|
0000d6  6388              STR      r0,[r1,#0x38]
                  |L1.216|
;;;200        }
;;;201    
;;;202        // Protect CSC reigster
;;;203        CSC->KEY.H[0] = 0x0000;
0000d8  2000              MOVS     r0,#0
0000da  4902              LDR      r1,|L1.228|
0000dc  8188              STRH     r0,[r1,#0xc]
;;;204    }
0000de  4770              BX       lr
;;;205    ///@}
                          ENDP

                  |L1.224|
                          DCD      0x0000a217
                  |L1.228|
                          DCD      0x4c010000
                  |L1.232|
                          DCD      0xfff8f0ff
                  |L1.236|
                          DCD      0x4ff00000
                  |L1.240|
                          DCD      0x44020000

                          AREA ||i.MID_CSC_DisableMCD||, CODE, READONLY, ALIGN=2

                  MID_CSC_DisableMCD PROC
;;;247     */
;;;248    void MID_CSC_DisableMCD (void)
000000  4803              LDR      r0,|L2.16|
;;;249    {
;;;250        // Disable MCD fucntion
;;;251        CSC->CR0.W |=  MID_CSC_MCD_DIS_DIS;
000002  6900              LDR      r0,[r0,#0x10]
000004  2110              MOVS     r1,#0x10
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L2.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;252    }
00000c  4770              BX       lr
;;;253    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x4c010000

                          AREA ||i.MID_CSC_EnableMCD||, CODE, READONLY, ALIGN=2

                  MID_CSC_EnableMCD PROC
;;;229     */ 
;;;230    void MID_CSC_EnableMCD (MID_CSC_MCD_SEL_TypeDef CSC_MCSSelect)
000000  4903              LDR      r1,|L3.16|
;;;231    {
;;;232        CSC->CR0.W = (CSC->CR0.W & ~(MID_CSC_MCD_SEL_MASK | MID_CSC_MCD_DIS_MASK)) | (CSC_MCSSelect | MID_CSC_MCD_DIS_EN);
000002  6909              LDR      r1,[r1,#0x10]
000004  4a03              LDR      r2,|L3.20|
000006  4011              ANDS     r1,r1,r2
000008  4301              ORRS     r1,r1,r0
00000a  4a01              LDR      r2,|L3.16|
00000c  6111              STR      r1,[r2,#0x10]
;;;233    }
00000e  4770              BX       lr
;;;234      
                          ENDP

                  |L3.16|
                          DCD      0x4c010000
                  |L3.20|
                          DCD      0xff3fffef

                          AREA ||i.MID_CSC_GetCK_AHBFreq||, CODE, READONLY, ALIGN=2

                  MID_CSC_GetCK_AHBFreq PROC
;;;674     */
;;;675    uint32_t MID_CSC_GetCK_AHBFreq(void)
000000  b508              PUSH     {r3,lr}
;;;676    {
;;;677        volatile uint32_t iTemp32;
;;;678        
;;;679        
;;;680        // Get CK_APB and divider AHB_DIV
;;;681        iTemp32 = MID_CSC_GetCK_APBFreq() >> CSC->DIV.MBIT.AHB_DIV;
000002  f7fffffe          BL       MID_CSC_GetCK_APBFreq
000006  4904              LDR      r1,|L4.24|
000008  7d49              LDRB     r1,[r1,#0x15]
00000a  0709              LSLS     r1,r1,#28
00000c  0f09              LSRS     r1,r1,#28
00000e  40c8              LSRS     r0,r0,r1
000010  9000              STR      r0,[sp,#0]
;;;682        // Return CK_APB frequency
;;;683        return iTemp32;
000012  9800              LDR      r0,[sp,#0]
;;;684    }
000014  bd08              POP      {r3,pc}
;;;685    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x4c010000

                          AREA ||i.MID_CSC_GetCK_APBFreq||, CODE, READONLY, ALIGN=2

                  MID_CSC_GetCK_APBFreq PROC
;;;649     */
;;;650    uint32_t MID_CSC_GetCK_APBFreq(void)
000000  b508              PUSH     {r3,lr}
;;;651    {
;;;652        volatile uint32_t iTemp32;
;;;653        
;;;654            
;;;655        // Get CK_MAIN frequency and divider APB
;;;656        iTemp32 = MID_CSC_GetCK_MAINFreq() >> CSC->DIV.MBIT.APB_DIV;
000002  f7fffffe          BL       MID_CSC_GetCK_MAINFreq
000006  4904              LDR      r1,|L5.24|
000008  7d89              LDRB     r1,[r1,#0x16]
00000a  0749              LSLS     r1,r1,#29
00000c  0f49              LSRS     r1,r1,#29
00000e  40c8              LSRS     r0,r0,r1
000010  9000              STR      r0,[sp,#0]
;;;657        // Return CK_APB frequency
;;;658        return iTemp32;
000012  9800              LDR      r0,[sp,#0]
;;;659    }
000014  bd08              POP      {r3,pc}
;;;660    
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      0x4c010000

                          AREA ||i.MID_CSC_GetCK_HSFreq||, CODE, READONLY, ALIGN=2

                  MID_CSC_GetCK_HSFreq PROC
;;;346     */
;;;347    uint32_t MID_CSC_GetCK_HSFreq(void)
000000  481d              LDR      r0,|L6.120|
;;;348    {
;;;349    
;;;350        // When CK_HS = IHRCO
;;;351        if((CSC->CR0.W & CSC_CR0_HS_SEL_mask_w) == CSC_CR0_HS_SEL_ihrco_w)
000002  6900              LDR      r0,[r0,#0x10]
000004  2103              MOVS     r1,#3
000006  0289              LSLS     r1,r1,#10
000008  4008              ANDS     r0,r0,r1
00000a  2800              CMP      r0,#0
00000c  d111              BNE      |L6.50|
;;;352        {
;;;353            // When IHRCO disable
;;;354            if((CSC->CR0.W & CSC_CR0_IHRCO_EN_mask_w) == 0)
00000e  481a              LDR      r0,|L6.120|
000010  6900              LDR      r0,[r0,#0x10]
000012  2108              MOVS     r1,#8
000014  4008              ANDS     r0,r0,r1
000016  2800              CMP      r0,#0
000018  d100              BNE      |L6.28|
                  |L6.26|
;;;355                return 0;
;;;356            // When IHRCO select 12MHz
;;;357            if((CSC->CR0.W & CSC_CR0_IHRCO_SEL_mask_w) == 0)
;;;358                return 12000000UL;
;;;359            // WHen IHRCO select 11.0592MHz
;;;360            else
;;;361                return 11059200UL;
;;;362        }
;;;363        // When CK_HS = CK_XOSC
;;;364        else if((CSC->CR0.W & CSC_CR0_HS_SEL_mask_w) == CSC_CR0_HS_SEL_xosc_w)
;;;365        {
;;;366            return CONF_XOSC_EXTCK_FREQ;
;;;367        }
;;;368        // When CK_HS = CK_ILRCO
;;;369        else if((CSC->CR0.W & CSC_CR0_HS_SEL_mask_w) == CSC_CR0_HS_SEL_ilrco_w)
;;;370        {
;;;371            return ILRCO_VALUE;
;;;372        }
;;;373        // When CK_HS = CK_EXT
;;;374        else if((CSC->CR0.W & CSC_CR0_HS_SEL_mask_w) == CSC_CR0_HS_SEL_ck_ext_w)
;;;375        {
;;;376            return CONF_XOSC_EXTCK_FREQ;
;;;377        }
;;;378        // When get CK_HS failure
;;;379        return 0;
;;;380    }
00001a  4770              BX       lr
                  |L6.28|
00001c  4816              LDR      r0,|L6.120|
00001e  6900              LDR      r0,[r0,#0x10]         ;357
000020  2101              MOVS     r1,#1                 ;357
000022  0489              LSLS     r1,r1,#18             ;357
000024  4008              ANDS     r0,r0,r1              ;357
000026  2800              CMP      r0,#0                 ;357
000028  d101              BNE      |L6.46|
00002a  4814              LDR      r0,|L6.124|
00002c  e7f5              B        |L6.26|
                  |L6.46|
00002e  4814              LDR      r0,|L6.128|
000030  e7f3              B        |L6.26|
                  |L6.50|
000032  4811              LDR      r0,|L6.120|
000034  6900              LDR      r0,[r0,#0x10]         ;364
000036  2103              MOVS     r1,#3                 ;364
000038  0289              LSLS     r1,r1,#10             ;364
00003a  4008              ANDS     r0,r0,r1              ;364
00003c  2101              MOVS     r1,#1                 ;364
00003e  0289              LSLS     r1,r1,#10             ;364
000040  4288              CMP      r0,r1                 ;364
000042  d101              BNE      |L6.72|
000044  480d              LDR      r0,|L6.124|
000046  e7e8              B        |L6.26|
                  |L6.72|
000048  480b              LDR      r0,|L6.120|
00004a  6900              LDR      r0,[r0,#0x10]         ;369
00004c  2103              MOVS     r1,#3                 ;369
00004e  0289              LSLS     r1,r1,#10             ;369
000050  4008              ANDS     r0,r0,r1              ;369
000052  2101              MOVS     r1,#1                 ;369
000054  02c9              LSLS     r1,r1,#11             ;369
000056  4288              CMP      r0,r1                 ;369
000058  d102              BNE      |L6.96|
00005a  207d              MOVS     r0,#0x7d              ;371
00005c  0200              LSLS     r0,r0,#8              ;371
00005e  e7dc              B        |L6.26|
                  |L6.96|
000060  4805              LDR      r0,|L6.120|
000062  6900              LDR      r0,[r0,#0x10]         ;374
000064  2103              MOVS     r1,#3                 ;374
000066  0289              LSLS     r1,r1,#10             ;374
000068  4008              ANDS     r0,r0,r1              ;374
00006a  4288              CMP      r0,r1                 ;374
00006c  d101              BNE      |L6.114|
00006e  4803              LDR      r0,|L6.124|
000070  e7d3              B        |L6.26|
                  |L6.114|
000072  2000              MOVS     r0,#0                 ;379
000074  e7d1              B        |L6.26|
;;;381    
                          ENDP

000076  0000              DCW      0x0000
                  |L6.120|
                          DCD      0x4c010000
                  |L6.124|
                          DCD      0x00b71b00
                  |L6.128|
                          DCD      0x00a8c000

                          AREA ||i.MID_CSC_GetCK_IHRCOFreq||, CODE, READONLY, ALIGN=2

                  MID_CSC_GetCK_IHRCOFreq PROC
;;;317     */
;;;318    uint32_t MID_CSC_GetCK_IHRCOFreq(void)
000000  4808              LDR      r0,|L7.36|
;;;319    {
;;;320        // When IHRCO disable
;;;321        if((CSC->CR0.W & CSC_CR0_IHRCO_EN_mask_w) == 0)
000002  6900              LDR      r0,[r0,#0x10]
000004  2108              MOVS     r1,#8
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d100              BNE      |L7.14|
                  |L7.12|
;;;322            return 0;
;;;323    
;;;324        // When CK_IHRCO select IHRCO0
;;;325        if((CSC->CR0.W & CSC_IHRCO_SELECT) == 0)
;;;326            return 12000000UL; 
;;;327        // When CK_IHRCO select IHRCO1
;;;328        else
;;;329            return 11059200UL;
;;;330    }
00000c  4770              BX       lr
                  |L7.14|
00000e  4805              LDR      r0,|L7.36|
000010  6900              LDR      r0,[r0,#0x10]         ;325
000012  2101              MOVS     r1,#1                 ;325
000014  0489              LSLS     r1,r1,#18             ;325
000016  4008              ANDS     r0,r0,r1              ;325
000018  2800              CMP      r0,#0                 ;325
00001a  d101              BNE      |L7.32|
00001c  4802              LDR      r0,|L7.40|
00001e  e7f5              B        |L7.12|
                  |L7.32|
000020  4802              LDR      r0,|L7.44|
000022  e7f3              B        |L7.12|
;;;331    
                          ENDP

                  |L7.36|
                          DCD      0x4c010000
                  |L7.40|
                          DCD      0x00b71b00
                  |L7.44|
                          DCD      0x00a8c000

                          AREA ||i.MID_CSC_GetCK_LSFreq||, CODE, READONLY, ALIGN=2

                  MID_CSC_GetCK_LSFreq PROC
;;;700     */
;;;701    uint32_t MID_CSC_GetCK_LSFreq(void)
000000  4810              LDR      r0,|L8.68|
;;;702    {
;;;703        // When CK_LS = CK_XOSC
;;;704        if((CSC->CR0.W & CSC_CR0_LS_SEL_mask_w) == CSC_CR0_LS_SEL_xosc_w)
000002  6900              LDR      r0,[r0,#0x10]
000004  2103              MOVS     r1,#3
000006  0209              LSLS     r1,r1,#8
000008  4008              ANDS     r0,r0,r1
00000a  21ff              MOVS     r1,#0xff
00000c  3101              ADDS     r1,#1
00000e  4288              CMP      r0,r1
000010  d101              BNE      |L8.22|
;;;705        {
;;;706            return CONF_XOSC_EXTCK_FREQ;
000012  480d              LDR      r0,|L8.72|
                  |L8.20|
;;;707        }
;;;708        // When CK_LS = CK_ILRCO
;;;709        else if((CSC->CR0.W & CSC_CR0_LS_SEL_mask_w) == CSC_CR0_LS_SEL_ilrco_w)
;;;710        {
;;;711            return ILRCO_VALUE;
;;;712        }
;;;713        // When CK_LS = CK_EXT
;;;714        else if((CSC->CR0.W & CSC_CR0_LS_SEL_mask_w) == CSC_CR0_LS_SEL_ck_ext_w)
;;;715        {
;;;716            return CONF_XOSC_EXTCK_FREQ;
;;;717        }
;;;718        // When get CK_LS failure
;;;719        return 0;
;;;720    }
000014  4770              BX       lr
                  |L8.22|
000016  480b              LDR      r0,|L8.68|
000018  6900              LDR      r0,[r0,#0x10]         ;709
00001a  2103              MOVS     r1,#3                 ;709
00001c  0209              LSLS     r1,r1,#8              ;709
00001e  4008              ANDS     r0,r0,r1              ;709
000020  2101              MOVS     r1,#1                 ;709
000022  0249              LSLS     r1,r1,#9              ;709
000024  4288              CMP      r0,r1                 ;709
000026  d102              BNE      |L8.46|
000028  207d              MOVS     r0,#0x7d              ;711
00002a  0200              LSLS     r0,r0,#8              ;711
00002c  e7f2              B        |L8.20|
                  |L8.46|
00002e  4805              LDR      r0,|L8.68|
000030  6900              LDR      r0,[r0,#0x10]         ;714
000032  2103              MOVS     r1,#3                 ;714
000034  0209              LSLS     r1,r1,#8              ;714
000036  4008              ANDS     r0,r0,r1              ;714
000038  4288              CMP      r0,r1                 ;714
00003a  d101              BNE      |L8.64|
00003c  4802              LDR      r0,|L8.72|
00003e  e7e9              B        |L8.20|
                  |L8.64|
000040  2000              MOVS     r0,#0                 ;719
000042  e7e7              B        |L8.20|
;;;721    
                          ENDP

                  |L8.68|
                          DCD      0x4c010000
                  |L8.72|
                          DCD      0x00b71b00

                          AREA ||i.MID_CSC_GetCK_MAINFreq||, CODE, READONLY, ALIGN=2

                  MID_CSC_GetCK_MAINFreq PROC
;;;524     */
;;;525    uint32_t MID_CSC_GetCK_MAINFreq(void)
000000  b508              PUSH     {r3,lr}
;;;526    {
;;;527        volatile uint32_t iTemp;
;;;528    
;;;529        
;;;530        // When CK_MAIN = CK_HS
;;;531        if((CSC->CR0.W & CSC_CR0_MAIN_SEL_mask_w) == CSC_CR0_MAIN_SEL_ck_hs_w)
000002  4821              LDR      r0,|L9.136|
000004  6900              LDR      r0,[r0,#0x10]
000006  2103              MOVS     r1,#3
000008  0389              LSLS     r1,r1,#14
00000a  4008              ANDS     r0,r0,r1
00000c  2800              CMP      r0,#0
00000e  d102              BNE      |L9.22|
;;;532            return MID_CSC_GetCK_HSFreq();
000010  f7fffffe          BL       MID_CSC_GetCK_HSFreq
                  |L9.20|
;;;533        
;;;534        // When CK_MAIN = CK_PLLI
;;;535        if((CSC->CR0.W & CSC_CR0_MAIN_SEL_mask_w) == CSC_CR0_MAIN_SEL_ck_plli_w)
;;;536        {
;;;537            // Get CK_HS frequency
;;;538            iTemp = MID_CSC_GetCK_HSFreq();
;;;539            // When CK_PLLI = CK_HS /2
;;;540            if((CSC->DIV.W & CSC_DIV_PLLI_DIV_mask_w) == CSC_DIV_PLLI_DIV_div2_w) 
;;;541                iTemp = iTemp / 2;
;;;542            // When CK_PLLI = CK_HS /4
;;;543            if((CSC->DIV.W & CSC_DIV_PLLI_DIV_mask_w) == CSC_DIV_PLLI_DIV_div4_w) 
;;;544                iTemp = iTemp / 4;
;;;545            // When CK_PLLI = CK_HS /6
;;;546            if((CSC->DIV.W & CSC_DIV_PLLI_DIV_mask_w) == CSC_DIV_PLLI_DIV_div6_w) 
;;;547                iTemp = iTemp / 6;
;;;548    
;;;549            // Return frequency
;;;550            return iTemp;
;;;551        }
;;;552    
;;;553        // When CK_MAIN = CK_PLLO
;;;554        if((CSC->CR0.W & CSC_CR0_MAIN_SEL_mask_w) == CSC_CR0_MAIN_SEL_ck_pllo_w)
;;;555            // Return CK_PLLO frequency 
;;;556            return MID_CSC_GetCK_PLLOFreq();
;;;557    
;;;558        // When get CK_MAIN failure
;;;559        return 0;
;;;560    }
000014  bd08              POP      {r3,pc}
                  |L9.22|
000016  481c              LDR      r0,|L9.136|
000018  6900              LDR      r0,[r0,#0x10]         ;535
00001a  2103              MOVS     r1,#3                 ;535
00001c  0389              LSLS     r1,r1,#14             ;535
00001e  4008              ANDS     r0,r0,r1              ;535
000020  2101              MOVS     r1,#1                 ;535
000022  0389              LSLS     r1,r1,#14             ;535
000024  4288              CMP      r0,r1                 ;535
000026  d121              BNE      |L9.108|
000028  f7fffffe          BL       MID_CSC_GetCK_HSFreq
00002c  9000              STR      r0,[sp,#0]            ;538
00002e  4816              LDR      r0,|L9.136|
000030  6940              LDR      r0,[r0,#0x14]         ;540
000032  0780              LSLS     r0,r0,#30             ;540
000034  0f80              LSRS     r0,r0,#30             ;540
000036  2801              CMP      r0,#1                 ;540
000038  d102              BNE      |L9.64|
00003a  9800              LDR      r0,[sp,#0]            ;541
00003c  0840              LSRS     r0,r0,#1              ;541
00003e  9000              STR      r0,[sp,#0]            ;541
                  |L9.64|
000040  4811              LDR      r0,|L9.136|
000042  6940              LDR      r0,[r0,#0x14]         ;543
000044  0780              LSLS     r0,r0,#30             ;543
000046  0f80              LSRS     r0,r0,#30             ;543
000048  2802              CMP      r0,#2                 ;543
00004a  d102              BNE      |L9.82|
00004c  9800              LDR      r0,[sp,#0]            ;544
00004e  0880              LSRS     r0,r0,#2              ;544
000050  9000              STR      r0,[sp,#0]            ;544
                  |L9.82|
000052  480d              LDR      r0,|L9.136|
000054  6940              LDR      r0,[r0,#0x14]         ;546
000056  0780              LSLS     r0,r0,#30             ;546
000058  0f80              LSRS     r0,r0,#30             ;546
00005a  2803              CMP      r0,#3                 ;546
00005c  d104              BNE      |L9.104|
00005e  2106              MOVS     r1,#6                 ;547
000060  9800              LDR      r0,[sp,#0]            ;547
000062  f7fffffe          BL       __aeabi_uidivmod
000066  9000              STR      r0,[sp,#0]            ;547
                  |L9.104|
000068  9800              LDR      r0,[sp,#0]            ;550
00006a  e7d3              B        |L9.20|
                  |L9.108|
00006c  4806              LDR      r0,|L9.136|
00006e  6900              LDR      r0,[r0,#0x10]         ;554
000070  2103              MOVS     r1,#3                 ;554
000072  0389              LSLS     r1,r1,#14             ;554
000074  4008              ANDS     r0,r0,r1              ;554
000076  2101              MOVS     r1,#1                 ;554
000078  03c9              LSLS     r1,r1,#15             ;554
00007a  4288              CMP      r0,r1                 ;554
00007c  d102              BNE      |L9.132|
00007e  f7fffffe          BL       MID_CSC_GetCK_PLLOFreq
000082  e7c7              B        |L9.20|
                  |L9.132|
000084  2000              MOVS     r0,#0                 ;559
000086  e7c5              B        |L9.20|
;;;561    
                          ENDP

                  |L9.136|
                          DCD      0x4c010000

                          AREA ||i.MID_CSC_GetCK_PLLOFreq||, CODE, READONLY, ALIGN=2

                  MID_CSC_GetCK_PLLOFreq PROC
;;;443     */
;;;444    uint32_t MID_CSC_GetCK_PLLOFreq(void)
000000  b508              PUSH     {r3,lr}
;;;445    {   
;;;446        volatile uint32_t iTemp;
;;;447    
;;;448        
;;;449        // When CSC PLL disable
;;;450        if((CSC->CR0.W & CSC_CR0_PLL_EN_mask_w) == 0)
000002  482d              LDR      r0,|L10.184|
000004  6900              LDR      r0,[r0,#0x10]
000006  2120              MOVS     r1,#0x20
000008  4008              ANDS     r0,r0,r1
00000a  2800              CMP      r0,#0
00000c  d100              BNE      |L10.16|
                  |L10.14|
;;;451            return 0;
;;;452        
;;;453      #if defined(MG32_1ST) || defined(MG32_2ND)
;;;454        // When CK_HS frequency
;;;455        iTemp = MID_CSC_GetCK_HSFreq();
;;;456      #endif
;;;457        
;;;458      #if defined(MG32_3RD)
;;;459        // When CK_HS frequency 
;;;460        if((CSC->PLL.W & CSC_PLL_PLLI_SEL_mask_w) == CSC_PLL_PLLI_SEL_ck_hs_w)
;;;461            iTemp = MID_CSC_GetCK_HSFreq();
;;;462        // When CK_HS2 frequency 
;;;463        else
;;;464            iTemp = MID_CSC_GetCK_HS2Freq();
;;;465      #endif
;;;466    
;;;467        // When CK_PLLI = CK_HS /1
;;;468    //    if((CSC->DIV.W & CSC_DIV_PLLI_DIV_mask_w) == CSC_DIV_PLLI_DIV_div1_w) 
;;;469    //        __NOP();
;;;470        // When CK_PLLI = CK_HS /2
;;;471        if((CSC->DIV.W & CSC_DIV_PLLI_DIV_mask_w) == CSC_DIV_PLLI_DIV_div2_w) 
;;;472            iTemp = iTemp / 2;
;;;473        // When CK_PLLI = CK_HS /4
;;;474        if((CSC->DIV.W & CSC_DIV_PLLI_DIV_mask_w) == CSC_DIV_PLLI_DIV_div4_w) 
;;;475            iTemp = iTemp / 4;
;;;476        // When CK_PLLI = CK_HS /6
;;;477        if((CSC->DIV.W & CSC_DIV_PLLI_DIV_mask_w) == CSC_DIV_PLLI_DIV_div6_w) 
;;;478            iTemp = iTemp / 6;
;;;479    
;;;480        #if defined(MG32_1ST) || defined(MG32_2ND)
;;;481        // When CK_PLL = CK_PLLI * 16
;;;482        if((CSC->PLL.W & CSC_PLL_PLL_MUL_mask_w) == CSC_PLL_PLL_MUL_16_w) 
;;;483            iTemp = iTemp * 16;
;;;484        // When CK_PLL = CK_PLLI * 24
;;;485        if((CSC->PLL.W & CSC_PLL_PLL_MUL_mask_w) == CSC_PLL_PLL_MUL_24_w) 
;;;486            iTemp = iTemp * 24;
;;;487        #endif
;;;488        
;;;489        #if defined(MG32_3RD)
;;;490        iTemp = iTemp * (CSC->PLL.MBIT.PLL_MULX + 1);
;;;491        #endif
;;;492    
;;;493        // When CK_PLLO = CK_PLL /1
;;;494    //    if((CSC->DIV.W & CSC_DIV_PLLO_DIV_mask_w) == CSC_DIV_PLLO_DIV_div1_w) 
;;;495    //        __NOP();
;;;496        // When CK_PLLO = CK_PLL /2
;;;497        if((CSC->DIV.W & CSC_DIV_PLLO_DIV_mask_w) == CSC_DIV_PLLO_DIV_div2_w) 
;;;498            iTemp = iTemp / 2;
;;;499        // When CK_PLLO = CK_PLL /3
;;;500        if((CSC->DIV.W & CSC_DIV_PLLO_DIV_mask_w) == CSC_DIV_PLLO_DIV_div3_w) 
;;;501            iTemp = iTemp / 3;
;;;502        // When CK_PLLO = CK_PLL /4
;;;503        if((CSC->DIV.W & CSC_DIV_PLLO_DIV_mask_w) == CSC_DIV_PLLO_DIV_div4_w) 
;;;504            iTemp = iTemp / 4;
;;;505    
;;;506        // Return frequency
;;;507        return iTemp;
;;;508    }
00000e  bd08              POP      {r3,pc}
                  |L10.16|
000010  f7fffffe          BL       MID_CSC_GetCK_HSFreq
000014  9000              STR      r0,[sp,#0]            ;455
000016  4828              LDR      r0,|L10.184|
000018  6940              LDR      r0,[r0,#0x14]         ;471
00001a  0780              LSLS     r0,r0,#30             ;471
00001c  0f80              LSRS     r0,r0,#30             ;471
00001e  2801              CMP      r0,#1                 ;471
000020  d102              BNE      |L10.40|
000022  9800              LDR      r0,[sp,#0]            ;472
000024  0840              LSRS     r0,r0,#1              ;472
000026  9000              STR      r0,[sp,#0]            ;472
                  |L10.40|
000028  4823              LDR      r0,|L10.184|
00002a  6940              LDR      r0,[r0,#0x14]         ;474
00002c  0780              LSLS     r0,r0,#30             ;474
00002e  0f80              LSRS     r0,r0,#30             ;474
000030  2802              CMP      r0,#2                 ;474
000032  d102              BNE      |L10.58|
000034  9800              LDR      r0,[sp,#0]            ;475
000036  0880              LSRS     r0,r0,#2              ;475
000038  9000              STR      r0,[sp,#0]            ;475
                  |L10.58|
00003a  481f              LDR      r0,|L10.184|
00003c  6940              LDR      r0,[r0,#0x14]         ;477
00003e  0780              LSLS     r0,r0,#30             ;477
000040  0f80              LSRS     r0,r0,#30             ;477
000042  2803              CMP      r0,#3                 ;477
000044  d104              BNE      |L10.80|
000046  2106              MOVS     r1,#6                 ;478
000048  9800              LDR      r0,[sp,#0]            ;478
00004a  f7fffffe          BL       __aeabi_uidivmod
00004e  9000              STR      r0,[sp,#0]            ;478
                  |L10.80|
000050  4819              LDR      r0,|L10.184|
000052  6880              LDR      r0,[r0,#8]            ;482
000054  21ff              MOVS     r1,#0xff              ;482
000056  3101              ADDS     r1,#1                 ;482
000058  4008              ANDS     r0,r0,r1              ;482
00005a  2800              CMP      r0,#0                 ;482
00005c  d102              BNE      |L10.100|
00005e  9800              LDR      r0,[sp,#0]            ;483
000060  0100              LSLS     r0,r0,#4              ;483
000062  9000              STR      r0,[sp,#0]            ;483
                  |L10.100|
000064  4814              LDR      r0,|L10.184|
000066  6880              LDR      r0,[r0,#8]            ;485
000068  21ff              MOVS     r1,#0xff              ;485
00006a  3101              ADDS     r1,#1                 ;485
00006c  4008              ANDS     r0,r0,r1              ;485
00006e  4288              CMP      r0,r1                 ;485
000070  d103              BNE      |L10.122|
000072  2118              MOVS     r1,#0x18              ;486
000074  9800              LDR      r0,[sp,#0]            ;486
000076  4348              MULS     r0,r1,r0              ;486
000078  9000              STR      r0,[sp,#0]            ;486
                  |L10.122|
00007a  480f              LDR      r0,|L10.184|
00007c  6940              LDR      r0,[r0,#0x14]         ;497
00007e  2130              MOVS     r1,#0x30              ;497
000080  4008              ANDS     r0,r0,r1              ;497
000082  2820              CMP      r0,#0x20              ;497
000084  d102              BNE      |L10.140|
000086  9800              LDR      r0,[sp,#0]            ;498
000088  0840              LSRS     r0,r0,#1              ;498
00008a  9000              STR      r0,[sp,#0]            ;498
                  |L10.140|
00008c  480a              LDR      r0,|L10.184|
00008e  6940              LDR      r0,[r0,#0x14]         ;500
000090  2130              MOVS     r1,#0x30              ;500
000092  4008              ANDS     r0,r0,r1              ;500
000094  2810              CMP      r0,#0x10              ;500
000096  d104              BNE      |L10.162|
000098  2103              MOVS     r1,#3                 ;501
00009a  9800              LDR      r0,[sp,#0]            ;501
00009c  f7fffffe          BL       __aeabi_uidivmod
0000a0  9000              STR      r0,[sp,#0]            ;501
                  |L10.162|
0000a2  4805              LDR      r0,|L10.184|
0000a4  6940              LDR      r0,[r0,#0x14]         ;503
0000a6  2130              MOVS     r1,#0x30              ;503
0000a8  4008              ANDS     r0,r0,r1              ;503
0000aa  2800              CMP      r0,#0                 ;503
0000ac  d102              BNE      |L10.180|
0000ae  9800              LDR      r0,[sp,#0]            ;504
0000b0  0880              LSRS     r0,r0,#2              ;504
0000b2  9000              STR      r0,[sp,#0]            ;504
                  |L10.180|
0000b4  9800              LDR      r0,[sp,#0]            ;507
0000b6  e7aa              B        |L10.14|
;;;509    
                          ENDP

                  |L10.184|
                          DCD      0x4c010000

                          AREA ||i.MID_CSC_GetCK_PRFreq||, CODE, READONLY, ALIGN=2

                  MID_CSC_GetCK_PRFreq PROC
;;;822     */
;;;823    uint32_t MID_CSC_GetCK_PRFreq(MID_CSC_CK_PR_TypeDef Module)
000000  b570              PUSH     {r4-r6,lr}
;;;824    {
000002  4604              MOV      r4,r0
;;;825        uint32_t lTemp32 = 0;
000004  2500              MOVS     r5,#0
;;;826        
;;;827        
;;;828        
;;;829        switch (Module)
000006  2c51              CMP      r4,#0x51
000008  d075              BEQ      |L11.246|
00000a  dc18              BGT      |L11.62|
00000c  2c31              CMP      r4,#0x31
00000e  d04a              BEQ      |L11.166|
000010  dc0c              BGT      |L11.44|
000012  2c18              CMP      r4,#0x18
000014  d02e              BEQ      |L11.116|
000016  dc04              BGT      |L11.34|
000018  2c00              CMP      r4,#0
00001a  d029              BEQ      |L11.112|
00001c  2c08              CMP      r4,#8
                  |L11.30|
00001e  d16b              BNE      |L11.248|
000020  e027              B        |L11.114|
                  |L11.34|
000022  2c28              CMP      r4,#0x28
000024  d02a              BEQ      |L11.124|
000026  2c30              CMP      r4,#0x30
000028  d1f9              BNE      |L11.30|
00002a  e032              B        |L11.146|
                  |L11.44|
00002c  2c32              CMP      r4,#0x32
00002e  d044              BEQ      |L11.186|
000030  2c33              CMP      r4,#0x33
000032  d04c              BEQ      |L11.206|
000034  2c34              CMP      r4,#0x34
000036  d054              BEQ      |L11.226|
000038  2c40              CMP      r4,#0x40
00003a  d1f0              BNE      |L11.30|
00003c  e05d              B        |L11.250|
                  |L11.62|
00003e  2cb6              CMP      r4,#0xb6
000040  d070              BEQ      |L11.292|
000042  dc0c              BGT      |L11.94|
000044  2c81              CMP      r4,#0x81
000046  d06e              BEQ      |L11.294|
000048  dc04              BGT      |L11.84|
00004a  2c58              CMP      r4,#0x58
00004c  d078              BEQ      |L11.320|
00004e  2c80              CMP      r4,#0x80
000050  d1e5              BNE      |L11.30|
000052  e082              B        |L11.346|
                  |L11.84|
000054  2c90              CMP      r4,#0x90
000056  d068              BEQ      |L11.298|
000058  2c96              CMP      r4,#0x96
00005a  d1e0              BNE      |L11.30|
00005c  e0bc              B        |L11.472|
                  |L11.94|
00005e  2cd0              CMP      r4,#0xd0
000060  d078              BEQ      |L11.340|
000062  2cd1              CMP      r4,#0xd1
000064  d077              BEQ      |L11.342|
000066  2ce0              CMP      r4,#0xe0
000068  d076              BEQ      |L11.344|
00006a  2cf0              CMP      r4,#0xf0
00006c  d1d7              BNE      |L11.30|
00006e  e11f              B        |L11.688|
                  |L11.112|
;;;830        {   // When select CORE
;;;831            case MID_CSC_CK_PR_CORE:
;;;832            // When select DMA
;;;833            case MID_CSC_CK_PR_DMA:
000070  bf00              NOP      
                  |L11.114|
;;;834            // When select MEM
;;;835            case MID_CSC_CK_PR_MEM:
000072  bf00              NOP      
                  |L11.116|
;;;836                lTemp32 = MID_CSC_GetCK_AHBFreq();
000074  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
000078  4605              MOV      r5,r0
;;;837                break;
00007a  e130              B        |L11.734|
                  |L11.124|
;;;838    
;;;839          #if defined(EMB)
;;;840            // When select EMB
;;;841            case MID_CSC_CK_PR_EMB:
;;;842                // When EMB clock enable
;;;843                if((CSC->AHB.W & CSC_AHB_EMB_EN_mask_w) != 0)
;;;844                    lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;845          #endif
;;;846            // When select GPL
;;;847            case MID_CSC_CK_PR_GPL:
;;;848                // When GPL clock enable
;;;849                if((CSC->AHB.W & CSC_AHB_GPL_EN_mask_w) != 0)
00007c  4899              LDR      r0,|L11.740|
00007e  69c0              LDR      r0,[r0,#0x1c]
000080  21ff              MOVS     r1,#0xff
000082  3101              ADDS     r1,#1
000084  4008              ANDS     r0,r0,r1
000086  2800              CMP      r0,#0
000088  d002              BEQ      |L11.144|
;;;850                    lTemp32 = MID_CSC_GetCK_AHBFreq();
00008a  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
00008e  4605              MOV      r5,r0
                  |L11.144|
;;;851                break;
000090  e125              B        |L11.734|
                  |L11.146|
;;;852    
;;;853          #if defined(USB)
;;;854            // When select GPL
;;;855            case MID_CSC_CK_PR_USB:
;;;856                // When USB clock elable    
;;;857                lTemp32 = MID_CSC_GetCK_USBFreq();
;;;858                break;
;;;859          #endif
;;;860    
;;;861            // When select GPIOA
;;;862            case MID_CSC_CK_PR_GPIOA:
;;;863                // When GPIOA clock enable
;;;864                if((CSC->AHB.W & CSC_AHB_IOPA_EN_mask_w) != 0)
000092  4894              LDR      r0,|L11.740|
000094  69c0              LDR      r0,[r0,#0x1c]
000096  07c0              LSLS     r0,r0,#31
000098  0fc0              LSRS     r0,r0,#31
00009a  2800              CMP      r0,#0
00009c  d002              BEQ      |L11.164|
;;;865                    lTemp32 = MID_CSC_GetCK_AHBFreq();
00009e  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
0000a2  4605              MOV      r5,r0
                  |L11.164|
;;;866                break;
0000a4  e11b              B        |L11.734|
                  |L11.166|
;;;867    
;;;868            // When select GPIOB
;;;869            case MID_CSC_CK_PR_GPIOB:
;;;870                // When GPIOB clock enable
;;;871                if((CSC->AHB.W & CSC_AHB_IOPB_EN_mask_w) != 0)
0000a6  488f              LDR      r0,|L11.740|
0000a8  69c0              LDR      r0,[r0,#0x1c]
0000aa  2102              MOVS     r1,#2
0000ac  4008              ANDS     r0,r0,r1
0000ae  2800              CMP      r0,#0
0000b0  d002              BEQ      |L11.184|
;;;872                    lTemp32 = MID_CSC_GetCK_AHBFreq();
0000b2  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
0000b6  4605              MOV      r5,r0
                  |L11.184|
;;;873                break;
0000b8  e111              B        |L11.734|
                  |L11.186|
;;;874    
;;;875            // When select GPIOC
;;;876            case MID_CSC_CK_PR_GPIOC:
;;;877                // When GPIOC clock enable
;;;878                if((CSC->AHB.W & CSC_AHB_IOPC_EN_mask_w) != 0)
0000ba  488a              LDR      r0,|L11.740|
0000bc  69c0              LDR      r0,[r0,#0x1c]
0000be  2104              MOVS     r1,#4
0000c0  4008              ANDS     r0,r0,r1
0000c2  2800              CMP      r0,#0
0000c4  d002              BEQ      |L11.204|
;;;879                    lTemp32 = MID_CSC_GetCK_AHBFreq();
0000c6  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
0000ca  4605              MOV      r5,r0
                  |L11.204|
;;;880                break;
0000cc  e107              B        |L11.734|
                  |L11.206|
;;;881    
;;;882          #if defined(GPIOD)
;;;883            // When select GPIOD
;;;884            case MID_CSC_CK_PR_GPIOD:
;;;885                // When GPIOD clock enable
;;;886                if((CSC->AHB.W & CSC_AHB_IOPD_EN_mask_w) != 0)
0000ce  4885              LDR      r0,|L11.740|
0000d0  69c0              LDR      r0,[r0,#0x1c]
0000d2  2108              MOVS     r1,#8
0000d4  4008              ANDS     r0,r0,r1
0000d6  2800              CMP      r0,#0
0000d8  d002              BEQ      |L11.224|
;;;887                    lTemp32 = MID_CSC_GetCK_AHBFreq();
0000da  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
0000de  4605              MOV      r5,r0
                  |L11.224|
;;;888                break;
0000e0  e0fd              B        |L11.734|
                  |L11.226|
;;;889          #endif
;;;890    
;;;891          #if defined(GPIOE)
;;;892            // When select GPIOE
;;;893            case MID_CSC_CK_PR_GPIOE:
;;;894                // When GPIOE clock enable
;;;895                if((CSC->AHB.W & CSC_AHB_IOPE_EN_mask_w) != 0)
0000e2  4880              LDR      r0,|L11.740|
0000e4  69c0              LDR      r0,[r0,#0x1c]
0000e6  2110              MOVS     r1,#0x10
0000e8  4008              ANDS     r0,r0,r1
0000ea  2800              CMP      r0,#0
0000ec  d002              BEQ      |L11.244|
;;;896                    lTemp32 = MID_CSC_GetCK_AHBFreq();
0000ee  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
0000f2  4605              MOV      r5,r0
                  |L11.244|
;;;897                break;
0000f4  e0f3              B        |L11.734|
                  |L11.246|
0000f6  e019              B        |L11.300|
                  |L11.248|
0000f8  e0f0              B        |L11.732|
                  |L11.250|
;;;898          #endif
;;;899    
;;;900          #if defined(GPIOF)
;;;901            // When select GPIOF
;;;902            case MID_CSC_CK_PR_GPIOF:
;;;903                // When GPIOF clock enable
;;;904                if((CSC->AHB.W & CSC_AHB_IOPF_EN_mask_w) != 0)
;;;905                    lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;906                break;
;;;907          #endif
;;;908    
;;;909          #if defined(GPIOG)
;;;910            // When select GPIOG
;;;911            case MID_CSC_CK_PR_GPIOG:
;;;912                // When GPIOG clock enable
;;;913                if((CSC->AHB.W & CSC_AHB_IOPG_EN_mask_w) != 0)
;;;914                    lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;915                break;
;;;916          #endif
;;;917    
;;;918          #if defined(GPIOH)
;;;919            // When select GPIOH
;;;920            case MID_CSC_CK_PR_GPIOH:
;;;921                // When GPIOH clock enable
;;;922                if((CSC->AHB.W & CSC_AHB_IOPH_EN_mask_w) != 0)
;;;923                    lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;924                break;
;;;925          #endif
;;;926    
;;;927          #if defined(CMP)
;;;928            // When select CMP
;;;929            case MID_CSC_CK_PR_CMP:
;;;930                // When CMP clock enable
;;;931                if((CSC->APB0.W & CSC_APB0_CMP_EN_mask_w) != 0)
;;;932                {   // When CMP clock select APB
;;;933                    if((CSC->CKS0.W & CSC_CKS0_CMP_CKS_mask_w) == 0)
;;;934                        lTemp32 = MID_CSC_GetCK_APBFreq();
;;;935                    // When CMP clock select AHB
;;;936                    else
;;;937                        lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;938                }
;;;939                break;
;;;940          #endif
;;;941    
;;;942            // When select ADC
;;;943            case MID_CSC_CK_PR_ADC:
;;;944                // When ADC clock enable
;;;945                if((CSC->APB0.W & CSC_APB0_ADC0_EN_mask_w) != 0)
0000fa  487a              LDR      r0,|L11.740|
0000fc  6a00              LDR      r0,[r0,#0x20]
0000fe  07c0              LSLS     r0,r0,#31
000100  0fc0              LSRS     r0,r0,#31
000102  2800              CMP      r0,#0
000104  d00d              BEQ      |L11.290|
;;;946                {
;;;947                    // When ADC clock select APB
;;;948                    if((CSC->CKS0.W & CSC_CKS0_ADC0_CKS_mask_w) == 0)
000106  4877              LDR      r0,|L11.740|
000108  3040              ADDS     r0,r0,#0x40
00010a  6800              LDR      r0,[r0,#0]
00010c  07c0              LSLS     r0,r0,#31
00010e  0fc0              LSRS     r0,r0,#31
000110  2800              CMP      r0,#0
000112  d103              BNE      |L11.284|
;;;949                        lTemp32 = MID_CSC_GetCK_APBFreq();
000114  f7fffffe          BL       MID_CSC_GetCK_APBFreq
000118  4605              MOV      r5,r0
00011a  e002              B        |L11.290|
                  |L11.284|
;;;950                    // When ADC clock select AHB
;;;951                    else
;;;952                        lTemp32 = MID_CSC_GetCK_AHBFreq();
00011c  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
000120  4605              MOV      r5,r0
                  |L11.290|
;;;953                }
;;;954                break;
000122  e0dc              B        |L11.734|
                  |L11.292|
000124  e06d              B        |L11.514|
                  |L11.294|
000126  e02d              B        |L11.388|
000128  e00a              B        |L11.320|
                  |L11.298|
00012a  e040              B        |L11.430|
                  |L11.300|
;;;955    
;;;956          #if defined(DAC)
;;;957            // When select DAC
;;;958            case MID_CSC_CK_PR_DAC:
;;;959                if((CSC->APB0.W & CSC_APB0_DAC_EN_mask_w) != 0)
;;;960                {
;;;961                    // When DAC clock select APB
;;;962                    if((CSC->CKS0.W & CSC_CKS0_DAC_CKS_mask_w) == 0)
;;;963                        lTemp32 = MID_CSC_GetCK_APBFreq();
;;;964                    // When DAC clock select AHB
;;;965                    else
;;;966                        lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;967                }
;;;968                break;
;;;969          #endif
;;;970    
;;;971            // When select WWDT
;;;972            case MID_CSC_CK_PR_WWDT:
;;;973                // When WWDT clock enable
;;;974                if((CSC->APB0.W & CSC_APB0_WWDT_EN_mask_w) != 0)
00012c  486d              LDR      r0,|L11.740|
00012e  6a00              LDR      r0,[r0,#0x20]
000130  2180              MOVS     r1,#0x80
000132  4008              ANDS     r0,r0,r1
000134  2800              CMP      r0,#0
000136  d002              BEQ      |L11.318|
;;;975                    lTemp32 = MID_CSC_GetCK_APBFreq();
000138  f7fffffe          BL       MID_CSC_GetCK_APBFreq
00013c  4605              MOV      r5,r0
                  |L11.318|
;;;976                break;
00013e  e0ce              B        |L11.734|
                  |L11.320|
;;;977    
;;;978            // When select RTC
;;;979            case MID_CSC_CK_PR_RTC:
;;;980                // When RTC clock enable
;;;981                if((CSC->APB0.W & CSC_APB0_RTC_EN_mask_w) != 0)
000140  4868              LDR      r0,|L11.740|
000142  6a00              LDR      r0,[r0,#0x20]
000144  2120              MOVS     r1,#0x20
000146  4008              ANDS     r0,r0,r1
000148  2800              CMP      r0,#0
00014a  d002              BEQ      |L11.338|
;;;982                    lTemp32 = MID_CSC_GetCK_APBFreq();
00014c  f7fffffe          BL       MID_CSC_GetCK_APBFreq
000150  4605              MOV      r5,r0
                  |L11.338|
;;;983                break;
000152  e0c4              B        |L11.734|
                  |L11.340|
000154  e06b              B        |L11.558|
                  |L11.342|
000156  e07f              B        |L11.600|
                  |L11.344|
000158  e094              B        |L11.644|
                  |L11.346|
;;;984                
;;;985          #if defined(APX)
;;;986            // When select APX
;;;987            case MID_CSC_CK_PR_APX:
;;;988                if((CSC->APB0.W & CSC_APB0_APX_EN_mask_w) != 0)
;;;989                {
;;;990                    if((CSC->CKS0.W & CSC_CKS0_APX_CKS_mask_w) == 0)
;;;991                        lTemp32 = MID_CSC_GetCK_APBFreq();
;;;992                    else
;;;993                        lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;994                }
;;;995                break;
;;;996          #endif
;;;997                
;;;998            // When select TM00
;;;999            case MID_CSC_CK_PR_TM00:
;;;1000               // When TM00 clock enable
;;;1001               if((CSC->APB1.W & CSC_APB1_TM00_EN_mask_w) != 0)
00015a  4862              LDR      r0,|L11.740|
00015c  6a40              LDR      r0,[r0,#0x24]
00015e  07c0              LSLS     r0,r0,#31
000160  0fc0              LSRS     r0,r0,#31
000162  2800              CMP      r0,#0
000164  d00d              BEQ      |L11.386|
;;;1002               {   // When TM00 clock select APB
;;;1003                   if((CSC->CKS2.W & CSC_CKS2_TM00_CKS_mask_w) == 0)
000166  485f              LDR      r0,|L11.740|
000168  3040              ADDS     r0,r0,#0x40
00016a  6880              LDR      r0,[r0,#8]
00016c  07c0              LSLS     r0,r0,#31
00016e  0fc0              LSRS     r0,r0,#31
000170  2800              CMP      r0,#0
000172  d103              BNE      |L11.380|
;;;1004                       lTemp32 = MID_CSC_GetCK_APBFreq();
000174  f7fffffe          BL       MID_CSC_GetCK_APBFreq
000178  4605              MOV      r5,r0
00017a  e002              B        |L11.386|
                  |L11.380|
;;;1005                   // When TM00 clock select AHB
;;;1006                   else
;;;1007                       lTemp32 = MID_CSC_GetCK_AHBFreq();
00017c  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
000180  4605              MOV      r5,r0
                  |L11.386|
;;;1008               }
;;;1009               break;
000182  e0ac              B        |L11.734|
                  |L11.388|
;;;1010   
;;;1011           // When select TM01
;;;1012           case MID_CSC_CK_PR_TM01:
;;;1013               // When TM01 clock enable
;;;1014               if((CSC->APB1.W & CSC_APB1_TM01_EN_mask_w) != 0)
000184  4857              LDR      r0,|L11.740|
000186  6a40              LDR      r0,[r0,#0x24]
000188  2102              MOVS     r1,#2
00018a  4008              ANDS     r0,r0,r1
00018c  2800              CMP      r0,#0
00018e  d00d              BEQ      |L11.428|
;;;1015               {   // When TM01 clock select APB
;;;1016                   if((CSC->CKS2.W & CSC_CKS2_TM01_CKS_mask_w) == 0)
000190  4854              LDR      r0,|L11.740|
000192  3040              ADDS     r0,r0,#0x40
000194  6880              LDR      r0,[r0,#8]
000196  2104              MOVS     r1,#4
000198  4008              ANDS     r0,r0,r1
00019a  2800              CMP      r0,#0
00019c  d103              BNE      |L11.422|
;;;1017                       lTemp32 = MID_CSC_GetCK_APBFreq();
00019e  f7fffffe          BL       MID_CSC_GetCK_APBFreq
0001a2  4605              MOV      r5,r0
0001a4  e002              B        |L11.428|
                  |L11.422|
;;;1018                   // When TM01 clock select AHB
;;;1019                   else
;;;1020                       lTemp32 = MID_CSC_GetCK_AHBFreq();
0001a6  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
0001aa  4605              MOV      r5,r0
                  |L11.428|
;;;1021               }
;;;1022               break;
0001ac  e097              B        |L11.734|
                  |L11.430|
;;;1023               
;;;1024           // When select TM10
;;;1025           case MID_CSC_CK_PR_TM10:
;;;1026               // When TM10 clock enable
;;;1027               if((CSC->APB1.W & CSC_APB1_TM10_EN_mask_w) != 0)
0001ae  484d              LDR      r0,|L11.740|
0001b0  6a40              LDR      r0,[r0,#0x24]
0001b2  2110              MOVS     r1,#0x10
0001b4  4008              ANDS     r0,r0,r1
0001b6  2800              CMP      r0,#0
0001b8  d00d              BEQ      |L11.470|
;;;1028               {   // When TM10 clock select APB
;;;1029                   if((CSC->CKS2.W & CSC_CKS2_TM10_CKS_mask_w) == 0)
0001ba  484a              LDR      r0,|L11.740|
0001bc  3040              ADDS     r0,r0,#0x40
0001be  6880              LDR      r0,[r0,#8]
0001c0  0109              LSLS     r1,r1,#4
0001c2  4008              ANDS     r0,r0,r1
0001c4  2800              CMP      r0,#0
0001c6  d103              BNE      |L11.464|
;;;1030                       lTemp32 = MID_CSC_GetCK_APBFreq();
0001c8  f7fffffe          BL       MID_CSC_GetCK_APBFreq
0001cc  4605              MOV      r5,r0
0001ce  e002              B        |L11.470|
                  |L11.464|
;;;1031                   // When TM10 clock select AHB
;;;1032                   else
;;;1033                       lTemp32 = MID_CSC_GetCK_AHBFreq();
0001d0  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
0001d4  4605              MOV      r5,r0
                  |L11.470|
;;;1034               }
;;;1035               break;
0001d6  e082              B        |L11.734|
                  |L11.472|
;;;1036   
;;;1037           // When select TM16
;;;1038           case MID_CSC_CK_PR_TM16:
;;;1039               // When TM16 clock enable
;;;1040               if((CSC->APB1.W & CSC_APB1_TM16_EN_mask_w) != 0)
0001d8  4842              LDR      r0,|L11.740|
0001da  6a40              LDR      r0,[r0,#0x24]
0001dc  2180              MOVS     r1,#0x80
0001de  4008              ANDS     r0,r0,r1
0001e0  2800              CMP      r0,#0
0001e2  d00d              BEQ      |L11.512|
;;;1041               {   // When TM16 clock select APB
;;;1042                   if((CSC->CKS2.W & CSC_CKS2_TM16_CKS_mask_w) == 0)
0001e4  483f              LDR      r0,|L11.740|
0001e6  3040              ADDS     r0,r0,#0x40
0001e8  6880              LDR      r0,[r0,#8]
0001ea  01c9              LSLS     r1,r1,#7
0001ec  4008              ANDS     r0,r0,r1
0001ee  2800              CMP      r0,#0
0001f0  d103              BNE      |L11.506|
;;;1043                       lTemp32 = MID_CSC_GetCK_APBFreq();
0001f2  f7fffffe          BL       MID_CSC_GetCK_APBFreq
0001f6  4605              MOV      r5,r0
0001f8  e002              B        |L11.512|
                  |L11.506|
;;;1044                   // When TM16 clock select AHB
;;;1045                   else
;;;1046                       lTemp32 = MID_CSC_GetCK_AHBFreq();
0001fa  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
0001fe  4605              MOV      r5,r0
                  |L11.512|
;;;1047               }
;;;1048               break;
000200  e06d              B        |L11.734|
                  |L11.514|
;;;1049         #if defined(TM20)
;;;1050           // When select TM20
;;;1051           case MID_CSC_CK_PR_TM20:
;;;1052               // When TM20 clock enable
;;;1053               if((CSC->APB1.W & CSC_APB1_TM20_EN_mask_w) != 0)
;;;1054               {   // When TM20 clock select APB
;;;1055                   if((CSC->CKS2.W & CSC_CKS2_TM20_CKS_mask_w) == 0)
;;;1056                       lTemp32 = MID_CSC_GetCK_APBFreq();
;;;1057                   // When TM20 clock select AHB
;;;1058                   else
;;;1059                       lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;1060               }
;;;1061               break;
;;;1062         #endif
;;;1063               
;;;1064         #if defined(TM26)
;;;1065           // When select TM26
;;;1066           case MID_CSC_CK_PR_TM26:
;;;1067               // When TM26 clock enable
;;;1068               if((CSC->APB1.W & CSC_APB1_TM26_EN_mask_w) != 0)
;;;1069               {   // When TM26 clock select APB
;;;1070                   if((CSC->CKS2.W & CSC_CKS2_TM26_CKS_mask_w) == 0)
;;;1071                       lTemp32 = MID_CSC_GetCK_APBFreq();
;;;1072                   // When TM26 clock select AHB
;;;1073                   else
;;;1074                       lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;1075               }
;;;1076               break;
;;;1077         #endif
;;;1078         
;;;1079           // When select TM36
;;;1080           case MID_CSC_CK_PR_TM36:
;;;1081               // When TM36 clock enable
;;;1082               if((CSC->APB1.W & CSC_APB1_TM36_EN_mask_w) != 0)
000202  4838              LDR      r0,|L11.740|
000204  6a40              LDR      r0,[r0,#0x24]
000206  2101              MOVS     r1,#1
000208  03c9              LSLS     r1,r1,#15
00020a  4008              ANDS     r0,r0,r1
00020c  2800              CMP      r0,#0
00020e  d00d              BEQ      |L11.556|
;;;1083               {   // When TM36 clock select APB
;;;1084                   if((CSC->CKS2.W & CSC_CKS2_TM36_CKS_mask_w) == 0)
000210  4834              LDR      r0,|L11.740|
000212  3040              ADDS     r0,r0,#0x40
000214  6880              LDR      r0,[r0,#8]
000216  03c9              LSLS     r1,r1,#15
000218  4008              ANDS     r0,r0,r1
00021a  2800              CMP      r0,#0
00021c  d103              BNE      |L11.550|
;;;1085                       lTemp32 = MID_CSC_GetCK_APBFreq();
00021e  f7fffffe          BL       MID_CSC_GetCK_APBFreq
000222  4605              MOV      r5,r0
000224  e002              B        |L11.556|
                  |L11.550|
;;;1086                   // When TM36 clock select AHB
;;;1087                   else
;;;1088                       lTemp32 = MID_CSC_GetCK_AHBFreq();
000226  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
00022a  4605              MOV      r5,r0
                  |L11.556|
;;;1089               }
;;;1090               break;
00022c  e057              B        |L11.734|
                  |L11.558|
;;;1091   
;;;1092           // When select URT0
;;;1093           case MID_CSC_CK_PR_URT0:  
;;;1094               // When URT0 clock enable            
;;;1095               if((CSC->APB0.W & CSC_APB0_URT0_EN_mask_w) != 0)
00022e  482d              LDR      r0,|L11.740|
000230  6a00              LDR      r0,[r0,#0x20]
000232  2101              MOVS     r1,#1
000234  0409              LSLS     r1,r1,#16
000236  4008              ANDS     r0,r0,r1
000238  2800              CMP      r0,#0
00023a  d00c              BEQ      |L11.598|
;;;1096               {   // When URT0 clock select APB
;;;1097                   if((CSC->CKS1.W & CSC_CKS1_URT0_CKS_mask_w) == 0)
00023c  4829              LDR      r0,|L11.740|
00023e  3040              ADDS     r0,r0,#0x40
000240  6840              LDR      r0,[r0,#4]
000242  4008              ANDS     r0,r0,r1
000244  2800              CMP      r0,#0
000246  d103              BNE      |L11.592|
;;;1098                       lTemp32 = MID_CSC_GetCK_APBFreq();
000248  f7fffffe          BL       MID_CSC_GetCK_APBFreq
00024c  4605              MOV      r5,r0
00024e  e002              B        |L11.598|
                  |L11.592|
;;;1099                   // When URT0 clock select AHB
;;;1100                   else
;;;1101                       lTemp32 = MID_CSC_GetCK_AHBFreq();
000250  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
000254  4605              MOV      r5,r0
                  |L11.598|
;;;1102               }
;;;1103               break;
000256  e042              B        |L11.734|
                  |L11.600|
;;;1104   
;;;1105           // When select URT1
;;;1106           case MID_CSC_CK_PR_URT1:   
;;;1107               // When URT1 clock enable  
;;;1108               if((CSC->APB0.W & CSC_APB0_URT1_EN_mask_w) != 0)
000258  4822              LDR      r0,|L11.740|
00025a  6a00              LDR      r0,[r0,#0x20]
00025c  2101              MOVS     r1,#1
00025e  0449              LSLS     r1,r1,#17
000260  4008              ANDS     r0,r0,r1
000262  2800              CMP      r0,#0
000264  d00d              BEQ      |L11.642|
;;;1109               {   // When URT1 clock select APB
;;;1110                   if((CSC->CKS1.W & CSC_CKS1_URT1_CKS_mask_w) == 0)
000266  481f              LDR      r0,|L11.740|
000268  3040              ADDS     r0,r0,#0x40
00026a  6840              LDR      r0,[r0,#4]
00026c  0049              LSLS     r1,r1,#1
00026e  4008              ANDS     r0,r0,r1
000270  2800              CMP      r0,#0
000272  d103              BNE      |L11.636|
;;;1111                       lTemp32 = MID_CSC_GetCK_APBFreq();
000274  f7fffffe          BL       MID_CSC_GetCK_APBFreq
000278  4605              MOV      r5,r0
00027a  e002              B        |L11.642|
                  |L11.636|
;;;1112                   // When URT1 clock select AHB
;;;1113                   else
;;;1114                       lTemp32 = MID_CSC_GetCK_AHBFreq();
00027c  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
000280  4605              MOV      r5,r0
                  |L11.642|
;;;1115               }
;;;1116               break;
000282  e02c              B        |L11.734|
                  |L11.644|
;;;1117   
;;;1118         #if defined(URT2)
;;;1119           // When select URT2
;;;1120           case MID_CSC_CK_PR_URT2:  
;;;1121               // When URT2 clock enable  
;;;1122               if((CSC->APB0.W & CSC_APB0_URT2_EN_mask_w) != 0)
;;;1123               {   // When URT2 clock select APB
;;;1124                   if((CSC->CKS1.W & CSC_CKS1_URT2_CKS_mask_w) == 0)
;;;1125                       lTemp32 = MID_CSC_GetCK_APBFreq();
;;;1126                   // When URT2 clock select AHB
;;;1127                   else
;;;1128                       lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;1129               }
;;;1130               break;
;;;1131         #endif
;;;1132   
;;;1133         #if defined(URT3)
;;;1134           // When select URT3
;;;1135           case MID_CSC_CK_PR_URT3:   
;;;1136               // When URT3 clock enable  
;;;1137               if((CSC->APB0.W & CSC_APB0_URT3_EN_mask_w) != 0)
;;;1138               {   // When URT3 clock select APB
;;;1139                   if((CSC->CKS1.W & CSC_CKS1_URT3_CKS_mask_w) == 0)
;;;1140                       lTemp32 = MID_CSC_GetCK_APBFreq();
;;;1141                   // When URT3 clock select AHB
;;;1142                   else
;;;1143                       lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;1144               }
;;;1145               break;
;;;1146         #endif
;;;1147         
;;;1148         #if defined(URT4)
;;;1149           // When select URT4
;;;1150           case MID_CSC_CK_PR_URT4:   
;;;1151               // When URT4 clock enable  
;;;1152               if((CSC->APB0.W & CSC_APB0_URT4_EN_mask_w) != 0)
;;;1153               {   // When URT4 clock select APB
;;;1154                   if((CSC->CKS1.W & CSC_CKS1_URT4_CKS_mask_w) == 0)
;;;1155                       lTemp32 = MID_CSC_GetCK_APBFreq();
;;;1156                   // When URT4 clock select AHB
;;;1157                   else
;;;1158                       lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;1159               }
;;;1160               break;
;;;1161         #endif
;;;1162               
;;;1163               #if defined(URT5)
;;;1164           // When select URT5
;;;1165           case MID_CSC_CK_PR_URT5:   
;;;1166               // When URT5 clock enable  
;;;1167               if((CSC->APB0.W & CSC_APB0_URT5_EN_mask_w) != 0)
;;;1168               {   // When URT5 clock select APB
;;;1169                   if((CSC->CKS1.W & CSC_CKS1_URT5_CKS_mask_w) == 0)
;;;1170                       lTemp32 = MID_CSC_GetCK_APBFreq();
;;;1171                   // When URT5 clock select AHB
;;;1172                   else
;;;1173                       lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;1174               }
;;;1175               break;
;;;1176         #endif
;;;1177               
;;;1178               #if defined(URT6)
;;;1179           // When select URT6
;;;1180           case MID_CSC_CK_PR_URT6:   
;;;1181               // When URT6 clock enable  
;;;1182               if((CSC->APB0.W & CSC_APB0_URT6_EN_mask_w) != 0)
;;;1183               {   // When URT6 clock select APB
;;;1184                   if((CSC->CKS1.W & CSC_CKS1_URT6_CKS_mask_w) == 0)
;;;1185                       lTemp32 = MID_CSC_GetCK_APBFreq();
;;;1186                   // When URT6 clock select AHB
;;;1187                   else
;;;1188                       lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;1189               }
;;;1190               break;
;;;1191         #endif
;;;1192               
;;;1193               #if defined(URT7)
;;;1194           // When select URT7
;;;1195           case MID_CSC_CK_PR_URT7:   
;;;1196               // When URT7 clock enable  
;;;1197               if((CSC->APB0.W & CSC_APB0_URT7_EN_mask_w) != 0)
;;;1198               {   // When URT7 clock select APB
;;;1199                   if((CSC->CKS1.W & CSC_CKS1_URT7_CKS_mask_w) == 0)
;;;1200                       lTemp32 = MID_CSC_GetCK_APBFreq();
;;;1201                   // When URT7 clock select AHB
;;;1202                   else
;;;1203                       lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;1204               }
;;;1205               break;
;;;1206         #endif
;;;1207   
;;;1208           // When select SPI0
;;;1209           case MID_CSC_CK_PR_SPI0:     
;;;1210               // When SPI0 clock enable  
;;;1211               if((CSC->APB0.W & CSC_APB0_SPI0_EN_mask_w) != 0)
000284  4817              LDR      r0,|L11.740|
000286  6a00              LDR      r0,[r0,#0x20]
000288  2101              MOVS     r1,#1
00028a  0309              LSLS     r1,r1,#12
00028c  4008              ANDS     r0,r0,r1
00028e  2800              CMP      r0,#0
000290  d00d              BEQ      |L11.686|
;;;1212               {   // When SPI0 clock select APB
;;;1213                   if((CSC->CKS1.W & CSC_CKS1_SPI0_CKS_mask_w) == 0)
000292  4814              LDR      r0,|L11.740|
000294  3040              ADDS     r0,r0,#0x40
000296  6840              LDR      r0,[r0,#4]
000298  1109              ASRS     r1,r1,#4
00029a  4008              ANDS     r0,r0,r1
00029c  2800              CMP      r0,#0
00029e  d103              BNE      |L11.680|
;;;1214                       lTemp32 = MID_CSC_GetCK_APBFreq();
0002a0  f7fffffe          BL       MID_CSC_GetCK_APBFreq
0002a4  4605              MOV      r5,r0
0002a6  e002              B        |L11.686|
                  |L11.680|
;;;1215                   // When SPI0 clock select AHB
;;;1216                   else
;;;1217                       lTemp32 = MID_CSC_GetCK_AHBFreq();
0002a8  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
0002ac  4605              MOV      r5,r0
                  |L11.686|
;;;1218               }
;;;1219               break;
0002ae  e016              B        |L11.734|
                  |L11.688|
;;;1220   
;;;1221         #if defined(SPI1)
;;;1222           // When select SPI1
;;;1223           case MID_CSC_CK_PR_SPI1:    
;;;1224               // When SPI1 clock enable
;;;1225               if((CSC->APB0.W & CSC_APB0_SPI1_EN_mask_w) != 0)
;;;1226               {   // When SPI1 clock select APB
;;;1227                   if((CSC->CKS1.W & CSC_CKS1_SPI1_CKS_mask_w) == 0)
;;;1228                       lTemp32 = MID_CSC_GetCK_APBFreq();
;;;1229                   // When SPI1 clock select AHB
;;;1230                   else
;;;1231                       lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;1232               }
;;;1233               break;
;;;1234         #endif
;;;1235   
;;;1236           // When select I2C0
;;;1237           case MID_CSC_CK_PR_I2C0:   
;;;1238               // When I2C0 clock enable
;;;1239               if((CSC->APB0.W & CSC_APB0_I2C0_EN_mask_w) != 0)
0002b0  480c              LDR      r0,|L11.740|
0002b2  6a00              LDR      r0,[r0,#0x20]
0002b4  21ff              MOVS     r1,#0xff
0002b6  3101              ADDS     r1,#1
0002b8  4008              ANDS     r0,r0,r1
0002ba  2800              CMP      r0,#0
0002bc  d00d              BEQ      |L11.730|
;;;1240               {   // When I2C0 clock select APB
;;;1241                   if((CSC->CKS1.W & CSC_CKS1_I2C0_CKS_mask_w) == 0)
0002be  4809              LDR      r0,|L11.740|
0002c0  3040              ADDS     r0,r0,#0x40
0002c2  6840              LDR      r0,[r0,#4]
0002c4  07c0              LSLS     r0,r0,#31
0002c6  0fc0              LSRS     r0,r0,#31
0002c8  2800              CMP      r0,#0
0002ca  d103              BNE      |L11.724|
;;;1242                       lTemp32 = MID_CSC_GetCK_APBFreq();
0002cc  f7fffffe          BL       MID_CSC_GetCK_APBFreq
0002d0  4605              MOV      r5,r0
0002d2  e002              B        |L11.730|
                  |L11.724|
;;;1243                   // When I2C0 clock select AHB
;;;1244                   else
;;;1245                       lTemp32 = MID_CSC_GetCK_AHBFreq();
0002d4  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
0002d8  4605              MOV      r5,r0
                  |L11.730|
;;;1246               }
;;;1247               break;
0002da  e000              B        |L11.734|
                  |L11.732|
;;;1248   
;;;1249         #if defined(I2C1)
;;;1250           // When select I2C1
;;;1251           case MID_CSC_CK_PR_I2C1:   
;;;1252               // When I2C1 clock enable
;;;1253               if((CSC->APB0.W & CSC_APB0_I2C1_EN_mask_w) != 0)
;;;1254               {   // When I2C1 clock select APB
;;;1255                   if((CSC->CKS1.W & CSC_CKS1_I2C1_CKS_mask_w) == 0)
;;;1256                       lTemp32 = MID_CSC_GetCK_APBFreq();
;;;1257                   // When I2C1 clock select AHB
;;;1258                   else
;;;1259                       lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;1260               }
;;;1261               break;
;;;1262         #endif
;;;1263   
;;;1264         #if defined(I2C2)
;;;1265           // When select I2C2
;;;1266           case MID_CSC_CK_PR_I2C2:   
;;;1267               // When I2C2 clock enable
;;;1268               if((CSC->APB0.W & CSC_APB0_I2C3_EN_mask_w) != 0)
;;;1269               {   // When I2C2 clock select APB
;;;1270                   if((CSC->CKS1.W & CSC_CKS1_I2C3_CKS_mask_w) == 0)
;;;1271                       lTemp32 = MID_CSC_GetCK_APBFreq();
;;;1272                   // When I2C2 clock select AHB
;;;1273                   else
;;;1274                       lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;1275               }
;;;1276               break;
;;;1277         #endif
;;;1278   
;;;1279         #if defined(I2C3)
;;;1280           // When select I2C3
;;;1281           case MID_CSC_CK_PR_I2C3:   
;;;1282               // When I2C3 clock enable
;;;1283               if((CSC->APB0.W & CSC_APB0_I2C3_EN_mask_w) != 0)
;;;1284               {   // When I2C3 clock select APB
;;;1285                   if((CSC->CKS1.W & CSC_CKS1_I2C3_CKS_mask_w) == 0)
;;;1286                       lTemp32 = MID_CSC_GetCK_APBFreq();
;;;1287                   // When I2C3 clock select AHB
;;;1288                   else
;;;1289                       lTemp32 = MID_CSC_GetCK_AHBFreq();
;;;1290               }
;;;1291               break;
;;;1292         #endif
;;;1293   
;;;1294           default:
;;;1295               break;
0002dc  bf00              NOP      
                  |L11.734|
0002de  bf00              NOP                            ;837
;;;1296       }
;;;1297       return lTemp32;
0002e0  4628              MOV      r0,r5
;;;1298   }
0002e2  bd70              POP      {r4-r6,pc}
;;;1299   ///@}
                          ENDP

                  |L11.740|
                          DCD      0x4c010000

                          AREA ||i.MID_CSC_GetCK_UTFreq||, CODE, READONLY, ALIGN=2

                  MID_CSC_GetCK_UTFreq PROC
;;;735     */
;;;736    uint32_t MID_CSC_GetCK_UTFreq(void)
000000  4816              LDR      r0,|L12.92|
;;;737    {
;;;738        // When CK_UT = CK_ILRCO /32
;;;739        if((CSC->DIV.W & CSC_DIV_UT_DIV_mask_w) == CSC_DIV_UT_DIV_div32_w)
000002  6940              LDR      r0,[r0,#0x14]
000004  2103              MOVS     r1,#3
000006  0689              LSLS     r1,r1,#26
000008  4008              ANDS     r0,r0,r1
00000a  2800              CMP      r0,#0
00000c  d102              BNE      |L12.20|
;;;740        {
;;;741            return ILRCO_VALUE / 32;
00000e  207d              MOVS     r0,#0x7d
000010  00c0              LSLS     r0,r0,#3
                  |L12.18|
;;;742        }
;;;743        // When CK_UT = CK_ILRCO /8
;;;744        else if((CSC->DIV.W & CSC_DIV_UT_DIV_mask_w) == CSC_DIV_UT_DIV_div8_w)
;;;745        {
;;;746            return ILRCO_VALUE / 8;
;;;747        }
;;;748        // When CK_UT = CK_ILRCO /16
;;;749        else if((CSC->DIV.W & CSC_DIV_UT_DIV_mask_w) == CSC_DIV_UT_DIV_div16_w)
;;;750        {
;;;751            return ILRCO_VALUE / 16;
;;;752        }
;;;753        // When CK_UT = CK_ILRCO /128
;;;754        else if((CSC->DIV.W & CSC_DIV_UT_DIV_mask_w) == CSC_DIV_UT_DIV_div128_w)
;;;755        {
;;;756            return ILRCO_VALUE / 128;
;;;757        }
;;;758        // When Get CK_UT failure
;;;759        return 0;
;;;760    }
000012  4770              BX       lr
                  |L12.20|
000014  4811              LDR      r0,|L12.92|
000016  6940              LDR      r0,[r0,#0x14]         ;744
000018  2103              MOVS     r1,#3                 ;744
00001a  0689              LSLS     r1,r1,#26             ;744
00001c  4008              ANDS     r0,r0,r1              ;744
00001e  2101              MOVS     r1,#1                 ;744
000020  0689              LSLS     r1,r1,#26             ;744
000022  4288              CMP      r0,r1                 ;744
000024  d102              BNE      |L12.44|
000026  207d              MOVS     r0,#0x7d              ;746
000028  0140              LSLS     r0,r0,#5              ;746
00002a  e7f2              B        |L12.18|
                  |L12.44|
00002c  480b              LDR      r0,|L12.92|
00002e  6940              LDR      r0,[r0,#0x14]         ;749
000030  2103              MOVS     r1,#3                 ;749
000032  0689              LSLS     r1,r1,#26             ;749
000034  4008              ANDS     r0,r0,r1              ;749
000036  2101              MOVS     r1,#1                 ;749
000038  06c9              LSLS     r1,r1,#27             ;749
00003a  4288              CMP      r0,r1                 ;749
00003c  d102              BNE      |L12.68|
00003e  207d              MOVS     r0,#0x7d              ;751
000040  0100              LSLS     r0,r0,#4              ;751
000042  e7e6              B        |L12.18|
                  |L12.68|
000044  4805              LDR      r0,|L12.92|
000046  6940              LDR      r0,[r0,#0x14]         ;754
000048  2103              MOVS     r1,#3                 ;754
00004a  0689              LSLS     r1,r1,#26             ;754
00004c  4008              ANDS     r0,r0,r1              ;754
00004e  4288              CMP      r0,r1                 ;754
000050  d101              BNE      |L12.86|
000052  20fa              MOVS     r0,#0xfa              ;756
000054  e7dd              B        |L12.18|
                  |L12.86|
000056  2000              MOVS     r0,#0                 ;759
000058  e7db              B        |L12.18|
;;;761    
                          ENDP

00005a  0000              DCW      0x0000
                  |L12.92|
                          DCD      0x4c010000

                          AREA ||i.MID_CSC_ICKOConfig||, CODE, READONLY, ALIGN=2

                  MID_CSC_ICKOConfig PROC
;;;278     */
;;;279    void MID_CSC_ICKOConfig(MID_CSC_ICKO_Source_TypeDef CSC_ICKOSource, MID_CSC_ICKO_Div_TypeDef CSC_ICKODiv)
000000  b510              PUSH     {r4,lr}
;;;280    {
;;;281        // Check the parameters
;;;282        // Configure the MCO1 pin in alternate function mode
;;;283        IOMC->CR0.W = PX_CR_IOM_ppo_w | 
000002  4a07              LDR      r2,|L13.32|
000004  4b07              LDR      r3,|L13.36|
000006  601a              STR      r2,[r3,#0]
;;;284                      PX_CR_PU_disable_w | 
;;;285                      PX_CR_HS_enable_w | 
;;;286                      PX_CR_ODC_level0_w |
;;;287                      PX_CR_FDIV_bypass_w | 
;;;288                      PX_CR_INV_disable_w | 
;;;289                      PX_CR_AFS_af1_w;
;;;290    
;;;291        // Configure the ICKO clock source, divider
;;;292        CSC->CKO.W = (CSC->CKO.W & ~(MID_CSC_ICKO_CKO_SEL_MASK | MID_CSC_ICKO_DIV_MASK | MID_CSC_ICKO_EN_MASK)) | 
000008  4a07              LDR      r2,|L13.40|
00000a  6992              LDR      r2,[r2,#0x18]
00000c  237d              MOVS     r3,#0x7d
00000e  439a              BICS     r2,r2,r3
000010  4603              MOV      r3,r0
000012  430b              ORRS     r3,r3,r1
000014  2401              MOVS     r4,#1
000016  4323              ORRS     r3,r3,r4
000018  431a              ORRS     r2,r2,r3
00001a  4b03              LDR      r3,|L13.40|
00001c  619a              STR      r2,[r3,#0x18]
;;;293                     (CSC_ICKOSource | CSC_ICKODiv | CSC_CKO_CKO_EN_enable_w);
;;;294    }
00001e  bd10              POP      {r4,pc}
;;;295    ///@}
                          ENDP

                  |L13.32|
                          DCD      0x0000100a
                  |L13.36|
                          DCD      0x44020000
                  |L13.40|
                          DCD      0x4c010000

                          AREA ||i.MID_CSC_IHRCOCallback||, CODE, READONLY, ALIGN=1

                  MID_CSC_IHRCOCallback PROC
;;;1417    */
;;;1418   __weak void MID_CSC_IHRCOCallback (void)
000000  4770              BX       lr
;;;1419   {
;;;1420       // To do ...
;;;1421   }
;;;1422   
                          ENDP


                          AREA ||i.MID_CSC_ILRCOCallback||, CODE, READONLY, ALIGN=1

                  MID_CSC_ILRCOCallback PROC
;;;1435    */
;;;1436   __weak void MID_CSC_ILRCOCallback (void)
000000  4770              BX       lr
;;;1437   {
;;;1438       // To do ...
;;;1439   }
;;;1440   
                          ENDP


                          AREA ||i.MID_CSC_IRQHandler||, CODE, READONLY, ALIGN=2

                  MID_CSC_IRQHandler PROC
;;;1314    */
;;;1315   void MID_CSC_IRQHandler (void)
000000  b570              PUSH     {r4-r6,lr}
;;;1316   {
;;;1317       uint32_t itsource = CSC->INT.W & ~CSC_INT_IEA_mask_w;
000002  4826              LDR      r0,|L16.156|
000004  6840              LDR      r0,[r0,#4]
000006  0846              LSRS     r6,r0,#1
000008  0076              LSLS     r6,r6,#1
;;;1318       uint32_t itflag   = CSC->STA.W;
00000a  4824              LDR      r0,|L16.156|
00000c  6805              LDR      r5,[r0,#0]
;;;1319       uint32_t itieflag   = (itsource & itflag);
00000e  4630              MOV      r0,r6
000010  4028              ANDS     r0,r0,r5
000012  4604              MOV      r4,r0
;;;1320       
;;;1321       
;;;1322                                                                                   
;;;1323       /* When MCD happened  ----------------------------------------------------*/
;;;1324       if((itieflag & CSC_FLAG_MCDF) != CLR)
000014  2080              MOVS     r0,#0x80
000016  4020              ANDS     r0,r0,r4
000018  2800              CMP      r0,#0
00001a  d008              BEQ      |L16.46|
;;;1325       {
;;;1326           // Clear MCDF flag
;;;1327           __DRV_CSC_CLEAR_FLAG(CSC_FLAG_MCDF);
00001c  481f              LDR      r0,|L16.156|
00001e  6800              LDR      r0,[r0,#0]
000020  2180              MOVS     r1,#0x80
000022  4308              ORRS     r0,r0,r1
000024  491d              LDR      r1,|L16.156|
000026  6008              STR      r0,[r1,#0]
;;;1328           MID_CSC_MCDCallback();
000028  f7fffffe          BL       MID_CSC_MCDCallback
                  |L16.44|
;;;1329           return;
;;;1330       }
;;;1331       
;;;1332       /* When XOSC stable happened  ------------------------------------------- */
;;;1333       if((itieflag & CSC_FLAG_XOSCF) != CLR)
;;;1334       {
;;;1335           // Clear XOSCF flag
;;;1336           __DRV_CSC_CLEAR_FLAG(CSC_FLAG_XOSCF);
;;;1337           MID_CSC_XOSCCallback();
;;;1338           return;
;;;1339       }
;;;1340    
;;;1341       /* When IHRCO stable happened --------------------------------------------*/
;;;1342       if((itieflag & CSC_FLAG_IHRCOF) != CLR)
;;;1343       {
;;;1344           // Clear IHRCOF flag
;;;1345           __DRV_CSC_CLEAR_FLAG(CSC_FLAG_IHRCOF);
;;;1346           MID_CSC_IHRCOCallback();
;;;1347           return;
;;;1348       }
;;;1349   
;;;1350       /* When PLL stable happened ----------------------------------------------*/
;;;1351       if((itieflag & CSC_FLAG_PLLF) != CLR)
;;;1352       {
;;;1353           // Clear PLLF flag
;;;1354           __DRV_CSC_CLEAR_FLAG(CSC_FLAG_PLLF);
;;;1355           MID_CSC_PLLCallback();
;;;1356           return;
;;;1357       }
;;;1358       
;;;1359       /* When ILRCO stable happened  -------------------------------------------*/
;;;1360       if((itieflag & CSC_FLAG_ILRCOF) != CLR)
;;;1361       {
;;;1362           // Clear ILRCOF flag
;;;1363           __DRV_CSC_CLEAR_FLAG(CSC_FLAG_ILRCOF);
;;;1364           MID_CSC_ILRCOCallback();
;;;1365           return;
;;;1366       }
;;;1367   }
00002c  bd70              POP      {r4-r6,pc}
                  |L16.46|
00002e  2002              MOVS     r0,#2                 ;1333
000030  4020              ANDS     r0,r0,r4              ;1333
000032  2800              CMP      r0,#0                 ;1333
000034  d008              BEQ      |L16.72|
000036  4819              LDR      r0,|L16.156|
000038  6800              LDR      r0,[r0,#0]            ;1336
00003a  2102              MOVS     r1,#2                 ;1336
00003c  4308              ORRS     r0,r0,r1              ;1336
00003e  4917              LDR      r1,|L16.156|
000040  6008              STR      r0,[r1,#0]            ;1336
000042  f7fffffe          BL       MID_CSC_XOSCCallback
000046  e7f1              B        |L16.44|
                  |L16.72|
000048  2020              MOVS     r0,#0x20              ;1342
00004a  4020              ANDS     r0,r0,r4              ;1342
00004c  2800              CMP      r0,#0                 ;1342
00004e  d008              BEQ      |L16.98|
000050  4812              LDR      r0,|L16.156|
000052  6800              LDR      r0,[r0,#0]            ;1345
000054  2120              MOVS     r1,#0x20              ;1345
000056  4308              ORRS     r0,r0,r1              ;1345
000058  4910              LDR      r1,|L16.156|
00005a  6008              STR      r0,[r1,#0]            ;1345
00005c  f7fffffe          BL       MID_CSC_IHRCOCallback
000060  e7e4              B        |L16.44|
                  |L16.98|
000062  2040              MOVS     r0,#0x40              ;1351
000064  4020              ANDS     r0,r0,r4              ;1351
000066  2800              CMP      r0,#0                 ;1351
000068  d008              BEQ      |L16.124|
00006a  480c              LDR      r0,|L16.156|
00006c  6800              LDR      r0,[r0,#0]            ;1354
00006e  2140              MOVS     r1,#0x40              ;1354
000070  4308              ORRS     r0,r0,r1              ;1354
000072  490a              LDR      r1,|L16.156|
000074  6008              STR      r0,[r1,#0]            ;1354
000076  f7fffffe          BL       MID_CSC_PLLCallback
00007a  e7d7              B        |L16.44|
                  |L16.124|
00007c  2010              MOVS     r0,#0x10              ;1360
00007e  4020              ANDS     r0,r0,r4              ;1360
000080  2800              CMP      r0,#0                 ;1360
000082  d008              BEQ      |L16.150|
000084  4805              LDR      r0,|L16.156|
000086  6800              LDR      r0,[r0,#0]            ;1363
000088  2110              MOVS     r1,#0x10              ;1363
00008a  4308              ORRS     r0,r0,r1              ;1363
00008c  4903              LDR      r1,|L16.156|
00008e  6008              STR      r0,[r1,#0]            ;1363
000090  f7fffffe          BL       MID_CSC_ILRCOCallback
000094  e7ca              B        |L16.44|
                  |L16.150|
000096  bf00              NOP      
000098  e7c8              B        |L16.44|
;;;1368   
                          ENDP

00009a  0000              DCW      0x0000
                  |L16.156|
                          DCD      0x4c010000

                          AREA ||i.MID_CSC_MCDCallback||, CODE, READONLY, ALIGN=1

                  MID_CSC_MCDCallback PROC
;;;1381    */
;;;1382   __weak void MID_CSC_MCDCallback (void)
000000  4770              BX       lr
;;;1383   {
;;;1384       // To do ...
;;;1385   }
;;;1386   
                          ENDP


                          AREA ||i.MID_CSC_PLLCallback||, CODE, READONLY, ALIGN=1

                  MID_CSC_PLLCallback PROC
;;;1453    */
;;;1454   __weak void MID_CSC_PLLCallback (void)
000000  4770              BX       lr
;;;1455   {
;;;1456       // To do ...
;;;1457   }
;;;1458   
                          ENDP


                          AREA ||i.MID_CSC_XOSCCallback||, CODE, READONLY, ALIGN=1

                  MID_CSC_XOSCCallback PROC
;;;1399    */
;;;1400   __weak void MID_CSC_XOSCCallback (void)
000000  4770              BX       lr
;;;1401   {
;;;1402       // To do ...
;;;1403   }
;;;1404   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CSC_InitConfig
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00010000
                          DCD      0x00000000
                          DCD      0x00000210
                          DCD      0x00000001
                          DCD      0x00000008
                          DCD      0x0000911f
                          DCD      0x000f13ed
                          DCD      0x00008993
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00b71b00
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_CSC_MID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_CSC_MID_c_0b077912____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_CSC_MID_c_0b077912____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_CSC_MID_c_0b077912____REVSH|
#line 496
|__asm___18_MG32x02z_CSC_MID_c_0b077912____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
