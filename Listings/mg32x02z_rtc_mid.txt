; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_rtc_mid.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_rtc_mid.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_rtc_mid.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_RTC_MID.c]
                          THUMB

                          AREA ||i.MID_RTC_AlarmCallback||, CODE, READONLY, ALIGN=1

                  MID_RTC_AlarmCallback PROC
;;;600     */
;;;601    __weak void MID_RTC_AlarmCallback(RTC_HandleTypeDef *mRTC)
000000  4770              BX       lr
;;;602    {
;;;603        /* Prevent unused argument(s) compilation warning */
;;;604        UNUSED(mRTC);
;;;605    
;;;606        /* NOTE : This function should not be modified, when the callback is needed,
;;;607           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
;;;608        */
;;;609    }
;;;610    ///@}
                          ENDP


                          AREA ||i.MID_RTC_CalendarValueCheck||, CODE, READONLY, ALIGN=1

                  MID_RTC_CalendarValueCheck PROC
;;;134     */
;;;135    MID_StatusTypeDef MID_RTC_CalendarValueCheck(RTC_HandleTypeDef *mRTC)
000000  4601              MOV      r1,r0
;;;136    {
;;;137        /* RTC Month Value Check */
;;;138        if(mRTC->sDate.Month>December)
000002  2029              MOVS     r0,#0x29
000004  5c40              LDRB     r0,[r0,r1]
000006  280b              CMP      r0,#0xb
000008  dd01              BLE      |L2.14|
;;;139        {
;;;140            return  MID_FAILURE;
00000a  2001              MOVS     r0,#1
                  |L2.12|
;;;141        }
;;;142        /* RTC Days Value Check */
;;;143        if(mRTC->sDate.Date == 0U)
;;;144        {
;;;145            if(mRTC->sDate.Date>31U)
;;;146            {
;;;147                return MID_FAILURE;
;;;148            }
;;;149        }
;;;150        /* RTC Hour Value Check */
;;;151        if(mRTC->sTime.Hours>23U)
;;;152        {
;;;153            return MID_FAILURE;
;;;154        }
;;;155        /* RTC Minute Value Check */
;;;156        if(mRTC->sTime.Minutes>59U)
;;;157        {
;;;158            return MID_FAILURE;
;;;159        }
;;;160        /* RTC Second Value Check */
;;;161        if(mRTC->sTime.Seconds>59U)
;;;162        {
;;;163            return MID_FAILURE;
;;;164        }
;;;165        
;;;166        return MID_OK;
;;;167    }
00000c  4770              BX       lr
                  |L2.14|
00000e  202a              MOVS     r0,#0x2a              ;143
000010  5c40              LDRB     r0,[r0,r1]            ;143
000012  2800              CMP      r0,#0                 ;143
000014  d105              BNE      |L2.34|
000016  202a              MOVS     r0,#0x2a              ;145
000018  5c40              LDRB     r0,[r0,r1]            ;145
00001a  281f              CMP      r0,#0x1f              ;145
00001c  d901              BLS      |L2.34|
00001e  2001              MOVS     r0,#1                 ;147
000020  e7f4              B        |L2.12|
                  |L2.34|
000022  2030              MOVS     r0,#0x30              ;151
000024  5c40              LDRB     r0,[r0,r1]            ;151
000026  2817              CMP      r0,#0x17              ;151
000028  d901              BLS      |L2.46|
00002a  2001              MOVS     r0,#1                 ;153
00002c  e7ee              B        |L2.12|
                  |L2.46|
00002e  2031              MOVS     r0,#0x31              ;156
000030  5c40              LDRB     r0,[r0,r1]            ;156
000032  283b              CMP      r0,#0x3b              ;156
000034  d901              BLS      |L2.58|
000036  2001              MOVS     r0,#1                 ;158
000038  e7e8              B        |L2.12|
                  |L2.58|
00003a  2032              MOVS     r0,#0x32              ;161
00003c  5c40              LDRB     r0,[r0,r1]            ;161
00003e  283b              CMP      r0,#0x3b              ;161
000040  d901              BLS      |L2.70|
000042  2001              MOVS     r0,#1                 ;163
000044  e7e2              B        |L2.12|
                  |L2.70|
000046  2000              MOVS     r0,#0                 ;166
000048  e7e0              B        |L2.12|
;;;168    
                          ENDP


                          AREA ||i.MID_RTC_Capture_Convert||, CODE, READONLY, ALIGN=2

                  MID_RTC_Capture_Convert PROC
;;;688     */
;;;689    MID_StatusTypeDef MID_RTC_Capture_Convert(RTC_HandleTypeDef *mRTC, uint32_t RTC_CAP)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;690    {
000002  b087              SUB      sp,sp,#0x1c
000004  4606              MOV      r6,r0
;;;691        uint64_t TempC = 0U;
000006  bf00              NOP      
;;;692        const uint8_t MonthDays[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
000008  a294              ADR      r2,|L3.604|
00000a  ca07              LDM      r2,{r0-r2}
00000c  ab04              ADD      r3,sp,#0x10
00000e  c307              STM      r3!,{r0-r2}
;;;693        const uint8_t MonthMap[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ,11, 12};
000010  a295              ADR      r2,|L3.616|
000012  ca07              LDM      r2,{r0-r2}
000014  ab01              ADD      r3,sp,#4
000016  c307              STM      r3!,{r0-r2}
;;;694        uint8_t MaxDayOfMonth;
;;;695        
;;;696        /* Addition base time */
;;;697        TempC = (uint32_t)(mRTC->sTime.Hours * 3600);
000018  2030              MOVS     r0,#0x30
00001a  5d80              LDRB     r0,[r0,r6]
00001c  21e1              MOVS     r1,#0xe1
00001e  0109              LSLS     r1,r1,#4
000020  4348              MULS     r0,r1,r0
000022  4604              MOV      r4,r0
;;;698        TempC += (uint32_t) (mRTC->sTime.Minutes * 60);
000024  2031              MOVS     r0,#0x31
000026  5d80              LDRB     r0,[r0,r6]
000028  213c              MOVS     r1,#0x3c
00002a  4348              MULS     r0,r1,r0
00002c  1904              ADDS     r4,r0,r4
;;;699        TempC += (uint8_t)  (mRTC->sTime.Seconds);
00002e  2032              MOVS     r0,#0x32
000030  5d80              LDRB     r0,[r0,r6]
000032  1904              ADDS     r4,r0,r4
;;;700        
;;;701        RTC_CAP += TempC;
000034  9808              LDR      r0,[sp,#0x20]
000036  1900              ADDS     r0,r0,r4
000038  9008              STR      r0,[sp,#0x20]
;;;702        
;;;703        /* Convert to Second, Minute, Hour */
;;;704        mRTC->sTime.Seconds = RTC_CAP % 60;
00003a  9808              LDR      r0,[sp,#0x20]
00003c  f7fffffe          BL       __aeabi_uidivmod
000040  2032              MOVS     r0,#0x32
000042  5581              STRB     r1,[r0,r6]
;;;705        mRTC->sTime.Minutes = ((RTC_CAP/60)%60); 
000044  213c              MOVS     r1,#0x3c
000046  9808              LDR      r0,[sp,#0x20]
000048  f7fffffe          BL       __aeabi_uidivmod
00004c  213c              MOVS     r1,#0x3c
00004e  9000              STR      r0,[sp,#0]
000050  f7fffffe          BL       __aeabi_uidivmod
000054  2031              MOVS     r0,#0x31
000056  5581              STRB     r1,[r0,r6]
;;;706        mRTC->sTime.Hours   = (RTC_CAP/3600)%24;
000058  21e1              MOVS     r1,#0xe1
00005a  0109              LSLS     r1,r1,#4
00005c  9808              LDR      r0,[sp,#0x20]
00005e  f7fffffe          BL       __aeabi_uidivmod
000062  2118              MOVS     r1,#0x18
000064  9000              STR      r0,[sp,#0]
000066  f7fffffe          BL       __aeabi_uidivmod
00006a  2030              MOVS     r0,#0x30
00006c  5581              STRB     r1,[r0,r6]
;;;707        
;;;708        if((mRTC->Init.HourFormat&RTC_FMT)==RTC_FMT)
00006e  7930              LDRB     r0,[r6,#4]
000070  07c0              LSLS     r0,r0,#31
000072  0fc0              LSRS     r0,r0,#31
000074  2800              CMP      r0,#0
000076  d01e              BEQ      |L3.182|
;;;709        {
;;;710            if((mRTC->sTime.Hours)>=12U)
000078  2030              MOVS     r0,#0x30
00007a  5d80              LDRB     r0,[r0,r6]
00007c  280c              CMP      r0,#0xc
00007e  d30d              BCC      |L3.156|
;;;711            {
;;;712                mRTC->sTime.TimeFormat = RTC_STA_PM;
000080  2101              MOVS     r1,#1
000082  2033              MOVS     r0,#0x33
000084  5581              STRB     r1,[r0,r6]
;;;713                if(mRTC->sTime.Hours>12)
000086  2030              MOVS     r0,#0x30
000088  5d80              LDRB     r0,[r0,r6]
00008a  280c              CMP      r0,#0xc
00008c  dd0c              BLE      |L3.168|
;;;714                    mRTC->sTime.Hours = mRTC->sTime.Hours-12U;
00008e  2030              MOVS     r0,#0x30
000090  5d80              LDRB     r0,[r0,r6]
000092  380c              SUBS     r0,r0,#0xc
000094  b2c1              UXTB     r1,r0
000096  2030              MOVS     r0,#0x30
000098  5581              STRB     r1,[r0,r6]
00009a  e005              B        |L3.168|
                  |L3.156|
;;;715            }
;;;716            else
;;;717                mRTC->sTime.TimeFormat &= ~RTC_STA_PM;
00009c  2033              MOVS     r0,#0x33
00009e  5d80              LDRB     r0,[r0,r6]
0000a0  0841              LSRS     r1,r0,#1
0000a2  0049              LSLS     r1,r1,#1
0000a4  2033              MOVS     r0,#0x33
0000a6  5581              STRB     r1,[r0,r6]
                  |L3.168|
;;;718            
;;;719            if(mRTC->sTime.Hours==0U)
0000a8  2030              MOVS     r0,#0x30
0000aa  5d80              LDRB     r0,[r0,r6]
0000ac  2800              CMP      r0,#0
0000ae  d102              BNE      |L3.182|
;;;720                    mRTC->sTime.Hours = 12U;
0000b0  210c              MOVS     r1,#0xc
0000b2  2030              MOVS     r0,#0x30
0000b4  5581              STRB     r1,[r0,r6]
                  |L3.182|
;;;721        }
;;;722        
;;;723        /* Fill Date, Month, Year */
;;;724        TempC = RTC_CAP / 86400;
0000b6  496f              LDR      r1,|L3.628|
0000b8  9808              LDR      r0,[sp,#0x20]
0000ba  f7fffffe          BL       __aeabi_uidivmod
0000be  2500              MOVS     r5,#0
0000c0  4604              MOV      r4,r0
;;;725        
;;;726        MaxDayOfMonth = MonthDays[mRTC->sDate.Month];
0000c2  2029              MOVS     r0,#0x29
0000c4  5d80              LDRB     r0,[r0,r6]
0000c6  a904              ADD      r1,sp,#0x10
0000c8  5c0f              LDRB     r7,[r1,r0]
;;;727        if(mRTC->sDate.Month == February)
0000ca  2029              MOVS     r0,#0x29
0000cc  5d80              LDRB     r0,[r0,r6]
0000ce  2801              CMP      r0,#1
0000d0  d105              BNE      |L3.222|
;;;728        {
;;;729            if(MID_RTC_LeapYearCheck(mRTC)==isLeapYear)
0000d2  4630              MOV      r0,r6
0000d4  f7fffffe          BL       MID_RTC_LeapYearCheck
0000d8  2805              CMP      r0,#5
0000da  d100              BNE      |L3.222|
;;;730            {
;;;731                MaxDayOfMonth = 29;
0000dc  271d              MOVS     r7,#0x1d
                  |L3.222|
;;;732            }
;;;733        }
;;;734        
;;;735        if(TempC>MaxDayOfMonth)
0000de  2000              MOVS     r0,#0
0000e0  1b39              SUBS     r1,r7,r4
0000e2  41a8              SBCS     r0,r0,r5
0000e4  d27e              BCS      |L3.484|
;;;736        {
;;;737            TempC -= (MaxDayOfMonth - mRTC->sDate.Date);
0000e6  202a              MOVS     r0,#0x2a
0000e8  5d80              LDRB     r0,[r0,r6]
0000ea  1a38              SUBS     r0,r7,r0
0000ec  17c2              ASRS     r2,r0,#31
0000ee  4629              MOV      r1,r5
0000f0  1a24              SUBS     r4,r4,r0
0000f2  4191              SBCS     r1,r1,r2
0000f4  460d              MOV      r5,r1
;;;738            mRTC->sDate.Month++;
0000f6  2029              MOVS     r0,#0x29
0000f8  5d80              LDRB     r0,[r0,r6]
0000fa  1c40              ADDS     r0,r0,#1
0000fc  b2c1              UXTB     r1,r0
0000fe  2029              MOVS     r0,#0x29
000100  5581              STRB     r1,[r0,r6]
;;;739            
;;;740            if(mRTC->sDate.Month>December)
000102  5d80              LDRB     r0,[r0,r6]
000104  280b              CMP      r0,#0xb
000106  dd05              BLE      |L3.276|
;;;741            {
;;;742                mRTC->sDate.Month = January;
000108  2100              MOVS     r1,#0
00010a  2029              MOVS     r0,#0x29
00010c  5581              STRB     r1,[r0,r6]
;;;743                mRTC->sDate.Year++;
00010e  6af0              LDR      r0,[r6,#0x2c]
000110  1c40              ADDS     r0,r0,#1
000112  62f0              STR      r0,[r6,#0x2c]
                  |L3.276|
;;;744            }
;;;745            
;;;746            /* Year */
;;;747            while(TempC>365)
000114  e016              B        |L3.324|
                  |L3.278|
;;;748            {
;;;749                if(MID_RTC_LeapYearCheck(mRTC)==isLeapYear)
000116  4630              MOV      r0,r6
000118  f7fffffe          BL       MID_RTC_LeapYearCheck
00011c  2805              CMP      r0,#5
00011e  d107              BNE      |L3.304|
;;;750                {
;;;751                    TempC -= 366;
000120  4628              MOV      r0,r5
000122  22ff              MOVS     r2,#0xff
000124  326f              ADDS     r2,r2,#0x6f
000126  2100              MOVS     r1,#0
000128  1aa4              SUBS     r4,r4,r2
00012a  4188              SBCS     r0,r0,r1
00012c  4605              MOV      r5,r0
00012e  e006              B        |L3.318|
                  |L3.304|
;;;752                }
;;;753                else
;;;754                {
;;;755                    TempC -= 365;
000130  4628              MOV      r0,r5
000132  22ff              MOVS     r2,#0xff
000134  326e              ADDS     r2,r2,#0x6e
000136  2100              MOVS     r1,#0
000138  1aa4              SUBS     r4,r4,r2
00013a  4188              SBCS     r0,r0,r1
00013c  4605              MOV      r5,r0
                  |L3.318|
;;;756                }
;;;757                
;;;758                mRTC->sDate.Year++;
00013e  6af0              LDR      r0,[r6,#0x2c]
000140  1c40              ADDS     r0,r0,#1
000142  62f0              STR      r0,[r6,#0x2c]
                  |L3.324|
000144  20ff              MOVS     r0,#0xff              ;747
000146  306e              ADDS     r0,r0,#0x6e           ;747
000148  2100              MOVS     r1,#0                 ;747
00014a  1b00              SUBS     r0,r0,r4              ;747
00014c  41a9              SBCS     r1,r1,r5              ;747
00014e  d3e2              BCC      |L3.278|
;;;759            }
;;;760            /* Month */
;;;761            while(TempC>MaxDayOfMonth)
000150  e056              B        |L3.512|
                  |L3.338|
;;;762            {
;;;763                switch(mRTC->sDate.Month)
000152  2029              MOVS     r0,#0x29
000154  5d80              LDRB     r0,[r0,r6]
000156  0003              MOVS     r3,r0
000158  f7fffffe          BL       __ARM_common_switch8
00015c  0c07081b          DCB      0x0c,0x07,0x08,0x1b
000160  271c281d          DCB      0x27,0x1c,0x28,0x1d
000164  1e291f2a          DCB      0x1e,0x29,0x1f,0x2a
000168  2031              DCB      0x20,0x31
;;;764                {
;;;765                    case    January:
;;;766                        
;;;767                    case    February:
00016a  bf00              NOP      
;;;768                                    if(MID_RTC_LeapYearCheck(mRTC)==isLeapYear)
00016c  4630              MOV      r0,r6
00016e  f7fffffe          BL       MID_RTC_LeapYearCheck
000172  2805              CMP      r0,#5
000174  d106              BNE      |L3.388|
;;;769                                        TempC -= 29;
000176  4628              MOV      r0,r5
000178  221d              MOVS     r2,#0x1d
00017a  2100              MOVS     r1,#0
00017c  1aa4              SUBS     r4,r4,r2
00017e  4188              SBCS     r0,r0,r1
000180  4605              MOV      r5,r0
000182  e005              B        |L3.400|
                  |L3.388|
;;;770                                    else
;;;771                                        TempC -= 28;
000184  4628              MOV      r0,r5
000186  221c              MOVS     r2,#0x1c
000188  2100              MOVS     r1,#0
00018a  1aa4              SUBS     r4,r4,r2
00018c  4188              SBCS     r0,r0,r1
00018e  4605              MOV      r5,r0
                  |L3.400|
;;;772                                    break;
000190  e016              B        |L3.448|
;;;773                    case March:
;;;774                    case May:
000192  bf00              NOP      
;;;775                    case July:
000194  bf00              NOP      
;;;776                    case August:
000196  bf00              NOP      
;;;777                    case October:
000198  bf00              NOP      
;;;778                    case December:
00019a  bf00              NOP      
;;;779                                    TempC -= 31;
00019c  4628              MOV      r0,r5
00019e  221f              MOVS     r2,#0x1f
0001a0  2100              MOVS     r1,#0
0001a2  1aa4              SUBS     r4,r4,r2
0001a4  4188              SBCS     r0,r0,r1
0001a6  4605              MOV      r5,r0
;;;780                                    break;
0001a8  e00a              B        |L3.448|
;;;781                    
;;;782                    case April:
;;;783                    case June:
0001aa  bf00              NOP      
;;;784                    case September:
0001ac  bf00              NOP      
;;;785                    case November:
0001ae  bf00              NOP      
;;;786                                    TempC -= 30;
0001b0  4628              MOV      r0,r5
0001b2  221e              MOVS     r2,#0x1e
0001b4  2100              MOVS     r1,#0
0001b6  1aa4              SUBS     r4,r4,r2
0001b8  4188              SBCS     r0,r0,r1
0001ba  4605              MOV      r5,r0
;;;787                                    break;
0001bc  e000              B        |L3.448|
;;;788                    default:
;;;789                                    break;
0001be  bf00              NOP      
                  |L3.448|
0001c0  bf00              NOP                            ;772
;;;790                }
;;;791                mRTC->sDate.Month++;
0001c2  2029              MOVS     r0,#0x29
0001c4  5d80              LDRB     r0,[r0,r6]
0001c6  1c40              ADDS     r0,r0,#1
0001c8  b2c1              UXTB     r1,r0
0001ca  2029              MOVS     r0,#0x29
0001cc  5581              STRB     r1,[r0,r6]
;;;792                
;;;793                if(mRTC->sDate.Month>December)
0001ce  5d80              LDRB     r0,[r0,r6]
0001d0  280b              CMP      r0,#0xb
0001d2  dd05              BLE      |L3.480|
;;;794                {
;;;795                    mRTC->sDate.Month = January;
0001d4  2100              MOVS     r1,#0
0001d6  2029              MOVS     r0,#0x29
0001d8  5581              STRB     r1,[r0,r6]
;;;796                    mRTC->sDate.Year++;
0001da  6af0              LDR      r0,[r6,#0x2c]
0001dc  1c40              ADDS     r0,r0,#1
0001de  62f0              STR      r0,[r6,#0x2c]
                  |L3.480|
;;;797                }
;;;798                
;;;799                MaxDayOfMonth = MonthDays[mRTC->sDate.Month];
0001e0  2029              MOVS     r0,#0x29
0001e2  e000              B        |L3.486|
                  |L3.484|
0001e4  e013              B        |L3.526|
                  |L3.486|
0001e6  5d80              LDRB     r0,[r0,r6]
0001e8  a904              ADD      r1,sp,#0x10
0001ea  5c0f              LDRB     r7,[r1,r0]
;;;800                
;;;801                if(mRTC->sDate.Month == February)
0001ec  2029              MOVS     r0,#0x29
0001ee  5d80              LDRB     r0,[r0,r6]
0001f0  2801              CMP      r0,#1
0001f2  d105              BNE      |L3.512|
;;;802                {
;;;803                    if(MID_RTC_LeapYearCheck(mRTC)==isLeapYear)
0001f4  4630              MOV      r0,r6
0001f6  f7fffffe          BL       MID_RTC_LeapYearCheck
0001fa  2805              CMP      r0,#5
0001fc  d100              BNE      |L3.512|
;;;804                        MaxDayOfMonth = 29;
0001fe  271d              MOVS     r7,#0x1d
                  |L3.512|
000200  2000              MOVS     r0,#0                 ;761
000202  1b39              SUBS     r1,r7,r4              ;761
000204  41a8              SBCS     r0,r0,r5              ;761
000206  d3a4              BCC      |L3.338|
;;;805                }
;;;806            }
;;;807            
;;;808            mRTC->sDate.Date = TempC;
000208  202a              MOVS     r0,#0x2a
00020a  5584              STRB     r4,[r0,r6]
00020c  e01d              B        |L3.586|
                  |L3.526|
;;;809        }
;;;810        
;;;811        else
;;;812        {
;;;813            mRTC->sDate.Date += TempC;
00020e  202a              MOVS     r0,#0x2a
000210  5d80              LDRB     r0,[r0,r6]
000212  1900              ADDS     r0,r0,r4
000214  b2c1              UXTB     r1,r0
000216  202a              MOVS     r0,#0x2a
000218  5581              STRB     r1,[r0,r6]
;;;814            
;;;815            if(mRTC->sDate.Date > MaxDayOfMonth)
00021a  5d80              LDRB     r0,[r0,r6]
00021c  42b8              CMP      r0,r7
00021e  dd14              BLE      |L3.586|
;;;816            {
;;;817                mRTC->sDate.Date -= MaxDayOfMonth;
000220  202a              MOVS     r0,#0x2a
000222  5d80              LDRB     r0,[r0,r6]
000224  1bc0              SUBS     r0,r0,r7
000226  b2c1              UXTB     r1,r0
000228  202a              MOVS     r0,#0x2a
00022a  5581              STRB     r1,[r0,r6]
;;;818                mRTC->sDate.Month++;
00022c  2029              MOVS     r0,#0x29
00022e  5d80              LDRB     r0,[r0,r6]
000230  1c40              ADDS     r0,r0,#1
000232  b2c1              UXTB     r1,r0
000234  2029              MOVS     r0,#0x29
000236  5581              STRB     r1,[r0,r6]
;;;819                
;;;820                if(mRTC->sDate.Month>December)
000238  5d80              LDRB     r0,[r0,r6]
00023a  280b              CMP      r0,#0xb
00023c  dd05              BLE      |L3.586|
;;;821                {
;;;822                    mRTC->sDate.Month = January;
00023e  2100              MOVS     r1,#0
000240  2029              MOVS     r0,#0x29
000242  5581              STRB     r1,[r0,r6]
;;;823                    mRTC->sDate.Year++;
000244  6af0              LDR      r0,[r6,#0x2c]
000246  1c40              ADDS     r0,r0,#1
000248  62f0              STR      r0,[r6,#0x2c]
                  |L3.586|
;;;824                }
;;;825            }
;;;826        }
;;;827        
;;;828        mRTC->sDate.Month = MonthMap[mRTC->sDate.Month];
00024a  2029              MOVS     r0,#0x29
00024c  5d80              LDRB     r0,[r0,r6]
00024e  a901              ADD      r1,sp,#4
000250  5c09              LDRB     r1,[r1,r0]
000252  2029              MOVS     r0,#0x29
000254  5581              STRB     r1,[r0,r6]
;;;829        
;;;830        return MID_OK;
000256  2000              MOVS     r0,#0
;;;831    }
000258  b009              ADD      sp,sp,#0x24
00025a  bdf0              POP      {r4-r7,pc}
;;;832    
                          ENDP

                  |L3.604|
00025c  1f1c1f1e          DCB      31,28,31,30,31,30,31,31,30,31,30,31
000260  1f1e1f1f
000264  1e1f1e1f
                  |L3.616|
000268  01020304          DCB      1,2,3,4,5,6,"\a\b\t\n\v\f"
00026c  05060708
000270  090a0b0c
                  |L3.628|
                          DCD      0x00015180

                          AREA ||i.MID_RTC_DeactivateAlarm||, CODE, READONLY, ALIGN=2

                  MID_RTC_DeactivateAlarm PROC
;;;623     */
;;;624    MID_StatusTypeDef MID_RTC_DeactivateAlarm(RTC_HandleTypeDef *mRTC)
000000  b570              PUSH     {r4-r6,lr}
;;;625    {
000002  4604              MOV      r4,r0
;;;626        uint32_t starttick = 0U;
000004  2500              MOVS     r5,#0
;;;627        /* Process Lock */
;;;628        __DRV_RTC_LOCK(mRTC);
000006  bf00              NOP      
000008  2024              MOVS     r0,#0x24
00000a  5d00              LDRB     r0,[r0,r4]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L4.20|
000010  2002              MOVS     r0,#2
                  |L4.18|
;;;629        mRTC->State = MID_RTC_STATE_BUSY;
;;;630        
;;;631        __DRV_RTC_WRITEPROTECT_DISABLE(mRTC);
;;;632        /* RTC Alarm Function and Interrupt Disable */
;;;633        __DRV_RTC_ALARM_DISABLE(mRTC);
;;;634        __DRV_RTC_DISABLE_IT(mRTC , RTC_IT_ALM);
;;;635        __DRV_RTC_CLEAR_FLAG(mRTC , RTC_STA_ALMF);          /* Clear RTC Alarm Event Flag */
;;;636        
;;;637        while(__DRV_RTC_GET_FLAG(mRTC, RTC_STA_ALMF)==MID_RTC_STATE_RESET)
;;;638        {
;;;639            if(MID_GetTick()-starttick>RTC_TIMEOUT_VALUE)
;;;640            {
;;;641                mRTC->State = MID_RTC_STATE_TIMEOUT;
;;;642                
;;;643                __DRV_RTC_UNLOCK(mRTC);
;;;644                
;;;645                return MID_TIMEOUT;
;;;646            }
;;;647        }
;;;648        
;;;649        __DRV_RTC_WRITEPROTECT_ENABLE(mRTC);
;;;650        /* Process Unlock */
;;;651        mRTC->State = MID_RTC_STATE_READY;
;;;652        
;;;653        return MID_OK;
;;;654    }
000012  bd70              POP      {r4-r6,pc}
                  |L4.20|
000014  2101              MOVS     r1,#1                 ;628
000016  2024              MOVS     r0,#0x24              ;628
000018  5501              STRB     r1,[r0,r4]            ;628
00001a  bf00              NOP                            ;628
00001c  2102              MOVS     r1,#2                 ;629
00001e  2044              MOVS     r0,#0x44              ;629
000020  5501              STRB     r1,[r0,r4]            ;629
000022  bf00              NOP                            ;631
000024  6820              LDR      r0,[r4,#0]            ;631
000026  68c0              LDR      r0,[r0,#0xc]          ;631
000028  0c00              LSRS     r0,r0,#16             ;631
00002a  0400              LSLS     r0,r0,#16             ;631
00002c  6821              LDR      r1,[r4,#0]            ;631
00002e  60c8              STR      r0,[r1,#0xc]          ;631
000030  6820              LDR      r0,[r4,#0]            ;631
000032  68c0              LDR      r0,[r0,#0xc]          ;631
000034  491b              LDR      r1,|L4.164|
000036  4308              ORRS     r0,r0,r1              ;631
000038  6821              LDR      r1,[r4,#0]            ;631
00003a  60c8              STR      r0,[r1,#0xc]          ;631
00003c  bf00              NOP                            ;631
00003e  6820              LDR      r0,[r4,#0]            ;633
000040  7c00              LDRB     r0,[r0,#0x10]         ;633
000042  2102              MOVS     r1,#2                 ;633
000044  4388              BICS     r0,r0,r1              ;633
000046  6821              LDR      r1,[r4,#0]            ;633
000048  7408              STRB     r0,[r1,#0x10]         ;633
00004a  6820              LDR      r0,[r4,#0]            ;634
00004c  6840              LDR      r0,[r0,#4]            ;634
00004e  0880              LSRS     r0,r0,#2              ;634
000050  0080              LSLS     r0,r0,#2              ;634
000052  6821              LDR      r1,[r4,#0]            ;634
000054  6048              STR      r0,[r1,#4]            ;634
000056  2002              MOVS     r0,#2                 ;635
000058  6821              LDR      r1,[r4,#0]            ;635
00005a  6008              STR      r0,[r1,#0]            ;635
00005c  e010              B        |L4.128|
                  |L4.94|
00005e  f7fffffe          BL       MID_GetTick
000062  1b40              SUBS     r0,r0,r5              ;639
000064  217d              MOVS     r1,#0x7d              ;639
000066  00c9              LSLS     r1,r1,#3              ;639
000068  4288              CMP      r0,r1                 ;639
00006a  d909              BLS      |L4.128|
00006c  2103              MOVS     r1,#3                 ;641
00006e  2044              MOVS     r0,#0x44              ;641
000070  5501              STRB     r1,[r0,r4]            ;641
000072  bf00              NOP                            ;643
000074  2100              MOVS     r1,#0                 ;643
000076  2024              MOVS     r0,#0x24              ;643
000078  5501              STRB     r1,[r0,r4]            ;643
00007a  bf00              NOP                            ;643
00007c  2003              MOVS     r0,#3                 ;645
00007e  e7c8              B        |L4.18|
                  |L4.128|
000080  6820              LDR      r0,[r4,#0]            ;637
000082  6800              LDR      r0,[r0,#0]            ;637
000084  2102              MOVS     r1,#2                 ;637
000086  4008              ANDS     r0,r0,r1              ;637
000088  0840              LSRS     r0,r0,#1              ;637
00008a  2800              CMP      r0,#0                 ;637
00008c  d0e7              BEQ      |L4.94|
00008e  bf00              NOP                            ;649
000090  2000              MOVS     r0,#0                 ;649
000092  6821              LDR      r1,[r4,#0]            ;649
000094  60c8              STR      r0,[r1,#0xc]          ;649
000096  bf00              NOP                            ;649
000098  2101              MOVS     r1,#1                 ;651
00009a  2044              MOVS     r0,#0x44              ;651
00009c  5501              STRB     r1,[r0,r4]            ;651
00009e  2000              MOVS     r0,#0                 ;653
0000a0  e7b7              B        |L4.18|
;;;655    ///@}
                          ENDP

0000a2  0000              DCW      0x0000
                  |L4.164|
                          DCD      0x0000a217

                          AREA ||i.MID_RTC_GetState||, CODE, READONLY, ALIGN=1

                  MID_RTC_GetState PROC
;;;668     */
;;;669    uint32_t MID_RTC_GetState(RTC_HandleTypeDef *mRTC)
000000  4601              MOV      r1,r0
;;;670    {
;;;671        /* Return RTC handle state */
;;;672        return mRTC->State;
000002  2044              MOVS     r0,#0x44
000004  5c40              LDRB     r0,[r0,r1]
;;;673    }
000006  4770              BX       lr
;;;674    ///@}
                          ENDP


                          AREA ||i.MID_RTC_GetTime||, CODE, READONLY, ALIGN=2

                  MID_RTC_GetTime PROC
;;;282     */
;;;283    MID_StatusTypeDef MID_RTC_GetTime(RTC_HandleTypeDef *mRTC)
000000  b570              PUSH     {r4-r6,lr}
;;;284    {
000002  4604              MOV      r4,r0
;;;285        uint32_t RTC_CNT0, RTC_CNT1;
;;;286        
;;;287        __DRV_RTC_WRITEPROTECT_DISABLE(mRTC);
000004  bf00              NOP      
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  0c00              LSRS     r0,r0,#16
00000c  0400              LSLS     r0,r0,#16
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
000012  6820              LDR      r0,[r4,#0]
000014  68c0              LDR      r0,[r0,#0xc]
000016  493f              LDR      r1,|L6.276|
000018  4308              ORRS     r0,r0,r1
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
00001e  bf00              NOP      
;;;288        __DRV_RTC_RCR_MDS_SEL(mRTC , RTC_DIRECT_CAP);
000020  6820              LDR      r0,[r4,#0]
000022  6900              LDR      r0,[r0,#0x10]
000024  2130              MOVS     r1,#0x30
000026  4388              BICS     r0,r0,r1
000028  6821              LDR      r1,[r4,#0]
00002a  6108              STR      r0,[r1,#0x10]
00002c  6820              LDR      r0,[r4,#0]
00002e  6900              LDR      r0,[r0,#0x10]
000030  6821              LDR      r1,[r4,#0]
000032  6108              STR      r0,[r1,#0x10]
;;;289        __DRV_RTC_START_EN(mRTC);
000034  2001              MOVS     r0,#1
000036  6821              LDR      r1,[r4,#0]
000038  6148              STR      r0,[r1,#0x14]
;;;290        __NOP();__NOP();__NOP();__NOP();__NOP();
00003a  bf00              NOP      
00003c  bf00              NOP      
00003e  bf00              NOP      
000040  bf00              NOP      
000042  bf00              NOP      
;;;291        __DRV_RTC_CLEAR_FLAG(mRTC , RTC_STA_RCRF);
000044  2020              MOVS     r0,#0x20
000046  6821              LDR      r1,[r4,#0]
000048  6008              STR      r0,[r1,#0]
;;;292        RTC_CNT0 = RTC->CAP.W;
00004a  4833              LDR      r0,|L6.280|
00004c  6a05              LDR      r5,[r0,#0x20]
;;;293        
;;;294        __DRV_RTC_START_EN(mRTC);
00004e  2001              MOVS     r0,#1
000050  6821              LDR      r1,[r4,#0]
000052  6148              STR      r0,[r1,#0x14]
;;;295        __NOP();__NOP();__NOP();__NOP();__NOP();
000054  bf00              NOP      
000056  bf00              NOP      
000058  bf00              NOP      
00005a  bf00              NOP      
00005c  bf00              NOP      
;;;296        __DRV_RTC_CLEAR_FLAG(mRTC , RTC_STA_RCRF);
00005e  2020              MOVS     r0,#0x20
000060  6821              LDR      r1,[r4,#0]
000062  6008              STR      r0,[r1,#0]
;;;297        RTC_CNT1 = RTC->CAP.W;
000064  482c              LDR      r0,|L6.280|
000066  6a06              LDR      r6,[r0,#0x20]
;;;298        
;;;299        while(RTC_CNT0!=RTC_CNT1)
000068  e019              B        |L6.158|
                  |L6.106|
;;;300        {
;;;301            __DRV_RTC_START_EN(mRTC);
00006a  2001              MOVS     r0,#1
00006c  6821              LDR      r1,[r4,#0]
00006e  6148              STR      r0,[r1,#0x14]
;;;302            __NOP();__NOP();__NOP();__NOP();__NOP();
000070  bf00              NOP      
000072  bf00              NOP      
000074  bf00              NOP      
000076  bf00              NOP      
000078  bf00              NOP      
;;;303            __DRV_RTC_CLEAR_FLAG(mRTC , RTC_STA_RCRF);
00007a  2020              MOVS     r0,#0x20
00007c  6821              LDR      r1,[r4,#0]
00007e  6008              STR      r0,[r1,#0]
;;;304            RTC_CNT0 = __DRV_RTC_GetCaputreReg(mRTC);
000080  6820              LDR      r0,[r4,#0]
000082  6a05              LDR      r5,[r0,#0x20]
;;;305            
;;;306            __DRV_RTC_START_EN(mRTC);
000084  2001              MOVS     r0,#1
000086  6821              LDR      r1,[r4,#0]
000088  6148              STR      r0,[r1,#0x14]
;;;307            __NOP();__NOP();__NOP();__NOP();__NOP();
00008a  bf00              NOP      
00008c  bf00              NOP      
00008e  bf00              NOP      
000090  bf00              NOP      
000092  bf00              NOP      
;;;308            __DRV_RTC_CLEAR_FLAG(mRTC , RTC_STA_RCRF);
000094  2020              MOVS     r0,#0x20
000096  6821              LDR      r1,[r4,#0]
000098  6008              STR      r0,[r1,#0]
;;;309            RTC_CNT1 = __DRV_RTC_GetCaputreReg(mRTC);
00009a  6820              LDR      r0,[r4,#0]
00009c  6a06              LDR      r6,[r0,#0x20]
                  |L6.158|
00009e  42b5              CMP      r5,r6                 ;299
0000a0  d1e3              BNE      |L6.106|
;;;310        }
;;;311        
;;;312        mRTC->sDate.Year = mRTC->Init.Init_Year;
0000a2  8ba1              LDRH     r1,[r4,#0x1c]
0000a4  62e1              STR      r1,[r4,#0x2c]
;;;313        mRTC->sDate.Month = mRTC->Init.Init_Month;
0000a6  7fa1              LDRB     r1,[r4,#0x1e]
0000a8  2029              MOVS     r0,#0x29
0000aa  5501              STRB     r1,[r0,r4]
;;;314        mRTC->sDate.Date = mRTC->Init.Init_Date;
0000ac  7fe1              LDRB     r1,[r4,#0x1f]
0000ae  202a              MOVS     r0,#0x2a
0000b0  5501              STRB     r1,[r0,r4]
;;;315        mRTC->sTime.Hours = mRTC->Init.Init_Hours;
0000b2  2020              MOVS     r0,#0x20
0000b4  5d01              LDRB     r1,[r0,r4]
0000b6  2030              MOVS     r0,#0x30
0000b8  5501              STRB     r1,[r0,r4]
;;;316        mRTC->sTime.Minutes = mRTC->Init.Init_Minutes;
0000ba  2021              MOVS     r0,#0x21
0000bc  5d01              LDRB     r1,[r0,r4]
0000be  2031              MOVS     r0,#0x31
0000c0  5501              STRB     r1,[r0,r4]
;;;317        mRTC->sTime.Seconds = mRTC->Init.Init_Seconds;
0000c2  2022              MOVS     r0,#0x22
0000c4  5d01              LDRB     r1,[r0,r4]
0000c6  2032              MOVS     r0,#0x32
0000c8  5501              STRB     r1,[r0,r4]
;;;318        
;;;319        
;;;320        MID_RTC_Capture_Convert(mRTC, RTC_CNT0);
0000ca  4629              MOV      r1,r5
0000cc  4620              MOV      r0,r4
0000ce  f7fffffe          BL       MID_RTC_Capture_Convert
;;;321        MID_RTC_GetWeekend(mRTC);
0000d2  4620              MOV      r0,r4
0000d4  f7fffffe          BL       MID_RTC_GetWeekend
;;;322        
;;;323        __DRV_RTC_RCR_MDS_SEL(mRTC , RTC_AUTO_RELOAD);
0000d8  6820              LDR      r0,[r4,#0]
0000da  6900              LDR      r0,[r0,#0x10]
0000dc  2130              MOVS     r1,#0x30
0000de  4388              BICS     r0,r0,r1
0000e0  6821              LDR      r1,[r4,#0]
0000e2  6108              STR      r0,[r1,#0x10]
0000e4  6820              LDR      r0,[r4,#0]
0000e6  6900              LDR      r0,[r0,#0x10]
0000e8  2130              MOVS     r1,#0x30
0000ea  4308              ORRS     r0,r0,r1
0000ec  6821              LDR      r1,[r4,#0]
0000ee  6108              STR      r0,[r1,#0x10]
;;;324        __DRV_RTC_START_EN(mRTC);
0000f0  2001              MOVS     r0,#1
0000f2  6821              LDR      r1,[r4,#0]
0000f4  6148              STR      r0,[r1,#0x14]
;;;325        __NOP();__NOP();__NOP();__NOP();__NOP();
0000f6  bf00              NOP      
0000f8  bf00              NOP      
0000fa  bf00              NOP      
0000fc  bf00              NOP      
0000fe  bf00              NOP      
;;;326        __DRV_RTC_CLEAR_FLAG(mRTC , RTC_STA_RCRF);
000100  2020              MOVS     r0,#0x20
000102  6821              LDR      r1,[r4,#0]
000104  6008              STR      r0,[r1,#0]
;;;327        
;;;328        __DRV_RTC_WRITEPROTECT_ENABLE(mRTC);
000106  bf00              NOP      
000108  2000              MOVS     r0,#0
00010a  6821              LDR      r1,[r4,#0]
00010c  60c8              STR      r0,[r1,#0xc]
00010e  bf00              NOP      
;;;329        return MID_OK;
;;;330    }
000110  bd70              POP      {r4-r6,pc}
;;;331    ///@}
                          ENDP

000112  0000              DCW      0x0000
                  |L6.276|
                          DCD      0x0000a217
                  |L6.280|
                          DCD      0x5d040000

                          AREA ||i.MID_RTC_GetWeekend||, CODE, READONLY, ALIGN=2

                  MID_RTC_GetWeekend PROC
;;;854     */
;;;855    uint32_t MID_RTC_GetWeekend(RTC_HandleTypeDef *mRTC)
000000  b5f0              PUSH     {r4-r7,lr}
;;;856    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
;;;857        uint8_t C, Y, M, D;
;;;858        const   uint8_t MonthWeekendTable[] = {0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5};
000006  a22b              ADR      r2,|L7.180|
000008  ca07              LDM      r2,{r0-r2}
00000a  ab02              ADD      r3,sp,#8
00000c  c307              STM      r3!,{r0-r2}
;;;859        
;;;860        C = (mRTC->sDate.Year/100);
00000e  2164              MOVS     r1,#0x64
000010  6ae0              LDR      r0,[r4,#0x2c]
000012  f7fffffe          BL       __aeabi_uidivmod
000016  b2c5              UXTB     r5,r0
;;;861        Y = (mRTC->sDate.Year%100);
000018  2164              MOVS     r1,#0x64
00001a  6ae0              LDR      r0,[r4,#0x2c]
00001c  f7fffffe          BL       __aeabi_uidivmod
000020  460e              MOV      r6,r1
;;;862        M = MonthWeekendTable[mRTC->sDate.Month];
000022  2029              MOVS     r0,#0x29
000024  5d00              LDRB     r0,[r0,r4]
000026  a902              ADD      r1,sp,#8
000028  5c08              LDRB     r0,[r1,r0]
00002a  9006              STR      r0,[sp,#0x18]
;;;863        D = (mRTC->sDate.Date % 7);
00002c  212a              MOVS     r1,#0x2a
00002e  5d08              LDRB     r0,[r1,r4]
000030  2107              MOVS     r1,#7
000032  f7fffffe          BL       __aeabi_idivmod
000036  b2c8              UXTB     r0,r1
000038  9005              STR      r0,[sp,#0x14]
;;;864        
;;;865        /* Calendar Century Factor */
;;;866        C = 2 * (3 - (C %4));
00003a  4628              MOV      r0,r5
00003c  17e9              ASRS     r1,r5,#31
00003e  0f89              LSRS     r1,r1,#30
000040  1809              ADDS     r1,r1,r0
000042  1089              ASRS     r1,r1,#2
000044  0089              LSLS     r1,r1,#2
000046  1a69              SUBS     r1,r5,r1
000048  2203              MOVS     r2,#3
00004a  1a51              SUBS     r1,r2,r1
00004c  0649              LSLS     r1,r1,#25
00004e  0e0d              LSRS     r5,r1,#24
;;;867        
;;;868        /* Calendar Year Factor */
;;;869        Y = ((Y %28) + ((Y %28) /4)) %7;
000050  211c              MOVS     r1,#0x1c
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       __aeabi_idivmod
000058  460f              MOV      r7,r1
00005a  211c              MOVS     r1,#0x1c
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       __aeabi_idivmod
000062  17c8              ASRS     r0,r1,#31
000064  9101              STR      r1,[sp,#4]
000066  0f81              LSRS     r1,r0,#30
000068  9801              LDR      r0,[sp,#4]
00006a  1808              ADDS     r0,r1,r0
00006c  1080              ASRS     r0,r0,#2
00006e  1838              ADDS     r0,r7,r0
000070  2107              MOVS     r1,#7
000072  9000              STR      r0,[sp,#0]
000074  f7fffffe          BL       __aeabi_idivmod
000078  b2ce              UXTB     r6,r1
;;;870        
;;;871        if(MID_RTC_LeapYearCheck(mRTC)==isLeapYear)
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       MID_RTC_LeapYearCheck
000080  2805              CMP      r0,#5
000082  d109              BNE      |L7.152|
;;;872        {
;;;873            if((mRTC->sDate.Month==February)||(mRTC->sDate.Month==February))
000084  2029              MOVS     r0,#0x29
000086  5d00              LDRB     r0,[r0,r4]
000088  2801              CMP      r0,#1
00008a  d003              BEQ      |L7.148|
00008c  2029              MOVS     r0,#0x29
00008e  5d00              LDRB     r0,[r0,r4]
000090  2801              CMP      r0,#1
000092  d101              BNE      |L7.152|
                  |L7.148|
;;;874                Y--;
000094  1e70              SUBS     r0,r6,#1
000096  b2c6              UXTB     r6,r0
                  |L7.152|
;;;875        }
;;;876        
;;;877        /* Calendar Weekend */
;;;878        mRTC->sDate.WeekDay = (Weekend_TypeDef) ((C+Y+M+D)%7);
000098  19aa              ADDS     r2,r5,r6
00009a  9906              LDR      r1,[sp,#0x18]
00009c  1852              ADDS     r2,r2,r1
00009e  9905              LDR      r1,[sp,#0x14]
0000a0  1850              ADDS     r0,r2,r1
0000a2  2107              MOVS     r1,#7
0000a4  f7fffffe          BL       __aeabi_idivmod
0000a8  2028              MOVS     r0,#0x28
0000aa  5501              STRB     r1,[r0,r4]
;;;879        
;;;880        return mRTC->sDate.WeekDay;
0000ac  5d00              LDRB     r0,[r0,r4]
;;;881    }
0000ae  b007              ADD      sp,sp,#0x1c
0000b0  bdf0              POP      {r4-r7,pc}
;;;882    ///@}
                          ENDP

0000b2  0000              DCW      0x0000
                  |L7.180|
0000b4  00                DCB      0
0000b5  03030601          DCB      3,3,6,1,4,6,2,5,0
0000b9  04060205
0000bd  00      
0000be  0305              DCB      3,5

                          AREA ||i.MID_RTC_IRQHandler||, CODE, READONLY, ALIGN=1

                  MID_RTC_IRQHandler PROC
;;;469     */
;;;470    void MID_RTC_IRQHandler(RTC_HandleTypeDef *mRTC)
000000  b510              PUSH     {r4,lr}
;;;471    {
000002  4604              MOV      r4,r0
;;;472        /* Get RTC Reload and Capture interrupt source enable status */
;;;473        if(__DRV_RTC_GET_FLAG(mRTC , RTC_IT_RCR) != 0U)
000004  6820              LDR      r0,[r4,#0]
000006  6800              LDR      r0,[r0,#0]
000008  2120              MOVS     r1,#0x20
00000a  4008              ANDS     r0,r0,r1
00000c  0940              LSRS     r0,r0,#5
00000e  2800              CMP      r0,#0
000010  d005              BEQ      |L8.30|
;;;474        {
;;;475            /* RTC RCR Callback */
;;;476            MID_RTC_RCRCallback(mRTC);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       MID_RTC_RCRCallback
;;;477            
;;;478            /* Clear the reload and capture interrupt peding bit */
;;;479            __DRV_RTC_CLEAR_FLAG(mRTC , RTC_IT_RCR);
000018  2020              MOVS     r0,#0x20
00001a  6821              LDR      r1,[r4,#0]
00001c  6008              STR      r0,[r1,#0]
                  |L8.30|
;;;480        }
;;;481        /* Get RTC Overflow interrupt source enable status */
;;;482        if(__DRV_RTC_GET_FLAG(mRTC , RTC_IT_TIE) != 0U)
00001e  6820              LDR      r0,[r4,#0]
000020  6800              LDR      r0,[r0,#0]
000022  2110              MOVS     r1,#0x10
000024  4008              ANDS     r0,r0,r1
000026  0900              LSRS     r0,r0,#4
000028  2800              CMP      r0,#0
00002a  d005              BEQ      |L8.56|
;;;483        {
;;;484            /* RTC Overflow Callback */
;;;485            MID_RTC_TFCallback(mRTC);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       MID_RTC_TFCallback
;;;486            
;;;487            /* Clear the overflow interrupt pending bit */
;;;488            __DRV_RTC_CLEAR_FLAG(mRTC , RTC_IT_TIE);
000032  2010              MOVS     r0,#0x10
000034  6821              LDR      r1,[r4,#0]
000036  6008              STR      r0,[r1,#0]
                  |L8.56|
;;;489        }
;;;490        /* Get RTC Time Stamp interrupt source enable status */
;;;491        if(__DRV_RTC_GET_FLAG(mRTC , RTC_IT_TS) != 0U)
000038  6820              LDR      r0,[r4,#0]
00003a  6800              LDR      r0,[r0,#0]
00003c  2108              MOVS     r1,#8
00003e  4008              ANDS     r0,r0,r1
000040  08c0              LSRS     r0,r0,#3
000042  2800              CMP      r0,#0
000044  d005              BEQ      |L8.82|
;;;492        {
;;;493            /* RTC Time Stamp Callback */
;;;494            MID_RTC_TSCallback(mRTC);
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       MID_RTC_TSCallback
;;;495            
;;;496            /* Clear the time stamp interrupt peding bit */
;;;497            __DRV_RTC_CLEAR_FLAG(mRTC , RTC_IT_TS);
00004c  2008              MOVS     r0,#8
00004e  6821              LDR      r1,[r4,#0]
000050  6008              STR      r0,[r1,#0]
                  |L8.82|
;;;498        }
;;;499        /* Get RTC Periodic interrupt source enable status */
;;;500        if(__DRV_RTC_GET_FLAG(mRTC , RTC_IT_PC) != 0U)
000052  6820              LDR      r0,[r4,#0]
000054  6800              LDR      r0,[r0,#0]
000056  2104              MOVS     r1,#4
000058  4008              ANDS     r0,r0,r1
00005a  0880              LSRS     r0,r0,#2
00005c  2800              CMP      r0,#0
00005e  d005              BEQ      |L8.108|
;;;501        {
;;;502             /* RTC Periodic Callback */
;;;503            MID_RTC_PCCallback(mRTC);
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       MID_RTC_PCCallback
;;;504            
;;;505            /* Clear the Periodic interrupt peding bit */
;;;506            __DRV_RTC_CLEAR_FLAG(mRTC , RTC_IT_PC);
000066  2004              MOVS     r0,#4
000068  6821              LDR      r1,[r4,#0]
00006a  6008              STR      r0,[r1,#0]
                  |L8.108|
;;;507        }
;;;508        /* Get RTC Alarm interrup source enable status */
;;;509        if(__DRV_RTC_GET_FLAG(mRTC , RTC_IT_ALM) != 0U)
00006c  6820              LDR      r0,[r4,#0]
00006e  6800              LDR      r0,[r0,#0]
000070  2102              MOVS     r1,#2
000072  4008              ANDS     r0,r0,r1
000074  0840              LSRS     r0,r0,#1
000076  2800              CMP      r0,#0
000078  d005              BEQ      |L8.134|
;;;510        {
;;;511             /* RTC Alarm Callbacl */
;;;512            MID_RTC_AlarmCallback(mRTC);
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       MID_RTC_AlarmCallback
;;;513            
;;;514            /* Clear the alarm interrupt peding bit */
;;;515            __DRV_RTC_CLEAR_FLAG(mRTC , RTC_IT_ALM);
000080  2002              MOVS     r0,#2
000082  6821              LDR      r1,[r4,#0]
000084  6008              STR      r0,[r1,#0]
                  |L8.134|
;;;516        }
;;;517        
;;;518    }
000086  bd10              POP      {r4,pc}
;;;519    ///@}
                          ENDP


                          AREA ||i.MID_RTC_Init||, CODE, READONLY, ALIGN=2

                  MID_RTC_Init PROC
;;;65      */
;;;66     MID_StatusTypeDef MID_RTC_Init(RTC_HandleTypeDef *mRTC)
000000  b510              PUSH     {r4,lr}
;;;67     {
000002  4604              MOV      r4,r0
;;;68         /* Check the RTC peripheral state */
;;;69         if(mRTC==NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L9.12|
;;;70         {
;;;71             return MID_ERROR;
000008  2001              MOVS     r0,#1
                  |L9.10|
;;;72         }
;;;73         
;;;74         if(mRTC->State == MID_RTC_STATE_RESET)
;;;75         {
;;;76             /* Allocate lock resource and initialize it */
;;;77             mRTC->Lock = MID_UNLOCKED;
;;;78             
;;;79             /* Initialize RTC MSP */
;;;80             MID_RTC_MspInit(mRTC);
;;;81         }
;;;82         
;;;83         mRTC->State = MID_RTC_STATE_BUSY;
;;;84         
;;;85         /* RTC Calendar Initial Value Check */
;;;86         if(MID_RTC_CalendarValueCheck(mRTC)==MID_FAILURE)
;;;87         {
;;;88              return MID_FAILURE;
;;;89         }
;;;90         
;;;91         /* Enable the write protection for RTC registers */
;;;92         __DRV_RTC_WRITEPROTECT_DISABLE(mRTC);
;;;93         if(RTC_EnterInitMode(mRTC) != MID_OK)
;;;94         {
;;;95             /* Set RTC State */
;;;96             mRTC->State = MID_RTC_STATE_ERROR;
;;;97             return MID_ERROR;
;;;98         }
;;;99         else
;;;100        {
;;;101            if(mRTC->Init.RTC_CK_DIV != RTC_CLK_DIV_8)
;;;102            {
;;;103                mRTC->Init.RTC_CK_DIV = RTC_CLK_DIV_8;
;;;104            }
;;;105            
;;;106            if(mRTC->Init.RTC_CK_PDIV != RTC_CLK_PDIV_4096)
;;;107            {
;;;108                mRTC->Init.RTC_CK_PDIV = RTC_CLK_PDIV_4096;
;;;109            }
;;;110            
;;;111            /* RTC clock set */
;;;112            __DRV_RTC_DIVID_SEL(mRTC , mRTC->Init.RTC_CK_DIV);
;;;113            __DRV_RTC_PDIVID_SEL(mRTC , mRTC->Init.RTC_CK_PDIV);
;;;114            __DRV_RTC_CLOCK_SEL(mRTC , mRTC->Init.RTC_CK_SEL);
;;;115            __DRV_RTC_ENABLE_IT(mRTC , mRTC->Init.RTC_INT);     /* RTC interrupt enable. */
;;;116            
;;;117            /* RTC counter value set */
;;;118            MID_RTC_SetTime(mRTC, mRTC->Init.RTC_RLR);
;;;119            /* RTC function enable */
;;;120            __DRV_RTC_ENABLE(mRTC);
;;;121        }
;;;122        /* Enable RTC Register Write Protect */
;;;123        __DRV_RTC_WRITEPROTECT_ENABLE(mRTC);
;;;124        
;;;125        return MID_OK;
;;;126    }
00000a  bd10              POP      {r4,pc}
                  |L9.12|
00000c  2044              MOVS     r0,#0x44              ;74
00000e  5d00              LDRB     r0,[r0,r4]            ;74
000010  2800              CMP      r0,#0                 ;74
000012  d105              BNE      |L9.32|
000014  2100              MOVS     r1,#0                 ;77
000016  2024              MOVS     r0,#0x24              ;77
000018  5501              STRB     r1,[r0,r4]            ;77
00001a  4620              MOV      r0,r4                 ;80
00001c  f7fffffe          BL       MID_RTC_MspInit
                  |L9.32|
000020  2102              MOVS     r1,#2                 ;83
000022  2044              MOVS     r0,#0x44              ;83
000024  5501              STRB     r1,[r0,r4]            ;83
000026  4620              MOV      r0,r4                 ;86
000028  f7fffffe          BL       MID_RTC_CalendarValueCheck
00002c  2801              CMP      r0,#1                 ;86
00002e  d100              BNE      |L9.50|
000030  e7eb              B        |L9.10|
                  |L9.50|
000032  bf00              NOP                            ;92
000034  6820              LDR      r0,[r4,#0]            ;92
000036  68c0              LDR      r0,[r0,#0xc]          ;92
000038  0c00              LSRS     r0,r0,#16             ;92
00003a  0400              LSLS     r0,r0,#16             ;92
00003c  6821              LDR      r1,[r4,#0]            ;92
00003e  60c8              STR      r0,[r1,#0xc]          ;92
000040  6820              LDR      r0,[r4,#0]            ;92
000042  68c0              LDR      r0,[r0,#0xc]          ;92
000044  4929              LDR      r1,|L9.236|
000046  4308              ORRS     r0,r0,r1              ;92
000048  6821              LDR      r1,[r4,#0]            ;92
00004a  60c8              STR      r0,[r1,#0xc]          ;92
00004c  bf00              NOP                            ;92
00004e  4620              MOV      r0,r4                 ;93
000050  f7fffffe          BL       RTC_EnterInitMode
000054  2800              CMP      r0,#0                 ;93
000056  d004              BEQ      |L9.98|
000058  2104              MOVS     r1,#4                 ;96
00005a  2044              MOVS     r0,#0x44              ;96
00005c  5501              STRB     r1,[r0,r4]            ;96
00005e  2001              MOVS     r0,#1                 ;97
000060  e7d3              B        |L9.10|
                  |L9.98|
000062  7c60              LDRB     r0,[r4,#0x11]         ;101
000064  2830              CMP      r0,#0x30              ;101
000066  d001              BEQ      |L9.108|
000068  2130              MOVS     r1,#0x30              ;103
00006a  7461              STRB     r1,[r4,#0x11]         ;103
                  |L9.108|
00006c  7c20              LDRB     r0,[r4,#0x10]         ;106
00006e  2800              CMP      r0,#0                 ;106
000070  d001              BEQ      |L9.118|
000072  2100              MOVS     r1,#0                 ;108
000074  7421              STRB     r1,[r4,#0x10]         ;108
                  |L9.118|
000076  6820              LDR      r0,[r4,#0]            ;112
000078  6880              LDR      r0,[r0,#8]            ;112
00007a  2130              MOVS     r1,#0x30              ;112
00007c  4388              BICS     r0,r0,r1              ;112
00007e  6821              LDR      r1,[r4,#0]            ;112
000080  6088              STR      r0,[r1,#8]            ;112
000082  6820              LDR      r0,[r4,#0]            ;112
000084  6880              LDR      r0,[r0,#8]            ;112
000086  7c61              LDRB     r1,[r4,#0x11]         ;112
000088  4308              ORRS     r0,r0,r1              ;112
00008a  6821              LDR      r1,[r4,#0]            ;112
00008c  6088              STR      r0,[r1,#8]            ;112
00008e  6820              LDR      r0,[r4,#0]            ;113
000090  6880              LDR      r0,[r0,#8]            ;113
000092  2180              MOVS     r1,#0x80              ;113
000094  4388              BICS     r0,r0,r1              ;113
000096  6821              LDR      r1,[r4,#0]            ;113
000098  6088              STR      r0,[r1,#8]            ;113
00009a  6820              LDR      r0,[r4,#0]            ;113
00009c  6880              LDR      r0,[r0,#8]            ;113
00009e  7c21              LDRB     r1,[r4,#0x10]         ;113
0000a0  4308              ORRS     r0,r0,r1              ;113
0000a2  6821              LDR      r1,[r4,#0]            ;113
0000a4  6088              STR      r0,[r1,#8]            ;113
0000a6  6820              LDR      r0,[r4,#0]            ;114
0000a8  6880              LDR      r0,[r0,#8]            ;114
0000aa  210c              MOVS     r1,#0xc               ;114
0000ac  4388              BICS     r0,r0,r1              ;114
0000ae  6821              LDR      r1,[r4,#0]            ;114
0000b0  6088              STR      r0,[r1,#8]            ;114
0000b2  6820              LDR      r0,[r4,#0]            ;114
0000b4  6880              LDR      r0,[r0,#8]            ;114
0000b6  7ca1              LDRB     r1,[r4,#0x12]         ;114
0000b8  4308              ORRS     r0,r0,r1              ;114
0000ba  6821              LDR      r1,[r4,#0]            ;114
0000bc  6088              STR      r0,[r1,#8]            ;114
0000be  2101              MOVS     r1,#1                 ;115
0000c0  68e0              LDR      r0,[r4,#0xc]          ;115
0000c2  4308              ORRS     r0,r0,r1              ;115
0000c4  6821              LDR      r1,[r4,#0]            ;115
0000c6  6048              STR      r0,[r1,#4]            ;115
0000c8  4620              MOV      r0,r4                 ;118
0000ca  6961              LDR      r1,[r4,#0x14]         ;118
0000cc  f7fffffe          BL       MID_RTC_SetTime
0000d0  6820              LDR      r0,[r4,#0]            ;120
0000d2  7c00              LDRB     r0,[r0,#0x10]         ;120
0000d4  0840              LSRS     r0,r0,#1              ;120
0000d6  0040              LSLS     r0,r0,#1              ;120
0000d8  1c40              ADDS     r0,r0,#1              ;120
0000da  6821              LDR      r1,[r4,#0]            ;120
0000dc  7408              STRB     r0,[r1,#0x10]         ;120
0000de  bf00              NOP                            ;123
0000e0  2000              MOVS     r0,#0                 ;123
0000e2  6821              LDR      r1,[r4,#0]            ;123
0000e4  60c8              STR      r0,[r1,#0xc]          ;123
0000e6  bf00              NOP                            ;123
0000e8  bf00              NOP                            ;125
0000ea  e78e              B        |L9.10|
;;;127    
                          ENDP

                  |L9.236|
                          DCD      0x0000a217

                          AREA ||i.MID_RTC_LeapYearCheck||, CODE, READONLY, ALIGN=1

                  MID_RTC_LeapYearCheck PROC
;;;839     */
;;;840    MID_RTC_StateTypeDef MID_RTC_LeapYearCheck(RTC_HandleTypeDef *mRTC)
000000  b510              PUSH     {r4,lr}
;;;841    {
000002  4604              MOV      r4,r0
;;;842        if ( ( mRTC->sDate.Year % 4 == 0 && mRTC->sDate.Year % 100 != 0 ) || ( mRTC->sDate.Year % 400 == 0 ) )
000004  202c              MOVS     r0,#0x2c
000006  5d00              LDRB     r0,[r0,r4]
000008  0780              LSLS     r0,r0,#30
00000a  0f80              LSRS     r0,r0,#30
00000c  2800              CMP      r0,#0
00000e  d105              BNE      |L10.28|
000010  2164              MOVS     r1,#0x64
000012  6ae0              LDR      r0,[r4,#0x2c]
000014  f7fffffe          BL       __aeabi_uidivmod
000018  2900              CMP      r1,#0
00001a  d106              BNE      |L10.42|
                  |L10.28|
00001c  21ff              MOVS     r1,#0xff
00001e  3191              ADDS     r1,r1,#0x91
000020  6ae0              LDR      r0,[r4,#0x2c]
000022  f7fffffe          BL       __aeabi_uidivmod
000026  2900              CMP      r1,#0
000028  d101              BNE      |L10.46|
                  |L10.42|
;;;843            return isLeapYear;
00002a  2005              MOVS     r0,#5
                  |L10.44|
;;;844    
;;;845        return noLeapYear;
;;;846    }
00002c  bd10              POP      {r4,pc}
                  |L10.46|
00002e  2006              MOVS     r0,#6                 ;845
000030  e7fc              B        |L10.44|
;;;847    
                          ENDP


                          AREA ||i.MID_RTC_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_RTC_MspDeInit PROC
;;;192     */
;;;193    __weak void MID_RTC_MspDeInit(RTC_HandleTypeDef* mRTC)
000000  4770              BX       lr
;;;194    {
;;;195      /* Prevent unused argument(s) compilation warning */
;;;196      UNUSED(mRTC);
;;;197    
;;;198      /* NOTE : This function should not be modified, when the callback is needed,
;;;199                the HAL_RTC_MspDeInit could be implemented in the user file
;;;200       */ 
;;;201    }
;;;202    
                          ENDP


                          AREA ||i.MID_RTC_MspInit||, CODE, READONLY, ALIGN=1

                  MID_RTC_MspInit PROC
;;;175     */
;;;176    __weak void MID_RTC_MspInit(RTC_HandleTypeDef* mRTC)
000000  4770              BX       lr
;;;177    {
;;;178      /* Prevent unused argument(s) compilation warning */
;;;179      UNUSED(mRTC);
;;;180    
;;;181      /* NOTE : This function should not be modified, when the callback is needed,
;;;182                the HAL_RTC_MspInit could be implemented in the user file
;;;183       */ 
;;;184    }
;;;185    
                          ENDP


                          AREA ||i.MID_RTC_PCCallback||, CODE, READONLY, ALIGN=1

                  MID_RTC_PCCallback PROC
;;;583     */
;;;584    __weak void MID_RTC_PCCallback(RTC_HandleTypeDef *mRTC)
000000  4770              BX       lr
;;;585    {
;;;586        /* Prevent unused argument(s) compilation warning */
;;;587        UNUSED(mRTC);
;;;588    
;;;589        /* NOTE : This function should not be modified, when the callback is needed,
;;;590           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
;;;591        */
;;;592    }
;;;593    
                          ENDP


                          AREA ||i.MID_RTC_RCRCallback||, CODE, READONLY, ALIGN=1

                  MID_RTC_RCRCallback PROC
;;;532     */
;;;533    __weak void MID_RTC_RCRCallback(RTC_HandleTypeDef *mRTC)
000000  4770              BX       lr
;;;534    {
;;;535        /* Prevent unused argument(s) compilation warning */
;;;536        UNUSED(mRTC);
;;;537    
;;;538        /* NOTE : This function should not be modified, when the callback is needed,
;;;539           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
;;;540        */
;;;541    }
;;;542    
                          ENDP


                          AREA ||i.MID_RTC_SetAlarm||, CODE, READONLY, ALIGN=2

                  MID_RTC_SetAlarm PROC
;;;345     */
;;;346    MID_StatusTypeDef MID_RTC_SetAlarm(RTC_HandleTypeDef *mRTC, RTC_AlarmTypeDef *mALARM)
000000  b5fc              PUSH     {r2-r7,lr}
;;;347    {
000002  4602              MOV      r2,r0
;;;348        uint8_t stmp = 0,wdcnt = 0;
000004  2000              MOVS     r0,#0
000006  9001              STR      r0,[sp,#4]
000008  2400              MOVS     r4,#0
;;;349        uint32_t tmpreg = 0, htmp = 0, mtmp = 0, dtmp = 0;
00000a  bf00              NOP      
00000c  2500              MOVS     r5,#0
00000e  2300              MOVS     r3,#0
000010  2600              MOVS     r6,#0
;;;350        
;;;351        mRTC->State = MID_RTC_STATE_BUSY;
000012  2002              MOVS     r0,#2
000014  2744              MOVS     r7,#0x44
000016  54b8              STRB     r0,[r7,r2]
;;;352        
;;;353        /* Alarm week day check */
;;;354        if(mALARM->AlarmDateWeekDaySel==1U)
000018  69c8              LDR      r0,[r1,#0x1c]
00001a  2801              CMP      r0,#1
00001c  d11e              BNE      |L15.92|
;;;355        {
;;;356            if(mALARM->AlarmDateWeekDay > mRTC->sDate.WeekDay)
00001e  2020              MOVS     r0,#0x20
000020  5c40              LDRB     r0,[r0,r1]
000022  2728              MOVS     r7,#0x28
000024  5cbf              LDRB     r7,[r7,r2]
000026  42b8              CMP      r0,r7
000028  dd05              BLE      |L15.54|
;;;357                dtmp = (mALARM->AlarmDateWeekDay - mRTC->sDate.WeekDay);
00002a  2020              MOVS     r0,#0x20
00002c  5c40              LDRB     r0,[r0,r1]
00002e  2728              MOVS     r7,#0x28
000030  5cbf              LDRB     r7,[r7,r2]
000032  1bc6              SUBS     r6,r0,r7
000034  e012              B        |L15.92|
                  |L15.54|
;;;358            
;;;359            else
;;;360            {
;;;361                for(wdcnt = 1;wdcnt<7;wdcnt++)
000036  2401              MOVS     r4,#1
000038  e00d              B        |L15.86|
                  |L15.58|
;;;362                {
;;;363                    dtmp = mRTC->sDate.WeekDay + wdcnt;
00003a  2028              MOVS     r0,#0x28
00003c  5c80              LDRB     r0,[r0,r2]
00003e  1906              ADDS     r6,r0,r4
;;;364                    if(dtmp > 6)
000040  2e06              CMP      r6,#6
000042  d900              BLS      |L15.70|
;;;365                    {
;;;366                       dtmp = dtmp-7; 
000044  1ff6              SUBS     r6,r6,#7
                  |L15.70|
;;;367                    }
;;;368                    if(dtmp == mALARM->AlarmDateWeekDay)
000046  2020              MOVS     r0,#0x20
000048  5c40              LDRB     r0,[r0,r1]
00004a  42b0              CMP      r0,r6
00004c  d101              BNE      |L15.82|
;;;369                    {
;;;370                        dtmp = wdcnt;
00004e  4626              MOV      r6,r4
;;;371                        break;
000050  e003              B        |L15.90|
                  |L15.82|
000052  1c60              ADDS     r0,r4,#1              ;361
000054  b2c4              UXTB     r4,r0                 ;361
                  |L15.86|
000056  2c07              CMP      r4,#7                 ;361
000058  dbef              BLT      |L15.58|
                  |L15.90|
00005a  bf00              NOP      
                  |L15.92|
;;;372                    }
;;;373                }
;;;374            }
;;;375        }
;;;376        
;;;377        /* Alarm Date Check */
;;;378        if(mALARM->AlarmDateWeekDaySel == 0U)
00005c  69c8              LDR      r0,[r1,#0x1c]
00005e  2800              CMP      r0,#0
000060  d10a              BNE      |L15.120|
;;;379        {
;;;380            if(mALARM->AlarmDateWeekDay > mRTC->sDate.Date)
000062  2020              MOVS     r0,#0x20
000064  5c40              LDRB     r0,[r0,r1]
000066  272a              MOVS     r7,#0x2a
000068  5cbf              LDRB     r7,[r7,r2]
00006a  42b8              CMP      r0,r7
00006c  dd04              BLE      |L15.120|
;;;381            {
;;;382            
;;;383                dtmp = mALARM->AlarmDateWeekDay - mRTC->sDate.Date;
00006e  2020              MOVS     r0,#0x20
000070  5c40              LDRB     r0,[r0,r1]
000072  272a              MOVS     r7,#0x2a
000074  5cbf              LDRB     r7,[r7,r2]
000076  1bc6              SUBS     r6,r0,r7
                  |L15.120|
;;;384            }
;;;385        }
;;;386        
;;;387        /* Alarm Hour Check */
;;;388        if(mALARM->AlarmTime.Hours > mRTC->sTime.Hours)
000078  7808              LDRB     r0,[r1,#0]
00007a  2730              MOVS     r7,#0x30
00007c  5cbf              LDRB     r7,[r7,r2]
00007e  42b8              CMP      r0,r7
000080  dd05              BLE      |L15.142|
;;;389            htmp += (mALARM->AlarmTime.Hours - mRTC->sTime.Hours);
000082  7808              LDRB     r0,[r1,#0]
000084  2730              MOVS     r7,#0x30
000086  5cbf              LDRB     r7,[r7,r2]
000088  1bc0              SUBS     r0,r0,r7
00008a  1945              ADDS     r5,r0,r5
00008c  e004              B        |L15.152|
                  |L15.142|
;;;390        else
;;;391            htmp -= (mRTC->sTime.Hours - mALARM->AlarmTime.Hours);
00008e  2030              MOVS     r0,#0x30
000090  5c80              LDRB     r0,[r0,r2]
000092  780f              LDRB     r7,[r1,#0]
000094  1bc0              SUBS     r0,r0,r7
000096  1a2d              SUBS     r5,r5,r0
                  |L15.152|
;;;392        
;;;393        /* Alarm Minute Check */
;;;394        if(mALARM->AlarmTime.Minutes > mRTC->sTime.Minutes)
000098  7848              LDRB     r0,[r1,#1]
00009a  2731              MOVS     r7,#0x31
00009c  5cbf              LDRB     r7,[r7,r2]
00009e  42b8              CMP      r0,r7
0000a0  dd05              BLE      |L15.174|
;;;395            mtmp += (mALARM->AlarmTime.Minutes - mRTC->sTime.Minutes);
0000a2  7848              LDRB     r0,[r1,#1]
0000a4  2731              MOVS     r7,#0x31
0000a6  5cbf              LDRB     r7,[r7,r2]
0000a8  1bc0              SUBS     r0,r0,r7
0000aa  18c3              ADDS     r3,r0,r3
0000ac  e00d              B        |L15.202|
                  |L15.174|
;;;396        else
;;;397        {
;;;398            if(mALARM->AlarmTime.Minutes < mRTC->sTime.Minutes)
0000ae  7848              LDRB     r0,[r1,#1]
0000b0  2731              MOVS     r7,#0x31
0000b2  5cbf              LDRB     r7,[r7,r2]
0000b4  42b8              CMP      r0,r7
0000b6  da07              BGE      |L15.200|
;;;399            {
;;;400                htmp = htmp - 1;
0000b8  1e6d              SUBS     r5,r5,#1
;;;401                mtmp = (mtmp+60);
0000ba  333c              ADDS     r3,r3,#0x3c
;;;402                mtmp = (mtmp -(mRTC->sTime.Minutes - mALARM->AlarmTime.Minutes));
0000bc  2031              MOVS     r0,#0x31
0000be  5c80              LDRB     r0,[r0,r2]
0000c0  784f              LDRB     r7,[r1,#1]
0000c2  1bc0              SUBS     r0,r0,r7
0000c4  1a1b              SUBS     r3,r3,r0
0000c6  e000              B        |L15.202|
                  |L15.200|
;;;403            }
;;;404            else
;;;405                mtmp = 0;
0000c8  2300              MOVS     r3,#0
                  |L15.202|
;;;406        }
;;;407        
;;;408        /* Alarm Second Check */
;;;409        if(mALARM->AlarmTime.Seconds > mRTC->sTime.Seconds)
0000ca  7888              LDRB     r0,[r1,#2]
0000cc  2732              MOVS     r7,#0x32
0000ce  5cbf              LDRB     r7,[r7,r2]
0000d0  42b8              CMP      r0,r7
0000d2  dd06              BLE      |L15.226|
;;;410            stmp = mALARM->AlarmTime.Seconds - mRTC->sTime.Seconds;
0000d4  7888              LDRB     r0,[r1,#2]
0000d6  2732              MOVS     r7,#0x32
0000d8  5cbf              LDRB     r7,[r7,r2]
0000da  1bc0              SUBS     r0,r0,r7
0000dc  b2c0              UXTB     r0,r0
0000de  9001              STR      r0,[sp,#4]
0000e0  e014              B        |L15.268|
                  |L15.226|
;;;411        else
;;;412        {
;;;413            if(mALARM->AlarmTime.Seconds < mRTC->sTime.Seconds)
0000e2  7888              LDRB     r0,[r1,#2]
0000e4  2732              MOVS     r7,#0x32
0000e6  5cbf              LDRB     r7,[r7,r2]
0000e8  42b8              CMP      r0,r7
0000ea  da0d              BGE      |L15.264|
;;;414            {
;;;415                mtmp = mtmp - 1;
0000ec  1e5b              SUBS     r3,r3,#1
;;;416                stmp = stmp + 60;
0000ee  9801              LDR      r0,[sp,#4]
0000f0  303c              ADDS     r0,r0,#0x3c
0000f2  b2c0              UXTB     r0,r0
0000f4  9001              STR      r0,[sp,#4]
;;;417                stmp = (stmp-(mRTC->sTime.Seconds - mALARM->AlarmTime.Seconds));
0000f6  2032              MOVS     r0,#0x32
0000f8  5c80              LDRB     r0,[r0,r2]
0000fa  788f              LDRB     r7,[r1,#2]
0000fc  1bc7              SUBS     r7,r0,r7
0000fe  9801              LDR      r0,[sp,#4]
000100  1bc0              SUBS     r0,r0,r7
000102  b2c0              UXTB     r0,r0
000104  9001              STR      r0,[sp,#4]
000106  e001              B        |L15.268|
                  |L15.264|
;;;418            }
;;;419            else
;;;420                stmp = 0;
000108  2000              MOVS     r0,#0
00010a  9001              STR      r0,[sp,#4]
                  |L15.268|
;;;421        }
;;;422        
;;;423        tmpreg = stmp+(mtmp*60)+(htmp*3600)+(dtmp*86400);
00010c  203c              MOVS     r0,#0x3c
00010e  4358              MULS     r0,r3,r0
000110  9f01              LDR      r7,[sp,#4]
000112  19c0              ADDS     r0,r0,r7
000114  27e1              MOVS     r7,#0xe1
000116  013f              LSLS     r7,r7,#4
000118  436f              MULS     r7,r5,r7
00011a  19c0              ADDS     r0,r0,r7
00011c  4f05              LDR      r7,|L15.308|
00011e  4377              MULS     r7,r6,r7
000120  19c0              ADDS     r0,r0,r7
000122  9000              STR      r0,[sp,#0]
;;;424        
;;;425        __DRV_RTC_ALARM_SET(mRTC, tmpreg);
000124  9800              LDR      r0,[sp,#0]
000126  6817              LDR      r7,[r2,#0]
000128  61f8              STR      r0,[r7,#0x1c]
;;;426        
;;;427        mRTC->State = MID_RTC_STATE_READY;
00012a  2001              MOVS     r0,#1
00012c  2744              MOVS     r7,#0x44
00012e  54b8              STRB     r0,[r7,r2]
;;;428        
;;;429        return MID_OK;
000130  2000              MOVS     r0,#0
;;;430    }
000132  bdfc              POP      {r2-r7,pc}
;;;431    
                          ENDP

                  |L15.308|
                          DCD      0x00015180

                          AREA ||i.MID_RTC_SetAlarm_IT||, CODE, READONLY, ALIGN=2

                  MID_RTC_SetAlarm_IT PROC
;;;438     */
;;;439    MID_StatusTypeDef MID_RTC_SetAlarm_IT(RTC_HandleTypeDef *mRTC)
000000  4601              MOV      r1,r0
;;;440    {
;;;441        __DRV_RTC_LOCK(mRTC);
000002  bf00              NOP      
000004  2024              MOVS     r0,#0x24
000006  5c40              LDRB     r0,[r0,r1]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L16.16|
00000c  2002              MOVS     r0,#2
                  |L16.14|
;;;442        mRTC->State = MID_RTC_STATE_BUSY;
;;;443        
;;;444        __DRV_RTC_WRITEPROTECT_DISABLE(mRTC);
;;;445        
;;;446        /* RTC alarm interrupt enable */
;;;447        __DRV_RTC_ALARM_ENABLE(mRTC);
;;;448        __DRV_RTC_ENABLE_IT(mRTC , RTC_IT_ALM);
;;;449        
;;;450        __DRV_RTC_WRITEPROTECT_ENABLE(mRTC);
;;;451        
;;;452        mRTC->State = MID_RTC_STATE_READY;
;;;453        __DRV_RTC_UNLOCK(mRTC);
;;;454        return MID_OK;
;;;455    }
00000e  4770              BX       lr
                  |L16.16|
000010  2201              MOVS     r2,#1                 ;441
000012  2024              MOVS     r0,#0x24              ;441
000014  5442              STRB     r2,[r0,r1]            ;441
000016  bf00              NOP                            ;441
000018  2202              MOVS     r2,#2                 ;442
00001a  2044              MOVS     r0,#0x44              ;442
00001c  5442              STRB     r2,[r0,r1]            ;442
00001e  bf00              NOP                            ;444
000020  6808              LDR      r0,[r1,#0]            ;444
000022  68c0              LDR      r0,[r0,#0xc]          ;444
000024  0c00              LSRS     r0,r0,#16             ;444
000026  0400              LSLS     r0,r0,#16             ;444
000028  680a              LDR      r2,[r1,#0]            ;444
00002a  60d0              STR      r0,[r2,#0xc]          ;444
00002c  6808              LDR      r0,[r1,#0]            ;444
00002e  68c0              LDR      r0,[r0,#0xc]          ;444
000030  4a0e              LDR      r2,|L16.108|
000032  4310              ORRS     r0,r0,r2              ;444
000034  680a              LDR      r2,[r1,#0]            ;444
000036  60d0              STR      r0,[r2,#0xc]          ;444
000038  bf00              NOP                            ;444
00003a  6808              LDR      r0,[r1,#0]            ;447
00003c  7c00              LDRB     r0,[r0,#0x10]         ;447
00003e  2202              MOVS     r2,#2                 ;447
000040  4390              BICS     r0,r0,r2              ;447
000042  1c80              ADDS     r0,r0,#2              ;447
000044  680a              LDR      r2,[r1,#0]            ;447
000046  7410              STRB     r0,[r2,#0x10]         ;447
000048  2003              MOVS     r0,#3                 ;448
00004a  680a              LDR      r2,[r1,#0]            ;448
00004c  6050              STR      r0,[r2,#4]            ;448
00004e  bf00              NOP                            ;450
000050  2000              MOVS     r0,#0                 ;450
000052  680a              LDR      r2,[r1,#0]            ;450
000054  60d0              STR      r0,[r2,#0xc]          ;450
000056  bf00              NOP                            ;450
000058  2201              MOVS     r2,#1                 ;452
00005a  2044              MOVS     r0,#0x44              ;452
00005c  5442              STRB     r2,[r0,r1]            ;452
00005e  bf00              NOP                            ;453
000060  2200              MOVS     r2,#0                 ;453
000062  2024              MOVS     r0,#0x24              ;453
000064  5442              STRB     r2,[r0,r1]            ;453
000066  bf00              NOP                            ;453
000068  2000              MOVS     r0,#0                 ;454
00006a  e7d0              B        |L16.14|
;;;456    ///@}
                          ENDP

                  |L16.108|
                          DCD      0x0000a217

                          AREA ||i.MID_RTC_SetTime||, CODE, READONLY, ALIGN=1

                  MID_RTC_SetTime PROC
;;;246     */
;;;247    MID_StatusTypeDef MID_RTC_SetTime(RTC_HandleTypeDef *mRTC, uint32_t RTC_RLR)
000000  4602              MOV      r2,r0
;;;248    {
;;;249        mRTC->Instance->RLR.W = RTC_RLR;
000002  6810              LDR      r0,[r2,#0]
000004  6181              STR      r1,[r0,#0x18]
;;;250        /* Force reload RLR register value to counter */
;;;251        __DRV_RTC_RCR_MDS_SEL(mRTC , RTC_FORCE_RELOAD);
000006  6810              LDR      r0,[r2,#0]
000008  6900              LDR      r0,[r0,#0x10]
00000a  2330              MOVS     r3,#0x30
00000c  4398              BICS     r0,r0,r3
00000e  6813              LDR      r3,[r2,#0]
000010  6118              STR      r0,[r3,#0x10]
000012  6810              LDR      r0,[r2,#0]
000014  6900              LDR      r0,[r0,#0x10]
000016  2320              MOVS     r3,#0x20
000018  4318              ORRS     r0,r0,r3
00001a  6813              LDR      r3,[r2,#0]
00001c  6118              STR      r0,[r3,#0x10]
;;;252        __DRV_RTC_START_EN(mRTC);
00001e  2001              MOVS     r0,#1
000020  6813              LDR      r3,[r2,#0]
000022  6158              STR      r0,[r3,#0x14]
;;;253        while(__DRV_RTC_GET_FLAG(mRTC, RTC_STA_RCRF)== 0U);
000024  bf00              NOP      
                  |L17.38|
000026  6810              LDR      r0,[r2,#0]
000028  6800              LDR      r0,[r0,#0]
00002a  2320              MOVS     r3,#0x20
00002c  4018              ANDS     r0,r0,r3
00002e  0940              LSRS     r0,r0,#5
000030  2800              CMP      r0,#0
000032  d0f8              BEQ      |L17.38|
;;;254        __DRV_RTC_CLEAR_FLAG(mRTC , RTC_STA_RCRF);
000034  2020              MOVS     r0,#0x20
000036  6813              LDR      r3,[r2,#0]
000038  6018              STR      r0,[r3,#0]
;;;255        /* RTC Auto Reload Mode Set */
;;;256        __DRV_RTC_RCR_MDS_SEL(mRTC , RTC_AUTO_RELOAD);
00003a  6810              LDR      r0,[r2,#0]
00003c  6900              LDR      r0,[r0,#0x10]
00003e  2330              MOVS     r3,#0x30
000040  4398              BICS     r0,r0,r3
000042  6813              LDR      r3,[r2,#0]
000044  6118              STR      r0,[r3,#0x10]
000046  6810              LDR      r0,[r2,#0]
000048  6900              LDR      r0,[r0,#0x10]
00004a  2330              MOVS     r3,#0x30
00004c  4318              ORRS     r0,r0,r3
00004e  6813              LDR      r3,[r2,#0]
000050  6118              STR      r0,[r3,#0x10]
;;;257        __DRV_RTC_START_EN(mRTC);
000052  2001              MOVS     r0,#1
000054  6813              LDR      r3,[r2,#0]
000056  6158              STR      r0,[r3,#0x14]
;;;258        __DRV_RTC_CLEAR_FLAG(mRTC , RTC_STA_RCRF);
000058  2020              MOVS     r0,#0x20
00005a  6813              LDR      r3,[r2,#0]
00005c  6018              STR      r0,[r3,#0]
;;;259        
;;;260        mRTC->Init.Init_Year = mRTC->sDate.Year;
00005e  8d90              LDRH     r0,[r2,#0x2c]
000060  8390              STRH     r0,[r2,#0x1c]
;;;261        mRTC->Init.Init_Month = mRTC->sDate.Month;
000062  2029              MOVS     r0,#0x29
000064  5c83              LDRB     r3,[r0,r2]
000066  7793              STRB     r3,[r2,#0x1e]
;;;262        mRTC->Init.Init_Date = mRTC->sDate.Date;
000068  202a              MOVS     r0,#0x2a
00006a  5c83              LDRB     r3,[r0,r2]
00006c  77d3              STRB     r3,[r2,#0x1f]
;;;263        mRTC->Init.Init_Hours = mRTC->sTime.Hours;
00006e  2030              MOVS     r0,#0x30
000070  5c83              LDRB     r3,[r0,r2]
000072  2020              MOVS     r0,#0x20
000074  5483              STRB     r3,[r0,r2]
;;;264        mRTC->Init.Init_Minutes = mRTC->sTime.Minutes;
000076  2031              MOVS     r0,#0x31
000078  5c83              LDRB     r3,[r0,r2]
00007a  2021              MOVS     r0,#0x21
00007c  5483              STRB     r3,[r0,r2]
;;;265        mRTC->Init.Init_Seconds = mRTC->sTime.Seconds;
00007e  2032              MOVS     r0,#0x32
000080  5c83              LDRB     r3,[r0,r2]
000082  2022              MOVS     r0,#0x22
000084  5483              STRB     r3,[r0,r2]
;;;266        
;;;267        return MID_OK;
000086  2000              MOVS     r0,#0
;;;268    }
000088  4770              BX       lr
;;;269    ///@}
                          ENDP


                          AREA ||i.MID_RTC_TFCallback||, CODE, READONLY, ALIGN=1

                  MID_RTC_TFCallback PROC
;;;549     */
;;;550    __weak void MID_RTC_TFCallback(RTC_HandleTypeDef *mRTC)
000000  4770              BX       lr
;;;551    {
;;;552        /* Prevent unused argument(s) compilation warning */
;;;553        UNUSED(mRTC);
;;;554    
;;;555        /* NOTE : This function should not be modified, when the callback is needed,
;;;556           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
;;;557        */
;;;558    }
;;;559    
                          ENDP


                          AREA ||i.MID_RTC_TSCallback||, CODE, READONLY, ALIGN=1

                  MID_RTC_TSCallback PROC
;;;566     */
;;;567    __weak void MID_RTC_TSCallback(RTC_HandleTypeDef *mRTC)
000000  4770              BX       lr
;;;568    {
;;;569        /* Prevent unused argument(s) compilation warning */
;;;570        UNUSED(mRTC);
;;;571    
;;;572        /* NOTE : This function should not be modified, when the callback is needed,
;;;573           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
;;;574        */
;;;575    }
;;;576    
                          ENDP


                          AREA ||i.RTC_EnterInitMode||, CODE, READONLY, ALIGN=2

                  RTC_EnterInitMode PROC
;;;209     */
;;;210    MID_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *mRTC)
000000  b570              PUSH     {r4-r6,lr}
;;;211    {
000002  4604              MOV      r4,r0
;;;212        uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;213        
;;;214        /* Check if the Initialization mode is set */
;;;215        if(mRTC->Instance->CR0.W != SET)
000006  6820              LDR      r0,[r4,#0]
000008  6900              LDR      r0,[r0,#0x10]
00000a  2801              CMP      r0,#1
00000c  d015              BEQ      |L20.58|
;;;216        {
;;;217            mRTC->Instance->CR0.W = (uint32_t)RTC_INIT_MASK;
00000e  1e68              SUBS     r0,r5,#1
000010  6821              LDR      r1,[r4,#0]
000012  6108              STR      r0,[r1,#0x10]
;;;218            
;;;219            tickstart = MID_GetTick();
000014  f7fffffe          BL       MID_GetTick
000018  4605              MOV      r5,r0
;;;220            
;;;221            while((mRTC->Instance->CR0.W & RTC_CR0_Mask) != RTC_CR0_Mask)
00001a  e008              B        |L20.46|
                  |L20.28|
;;;222            {
;;;223                if((MID_GetTick()-tickstart)>RTC_TIMEOUT_VALUE)
00001c  f7fffffe          BL       MID_GetTick
000020  1b40              SUBS     r0,r0,r5
000022  217d              MOVS     r1,#0x7d
000024  00c9              LSLS     r1,r1,#3
000026  4288              CMP      r0,r1
000028  d901              BLS      |L20.46|
;;;224                {
;;;225                     return MID_TIMEOUT;
00002a  2003              MOVS     r0,#3
                  |L20.44|
;;;226                }
;;;227            }
;;;228        }
;;;229        
;;;230        return MID_OK;
;;;231    }
00002c  bd70              POP      {r4-r6,pc}
                  |L20.46|
00002e  6820              LDR      r0,[r4,#0]            ;221
000030  6900              LDR      r0,[r0,#0x10]         ;221
000032  4903              LDR      r1,|L20.64|
000034  4008              ANDS     r0,r0,r1              ;221
000036  4288              CMP      r0,r1                 ;221
000038  d1f0              BNE      |L20.28|
                  |L20.58|
00003a  2000              MOVS     r0,#0                 ;230
00003c  e7f6              B        |L20.44|
;;;232    ///@}
                          ENDP

00003e  0000              DCW      0x0000
                  |L20.64|
                          DCD      0x000b3333

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L127.24|
                  |L127.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L127.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L127.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_RTC_MID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_RTC_MID_c_f6b2f3f7____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_RTC_MID_c_f6b2f3f7____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_RTC_MID_c_f6b2f3f7____REVSH|
#line 496
|__asm___18_MG32x02z_RTC_MID_c_f6b2f3f7____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
