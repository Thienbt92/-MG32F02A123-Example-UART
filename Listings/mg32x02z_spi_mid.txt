; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_spi_mid.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_spi_mid.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_spi_mid.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_SPI_MID.c]
                          THUMB

                          AREA ||i.MID_SPI_Abort||, CODE, READONLY, ALIGN=2

                  MID_SPI_Abort PROC
;;;2114    */
;;;2115   MID_StatusTypeDef MID_SPI_Abort(SPI_HandleTypeDef *mSPI)
000000  b5fe              PUSH     {r1-r7,lr}
;;;2116   {
000002  4604              MOV      r4,r0
;;;2117       MID_StatusTypeDef errorcode;
;;;2118       __IO uint32_t count, resetcount;
;;;2119   
;;;2120       
;;;2121       
;;;2122       /* Initialized local variable  */
;;;2123       errorcode = MID_OK;
000004  2500              MOVS     r5,#0
;;;2124       resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
000006  2118              MOVS     r1,#0x18
000008  487e              LDR      r0,|L1.516|
00000a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000c  f7fffffe          BL       __aeabi_uidivmod
000010  4606              MOV      r6,r0
000012  217d              MOVS     r1,#0x7d
000014  00c9              LSLS     r1,r1,#3
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  2164              MOVS     r1,#0x64
00001c  4348              MULS     r0,r1,r0
00001e  9001              STR      r0,[sp,#4]
;;;2125       count = resetcount;
000020  9801              LDR      r0,[sp,#4]
000022  9002              STR      r0,[sp,#8]
;;;2126   
;;;2127       /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
;;;2128       if((mSPI->Instance->INT.W & SPI_IT_TXF) != 0)
000024  6820              LDR      r0,[r4,#0]
000026  6840              LDR      r0,[r0,#4]
000028  2180              MOVS     r1,#0x80
00002a  4008              ANDS     r0,r0,r1
00002c  2800              CMP      r0,#0
00002e  d015              BEQ      |L1.92|
;;;2129       {
;;;2130           mSPI->TxISR = SPI_AbortTx_ISR;
000030  4875              LDR      r0,|L1.520|
000032  6560              STR      r0,[r4,#0x54]
;;;2131           /* Wait MID_SPI_STATE_ABORT state */
;;;2132           do
000034  bf00              NOP      
                  |L1.54|
;;;2133           {
;;;2134               if (count-- == 0U)
000036  9802              LDR      r0,[sp,#8]
000038  1e41              SUBS     r1,r0,#1
00003a  9102              STR      r1,[sp,#8]
00003c  2800              CMP      r0,#0
00003e  d106              BNE      |L1.78|
;;;2135               {
;;;2136                   SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_ABORT);
000040  208c              MOVS     r0,#0x8c
000042  5900              LDR      r0,[r0,r4]
000044  2140              MOVS     r1,#0x40
000046  4308              ORRS     r0,r0,r1
000048  218c              MOVS     r1,#0x8c
00004a  5108              STR      r0,[r1,r4]
;;;2137                   break;
00004c  e003              B        |L1.86|
                  |L1.78|
;;;2138               }
;;;2139           }
;;;2140           while (mSPI->State != MID_SPI_STATE_ABORT);
00004e  2089              MOVS     r0,#0x89
000050  5d00              LDRB     r0,[r0,r4]
000052  2807              CMP      r0,#7
000054  d1ef              BNE      |L1.54|
                  |L1.86|
000056  bf00              NOP                            ;2137
;;;2141           /* Reset Timeout Counter */
;;;2142           count = resetcount;
000058  9801              LDR      r0,[sp,#4]
00005a  9002              STR      r0,[sp,#8]
                  |L1.92|
;;;2143       }
;;;2144   
;;;2145       if((mSPI->Instance->INT.W & SPI_IT_RXF) != 0)
00005c  6820              LDR      r0,[r4,#0]
00005e  6840              LDR      r0,[r0,#4]
000060  2140              MOVS     r1,#0x40
000062  4008              ANDS     r0,r0,r1
000064  2800              CMP      r0,#0
000066  d015              BEQ      |L1.148|
;;;2146       {
;;;2147           mSPI->RxISR = SPI_AbortRx_ISR;
000068  4868              LDR      r0,|L1.524|
00006a  6520              STR      r0,[r4,#0x50]
;;;2148           /* Wait MID_SPI_STATE_ABORT state */
;;;2149           do
00006c  bf00              NOP      
                  |L1.110|
;;;2150           {
;;;2151               if (count-- == 0U)
00006e  9802              LDR      r0,[sp,#8]
000070  1e41              SUBS     r1,r0,#1
000072  9102              STR      r1,[sp,#8]
000074  2800              CMP      r0,#0
000076  d106              BNE      |L1.134|
;;;2152               {
;;;2153                   SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_ABORT);
000078  208c              MOVS     r0,#0x8c
00007a  5900              LDR      r0,[r0,r4]
00007c  2140              MOVS     r1,#0x40
00007e  4308              ORRS     r0,r0,r1
000080  218c              MOVS     r1,#0x8c
000082  5108              STR      r0,[r1,r4]
;;;2154                   break;
000084  e003              B        |L1.142|
                  |L1.134|
;;;2155               }
;;;2156           }
;;;2157           while (mSPI->State != MID_SPI_STATE_ABORT);
000086  2089              MOVS     r0,#0x89
000088  5d00              LDRB     r0,[r0,r4]
00008a  2807              CMP      r0,#7
00008c  d1ef              BNE      |L1.110|
                  |L1.142|
00008e  bf00              NOP                            ;2154
;;;2158           /* Reset Timeout Counter */
;;;2159           count = resetcount;
000090  9801              LDR      r0,[sp,#4]
000092  9002              STR      r0,[sp,#8]
                  |L1.148|
;;;2160       }
;;;2161   
;;;2162       /* Clear ERRIE interrupts in case of DMA Mode */
;;;2163       CLEAR_BIT(mSPI->Instance->INT.W, SPI_IT_ERR);
000094  6820              LDR      r0,[r4,#0]
000096  6840              LDR      r0,[r0,#4]
000098  210f              MOVS     r1,#0xf
00009a  0209              LSLS     r1,r1,#8
00009c  4388              BICS     r0,r0,r1
00009e  6821              LDR      r1,[r4,#0]
0000a0  6048              STR      r0,[r1,#4]
;;;2164   
;;;2165       /* Disable the SPI DMA Tx or SPI DMA Rx request if enabled */
;;;2166       if(((mSPI->Instance->CR0.W & SPI_CR0_DMA_TXEN_mask_w) != 0) || 
0000a2  6820              LDR      r0,[r4,#0]
0000a4  6900              LDR      r0,[r0,#0x10]
0000a6  0fc0              LSRS     r0,r0,#31
0000a8  07c0              LSLS     r0,r0,#31
0000aa  2800              CMP      r0,#0
0000ac  d106              BNE      |L1.188|
;;;2167          ((mSPI->Instance->CR0.W & SPI_CR0_DMA_RXEN_mask_w) != 0))
0000ae  6820              LDR      r0,[r4,#0]
0000b0  6900              LDR      r0,[r0,#0x10]
0000b2  2101              MOVS     r1,#1
0000b4  0789              LSLS     r1,r1,#30
0000b6  4008              ANDS     r0,r0,r1
0000b8  2800              CMP      r0,#0
0000ba  d06e              BEQ      |L1.410|
                  |L1.188|
;;;2168       {
;;;2169           /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
;;;2170           if (mSPI->mDMATX != NULL)
0000bc  6da0              LDR      r0,[r4,#0x58]
0000be  2800              CMP      r0,#0
0000c0  d032              BEQ      |L1.296|
;;;2171           {
;;;2172               /* Set the SPI DMA Abort callback :
;;;2173               will lead to call MID_SPI_AbortCpltCallback() at end of DMA abort procedure */
;;;2174               mSPI->mDMATX->XferAbortCallback = NULL;
0000c2  2000              MOVS     r0,#0
0000c4  6da1              LDR      r1,[r4,#0x58]
0000c6  6388              STR      r0,[r1,#0x38]
;;;2175   
;;;2176               /* Abort DMA Tx Handle linked to SPI Peripheral */
;;;2177               if (MID_DMA_Abort(mSPI->mDMATX) != MID_OK)
0000c8  6da0              LDR      r0,[r4,#0x58]
0000ca  f7fffffe          BL       MID_DMA_Abort
0000ce  2800              CMP      r0,#0
0000d0  d002              BEQ      |L1.216|
;;;2178               {
;;;2179                   mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
0000d2  2140              MOVS     r1,#0x40
0000d4  208c              MOVS     r0,#0x8c
0000d6  5101              STR      r1,[r0,r4]
                  |L1.216|
;;;2180               }
;;;2181   
;;;2182               /* Disable Tx DMA Request */
;;;2183               CLEAR_BIT(mSPI->Instance->CR0.W, (SPI_CR0_DMA_TXEN_mask_w));
0000d8  6820              LDR      r0,[r4,#0]
0000da  6900              LDR      r0,[r0,#0x10]
0000dc  0040              LSLS     r0,r0,#1
0000de  0840              LSRS     r0,r0,#1
0000e0  6821              LDR      r1,[r4,#0]
0000e2  6108              STR      r0,[r1,#0x10]
;;;2184   
;;;2185               if (SPI_EndRxTxTransaction(mSPI, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
0000e4  f7fffffe          BL       MID_GetTick
0000e8  4606              MOV      r6,r0
0000ea  4632              MOV      r2,r6
0000ec  2164              MOVS     r1,#0x64
0000ee  4620              MOV      r0,r4
0000f0  f7fffffe          BL       SPI_EndRxTxTransaction
0000f4  2800              CMP      r0,#0
0000f6  d002              BEQ      |L1.254|
;;;2186               {
;;;2187                   mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
0000f8  2140              MOVS     r1,#0x40
0000fa  208c              MOVS     r0,#0x8c
0000fc  5101              STR      r1,[r0,r4]
                  |L1.254|
;;;2188               }
;;;2189   
;;;2190               /* Disable SPI Peripheral */
;;;2191               __MID_SPI_DISABLE(mSPI);
0000fe  6820              LDR      r0,[r4,#0]
000100  6900              LDR      r0,[r0,#0x10]
000102  0840              LSRS     r0,r0,#1
000104  0040              LSLS     r0,r0,#1
000106  6821              LDR      r1,[r4,#0]
000108  6108              STR      r0,[r1,#0x10]
;;;2192   
;;;2193               /* Empty the FRLVL fifo */
;;;2194               if (SPI_WaitFifoStateUntilTimeout(mSPI, SPI_FLAG_RXLVL, SPI_RXLVL_EMPTY, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
00010a  f7fffffe          BL       MID_GetTick
00010e  4606              MOV      r6,r0
000110  2364              MOVS     r3,#0x64
000112  2200              MOVS     r2,#0
000114  2107              MOVS     r1,#7
000116  9000              STR      r0,[sp,#0]
000118  4620              MOV      r0,r4
00011a  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
00011e  2800              CMP      r0,#0
000120  d002              BEQ      |L1.296|
;;;2195               {
;;;2196                   mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
000122  2140              MOVS     r1,#0x40
000124  208c              MOVS     r0,#0x8c
000126  5101              STR      r1,[r0,r4]
                  |L1.296|
;;;2197               }
;;;2198           }
;;;2199           
;;;2200           /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
;;;2201           if (mSPI->mDMARX != NULL)
000128  6de0              LDR      r0,[r4,#0x5c]
00012a  2800              CMP      r0,#0
00012c  d035              BEQ      |L1.410|
;;;2202           {
;;;2203               /* Set the SPI DMA Abort callback :
;;;2204               will lead to call MID_SPI_AbortCpltCallback() at end of DMA abort procedure */
;;;2205               mSPI->mDMARX->XferAbortCallback = NULL;
00012e  2000              MOVS     r0,#0
000130  6de1              LDR      r1,[r4,#0x5c]
000132  6388              STR      r0,[r1,#0x38]
;;;2206   
;;;2207               /* Abort DMA Rx Handle linked to SPI Peripheral */
;;;2208               if (MID_DMA_Abort(mSPI->mDMARX) != MID_OK)
000134  6de0              LDR      r0,[r4,#0x5c]
000136  f7fffffe          BL       MID_DMA_Abort
00013a  2800              CMP      r0,#0
00013c  d002              BEQ      |L1.324|
;;;2209               {
;;;2210                   mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
00013e  2140              MOVS     r1,#0x40
000140  208c              MOVS     r0,#0x8c
000142  5101              STR      r1,[r0,r4]
                  |L1.324|
;;;2211               }
;;;2212   
;;;2213               /* Disable peripheral */
;;;2214               __MID_SPI_DISABLE(mSPI);
000144  6820              LDR      r0,[r4,#0]
000146  6900              LDR      r0,[r0,#0x10]
000148  0840              LSRS     r0,r0,#1
00014a  0040              LSLS     r0,r0,#1
00014c  6821              LDR      r1,[r4,#0]
00014e  6108              STR      r0,[r1,#0x10]
;;;2215   
;;;2216               /* Control the BSY flag */
;;;2217               if (SPI_WaitFlagStateUntilTimeout(mSPI, SPI_FLAG_BUSYF, CLR, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
000150  f7fffffe          BL       MID_GetTick
000154  4606              MOV      r6,r0
000156  2364              MOVS     r3,#0x64
000158  2200              MOVS     r2,#0
00015a  2101              MOVS     r1,#1
00015c  9000              STR      r0,[sp,#0]
00015e  4620              MOV      r0,r4
000160  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
000164  2800              CMP      r0,#0
000166  d002              BEQ      |L1.366|
;;;2218               {
;;;2219                   mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
000168  2140              MOVS     r1,#0x40
00016a  208c              MOVS     r0,#0x8c
00016c  5101              STR      r1,[r0,r4]
                  |L1.366|
;;;2220               }
;;;2221   
;;;2222             /* Empty the FRLVL fifo */
;;;2223               if (SPI_WaitFifoStateUntilTimeout(mSPI, SPI_FLAG_RXLVL, SPI_RXLVL_EMPTY, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
00016e  f7fffffe          BL       MID_GetTick
000172  4606              MOV      r6,r0
000174  2364              MOVS     r3,#0x64
000176  2200              MOVS     r2,#0
000178  2107              MOVS     r1,#7
00017a  9000              STR      r0,[sp,#0]
00017c  4620              MOV      r0,r4
00017e  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
000182  2800              CMP      r0,#0
000184  d002              BEQ      |L1.396|
;;;2224               {
;;;2225                   mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
000186  2140              MOVS     r1,#0x40
000188  208c              MOVS     r0,#0x8c
00018a  5101              STR      r1,[r0,r4]
                  |L1.396|
;;;2226               }
;;;2227   
;;;2228               /* Disable Rx DMA Request */
;;;2229               CLEAR_BIT(mSPI->Instance->CR0.W, (SPI_CR0_DMA_RXEN_mask_w));
00018c  6820              LDR      r0,[r4,#0]
00018e  6900              LDR      r0,[r0,#0x10]
000190  2101              MOVS     r1,#1
000192  0789              LSLS     r1,r1,#30
000194  4388              BICS     r0,r0,r1
000196  6821              LDR      r1,[r4,#0]
000198  6108              STR      r0,[r1,#0x10]
                  |L1.410|
;;;2230           }
;;;2231       }
;;;2232       /* Reset Tx and Rx transfer counters */
;;;2233       mSPI->RxXferCount = 0U;
00019a  2000              MOVS     r0,#0
00019c  64a0              STR      r0,[r4,#0x48]
;;;2234       mSPI->TxXferCount = 0U;
00019e  63e0              STR      r0,[r4,#0x3c]
;;;2235   
;;;2236       /* Check error during Abort procedure */
;;;2237       if (mSPI->ErrorCode == MID_SPI_ERROR_ABORT)
0001a0  208c              MOVS     r0,#0x8c
0001a2  5900              LDR      r0,[r0,r4]
0001a4  2840              CMP      r0,#0x40
0001a6  d101              BNE      |L1.428|
;;;2238       {
;;;2239           /* return MID_Error in case of error during Abort procedure */
;;;2240           errorcode = MID_ERROR;
0001a8  2501              MOVS     r5,#1
0001aa  e002              B        |L1.434|
                  |L1.428|
;;;2241       }
;;;2242       else
;;;2243       {
;;;2244           /* Reset errorCode */
;;;2245           mSPI->ErrorCode = MID_SPI_ERROR_NONE;
0001ac  2100              MOVS     r1,#0
0001ae  208c              MOVS     r0,#0x8c
0001b0  5101              STR      r1,[r0,r4]
                  |L1.434|
;;;2246       }
;;;2247   
;;;2248       /* Clear the Error flags in the SR register */
;;;2249       __MID_SPI_CLEAR_ROVRFFLAG(mSPI);
0001b2  bf00              NOP      
0001b4  2000              MOVS     r0,#0
0001b6  9000              STR      r0,[sp,#0]
0001b8  6820              LDR      r0,[r4,#0]
0001ba  6b00              LDR      r0,[r0,#0x30]
0001bc  9000              STR      r0,[sp,#0]
0001be  6820              LDR      r0,[r4,#0]
0001c0  6b00              LDR      r0,[r0,#0x30]
0001c2  9000              STR      r0,[sp,#0]
0001c4  6820              LDR      r0,[r4,#0]
0001c6  6800              LDR      r0,[r0,#0]
0001c8  9000              STR      r0,[sp,#0]
0001ca  6820              LDR      r0,[r4,#0]
0001cc  6800              LDR      r0,[r0,#0]
0001ce  6ea1              LDR      r1,[r4,#0x68]
0001d0  4308              ORRS     r0,r0,r1
0001d2  6821              LDR      r1,[r4,#0]
0001d4  6008              STR      r0,[r1,#0]
0001d6  bf00              NOP      
0001d8  bf00              NOP      
;;;2250       __MID_SPI_CLEAR_WEFFLAG(mSPI);
0001da  bf00              NOP      
0001dc  2000              MOVS     r0,#0
0001de  9000              STR      r0,[sp,#0]
0001e0  6820              LDR      r0,[r4,#0]
0001e2  6800              LDR      r0,[r0,#0]
0001e4  9000              STR      r0,[sp,#0]
0001e6  6820              LDR      r0,[r4,#0]
0001e8  6800              LDR      r0,[r0,#0]
0001ea  2101              MOVS     r1,#1
0001ec  0249              LSLS     r1,r1,#9
0001ee  4308              ORRS     r0,r0,r1
0001f0  6821              LDR      r1,[r4,#0]
0001f2  6008              STR      r0,[r1,#0]
0001f4  bf00              NOP      
0001f6  bf00              NOP      
;;;2251   
;;;2252       /* Restore mSPI->state to ready */
;;;2253       mSPI->State = MID_SPI_STATE_READY;
0001f8  2101              MOVS     r1,#1
0001fa  2089              MOVS     r0,#0x89
0001fc  5501              STRB     r1,[r0,r4]
;;;2254   
;;;2255       return errorcode;
0001fe  4628              MOV      r0,r5
;;;2256   }
000200  bdfe              POP      {r1-r7,pc}
;;;2257   
                          ENDP

000202  0000              DCW      0x0000
                  |L1.516|
                          DCD      SystemCoreClock
                  |L1.520|
                          DCD      SPI_AbortTx_ISR
                  |L1.524|
                          DCD      SPI_AbortRx_ISR

                          AREA ||i.MID_SPI_AbortCpltCallback||, CODE, READONLY, ALIGN=1

                  MID_SPI_AbortCpltCallback PROC
;;;2781    */
;;;2782   __weak void MID_SPI_AbortCpltCallback(SPI_HandleTypeDef *mSPI)
000000  4770              BX       lr
;;;2783   {
;;;2784       UNUSED(mSPI);
;;;2785       // To do ...
;;;2786   }
;;;2787   
                          ENDP


                          AREA ||i.MID_SPI_Abort_IT||, CODE, READONLY, ALIGN=2

                  MID_SPI_Abort_IT PROC
;;;2282    */
;;;2283   MID_StatusTypeDef MID_SPI_Abort_IT(SPI_HandleTypeDef *mSPI)
000000  b5fe              PUSH     {r1-r7,lr}
;;;2284   {
000002  4604              MOV      r4,r0
;;;2285       MID_StatusTypeDef errorcode;
;;;2286       uint32_t abortcplt ;
;;;2287       __IO uint32_t count, resetcount;
;;;2288   
;;;2289       /* Initialized local variable  */
;;;2290       errorcode = MID_OK;
000004  2500              MOVS     r5,#0
;;;2291       abortcplt = 1U;
000006  2601              MOVS     r6,#1
;;;2292       resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
000008  2118              MOVS     r1,#0x18
00000a  4881              LDR      r0,|L3.528|
00000c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000e  f7fffffe          BL       __aeabi_uidivmod
000012  4607              MOV      r7,r0
000014  217d              MOVS     r1,#0x7d
000016  00c9              LSLS     r1,r1,#3
000018  f7fffffe          BL       __aeabi_uidivmod
00001c  2164              MOVS     r1,#0x64
00001e  4348              MULS     r0,r1,r0
000020  9001              STR      r0,[sp,#4]
;;;2293       count = resetcount;
000022  9801              LDR      r0,[sp,#4]
000024  9002              STR      r0,[sp,#8]
;;;2294   
;;;2295       /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
;;;2296       if((mSPI->Instance->INT.W & SPI_IT_TCF) != 0)
000026  6820              LDR      r0,[r4,#0]
000028  6840              LDR      r0,[r0,#4]
00002a  2110              MOVS     r1,#0x10
00002c  4008              ANDS     r0,r0,r1
00002e  2800              CMP      r0,#0
000030  d015              BEQ      |L3.94|
;;;2297       {
;;;2298           mSPI->TxISR = SPI_AbortTx_ISR;
000032  4878              LDR      r0,|L3.532|
000034  6560              STR      r0,[r4,#0x54]
;;;2299           /* Wait MID_SPI_STATE_ABORT state */
;;;2300           do
000036  bf00              NOP      
                  |L3.56|
;;;2301           {
;;;2302               if (count-- == 0U)
000038  9802              LDR      r0,[sp,#8]
00003a  1e41              SUBS     r1,r0,#1
00003c  9102              STR      r1,[sp,#8]
00003e  2800              CMP      r0,#0
000040  d106              BNE      |L3.80|
;;;2303               {
;;;2304                   SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_ABORT);
000042  208c              MOVS     r0,#0x8c
000044  5900              LDR      r0,[r0,r4]
000046  2140              MOVS     r1,#0x40
000048  4308              ORRS     r0,r0,r1
00004a  218c              MOVS     r1,#0x8c
00004c  5108              STR      r0,[r1,r4]
;;;2305                   break;
00004e  e003              B        |L3.88|
                  |L3.80|
;;;2306               }
;;;2307           }
;;;2308           while (mSPI->State != MID_SPI_STATE_ABORT);
000050  2089              MOVS     r0,#0x89
000052  5d00              LDRB     r0,[r0,r4]
000054  2807              CMP      r0,#7
000056  d1ef              BNE      |L3.56|
                  |L3.88|
000058  bf00              NOP                            ;2305
;;;2309           /* Reset Timeout Counter */
;;;2310           count = resetcount;
00005a  9801              LDR      r0,[sp,#4]
00005c  9002              STR      r0,[sp,#8]
                  |L3.94|
;;;2311       }
;;;2312   
;;;2313       if ((mSPI->Instance->INT.W & SPI_IT_RXF) != 0)
00005e  6820              LDR      r0,[r4,#0]
000060  6840              LDR      r0,[r0,#4]
000062  2140              MOVS     r1,#0x40
000064  4008              ANDS     r0,r0,r1
000066  2800              CMP      r0,#0
000068  d015              BEQ      |L3.150|
;;;2314       {
;;;2315           mSPI->RxISR = SPI_AbortRx_ISR;
00006a  486b              LDR      r0,|L3.536|
00006c  6520              STR      r0,[r4,#0x50]
;;;2316           /* Wait MID_SPI_STATE_ABORT state */
;;;2317           do
00006e  bf00              NOP      
                  |L3.112|
;;;2318           {
;;;2319               if (count-- == 0U)
000070  9802              LDR      r0,[sp,#8]
000072  1e41              SUBS     r1,r0,#1
000074  9102              STR      r1,[sp,#8]
000076  2800              CMP      r0,#0
000078  d106              BNE      |L3.136|
;;;2320               {
;;;2321                   SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_ABORT);
00007a  208c              MOVS     r0,#0x8c
00007c  5900              LDR      r0,[r0,r4]
00007e  2140              MOVS     r1,#0x40
000080  4308              ORRS     r0,r0,r1
000082  218c              MOVS     r1,#0x8c
000084  5108              STR      r0,[r1,r4]
;;;2322                   break;
000086  e003              B        |L3.144|
                  |L3.136|
;;;2323               }
;;;2324           }
;;;2325           while (mSPI->State != MID_SPI_STATE_ABORT);
000088  2089              MOVS     r0,#0x89
00008a  5d00              LDRB     r0,[r0,r4]
00008c  2807              CMP      r0,#7
00008e  d1ef              BNE      |L3.112|
                  |L3.144|
000090  bf00              NOP                            ;2322
;;;2326           /* Reset Timeout Counter */
;;;2327           count = resetcount;
000092  9801              LDR      r0,[sp,#4]
000094  9002              STR      r0,[sp,#8]
                  |L3.150|
;;;2328       }
;;;2329   
;;;2330       /* Clear ERRIE interrupts in case of DMA Mode */
;;;2331       mSPI->Instance->INT.W &= ~SPI_IT_ERR;
000096  6820              LDR      r0,[r4,#0]
000098  6840              LDR      r0,[r0,#4]
00009a  210f              MOVS     r1,#0xf
00009c  0209              LSLS     r1,r1,#8
00009e  4388              BICS     r0,r0,r1
0000a0  6821              LDR      r1,[r4,#0]
0000a2  6048              STR      r0,[r1,#4]
;;;2332   
;;;2333   
;;;2334       /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
;;;2335          before any call to DMA Abort functions */
;;;2336       /* DMA Tx Handle is valid */
;;;2337       if (mSPI->mDMATX != NULL)
0000a4  6da0              LDR      r0,[r4,#0x58]
0000a6  2800              CMP      r0,#0
0000a8  d00c              BEQ      |L3.196|
;;;2338       {
;;;2339           /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
;;;2340           Otherwise, set it to NULL */
;;;2341           if((mSPI->Instance->CR0.W & SPI_CR0_DMA_TXEN_mask_w) != 0)
0000aa  6820              LDR      r0,[r4,#0]
0000ac  6900              LDR      r0,[r0,#0x10]
0000ae  0fc0              LSRS     r0,r0,#31
0000b0  07c0              LSLS     r0,r0,#31
0000b2  2800              CMP      r0,#0
0000b4  d003              BEQ      |L3.190|
;;;2342           {
;;;2343               mSPI->mDMATX->XferAbortCallback = SPI_DMATxAbortCallback;
0000b6  4859              LDR      r0,|L3.540|
0000b8  6da1              LDR      r1,[r4,#0x58]
0000ba  6388              STR      r0,[r1,#0x38]
0000bc  e002              B        |L3.196|
                  |L3.190|
;;;2344           }
;;;2345           else
;;;2346           {
;;;2347               mSPI->mDMATX->XferAbortCallback = NULL;
0000be  2000              MOVS     r0,#0
0000c0  6da1              LDR      r1,[r4,#0x58]
0000c2  6388              STR      r0,[r1,#0x38]
                  |L3.196|
;;;2348           }
;;;2349       }
;;;2350       
;;;2351       /* DMA Rx Handle is valid */
;;;2352       if (mSPI->mDMARX != NULL)
0000c4  6de0              LDR      r0,[r4,#0x5c]
0000c6  2800              CMP      r0,#0
0000c8  d00d              BEQ      |L3.230|
;;;2353       {
;;;2354           /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
;;;2355              Otherwise, set it to NULL */
;;;2356           if((mSPI->Instance->CR0.W & SPI_CR0_DMA_RXEN_mask_w) != 0)
0000ca  6820              LDR      r0,[r4,#0]
0000cc  6900              LDR      r0,[r0,#0x10]
0000ce  2101              MOVS     r1,#1
0000d0  0789              LSLS     r1,r1,#30
0000d2  4008              ANDS     r0,r0,r1
0000d4  2800              CMP      r0,#0
0000d6  d003              BEQ      |L3.224|
;;;2357           {
;;;2358               mSPI->mDMARX->XferAbortCallback = SPI_DMARxAbortCallback;
0000d8  4851              LDR      r0,|L3.544|
0000da  6de1              LDR      r1,[r4,#0x5c]
0000dc  6388              STR      r0,[r1,#0x38]
0000de  e002              B        |L3.230|
                  |L3.224|
;;;2359           }
;;;2360           else
;;;2361           {
;;;2362               mSPI->mDMARX->XferAbortCallback = NULL;
0000e0  2000              MOVS     r0,#0
0000e2  6de1              LDR      r1,[r4,#0x5c]
0000e4  6388              STR      r0,[r1,#0x38]
                  |L3.230|
;;;2363           }
;;;2364       }
;;;2365   
;;;2366       /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
;;;2367       if(((mSPI->Instance->CR0.W & SPI_CR0_DMA_TXEN_mask_w) != 0) && 
0000e6  6820              LDR      r0,[r4,#0]
0000e8  6900              LDR      r0,[r0,#0x10]
0000ea  0fc0              LSRS     r0,r0,#31
0000ec  07c0              LSLS     r0,r0,#31
0000ee  2800              CMP      r0,#0
0000f0  d027              BEQ      |L3.322|
;;;2368          ((mSPI->Instance->CR0.W & SPI_CR0_DMA_RXEN_mask_w) != 0))
0000f2  6820              LDR      r0,[r4,#0]
0000f4  6900              LDR      r0,[r0,#0x10]
0000f6  2101              MOVS     r1,#1
0000f8  0789              LSLS     r1,r1,#30
0000fa  4008              ANDS     r0,r0,r1
0000fc  2800              CMP      r0,#0
0000fe  d020              BEQ      |L3.322|
;;;2369       {
;;;2370           /* Abort the SPI DMA Tx Stream/Channel */
;;;2371           if (mSPI->mDMATX != NULL)
000100  6da0              LDR      r0,[r4,#0x58]
000102  2800              CMP      r0,#0
000104  d00c              BEQ      |L3.288|
;;;2372           {
;;;2373               /* Abort DMA Tx Handle linked to SPI Peripheral */
;;;2374               if (MID_DMA_Abort_IT(mSPI->mDMATX) != MID_OK)
000106  6da0              LDR      r0,[r4,#0x58]
000108  f7fffffe          BL       MID_DMA_Abort_IT
00010c  2800              CMP      r0,#0
00010e  d006              BEQ      |L3.286|
;;;2375               {
;;;2376                   mSPI->mDMATX->XferAbortCallback = NULL;
000110  2000              MOVS     r0,#0
000112  6da1              LDR      r1,[r4,#0x58]
000114  6388              STR      r0,[r1,#0x38]
;;;2377                   mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
000116  2140              MOVS     r1,#0x40
000118  208c              MOVS     r0,#0x8c
00011a  5101              STR      r1,[r0,r4]
00011c  e000              B        |L3.288|
                  |L3.286|
;;;2378               }
;;;2379               else
;;;2380               {
;;;2381                   abortcplt = 0U;
00011e  2600              MOVS     r6,#0
                  |L3.288|
;;;2382               }
;;;2383           }
;;;2384           
;;;2385           /* Abort the SPI DMA Rx Stream/Channel */
;;;2386           if (mSPI->mDMARX != NULL)
000120  6de0              LDR      r0,[r4,#0x5c]
000122  2800              CMP      r0,#0
000124  d00d              BEQ      |L3.322|
;;;2387           {
;;;2388               /* Abort DMA Rx Handle linked to SPI Peripheral */
;;;2389               if (MID_DMA_Abort_IT(mSPI->mDMARX) !=  MID_OK)
000126  6de0              LDR      r0,[r4,#0x5c]
000128  f7fffffe          BL       MID_DMA_Abort_IT
00012c  2800              CMP      r0,#0
00012e  d007              BEQ      |L3.320|
;;;2390               {
;;;2391                   mSPI->mDMARX->XferAbortCallback = NULL;
000130  2000              MOVS     r0,#0
000132  6de1              LDR      r1,[r4,#0x5c]
000134  6388              STR      r0,[r1,#0x38]
;;;2392                   mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
000136  2140              MOVS     r1,#0x40
000138  208c              MOVS     r0,#0x8c
00013a  5101              STR      r1,[r0,r4]
;;;2393                   abortcplt = 1U;
00013c  2601              MOVS     r6,#1
00013e  e000              B        |L3.322|
                  |L3.320|
;;;2394               }
;;;2395               else
;;;2396               {
;;;2397                   abortcplt = 0U;
000140  2600              MOVS     r6,#0
                  |L3.322|
;;;2398               }
;;;2399           }
;;;2400       }
;;;2401   
;;;2402       /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
;;;2403       if ((mSPI->Instance->CR0.W & SPI_CR0_DMA_TXEN_mask_w) != 0)
000142  6820              LDR      r0,[r4,#0]
000144  6900              LDR      r0,[r0,#0x10]
000146  0fc0              LSRS     r0,r0,#31
000148  07c0              LSLS     r0,r0,#31
00014a  2800              CMP      r0,#0
00014c  d00f              BEQ      |L3.366|
;;;2404       {
;;;2405           /* Abort the SPI DMA Tx Stream/Channel */
;;;2406           if (mSPI->mDMATX != NULL)
00014e  6da0              LDR      r0,[r4,#0x58]
000150  2800              CMP      r0,#0
000152  d00c              BEQ      |L3.366|
;;;2407           {
;;;2408               /* Abort DMA Tx Handle linked to SPI Peripheral */
;;;2409               if (MID_DMA_Abort_IT(mSPI->mDMATX) != MID_OK)
000154  6da0              LDR      r0,[r4,#0x58]
000156  f7fffffe          BL       MID_DMA_Abort_IT
00015a  2800              CMP      r0,#0
00015c  d006              BEQ      |L3.364|
;;;2410               {
;;;2411                   mSPI->mDMATX->XferAbortCallback = NULL;
00015e  2000              MOVS     r0,#0
000160  6da1              LDR      r1,[r4,#0x58]
000162  6388              STR      r0,[r1,#0x38]
;;;2412                   mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
000164  2140              MOVS     r1,#0x40
000166  208c              MOVS     r0,#0x8c
000168  5101              STR      r1,[r0,r4]
00016a  e000              B        |L3.366|
                  |L3.364|
;;;2413               }
;;;2414               else
;;;2415               {
;;;2416                   abortcplt = 0U;
00016c  2600              MOVS     r6,#0
                  |L3.366|
;;;2417               }
;;;2418           }
;;;2419       }
;;;2420       /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
;;;2421       if ((mSPI->Instance->CR0.W & SPI_CR0_DMA_RXEN_mask_w) != 0)
00016e  6820              LDR      r0,[r4,#0]
000170  6900              LDR      r0,[r0,#0x10]
000172  2101              MOVS     r1,#1
000174  0789              LSLS     r1,r1,#30
000176  4008              ANDS     r0,r0,r1
000178  2800              CMP      r0,#0
00017a  d00f              BEQ      |L3.412|
;;;2422       {
;;;2423           /* Abort the SPI DMA Rx Stream/Channel */
;;;2424           if (mSPI->mDMARX != NULL)
00017c  6de0              LDR      r0,[r4,#0x5c]
00017e  2800              CMP      r0,#0
000180  d00c              BEQ      |L3.412|
;;;2425           {
;;;2426               /* Abort DMA Rx Handle linked to SPI Peripheral */
;;;2427               if (MID_DMA_Abort_IT(mSPI->mDMARX) !=  MID_OK)
000182  6de0              LDR      r0,[r4,#0x5c]
000184  f7fffffe          BL       MID_DMA_Abort_IT
000188  2800              CMP      r0,#0
00018a  d006              BEQ      |L3.410|
;;;2428               {
;;;2429                   mSPI->mDMARX->XferAbortCallback = NULL;
00018c  2000              MOVS     r0,#0
00018e  6de1              LDR      r1,[r4,#0x5c]
000190  6388              STR      r0,[r1,#0x38]
;;;2430                   mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
000192  2140              MOVS     r1,#0x40
000194  208c              MOVS     r0,#0x8c
000196  5101              STR      r1,[r0,r4]
000198  e000              B        |L3.412|
                  |L3.410|
;;;2431               }
;;;2432               else
;;;2433               {
;;;2434                   abortcplt = 0U;
00019a  2600              MOVS     r6,#0
                  |L3.412|
;;;2435               }
;;;2436           }
;;;2437       }
;;;2438   
;;;2439       if (abortcplt == 1U)
00019c  2e01              CMP      r6,#1
00019e  d134              BNE      |L3.522|
;;;2440       {
;;;2441           /* Reset Tx and Rx transfer counters */
;;;2442           mSPI->RxXferCount = 0U;
0001a0  2000              MOVS     r0,#0
0001a2  64a0              STR      r0,[r4,#0x48]
;;;2443           mSPI->TxXferCount = 0U;
0001a4  63e0              STR      r0,[r4,#0x3c]
;;;2444   
;;;2445           /* Check error during Abort procedure */
;;;2446           if (mSPI->ErrorCode == MID_SPI_ERROR_ABORT)
0001a6  208c              MOVS     r0,#0x8c
0001a8  5900              LDR      r0,[r0,r4]
0001aa  2840              CMP      r0,#0x40
0001ac  d101              BNE      |L3.434|
;;;2447           {
;;;2448               /* return MID_Error in case of error during Abort procedure */
;;;2449               errorcode = MID_ERROR;
0001ae  2501              MOVS     r5,#1
0001b0  e002              B        |L3.440|
                  |L3.434|
;;;2450           }
;;;2451           else
;;;2452           {
;;;2453               /* Reset errorCode */
;;;2454               mSPI->ErrorCode = MID_SPI_ERROR_NONE;
0001b2  2100              MOVS     r1,#0
0001b4  208c              MOVS     r0,#0x8c
0001b6  5101              STR      r1,[r0,r4]
                  |L3.440|
;;;2455           }
;;;2456   
;;;2457           /* Clear the Error flags in the SR register */
;;;2458           __MID_SPI_CLEAR_ROVRFFLAG(mSPI);
0001b8  bf00              NOP      
0001ba  2000              MOVS     r0,#0
0001bc  9000              STR      r0,[sp,#0]
0001be  6820              LDR      r0,[r4,#0]
0001c0  6b00              LDR      r0,[r0,#0x30]
0001c2  9000              STR      r0,[sp,#0]
0001c4  6820              LDR      r0,[r4,#0]
0001c6  6b00              LDR      r0,[r0,#0x30]
0001c8  9000              STR      r0,[sp,#0]
0001ca  6820              LDR      r0,[r4,#0]
0001cc  6800              LDR      r0,[r0,#0]
0001ce  9000              STR      r0,[sp,#0]
0001d0  6820              LDR      r0,[r4,#0]
0001d2  6800              LDR      r0,[r0,#0]
0001d4  6ea1              LDR      r1,[r4,#0x68]
0001d6  4308              ORRS     r0,r0,r1
0001d8  6821              LDR      r1,[r4,#0]
0001da  6008              STR      r0,[r1,#0]
0001dc  bf00              NOP      
0001de  bf00              NOP      
;;;2459           __MID_SPI_CLEAR_WEFFLAG(mSPI);
0001e0  bf00              NOP      
0001e2  2000              MOVS     r0,#0
0001e4  9000              STR      r0,[sp,#0]
0001e6  6820              LDR      r0,[r4,#0]
0001e8  6800              LDR      r0,[r0,#0]
0001ea  9000              STR      r0,[sp,#0]
0001ec  6820              LDR      r0,[r4,#0]
0001ee  6800              LDR      r0,[r0,#0]
0001f0  2101              MOVS     r1,#1
0001f2  0249              LSLS     r1,r1,#9
0001f4  4308              ORRS     r0,r0,r1
0001f6  6821              LDR      r1,[r4,#0]
0001f8  6008              STR      r0,[r1,#0]
0001fa  bf00              NOP      
0001fc  bf00              NOP      
;;;2460   
;;;2461           /* Restore mSPI->State to Ready */
;;;2462           mSPI->State = MID_SPI_STATE_READY;
0001fe  2101              MOVS     r1,#1
000200  2089              MOVS     r0,#0x89
000202  5501              STRB     r1,[r0,r4]
;;;2463   
;;;2464           /* As no DMA to be aborted, call directly user Abort complete callback */
;;;2465           MID_SPI_AbortCpltCallback(mSPI);
000204  4620              MOV      r0,r4
000206  f7fffffe          BL       MID_SPI_AbortCpltCallback
                  |L3.522|
;;;2466       }
;;;2467   
;;;2468       return errorcode;
00020a  4628              MOV      r0,r5
;;;2469   }
00020c  bdfe              POP      {r1-r7,pc}
;;;2470   
                          ENDP

00020e  0000              DCW      0x0000
                  |L3.528|
                          DCD      SystemCoreClock
                  |L3.532|
                          DCD      SPI_AbortTx_ISR
                  |L3.536|
                          DCD      SPI_AbortRx_ISR
                  |L3.540|
                          DCD      SPI_DMATxAbortCallback
                  |L3.544|
                          DCD      SPI_DMARxAbortCallback

                          AREA ||i.MID_SPI_ErrorCallback||, CODE, READONLY, ALIGN=1

                  MID_SPI_ErrorCallback PROC
;;;2759    */
;;;2760   __weak void MID_SPI_ErrorCallback(SPI_HandleTypeDef *mSPI)
000000  4770              BX       lr
;;;2761   {
;;;2762       UNUSED(mSPI);
;;;2763       // To do ...
;;;2764   }
;;;2765   
                          ENDP


                          AREA ||i.MID_SPI_IRQHandler||, CODE, READONLY, ALIGN=2

                  MID_SPI_IRQHandler PROC
;;;2486    */
;;;2487   void MID_SPI_IRQHandler(SPI_HandleTypeDef *mSPI)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2488   {
000002  4604              MOV      r4,r0
;;;2489       uint32_t itsource = mSPI->Instance->INT.W;
000004  6820              LDR      r0,[r4,#0]
000006  6846              LDR      r6,[r0,#4]
;;;2490       uint32_t itflag   = mSPI->Instance->STA.W;
000008  6820              LDR      r0,[r4,#0]
00000a  6805              LDR      r5,[r0,#0]
;;;2491       uint32_t itieflag   = (itsource & itflag);
00000c  4630              MOV      r0,r6
00000e  4028              ANDS     r0,r0,r5
000010  4607              MOV      r7,r0
;;;2492       
;;;2493       
;;;2494       
;;;2495       /* SPI in mode Receiver ----------------------------------------------------*/
;;;2496       if (((itflag & mSPI->SPI_FLAG_ROVRF) == CLR) & ((itieflag & SPI_IT_RXF) != CLR))
000012  6ea0              LDR      r0,[r4,#0x68]
000014  4028              ANDS     r0,r0,r5
000016  2800              CMP      r0,#0
000018  d101              BNE      |L5.30|
00001a  2001              MOVS     r0,#1
00001c  e000              B        |L5.32|
                  |L5.30|
00001e  2000              MOVS     r0,#0
                  |L5.32|
000020  2140              MOVS     r1,#0x40
000022  4039              ANDS     r1,r1,r7
000024  0989              LSRS     r1,r1,#6
000026  4008              ANDS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d003              BEQ      |L5.52|
;;;2497       {
;;;2498           mSPI->RxISR(mSPI);
00002c  4620              MOV      r0,r4
00002e  6d21              LDR      r1,[r4,#0x50]
000030  4788              BLX      r1
                  |L5.50|
;;;2499           return;
;;;2500       }
;;;2501   
;;;2502       /* SPI in mode Transmitter -------------------------------------------------*/
;;;2503       // When TCF/TXF/1st transmit data.
;;;2504       if(((itieflag & (mSPI->SPI_FLAG_TCF | SPI_IT_TXF)) != CLR))
;;;2505       {
;;;2506   #if (defined(MG32_1ST))
;;;2507           if((*(mSPI->RXTX_LVL) & SPI_FLAG_TXLVL) == 0)
;;;2508           {
;;;2509   #endif
;;;2510           mSPI->TxISR(mSPI);
;;;2511   #if (defined(MG32_1ST))
;;;2512           }
;;;2513   #endif
;;;2514           return;
;;;2515       }
;;;2516       else if (mSPI->TxRxStartEvent != CLR)
;;;2517       {
;;;2518           mSPI->TxRxStartEvent = 0;
;;;2519           mSPI->TxISR(mSPI);
;;;2520           return;
;;;2521       }
;;;2522    
;;;2523       /* SPI in Error Treatment --------------------------------------------------*/
;;;2524       if((itflag & itsource & (SPI_IT_MODF | SPI_IT_WEF | SPI_IT_ROVRF | SPI_IT_TUDRF)) != CLR)
;;;2525       {
;;;2526           /* SPI Overrun error interrupt occurred ----------------------------------*/
;;;2527           if(((itflag & mSPI->SPI_FLAG_ROVRF) != CLR) && ((itsource & SPI_IT_ROVRF) != CLR))
;;;2528           {          
;;;2529               if (mSPI->State != MID_SPI_STATE_BUSY_TX)
;;;2530               {
;;;2531                   SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_OVR);
;;;2532                   __MID_SPI_CLEAR_ROVRFFLAG(mSPI);  
;;;2533               }
;;;2534               else
;;;2535               {
;;;2536                   __MID_SPI_CLEAR_ROVRFFLAG(mSPI);  
;;;2537                   return;
;;;2538               }
;;;2539           }
;;;2540           
;;;2541           /* SPI Underrun error interrupt occurred ---------------------------------*/
;;;2542           if(((itflag & mSPI->SPI_FLAG_TUDRF) != CLR) && ((itsource & SPI_IT_TUDRF) != CLR))
;;;2543           {
;;;2544               if(mSPI->State != MID_SPI_STATE_BUSY_TX)
;;;2545               {
;;;2546                   SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_OVR);
;;;2547                   __MID_SPI_CLEAR_TUDRFFLAG(mSPI);    
;;;2548               }
;;;2549               else
;;;2550               {
;;;2551                   __MID_SPI_CLEAR_TUDRFFLAG(mSPI);    
;;;2552                   return;
;;;2553               }
;;;2554           }
;;;2555   
;;;2556           /* SPI Mode Fault error interrupt occurred -------------------------------*/
;;;2557           if(((itflag & SPI_FLAG_MODF) != CLR) && ((itsource & SPI_IT_MODF) != CLR))
;;;2558           {
;;;2559               SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_MOD);
;;;2560               __MID_SPI_CLEAR_MODFFLAG(mSPI);     
;;;2561           }
;;;2562   
;;;2563           /* SPI Frame error interrupt occurred ------------------------------------*/
;;;2564           if(((itflag & SPI_FLAG_WEF) != CLR) && ((itsource & SPI_IT_WEF) != CLR))
;;;2565           {
;;;2566               SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_WE);
;;;2567               __MID_SPI_CLEAR_WEFFLAG(mSPI);
;;;2568           }
;;;2569   
;;;2570           if (mSPI->ErrorCode != MID_SPI_ERROR_NONE)
;;;2571           {
;;;2572               
;;;2573               /* Disable all interrupts */
;;;2574               __MID_SPI_DISABLE_IT(mSPI, SPI_IT_RXF | SPI_IT_TCF | SPI_IT_ERR);
;;;2575   
;;;2576               mSPI->State = MID_SPI_STATE_READY;
;;;2577               /* Disable the SPI DMA requests if enabled */
;;;2578               if(((mSPI->Instance->CR0.W & SPI_CR0_DMA_TXEN_mask_w) != CLR) || 
;;;2579                  ((mSPI->Instance->CR0.W & SPI_CR0_DMA_RXEN_mask_w) != CLR))
;;;2580               {
;;;2581                   mSPI->Instance->CR0.W &= ~(SPI_CR0_DMA_TXEN_mask_w | 
;;;2582                                              SPI_CR0_DMA_RXEN_mask_w);
;;;2583   
;;;2584                   /* Abort the SPI DMA Rx channel */
;;;2585                   if (mSPI->mDMARX != NULL)
;;;2586                   {
;;;2587                       /* Set the SPI DMA Abort callback :
;;;2588                       will lead to call MID_SPI_ErrorCallback() at end of DMA abort procedure */
;;;2589                       mSPI->mDMARX->XferAbortCallback = SPI_DMAAbortOnError;
;;;2590                       MID_DMA_Abort_IT(mSPI->mDMARX);   
;;;2591                   }
;;;2592                   /* Abort the SPI DMA Tx channel */
;;;2593                   if (mSPI->mDMATX != NULL)
;;;2594                   {
;;;2595                       /* Set the SPI DMA Abort callback :
;;;2596                       will lead to call MID_SPI_ErrorCallback() at end of DMA abort procedure */
;;;2597                       mSPI->mDMATX->XferAbortCallback = SPI_DMAAbortOnError;
;;;2598                       MID_DMA_Abort_IT(mSPI->mDMATX);   
;;;2599                   }
;;;2600               }
;;;2601               else
;;;2602               {
;;;2603                   /* Call user error callback */
;;;2604                   MID_SPI_ErrorCallback(mSPI);
;;;2605               }
;;;2606           }
;;;2607   
;;;2608       return;
;;;2609       }
;;;2610   }
000032  bdf8              POP      {r3-r7,pc}
                  |L5.52|
000034  2180              MOVS     r1,#0x80              ;2504
000036  6f60              LDR      r0,[r4,#0x74]         ;2504
000038  4308              ORRS     r0,r0,r1              ;2504
00003a  4038              ANDS     r0,r0,r7              ;2504
00003c  2800              CMP      r0,#0                 ;2504
00003e  d009              BEQ      |L5.84|
000040  6fe0              LDR      r0,[r4,#0x7c]         ;2507
000042  7800              LDRB     r0,[r0,#0]            ;2507
000044  2170              MOVS     r1,#0x70              ;2507
000046  4008              ANDS     r0,r0,r1              ;2507
000048  2800              CMP      r0,#0                 ;2507
00004a  d102              BNE      |L5.82|
00004c  4620              MOV      r0,r4                 ;2510
00004e  6d61              LDR      r1,[r4,#0x54]         ;2510
000050  4788              BLX      r1                    ;2510
                  |L5.82|
000052  e7ee              B        |L5.50|
                  |L5.84|
000054  2090              MOVS     r0,#0x90              ;2516
000056  5d00              LDRB     r0,[r0,r4]            ;2516
000058  2800              CMP      r0,#0                 ;2516
00005a  d006              BEQ      |L5.106|
00005c  2100              MOVS     r1,#0                 ;2518
00005e  2090              MOVS     r0,#0x90              ;2518
000060  5501              STRB     r1,[r0,r4]            ;2518
000062  4620              MOV      r0,r4                 ;2519
000064  6d61              LDR      r1,[r4,#0x54]         ;2519
000066  4788              BLX      r1                    ;2519
000068  e7e3              B        |L5.50|
                  |L5.106|
00006a  4628              MOV      r0,r5                 ;2524
00006c  4030              ANDS     r0,r0,r6              ;2524
00006e  210f              MOVS     r1,#0xf               ;2524
000070  0209              LSLS     r1,r1,#8              ;2524
000072  4008              ANDS     r0,r0,r1              ;2524
000074  2800              CMP      r0,#0                 ;2524
000076  d071              BEQ      |L5.348|
000078  6ea0              LDR      r0,[r4,#0x68]         ;2527
00007a  4028              ANDS     r0,r0,r5              ;2527
00007c  2800              CMP      r0,#0                 ;2527
00007e  d037              BEQ      |L5.240|
000080  2001              MOVS     r0,#1                 ;2527
000082  0280              LSLS     r0,r0,#10             ;2527
000084  4030              ANDS     r0,r0,r6              ;2527
000086  2800              CMP      r0,#0                 ;2527
000088  d032              BEQ      |L5.240|
00008a  2089              MOVS     r0,#0x89              ;2529
00008c  5d00              LDRB     r0,[r0,r4]            ;2529
00008e  2803              CMP      r0,#3                 ;2529
000090  d019              BEQ      |L5.198|
000092  208c              MOVS     r0,#0x8c              ;2531
000094  5900              LDR      r0,[r0,r4]            ;2531
000096  2104              MOVS     r1,#4                 ;2531
000098  4308              ORRS     r0,r0,r1              ;2531
00009a  218c              MOVS     r1,#0x8c              ;2531
00009c  5108              STR      r0,[r1,r4]            ;2531
00009e  bf00              NOP                            ;2532
0000a0  2000              MOVS     r0,#0                 ;2532
0000a2  9000              STR      r0,[sp,#0]            ;2532
0000a4  6820              LDR      r0,[r4,#0]            ;2532
0000a6  6b00              LDR      r0,[r0,#0x30]         ;2532
0000a8  9000              STR      r0,[sp,#0]            ;2532
0000aa  6820              LDR      r0,[r4,#0]            ;2532
0000ac  6b00              LDR      r0,[r0,#0x30]         ;2532
0000ae  9000              STR      r0,[sp,#0]            ;2532
0000b0  6820              LDR      r0,[r4,#0]            ;2532
0000b2  6800              LDR      r0,[r0,#0]            ;2532
0000b4  9000              STR      r0,[sp,#0]            ;2532
0000b6  6820              LDR      r0,[r4,#0]            ;2532
0000b8  6800              LDR      r0,[r0,#0]            ;2532
0000ba  6ea1              LDR      r1,[r4,#0x68]         ;2532
0000bc  4308              ORRS     r0,r0,r1              ;2532
0000be  6821              LDR      r1,[r4,#0]            ;2532
0000c0  6008              STR      r0,[r1,#0]            ;2532
0000c2  bf00              NOP                            ;2532
0000c4  e014              B        |L5.240|
                  |L5.198|
0000c6  bf00              NOP                            ;2536
0000c8  2000              MOVS     r0,#0                 ;2536
0000ca  9000              STR      r0,[sp,#0]            ;2536
0000cc  6820              LDR      r0,[r4,#0]            ;2536
0000ce  6b00              LDR      r0,[r0,#0x30]         ;2536
0000d0  9000              STR      r0,[sp,#0]            ;2536
0000d2  6820              LDR      r0,[r4,#0]            ;2536
0000d4  6b00              LDR      r0,[r0,#0x30]         ;2536
0000d6  9000              STR      r0,[sp,#0]            ;2536
0000d8  6820              LDR      r0,[r4,#0]            ;2536
0000da  6800              LDR      r0,[r0,#0]            ;2536
0000dc  9000              STR      r0,[sp,#0]            ;2536
0000de  6820              LDR      r0,[r4,#0]            ;2536
0000e0  6800              LDR      r0,[r0,#0]            ;2536
0000e2  6ea1              LDR      r1,[r4,#0x68]         ;2536
0000e4  4308              ORRS     r0,r0,r1              ;2536
0000e6  6821              LDR      r1,[r4,#0]            ;2536
0000e8  6008              STR      r0,[r1,#0]            ;2536
0000ea  bf00              NOP                            ;2536
0000ec  bf00              NOP                            ;2536
0000ee  e7a0              B        |L5.50|
                  |L5.240|
0000f0  6e60              LDR      r0,[r4,#0x64]         ;2542
0000f2  4028              ANDS     r0,r0,r5              ;2542
0000f4  2800              CMP      r0,#0                 ;2542
0000f6  d032              BEQ      |L5.350|
0000f8  2001              MOVS     r0,#1                 ;2542
0000fa  02c0              LSLS     r0,r0,#11             ;2542
0000fc  4030              ANDS     r0,r0,r6              ;2542
0000fe  2800              CMP      r0,#0                 ;2542
000100  d02d              BEQ      |L5.350|
000102  2089              MOVS     r0,#0x89              ;2544
000104  5d00              LDRB     r0,[r0,r4]            ;2544
000106  2803              CMP      r0,#3                 ;2544
000108  d016              BEQ      |L5.312|
00010a  208c              MOVS     r0,#0x8c              ;2546
00010c  5900              LDR      r0,[r0,r4]            ;2546
00010e  2104              MOVS     r1,#4                 ;2546
000110  4308              ORRS     r0,r0,r1              ;2546
000112  218c              MOVS     r1,#0x8c              ;2546
000114  5108              STR      r0,[r1,r4]            ;2546
000116  bf00              NOP                            ;2547
000118  2000              MOVS     r0,#0                 ;2547
00011a  9000              STR      r0,[sp,#0]            ;2547
00011c  6820              LDR      r0,[r4,#0]            ;2547
00011e  6b00              LDR      r0,[r0,#0x30]         ;2547
000120  9000              STR      r0,[sp,#0]            ;2547
000122  6820              LDR      r0,[r4,#0]            ;2547
000124  6800              LDR      r0,[r0,#0]            ;2547
000126  9000              STR      r0,[sp,#0]            ;2547
000128  6820              LDR      r0,[r4,#0]            ;2547
00012a  6800              LDR      r0,[r0,#0]            ;2547
00012c  6e61              LDR      r1,[r4,#0x64]         ;2547
00012e  4308              ORRS     r0,r0,r1              ;2547
000130  6821              LDR      r1,[r4,#0]            ;2547
000132  6008              STR      r0,[r1,#0]            ;2547
000134  bf00              NOP                            ;2547
000136  e012              B        |L5.350|
                  |L5.312|
000138  bf00              NOP                            ;2551
00013a  2000              MOVS     r0,#0                 ;2551
00013c  9000              STR      r0,[sp,#0]            ;2551
00013e  6820              LDR      r0,[r4,#0]            ;2551
000140  6b00              LDR      r0,[r0,#0x30]         ;2551
000142  9000              STR      r0,[sp,#0]            ;2551
000144  6820              LDR      r0,[r4,#0]            ;2551
000146  6800              LDR      r0,[r0,#0]            ;2551
000148  9000              STR      r0,[sp,#0]            ;2551
00014a  6820              LDR      r0,[r4,#0]            ;2551
00014c  6800              LDR      r0,[r0,#0]            ;2551
00014e  6e61              LDR      r1,[r4,#0x64]         ;2551
000150  4308              ORRS     r0,r0,r1              ;2551
000152  6821              LDR      r1,[r4,#0]            ;2551
000154  6008              STR      r0,[r1,#0]            ;2551
000156  bf00              NOP                            ;2551
000158  bf00              NOP                            ;2551
00015a  e76a              B        |L5.50|
                  |L5.348|
00015c  e07a              B        |L5.596|
                  |L5.350|
00015e  20ff              MOVS     r0,#0xff              ;2557
000160  3001              ADDS     r0,#1                 ;2557
000162  4028              ANDS     r0,r0,r5              ;2557
000164  2800              CMP      r0,#0                 ;2557
000166  d01f              BEQ      |L5.424|
000168  20ff              MOVS     r0,#0xff              ;2557
00016a  3001              ADDS     r0,#1                 ;2557
00016c  4030              ANDS     r0,r0,r6              ;2557
00016e  2800              CMP      r0,#0                 ;2557
000170  d01a              BEQ      |L5.424|
000172  208c              MOVS     r0,#0x8c              ;2559
000174  5900              LDR      r0,[r0,r4]            ;2559
000176  2101              MOVS     r1,#1                 ;2559
000178  4308              ORRS     r0,r0,r1              ;2559
00017a  218c              MOVS     r1,#0x8c              ;2559
00017c  5108              STR      r0,[r1,r4]            ;2559
00017e  bf00              NOP                            ;2560
000180  2000              MOVS     r0,#0                 ;2560
000182  9000              STR      r0,[sp,#0]            ;2560
000184  6820              LDR      r0,[r4,#0]            ;2560
000186  6800              LDR      r0,[r0,#0]            ;2560
000188  9000              STR      r0,[sp,#0]            ;2560
00018a  6820              LDR      r0,[r4,#0]            ;2560
00018c  6800              LDR      r0,[r0,#0]            ;2560
00018e  21ff              MOVS     r1,#0xff              ;2560
000190  3101              ADDS     r1,#1                 ;2560
000192  4308              ORRS     r0,r0,r1              ;2560
000194  6821              LDR      r1,[r4,#0]            ;2560
000196  6008              STR      r0,[r1,#0]            ;2560
000198  6820              LDR      r0,[r4,#0]            ;2560
00019a  6900              LDR      r0,[r0,#0x10]         ;2560
00019c  0840              LSRS     r0,r0,#1              ;2560
00019e  0040              LSLS     r0,r0,#1              ;2560
0001a0  6821              LDR      r1,[r4,#0]            ;2560
0001a2  6108              STR      r0,[r1,#0x10]         ;2560
0001a4  bf00              NOP                            ;2560
0001a6  bf00              NOP                            ;2560
                  |L5.424|
0001a8  2001              MOVS     r0,#1                 ;2564
0001aa  0240              LSLS     r0,r0,#9              ;2564
0001ac  4028              ANDS     r0,r0,r5              ;2564
0001ae  2800              CMP      r0,#0                 ;2564
0001b0  d019              BEQ      |L5.486|
0001b2  2001              MOVS     r0,#1                 ;2564
0001b4  0240              LSLS     r0,r0,#9              ;2564
0001b6  4030              ANDS     r0,r0,r6              ;2564
0001b8  2800              CMP      r0,#0                 ;2564
0001ba  d014              BEQ      |L5.486|
0001bc  208c              MOVS     r0,#0x8c              ;2566
0001be  5900              LDR      r0,[r0,r4]            ;2566
0001c0  2108              MOVS     r1,#8                 ;2566
0001c2  4308              ORRS     r0,r0,r1              ;2566
0001c4  218c              MOVS     r1,#0x8c              ;2566
0001c6  5108              STR      r0,[r1,r4]            ;2566
0001c8  bf00              NOP                            ;2567
0001ca  2000              MOVS     r0,#0                 ;2567
0001cc  9000              STR      r0,[sp,#0]            ;2567
0001ce  6820              LDR      r0,[r4,#0]            ;2567
0001d0  6800              LDR      r0,[r0,#0]            ;2567
0001d2  9000              STR      r0,[sp,#0]            ;2567
0001d4  6820              LDR      r0,[r4,#0]            ;2567
0001d6  6800              LDR      r0,[r0,#0]            ;2567
0001d8  2101              MOVS     r1,#1                 ;2567
0001da  0249              LSLS     r1,r1,#9              ;2567
0001dc  4308              ORRS     r0,r0,r1              ;2567
0001de  6821              LDR      r1,[r4,#0]            ;2567
0001e0  6008              STR      r0,[r1,#0]            ;2567
0001e2  bf00              NOP                            ;2567
0001e4  bf00              NOP                            ;2567
                  |L5.486|
0001e6  208c              MOVS     r0,#0x8c              ;2570
0001e8  5900              LDR      r0,[r0,r4]            ;2570
0001ea  2800              CMP      r0,#0                 ;2570
0001ec  d031              BEQ      |L5.594|
0001ee  6820              LDR      r0,[r4,#0]            ;2574
0001f0  6840              LDR      r0,[r0,#4]            ;2574
0001f2  21f5              MOVS     r1,#0xf5              ;2574
0001f4  0109              LSLS     r1,r1,#4              ;2574
0001f6  4388              BICS     r0,r0,r1              ;2574
0001f8  6821              LDR      r1,[r4,#0]            ;2574
0001fa  6048              STR      r0,[r1,#4]            ;2574
0001fc  2101              MOVS     r1,#1                 ;2576
0001fe  2089              MOVS     r0,#0x89              ;2576
000200  5501              STRB     r1,[r0,r4]            ;2576
000202  6820              LDR      r0,[r4,#0]            ;2578
000204  6900              LDR      r0,[r0,#0x10]         ;2578
000206  0fc0              LSRS     r0,r0,#31             ;2578
000208  07c0              LSLS     r0,r0,#31             ;2578
00020a  2800              CMP      r0,#0                 ;2578
00020c  d105              BNE      |L5.538|
00020e  6820              LDR      r0,[r4,#0]            ;2579
000210  6900              LDR      r0,[r0,#0x10]         ;2579
000212  0789              LSLS     r1,r1,#30             ;2579
000214  4008              ANDS     r0,r0,r1              ;2579
000216  2800              CMP      r0,#0                 ;2579
000218  d018              BEQ      |L5.588|
                  |L5.538|
00021a  6820              LDR      r0,[r4,#0]            ;2581
00021c  6900              LDR      r0,[r0,#0x10]         ;2581
00021e  0080              LSLS     r0,r0,#2              ;2581
000220  0880              LSRS     r0,r0,#2              ;2581
000222  6821              LDR      r1,[r4,#0]            ;2581
000224  6108              STR      r0,[r1,#0x10]         ;2581
000226  6de0              LDR      r0,[r4,#0x5c]         ;2585
000228  2800              CMP      r0,#0                 ;2585
00022a  d005              BEQ      |L5.568|
00022c  480a              LDR      r0,|L5.600|
00022e  6de1              LDR      r1,[r4,#0x5c]         ;2589
000230  6388              STR      r0,[r1,#0x38]         ;2589
000232  6de0              LDR      r0,[r4,#0x5c]         ;2590
000234  f7fffffe          BL       MID_DMA_Abort_IT
                  |L5.568|
000238  6da0              LDR      r0,[r4,#0x58]         ;2593
00023a  2800              CMP      r0,#0                 ;2593
00023c  d009              BEQ      |L5.594|
00023e  4806              LDR      r0,|L5.600|
000240  6da1              LDR      r1,[r4,#0x58]         ;2597
000242  6388              STR      r0,[r1,#0x38]         ;2597
000244  6da0              LDR      r0,[r4,#0x58]         ;2598
000246  f7fffffe          BL       MID_DMA_Abort_IT
00024a  e002              B        |L5.594|
                  |L5.588|
00024c  4620              MOV      r0,r4                 ;2604
00024e  f7fffffe          BL       MID_SPI_ErrorCallback
                  |L5.594|
000252  e6ee              B        |L5.50|
                  |L5.596|
000254  bf00              NOP      
000256  e6ec              B        |L5.50|
;;;2611   
                          ENDP

                  |L5.600|
                          DCD      SPI_DMAAbortOnError

                          AREA ||i.MID_SPI_Init||, CODE, READONLY, ALIGN=2

                  MID_SPI_Init PROC
;;;74      */
;;;75     MID_StatusTypeDef MID_SPI_Init(SPI_HandleTypeDef *mSPI)
000000  b570              PUSH     {r4-r6,lr}
;;;76     {
000002  4604              MOV      r4,r0
;;;77         uint32_t frxth;
;;;78         uint32_t index;
;;;79         
;;;80         
;;;81         
;;;82         //=========================================================================
;;;83         // Check the SPI handle allocation
;;;84         if (mSPI == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L6.12|
;;;85         {
;;;86             return MID_ERROR;
000008  2001              MOVS     r0,#1
                  |L6.10|
;;;87         }
;;;88         
;;;89         //=========================================================================
;;;90         // Check the parameters
;;;91         assert_param(IS_SPI_ALL_INSTANCE(mSPI->Instance));
;;;92         assert_param(IS_SPI_MODE(mSPI->Init.Mode));
;;;93         assert_param(IS_SPI_DIRECTION(mSPI->Init.Direction));
;;;94         assert_param(IS_SPI_DATASIZE(mSPI->Init.DataSize));
;;;95         assert_param(IS_SPI_NSS(mSPI->Init.NSS));
;;;96         assert_param(IS_SPI_NSSP(mSPI->Init.NSSPMode));
;;;97         assert_param(IS_SPI_BAUDRATE_PRESCALER(mSPI->Init.ClockDivider));
;;;98         assert_param(IS_SPI_FIRST_BIT(mSPI->Init.FirstBit));
;;;99         assert_param(IS_SPI_TIMODE(mSPI->Init.TIMode));
;;;100    
;;;101        //=========================================================================
;;;102        //SPI or URT register define.
;;;103        mSPI->REG_TYPE = (uint32_t)(&mSPI->Instance->STA.W);
;;;104        index          = mSPI->REG_TYPE & MID_SPI_INDEX_MASK;
;;;105        mSPI->REG_TYPE = mSPI->REG_TYPE & MID_SPI_MASK;
;;;106        
;;;107        // When SPI state is reset
;;;108        if (mSPI->State == MID_SPI_STATE_RESET)
;;;109        {
;;;110            // Allocate lock resource and initialize it
;;;111            mSPI->Lock = MID_UNLOCKED;
;;;112            // Init the low level hardware : GPIO, CLOCK, NVIC...
;;;113            MID_SPI_MspInit(mSPI);
;;;114        }
;;;115    
;;;116        // Set SPI state is busy
;;;117        mSPI->State = MID_SPI_STATE_BUSY;
;;;118        
;;;119        //=========================================================================
;;;120        // Disable the selected SPI peripheral
;;;121        CLEAR_BIT(mSPI->Instance->CR0.W , SPI_CR0_EN_mask_w);
;;;122        
;;;123        
;;;124        //=========================================================================
;;;125        // When selection moduel is SPI
;;;126        if(mSPI->REG_TYPE == MID_SPI_SPI)
;;;127        {
;;;128            //=========================================================================
;;;129            // Align by default the rs fifo threshold on the data size
;;;130            frxth = (SPI_RXBUF_THRESHOLD_1BYTE & sSPI_RXBUF_THRESHOLD);
;;;131            if ((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT))
;;;132            {
;;;133              frxth = (SPI_RXBUF_THRESHOLD_2BYTE & sSPI_RXBUF_THRESHOLD);
;;;134            }
;;;135            if ((mSPI->Init.DataSize > SPI_DATASIZE_16BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_24BIT))
;;;136            {
;;;137              frxth = (SPI_RXBUF_THRESHOLD_3BYTE & sSPI_RXBUF_THRESHOLD);
;;;138            }
;;;139            if(mSPI->Init.DataSize > SPI_DATASIZE_24BIT)
;;;140            {
;;;141                frxth = (SPI_RXBUF_THRESHOLD_4BYTE & sSPI_RXBUF_THRESHOLD);
;;;142            }
;;;143            
;;;144            /*----------------------- SPIx Configuration ---------------------*/
;;;145            /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
;;;146            Communication speed mode First bit  */
;;;147            /* Not support SSM and CRC.... */
;;;148            //=========================================================================
;;;149            //Init:
;;;150            //    - 1. Clock divider.
;;;151            //    - 2. Mode, CLKPolarity, NSS, CLKPhase and FirstBit
;;;152            //    - 3. NSS pulse time
;;;153            //    - 4. Data lines and data size, NSS software in/out state and RX threshold
;;;154            //    - 5. Map flag and IRQ to SPI
;;;155            //    - 6. RX shadow buffer level relationship register define.
;;;156            //--------------------------------------------------------------------
;;;157            mSPI->Instance->CLK.W = SPI_CLKDIV_TABLE [mSPI->Init.ClockDivider] | 
;;;158                                    SPI_CLK_CK_SEL_proc_w;
;;;159            
;;;160            //--------------------------------------------------------------------
;;;161                mSPI->Instance->CR0.W = SPI_MODE_TABLE [mSPI->Init.Mode] | 
;;;162                                    ((mSPI->Init.CLKPolarity) ) | 
;;;163                                    ((mSPI->Init.CLKPhase) ) | 
;;;164                                    (mSPI->Init.FirstBit << 3) | 
;;;165                                    ((mSPI->Init.NSS << 11) & SPI_CR0_NSS_SWEN_mask_w) |
;;;166                                    ((mSPI->Init.NSSPMode << 14) & SPI_CR0_NSS_PEN_mask_w);
;;;167    #if (defined(MG32_2ND) || defined(MG32_3RD))
;;;168            #if defined(SPI_CR0_DOUT_IDL_mask_w)
;;;169            mSPI->Instance->CR0.W |= SPI_CR0_DMA_MDS_enable_w | 
;;;170                                     mSPI->Init.Swap | 
;;;171                                     (mSPI->Init.IdleDataOut & ( SPI_CR0_DOUT_MDS_mask_w | SPI_CR0_DOUT_IDL_mask_w));
;;;172            #else
;;;173            mSPI->Instance->CR0.W |= SPI_CR0_DMA_MDS_enable_w | 
;;;174                                     mSPI->Init.Swap | 
;;;175                                     (mSPI->Init.IdleDataOut & ( SPI_CR0_DOUT_MDS_mask_w ));
;;;176            #endif
;;;177    #endif
;;;178    
;;;179            //--------------------------------------------------------------------
;;;180    #if (defined(MG32_2ND) || defined(MG32_3RD)) 
;;;181            mSPI->Instance->CR1.W = (mSPI->Init.NSSPMode << 15) & SPI_CR1_NSS_IDT_mask_w;
;;;182    #endif
;;;183            //--------------------------------------------------------------------
;;;184            mSPI->Instance->CR2.W = ((mSPI->Init.DataLine) << 4) | 
;;;185                                   ((mSPI->Init.DataSize) << 16) |
;;;186                                   frxth;
;;;187            //--------------------------------------------------------------------
;;;188            mSPI->SPI_FLAG_TUDRF = SPI_INT_TUDR_IE_mask_w;
;;;189            mSPI->SPI_FLAG_ROVRF = SPI_STA_ROVRF_mask_w;
;;;190            mSPI->SPI_FLAG_ERROR = (SPI_FLAG_MODF | SPI_FLAG_WEF | SPI_STA_ROVRF_mask_w | SPI_STA_TUDRF_mask_w);
;;;191            mSPI->SPI_FLAG_IDLF  = SPI_STA_IDLF_mask_w;
;;;192            mSPI->SPI_FLAG_TCF   = SPI_STA_TCF_mask_w;
;;;193            mSPI->SPI_IRQ        = SPI0_IRQn;
;;;194            
;;;195            //--------------------------------------------------------------------
;;;196            mSPI->RX_TH  = &(mSPI->Instance->CR2.B[1]);
;;;197            mSPI->RXTX_LVL = &(mSPI->Instance->STA.B[2]);
;;;198            mSPI->RXTX_CLR = &(mSPI->Instance->CR1.B[0]);
;;;199            mSPI->RNUM     = &(mSPI->Instance->STA.B[3]);
;;;200        }
;;;201        // When selection moduel is SPI mode of URTx
;;;202        else if(mSPI->REG_TYPE == MID_SPI_URT)
;;;203        {
;;;204            //=========================================================================
;;;205            // Align by default the rs fifo threshold on the data size
;;;206            if(mSPI->Init.DataSize != SPI_DATASIZE_8BIT)
;;;207            {
;;;208                return( MID_ERROR );
;;;209            }
;;;210            frxth = (SPI_RXBUF_THRESHOLD_4BYTE & uSPI_RXBUF_THRESHOLD);
;;;211            
;;;212            /*----------------------- SPIx Configuration ---------------------*/
;;;213            /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
;;;214            Communication speed mode First bit  */
;;;215            /* Not support SSM and CRC.... */
;;;216            //=========================================================================
;;;217            //Init:
;;;218            //    - 1. Clock divider.
;;;219            //    - 2. Mode
;;;220            //    - 3. CLKPolarity & CLKPhase
;;;221            //    - 4. FirstBit
;;;222            //    - 5. NSS software output : if use URT , only need NSS AFS of pin 
;;;223            //                               no to enable.
;;;224            //---------------------------------------------------------------------
;;;225            //Set : 
;;;226            //    - 1. MODE 
;;;227            //    - 2. line 
;;;228            //    - 3. Clock divider.
;;;229            // When data lines parameter error
;;;230            if(mSPI->Init.DataLine!=SPI_STANDARD_SPI)
;;;231            {
;;;232                return MID_ERROR;
;;;233            }
;;;234    
;;;235            CLEAR_BIT( mSPI->Instance->CR2.W , URT_CR2_NSS_SWEN_mask_w);                                                                                       // NSS output software control disable.
;;;236            //---------------------------------------------------------------------
;;;237            switch(mSPI->Init.Mode)
;;;238            {
;;;239                case SPI_MODE_MASTER:
;;;240                case SPI_MODE_MASTER_NSS:
;;;241                                         MODIFY_REG( mSPI->Instance->CR0.H[0] , uSPI_MODE_MASK , uSPI_MODE_MASTER_NSS);                                        // URT mode is SYNC master mode.
;;;242                                         WRITE_REG( mSPI->Instance->CLK.W, ( URT_CLK_CLK_EN_enable_w | URT_CLK_BR_EN_enable_w | URT_CLK_BR_MDS_combined_w));   // 1. Baud-rate clock source from CK_URT_PSC
;;;243                                                                                                                                                               // 2. Baud-rate generator mode is combined mode.
;;;244                                                                                                                                                               // 3. Baud-rate generator enable.
;;;245                                                                                                                                                               // 4. CLK signal output enable and CLK signal is SPICLK.
;;;246                                                                                                                                                               // 5. TX / RX clock source from baud-rate generator.
;;;247                                                                                                                                                               // 6. SPICLK output pin is URT_CLK.
;;;248                
;;;249                                         mSPI->Instance->CR1.B[1] = mSPI->Instance->CR1.B[3] = 1;                                                              // Set RX / TX baud-rate.
;;;250                                         mSPI->Instance->RLR.H[0] = (( 1 << mSPI->Init.ClockDivider)-1);
;;;251    
;;;252                                         
;;;253                                         //---------------------------------------------------------------------
;;;254                                         //Set SPI MOSI idle status : 
;;;255                                         //    1. In MG32F02A132 , MG32F02A072 , MA862 , MG32F02A032
;;;256                                         //       MOSI status always H in in MOSI is idle status.
;;;257                                         #if (defined(MG32_3RD))
;;;258                                              MODIFY_REG( mSPI->Instance->CR2.W , (URT_CR2_DOUT_IDL_mask_w | URT_CR2_DOUT_MDS_mask_w) , ((mSPI->Init.IdleDataOut << 8) & (URT_CR2_DOUT_IDL_mask_w | URT_CR2_DOUT_MDS_mask_w)));
;;;259                                         #endif                             
;;;260                                         #if (defined(MG32_1ST) || defined(MG32_2ND))
;;;261                                             if(mSPI->Init.IdleDataOut != SPI_IDLE_DATA_OUT_DRIVING_1) 
;;;262                                             {
;;;263                                                 return MID_ERROR;
;;;264                                             }
;;;265                                         #endif
;;;266                                         break;
;;;267                #if (defined(MG32_3RD))
;;;268                case SPI_MODE_SLAVE_NSS:
;;;269                                         MODIFY_REG( mSPI->Instance->CR0.H[0] , uSPI_MODE_MASK , uSPI_MODE_SLAVE_NSS);                                           //URT mode is SYNC slave mode. 
;;;270                
;;;271                                         WRITE_REG( mSPI->Instance->CLK.W, ( URT_CLK_CLK_EN_disable_w | URT_CLK_BR_EN_enable_w | URT_CLK_BR_MDS_combined_w |     //1. Baud-rate generator clock source form CK_URT_PSC
;;;272                                                                             URT_CLK_TX_CKS_ext_clk_w | URT_CLK_RX_CKS_ext_clk_w));                              //2. Baud-rate generator mode is combined mode.
;;;273                                                                                                                                                                 //3. Baud-rate generator enable.
;;;274                                                                                                                                                                 //4. CLK signal output disable
;;;275                                                                                                                                                                 //5. TX / RX clock source form URT_CLK input.
;;;276                                                                                                                                                                 //6. SPICLK input pin is URT_CLK.
;;;277                
;;;278                                         mSPI->Instance->CR1.B[1] = mSPI->Instance->CR1.B[3] = 2;                                                                //Set RX / TX baud-rate is CK_URT_PSC / 3
;;;279                                         mSPI->Instance->RLR.H[0] = 0;
;;;280                
;;;281                                         
;;;282                                         WRITE_REG( mSPI->Instance->CR2.W , URT_CR2_NSSI_EN_enable_w);                                                            //1. NSSI function enable.
;;;283                                                                                                                                                                  //2. TX / RX disable.
;;;284                                         break;
;;;285                #endif
;;;286                default:
;;;287                                         return MID_ERROR;
;;;288            }
;;;289            
;;;290            //---------------------------------------------------------------------
;;;291            //CLKPolarity & CLKPhase
;;;292            MODIFY_REG( mSPI->Instance->CR3.W , (URT_CR3_CPOL_mask_w    | URT_CR3_CPHA_mask_w) , 
;;;293                                                (mSPI->Init.CLKPolarity | mSPI->Init.CLKPhase));
;;;294            
;;;295            //--------------------------------------------------------------------
;;;296            //Set : 
;;;297            //    - First bit.
;;;298            //    - Data size = 8bit.
;;;299            if(mSPI->Init.FirstBit==SPI_FIRSTBIT_MSB)
;;;300            {
;;;301                mSPI->Instance->CR1.B[0] = ( URT_CR1_RXDSIZE_8bit_b0 | URT_CR1_RXPAR_EN_disable_b0 | URT_CR1_RXMSB_EN_enable_b0 | URT_CR1_RXSTP_LEN_1bit_b0);
;;;302            }
;;;303            else
;;;304            {
;;;305                mSPI->Instance->CR1.B[0] = ( URT_CR1_RXDSIZE_8bit_b0 | URT_CR1_RXPAR_EN_disable_b0 | URT_CR1_RXMSB_EN_disable_b0 | URT_CR1_RXSTP_LEN_1bit_b0);
;;;306            }
;;;307            mSPI->Instance->CR1.B[2] = mSPI->Instance->CR1.B[0] ;
;;;308            
;;;309            //--------------------------------------------------------------------
;;;310            //Enable TX / RX
;;;311            SET_BIT(mSPI->Instance->CR2.W , (URT_CR2_RX_EN_mask_w | URT_CR2_TX_EN_mask_w));
;;;312            
;;;313            //--------------------------------------------------------------------
;;;314            /*Map flag and IRQ to URT.*/
;;;315            #if (defined(MG32_3RD))
;;;316                mSPI->SPI_FLAG_TUDRF = URT_STA_TUDRF_mask_w;
;;;317                mSPI->SPI_FLAG_ROVRF = URT_STA_ROVRF_mask_w;
;;;318                mSPI->SPI_FLAG_ERROR = (URT_STA_ROVRF_mask_w | URT_STA_TUDRF_mask_w | URT_STA_ERRF_mask_w);
;;;319            #else
;;;320                mSPI->SPI_FLAG_TUDRF = 0;
;;;321                mSPI->SPI_FLAG_ROVRF = 0;
;;;322                mSPI->SPI_FLAG_ERROR = 0;
;;;323            #endif
;;;324            mSPI->SPI_FLAG_IDLF  = 0;
;;;325            mSPI->SPI_FLAG_TCF   = URT_STA_TCF_mask_w;
;;;326            
;;;327            switch(index)
;;;328            {
;;;329                case MID_SPI_INDEX_URT0:
;;;330                                           mSPI->SPI_IRQ        = URT0_IRQn;
;;;331                                           break;
;;;332                case MID_SPI_INDEX_URT1:
;;;333                #if ( defined(MG32_1ST) | defined(MG32_3RD))
;;;334                case MID_SPI_INDEX_URT2:
;;;335                #endif
;;;336                #if defined(MG32_1ST)
;;;337                case MID_SPI_INDEX_URT3:                
;;;338                #endif
;;;339                                           mSPI->SPI_IRQ        = URT123_IRQn;
;;;340                                           break;
;;;341                default:
;;;342                                           return MID_ERROR;
;;;343            }
;;;344    
;;;345            //--------------------------------------------------------------------
;;;346            //RX shadow buffer level register define.
;;;347            mSPI->RX_TH    = &(mSPI->Instance->CR0.B[2]);
;;;348            mSPI->RXTX_LVL = &(mSPI->Instance->STA2.B[3]);
;;;349            mSPI->RXTX_CLR = &(mSPI->Instance->CR4.B[0]);
;;;350            mSPI->RNUM     = &(mSPI->Instance->CR4.B[1]);
;;;351            
;;;352            //=========================================================================
;;;353            // Pin Relationship Control
;;;354            MODIFY_REG( mSPI->Instance->CR0.W , URT_CR0_IO_SWP_mask_w , ((mSPI->Init.Swap << 1) & URT_CR0_IO_SWP_mask_w));
;;;355        }
;;;356        // When initial module is others
;;;357        else
;;;358        {
;;;359            return( MID_ERROR);
;;;360        }
;;;361        
;;;362        
;;;363        //=========================================================================
;;;364        // Enable NVIC of module
;;;365        NVIC_EnableIRQ((IRQn_Type) mSPI->SPI_IRQ);
;;;366        
;;;367        //=========================================================================
;;;368        // Update ErrorCode and module state
;;;369        mSPI->ErrorCode = MID_SPI_ERROR_NONE;
;;;370        mSPI->State     = MID_SPI_STATE_READY;
;;;371        
;;;372        //=========================================================================
;;;373        // Enable moudle
;;;374        SET_BIT( mSPI->Instance->CR0.W , SPI_CR0_EN_mask_w);
;;;375        
;;;376        return MID_OK;
;;;377    }
00000a  bd70              POP      {r4-r6,pc}
                  |L6.12|
00000c  6820              LDR      r0,[r4,#0]            ;103
00000e  6320              STR      r0,[r4,#0x30]         ;103
000010  210f              MOVS     r1,#0xf               ;104
000012  0409              LSLS     r1,r1,#16             ;104
000014  6b26              LDR      r6,[r4,#0x30]         ;104
000016  400e              ANDS     r6,r6,r1              ;104
000018  6b20              LDR      r0,[r4,#0x30]         ;105
00001a  0e00              LSRS     r0,r0,#24             ;105
00001c  0600              LSLS     r0,r0,#24             ;105
00001e  6320              STR      r0,[r4,#0x30]         ;105
000020  2089              MOVS     r0,#0x89              ;108
000022  5d00              LDRB     r0,[r0,r4]            ;108
000024  2800              CMP      r0,#0                 ;108
000026  d105              BNE      |L6.52|
000028  2100              MOVS     r1,#0                 ;111
00002a  2088              MOVS     r0,#0x88              ;111
00002c  5501              STRB     r1,[r0,r4]            ;111
00002e  4620              MOV      r0,r4                 ;113
000030  f7fffffe          BL       MID_SPI_MspInit
                  |L6.52|
000034  2102              MOVS     r1,#2                 ;117
000036  2089              MOVS     r0,#0x89              ;117
000038  5501              STRB     r1,[r0,r4]            ;117
00003a  6820              LDR      r0,[r4,#0]            ;121
00003c  6900              LDR      r0,[r0,#0x10]         ;121
00003e  0840              LSRS     r0,r0,#1              ;121
000040  0040              LSLS     r0,r0,#1              ;121
000042  6821              LDR      r1,[r4,#0]            ;121
000044  6108              STR      r0,[r1,#0x10]         ;121
000046  2153              MOVS     r1,#0x53              ;126
000048  0609              LSLS     r1,r1,#24             ;126
00004a  6b20              LDR      r0,[r4,#0x30]         ;126
00004c  4288              CMP      r0,r1                 ;126
00004e  d158              BNE      |L6.258|
000050  2500              MOVS     r5,#0                 ;130
000052  68e0              LDR      r0,[r4,#0xc]          ;131
000054  2808              CMP      r0,#8                 ;131
000056  d904              BLS      |L6.98|
000058  68e0              LDR      r0,[r4,#0xc]          ;131
00005a  2810              CMP      r0,#0x10              ;131
00005c  d801              BHI      |L6.98|
00005e  25ff              MOVS     r5,#0xff              ;133
000060  3501              ADDS     r5,#1                 ;133
                  |L6.98|
000062  68e0              LDR      r0,[r4,#0xc]          ;135
000064  2810              CMP      r0,#0x10              ;135
000066  d904              BLS      |L6.114|
000068  68e0              LDR      r0,[r4,#0xc]          ;135
00006a  2818              CMP      r0,#0x18              ;135
00006c  d801              BHI      |L6.114|
00006e  2501              MOVS     r5,#1                 ;137
000070  026d              LSLS     r5,r5,#9              ;137
                  |L6.114|
000072  68e0              LDR      r0,[r4,#0xc]          ;139
000074  2818              CMP      r0,#0x18              ;139
000076  d901              BLS      |L6.124|
000078  2503              MOVS     r5,#3                 ;141
00007a  022d              LSLS     r5,r5,#8              ;141
                  |L6.124|
00007c  69e0              LDR      r0,[r4,#0x1c]         ;157
00007e  0080              LSLS     r0,r0,#2              ;157
000080  497c              LDR      r1,|L6.628|
000082  5808              LDR      r0,[r1,r0]            ;157
000084  6821              LDR      r1,[r4,#0]            ;157
000086  6088              STR      r0,[r1,#8]            ;157
000088  6860              LDR      r0,[r4,#4]            ;161
00008a  0080              LSLS     r0,r0,#2              ;161
00008c  497a              LDR      r1,|L6.632|
00008e  5808              LDR      r0,[r1,r0]            ;161
000090  6921              LDR      r1,[r4,#0x10]         ;161
000092  4308              ORRS     r0,r0,r1              ;161
000094  6961              LDR      r1,[r4,#0x14]         ;161
000096  4308              ORRS     r0,r0,r1              ;161
000098  6a21              LDR      r1,[r4,#0x20]         ;161
00009a  00c9              LSLS     r1,r1,#3              ;161
00009c  4308              ORRS     r0,r0,r1              ;161
00009e  69a1              LDR      r1,[r4,#0x18]         ;161
0000a0  02c9              LSLS     r1,r1,#11             ;161
0000a2  2201              MOVS     r2,#1                 ;161
0000a4  02d2              LSLS     r2,r2,#11             ;161
0000a6  4011              ANDS     r1,r1,r2              ;161
0000a8  4308              ORRS     r0,r0,r1              ;161
0000aa  6a61              LDR      r1,[r4,#0x24]         ;161
0000ac  0389              LSLS     r1,r1,#14             ;161
0000ae  00d2              LSLS     r2,r2,#3              ;161
0000b0  4011              ANDS     r1,r1,r2              ;161
0000b2  4308              ORRS     r0,r0,r1              ;161
0000b4  6821              LDR      r1,[r4,#0]            ;161
0000b6  6108              STR      r0,[r1,#0x10]         ;161
0000b8  68a0              LDR      r0,[r4,#8]            ;184
0000ba  0100              LSLS     r0,r0,#4              ;184
0000bc  89a1              LDRH     r1,[r4,#0xc]          ;184
0000be  0409              LSLS     r1,r1,#16             ;184
0000c0  4308              ORRS     r0,r0,r1              ;184
0000c2  4328              ORRS     r0,r0,r5              ;184
0000c4  6821              LDR      r1,[r4,#0]            ;184
0000c6  6188              STR      r0,[r1,#0x18]         ;184
0000c8  10d0              ASRS     r0,r2,#3              ;188
0000ca  6660              STR      r0,[r4,#0x64]         ;188
0000cc  1040              ASRS     r0,r0,#1              ;189
0000ce  66a0              STR      r0,[r4,#0x68]         ;189
0000d0  200f              MOVS     r0,#0xf               ;190
0000d2  0200              LSLS     r0,r0,#8              ;190
0000d4  66e0              STR      r0,[r4,#0x6c]         ;190
0000d6  2008              MOVS     r0,#8                 ;191
0000d8  6720              STR      r0,[r4,#0x70]         ;191
0000da  2010              MOVS     r0,#0x10              ;192
0000dc  6760              STR      r0,[r4,#0x74]         ;192
0000de  2118              MOVS     r1,#0x18              ;193
0000e0  2060              MOVS     r0,#0x60              ;193
0000e2  5501              STRB     r1,[r0,r4]            ;193
0000e4  6820              LDR      r0,[r4,#0]            ;196
0000e6  3019              ADDS     r0,r0,#0x19           ;196
0000e8  67a0              STR      r0,[r4,#0x78]         ;196
0000ea  6820              LDR      r0,[r4,#0]            ;197
0000ec  1c80              ADDS     r0,r0,#2              ;197
0000ee  67e0              STR      r0,[r4,#0x7c]         ;197
0000f0  6820              LDR      r0,[r4,#0]            ;198
0000f2  3014              ADDS     r0,r0,#0x14           ;198
0000f4  2180              MOVS     r1,#0x80              ;198
0000f6  5108              STR      r0,[r1,r4]            ;198
0000f8  6820              LDR      r0,[r4,#0]            ;199
0000fa  1cc0              ADDS     r0,r0,#3              ;199
0000fc  2184              MOVS     r1,#0x84              ;199
0000fe  5108              STR      r0,[r1,r4]            ;199
000100  e09a              B        |L6.568|
                  |L6.258|
000102  2129              MOVS     r1,#0x29              ;202
000104  0649              LSLS     r1,r1,#25             ;202
000106  6b20              LDR      r0,[r4,#0x30]         ;202
000108  4288              CMP      r0,r1                 ;202
00010a  d173              BNE      |L6.500|
00010c  68e0              LDR      r0,[r4,#0xc]          ;206
00010e  2808              CMP      r0,#8                 ;206
000110  d001              BEQ      |L6.278|
000112  2001              MOVS     r0,#1                 ;208
000114  e779              B        |L6.10|
                  |L6.278|
000116  2503              MOVS     r5,#3                 ;210
000118  042d              LSLS     r5,r5,#16             ;210
00011a  68a0              LDR      r0,[r4,#8]            ;230
00011c  2800              CMP      r0,#0                 ;230
00011e  d001              BEQ      |L6.292|
000120  2001              MOVS     r0,#1                 ;232
000122  e772              B        |L6.10|
                  |L6.292|
000124  6820              LDR      r0,[r4,#0]            ;235
000126  6980              LDR      r0,[r0,#0x18]         ;235
000128  2101              MOVS     r1,#1                 ;235
00012a  0689              LSLS     r1,r1,#26             ;235
00012c  4388              BICS     r0,r0,r1              ;235
00012e  6821              LDR      r1,[r4,#0]            ;235
000130  6188              STR      r0,[r1,#0x18]         ;235
000132  6860              LDR      r0,[r4,#4]            ;237
000134  2810              CMP      r0,#0x10              ;237
000136  d002              BEQ      |L6.318|
000138  2811              CMP      r0,#0x11              ;237
00013a  d11e              BNE      |L6.378|
00013c  e000              B        |L6.320|
                  |L6.318|
00013e  bf00              NOP                            ;240
                  |L6.320|
000140  6820              LDR      r0,[r4,#0]            ;241
000142  8a00              LDRH     r0,[r0,#0x10]         ;241
000144  494d              LDR      r1,|L6.636|
000146  4008              ANDS     r0,r0,r1              ;241
000148  3010              ADDS     r0,r0,#0x10           ;241
00014a  6821              LDR      r1,[r4,#0]            ;241
00014c  8208              STRH     r0,[r1,#0x10]         ;241
00014e  484c              LDR      r0,|L6.640|
000150  6821              LDR      r1,[r4,#0]            ;242
000152  6088              STR      r0,[r1,#8]            ;242
000154  2101              MOVS     r1,#1                 ;249
000156  6820              LDR      r0,[r4,#0]            ;249
000158  75c1              STRB     r1,[r0,#0x17]         ;249
00015a  6820              LDR      r0,[r4,#0]            ;249
00015c  7541              STRB     r1,[r0,#0x15]         ;249
00015e  7f21              LDRB     r1,[r4,#0x1c]         ;250
000160  2001              MOVS     r0,#1                 ;250
000162  4088              LSLS     r0,r0,r1              ;250
000164  1e40              SUBS     r0,r0,#1              ;250
000166  6821              LDR      r1,[r4,#0]            ;250
000168  8488              STRH     r0,[r1,#0x24]         ;250
00016a  2107              MOVS     r1,#7                 ;261
00016c  0449              LSLS     r1,r1,#17             ;261
00016e  6ae0              LDR      r0,[r4,#0x2c]         ;261
000170  4288              CMP      r0,r1                 ;261
000172  d001              BEQ      |L6.376|
000174  2001              MOVS     r0,#1                 ;263
000176  e748              B        |L6.10|
                  |L6.376|
000178  e001              B        |L6.382|
                  |L6.378|
00017a  2001              MOVS     r0,#1                 ;287
00017c  e745              B        |L6.10|
                  |L6.382|
00017e  bf00              NOP                            ;266
000180  6961              LDR      r1,[r4,#0x14]         ;292
000182  6920              LDR      r0,[r4,#0x10]         ;292
000184  4308              ORRS     r0,r0,r1              ;292
000186  6821              LDR      r1,[r4,#0]            ;292
000188  69c9              LDR      r1,[r1,#0x1c]         ;292
00018a  2206              MOVS     r2,#6                 ;292
00018c  4391              BICS     r1,r1,r2              ;292
00018e  4308              ORRS     r0,r0,r1              ;292
000190  6821              LDR      r1,[r4,#0]            ;292
000192  61c8              STR      r0,[r1,#0x1c]         ;292
000194  6a20              LDR      r0,[r4,#0x20]         ;299
000196  2800              CMP      r0,#0                 ;299
000198  d103              BNE      |L6.418|
00019a  2060              MOVS     r0,#0x60              ;301
00019c  6821              LDR      r1,[r4,#0]            ;301
00019e  7508              STRB     r0,[r1,#0x14]         ;301
0001a0  e002              B        |L6.424|
                  |L6.418|
0001a2  2040              MOVS     r0,#0x40              ;305
0001a4  6821              LDR      r1,[r4,#0]            ;305
0001a6  7508              STRB     r0,[r1,#0x14]         ;305
                  |L6.424|
0001a8  6820              LDR      r0,[r4,#0]            ;307
0001aa  7d01              LDRB     r1,[r0,#0x14]         ;307
0001ac  7581              STRB     r1,[r0,#0x16]         ;307
0001ae  6820              LDR      r0,[r4,#0]            ;311
0001b0  6980              LDR      r0,[r0,#0x18]         ;311
0001b2  210c              MOVS     r1,#0xc               ;311
0001b4  4308              ORRS     r0,r0,r1              ;311
0001b6  6821              LDR      r1,[r4,#0]            ;311
0001b8  6188              STR      r0,[r1,#0x18]         ;311
0001ba  2000              MOVS     r0,#0                 ;320
0001bc  6660              STR      r0,[r4,#0x64]         ;320
0001be  66a0              STR      r0,[r4,#0x68]         ;321
0001c0  66e0              STR      r0,[r4,#0x6c]         ;322
0001c2  6720              STR      r0,[r4,#0x70]         ;324
0001c4  2004              MOVS     r0,#4                 ;325
0001c6  6760              STR      r0,[r4,#0x74]         ;325
0001c8  2e00              CMP      r6,#0                 ;327
0001ca  d009              BEQ      |L6.480|
0001cc  0380              LSLS     r0,r0,#14             ;327
0001ce  1a30              SUBS     r0,r6,r0              ;327
0001d0  d00a              BEQ      |L6.488|
0001d2  2101              MOVS     r1,#1                 ;327
0001d4  0409              LSLS     r1,r1,#16             ;327
0001d6  1a40              SUBS     r0,r0,r1              ;327
0001d8  d007              BEQ      |L6.490|
0001da  1a40              SUBS     r0,r0,r1              ;327
0001dc  d10b              BNE      |L6.502|
0001de  e005              B        |L6.492|
                  |L6.480|
0001e0  2114              MOVS     r1,#0x14              ;330
0001e2  2060              MOVS     r0,#0x60              ;330
0001e4  5501              STRB     r1,[r0,r4]            ;330
0001e6  e008              B        |L6.506|
                  |L6.488|
0001e8  bf00              NOP                            ;334
                  |L6.490|
0001ea  bf00              NOP                            ;337
                  |L6.492|
0001ec  2115              MOVS     r1,#0x15              ;339
0001ee  2060              MOVS     r0,#0x60              ;339
0001f0  5501              STRB     r1,[r0,r4]            ;339
0001f2  e002              B        |L6.506|
                  |L6.500|
0001f4  e01e              B        |L6.564|
                  |L6.502|
0001f6  2001              MOVS     r0,#1                 ;342
0001f8  e707              B        |L6.10|
                  |L6.506|
0001fa  bf00              NOP                            ;331
0001fc  6820              LDR      r0,[r4,#0]            ;347
0001fe  3012              ADDS     r0,r0,#0x12           ;347
000200  67a0              STR      r0,[r4,#0x78]         ;347
000202  6820              LDR      r0,[r4,#0]            ;348
000204  300f              ADDS     r0,r0,#0xf            ;348
000206  67e0              STR      r0,[r4,#0x7c]         ;348
000208  6820              LDR      r0,[r4,#0]            ;349
00020a  3020              ADDS     r0,r0,#0x20           ;349
00020c  2180              MOVS     r1,#0x80              ;349
00020e  5108              STR      r0,[r1,r4]            ;349
000210  6820              LDR      r0,[r4,#0]            ;350
000212  3021              ADDS     r0,r0,#0x21           ;350
000214  2184              MOVS     r1,#0x84              ;350
000216  5108              STR      r0,[r1,r4]            ;350
000218  6820              LDR      r0,[r4,#0]            ;354
00021a  6900              LDR      r0,[r0,#0x10]         ;354
00021c  21ff              MOVS     r1,#0xff              ;354
00021e  3101              ADDS     r1,#1                 ;354
000220  4388              BICS     r0,r0,r1              ;354
000222  6aa1              LDR      r1,[r4,#0x28]         ;354
000224  0049              LSLS     r1,r1,#1              ;354
000226  22ff              MOVS     r2,#0xff              ;354
000228  3201              ADDS     r2,#1                 ;354
00022a  4011              ANDS     r1,r1,r2              ;354
00022c  4308              ORRS     r0,r0,r1              ;354
00022e  6821              LDR      r1,[r4,#0]            ;354
000230  6108              STR      r0,[r1,#0x10]         ;354
000232  e001              B        |L6.568|
                  |L6.564|
000234  2001              MOVS     r0,#1                 ;359
000236  e6e8              B        |L6.10|
                  |L6.568|
000238  2160              MOVS     r1,#0x60              ;365
00023a  5d09              LDRB     r1,[r1,r4]            ;365
00023c  b248              SXTB     r0,r1                 ;365
00023e  2800              CMP      r0,#0                 ;365
000240  db09              BLT      |L6.598|
000242  bf00              NOP                            ;365
000244  bf00              NOP                            ;365
000246  06c2              LSLS     r2,r0,#27             ;365
000248  0ed2              LSRS     r2,r2,#27             ;365
00024a  2101              MOVS     r1,#1                 ;365
00024c  4091              LSLS     r1,r1,r2              ;365
00024e  4a0d              LDR      r2,|L6.644|
000250  6011              STR      r1,[r2,#0]            ;365
000252  bf00              NOP                            ;365
000254  bf00              NOP                            ;365
                  |L6.598|
000256  bf00              NOP                            ;365
000258  2100              MOVS     r1,#0                 ;369
00025a  208c              MOVS     r0,#0x8c              ;369
00025c  5101              STR      r1,[r0,r4]            ;369
00025e  2101              MOVS     r1,#1                 ;370
000260  2089              MOVS     r0,#0x89              ;370
000262  5501              STRB     r1,[r0,r4]            ;370
000264  6820              LDR      r0,[r4,#0]            ;374
000266  6900              LDR      r0,[r0,#0x10]         ;374
000268  4308              ORRS     r0,r0,r1              ;374
00026a  6821              LDR      r1,[r4,#0]            ;374
00026c  6108              STR      r0,[r1,#0x10]         ;374
00026e  2000              MOVS     r0,#0                 ;376
000270  e6cb              B        |L6.10|
;;;378    
                          ENDP

000272  0000              DCW      0x0000
                  |L6.628|
                          DCD      SPI_CLKDIV_TABLE
                  |L6.632|
                          DCD      SPI_MODE_TABLE
                  |L6.636|
                          DCD      0xffff0301
                  |L6.640|
                          DCD      0x03000010
                  |L6.644|
                          DCD      0xe000e100

                          AREA ||i.MID_SPI_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_SPI_MspDeInit PROC
;;;424     */
;;;425    __weak void MID_SPI_MspDeInit(SPI_HandleTypeDef *mSPI)
000000  4770              BX       lr
;;;426    {
;;;427      /* Prevent unused argument(s) compilation warning */
;;;428      UNUSED(mSPI);
;;;429    
;;;430      /* NOTE : This function should not be modified, when the callback is needed,
;;;431                the MID_SPI_MspDeInit should be implemented in the user file
;;;432       */
;;;433    }
;;;434    ///@}
                          ENDP


                          AREA ||i.MID_SPI_MspInit||, CODE, READONLY, ALIGN=2

                  MID_SPI_MspInit PROC
;;;396     */
;;;397    __weak void MID_SPI_MspInit(SPI_HandleTypeDef *mSPI)
000000  b510              PUSH     {r4,lr}
;;;398    {
000002  4604              MOV      r4,r0
;;;399      /* Prevent unused argument(s) compilation warning */
;;;400      UNUSED(mSPI);
;;;401    
;;;402      /* NOTE : This function should not be modified, when the callback is needed,
;;;403                the MID_SPI_MspInit should be implemented in the user file
;;;404       */
;;;405      // Get CK_AHB clock frequency.
;;;406      SystemCoreClock = MID_CSC_GetCK_AHBFreq();
000004  f7fffffe          BL       MID_CSC_GetCK_AHBFreq
000008  4901              LDR      r1,|L8.16|
00000a  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;407    }
00000c  bd10              POP      {r4,pc}
;;;408    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      SystemCoreClock

                          AREA ||i.MID_SPI_Receive||, CODE, READONLY, ALIGN=1

                  MID_SPI_Receive PROC
;;;744     */
;;;745    MID_StatusTypeDef MID_SPI_Receive(SPI_HandleTypeDef *mSPI, uint8_t *pData, uint32_t Size, uint32_t Timeout)
000000  b5fe              PUSH     {r1-r7,lr}
;;;746    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
000008  461d              MOV      r5,r3
;;;747        uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;748        MID_StatusTypeDef errorcode = MID_OK;
00000e  9001              STR      r0,[sp,#4]
;;;749    
;;;750    
;;;751    
;;;752        // In this case, 32-bit access is performed on data source, Chcek Data is 32-bit aligned addrees
;;;753        if ((mSPI->Init.DataSize > SPI_DATASIZE_16BIT) || 
000010  68e0              LDR      r0,[r4,#0xc]
000012  2810              CMP      r0,#0x10
000014  d80c              BHI      |L9.48|
;;;754            ((Size > 1U) && (mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT)) ||
000016  2f01              CMP      r7,#1
000018  d905              BLS      |L9.38|
00001a  68e0              LDR      r0,[r4,#0xc]
00001c  2808              CMP      r0,#8
00001e  d902              BLS      |L9.38|
000020  68e0              LDR      r0,[r4,#0xc]
000022  2810              CMP      r0,#0x10
000024  d904              BLS      |L9.48|
                  |L9.38|
;;;755            ((Size > 3U) && (mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)))
000026  2f03              CMP      r7,#3
000028  d903              BLS      |L9.50|
00002a  68e0              LDR      r0,[r4,#0xc]
00002c  2808              CMP      r0,#8
00002e  d800              BHI      |L9.50|
                  |L9.48|
;;;756        {   // Check 32 bit access address aligned
;;;757            assert_param(IS_SPI_32BIT_ALIGNED_ADDRESS(pData));
000030  e008              B        |L9.68|
                  |L9.50|
;;;758        }
;;;759        else
;;;760        {   // Check 16 bit access address aligned
;;;761            if((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) || ((Size > 1U) && (mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)))
000032  68e0              LDR      r0,[r4,#0xc]
000034  2808              CMP      r0,#8
000036  d804              BHI      |L9.66|
000038  2f01              CMP      r7,#1
00003a  d903              BLS      |L9.68|
00003c  68e0              LDR      r0,[r4,#0xc]
00003e  2808              CMP      r0,#8
000040  d800              BHI      |L9.68|
                  |L9.66|
;;;762            {   // Check 16 bit access address aligned
;;;763                assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
000042  bf00              NOP      
                  |L9.68|
;;;764            }
;;;765        }
;;;766        
;;;767        // When SPI is master and stnadard SPI
;;;768        if(((mSPI->Init.Mode & SPI_MDS_MASK) == SPI_MDS_MASK) && (mSPI->Init.DataLine == SPI_STANDARD_SPI))
000044  2110              MOVS     r1,#0x10
000046  6860              LDR      r0,[r4,#4]
000048  4008              ANDS     r0,r0,r1
00004a  2810              CMP      r0,#0x10
00004c  d10a              BNE      |L9.100|
00004e  68a0              LDR      r0,[r4,#8]
000050  2800              CMP      r0,#0
000052  d107              BNE      |L9.100|
;;;769        { 
;;;770            /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;771            return MID_SPI_TransmitReceive(mSPI, pData, pData, Size, Timeout);
000054  463b              MOV      r3,r7
000056  4632              MOV      r2,r6
000058  4631              MOV      r1,r6
00005a  4620              MOV      r0,r4
00005c  9500              STR      r5,[sp,#0]
00005e  f7fffffe          BL       MID_SPI_TransmitReceive
                  |L9.98|
;;;772        }
;;;773    
;;;774        /* Process Locked */
;;;775        __MID_LOCK(mSPI);
;;;776    
;;;777        /* Init tickstart for timeout management */
;;;778        tickstart = MID_GetTick();
;;;779    
;;;780        if(mSPI->State != MID_SPI_STATE_READY)
;;;781        {
;;;782            errorcode = MID_BUSY;
;;;783            goto error;
;;;784        }
;;;785    
;;;786        if((pData == NULL) || (Size == 0U))
;;;787        {
;;;788            errorcode = MID_ERROR;
;;;789            goto error;
;;;790        }
;;;791    
;;;792        /* Set the transaction information */
;;;793        mSPI->State       = MID_SPI_STATE_BUSY_RX;
;;;794        mSPI->ErrorCode   = MID_SPI_ERROR_NONE;
;;;795        mSPI->pRxBuffPtr  = (uint8_t *)pData;
;;;796        mSPI->RxXferSize  = Size;
;;;797        mSPI->RxXferCount = Size;
;;;798    
;;;799        /*Init field not used in handle to zero */
;;;800        mSPI->pTxBuffPtr  = (uint8_t *)NULL;
;;;801        mSPI->TxXferSize  = 0U;
;;;802        mSPI->TxXferCount = 0U;
;;;803        mSPI->RxISR       = NULL;
;;;804        mSPI->TxISR       = NULL;
;;;805    
;;;806        // Check if the SPI is already enabled
;;;807        if( (mSPI->Instance->CR0.W & SPI_CR0_EN_mask_w) == 0)
;;;808        {
;;;809            // Enable SPI
;;;810            __MID_SPI_ENABLE(mSPI);
;;;811        }
;;;812        
;;;813        /* Set the Rx Fifo threshold */
;;;814        // Set RX_TH = 1 bytes
;;;815        *mSPI->RX_TH = 0;
;;;816        
;;;817        // Set RX_TH = 2 bytes, Data size = 9bit ~ 16bit
;;;818        if((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT)) 
;;;819        {
;;;820            *mSPI->RX_TH = 1;
;;;821        }
;;;822    
;;;823        // Set RX_TH = 3 bytes, Data size = 17bit ~ 24bit
;;;824        if((mSPI->Init.DataSize > SPI_DATASIZE_16BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_24BIT)) 
;;;825        {
;;;826            *mSPI->RX_TH = 2;
;;;827        }
;;;828        
;;;829        // Set RX_TH = 4 bytes, Data size = 25bit ~ 32bit
;;;830        if(mSPI->Init.DataSize > SPI_DATASIZE_24BIT)
;;;831        {
;;;832            *mSPI->RX_TH = 3;
;;;833        }
;;;834    
;;;835        // When data size 4 ~ 8 Bit 
;;;836        if(mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)
;;;837        {                         
;;;838            // Transfer loop         
;;;839            while(mSPI->RxXferCount > 0U)
;;;840            {
;;;841                // Check the RXF flag
;;;842                if(__MID_SPI_GET_FLAG(mSPI, SPI_FLAG_RXF))
;;;843                {
;;;844                    // read the received data
;;;845                    (* (uint8_t *)pData) = *(__IO uint8_t *)&mSPI->Instance->RDAT.B[0];
;;;846                    pData += sizeof(uint8_t);
;;;847                    mSPI->RxXferCount--;
;;;848                }
;;;849                else
;;;850                {
;;;851                    // Timeout management
;;;852                    if((Timeout == 0U) || ((Timeout != MID_MAX_DELAY) && ((MID_GetTick() - tickstart) >=  Timeout)))
;;;853                    {
;;;854                        errorcode = MID_TIMEOUT;
;;;855                        goto error;
;;;856                    }
;;;857                }
;;;858            }
;;;859        }
;;;860    
;;;861        // Receive data in 9 ~ 16 Bit mode
;;;862        if((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT)) 
;;;863        {
;;;864            // Transfer loop
;;;865            while(mSPI->RxXferCount > 0U)
;;;866            {
;;;867                // Check the RXNE flag
;;;868                if(__MID_SPI_GET_FLAG(mSPI, SPI_FLAG_RXF))
;;;869                {
;;;870                    *((uint16_t *)pData) = mSPI->Instance->RDAT.H[0];
;;;871                    pData += sizeof(uint16_t);
;;;872                    mSPI->RxXferCount--;
;;;873                }
;;;874                else
;;;875                {
;;;876                    // Timeout management
;;;877                    if((Timeout == 0U) || ((Timeout != MID_MAX_DELAY) && ((MID_GetTick() - tickstart) >=  Timeout)))
;;;878                    {
;;;879                        errorcode = MID_TIMEOUT;
;;;880                        goto error;
;;;881                    }
;;;882                }
;;;883            }
;;;884        }
;;;885        
;;;886        // Receive data in 17 ~ 24 Bit mode
;;;887        if((mSPI->Init.DataSize > SPI_DATASIZE_16BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_24BIT)) 
;;;888        {
;;;889            // Transfer loop
;;;890            while(mSPI->RxXferCount > 0U)
;;;891            {
;;;892                // Check the RXNE flag
;;;893                if(__MID_SPI_GET_FLAG(mSPI, SPI_FLAG_RXF))
;;;894                {
;;;895                    *((uint32_t *)pData) = mSPI->Instance->RDAT.W;
;;;896                    pData += sizeof(uint32_t);
;;;897                    mSPI->RxXferCount--;
;;;898                }
;;;899                else
;;;900                {
;;;901                    // Timeout management
;;;902                    if((Timeout == 0U) || ((Timeout != MID_MAX_DELAY) && ((MID_GetTick() - tickstart) >=  Timeout)))
;;;903                    {
;;;904                        errorcode = MID_TIMEOUT;
;;;905                        goto error;
;;;906                    }
;;;907                }
;;;908            }
;;;909        }
;;;910        
;;;911        // Receive data in 25 ~ 32 Bit mode
;;;912        if(mSPI->Init.DataSize > SPI_DATASIZE_24BIT)
;;;913        {
;;;914            // Transfer loop
;;;915            while(mSPI->RxXferCount > 0U)
;;;916            {
;;;917                // Check the RXNE flag
;;;918                if(__MID_SPI_GET_FLAG(mSPI, SPI_FLAG_RXF))
;;;919                {
;;;920                    *((uint32_t *)pData) = mSPI->Instance->RDAT.W;
;;;921                    pData += sizeof(uint32_t);
;;;922                    mSPI->RxXferCount--;
;;;923                }
;;;924                else
;;;925                {
;;;926                    // Timeout management
;;;927                    if((Timeout == 0U) || ((Timeout != MID_MAX_DELAY) && ((MID_GetTick() - tickstart) >=  Timeout)))
;;;928                    {
;;;929                        errorcode = MID_TIMEOUT;
;;;930                        goto error;
;;;931                    }
;;;932                }
;;;933            }
;;;934        }
;;;935        
;;;936        /* Check the end of the transaction */
;;;937        if(SPI_EndRxTransaction(mSPI, Timeout, tickstart) != MID_OK)
;;;938        {
;;;939            mSPI->ErrorCode = MID_SPI_ERROR_FLAG;
;;;940        }
;;;941    
;;;942        // When SPI/URTx moudle error happened
;;;943        if(mSPI->ErrorCode != MID_SPI_ERROR_NONE)
;;;944        {
;;;945            errorcode = MID_ERROR;
;;;946        }
;;;947    
;;;948    error :
;;;949        mSPI->State = MID_SPI_STATE_READY;
;;;950        __MID_UNLOCK(mSPI);
;;;951        return errorcode;
;;;952    }
000062  bdfe              POP      {r1-r7,pc}
                  |L9.100|
000064  bf00              NOP                            ;775
000066  2088              MOVS     r0,#0x88              ;775
000068  5d00              LDRB     r0,[r0,r4]            ;775
00006a  2801              CMP      r0,#1                 ;775
00006c  d101              BNE      |L9.114|
00006e  2002              MOVS     r0,#2                 ;775
000070  e7f7              B        |L9.98|
                  |L9.114|
000072  2101              MOVS     r1,#1                 ;775
000074  2088              MOVS     r0,#0x88              ;775
000076  5501              STRB     r1,[r0,r4]            ;775
000078  bf00              NOP                            ;775
00007a  f7fffffe          BL       MID_GetTick
00007e  9002              STR      r0,[sp,#8]            ;778
000080  2089              MOVS     r0,#0x89              ;780
000082  5d00              LDRB     r0,[r0,r4]            ;780
000084  2801              CMP      r0,#1                 ;780
000086  d002              BEQ      |L9.142|
000088  2002              MOVS     r0,#2                 ;782
00008a  9001              STR      r0,[sp,#4]            ;782
00008c  e0e0              B        |L9.592|
                  |L9.142|
00008e  2e00              CMP      r6,#0                 ;786
000090  d001              BEQ      |L9.150|
000092  2f00              CMP      r7,#0                 ;786
000094  d102              BNE      |L9.156|
                  |L9.150|
000096  2001              MOVS     r0,#1                 ;788
000098  9001              STR      r0,[sp,#4]            ;788
00009a  e0d9              B        |L9.592|
                  |L9.156|
00009c  2104              MOVS     r1,#4                 ;793
00009e  2089              MOVS     r0,#0x89              ;793
0000a0  5501              STRB     r1,[r0,r4]            ;793
0000a2  2100              MOVS     r1,#0                 ;794
0000a4  208c              MOVS     r0,#0x8c              ;794
0000a6  5101              STR      r1,[r0,r4]            ;794
0000a8  6426              STR      r6,[r4,#0x40]         ;795
0000aa  6467              STR      r7,[r4,#0x44]         ;796
0000ac  64a7              STR      r7,[r4,#0x48]         ;797
0000ae  2000              MOVS     r0,#0                 ;800
0000b0  6360              STR      r0,[r4,#0x34]         ;800
0000b2  63a0              STR      r0,[r4,#0x38]         ;801
0000b4  63e0              STR      r0,[r4,#0x3c]         ;802
0000b6  6520              STR      r0,[r4,#0x50]         ;803
0000b8  6560              STR      r0,[r4,#0x54]         ;804
0000ba  6820              LDR      r0,[r4,#0]            ;807
0000bc  6900              LDR      r0,[r0,#0x10]         ;807
0000be  07c0              LSLS     r0,r0,#31             ;807
0000c0  0fc0              LSRS     r0,r0,#31             ;807
0000c2  2800              CMP      r0,#0                 ;807
0000c4  d105              BNE      |L9.210|
0000c6  6820              LDR      r0,[r4,#0]            ;810
0000c8  6900              LDR      r0,[r0,#0x10]         ;810
0000ca  2101              MOVS     r1,#1                 ;810
0000cc  4308              ORRS     r0,r0,r1              ;810
0000ce  6821              LDR      r1,[r4,#0]            ;810
0000d0  6108              STR      r0,[r1,#0x10]         ;810
                  |L9.210|
0000d2  2000              MOVS     r0,#0                 ;815
0000d4  6fa1              LDR      r1,[r4,#0x78]         ;815
0000d6  7008              STRB     r0,[r1,#0]            ;815
0000d8  68e0              LDR      r0,[r4,#0xc]          ;818
0000da  2808              CMP      r0,#8                 ;818
0000dc  d905              BLS      |L9.234|
0000de  68e0              LDR      r0,[r4,#0xc]          ;818
0000e0  2810              CMP      r0,#0x10              ;818
0000e2  d802              BHI      |L9.234|
0000e4  2001              MOVS     r0,#1                 ;820
0000e6  6fa1              LDR      r1,[r4,#0x78]         ;820
0000e8  7008              STRB     r0,[r1,#0]            ;820
                  |L9.234|
0000ea  68e0              LDR      r0,[r4,#0xc]          ;824
0000ec  2810              CMP      r0,#0x10              ;824
0000ee  d905              BLS      |L9.252|
0000f0  68e0              LDR      r0,[r4,#0xc]          ;824
0000f2  2818              CMP      r0,#0x18              ;824
0000f4  d802              BHI      |L9.252|
0000f6  2002              MOVS     r0,#2                 ;826
0000f8  6fa1              LDR      r1,[r4,#0x78]         ;826
0000fa  7008              STRB     r0,[r1,#0]            ;826
                  |L9.252|
0000fc  68e0              LDR      r0,[r4,#0xc]          ;830
0000fe  2818              CMP      r0,#0x18              ;830
000100  d902              BLS      |L9.264|
000102  2003              MOVS     r0,#3                 ;832
000104  6fa1              LDR      r1,[r4,#0x78]         ;832
000106  7008              STRB     r0,[r1,#0]            ;832
                  |L9.264|
000108  68e0              LDR      r0,[r4,#0xc]          ;836
00010a  2808              CMP      r0,#8                 ;836
00010c  d820              BHI      |L9.336|
00010e  e01c              B        |L9.330|
                  |L9.272|
000110  6820              LDR      r0,[r4,#0]            ;842
000112  6800              LDR      r0,[r0,#0]            ;842
000114  2140              MOVS     r1,#0x40              ;842
000116  4008              ANDS     r0,r0,r1              ;842
000118  2840              CMP      r0,#0x40              ;842
00011a  d108              BNE      |L9.302|
00011c  6820              LDR      r0,[r4,#0]            ;845
00011e  3020              ADDS     r0,r0,#0x20           ;845
000120  7c00              LDRB     r0,[r0,#0x10]         ;845
000122  7030              STRB     r0,[r6,#0]            ;845
000124  1c76              ADDS     r6,r6,#1              ;846
000126  6ca0              LDR      r0,[r4,#0x48]         ;847
000128  1e40              SUBS     r0,r0,#1              ;847
00012a  64a0              STR      r0,[r4,#0x48]         ;847
00012c  e00d              B        |L9.330|
                  |L9.302|
00012e  2d00              CMP      r5,#0                 ;852
000130  d008              BEQ      |L9.324|
000132  1c68              ADDS     r0,r5,#1              ;852
000134  2800              CMP      r0,#0                 ;852
000136  d008              BEQ      |L9.330|
000138  f7fffffe          BL       MID_GetTick
00013c  9902              LDR      r1,[sp,#8]            ;852
00013e  1a40              SUBS     r0,r0,r1              ;852
000140  42a8              CMP      r0,r5                 ;852
000142  d302              BCC      |L9.330|
                  |L9.324|
000144  2003              MOVS     r0,#3                 ;854
000146  9001              STR      r0,[sp,#4]            ;854
000148  e082              B        |L9.592|
                  |L9.330|
00014a  6ca0              LDR      r0,[r4,#0x48]         ;839
00014c  2800              CMP      r0,#0                 ;839
00014e  d1df              BNE      |L9.272|
                  |L9.336|
000150  68e0              LDR      r0,[r4,#0xc]          ;862
000152  2808              CMP      r0,#8                 ;862
000154  d922              BLS      |L9.412|
000156  68e0              LDR      r0,[r4,#0xc]          ;862
000158  2810              CMP      r0,#0x10              ;862
00015a  d81f              BHI      |L9.412|
00015c  e01b              B        |L9.406|
                  |L9.350|
00015e  6820              LDR      r0,[r4,#0]            ;868
000160  6800              LDR      r0,[r0,#0]            ;868
000162  2140              MOVS     r1,#0x40              ;868
000164  4008              ANDS     r0,r0,r1              ;868
000166  2840              CMP      r0,#0x40              ;868
000168  d107              BNE      |L9.378|
00016a  6820              LDR      r0,[r4,#0]            ;870
00016c  8e00              LDRH     r0,[r0,#0x30]         ;870
00016e  8030              STRH     r0,[r6,#0]            ;870
000170  1cb6              ADDS     r6,r6,#2              ;871
000172  6ca0              LDR      r0,[r4,#0x48]         ;872
000174  1e40              SUBS     r0,r0,#1              ;872
000176  64a0              STR      r0,[r4,#0x48]         ;872
000178  e00d              B        |L9.406|
                  |L9.378|
00017a  2d00              CMP      r5,#0                 ;877
00017c  d008              BEQ      |L9.400|
00017e  1c68              ADDS     r0,r5,#1              ;877
000180  2800              CMP      r0,#0                 ;877
000182  d008              BEQ      |L9.406|
000184  f7fffffe          BL       MID_GetTick
000188  9902              LDR      r1,[sp,#8]            ;877
00018a  1a40              SUBS     r0,r0,r1              ;877
00018c  42a8              CMP      r0,r5                 ;877
00018e  d302              BCC      |L9.406|
                  |L9.400|
000190  2003              MOVS     r0,#3                 ;879
000192  9001              STR      r0,[sp,#4]            ;879
000194  e05c              B        |L9.592|
                  |L9.406|
000196  6ca0              LDR      r0,[r4,#0x48]         ;865
000198  2800              CMP      r0,#0                 ;865
00019a  d1e0              BNE      |L9.350|
                  |L9.412|
00019c  68e0              LDR      r0,[r4,#0xc]          ;887
00019e  2810              CMP      r0,#0x10              ;887
0001a0  d922              BLS      |L9.488|
0001a2  68e0              LDR      r0,[r4,#0xc]          ;887
0001a4  2818              CMP      r0,#0x18              ;887
0001a6  d81f              BHI      |L9.488|
0001a8  e01b              B        |L9.482|
                  |L9.426|
0001aa  6820              LDR      r0,[r4,#0]            ;893
0001ac  6800              LDR      r0,[r0,#0]            ;893
0001ae  2140              MOVS     r1,#0x40              ;893
0001b0  4008              ANDS     r0,r0,r1              ;893
0001b2  2840              CMP      r0,#0x40              ;893
0001b4  d107              BNE      |L9.454|
0001b6  6820              LDR      r0,[r4,#0]            ;895
0001b8  6b00              LDR      r0,[r0,#0x30]         ;895
0001ba  6030              STR      r0,[r6,#0]            ;895
0001bc  1d36              ADDS     r6,r6,#4              ;896
0001be  6ca0              LDR      r0,[r4,#0x48]         ;897
0001c0  1e40              SUBS     r0,r0,#1              ;897
0001c2  64a0              STR      r0,[r4,#0x48]         ;897
0001c4  e00d              B        |L9.482|
                  |L9.454|
0001c6  2d00              CMP      r5,#0                 ;902
0001c8  d008              BEQ      |L9.476|
0001ca  1c68              ADDS     r0,r5,#1              ;902
0001cc  2800              CMP      r0,#0                 ;902
0001ce  d008              BEQ      |L9.482|
0001d0  f7fffffe          BL       MID_GetTick
0001d4  9902              LDR      r1,[sp,#8]            ;902
0001d6  1a40              SUBS     r0,r0,r1              ;902
0001d8  42a8              CMP      r0,r5                 ;902
0001da  d302              BCC      |L9.482|
                  |L9.476|
0001dc  2003              MOVS     r0,#3                 ;904
0001de  9001              STR      r0,[sp,#4]            ;904
0001e0  e036              B        |L9.592|
                  |L9.482|
0001e2  6ca0              LDR      r0,[r4,#0x48]         ;890
0001e4  2800              CMP      r0,#0                 ;890
0001e6  d1e0              BNE      |L9.426|
                  |L9.488|
0001e8  68e0              LDR      r0,[r4,#0xc]          ;912
0001ea  2818              CMP      r0,#0x18              ;912
0001ec  d91f              BLS      |L9.558|
0001ee  e01b              B        |L9.552|
                  |L9.496|
0001f0  6820              LDR      r0,[r4,#0]            ;918
0001f2  6800              LDR      r0,[r0,#0]            ;918
0001f4  2140              MOVS     r1,#0x40              ;918
0001f6  4008              ANDS     r0,r0,r1              ;918
0001f8  2840              CMP      r0,#0x40              ;918
0001fa  d107              BNE      |L9.524|
0001fc  6820              LDR      r0,[r4,#0]            ;920
0001fe  6b00              LDR      r0,[r0,#0x30]         ;920
000200  6030              STR      r0,[r6,#0]            ;920
000202  1d36              ADDS     r6,r6,#4              ;921
000204  6ca0              LDR      r0,[r4,#0x48]         ;922
000206  1e40              SUBS     r0,r0,#1              ;922
000208  64a0              STR      r0,[r4,#0x48]         ;922
00020a  e00d              B        |L9.552|
                  |L9.524|
00020c  2d00              CMP      r5,#0                 ;927
00020e  d008              BEQ      |L9.546|
000210  1c68              ADDS     r0,r5,#1              ;927
000212  2800              CMP      r0,#0                 ;927
000214  d008              BEQ      |L9.552|
000216  f7fffffe          BL       MID_GetTick
00021a  9902              LDR      r1,[sp,#8]            ;927
00021c  1a40              SUBS     r0,r0,r1              ;927
00021e  42a8              CMP      r0,r5                 ;927
000220  d302              BCC      |L9.552|
                  |L9.546|
000222  2003              MOVS     r0,#3                 ;929
000224  9001              STR      r0,[sp,#4]            ;929
000226  e013              B        |L9.592|
                  |L9.552|
000228  6ca0              LDR      r0,[r4,#0x48]         ;915
00022a  2800              CMP      r0,#0                 ;915
00022c  d1e0              BNE      |L9.496|
                  |L9.558|
00022e  4629              MOV      r1,r5                 ;937
000230  4620              MOV      r0,r4                 ;937
000232  9a02              LDR      r2,[sp,#8]            ;937
000234  f7fffffe          BL       SPI_EndRxTransaction
000238  2800              CMP      r0,#0                 ;937
00023a  d002              BEQ      |L9.578|
00023c  2120              MOVS     r1,#0x20              ;939
00023e  208c              MOVS     r0,#0x8c              ;939
000240  5101              STR      r1,[r0,r4]            ;939
                  |L9.578|
000242  208c              MOVS     r0,#0x8c              ;943
000244  5900              LDR      r0,[r0,r4]            ;943
000246  2800              CMP      r0,#0                 ;943
000248  d001              BEQ      |L9.590|
00024a  2001              MOVS     r0,#1                 ;945
00024c  9001              STR      r0,[sp,#4]            ;945
                  |L9.590|
00024e  bf00              NOP                            ;948
                  |L9.592|
000250  2101              MOVS     r1,#1                 ;949
000252  2089              MOVS     r0,#0x89              ;949
000254  5501              STRB     r1,[r0,r4]            ;949
000256  bf00              NOP                            ;950
000258  2100              MOVS     r1,#0                 ;950
00025a  2088              MOVS     r0,#0x88              ;950
00025c  5501              STRB     r1,[r0,r4]            ;950
00025e  bf00              NOP                            ;950
000260  9801              LDR      r0,[sp,#4]            ;951
000262  e6fe              B        |L9.98|
;;;953    
                          ENDP


                          AREA ||i.MID_SPI_Receive_DMA||, CODE, READONLY, ALIGN=2

                  MID_SPI_Receive_DMA PROC
;;;1848    */
;;;1849   MID_StatusTypeDef MID_SPI_Receive_DMA(SPI_HandleTypeDef *mSPI, uint8_t *pData, uint32_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1850   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1851       // When DMA is ready
;;;1852       if(mSPI->State == MID_SPI_STATE_READY)
000008  2089              MOVS     r0,#0x89
00000a  5d00              LDRB     r0,[r0,r4]
00000c  2801              CMP      r0,#1
00000e  d14d              BNE      |L10.172|
;;;1853       {
;;;1854           if((pData == NULL) || (Size == 0U))
000010  2e00              CMP      r6,#0
000012  d001              BEQ      |L10.24|
000014  2d00              CMP      r5,#0
000016  d101              BNE      |L10.28|
                  |L10.24|
;;;1855           {
;;;1856               return(MID_ERROR);
000018  2001              MOVS     r0,#1
                  |L10.26|
;;;1857           }
;;;1858           
;;;1859           //Process Locked 
;;;1860           __MID_LOCK(mSPI);
;;;1861           
;;;1862           // Change DMA peripheral state
;;;1863           mSPI->pRxBuffPtr = pData;
;;;1864           mSPI->RxXferSize = Size;
;;;1865           mSPI->RxXferCount = Size;
;;;1866           
;;;1867           mSPI->ErrorCode = MID_SPI_ERROR_NONE;
;;;1868           mSPI->State = MID_SPI_STATE_BUSY_RX;
;;;1869           
;;;1870           //Set the mSPI DMA transfer complete callback.
;;;1871           mSPI->mDMARX->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1872           
;;;1873           //Set the UART DMA Half transfer complete callback
;;;1874           mSPI->mDMARX->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1875           
;;;1876           //Set the DMA error callback 
;;;1877           mSPI->mDMARX->XferErrorCallback = SPI_DMAError;
;;;1878           
;;;1879           //Set the DMA abort callback
;;;1880           mSPI->mDMARX->XferAbortCallback = NULL;
;;;1881                                                                               
;;;1882           /* Configure the source, destination address and the data length */
;;;1883           MID_DMA_Start_IT(mSPI->mDMARX, (uint32_t)&mSPI->Instance->RDAT.W, (uint32_t) mSPI->pRxBuffPtr, Size);
;;;1884           
;;;1885           if(mSPI->REG_TYPE == MID_SPI_SPI)
;;;1886           {
;;;1887               mSPI->Instance->CR0.B[3] |= SPI_CR0_DMA_RXEN_mask_b3;
;;;1888           }
;;;1889           else
;;;1890           {
;;;1891   //            mSPI->Instance->CR2.B[0] &= (~URT_CR2_RX_EN_mask_b0);
;;;1892   //            mSPI->Instance->CR0.B[3] |= SPI_CR0_DMA_RXEN_mask_b3;
;;;1893   //            mSPI->Instance->CR2.B[0] |= URT_CR2_RX_EN_mask_b0;
;;;1894               mSPI->Instance->CR2.B[0] &=(~(URT_CR2_RX_EN_mask_b0 | URT_CR2_TX_EN_mask_b0));
;;;1895               mSPI->Instance->CR0.B[3] |= SPI_CR0_DMA_RXEN_mask_b3;
;;;1896               mSPI->Instance->CR2.B[0] |= (URT_CR2_RX_EN_mask_b0 | URT_CR2_TX_EN_mask_b0);
;;;1897           }
;;;1898           
;;;1899           return(MID_BUSY);
;;;1900       }
;;;1901       else
;;;1902       {
;;;1903           /* Remain BUSY */
;;;1904           return(MID_BUSY);
;;;1905       }
;;;1906   }
00001a  bd70              POP      {r4-r6,pc}
                  |L10.28|
00001c  bf00              NOP                            ;1860
00001e  2088              MOVS     r0,#0x88              ;1860
000020  5d00              LDRB     r0,[r0,r4]            ;1860
000022  2801              CMP      r0,#1                 ;1860
000024  d101              BNE      |L10.42|
000026  2002              MOVS     r0,#2                 ;1860
000028  e7f7              B        |L10.26|
                  |L10.42|
00002a  2101              MOVS     r1,#1                 ;1860
00002c  2088              MOVS     r0,#0x88              ;1860
00002e  5501              STRB     r1,[r0,r4]            ;1860
000030  bf00              NOP                            ;1860
000032  6426              STR      r6,[r4,#0x40]         ;1863
000034  6465              STR      r5,[r4,#0x44]         ;1864
000036  64a5              STR      r5,[r4,#0x48]         ;1865
000038  2100              MOVS     r1,#0                 ;1867
00003a  208c              MOVS     r0,#0x8c              ;1867
00003c  5101              STR      r1,[r0,r4]            ;1867
00003e  2104              MOVS     r1,#4                 ;1868
000040  2089              MOVS     r0,#0x89              ;1868
000042  5501              STRB     r1,[r0,r4]            ;1868
000044  481a              LDR      r0,|L10.176|
000046  6de1              LDR      r1,[r4,#0x5c]         ;1871
000048  62c8              STR      r0,[r1,#0x2c]         ;1871
00004a  481a              LDR      r0,|L10.180|
00004c  6de1              LDR      r1,[r4,#0x5c]         ;1874
00004e  6308              STR      r0,[r1,#0x30]         ;1874
000050  4819              LDR      r0,|L10.184|
000052  6de1              LDR      r1,[r4,#0x5c]         ;1877
000054  6348              STR      r0,[r1,#0x34]         ;1877
000056  2000              MOVS     r0,#0                 ;1880
000058  6de1              LDR      r1,[r4,#0x5c]         ;1880
00005a  6388              STR      r0,[r1,#0x38]         ;1880
00005c  6823              LDR      r3,[r4,#0]            ;1883
00005e  4619              MOV      r1,r3                 ;1883
000060  3130              ADDS     r1,r1,#0x30           ;1883
000062  462b              MOV      r3,r5                 ;1883
000064  6c22              LDR      r2,[r4,#0x40]         ;1883
000066  6de0              LDR      r0,[r4,#0x5c]         ;1883
000068  f7fffffe          BL       MID_DMA_Start_IT
00006c  2153              MOVS     r1,#0x53              ;1885
00006e  0609              LSLS     r1,r1,#24             ;1885
000070  6b20              LDR      r0,[r4,#0x30]         ;1885
000072  4288              CMP      r0,r1                 ;1885
000074  d106              BNE      |L10.132|
000076  6820              LDR      r0,[r4,#0]            ;1887
000078  7cc0              LDRB     r0,[r0,#0x13]         ;1887
00007a  2140              MOVS     r1,#0x40              ;1887
00007c  4308              ORRS     r0,r0,r1              ;1887
00007e  6821              LDR      r1,[r4,#0]            ;1887
000080  74c8              STRB     r0,[r1,#0x13]         ;1887
000082  e011              B        |L10.168|
                  |L10.132|
000084  6820              LDR      r0,[r4,#0]            ;1894
000086  7e00              LDRB     r0,[r0,#0x18]         ;1894
000088  210c              MOVS     r1,#0xc               ;1894
00008a  4388              BICS     r0,r0,r1              ;1894
00008c  6821              LDR      r1,[r4,#0]            ;1894
00008e  7608              STRB     r0,[r1,#0x18]         ;1894
000090  6820              LDR      r0,[r4,#0]            ;1895
000092  7cc0              LDRB     r0,[r0,#0x13]         ;1895
000094  2140              MOVS     r1,#0x40              ;1895
000096  4308              ORRS     r0,r0,r1              ;1895
000098  6821              LDR      r1,[r4,#0]            ;1895
00009a  74c8              STRB     r0,[r1,#0x13]         ;1895
00009c  6820              LDR      r0,[r4,#0]            ;1896
00009e  7e00              LDRB     r0,[r0,#0x18]         ;1896
0000a0  210c              MOVS     r1,#0xc               ;1896
0000a2  4308              ORRS     r0,r0,r1              ;1896
0000a4  6821              LDR      r1,[r4,#0]            ;1896
0000a6  7608              STRB     r0,[r1,#0x18]         ;1896
                  |L10.168|
0000a8  2002              MOVS     r0,#2                 ;1899
0000aa  e7b6              B        |L10.26|
                  |L10.172|
0000ac  2002              MOVS     r0,#2                 ;1904
0000ae  e7b4              B        |L10.26|
;;;1907   
                          ENDP

                  |L10.176|
                          DCD      SPI_DMAReceiveCplt
                  |L10.180|
                          DCD      SPI_DMAHalfReceiveCplt
                  |L10.184|
                          DCD      SPI_DMAError

                          AREA ||i.MID_SPI_Receive_IT||, CODE, READONLY, ALIGN=2

                  MID_SPI_Receive_IT PROC
;;;1474    */
;;;1475   MID_StatusTypeDef MID_SPI_Receive_IT(SPI_HandleTypeDef *mSPI, uint8_t *pData, uint32_t Size)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1476   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1477       MID_StatusTypeDef errorcode = MID_OK;
000008  2700              MOVS     r7,#0
;;;1478   
;;;1479   
;;;1480   
;;;1481       // In this case, 32-bit access is performed on data source, Chcek Data is 32-bit aligned addrees
;;;1482       if ((mSPI->Init.DataSize > SPI_DATASIZE_16BIT) || 
00000a  68e0              LDR      r0,[r4,#0xc]
00000c  2810              CMP      r0,#0x10
00000e  d80c              BHI      |L11.42|
;;;1483           ((Size > 1U) && (mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT)) ||
000010  2d01              CMP      r5,#1
000012  d905              BLS      |L11.32|
000014  68e0              LDR      r0,[r4,#0xc]
000016  2808              CMP      r0,#8
000018  d902              BLS      |L11.32|
00001a  68e0              LDR      r0,[r4,#0xc]
00001c  2810              CMP      r0,#0x10
00001e  d904              BLS      |L11.42|
                  |L11.32|
;;;1484           ((Size > 3U) && (mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)))
000020  2d03              CMP      r5,#3
000022  d903              BLS      |L11.44|
000024  68e0              LDR      r0,[r4,#0xc]
000026  2808              CMP      r0,#8
000028  d800              BHI      |L11.44|
                  |L11.42|
;;;1485       {   // Check 32 bit access address aligned
;;;1486           assert_param(IS_SPI_32BIT_ALIGNED_ADDRESS(pRxData));
00002a  e008              B        |L11.62|
                  |L11.44|
;;;1487       }
;;;1488       else
;;;1489       {   // Check 16 bit access address aligned
;;;1490           if((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) || ((Size > 1U) && (mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)))
00002c  68e0              LDR      r0,[r4,#0xc]
00002e  2808              CMP      r0,#8
000030  d804              BHI      |L11.60|
000032  2d01              CMP      r5,#1
000034  d903              BLS      |L11.62|
000036  68e0              LDR      r0,[r4,#0xc]
000038  2808              CMP      r0,#8
00003a  d800              BHI      |L11.62|
                  |L11.60|
;;;1491           {   // Check 16 bit access address aligned
;;;1492               assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pRxData));
00003c  bf00              NOP      
                  |L11.62|
;;;1493           }
;;;1494       }
;;;1495   
;;;1496       // When data line is standard SPI and master 
;;;1497       if ((mSPI->Init.DataLine == SPI_STANDARD_SPI) && ((mSPI->Init.Mode & SPI_MDS_MASK) != 0))
00003e  68a0              LDR      r0,[r4,#8]
000040  2800              CMP      r0,#0
000042  d10e              BNE      |L11.98|
000044  2110              MOVS     r1,#0x10
000046  6860              LDR      r0,[r4,#4]
000048  4008              ANDS     r0,r0,r1
00004a  2800              CMP      r0,#0
00004c  d009              BEQ      |L11.98|
;;;1498       {
;;;1499           mSPI->State = MID_SPI_STATE_BUSY_RX;
00004e  2104              MOVS     r1,#4
000050  2089              MOVS     r0,#0x89
000052  5501              STRB     r1,[r0,r4]
;;;1500           /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1501           return MID_SPI_TransmitReceive_IT(mSPI, pData, pData, Size);
000054  462b              MOV      r3,r5
000056  4632              MOV      r2,r6
000058  4631              MOV      r1,r6
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       MID_SPI_TransmitReceive_IT
                  |L11.96|
;;;1502       }
;;;1503   
;;;1504       /* Process Locked */
;;;1505       __MID_LOCK(mSPI);
;;;1506   
;;;1507       if (mSPI->State != MID_SPI_STATE_READY)
;;;1508       {
;;;1509           errorcode = MID_BUSY;
;;;1510           goto error;
;;;1511       }
;;;1512   
;;;1513       if ((pData == NULL) || (Size == 0U))
;;;1514       {
;;;1515           errorcode = MID_ERROR;
;;;1516           goto error;
;;;1517       }
;;;1518   
;;;1519       /* Set the transaction information */
;;;1520       mSPI->State       = MID_SPI_STATE_BUSY_RX;
;;;1521       mSPI->ErrorCode   = MID_SPI_ERROR_NONE;
;;;1522       mSPI->pRxBuffPtr  = (uint8_t *)pData;
;;;1523       mSPI->RxXferSize  = Size;
;;;1524       mSPI->RxXferCount = Size;
;;;1525   
;;;1526       /* Init field not used in handle to zero */
;;;1527       mSPI->pTxBuffPtr  = (uint8_t *)NULL;
;;;1528       mSPI->TxXferSize  = 0U;
;;;1529       mSPI->TxXferCount = 0U;
;;;1530       mSPI->TxISR       = NULL;
;;;1531   
;;;1532       /* Note : The SPI must be enabled after unlocking current process
;;;1533                 to avoid the risk of SPI interrupt handle execution before current
;;;1534                 process unlock */
;;;1535   
;;;1536       /* Check if the SPI is already enabled */
;;;1537       if((mSPI->Instance->CR0.W & SPI_CR0_EN_mask_w)==0)
;;;1538       {
;;;1539           /* Enable SPI peripheral */
;;;1540           __MID_SPI_ENABLE(mSPI);
;;;1541       }
;;;1542       
;;;1543       /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
;;;1544       // For slave mode RX_TH setting
;;;1545       {
;;;1546       // Set Data size <= 8bit
;;;1547       if(mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)
;;;1548       {
;;;1549           // Set IT RX 
;;;1550           mSPI->RxISR = SPI_RxISR_8BIT;
;;;1551           if(Size >= 4) 
;;;1552               *mSPI->RX_TH = 3;
;;;1553           else 
;;;1554               *mSPI->RX_TH = Size - 1;
;;;1555       }
;;;1556   
;;;1557       // Set Data size = 9bit ~ 16bit
;;;1558       else if(mSPI->Init.DataSize <= SPI_DATASIZE_16BIT)
;;;1559       {
;;;1560           // Set IT RX
;;;1561           mSPI->RxISR = SPI_RxISR_16BIT;
;;;1562           if(Size >= 2)
;;;1563               *mSPI->RX_TH = 3;
;;;1564           else
;;;1565               *mSPI->RX_TH = 1;
;;;1566       }
;;;1567   
;;;1568       // Set Data size = 17bit ~ 24bit 
;;;1569       else if(mSPI->Init.DataSize <= SPI_DATASIZE_24BIT) 
;;;1570       {
;;;1571           *mSPI->RX_TH = 2;
;;;1572           mSPI->RxISR = SPI_RxISR_32BIT;
;;;1573       }
;;;1574   
;;;1575       // Set Data size = 25bit ~ 32bit 
;;;1576       else if(mSPI->Init.DataSize > SPI_DATASIZE_24BIT) 
;;;1577       {
;;;1578           *mSPI->RX_TH = 3;
;;;1579           mSPI->RxISR = SPI_RxISR_32BIT;
;;;1580       }
;;;1581       }
;;;1582   
;;;1583       /* Enable TXE and ERR interrupt */
;;;1584       // When module is madter mode
;;;1585       if((mSPI->Init.Mode & SPI_MDS_MASK)!=0)
;;;1586           __MID_SPI_ENABLE_IT(mSPI, (SPI_IT_RXF | mSPI->SPI_FLAG_ERROR | SPI_IT_IEA));
;;;1587       // When module is slave mode
;;;1588       else 
;;;1589           __MID_SPI_ENABLE_IT(mSPI, (SPI_IT_RXF | SPI_IT_MODF | SPI_IT_WEF | mSPI->SPI_FLAG_ROVRF | SPI_IT_IEA));
;;;1590   
;;;1591       SPI0->CR1.MBIT.RDAT_CLR = 1;
;;;1592       SPI0->CR1.MBIT.TDAT_CLR = 1;
;;;1593   
;;;1594   error :
;;;1595       /* Process Unlocked */
;;;1596       __MID_UNLOCK(mSPI);
;;;1597       return errorcode;
;;;1598   }
000060  bdf0              POP      {r4-r7,pc}
                  |L11.98|
000062  bf00              NOP                            ;1505
000064  2088              MOVS     r0,#0x88              ;1505
000066  5d00              LDRB     r0,[r0,r4]            ;1505
000068  2801              CMP      r0,#1                 ;1505
00006a  d101              BNE      |L11.112|
00006c  2002              MOVS     r0,#2                 ;1505
00006e  e7f7              B        |L11.96|
                  |L11.112|
000070  2101              MOVS     r1,#1                 ;1505
000072  2088              MOVS     r0,#0x88              ;1505
000074  5501              STRB     r1,[r0,r4]            ;1505
000076  bf00              NOP                            ;1505
000078  2089              MOVS     r0,#0x89              ;1507
00007a  5d00              LDRB     r0,[r0,r4]            ;1507
00007c  2801              CMP      r0,#1                 ;1507
00007e  d001              BEQ      |L11.132|
000080  2702              MOVS     r7,#2                 ;1509
000082  e076              B        |L11.370|
                  |L11.132|
000084  2e00              CMP      r6,#0                 ;1513
000086  d001              BEQ      |L11.140|
000088  2d00              CMP      r5,#0                 ;1513
00008a  d101              BNE      |L11.144|
                  |L11.140|
00008c  2701              MOVS     r7,#1                 ;1515
00008e  e070              B        |L11.370|
                  |L11.144|
000090  2104              MOVS     r1,#4                 ;1520
000092  2089              MOVS     r0,#0x89              ;1520
000094  5501              STRB     r1,[r0,r4]            ;1520
000096  2100              MOVS     r1,#0                 ;1521
000098  208c              MOVS     r0,#0x8c              ;1521
00009a  5101              STR      r1,[r0,r4]            ;1521
00009c  6426              STR      r6,[r4,#0x40]         ;1522
00009e  6465              STR      r5,[r4,#0x44]         ;1523
0000a0  64a5              STR      r5,[r4,#0x48]         ;1524
0000a2  2000              MOVS     r0,#0                 ;1527
0000a4  6360              STR      r0,[r4,#0x34]         ;1527
0000a6  63a0              STR      r0,[r4,#0x38]         ;1528
0000a8  63e0              STR      r0,[r4,#0x3c]         ;1529
0000aa  6560              STR      r0,[r4,#0x54]         ;1530
0000ac  6820              LDR      r0,[r4,#0]            ;1537
0000ae  6900              LDR      r0,[r0,#0x10]         ;1537
0000b0  07c0              LSLS     r0,r0,#31             ;1537
0000b2  0fc0              LSRS     r0,r0,#31             ;1537
0000b4  2800              CMP      r0,#0                 ;1537
0000b6  d105              BNE      |L11.196|
0000b8  6820              LDR      r0,[r4,#0]            ;1540
0000ba  6900              LDR      r0,[r0,#0x10]         ;1540
0000bc  2101              MOVS     r1,#1                 ;1540
0000be  4308              ORRS     r0,r0,r1              ;1540
0000c0  6821              LDR      r1,[r4,#0]            ;1540
0000c2  6108              STR      r0,[r1,#0x10]         ;1540
                  |L11.196|
0000c4  68e0              LDR      r0,[r4,#0xc]          ;1547
0000c6  2808              CMP      r0,#8                 ;1547
0000c8  d80b              BHI      |L11.226|
0000ca  482d              LDR      r0,|L11.384|
0000cc  6520              STR      r0,[r4,#0x50]         ;1550
0000ce  2d04              CMP      r5,#4                 ;1551
0000d0  d303              BCC      |L11.218|
0000d2  2003              MOVS     r0,#3                 ;1552
0000d4  6fa1              LDR      r1,[r4,#0x78]         ;1552
0000d6  7008              STRB     r0,[r1,#0]            ;1552
0000d8  e023              B        |L11.290|
                  |L11.218|
0000da  1e68              SUBS     r0,r5,#1              ;1554
0000dc  6fa1              LDR      r1,[r4,#0x78]         ;1554
0000de  7008              STRB     r0,[r1,#0]            ;1554
0000e0  e01f              B        |L11.290|
                  |L11.226|
0000e2  68e0              LDR      r0,[r4,#0xc]          ;1558
0000e4  2810              CMP      r0,#0x10              ;1558
0000e6  d80b              BHI      |L11.256|
0000e8  4826              LDR      r0,|L11.388|
0000ea  6520              STR      r0,[r4,#0x50]         ;1561
0000ec  2d02              CMP      r5,#2                 ;1562
0000ee  d303              BCC      |L11.248|
0000f0  2003              MOVS     r0,#3                 ;1563
0000f2  6fa1              LDR      r1,[r4,#0x78]         ;1563
0000f4  7008              STRB     r0,[r1,#0]            ;1563
0000f6  e014              B        |L11.290|
                  |L11.248|
0000f8  2001              MOVS     r0,#1                 ;1565
0000fa  6fa1              LDR      r1,[r4,#0x78]         ;1565
0000fc  7008              STRB     r0,[r1,#0]            ;1565
0000fe  e010              B        |L11.290|
                  |L11.256|
000100  68e0              LDR      r0,[r4,#0xc]          ;1569
000102  2818              CMP      r0,#0x18              ;1569
000104  d805              BHI      |L11.274|
000106  2002              MOVS     r0,#2                 ;1571
000108  6fa1              LDR      r1,[r4,#0x78]         ;1571
00010a  7008              STRB     r0,[r1,#0]            ;1571
00010c  481e              LDR      r0,|L11.392|
00010e  6520              STR      r0,[r4,#0x50]         ;1572
000110  e007              B        |L11.290|
                  |L11.274|
000112  68e0              LDR      r0,[r4,#0xc]          ;1576
000114  2818              CMP      r0,#0x18              ;1576
000116  d904              BLS      |L11.290|
000118  2003              MOVS     r0,#3                 ;1578
00011a  6fa1              LDR      r1,[r4,#0x78]         ;1578
00011c  7008              STRB     r0,[r1,#0]            ;1578
00011e  481a              LDR      r0,|L11.392|
000120  6520              STR      r0,[r4,#0x50]         ;1579
                  |L11.290|
000122  2110              MOVS     r1,#0x10              ;1585
000124  6860              LDR      r0,[r4,#4]            ;1585
000126  4008              ANDS     r0,r0,r1              ;1585
000128  2800              CMP      r0,#0                 ;1585
00012a  d008              BEQ      |L11.318|
00012c  6820              LDR      r0,[r4,#0]            ;1586
00012e  6841              LDR      r1,[r0,#4]            ;1586
000130  2241              MOVS     r2,#0x41              ;1586
000132  6ee0              LDR      r0,[r4,#0x6c]         ;1586
000134  4310              ORRS     r0,r0,r2              ;1586
000136  4301              ORRS     r1,r1,r0              ;1586
000138  6820              LDR      r0,[r4,#0]            ;1586
00013a  6041              STR      r1,[r0,#4]            ;1586
00013c  e007              B        |L11.334|
                  |L11.318|
00013e  6820              LDR      r0,[r4,#0]            ;1589
000140  6841              LDR      r1,[r0,#4]            ;1589
000142  4a12              LDR      r2,|L11.396|
000144  6ea0              LDR      r0,[r4,#0x68]         ;1589
000146  4310              ORRS     r0,r0,r2              ;1589
000148  4301              ORRS     r1,r1,r0              ;1589
00014a  6820              LDR      r0,[r4,#0]            ;1589
00014c  6041              STR      r1,[r0,#4]            ;1589
                  |L11.334|
00014e  2053              MOVS     r0,#0x53              ;1591
000150  0600              LSLS     r0,r0,#24             ;1591
000152  7d00              LDRB     r0,[r0,#0x14]         ;1591
000154  0840              LSRS     r0,r0,#1              ;1591
000156  0040              LSLS     r0,r0,#1              ;1591
000158  1c40              ADDS     r0,r0,#1              ;1591
00015a  2153              MOVS     r1,#0x53              ;1591
00015c  0609              LSLS     r1,r1,#24             ;1591
00015e  7508              STRB     r0,[r1,#0x14]         ;1591
000160  4608              MOV      r0,r1                 ;1592
000162  7d00              LDRB     r0,[r0,#0x14]         ;1592
000164  2102              MOVS     r1,#2                 ;1592
000166  4388              BICS     r0,r0,r1              ;1592
000168  1c80              ADDS     r0,r0,#2              ;1592
00016a  2153              MOVS     r1,#0x53              ;1592
00016c  0609              LSLS     r1,r1,#24             ;1592
00016e  7508              STRB     r0,[r1,#0x14]         ;1592
000170  bf00              NOP                            ;1594
                  |L11.370|
000172  bf00              NOP                            ;1596
000174  2100              MOVS     r1,#0                 ;1596
000176  2088              MOVS     r0,#0x88              ;1596
000178  5501              STRB     r1,[r0,r4]            ;1596
00017a  bf00              NOP                            ;1596
00017c  4638              MOV      r0,r7                 ;1597
00017e  e76f              B        |L11.96|
;;;1599   
                          ENDP

                  |L11.384|
                          DCD      SPI_RxISR_8BIT
                  |L11.388|
                          DCD      SPI_RxISR_16BIT
                  |L11.392|
                          DCD      SPI_RxISR_32BIT
                  |L11.396|
                          DCD      0x00000341

                          AREA ||i.MID_SPI_RxCpltCallback||, CODE, READONLY, ALIGN=1

                  MID_SPI_RxCpltCallback PROC
;;;2649    */
;;;2650   __weak void MID_SPI_RxCpltCallback(SPI_HandleTypeDef *mSPI)
000000  4770              BX       lr
;;;2651   {
;;;2652       UNUSED(mSPI);
;;;2653       // To do ...
;;;2654   }
;;;2655   
                          ENDP


                          AREA ||i.MID_SPI_RxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  MID_SPI_RxHalfCpltCallback PROC
;;;2715    */
;;;2716   __weak void MID_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *mSPI)
000000  4770              BX       lr
;;;2717   {
;;;2718       UNUSED(mSPI);
;;;2719       // To do ...
;;;2720   }
;;;2721   
                          ENDP


                          AREA ||i.MID_SPI_Transmit||, CODE, READONLY, ALIGN=1

                  MID_SPI_Transmit PROC
;;;459     */
;;;460    MID_StatusTypeDef MID_SPI_Transmit(SPI_HandleTypeDef *mSPI, uint8_t *pData, uint32_t Size, uint32_t Timeout)
000000  b5fe              PUSH     {r1-r7,lr}
;;;461    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4617              MOV      r7,r2
000008  461e              MOV      r6,r3
;;;462        uint32_t    tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;463        MID_StatusTypeDef errorcode = MID_OK;
00000e  9001              STR      r0,[sp,#4]
;;;464    
;;;465    
;;;466        
;;;467        // In this case, 32-bit access is performed on data source, Chcek Data is 32-bit aligned addrees
;;;468        if ((mSPI->Init.DataSize > SPI_DATASIZE_16BIT) || 
000010  68e0              LDR      r0,[r4,#0xc]
000012  2810              CMP      r0,#0x10
000014  d80c              BHI      |L14.48|
;;;469            ((Size > 1U) && (mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT)) ||
000016  2f01              CMP      r7,#1
000018  d905              BLS      |L14.38|
00001a  68e0              LDR      r0,[r4,#0xc]
00001c  2808              CMP      r0,#8
00001e  d902              BLS      |L14.38|
000020  68e0              LDR      r0,[r4,#0xc]
000022  2810              CMP      r0,#0x10
000024  d904              BLS      |L14.48|
                  |L14.38|
;;;470            ((Size > 3U) && (mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)))
000026  2f03              CMP      r7,#3
000028  d903              BLS      |L14.50|
00002a  68e0              LDR      r0,[r4,#0xc]
00002c  2808              CMP      r0,#8
00002e  d800              BHI      |L14.50|
                  |L14.48|
;;;471        {   // Check 32 bit access address aligned
;;;472            assert_param(IS_SPI_32BIT_ALIGNED_ADDRESS(pData));
000030  e008              B        |L14.68|
                  |L14.50|
;;;473        }
;;;474        else
;;;475        {   // Check 16 bit access address aligned
;;;476            if((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) || 
000032  68e0              LDR      r0,[r4,#0xc]
000034  2808              CMP      r0,#8
000036  d804              BHI      |L14.66|
;;;477              ((Size > 1U) && (mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)))
000038  2f01              CMP      r7,#1
00003a  d903              BLS      |L14.68|
00003c  68e0              LDR      r0,[r4,#0xc]
00003e  2808              CMP      r0,#8
000040  d800              BHI      |L14.68|
                  |L14.66|
;;;478            {   // Check 16 bit access address aligned
;;;479                assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
000042  bf00              NOP      
                  |L14.68|
;;;480            }
;;;481        }
;;;482    
;;;483        // Process Locked
;;;484        __MID_LOCK(mSPI);
000044  bf00              NOP      
000046  2088              MOVS     r0,#0x88
000048  5d00              LDRB     r0,[r0,r4]
00004a  2801              CMP      r0,#1
00004c  d101              BNE      |L14.82|
00004e  2002              MOVS     r0,#2
                  |L14.80|
;;;485    
;;;486        // Init tickstart for timeout management
;;;487        tickstart = MID_GetTick();
;;;488    
;;;489        if (mSPI->State != MID_SPI_STATE_READY)
;;;490        {
;;;491            errorcode = MID_BUSY;
;;;492            goto error;
;;;493        }
;;;494    
;;;495        if ((pData == NULL) || (Size == 0U))
;;;496        {
;;;497            errorcode = MID_ERROR;
;;;498            goto error;
;;;499        }
;;;500    
;;;501        // Set the transaction information
;;;502        mSPI->State       = MID_SPI_STATE_BUSY_TX;
;;;503        mSPI->ErrorCode   = MID_SPI_ERROR_NONE;
;;;504        mSPI->pTxBuffPtr  = (uint8_t *)pData;
;;;505        mSPI->TxXferSize  = Size;
;;;506        mSPI->TxXferCount = Size;
;;;507    
;;;508        // Init field not used in handle to zero
;;;509        mSPI->pRxBuffPtr  = (uint8_t *)NULL;
;;;510        mSPI->RxXferSize  = 0U;
;;;511        mSPI->RxXferCount = 0U;
;;;512        mSPI->TxISR       = NULL;
;;;513        mSPI->RxISR       = NULL;
;;;514        
;;;515        /* Disable all interrupt */
;;;516        mSPI->Instance->INT.W = 0;
;;;517    
;;;518        // Check if the SPI is already enabled
;;;519        if( (mSPI->Instance->CR0.W & SPI_CR0_EN_mask_w) == 0)
;;;520        {
;;;521            // Enable peripheral
;;;522            SET_BIT( mSPI->Instance->CR0.W , SPI_CR0_EN_mask_w);
;;;523        }
;;;524    
;;;525        /* Transmit data in 17 ~ 32 Bit mode */
;;;526        if(mSPI->Init.DataSize > SPI_DATASIZE_16BIT)
;;;527        {
;;;528            // When TxXferCount != 0
;;;529            if(mSPI->TxXferCount > 0x00U)
;;;530            {
;;;531                mSPI->Instance->TDAT.W = *((uint32_t *)pData);
;;;532                pData += sizeof(uint32_t);
;;;533                mSPI->TxXferCount--;
;;;534            }
;;;535            
;;;536            // Transmit data in 17 ~ 32 Bit mode
;;;537            while(mSPI->TxXferCount > 0U)
;;;538            {
;;;539                // Wait until TXE flag is set to send data
;;;540                if(( mSPI->Instance->STA.W & SPI_STA_TXF_mask_w)!=0)
;;;541                {
;;;542                    mSPI->Instance->TDAT.W = *((uint32_t *)pData);
;;;543                    pData += sizeof(uint32_t);
;;;544                    mSPI->TxXferCount--;
;;;545                }
;;;546                else
;;;547                {
;;;548                    // Timeout management
;;;549                    if ((Timeout == 0U) || ((Timeout != MID_MAX_DELAY) && ((MID_GetTick() - tickstart) >=  Timeout)))
;;;550                    {
;;;551                        errorcode = MID_TIMEOUT;
;;;552                        goto error;
;;;553                    }
;;;554                }
;;;555            }
;;;556        }
;;;557        /* Transmit data less 17 Bit mode */
;;;558        else
;;;559        {   /* Transmit data in 9 ~ 16 Bit mode */
;;;560            if(mSPI->Init.DataSize > SPI_DATASIZE_8BIT)
;;;561            {
;;;562                // When transmit > 1 
;;;563                if(mSPI->TxXferCount > 0x01U)
;;;564                {
;;;565                    // Write on the data register in packing mode
;;;566                    mSPI->Instance->TDAT.W = *((uint32_t *)pData);
;;;567                    // Address index +2
;;;568                    pData += sizeof(uint32_t);
;;;569                    // Sub TX counter
;;;570                    mSPI->TxXferCount -= 0x02U;
;;;571                }
;;;572                // When transmit == 1
;;;573                else
;;;574                {
;;;575                    // Write on the data register in packing mode
;;;576                    mSPI->Instance->TDAT.H[0] = *((uint16_t *)pData);
;;;577                    // Address index +1
;;;578                    pData += sizeof(uint16_t);
;;;579                    // Sub TX counter
;;;580                    mSPI->TxXferCount -= 0x01U;
;;;581                }
;;;582                
;;;583                // When transmit not complete
;;;584                while(mSPI->TxXferCount > 0x00U)
;;;585                {   // When TDAT empty
;;;586                    if(( mSPI->Instance->STA.W & SPI_STA_TXF_mask_w)!=0)
;;;587                    {   // When transmit 32 bit
;;;588                        if(mSPI->TxXferCount > 0x01U)
;;;589                        {
;;;590                            // Write on the data register in packing mode
;;;591                            mSPI->Instance->TDAT.W = *((uint32_t *)pData);
;;;592                            // Address index +2
;;;593                            pData += sizeof(uint32_t);
;;;594                            // Sub TX counter
;;;595                            mSPI->TxXferCount -= 0x02U;
;;;596                        }
;;;597                        // When transmit 16 bit
;;;598                        else
;;;599                        {
;;;600                            // Write on the data register in packing mode
;;;601                            mSPI->Instance->TDAT.H[0] = *((uint16_t *)pData);
;;;602                            // Address index +1
;;;603                            pData += sizeof(uint16_t);
;;;604                            // Sub TX counter
;;;605                            mSPI->TxXferCount -= 0x01U;
;;;606                        }
;;;607                    }
;;;608                    else
;;;609                    {
;;;610                        // Timeout management
;;;611                        if ((Timeout == 0U) || ((Timeout != MID_MAX_DELAY) && ((MID_GetTick() - tickstart) >=  Timeout)))
;;;612                        {
;;;613                            errorcode = MID_TIMEOUT;
;;;614                            goto error;
;;;615                        }
;;;616                    }
;;;617                }
;;;618            }
;;;619            
;;;620            /* Transmit data in 4 ~ 8 Bit mode */
;;;621            else
;;;622            {   // Transmit 4 bytes
;;;623                if(mSPI->TxXferCount > 0x03U)
;;;624                {
;;;625                    // Write on the data register in packing mode
;;;626                    mSPI->Instance->TDAT.W = *((uint32_t *)pData);
;;;627                    // Address index +4
;;;628                    pData += sizeof(uint32_t);
;;;629                    // Sub TX counter
;;;630                    mSPI->TxXferCount -= 0x04U;
;;;631                }
;;;632                // Transmit 2 bytes
;;;633                else if(mSPI->TxXferCount > 0x01U)
;;;634                {
;;;635                    // Write on the data register in packing mode
;;;636                    mSPI->Instance->TDAT.H[0] = *((uint16_t *)pData);
;;;637                    // Address index +2
;;;638                    pData += sizeof(uint16_t);
;;;639                    // Sub TX counter
;;;640                    mSPI->TxXferCount -= 0x02U;
;;;641                }
;;;642                // Transmit 1 bytes
;;;643                else
;;;644                {
;;;645                    // Write on the data register in packing mode
;;;646                    mSPI->Instance->TDAT.B[0] = *((uint8_t *)pData);
;;;647                    // Address index +1
;;;648                    pData += sizeof(uint8_t);
;;;649                    // Sub TX counter
;;;650                    mSPI->TxXferCount -= 0x01U;
;;;651                }
;;;652                // When transmit not complete
;;;653                while (mSPI->TxXferCount > 0U)
;;;654                {
;;;655    
;;;656                    if(( mSPI->Instance->STA.W & SPI_STA_TXF_mask_w)!=0)
;;;657                    {   // Transmit 4 bytes
;;;658                        if(mSPI->TxXferCount > 0x03U)
;;;659                        {
;;;660                            // Write on the data register in packing mode
;;;661                            mSPI->Instance->TDAT.W = *((uint32_t *)pData);
;;;662                            // Address index +4
;;;663                            pData += sizeof(uint32_t);
;;;664                            // Sub TX counter
;;;665                            mSPI->TxXferCount -= 0x04U;
;;;666                        }
;;;667                        // Transmit 2 bytes
;;;668                        else if(mSPI->TxXferCount > 0x01U)
;;;669                        {
;;;670                            // Write on the data register in packing mode
;;;671                            mSPI->Instance->TDAT.H[0] = *((uint16_t *)pData);
;;;672                            // Address index +2
;;;673                            pData += sizeof(uint16_t);
;;;674                            // Sub TX counter
;;;675                            mSPI->TxXferCount -= 0x02U;
;;;676                        }
;;;677                        // Transmit 1 bytes
;;;678                        else
;;;679                        {
;;;680                            // Write on the data register in packing mode
;;;681                            mSPI->Instance->TDAT.B[0] = *((uint8_t *)pData);
;;;682                            // Address index +1
;;;683                            pData += sizeof(uint8_t);
;;;684                            // Sub TX counter
;;;685                            mSPI->TxXferCount -= 0x01U;
;;;686                        }
;;;687                    }
;;;688                    else
;;;689                    {
;;;690                        // Timeout management
;;;691                        if ((Timeout == 0U) || ((Timeout != MID_MAX_DELAY) && ((MID_GetTick() - tickstart) >=  Timeout)))
;;;692                        {
;;;693                            errorcode = MID_TIMEOUT;
;;;694                            goto error;
;;;695                        }
;;;696                    }
;;;697    
;;;698                }
;;;699            }
;;;700        }
;;;701    
;;;702        /* Check the end of the transaction */
;;;703        if (SPI_EndRxTxTransaction(mSPI, Timeout, tickstart) != MID_OK)
;;;704        {
;;;705            mSPI->ErrorCode = MID_SPI_ERROR_FLAG;
;;;706        }
;;;707    
;;;708        /* Clear overrun flag in 2 Lines communication mode because received is not read */
;;;709        if (mSPI->Init.DataLine == SPI_STANDARD_SPI)
;;;710        {
;;;711            __MID_SPI_CLEAR_ROVRFFLAG(mSPI);
;;;712        }
;;;713    
;;;714        if (mSPI->ErrorCode != MID_SPI_ERROR_NONE)
;;;715        {
;;;716            errorcode = MID_ERROR;
;;;717        }
;;;718    
;;;719    error:
;;;720        mSPI->State = MID_SPI_STATE_READY;
;;;721        /* Process Unlocked */
;;;722        __MID_UNLOCK(mSPI);
;;;723        return errorcode;
;;;724    }
000050  bdfe              POP      {r1-r7,pc}
                  |L14.82|
000052  2101              MOVS     r1,#1                 ;484
000054  2088              MOVS     r0,#0x88              ;484
000056  5501              STRB     r1,[r0,r4]            ;484
000058  bf00              NOP                            ;484
00005a  f7fffffe          BL       MID_GetTick
00005e  9002              STR      r0,[sp,#8]            ;487
000060  2089              MOVS     r0,#0x89              ;489
000062  5d00              LDRB     r0,[r0,r4]            ;489
000064  2801              CMP      r0,#1                 ;489
000066  d002              BEQ      |L14.110|
000068  2002              MOVS     r0,#2                 ;491
00006a  9001              STR      r0,[sp,#4]            ;491
00006c  e10e              B        |L14.652|
                  |L14.110|
00006e  2d00              CMP      r5,#0                 ;495
000070  d001              BEQ      |L14.118|
000072  2f00              CMP      r7,#0                 ;495
000074  d102              BNE      |L14.124|
                  |L14.118|
000076  2001              MOVS     r0,#1                 ;497
000078  9001              STR      r0,[sp,#4]            ;497
00007a  e107              B        |L14.652|
                  |L14.124|
00007c  2103              MOVS     r1,#3                 ;502
00007e  2089              MOVS     r0,#0x89              ;502
000080  5501              STRB     r1,[r0,r4]            ;502
000082  2100              MOVS     r1,#0                 ;503
000084  208c              MOVS     r0,#0x8c              ;503
000086  5101              STR      r1,[r0,r4]            ;503
000088  6365              STR      r5,[r4,#0x34]         ;504
00008a  63a7              STR      r7,[r4,#0x38]         ;505
00008c  63e7              STR      r7,[r4,#0x3c]         ;506
00008e  2000              MOVS     r0,#0                 ;509
000090  6420              STR      r0,[r4,#0x40]         ;509
000092  6460              STR      r0,[r4,#0x44]         ;510
000094  64a0              STR      r0,[r4,#0x48]         ;511
000096  6560              STR      r0,[r4,#0x54]         ;512
000098  6520              STR      r0,[r4,#0x50]         ;513
00009a  6821              LDR      r1,[r4,#0]            ;516
00009c  6048              STR      r0,[r1,#4]            ;516
00009e  6820              LDR      r0,[r4,#0]            ;519
0000a0  6900              LDR      r0,[r0,#0x10]         ;519
0000a2  07c0              LSLS     r0,r0,#31             ;519
0000a4  0fc0              LSRS     r0,r0,#31             ;519
0000a6  2800              CMP      r0,#0                 ;519
0000a8  d105              BNE      |L14.182|
0000aa  6820              LDR      r0,[r4,#0]            ;522
0000ac  6900              LDR      r0,[r0,#0x10]         ;522
0000ae  2101              MOVS     r1,#1                 ;522
0000b0  4308              ORRS     r0,r0,r1              ;522
0000b2  6821              LDR      r1,[r4,#0]            ;522
0000b4  6108              STR      r0,[r1,#0x10]         ;522
                  |L14.182|
0000b6  68e0              LDR      r0,[r4,#0xc]          ;526
0000b8  2810              CMP      r0,#0x10              ;526
0000ba  d92a              BLS      |L14.274|
0000bc  6be0              LDR      r0,[r4,#0x3c]         ;529
0000be  2800              CMP      r0,#0                 ;529
0000c0  d006              BEQ      |L14.208|
0000c2  6828              LDR      r0,[r5,#0]            ;531
0000c4  6821              LDR      r1,[r4,#0]            ;531
0000c6  6348              STR      r0,[r1,#0x34]         ;531
0000c8  1d2d              ADDS     r5,r5,#4              ;532
0000ca  6be0              LDR      r0,[r4,#0x3c]         ;533
0000cc  1e40              SUBS     r0,r0,#1              ;533
0000ce  63e0              STR      r0,[r4,#0x3c]         ;533
                  |L14.208|
0000d0  e01b              B        |L14.266|
                  |L14.210|
0000d2  6820              LDR      r0,[r4,#0]            ;540
0000d4  6800              LDR      r0,[r0,#0]            ;540
0000d6  2180              MOVS     r1,#0x80              ;540
0000d8  4008              ANDS     r0,r0,r1              ;540
0000da  2800              CMP      r0,#0                 ;540
0000dc  d007              BEQ      |L14.238|
0000de  6828              LDR      r0,[r5,#0]            ;542
0000e0  6821              LDR      r1,[r4,#0]            ;542
0000e2  6348              STR      r0,[r1,#0x34]         ;542
0000e4  1d2d              ADDS     r5,r5,#4              ;543
0000e6  6be0              LDR      r0,[r4,#0x3c]         ;544
0000e8  1e40              SUBS     r0,r0,#1              ;544
0000ea  63e0              STR      r0,[r4,#0x3c]         ;544
0000ec  e00d              B        |L14.266|
                  |L14.238|
0000ee  2e00              CMP      r6,#0                 ;549
0000f0  d008              BEQ      |L14.260|
0000f2  1c70              ADDS     r0,r6,#1              ;549
0000f4  2800              CMP      r0,#0                 ;549
0000f6  d008              BEQ      |L14.266|
0000f8  f7fffffe          BL       MID_GetTick
0000fc  9902              LDR      r1,[sp,#8]            ;549
0000fe  1a40              SUBS     r0,r0,r1              ;549
000100  42b0              CMP      r0,r6                 ;549
000102  d302              BCC      |L14.266|
                  |L14.260|
000104  2003              MOVS     r0,#3                 ;551
000106  9001              STR      r0,[sp,#4]            ;551
000108  e0c0              B        |L14.652|
                  |L14.266|
00010a  6be0              LDR      r0,[r4,#0x3c]         ;537
00010c  2800              CMP      r0,#0                 ;537
00010e  d1e0              BNE      |L14.210|
000110  e095              B        |L14.574|
                  |L14.274|
000112  68e0              LDR      r0,[r4,#0xc]          ;560
000114  2808              CMP      r0,#8                 ;560
000116  d93d              BLS      |L14.404|
000118  6be0              LDR      r0,[r4,#0x3c]         ;563
00011a  2801              CMP      r0,#1                 ;563
00011c  d907              BLS      |L14.302|
00011e  6828              LDR      r0,[r5,#0]            ;566
000120  6821              LDR      r1,[r4,#0]            ;566
000122  6348              STR      r0,[r1,#0x34]         ;566
000124  1d2d              ADDS     r5,r5,#4              ;568
000126  6be0              LDR      r0,[r4,#0x3c]         ;570
000128  1e80              SUBS     r0,r0,#2              ;570
00012a  63e0              STR      r0,[r4,#0x3c]         ;570
00012c  e006              B        |L14.316|
                  |L14.302|
00012e  8828              LDRH     r0,[r5,#0]            ;576
000130  6821              LDR      r1,[r4,#0]            ;576
000132  8688              STRH     r0,[r1,#0x34]         ;576
000134  1cad              ADDS     r5,r5,#2              ;578
000136  6be0              LDR      r0,[r4,#0x3c]         ;580
000138  1e40              SUBS     r0,r0,#1              ;580
00013a  63e0              STR      r0,[r4,#0x3c]         ;580
                  |L14.316|
00013c  e026              B        |L14.396|
                  |L14.318|
00013e  6820              LDR      r0,[r4,#0]            ;586
000140  6800              LDR      r0,[r0,#0]            ;586
000142  2180              MOVS     r1,#0x80              ;586
000144  4008              ANDS     r0,r0,r1              ;586
000146  2800              CMP      r0,#0                 ;586
000148  d012              BEQ      |L14.368|
00014a  6be0              LDR      r0,[r4,#0x3c]         ;588
00014c  2801              CMP      r0,#1                 ;588
00014e  d907              BLS      |L14.352|
000150  6828              LDR      r0,[r5,#0]            ;591
000152  6821              LDR      r1,[r4,#0]            ;591
000154  6348              STR      r0,[r1,#0x34]         ;591
000156  1d2d              ADDS     r5,r5,#4              ;593
000158  6be0              LDR      r0,[r4,#0x3c]         ;595
00015a  1e80              SUBS     r0,r0,#2              ;595
00015c  63e0              STR      r0,[r4,#0x3c]         ;595
00015e  e015              B        |L14.396|
                  |L14.352|
000160  8828              LDRH     r0,[r5,#0]            ;601
000162  6821              LDR      r1,[r4,#0]            ;601
000164  8688              STRH     r0,[r1,#0x34]         ;601
000166  1cad              ADDS     r5,r5,#2              ;603
000168  6be0              LDR      r0,[r4,#0x3c]         ;605
00016a  1e40              SUBS     r0,r0,#1              ;605
00016c  63e0              STR      r0,[r4,#0x3c]         ;605
00016e  e00d              B        |L14.396|
                  |L14.368|
000170  2e00              CMP      r6,#0                 ;611
000172  d008              BEQ      |L14.390|
000174  1c70              ADDS     r0,r6,#1              ;611
000176  2800              CMP      r0,#0                 ;611
000178  d008              BEQ      |L14.396|
00017a  f7fffffe          BL       MID_GetTick
00017e  9902              LDR      r1,[sp,#8]            ;611
000180  1a40              SUBS     r0,r0,r1              ;611
000182  42b0              CMP      r0,r6                 ;611
000184  d302              BCC      |L14.396|
                  |L14.390|
000186  2003              MOVS     r0,#3                 ;613
000188  9001              STR      r0,[sp,#4]            ;613
00018a  e07f              B        |L14.652|
                  |L14.396|
00018c  6be0              LDR      r0,[r4,#0x3c]         ;584
00018e  2800              CMP      r0,#0                 ;584
000190  d1d5              BNE      |L14.318|
000192  e054              B        |L14.574|
                  |L14.404|
000194  6be0              LDR      r0,[r4,#0x3c]         ;623
000196  2803              CMP      r0,#3                 ;623
000198  d907              BLS      |L14.426|
00019a  6828              LDR      r0,[r5,#0]            ;626
00019c  6821              LDR      r1,[r4,#0]            ;626
00019e  6348              STR      r0,[r1,#0x34]         ;626
0001a0  1d2d              ADDS     r5,r5,#4              ;628
0001a2  6be0              LDR      r0,[r4,#0x3c]         ;630
0001a4  1f00              SUBS     r0,r0,#4              ;630
0001a6  63e0              STR      r0,[r4,#0x3c]         ;630
0001a8  e012              B        |L14.464|
                  |L14.426|
0001aa  6be0              LDR      r0,[r4,#0x3c]         ;633
0001ac  2801              CMP      r0,#1                 ;633
0001ae  d907              BLS      |L14.448|
0001b0  8828              LDRH     r0,[r5,#0]            ;636
0001b2  6821              LDR      r1,[r4,#0]            ;636
0001b4  8688              STRH     r0,[r1,#0x34]         ;636
0001b6  1cad              ADDS     r5,r5,#2              ;638
0001b8  6be0              LDR      r0,[r4,#0x3c]         ;640
0001ba  1e80              SUBS     r0,r0,#2              ;640
0001bc  63e0              STR      r0,[r4,#0x3c]         ;640
0001be  e007              B        |L14.464|
                  |L14.448|
0001c0  7829              LDRB     r1,[r5,#0]            ;646
0001c2  6820              LDR      r0,[r4,#0]            ;646
0001c4  3020              ADDS     r0,r0,#0x20           ;646
0001c6  7501              STRB     r1,[r0,#0x14]         ;646
0001c8  1c6d              ADDS     r5,r5,#1              ;648
0001ca  6be0              LDR      r0,[r4,#0x3c]         ;650
0001cc  1e40              SUBS     r0,r0,#1              ;650
0001ce  63e0              STR      r0,[r4,#0x3c]         ;650
                  |L14.464|
0001d0  e032              B        |L14.568|
                  |L14.466|
0001d2  6820              LDR      r0,[r4,#0]            ;656
0001d4  6800              LDR      r0,[r0,#0]            ;656
0001d6  2180              MOVS     r1,#0x80              ;656
0001d8  4008              ANDS     r0,r0,r1              ;656
0001da  2800              CMP      r0,#0                 ;656
0001dc  d01e              BEQ      |L14.540|
0001de  6be0              LDR      r0,[r4,#0x3c]         ;658
0001e0  2803              CMP      r0,#3                 ;658
0001e2  d907              BLS      |L14.500|
0001e4  6828              LDR      r0,[r5,#0]            ;661
0001e6  6821              LDR      r1,[r4,#0]            ;661
0001e8  6348              STR      r0,[r1,#0x34]         ;661
0001ea  1d2d              ADDS     r5,r5,#4              ;663
0001ec  6be0              LDR      r0,[r4,#0x3c]         ;665
0001ee  1f00              SUBS     r0,r0,#4              ;665
0001f0  63e0              STR      r0,[r4,#0x3c]         ;665
0001f2  e021              B        |L14.568|
                  |L14.500|
0001f4  6be0              LDR      r0,[r4,#0x3c]         ;668
0001f6  2801              CMP      r0,#1                 ;668
0001f8  d907              BLS      |L14.522|
0001fa  8828              LDRH     r0,[r5,#0]            ;671
0001fc  6821              LDR      r1,[r4,#0]            ;671
0001fe  8688              STRH     r0,[r1,#0x34]         ;671
000200  1cad              ADDS     r5,r5,#2              ;673
000202  6be0              LDR      r0,[r4,#0x3c]         ;675
000204  1e80              SUBS     r0,r0,#2              ;675
000206  63e0              STR      r0,[r4,#0x3c]         ;675
000208  e016              B        |L14.568|
                  |L14.522|
00020a  7829              LDRB     r1,[r5,#0]            ;681
00020c  6820              LDR      r0,[r4,#0]            ;681
00020e  3020              ADDS     r0,r0,#0x20           ;681
000210  7501              STRB     r1,[r0,#0x14]         ;681
000212  1c6d              ADDS     r5,r5,#1              ;683
000214  6be0              LDR      r0,[r4,#0x3c]         ;685
000216  1e40              SUBS     r0,r0,#1              ;685
000218  63e0              STR      r0,[r4,#0x3c]         ;685
00021a  e00d              B        |L14.568|
                  |L14.540|
00021c  2e00              CMP      r6,#0                 ;691
00021e  d008              BEQ      |L14.562|
000220  1c70              ADDS     r0,r6,#1              ;691
000222  2800              CMP      r0,#0                 ;691
000224  d008              BEQ      |L14.568|
000226  f7fffffe          BL       MID_GetTick
00022a  9902              LDR      r1,[sp,#8]            ;691
00022c  1a40              SUBS     r0,r0,r1              ;691
00022e  42b0              CMP      r0,r6                 ;691
000230  d302              BCC      |L14.568|
                  |L14.562|
000232  2003              MOVS     r0,#3                 ;693
000234  9001              STR      r0,[sp,#4]            ;693
000236  e029              B        |L14.652|
                  |L14.568|
000238  6be0              LDR      r0,[r4,#0x3c]         ;653
00023a  2800              CMP      r0,#0                 ;653
00023c  d1c9              BNE      |L14.466|
                  |L14.574|
00023e  4631              MOV      r1,r6                 ;703
000240  4620              MOV      r0,r4                 ;703
000242  9a02              LDR      r2,[sp,#8]            ;703
000244  f7fffffe          BL       SPI_EndRxTxTransaction
000248  2800              CMP      r0,#0                 ;703
00024a  d002              BEQ      |L14.594|
00024c  2120              MOVS     r1,#0x20              ;705
00024e  208c              MOVS     r0,#0x8c              ;705
000250  5101              STR      r1,[r0,r4]            ;705
                  |L14.594|
000252  68a0              LDR      r0,[r4,#8]            ;709
000254  2800              CMP      r0,#0                 ;709
000256  d112              BNE      |L14.638|
000258  bf00              NOP                            ;711
00025a  9000              STR      r0,[sp,#0]            ;711
00025c  6820              LDR      r0,[r4,#0]            ;711
00025e  6b00              LDR      r0,[r0,#0x30]         ;711
000260  9000              STR      r0,[sp,#0]            ;711
000262  6820              LDR      r0,[r4,#0]            ;711
000264  6b00              LDR      r0,[r0,#0x30]         ;711
000266  9000              STR      r0,[sp,#0]            ;711
000268  6820              LDR      r0,[r4,#0]            ;711
00026a  6800              LDR      r0,[r0,#0]            ;711
00026c  9000              STR      r0,[sp,#0]            ;711
00026e  6820              LDR      r0,[r4,#0]            ;711
000270  6800              LDR      r0,[r0,#0]            ;711
000272  6ea1              LDR      r1,[r4,#0x68]         ;711
000274  4308              ORRS     r0,r0,r1              ;711
000276  6821              LDR      r1,[r4,#0]            ;711
000278  6008              STR      r0,[r1,#0]            ;711
00027a  bf00              NOP                            ;711
00027c  bf00              NOP                            ;711
                  |L14.638|
00027e  208c              MOVS     r0,#0x8c              ;714
000280  5900              LDR      r0,[r0,r4]            ;714
000282  2800              CMP      r0,#0                 ;714
000284  d001              BEQ      |L14.650|
000286  2001              MOVS     r0,#1                 ;716
000288  9001              STR      r0,[sp,#4]            ;716
                  |L14.650|
00028a  bf00              NOP                            ;719
                  |L14.652|
00028c  2101              MOVS     r1,#1                 ;720
00028e  2089              MOVS     r0,#0x89              ;720
000290  5501              STRB     r1,[r0,r4]            ;720
000292  bf00              NOP                            ;722
000294  2100              MOVS     r1,#0                 ;722
000296  2088              MOVS     r0,#0x88              ;722
000298  5501              STRB     r1,[r0,r4]            ;722
00029a  bf00              NOP                            ;722
00029c  9801              LDR      r0,[sp,#4]            ;723
00029e  e6d7              B        |L14.80|
;;;725    
                          ENDP


                          AREA ||i.MID_SPI_TransmitReceive||, CODE, READONLY, ALIGN=1

                  MID_SPI_TransmitReceive PROC
;;;973     */
;;;974    MID_StatusTypeDef MID_SPI_TransmitReceive (SPI_HandleTypeDef *mSPI, uint8_t *pTxData, uint8_t *pRxData, uint32_t Size, uint32_t Timeout)
000000  b5f0              PUSH     {r4-r7,lr}
;;;975    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;976        uint32_t tmp = 0U;
00000c  2000              MOVS     r0,#0
00000e  9004              STR      r0,[sp,#0x10]
;;;977        uint32_t tickstart = 0U;
000010  9003              STR      r0,[sp,#0xc]
;;;978        uint32_t txallowed = 1U;                // Variable used to alternate Rx and Tx during transfer
000012  2001              MOVS     r0,#1
000014  9002              STR      r0,[sp,#8]
;;;979        MID_StatusTypeDef errorcode = MID_OK;
000016  2000              MOVS     r0,#0
000018  9001              STR      r0,[sp,#4]
;;;980        uint8_t  rxloadbyte;
;;;981        
;;;982        
;;;983        /* Check pRxData address match */
;;;984        // In this case, 32-bit access is performed on data source, Chcek Data is 32-bit aligned addrees
;;;985        if ((mSPI->Init.DataSize > SPI_DATASIZE_16BIT) || 
00001a  68e0              LDR      r0,[r4,#0xc]
00001c  2810              CMP      r0,#0x10
00001e  d80c              BHI      |L15.58|
;;;986            ((Size > 1U) && (mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT)) ||
000020  2f01              CMP      r7,#1
000022  d905              BLS      |L15.48|
000024  68e0              LDR      r0,[r4,#0xc]
000026  2808              CMP      r0,#8
000028  d902              BLS      |L15.48|
00002a  68e0              LDR      r0,[r4,#0xc]
00002c  2810              CMP      r0,#0x10
00002e  d904              BLS      |L15.58|
                  |L15.48|
;;;987            ((Size > 3U) && (mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)))
000030  2f03              CMP      r7,#3
000032  d903              BLS      |L15.60|
000034  68e0              LDR      r0,[r4,#0xc]
000036  2808              CMP      r0,#8
000038  d800              BHI      |L15.60|
                  |L15.58|
;;;988        {   // Check 32 bit access address aligned
;;;989            assert_param(IS_SPI_32BIT_ALIGNED_ADDRESS(pData));
00003a  e008              B        |L15.78|
                  |L15.60|
;;;990        }
;;;991        else
;;;992        {   // Check 16 bit access address aligned
;;;993            if((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) || ((Size > 1U) && (mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)))
00003c  68e0              LDR      r0,[r4,#0xc]
00003e  2808              CMP      r0,#8
000040  d804              BHI      |L15.76|
000042  2f01              CMP      r7,#1
000044  d903              BLS      |L15.78|
000046  68e0              LDR      r0,[r4,#0xc]
000048  2808              CMP      r0,#8
00004a  d800              BHI      |L15.78|
                  |L15.76|
;;;994            {   // Check 16 bit access address aligned
;;;995                assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
00004c  bf00              NOP      
                  |L15.78|
;;;996            }
;;;997        }
;;;998    
;;;999        /* Check Direction parameter */
;;;1000       assert_param(IS_SPI_DATALINES_STANDARD_SPI(mSPI->Init.DataLine));
;;;1001   
;;;1002       /* Process Locked */
;;;1003       __MID_LOCK(mSPI);
00004e  bf00              NOP      
000050  2088              MOVS     r0,#0x88
000052  5d00              LDRB     r0,[r0,r4]
000054  2801              CMP      r0,#1
000056  d102              BNE      |L15.94|
000058  2002              MOVS     r0,#2
                  |L15.90|
;;;1004   
;;;1005       /* Init tickstart for timeout management*/
;;;1006       tickstart = MID_GetTick();
;;;1007   
;;;1008       tmp  = mSPI->State;
;;;1009   
;;;1010       if(!((tmp == MID_SPI_STATE_READY) || \
;;;1011         (((mSPI->Init.Mode & SPI_MDS_MASK) != 0) && (mSPI->Init.DataLine == SPI_STANDARD_SPI) && (tmp == MID_SPI_STATE_BUSY_RX))))
;;;1012       {
;;;1013           errorcode = MID_BUSY;
;;;1014           goto error;
;;;1015       }
;;;1016   
;;;1017       if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
;;;1018       {
;;;1019           errorcode = MID_ERROR;
;;;1020           goto error;
;;;1021       }
;;;1022   
;;;1023       /* Don't overwrite in case of MID_SPI_STATE_BUSY_RX */
;;;1024       if (mSPI->State != MID_SPI_STATE_BUSY_RX)
;;;1025       {
;;;1026           mSPI->State = MID_SPI_STATE_BUSY_TX_RX;
;;;1027       }
;;;1028   
;;;1029       /* Set the transaction information */
;;;1030       mSPI->ErrorCode   = MID_SPI_ERROR_NONE;
;;;1031       mSPI->pRxBuffPtr  = (uint8_t *)pRxData;
;;;1032       mSPI->RxXferCount = Size;
;;;1033       mSPI->RxXferSize  = Size;
;;;1034       mSPI->pTxBuffPtr  = (uint8_t *)pTxData;
;;;1035       mSPI->TxXferCount = Size;
;;;1036       mSPI->TxXferSize  = Size;
;;;1037   
;;;1038       /*Init field not used in handle to zero */
;;;1039       mSPI->RxISR       = NULL;
;;;1040       mSPI->TxISR       = NULL;
;;;1041   
;;;1042       /* Check if the SPI is already enabled */
;;;1043       if((mSPI->Instance->CR0.W & SPI_CR0_EN_mask_w )== 0)
;;;1044       {
;;;1045           // Enable SPI peripheral
;;;1046           __MID_SPI_ENABLE(mSPI);
;;;1047       }
;;;1048       
;;;1049       /* Set the Rx Fifo threshold */
;;;1050       // For slave mode RX_TH setting
;;;1051       {
;;;1052           // Set RX_TH = 1 bytes
;;;1053           *mSPI->RX_TH = 0;
;;;1054   
;;;1055           // Set RX_TH = 2 bytes
;;;1056           // Data size = 9bit ~ 16bit
;;;1057           // Data size = 4bit ~ 8bit and RxXferCount > 1
;;;1058           if(((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT)) || \
;;;1059             ((mSPI->Init.DataSize <= SPI_DATASIZE_8BIT) && (mSPI->RxXferCount > 1U)))
;;;1060           {
;;;1061               
;;;1062               *mSPI->RX_TH = 1;
;;;1063           }
;;;1064           
;;;1065           // Set RX_TH = 3 bytes
;;;1066           // Data size = 17bit ~ 24bit
;;;1067           // Data size = 4bit ~ 8bit and RxXferCount > 2
;;;1068           if(((mSPI->Init.DataSize > SPI_DATASIZE_16BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_24BIT)) || \
;;;1069              ((mSPI->Init.DataSize <= SPI_DATASIZE_8BIT) && (mSPI->RxXferCount > 2U)))
;;;1070           {
;;;1071               *mSPI->RX_TH = 2;
;;;1072           }
;;;1073           
;;;1074           // Set RX_TH = 4 bytes
;;;1075           // Data size = 25bit ~ 32bit
;;;1076           // Data size = 9bit ~ 16bit and RxXferCount > 1
;;;1077           // Data size = 4bit ~ 8bit and RxXferCount > 3
;;;1078           if((mSPI->Init.DataSize > SPI_DATASIZE_24BIT) || \
;;;1079              ((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT) && (mSPI->RxXferCount > 2U)) || \
;;;1080              ((mSPI->Init.DataSize <= SPI_DATASIZE_8BIT) && (mSPI->RxXferCount > 3U)))
;;;1081           {
;;;1082               *mSPI->RX_TH = 3;
;;;1083           }
;;;1084       }
;;;1085   
;;;1086       /* Transmit and Receive data in 17 ~ 32 Bit mode */
;;;1087       if (mSPI->Init.DataSize > SPI_DATASIZE_16BIT)
;;;1088       {
;;;1089           if(mSPI->Instance != NULL)
;;;1090           {
;;;1091               mSPI->Instance->TDAT.W = *((uint32_t *)pTxData);
;;;1092               pTxData += sizeof(uint32_t);
;;;1093               mSPI->TxXferCount --;
;;;1094           }
;;;1095           /* Next Data is a Transmission (Tx). Tx is allowed */
;;;1096           txallowed = 1;
;;;1097           
;;;1098           while ((mSPI->TxXferCount > 0U) || (mSPI->RxXferCount > 0U))
;;;1099           {
;;;1100               // Check TXF flag. When transmit count >0 and TX buffer empty
;;;1101               if (txallowed && (mSPI->TxXferCount > 0U) && (__MID_SPI_GET_FLAG(mSPI, SPI_FLAG_TXF)))
;;;1102               {
;;;1103                   mSPI->Instance->TDAT.W = *((uint32_t *)pTxData);
;;;1104                   pTxData += sizeof(uint32_t);
;;;1105                   mSPI->TxXferCount--;
;;;1106                   
;;;1107                   /* Next Data is a reception (Rx). Tx not allowed */
;;;1108                   txallowed = 0U;
;;;1109               }
;;;1110               
;;;1111               // Check RXF flag. When receive count > 0 and RX buffer not empty 
;;;1112               if ((mSPI->RxXferCount > 0U) && (__MID_SPI_GET_FLAG(mSPI, SPI_FLAG_RXF)))
;;;1113               {
;;;1114                   *((uint32_t *)pRxData) = mSPI->Instance->RDAT.W;
;;;1115                   pRxData += sizeof(uint32_t);
;;;1116                   mSPI->RxXferCount--;
;;;1117                   
;;;1118                   /* Next Data is a Transmission (Tx). Tx is allowed */
;;;1119                   txallowed = 1U;
;;;1120               }
;;;1121               
;;;1122               // Check not timeout
;;;1123               if ((Timeout != MID_MAX_DELAY) && ((MID_GetTick() - tickstart) >=  Timeout))
;;;1124               {
;;;1125                   errorcode = MID_TIMEOUT;
;;;1126                   goto error;
;;;1127               }
;;;1128           }
;;;1129       }
;;;1130       
;;;1131       /* Transmit and Receive data in 8 ~ 16 Bit mode */
;;;1132       else 
;;;1133       {
;;;1134           if (mSPI->Init.DataSize > SPI_DATASIZE_8BIT)
;;;1135           {
;;;1136               if(mSPI->TxXferCount != 0x00U)
;;;1137               {
;;;1138                   // When data length > 1
;;;1139                   if(mSPI->TxXferCount > 0x01U)
;;;1140                   {
;;;1141                       mSPI->Instance->TDAT.W = *((uint32_t *)pTxData);
;;;1142                       pTxData += sizeof(uint32_t);
;;;1143                       mSPI->TxXferCount -= 2U;
;;;1144                       
;;;1145                   }
;;;1146                   // When data length <= 1
;;;1147                   else
;;;1148                   {
;;;1149                       mSPI->Instance->TDAT.H[0] = *((uint16_t *)pTxData);
;;;1150                       pTxData += sizeof(uint16_t);
;;;1151                       mSPI->TxXferCount--;
;;;1152                   }
;;;1153                   /* Next Data is a Transmission (Tx). Tx is allowed */
;;;1154                   txallowed = 1;
;;;1155               }
;;;1156               
;;;1157               // When transmit completet or receive complete
;;;1158               while ((mSPI->TxXferCount > 0U) || (mSPI->RxXferCount > 0U))
;;;1159               {
;;;1160                   // Check TXF flag. When transmit count >0 and TX buffer empty
;;;1161                   if (txallowed && (mSPI->TxXferCount > 0U) && (__MID_SPI_GET_FLAG(mSPI, SPI_FLAG_TXF)))
;;;1162                   {
;;;1163                       // When data length > 1
;;;1164                       if(mSPI->TxXferCount > 0x01U)
;;;1165                       {
;;;1166                           mSPI->Instance->TDAT.W = *((uint32_t *)pTxData);
;;;1167                           pTxData += sizeof(uint32_t);
;;;1168                           mSPI->TxXferCount -= 2U;
;;;1169                       }
;;;1170                       // When data length <= 1
;;;1171                       else
;;;1172                       {
;;;1173                           mSPI->Instance->TDAT.H[0] = *((uint16_t *)pTxData);
;;;1174                           pTxData += sizeof(uint16_t);
;;;1175                           mSPI->TxXferCount--;
;;;1176                       }
;;;1177                       /* Next Data is a reception (Rx). Tx not allowed */
;;;1178                       txallowed = 0U;
;;;1179                   }
;;;1180   
;;;1181                   // Check RXF flag. When receive count > 0 and RX buffer not empty 
;;;1182                   if ((mSPI->RxXferCount > 0U) && (__MID_SPI_GET_FLAG(mSPI, SPI_FLAG_RXF)))
;;;1183                   {  
;;;1184                       rxloadbyte = (*mSPI->RNUM) & SPI_STA_RNUM_mask_b3;
;;;1185                       
;;;1186                       // When data length > 1
;;;1187                       if( rxloadbyte == 4)
;;;1188                       {
;;;1189                           *((uint32_t *)pRxData) = mSPI->Instance->RDAT.W;
;;;1190                           pRxData += sizeof(uint32_t);
;;;1191                           mSPI->RxXferCount -= 2U;
;;;1192                       }
;;;1193                       // When data length <= 1
;;;1194                       else
;;;1195                       {
;;;1196                           *((uint16_t *)pRxData) = mSPI->Instance->RDAT.H[0];
;;;1197                           pRxData += sizeof(uint16_t);
;;;1198                           mSPI->RxXferCount--;
;;;1199                       }
;;;1200                       
;;;1201                       /* Next Data is a Transmission (Tx). Tx is allowed */
;;;1202                       txallowed = 1U;
;;;1203                   }
;;;1204                   
;;;1205                   if ((Timeout != MID_MAX_DELAY) && ((MID_GetTick() - tickstart) >=  Timeout))
;;;1206                   {
;;;1207                       errorcode = MID_TIMEOUT;
;;;1208                       goto error;
;;;1209                   }
;;;1210               }
;;;1211           }
;;;1212   
;;;1213           /* Transmit and Receive data in 4 ~ 8 Bit mode */
;;;1214           else
;;;1215           {
;;;1216               // When TX trasmitdata not empty
;;;1217               if (mSPI->TxXferCount != 0x00U)
;;;1218               {   
;;;1219                   // When TX buffer count > 3
;;;1220                   if (mSPI->TxXferCount > 3U)
;;;1221                   {
;;;1222                       mSPI->Instance->TDAT.W = *((uint32_t *)pTxData);
;;;1223                       pTxData += sizeof(uint32_t);
;;;1224                       mSPI->TxXferCount -= 4U;
;;;1225                   }
;;;1226                   
;;;1227                   // When TX buffer count > 1
;;;1228                   else if (mSPI->TxXferCount > 1U)
;;;1229                   {
;;;1230                       mSPI->Instance->TDAT.H[0] = *((uint16_t *)pTxData);
;;;1231                       pTxData += sizeof(uint16_t);
;;;1232                       mSPI->TxXferCount -= 2U;
;;;1233                   }
;;;1234                   
;;;1235                   // When TX buffer count == 1
;;;1236                   else
;;;1237                   {
;;;1238                       *(__IO uint8_t *)&mSPI->Instance->TDAT.B[0] = (*pTxData++);
;;;1239                       mSPI->TxXferCount--;
;;;1240                   }
;;;1241                   /* Next Data is a Transmission (Tx). Tx is allowed */
;;;1242                   txallowed = 1;
;;;1243               }
;;;1244               
;;;1245               // When trasmitdata data not empty > 0 or receive data not empty
;;;1246               while ((mSPI->TxXferCount > 0U) || (mSPI->RxXferCount > 0U))
;;;1247               {
;;;1248                   // Check TXF flag. When transmit count >0 and TX buffer empty
;;;1249                   if(txallowed && (mSPI->TxXferCount > 0U) && (__MID_SPI_GET_FLAG(mSPI, SPI_FLAG_TXF)))
;;;1250                   {
;;;1251                       // When TX data count > 3
;;;1252                       if (mSPI->TxXferCount > 3U)
;;;1253                       {
;;;1254                           mSPI->Instance->TDAT.W = *((uint32_t *)pTxData);
;;;1255                           pTxData += sizeof(uint32_t);
;;;1256                           mSPI->TxXferCount -= 4U;
;;;1257                       }
;;;1258                       else
;;;1259                       {   
;;;1260                           // When TX data count > 1
;;;1261                           if (mSPI->TxXferCount > 1U)
;;;1262                           {
;;;1263                               mSPI->Instance->TDAT.H[0] = *((uint16_t *)pTxData);
;;;1264                               pTxData += sizeof(uint16_t);
;;;1265                               mSPI->TxXferCount -= 2U;
;;;1266                           }
;;;1267                           
;;;1268                           // When TX data count > 0
;;;1269                           else
;;;1270                           {
;;;1271                               *(__IO uint8_t *)&mSPI->Instance->TDAT.B[0] = (*pTxData++);
;;;1272                               mSPI->TxXferCount--;
;;;1273                           }
;;;1274                       }
;;;1275   
;;;1276                       /* Next Data is a reception (Rx). Tx not allowed */
;;;1277                       txallowed = 0U;
;;;1278                   }
;;;1279   
;;;1280                   // When RX buffer count > 0 and RDAT not empty
;;;1281                   if((mSPI->RxXferCount > 0U) && (__MID_SPI_GET_FLAG(mSPI, SPI_FLAG_RXF)))
;;;1282                   {   
;;;1283                       rxloadbyte = (*mSPI->RNUM) & SPI_STA_RNUM_mask_b3;
;;;1284                       
;;;1285                       if( rxloadbyte == 4U)
;;;1286                       {
;;;1287                           *((uint32_t *)pRxData) = mSPI->Instance->RDAT.W;       
;;;1288                       }
;;;1289                       else if( rxloadbyte == 3u)
;;;1290                       {
;;;1291                           tmp = mSPI->Instance->RDAT.W;
;;;1292                           
;;;1293                           *((uint8_t *)pRxData)        = (uint8_t)tmp;
;;;1294                           *((uint8_t *)(pRxData + 1))  = (uint8_t)(tmp>>8);
;;;1295                           *((uint8_t *)(pRxData + 2))  = (uint8_t)(tmp>>16);
;;;1296                       }
;;;1297                       else if( rxloadbyte == 2U)
;;;1298                       {
;;;1299                           *((uint16_t *)pRxData) = mSPI->Instance->RDAT.H[0];
;;;1300                       }
;;;1301                       else
;;;1302                       {
;;;1303                           *((uint8_t *)pRxData) =  mSPI->Instance->RDAT.B[0];
;;;1304                       }
;;;1305                       
;;;1306                       pRxData           += rxloadbyte;
;;;1307                       mSPI->RxXferCount -= rxloadbyte;
;;;1308                           
;;;1309                       if( mSPI->RxXferCount!= 0 && mSPI->RxXferCount < 4U && mSPI->REG_TYPE == MID_SPI_SPI)
;;;1310                       {
;;;1311                           *mSPI->RX_TH = ((mSPI->RxXferCount - 1) & SPI_CR2_RX_TH_mask_b1);
;;;1312                       }
;;;1313                       
;;;1314                       /* Next Data is a Transmission (Tx). Tx is allowed */
;;;1315                       txallowed = 1U;
;;;1316                   }
;;;1317                   
;;;1318                   if ((Timeout != MID_MAX_DELAY) && ((MID_GetTick() - tickstart) >=  Timeout))
;;;1319                   {
;;;1320                       errorcode = MID_TIMEOUT;
;;;1321                       goto error;
;;;1322                   }
;;;1323               }
;;;1324           }
;;;1325       }
;;;1326       
;;;1327       /* Check the end of the transaction */
;;;1328       if (SPI_EndRxTxTransaction(mSPI, Timeout, tickstart) != MID_OK)
;;;1329       {
;;;1330           mSPI->ErrorCode = MID_SPI_ERROR_FLAG;
;;;1331       }
;;;1332   
;;;1333       // When SPI/URTx moudle error happened
;;;1334       if (mSPI->ErrorCode != MID_SPI_ERROR_NONE)
;;;1335       {
;;;1336           errorcode = MID_ERROR;
;;;1337       }
;;;1338   
;;;1339   error :
;;;1340       mSPI->State = MID_SPI_STATE_READY;
;;;1341       __MID_UNLOCK(mSPI);
;;;1342       return errorcode;
;;;1343   }
00005a  b005              ADD      sp,sp,#0x14
00005c  bdf0              POP      {r4-r7,pc}
                  |L15.94|
00005e  2101              MOVS     r1,#1                 ;1003
000060  2088              MOVS     r0,#0x88              ;1003
000062  5501              STRB     r1,[r0,r4]            ;1003
000064  bf00              NOP                            ;1003
000066  f7fffffe          BL       MID_GetTick
00006a  9003              STR      r0,[sp,#0xc]          ;1006
00006c  2089              MOVS     r0,#0x89              ;1008
00006e  5d00              LDRB     r0,[r0,r4]            ;1008
000070  9004              STR      r0,[sp,#0x10]         ;1008
000072  9804              LDR      r0,[sp,#0x10]         ;1010
000074  2801              CMP      r0,#1                 ;1010
000076  d00d              BEQ      |L15.148|
000078  2110              MOVS     r1,#0x10              ;1010
00007a  6860              LDR      r0,[r4,#4]            ;1010
00007c  4008              ANDS     r0,r0,r1              ;1010
00007e  2800              CMP      r0,#0                 ;1010
000080  d005              BEQ      |L15.142|
000082  68a0              LDR      r0,[r4,#8]            ;1010
000084  2800              CMP      r0,#0                 ;1010
000086  d102              BNE      |L15.142|
000088  9804              LDR      r0,[sp,#0x10]         ;1010
00008a  2804              CMP      r0,#4                 ;1010
00008c  d002              BEQ      |L15.148|
                  |L15.142|
00008e  2002              MOVS     r0,#2                 ;1013
000090  9001              STR      r0,[sp,#4]            ;1013
000092  e1de              B        |L15.1106|
                  |L15.148|
000094  2d00              CMP      r5,#0                 ;1017
000096  d003              BEQ      |L15.160|
000098  2e00              CMP      r6,#0                 ;1017
00009a  d001              BEQ      |L15.160|
00009c  2f00              CMP      r7,#0                 ;1017
00009e  d102              BNE      |L15.166|
                  |L15.160|
0000a0  2001              MOVS     r0,#1                 ;1019
0000a2  9001              STR      r0,[sp,#4]            ;1019
0000a4  e1d5              B        |L15.1106|
                  |L15.166|
0000a6  2089              MOVS     r0,#0x89              ;1024
0000a8  5d00              LDRB     r0,[r0,r4]            ;1024
0000aa  2804              CMP      r0,#4                 ;1024
0000ac  d002              BEQ      |L15.180|
0000ae  2105              MOVS     r1,#5                 ;1026
0000b0  2089              MOVS     r0,#0x89              ;1026
0000b2  5501              STRB     r1,[r0,r4]            ;1026
                  |L15.180|
0000b4  2100              MOVS     r1,#0                 ;1030
0000b6  208c              MOVS     r0,#0x8c              ;1030
0000b8  5101              STR      r1,[r0,r4]            ;1030
0000ba  6426              STR      r6,[r4,#0x40]         ;1031
0000bc  64a7              STR      r7,[r4,#0x48]         ;1032
0000be  6467              STR      r7,[r4,#0x44]         ;1033
0000c0  6365              STR      r5,[r4,#0x34]         ;1034
0000c2  63e7              STR      r7,[r4,#0x3c]         ;1035
0000c4  63a7              STR      r7,[r4,#0x38]         ;1036
0000c6  2000              MOVS     r0,#0                 ;1039
0000c8  6520              STR      r0,[r4,#0x50]         ;1039
0000ca  6560              STR      r0,[r4,#0x54]         ;1040
0000cc  6820              LDR      r0,[r4,#0]            ;1043
0000ce  6900              LDR      r0,[r0,#0x10]         ;1043
0000d0  07c0              LSLS     r0,r0,#31             ;1043
0000d2  0fc0              LSRS     r0,r0,#31             ;1043
0000d4  2800              CMP      r0,#0                 ;1043
0000d6  d105              BNE      |L15.228|
0000d8  6820              LDR      r0,[r4,#0]            ;1046
0000da  6900              LDR      r0,[r0,#0x10]         ;1046
0000dc  2101              MOVS     r1,#1                 ;1046
0000de  4308              ORRS     r0,r0,r1              ;1046
0000e0  6821              LDR      r1,[r4,#0]            ;1046
0000e2  6108              STR      r0,[r1,#0x10]         ;1046
                  |L15.228|
0000e4  2000              MOVS     r0,#0                 ;1053
0000e6  6fa1              LDR      r1,[r4,#0x78]         ;1053
0000e8  7008              STRB     r0,[r1,#0]            ;1053
0000ea  68e0              LDR      r0,[r4,#0xc]          ;1058
0000ec  2808              CMP      r0,#8                 ;1058
0000ee  d902              BLS      |L15.246|
0000f0  68e0              LDR      r0,[r4,#0xc]          ;1058
0000f2  2810              CMP      r0,#0x10              ;1058
0000f4  d905              BLS      |L15.258|
                  |L15.246|
0000f6  68e0              LDR      r0,[r4,#0xc]          ;1059
0000f8  2808              CMP      r0,#8                 ;1059
0000fa  d805              BHI      |L15.264|
0000fc  6ca0              LDR      r0,[r4,#0x48]         ;1059
0000fe  2801              CMP      r0,#1                 ;1059
000100  d902              BLS      |L15.264|
                  |L15.258|
000102  2001              MOVS     r0,#1                 ;1062
000104  6fa1              LDR      r1,[r4,#0x78]         ;1062
000106  7008              STRB     r0,[r1,#0]            ;1062
                  |L15.264|
000108  68e0              LDR      r0,[r4,#0xc]          ;1068
00010a  2810              CMP      r0,#0x10              ;1068
00010c  d902              BLS      |L15.276|
00010e  68e0              LDR      r0,[r4,#0xc]          ;1068
000110  2818              CMP      r0,#0x18              ;1068
000112  d905              BLS      |L15.288|
                  |L15.276|
000114  68e0              LDR      r0,[r4,#0xc]          ;1069
000116  2808              CMP      r0,#8                 ;1069
000118  d805              BHI      |L15.294|
00011a  6ca0              LDR      r0,[r4,#0x48]         ;1069
00011c  2802              CMP      r0,#2                 ;1069
00011e  d902              BLS      |L15.294|
                  |L15.288|
000120  2002              MOVS     r0,#2                 ;1071
000122  6fa1              LDR      r1,[r4,#0x78]         ;1071
000124  7008              STRB     r0,[r1,#0]            ;1071
                  |L15.294|
000126  68e0              LDR      r0,[r4,#0xc]          ;1078
000128  2818              CMP      r0,#0x18              ;1078
00012a  d80e              BHI      |L15.330|
00012c  68e0              LDR      r0,[r4,#0xc]          ;1079
00012e  2808              CMP      r0,#8                 ;1079
000130  d905              BLS      |L15.318|
000132  68e0              LDR      r0,[r4,#0xc]          ;1079
000134  2810              CMP      r0,#0x10              ;1079
000136  d802              BHI      |L15.318|
000138  6ca0              LDR      r0,[r4,#0x48]         ;1079
00013a  2802              CMP      r0,#2                 ;1079
00013c  d805              BHI      |L15.330|
                  |L15.318|
00013e  68e0              LDR      r0,[r4,#0xc]          ;1080
000140  2808              CMP      r0,#8                 ;1080
000142  d805              BHI      |L15.336|
000144  6ca0              LDR      r0,[r4,#0x48]         ;1080
000146  2803              CMP      r0,#3                 ;1080
000148  d902              BLS      |L15.336|
                  |L15.330|
00014a  2003              MOVS     r0,#3                 ;1082
00014c  6fa1              LDR      r1,[r4,#0x78]         ;1082
00014e  7008              STRB     r0,[r1,#0]            ;1082
                  |L15.336|
000150  68e0              LDR      r0,[r4,#0xc]          ;1087
000152  2810              CMP      r0,#0x10              ;1087
000154  d948              BLS      |L15.488|
000156  6820              LDR      r0,[r4,#0]            ;1089
000158  2800              CMP      r0,#0                 ;1089
00015a  d006              BEQ      |L15.362|
00015c  6828              LDR      r0,[r5,#0]            ;1091
00015e  6821              LDR      r1,[r4,#0]            ;1091
000160  6348              STR      r0,[r1,#0x34]         ;1091
000162  1d2d              ADDS     r5,r5,#4              ;1092
000164  6be0              LDR      r0,[r4,#0x3c]         ;1093
000166  1e40              SUBS     r0,r0,#1              ;1093
000168  63e0              STR      r0,[r4,#0x3c]         ;1093
                  |L15.362|
00016a  2001              MOVS     r0,#1                 ;1096
00016c  9002              STR      r0,[sp,#8]            ;1096
00016e  e034              B        |L15.474|
                  |L15.368|
000170  9802              LDR      r0,[sp,#8]            ;1101
000172  2800              CMP      r0,#0                 ;1101
000174  d011              BEQ      |L15.410|
000176  6be0              LDR      r0,[r4,#0x3c]         ;1101
000178  2800              CMP      r0,#0                 ;1101
00017a  d00e              BEQ      |L15.410|
00017c  6820              LDR      r0,[r4,#0]            ;1101
00017e  6800              LDR      r0,[r0,#0]            ;1101
000180  2180              MOVS     r1,#0x80              ;1101
000182  4008              ANDS     r0,r0,r1              ;1101
000184  2880              CMP      r0,#0x80              ;1101
000186  d108              BNE      |L15.410|
000188  6828              LDR      r0,[r5,#0]            ;1103
00018a  6821              LDR      r1,[r4,#0]            ;1103
00018c  6348              STR      r0,[r1,#0x34]         ;1103
00018e  1d2d              ADDS     r5,r5,#4              ;1104
000190  6be0              LDR      r0,[r4,#0x3c]         ;1105
000192  1e40              SUBS     r0,r0,#1              ;1105
000194  63e0              STR      r0,[r4,#0x3c]         ;1105
000196  2000              MOVS     r0,#0                 ;1108
000198  9002              STR      r0,[sp,#8]            ;1108
                  |L15.410|
00019a  6ca0              LDR      r0,[r4,#0x48]         ;1112
00019c  2800              CMP      r0,#0                 ;1112
00019e  d00e              BEQ      |L15.446|
0001a0  6820              LDR      r0,[r4,#0]            ;1112
0001a2  6800              LDR      r0,[r0,#0]            ;1112
0001a4  2140              MOVS     r1,#0x40              ;1112
0001a6  4008              ANDS     r0,r0,r1              ;1112
0001a8  2840              CMP      r0,#0x40              ;1112
0001aa  d108              BNE      |L15.446|
0001ac  6820              LDR      r0,[r4,#0]            ;1114
0001ae  6b00              LDR      r0,[r0,#0x30]         ;1114
0001b0  6030              STR      r0,[r6,#0]            ;1114
0001b2  1d36              ADDS     r6,r6,#4              ;1115
0001b4  6ca0              LDR      r0,[r4,#0x48]         ;1116
0001b6  1e40              SUBS     r0,r0,#1              ;1116
0001b8  64a0              STR      r0,[r4,#0x48]         ;1116
0001ba  2001              MOVS     r0,#1                 ;1119
0001bc  9002              STR      r0,[sp,#8]            ;1119
                  |L15.446|
0001be  980a              LDR      r0,[sp,#0x28]         ;1123
0001c0  1c40              ADDS     r0,r0,#1              ;1123
0001c2  2800              CMP      r0,#0                 ;1123
0001c4  d009              BEQ      |L15.474|
0001c6  f7fffffe          BL       MID_GetTick
0001ca  9903              LDR      r1,[sp,#0xc]          ;1123
0001cc  1a41              SUBS     r1,r0,r1              ;1123
0001ce  980a              LDR      r0,[sp,#0x28]         ;1123
0001d0  4281              CMP      r1,r0                 ;1123
0001d2  d302              BCC      |L15.474|
0001d4  2003              MOVS     r0,#3                 ;1125
0001d6  9001              STR      r0,[sp,#4]            ;1125
0001d8  e13b              B        |L15.1106|
                  |L15.474|
0001da  6be0              LDR      r0,[r4,#0x3c]         ;1098
0001dc  2800              CMP      r0,#0                 ;1098
0001de  d1c7              BNE      |L15.368|
0001e0  6ca0              LDR      r0,[r4,#0x48]         ;1098
0001e2  2800              CMP      r0,#0                 ;1098
0001e4  d1c4              BNE      |L15.368|
0001e6  e123              B        |L15.1072|
                  |L15.488|
0001e8  68e0              LDR      r0,[r4,#0xc]          ;1134
0001ea  2808              CMP      r0,#8                 ;1134
0001ec  d970              BLS      |L15.720|
0001ee  6be0              LDR      r0,[r4,#0x3c]         ;1136
0001f0  2800              CMP      r0,#0                 ;1136
0001f2  d013              BEQ      |L15.540|
0001f4  6be0              LDR      r0,[r4,#0x3c]         ;1139
0001f6  2801              CMP      r0,#1                 ;1139
0001f8  d907              BLS      |L15.522|
0001fa  6828              LDR      r0,[r5,#0]            ;1141
0001fc  6821              LDR      r1,[r4,#0]            ;1141
0001fe  6348              STR      r0,[r1,#0x34]         ;1141
000200  1d2d              ADDS     r5,r5,#4              ;1142
000202  6be0              LDR      r0,[r4,#0x3c]         ;1143
000204  1e80              SUBS     r0,r0,#2              ;1143
000206  63e0              STR      r0,[r4,#0x3c]         ;1143
000208  e006              B        |L15.536|
                  |L15.522|
00020a  8828              LDRH     r0,[r5,#0]            ;1149
00020c  6821              LDR      r1,[r4,#0]            ;1149
00020e  8688              STRH     r0,[r1,#0x34]         ;1149
000210  1cad              ADDS     r5,r5,#2              ;1150
000212  6be0              LDR      r0,[r4,#0x3c]         ;1151
000214  1e40              SUBS     r0,r0,#1              ;1151
000216  63e0              STR      r0,[r4,#0x3c]         ;1151
                  |L15.536|
000218  2001              MOVS     r0,#1                 ;1154
00021a  9002              STR      r0,[sp,#8]            ;1154
                  |L15.540|
00021c  e050              B        |L15.704|
                  |L15.542|
00021e  9802              LDR      r0,[sp,#8]            ;1161
000220  2800              CMP      r0,#0                 ;1161
000222  d01c              BEQ      |L15.606|
000224  6be0              LDR      r0,[r4,#0x3c]         ;1161
000226  2800              CMP      r0,#0                 ;1161
000228  d019              BEQ      |L15.606|
00022a  6820              LDR      r0,[r4,#0]            ;1161
00022c  6800              LDR      r0,[r0,#0]            ;1161
00022e  2180              MOVS     r1,#0x80              ;1161
000230  4008              ANDS     r0,r0,r1              ;1161
000232  2880              CMP      r0,#0x80              ;1161
000234  d113              BNE      |L15.606|
000236  6be0              LDR      r0,[r4,#0x3c]         ;1164
000238  2801              CMP      r0,#1                 ;1164
00023a  d907              BLS      |L15.588|
00023c  6828              LDR      r0,[r5,#0]            ;1166
00023e  6821              LDR      r1,[r4,#0]            ;1166
000240  6348              STR      r0,[r1,#0x34]         ;1166
000242  1d2d              ADDS     r5,r5,#4              ;1167
000244  6be0              LDR      r0,[r4,#0x3c]         ;1168
000246  1e80              SUBS     r0,r0,#2              ;1168
000248  63e0              STR      r0,[r4,#0x3c]         ;1168
00024a  e006              B        |L15.602|
                  |L15.588|
00024c  8828              LDRH     r0,[r5,#0]            ;1173
00024e  6821              LDR      r1,[r4,#0]            ;1173
000250  8688              STRH     r0,[r1,#0x34]         ;1173
000252  1cad              ADDS     r5,r5,#2              ;1174
000254  6be0              LDR      r0,[r4,#0x3c]         ;1175
000256  1e40              SUBS     r0,r0,#1              ;1175
000258  63e0              STR      r0,[r4,#0x3c]         ;1175
                  |L15.602|
00025a  2000              MOVS     r0,#0                 ;1178
00025c  9002              STR      r0,[sp,#8]            ;1178
                  |L15.606|
00025e  6ca0              LDR      r0,[r4,#0x48]         ;1182
000260  2800              CMP      r0,#0                 ;1182
000262  d01f              BEQ      |L15.676|
000264  6820              LDR      r0,[r4,#0]            ;1182
000266  6800              LDR      r0,[r0,#0]            ;1182
000268  2140              MOVS     r1,#0x40              ;1182
00026a  4008              ANDS     r0,r0,r1              ;1182
00026c  2840              CMP      r0,#0x40              ;1182
00026e  d119              BNE      |L15.676|
000270  2084              MOVS     r0,#0x84              ;1184
000272  5900              LDR      r0,[r0,r4]            ;1184
000274  7800              LDRB     r0,[r0,#0]            ;1184
000276  0740              LSLS     r0,r0,#29             ;1184
000278  0f40              LSRS     r0,r0,#29             ;1184
00027a  9000              STR      r0,[sp,#0]            ;1184
00027c  9800              LDR      r0,[sp,#0]            ;1187
00027e  2804              CMP      r0,#4                 ;1187
000280  d107              BNE      |L15.658|
000282  6820              LDR      r0,[r4,#0]            ;1189
000284  6b00              LDR      r0,[r0,#0x30]         ;1189
000286  6030              STR      r0,[r6,#0]            ;1189
000288  1d36              ADDS     r6,r6,#4              ;1190
00028a  6ca0              LDR      r0,[r4,#0x48]         ;1191
00028c  1e80              SUBS     r0,r0,#2              ;1191
00028e  64a0              STR      r0,[r4,#0x48]         ;1191
000290  e006              B        |L15.672|
                  |L15.658|
000292  6820              LDR      r0,[r4,#0]            ;1196
000294  8e00              LDRH     r0,[r0,#0x30]         ;1196
000296  8030              STRH     r0,[r6,#0]            ;1196
000298  1cb6              ADDS     r6,r6,#2              ;1197
00029a  6ca0              LDR      r0,[r4,#0x48]         ;1198
00029c  1e40              SUBS     r0,r0,#1              ;1198
00029e  64a0              STR      r0,[r4,#0x48]         ;1198
                  |L15.672|
0002a0  2001              MOVS     r0,#1                 ;1202
0002a2  9002              STR      r0,[sp,#8]            ;1202
                  |L15.676|
0002a4  980a              LDR      r0,[sp,#0x28]         ;1205
0002a6  1c40              ADDS     r0,r0,#1              ;1205
0002a8  2800              CMP      r0,#0                 ;1205
0002aa  d009              BEQ      |L15.704|
0002ac  f7fffffe          BL       MID_GetTick
0002b0  9903              LDR      r1,[sp,#0xc]          ;1205
0002b2  1a41              SUBS     r1,r0,r1              ;1205
0002b4  980a              LDR      r0,[sp,#0x28]         ;1205
0002b6  4281              CMP      r1,r0                 ;1205
0002b8  d302              BCC      |L15.704|
0002ba  2003              MOVS     r0,#3                 ;1207
0002bc  9001              STR      r0,[sp,#4]            ;1207
0002be  e0c8              B        |L15.1106|
                  |L15.704|
0002c0  6be0              LDR      r0,[r4,#0x3c]         ;1158
0002c2  2800              CMP      r0,#0                 ;1158
0002c4  d1ab              BNE      |L15.542|
0002c6  6ca0              LDR      r0,[r4,#0x48]         ;1158
0002c8  2800              CMP      r0,#0                 ;1158
0002ca  d1a8              BNE      |L15.542|
0002cc  e0b0              B        |L15.1072|
0002ce  e7ff              B        |L15.720|
                  |L15.720|
0002d0  6be0              LDR      r0,[r4,#0x3c]         ;1217
0002d2  2800              CMP      r0,#0                 ;1217
0002d4  d01f              BEQ      |L15.790|
0002d6  6be0              LDR      r0,[r4,#0x3c]         ;1220
0002d8  2803              CMP      r0,#3                 ;1220
0002da  d907              BLS      |L15.748|
0002dc  6828              LDR      r0,[r5,#0]            ;1222
0002de  6821              LDR      r1,[r4,#0]            ;1222
0002e0  6348              STR      r0,[r1,#0x34]         ;1222
0002e2  1d2d              ADDS     r5,r5,#4              ;1223
0002e4  6be0              LDR      r0,[r4,#0x3c]         ;1224
0002e6  1f00              SUBS     r0,r0,#4              ;1224
0002e8  63e0              STR      r0,[r4,#0x3c]         ;1224
0002ea  e012              B        |L15.786|
                  |L15.748|
0002ec  6be0              LDR      r0,[r4,#0x3c]         ;1228
0002ee  2801              CMP      r0,#1                 ;1228
0002f0  d907              BLS      |L15.770|
0002f2  8828              LDRH     r0,[r5,#0]            ;1230
0002f4  6821              LDR      r1,[r4,#0]            ;1230
0002f6  8688              STRH     r0,[r1,#0x34]         ;1230
0002f8  1cad              ADDS     r5,r5,#2              ;1231
0002fa  6be0              LDR      r0,[r4,#0x3c]         ;1232
0002fc  1e80              SUBS     r0,r0,#2              ;1232
0002fe  63e0              STR      r0,[r4,#0x3c]         ;1232
000300  e007              B        |L15.786|
                  |L15.770|
000302  7829              LDRB     r1,[r5,#0]            ;1238
000304  6820              LDR      r0,[r4,#0]            ;1238
000306  3020              ADDS     r0,r0,#0x20           ;1238
000308  7501              STRB     r1,[r0,#0x14]         ;1238
00030a  1c6d              ADDS     r5,r5,#1              ;1238
00030c  6be0              LDR      r0,[r4,#0x3c]         ;1239
00030e  1e40              SUBS     r0,r0,#1              ;1239
000310  63e0              STR      r0,[r4,#0x3c]         ;1239
                  |L15.786|
000312  2001              MOVS     r0,#1                 ;1242
000314  9002              STR      r0,[sp,#8]            ;1242
                  |L15.790|
000316  e084              B        |L15.1058|
                  |L15.792|
000318  9802              LDR      r0,[sp,#8]            ;1249
00031a  2800              CMP      r0,#0                 ;1249
00031c  d028              BEQ      |L15.880|
00031e  6be0              LDR      r0,[r4,#0x3c]         ;1249
000320  2800              CMP      r0,#0                 ;1249
000322  d025              BEQ      |L15.880|
000324  6820              LDR      r0,[r4,#0]            ;1249
000326  6800              LDR      r0,[r0,#0]            ;1249
000328  2180              MOVS     r1,#0x80              ;1249
00032a  4008              ANDS     r0,r0,r1              ;1249
00032c  2880              CMP      r0,#0x80              ;1249
00032e  d11f              BNE      |L15.880|
000330  6be0              LDR      r0,[r4,#0x3c]         ;1252
000332  2803              CMP      r0,#3                 ;1252
000334  d907              BLS      |L15.838|
000336  6828              LDR      r0,[r5,#0]            ;1254
000338  6821              LDR      r1,[r4,#0]            ;1254
00033a  6348              STR      r0,[r1,#0x34]         ;1254
00033c  1d2d              ADDS     r5,r5,#4              ;1255
00033e  6be0              LDR      r0,[r4,#0x3c]         ;1256
000340  1f00              SUBS     r0,r0,#4              ;1256
000342  63e0              STR      r0,[r4,#0x3c]         ;1256
000344  e012              B        |L15.876|
                  |L15.838|
000346  6be0              LDR      r0,[r4,#0x3c]         ;1261
000348  2801              CMP      r0,#1                 ;1261
00034a  d907              BLS      |L15.860|
00034c  8828              LDRH     r0,[r5,#0]            ;1263
00034e  6821              LDR      r1,[r4,#0]            ;1263
000350  8688              STRH     r0,[r1,#0x34]         ;1263
000352  1cad              ADDS     r5,r5,#2              ;1264
000354  6be0              LDR      r0,[r4,#0x3c]         ;1265
000356  1e80              SUBS     r0,r0,#2              ;1265
000358  63e0              STR      r0,[r4,#0x3c]         ;1265
00035a  e007              B        |L15.876|
                  |L15.860|
00035c  7829              LDRB     r1,[r5,#0]            ;1271
00035e  6820              LDR      r0,[r4,#0]            ;1271
000360  3020              ADDS     r0,r0,#0x20           ;1271
000362  7501              STRB     r1,[r0,#0x14]         ;1271
000364  1c6d              ADDS     r5,r5,#1              ;1271
000366  6be0              LDR      r0,[r4,#0x3c]         ;1272
000368  1e40              SUBS     r0,r0,#1              ;1272
00036a  63e0              STR      r0,[r4,#0x3c]         ;1272
                  |L15.876|
00036c  2000              MOVS     r0,#0                 ;1277
00036e  9002              STR      r0,[sp,#8]            ;1277
                  |L15.880|
000370  6ca0              LDR      r0,[r4,#0x48]         ;1281
000372  2800              CMP      r0,#0                 ;1281
000374  d047              BEQ      |L15.1030|
000376  6820              LDR      r0,[r4,#0]            ;1281
000378  6800              LDR      r0,[r0,#0]            ;1281
00037a  2140              MOVS     r1,#0x40              ;1281
00037c  4008              ANDS     r0,r0,r1              ;1281
00037e  2840              CMP      r0,#0x40              ;1281
000380  d141              BNE      |L15.1030|
000382  2084              MOVS     r0,#0x84              ;1283
000384  5900              LDR      r0,[r0,r4]            ;1283
000386  7800              LDRB     r0,[r0,#0]            ;1283
000388  0740              LSLS     r0,r0,#29             ;1283
00038a  0f40              LSRS     r0,r0,#29             ;1283
00038c  9000              STR      r0,[sp,#0]            ;1283
00038e  9800              LDR      r0,[sp,#0]            ;1285
000390  2804              CMP      r0,#4                 ;1285
000392  d103              BNE      |L15.924|
000394  6820              LDR      r0,[r4,#0]            ;1287
000396  6b00              LDR      r0,[r0,#0x30]         ;1287
000398  6030              STR      r0,[r6,#0]            ;1287
00039a  e01b              B        |L15.980|
                  |L15.924|
00039c  9800              LDR      r0,[sp,#0]            ;1289
00039e  2803              CMP      r0,#3                 ;1289
0003a0  d10d              BNE      |L15.958|
0003a2  6820              LDR      r0,[r4,#0]            ;1291
0003a4  6b00              LDR      r0,[r0,#0x30]         ;1291
0003a6  9004              STR      r0,[sp,#0x10]         ;1291
0003a8  9804              LDR      r0,[sp,#0x10]         ;1293
0003aa  7030              STRB     r0,[r6,#0]            ;1293
0003ac  9804              LDR      r0,[sp,#0x10]         ;1294
0003ae  0400              LSLS     r0,r0,#16             ;1294
0003b0  0e00              LSRS     r0,r0,#24             ;1294
0003b2  7070              STRB     r0,[r6,#1]            ;1294
0003b4  9804              LDR      r0,[sp,#0x10]         ;1295
0003b6  0200              LSLS     r0,r0,#8              ;1295
0003b8  0e00              LSRS     r0,r0,#24             ;1295
0003ba  70b0              STRB     r0,[r6,#2]            ;1295
0003bc  e00a              B        |L15.980|
                  |L15.958|
0003be  9800              LDR      r0,[sp,#0]            ;1297
0003c0  2802              CMP      r0,#2                 ;1297
0003c2  d103              BNE      |L15.972|
0003c4  6820              LDR      r0,[r4,#0]            ;1299
0003c6  8e00              LDRH     r0,[r0,#0x30]         ;1299
0003c8  8030              STRH     r0,[r6,#0]            ;1299
0003ca  e003              B        |L15.980|
                  |L15.972|
0003cc  6820              LDR      r0,[r4,#0]            ;1303
0003ce  3020              ADDS     r0,r0,#0x20           ;1303
0003d0  7c00              LDRB     r0,[r0,#0x10]         ;1303
0003d2  7030              STRB     r0,[r6,#0]            ;1303
                  |L15.980|
0003d4  9800              LDR      r0,[sp,#0]            ;1306
0003d6  1836              ADDS     r6,r6,r0              ;1306
0003d8  6ca1              LDR      r1,[r4,#0x48]         ;1307
0003da  9800              LDR      r0,[sp,#0]            ;1307
0003dc  1a08              SUBS     r0,r1,r0              ;1307
0003de  64a0              STR      r0,[r4,#0x48]         ;1307
0003e0  6ca0              LDR      r0,[r4,#0x48]         ;1309
0003e2  2800              CMP      r0,#0                 ;1309
0003e4  d00d              BEQ      |L15.1026|
0003e6  6ca0              LDR      r0,[r4,#0x48]         ;1309
0003e8  2804              CMP      r0,#4                 ;1309
0003ea  d20a              BCS      |L15.1026|
0003ec  2153              MOVS     r1,#0x53              ;1309
0003ee  0609              LSLS     r1,r1,#24             ;1309
0003f0  6b20              LDR      r0,[r4,#0x30]         ;1309
0003f2  4288              CMP      r0,r1                 ;1309
0003f4  d105              BNE      |L15.1026|
0003f6  6ca0              LDR      r0,[r4,#0x48]         ;1311
0003f8  1e40              SUBS     r0,r0,#1              ;1311
0003fa  0780              LSLS     r0,r0,#30             ;1311
0003fc  0f80              LSRS     r0,r0,#30             ;1311
0003fe  6fa1              LDR      r1,[r4,#0x78]         ;1311
000400  7008              STRB     r0,[r1,#0]            ;1311
                  |L15.1026|
000402  2001              MOVS     r0,#1                 ;1315
000404  9002              STR      r0,[sp,#8]            ;1315
                  |L15.1030|
000406  980a              LDR      r0,[sp,#0x28]         ;1318
000408  1c40              ADDS     r0,r0,#1              ;1318
00040a  2800              CMP      r0,#0                 ;1318
00040c  d009              BEQ      |L15.1058|
00040e  f7fffffe          BL       MID_GetTick
000412  9903              LDR      r1,[sp,#0xc]          ;1318
000414  1a41              SUBS     r1,r0,r1              ;1318
000416  980a              LDR      r0,[sp,#0x28]         ;1318
000418  4281              CMP      r1,r0                 ;1318
00041a  d302              BCC      |L15.1058|
00041c  2003              MOVS     r0,#3                 ;1320
00041e  9001              STR      r0,[sp,#4]            ;1320
000420  e017              B        |L15.1106|
                  |L15.1058|
000422  6be0              LDR      r0,[r4,#0x3c]         ;1246
000424  2800              CMP      r0,#0                 ;1246
000426  d000              BEQ      |L15.1066|
                  |L15.1064|
000428  e776              B        |L15.792|
                  |L15.1066|
00042a  6ca0              LDR      r0,[r4,#0x48]         ;1246
00042c  2800              CMP      r0,#0                 ;1246
00042e  d1fb              BNE      |L15.1064|
                  |L15.1072|
000430  4620              MOV      r0,r4                 ;1328
000432  9a03              LDR      r2,[sp,#0xc]          ;1328
000434  990a              LDR      r1,[sp,#0x28]         ;1328
000436  f7fffffe          BL       SPI_EndRxTxTransaction
00043a  2800              CMP      r0,#0                 ;1328
00043c  d002              BEQ      |L15.1092|
00043e  2120              MOVS     r1,#0x20              ;1330
000440  208c              MOVS     r0,#0x8c              ;1330
000442  5101              STR      r1,[r0,r4]            ;1330
                  |L15.1092|
000444  208c              MOVS     r0,#0x8c              ;1334
000446  5900              LDR      r0,[r0,r4]            ;1334
000448  2800              CMP      r0,#0                 ;1334
00044a  d001              BEQ      |L15.1104|
00044c  2001              MOVS     r0,#1                 ;1336
00044e  9001              STR      r0,[sp,#4]            ;1336
                  |L15.1104|
000450  bf00              NOP                            ;1339
                  |L15.1106|
000452  2101              MOVS     r1,#1                 ;1340
000454  2089              MOVS     r0,#0x89              ;1340
000456  5501              STRB     r1,[r0,r4]            ;1340
000458  bf00              NOP                            ;1341
00045a  2100              MOVS     r1,#0                 ;1341
00045c  2088              MOVS     r0,#0x88              ;1341
00045e  5501              STRB     r1,[r0,r4]            ;1341
000460  bf00              NOP                            ;1341
000462  9801              LDR      r0,[sp,#4]            ;1342
000464  e5f9              B        |L15.90|
;;;1344   
                          ENDP


                          AREA ||i.MID_SPI_TransmitReceive_DMA||, CODE, READONLY, ALIGN=2

                  MID_SPI_TransmitReceive_DMA PROC
;;;1926    */
;;;1927   MID_StatusTypeDef MID_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *mSPI, uint8_t *pTxData, uint8_t *pRxData,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1928                                                 uint32_t Size)
;;;1929   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
000008  461d              MOV      r5,r3
;;;1930       // When DMA is ready
;;;1931       if(mSPI->State == MID_SPI_STATE_READY)
00000a  2089              MOVS     r0,#0x89
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2801              CMP      r0,#1
000010  d166              BNE      |L16.224|
;;;1932       {
;;;1933           // When parameter "pTxData", "pRxData" and Size not zero.
;;;1934           if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
000012  2e00              CMP      r6,#0
000014  d003              BEQ      |L16.30|
000016  2f00              CMP      r7,#0
000018  d001              BEQ      |L16.30|
00001a  2d00              CMP      r5,#0
00001c  d101              BNE      |L16.34|
                  |L16.30|
;;;1935           {
;;;1936               return(MID_ERROR);
00001e  2001              MOVS     r0,#1
                  |L16.32|
;;;1937           }
;;;1938           
;;;1939           //Process Locked 
;;;1940           __MID_LOCK(mSPI);
;;;1941           
;;;1942           // Change DMA peripheral state
;;;1943           mSPI->pRxBuffPtr = pRxData;
;;;1944           mSPI->RxXferSize = Size;
;;;1945           mSPI->RxXferCount = Size;
;;;1946           
;;;1947           mSPI->pTxBuffPtr = pTxData;
;;;1948           mSPI->TxXferSize = Size;
;;;1949           mSPI->TxXferCount = Size;
;;;1950           
;;;1951           mSPI->ErrorCode = MID_SPI_ERROR_NONE;
;;;1952           mSPI->State = MID_SPI_STATE_BUSY_TX_RX;
;;;1953           
;;;1954           
;;;1955           //Set the mSPI DMA transfer complete callback.
;;;1956           mSPI->mDMARX->XferCpltCallback = SPI_DMATransmitReceiveCplt;
;;;1957   //        mSPI->mDMARX->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1958           //Set the UART DMA Half transfer complete callback
;;;1959           mSPI->mDMARX->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
;;;1960           //Set the DMA error callback 
;;;1961           mSPI->mDMARX->XferErrorCallback = SPI_DMAError;
;;;1962           //Set the DMA abort callback
;;;1963           mSPI->mDMARX->XferAbortCallback = NULL;
;;;1964           
;;;1965           //Set the mSPI DMA transfer complete callback.
;;;1966           mSPI->mDMATX->XferCpltCallback = SPI_DMATransmitReceiveCplt;
;;;1967   //        mSPI->mDMATX->XferCpltCallback = SPI_DMATransmitCplt;
;;;1968           //Set the UART DMA Half transfer complete callback
;;;1969           mSPI->mDMATX->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
;;;1970           //Set the DMA error callback 
;;;1971           mSPI->mDMATX->XferErrorCallback = SPI_DMAError;
;;;1972           //Set the DMA abort callback
;;;1973           mSPI->mDMATX->XferAbortCallback = NULL;
;;;1974   
;;;1975           /* Configure the source, destination address and the data length */
;;;1976           MID_DMA_Start_IT(mSPI->mDMARX, (uint32_t)&mSPI->Instance->RDAT.W, (uint32_t) mSPI->pRxBuffPtr, Size);
;;;1977           MID_DMA_Start_IT(mSPI->mDMATX, (uint32_t) mSPI->pTxBuffPtr, (uint32_t)&mSPI->Instance->TDAT.W, Size);
;;;1978           
;;;1979           if(mSPI->REG_TYPE == MID_SPI_SPI)
;;;1980           {
;;;1981               mSPI->Instance->CR0.B[3] |= (SPI_CR0_DMA_TXEN_mask_b3 | SPI_CR0_DMA_RXEN_mask_b3);
;;;1982           }
;;;1983           else
;;;1984           {
;;;1985               mSPI->Instance->CR2.B[0] &= (~(URT_CR2_RX_EN_mask_b0 | URT_CR2_TX_EN_mask_b0));
;;;1986               mSPI->Instance->CR0.B[3] |= (SPI_CR0_DMA_TXEN_mask_b3 | SPI_CR0_DMA_RXEN_mask_b3);
;;;1987               mSPI->Instance->CR2.B[0] |= ( URT_CR2_RX_EN_mask_b0 | URT_CR2_TX_EN_mask_b0);
;;;1988           }
;;;1989   
;;;1990           return(MID_BUSY);
;;;1991       }
;;;1992       else
;;;1993       {
;;;1994           /* Remain BUSY */
;;;1995           return(MID_BUSY);
;;;1996       }  
;;;1997   }
000020  bdf8              POP      {r3-r7,pc}
                  |L16.34|
000022  bf00              NOP                            ;1940
000024  2088              MOVS     r0,#0x88              ;1940
000026  5d00              LDRB     r0,[r0,r4]            ;1940
000028  2801              CMP      r0,#1                 ;1940
00002a  d101              BNE      |L16.48|
00002c  2002              MOVS     r0,#2                 ;1940
00002e  e7f7              B        |L16.32|
                  |L16.48|
000030  2101              MOVS     r1,#1                 ;1940
000032  2088              MOVS     r0,#0x88              ;1940
000034  5501              STRB     r1,[r0,r4]            ;1940
000036  bf00              NOP                            ;1940
000038  6427              STR      r7,[r4,#0x40]         ;1943
00003a  6465              STR      r5,[r4,#0x44]         ;1944
00003c  64a5              STR      r5,[r4,#0x48]         ;1945
00003e  6366              STR      r6,[r4,#0x34]         ;1947
000040  63a5              STR      r5,[r4,#0x38]         ;1948
000042  63e5              STR      r5,[r4,#0x3c]         ;1949
000044  2100              MOVS     r1,#0                 ;1951
000046  208c              MOVS     r0,#0x8c              ;1951
000048  5101              STR      r1,[r0,r4]            ;1951
00004a  2105              MOVS     r1,#5                 ;1952
00004c  2089              MOVS     r0,#0x89              ;1952
00004e  5501              STRB     r1,[r0,r4]            ;1952
000050  4824              LDR      r0,|L16.228|
000052  6de1              LDR      r1,[r4,#0x5c]         ;1956
000054  62c8              STR      r0,[r1,#0x2c]         ;1956
000056  4824              LDR      r0,|L16.232|
000058  6de1              LDR      r1,[r4,#0x5c]         ;1959
00005a  6308              STR      r0,[r1,#0x30]         ;1959
00005c  4823              LDR      r0,|L16.236|
00005e  6de1              LDR      r1,[r4,#0x5c]         ;1961
000060  6348              STR      r0,[r1,#0x34]         ;1961
000062  2000              MOVS     r0,#0                 ;1963
000064  6de1              LDR      r1,[r4,#0x5c]         ;1963
000066  6388              STR      r0,[r1,#0x38]         ;1963
000068  481e              LDR      r0,|L16.228|
00006a  6da1              LDR      r1,[r4,#0x58]         ;1966
00006c  62c8              STR      r0,[r1,#0x2c]         ;1966
00006e  481e              LDR      r0,|L16.232|
000070  6da1              LDR      r1,[r4,#0x58]         ;1969
000072  6308              STR      r0,[r1,#0x30]         ;1969
000074  481d              LDR      r0,|L16.236|
000076  6da1              LDR      r1,[r4,#0x58]         ;1971
000078  6348              STR      r0,[r1,#0x34]         ;1971
00007a  2000              MOVS     r0,#0                 ;1973
00007c  6da1              LDR      r1,[r4,#0x58]         ;1973
00007e  6388              STR      r0,[r1,#0x38]         ;1973
000080  6823              LDR      r3,[r4,#0]            ;1976
000082  4619              MOV      r1,r3                 ;1976
000084  3130              ADDS     r1,r1,#0x30           ;1976
000086  462b              MOV      r3,r5                 ;1976
000088  6c22              LDR      r2,[r4,#0x40]         ;1976
00008a  6de0              LDR      r0,[r4,#0x5c]         ;1976
00008c  f7fffffe          BL       MID_DMA_Start_IT
000090  6823              LDR      r3,[r4,#0]            ;1977
000092  461a              MOV      r2,r3                 ;1977
000094  3234              ADDS     r2,r2,#0x34           ;1977
000096  462b              MOV      r3,r5                 ;1977
000098  6b61              LDR      r1,[r4,#0x34]         ;1977
00009a  6da0              LDR      r0,[r4,#0x58]         ;1977
00009c  f7fffffe          BL       MID_DMA_Start_IT
0000a0  2153              MOVS     r1,#0x53              ;1979
0000a2  0609              LSLS     r1,r1,#24             ;1979
0000a4  6b20              LDR      r0,[r4,#0x30]         ;1979
0000a6  4288              CMP      r0,r1                 ;1979
0000a8  d106              BNE      |L16.184|
0000aa  6820              LDR      r0,[r4,#0]            ;1981
0000ac  7cc0              LDRB     r0,[r0,#0x13]         ;1981
0000ae  21c0              MOVS     r1,#0xc0              ;1981
0000b0  4308              ORRS     r0,r0,r1              ;1981
0000b2  6821              LDR      r1,[r4,#0]            ;1981
0000b4  74c8              STRB     r0,[r1,#0x13]         ;1981
0000b6  e011              B        |L16.220|
                  |L16.184|
0000b8  6820              LDR      r0,[r4,#0]            ;1985
0000ba  7e00              LDRB     r0,[r0,#0x18]         ;1985
0000bc  210c              MOVS     r1,#0xc               ;1985
0000be  4388              BICS     r0,r0,r1              ;1985
0000c0  6821              LDR      r1,[r4,#0]            ;1985
0000c2  7608              STRB     r0,[r1,#0x18]         ;1985
0000c4  6820              LDR      r0,[r4,#0]            ;1986
0000c6  7cc0              LDRB     r0,[r0,#0x13]         ;1986
0000c8  21c0              MOVS     r1,#0xc0              ;1986
0000ca  4308              ORRS     r0,r0,r1              ;1986
0000cc  6821              LDR      r1,[r4,#0]            ;1986
0000ce  74c8              STRB     r0,[r1,#0x13]         ;1986
0000d0  6820              LDR      r0,[r4,#0]            ;1987
0000d2  7e00              LDRB     r0,[r0,#0x18]         ;1987
0000d4  210c              MOVS     r1,#0xc               ;1987
0000d6  4308              ORRS     r0,r0,r1              ;1987
0000d8  6821              LDR      r1,[r4,#0]            ;1987
0000da  7608              STRB     r0,[r1,#0x18]         ;1987
                  |L16.220|
0000dc  2002              MOVS     r0,#2                 ;1990
0000de  e79f              B        |L16.32|
                  |L16.224|
0000e0  2002              MOVS     r0,#2                 ;1995
0000e2  e79d              B        |L16.32|
;;;1998   
                          ENDP

                  |L16.228|
                          DCD      SPI_DMATransmitReceiveCplt
                  |L16.232|
                          DCD      SPI_DMAHalfTransmitReceiveCplt
                  |L16.236|
                          DCD      SPI_DMAError

                          AREA ||i.MID_SPI_TransmitReceive_IT||, CODE, READONLY, ALIGN=2

                  MID_SPI_TransmitReceive_IT PROC
;;;1618    */
;;;1619   MID_StatusTypeDef MID_SPI_TransmitReceive_IT(SPI_HandleTypeDef *mSPI, uint8_t *pTxData, uint8_t *pRxData, uint32_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1620   {
000002  4604              MOV      r4,r0
;;;1621   //    uint32_t tmp = 0U;
;;;1622       MID_StatusTypeDef errorcode = MID_OK;
000004  2500              MOVS     r5,#0
;;;1623   
;;;1624   
;;;1625   
;;;1626       // In this case, 32-bit access is performed on data source, Chcek Data is 32-bit aligned addrees
;;;1627       if ((mSPI->Init.DataSize > SPI_DATASIZE_16BIT) || 
000006  68e0              LDR      r0,[r4,#0xc]
000008  2810              CMP      r0,#0x10
00000a  d80c              BHI      |L17.38|
;;;1628           ((Size > 1U) && (mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT)) ||
00000c  2b01              CMP      r3,#1
00000e  d905              BLS      |L17.28|
000010  68e0              LDR      r0,[r4,#0xc]
000012  2808              CMP      r0,#8
000014  d902              BLS      |L17.28|
000016  68e0              LDR      r0,[r4,#0xc]
000018  2810              CMP      r0,#0x10
00001a  d904              BLS      |L17.38|
                  |L17.28|
;;;1629           ((Size > 3U) && (mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)))
00001c  2b03              CMP      r3,#3
00001e  d903              BLS      |L17.40|
000020  68e0              LDR      r0,[r4,#0xc]
000022  2808              CMP      r0,#8
000024  d800              BHI      |L17.40|
                  |L17.38|
;;;1630       {   // Check 32 bit access address aligned
;;;1631           assert_param(IS_SPI_32BIT_ALIGNED_ADDRESS(pTxData));
;;;1632           assert_param(IS_SPI_32BIT_ALIGNED_ADDRESS(pRxData));
000026  e008              B        |L17.58|
                  |L17.40|
;;;1633       }
;;;1634       else
;;;1635       {   // Check 16 bit access address aligned
;;;1636           if((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) || ((Size > 1U) && (mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)))
000028  68e0              LDR      r0,[r4,#0xc]
00002a  2808              CMP      r0,#8
00002c  d804              BHI      |L17.56|
00002e  2b01              CMP      r3,#1
000030  d903              BLS      |L17.58|
000032  68e0              LDR      r0,[r4,#0xc]
000034  2808              CMP      r0,#8
000036  d800              BHI      |L17.58|
                  |L17.56|
;;;1637           {   // Check 16 bit access address aligned
;;;1638               assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pTxData));
;;;1639               assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pRxData));
000038  bf00              NOP      
                  |L17.58|
;;;1640           }
;;;1641       }
;;;1642   
;;;1643       /* Check Direction parameter */
;;;1644       assert_param(IS_SPI_DIRECTION_2LINES(mSPI->Init.Direction));
;;;1645   
;;;1646       /* Process locked */
;;;1647       __MID_LOCK(mSPI);
00003a  bf00              NOP      
00003c  2088              MOVS     r0,#0x88
00003e  5d00              LDRB     r0,[r0,r4]
000040  2801              CMP      r0,#1
000042  d101              BNE      |L17.72|
000044  2002              MOVS     r0,#2
                  |L17.70|
;;;1648   
;;;1649   //    tmp  = mSPI->State;
;;;1650   
;;;1651       if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
;;;1652       {
;;;1653           errorcode = MID_ERROR;
;;;1654           goto error;
;;;1655       }
;;;1656   
;;;1657       /* Don't overwrite in case of MID_SPI_STATE_BUSY_RX */
;;;1658       if (mSPI->State != MID_SPI_STATE_BUSY_RX)
;;;1659       {
;;;1660           mSPI->State = MID_SPI_STATE_BUSY_TX_RX;
;;;1661       }
;;;1662   
;;;1663       /* Set the transaction information */
;;;1664       mSPI->ErrorCode   = MID_SPI_ERROR_NONE;
;;;1665       mSPI->pTxBuffPtr  = (uint8_t *)pTxData;
;;;1666       mSPI->TxXferSize  = Size;
;;;1667       mSPI->TxXferCount = Size;
;;;1668       mSPI->pRxBuffPtr  = (uint8_t *)pRxData;
;;;1669       mSPI->RxXferSize  = Size;
;;;1670       mSPI->RxXferCount = Size;
;;;1671   
;;;1672       /* Check if the SPI is already enabled */
;;;1673       if((mSPI->Instance->CR0.W & SPI_CR0_EN_mask_w)==0)
;;;1674       {
;;;1675           /* Enable SPI peripheral */
;;;1676           __MID_SPI_ENABLE(mSPI);
;;;1677       }
;;;1678   
;;;1679       /* Set the function for IT treatment */
;;;1680       // When data size > 16bit
;;;1681       if (mSPI->Init.DataSize > SPI_DATASIZE_16BIT)
;;;1682       {
;;;1683           mSPI->RxISR     = SPI_2linesRxISR_32BIT;
;;;1684           mSPI->TxISR     = SPI_2linesTxISR_32BIT;
;;;1685       }
;;;1686       else
;;;1687       {   // When data size <= 16bit and data size > 8bit 
;;;1688           if(mSPI->Init.DataSize > SPI_DATASIZE_8BIT)
;;;1689           {
;;;1690               mSPI->RxISR     = SPI_2linesRxISR_16BIT;
;;;1691               mSPI->TxISR     = SPI_2linesTxISR_16BIT;
;;;1692           }
;;;1693           // When data size <= 8bit
;;;1694           else
;;;1695           {
;;;1696               mSPI->RxISR     = SPI_2linesRxISR_8BIT;
;;;1697               mSPI->TxISR     = SPI_2linesTxISR_8BIT;
;;;1698           }
;;;1699       }
;;;1700   
;;;1701   
;;;1702       /* Set the Rx Fifo threshold */
;;;1703       // For slave mode RX_TH setting
;;;1704       
;;;1705       // Set RX_TH = 1 bytes
;;;1706       *mSPI->RX_TH = 0;
;;;1707           
;;;1708       // Set RX_TH = 2 bytes
;;;1709       // Data size = 9bit ~ 16bit
;;;1710       // Data size = 4bit ~ 8bit and RxXferCount > 1
;;;1711       if(((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT)) || \
;;;1712         ((mSPI->Init.DataSize <= SPI_DATASIZE_8BIT) && (mSPI->RxXferCount > 1U)))
;;;1713       {
;;;1714           *mSPI->RX_TH = 1;
;;;1715       }
;;;1716   
;;;1717       // Set RX_TH = 3 bytes
;;;1718       // Data size = 17bit ~ 24bit
;;;1719       // Data size = 4bit ~ 8bit and RxXferCount > 2
;;;1720       if(((mSPI->Init.DataSize > SPI_DATASIZE_16BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_24BIT)) || \
;;;1721          ((mSPI->Init.DataSize <= SPI_DATASIZE_8BIT) && (mSPI->RxXferCount > 2U)))
;;;1722       {
;;;1723           *mSPI->RX_TH = 2;
;;;1724       }
;;;1725   
;;;1726       // Set RX_TH = 4 bytes
;;;1727       // Data size = 25bit ~ 32bit
;;;1728       // Data size = 9bit ~ 16bit and RxXferCount > 1
;;;1729       // Data size = 4bit ~ 8bit and RxXferCount > 3
;;;1730       if((mSPI->Init.DataSize > SPI_DATASIZE_24BIT) || \
;;;1731          ((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT) && (mSPI->RxXferCount > 2U)) || \
;;;1732          ((mSPI->Init.DataSize <= SPI_DATASIZE_8BIT) && (mSPI->RxXferCount > 3U)))
;;;1733       {
;;;1734           *mSPI->RX_TH = 3;
;;;1735       }
;;;1736       
;;;1737   
;;;1738   
;;;1739       /* Enable TXE, RXNE and ERR interrupt */
;;;1740       mSPI->TxRxStartEvent = 1;
;;;1741       __MID_SPI_CLEAR_RXTXDATA(mSPI);
;;;1742       __MID_SPI_ENABLE_IT(mSPI, (SPI_IT_TXF | mSPI->SPI_FLAG_TCF | SPI_IT_RXF | mSPI->SPI_FLAG_ERROR | SPI_IT_IEA));
;;;1743   
;;;1744       // Trigger SPI intterupt
;;;1745   #if (defined(MG32_2ND) || defined(MG32_3RD))
;;;1746       if(mSPI->REG_TYPE == MID_SPI_SPI)
;;;1747           __NVIC_SetPendingIRQ((IRQn_Type) mSPI->SPI_IRQ);
;;;1748   #endif
;;;1749   
;;;1750   error :
;;;1751       /* Process Unlocked */
;;;1752       __MID_UNLOCK(mSPI);
;;;1753       return errorcode;
;;;1754   }
000046  bd70              POP      {r4-r6,pc}
                  |L17.72|
000048  2601              MOVS     r6,#1                 ;1647
00004a  2088              MOVS     r0,#0x88              ;1647
00004c  5506              STRB     r6,[r0,r4]            ;1647
00004e  bf00              NOP                            ;1647
000050  2900              CMP      r1,#0                 ;1651
000052  d003              BEQ      |L17.92|
000054  2a00              CMP      r2,#0                 ;1651
000056  d001              BEQ      |L17.92|
000058  2b00              CMP      r3,#0                 ;1651
00005a  d101              BNE      |L17.96|
                  |L17.92|
00005c  2501              MOVS     r5,#1                 ;1653
00005e  e07d              B        |L17.348|
                  |L17.96|
000060  2089              MOVS     r0,#0x89              ;1658
000062  5d00              LDRB     r0,[r0,r4]            ;1658
000064  2804              CMP      r0,#4                 ;1658
000066  d002              BEQ      |L17.110|
000068  2605              MOVS     r6,#5                 ;1660
00006a  2089              MOVS     r0,#0x89              ;1660
00006c  5506              STRB     r6,[r0,r4]            ;1660
                  |L17.110|
00006e  2600              MOVS     r6,#0                 ;1664
000070  208c              MOVS     r0,#0x8c              ;1664
000072  5106              STR      r6,[r0,r4]            ;1664
000074  6361              STR      r1,[r4,#0x34]         ;1665
000076  63a3              STR      r3,[r4,#0x38]         ;1666
000078  63e3              STR      r3,[r4,#0x3c]         ;1667
00007a  6422              STR      r2,[r4,#0x40]         ;1668
00007c  6463              STR      r3,[r4,#0x44]         ;1669
00007e  64a3              STR      r3,[r4,#0x48]         ;1670
000080  6820              LDR      r0,[r4,#0]            ;1673
000082  6900              LDR      r0,[r0,#0x10]         ;1673
000084  07c0              LSLS     r0,r0,#31             ;1673
000086  0fc0              LSRS     r0,r0,#31             ;1673
000088  2800              CMP      r0,#0                 ;1673
00008a  d105              BNE      |L17.152|
00008c  6820              LDR      r0,[r4,#0]            ;1676
00008e  6900              LDR      r0,[r0,#0x10]         ;1676
000090  2601              MOVS     r6,#1                 ;1676
000092  4330              ORRS     r0,r0,r6              ;1676
000094  6826              LDR      r6,[r4,#0]            ;1676
000096  6130              STR      r0,[r6,#0x10]         ;1676
                  |L17.152|
000098  68e0              LDR      r0,[r4,#0xc]          ;1681
00009a  2810              CMP      r0,#0x10              ;1681
00009c  d904              BLS      |L17.168|
00009e  4833              LDR      r0,|L17.364|
0000a0  6520              STR      r0,[r4,#0x50]         ;1683
0000a2  4833              LDR      r0,|L17.368|
0000a4  6560              STR      r0,[r4,#0x54]         ;1684
0000a6  e00b              B        |L17.192|
                  |L17.168|
0000a8  68e0              LDR      r0,[r4,#0xc]          ;1688
0000aa  2808              CMP      r0,#8                 ;1688
0000ac  d904              BLS      |L17.184|
0000ae  4831              LDR      r0,|L17.372|
0000b0  6520              STR      r0,[r4,#0x50]         ;1690
0000b2  4831              LDR      r0,|L17.376|
0000b4  6560              STR      r0,[r4,#0x54]         ;1691
0000b6  e003              B        |L17.192|
                  |L17.184|
0000b8  4830              LDR      r0,|L17.380|
0000ba  6520              STR      r0,[r4,#0x50]         ;1696
0000bc  4830              LDR      r0,|L17.384|
0000be  6560              STR      r0,[r4,#0x54]         ;1697
                  |L17.192|
0000c0  2000              MOVS     r0,#0                 ;1706
0000c2  6fa6              LDR      r6,[r4,#0x78]         ;1706
0000c4  7030              STRB     r0,[r6,#0]            ;1706
0000c6  68e0              LDR      r0,[r4,#0xc]          ;1711
0000c8  2808              CMP      r0,#8                 ;1711
0000ca  d902              BLS      |L17.210|
0000cc  68e0              LDR      r0,[r4,#0xc]          ;1711
0000ce  2810              CMP      r0,#0x10              ;1711
0000d0  d905              BLS      |L17.222|
                  |L17.210|
0000d2  68e0              LDR      r0,[r4,#0xc]          ;1712
0000d4  2808              CMP      r0,#8                 ;1712
0000d6  d805              BHI      |L17.228|
0000d8  6ca0              LDR      r0,[r4,#0x48]         ;1712
0000da  2801              CMP      r0,#1                 ;1712
0000dc  d902              BLS      |L17.228|
                  |L17.222|
0000de  2001              MOVS     r0,#1                 ;1714
0000e0  6fa6              LDR      r6,[r4,#0x78]         ;1714
0000e2  7030              STRB     r0,[r6,#0]            ;1714
                  |L17.228|
0000e4  68e0              LDR      r0,[r4,#0xc]          ;1720
0000e6  2810              CMP      r0,#0x10              ;1720
0000e8  d902              BLS      |L17.240|
0000ea  68e0              LDR      r0,[r4,#0xc]          ;1720
0000ec  2818              CMP      r0,#0x18              ;1720
0000ee  d905              BLS      |L17.252|
                  |L17.240|
0000f0  68e0              LDR      r0,[r4,#0xc]          ;1721
0000f2  2808              CMP      r0,#8                 ;1721
0000f4  d805              BHI      |L17.258|
0000f6  6ca0              LDR      r0,[r4,#0x48]         ;1721
0000f8  2802              CMP      r0,#2                 ;1721
0000fa  d902              BLS      |L17.258|
                  |L17.252|
0000fc  2002              MOVS     r0,#2                 ;1723
0000fe  6fa6              LDR      r6,[r4,#0x78]         ;1723
000100  7030              STRB     r0,[r6,#0]            ;1723
                  |L17.258|
000102  68e0              LDR      r0,[r4,#0xc]          ;1730
000104  2818              CMP      r0,#0x18              ;1730
000106  d80e              BHI      |L17.294|
000108  68e0              LDR      r0,[r4,#0xc]          ;1731
00010a  2808              CMP      r0,#8                 ;1731
00010c  d905              BLS      |L17.282|
00010e  68e0              LDR      r0,[r4,#0xc]          ;1731
000110  2810              CMP      r0,#0x10              ;1731
000112  d802              BHI      |L17.282|
000114  6ca0              LDR      r0,[r4,#0x48]         ;1731
000116  2802              CMP      r0,#2                 ;1731
000118  d805              BHI      |L17.294|
                  |L17.282|
00011a  68e0              LDR      r0,[r4,#0xc]          ;1732
00011c  2808              CMP      r0,#8                 ;1732
00011e  d805              BHI      |L17.300|
000120  6ca0              LDR      r0,[r4,#0x48]         ;1732
000122  2803              CMP      r0,#3                 ;1732
000124  d902              BLS      |L17.300|
                  |L17.294|
000126  2003              MOVS     r0,#3                 ;1734
000128  6fa6              LDR      r6,[r4,#0x78]         ;1734
00012a  7030              STRB     r0,[r6,#0]            ;1734
                  |L17.300|
00012c  2601              MOVS     r6,#1                 ;1740
00012e  2090              MOVS     r0,#0x90              ;1740
000130  5506              STRB     r6,[r0,r4]            ;1740
000132  2080              MOVS     r0,#0x80              ;1741
000134  5900              LDR      r0,[r0,r4]            ;1741
000136  7800              LDRB     r0,[r0,#0]            ;1741
000138  26c3              MOVS     r6,#0xc3              ;1741
00013a  4330              ORRS     r0,r0,r6              ;1741
00013c  2680              MOVS     r6,#0x80              ;1741
00013e  5936              LDR      r6,[r6,r4]            ;1741
000140  7030              STRB     r0,[r6,#0]            ;1741
000142  26c0              MOVS     r6,#0xc0              ;1742
000144  6f60              LDR      r0,[r4,#0x74]         ;1742
000146  4330              ORRS     r0,r0,r6              ;1742
000148  6ee6              LDR      r6,[r4,#0x6c]         ;1742
00014a  4330              ORRS     r0,r0,r6              ;1742
00014c  2601              MOVS     r6,#1                 ;1742
00014e  4330              ORRS     r0,r0,r6              ;1742
000150  6826              LDR      r6,[r4,#0]            ;1742
000152  6876              LDR      r6,[r6,#4]            ;1742
000154  4330              ORRS     r0,r0,r6              ;1742
000156  6826              LDR      r6,[r4,#0]            ;1742
000158  6070              STR      r0,[r6,#4]            ;1742
00015a  bf00              NOP                            ;1750
                  |L17.348|
00015c  bf00              NOP                            ;1752
00015e  2600              MOVS     r6,#0                 ;1752
000160  2088              MOVS     r0,#0x88              ;1752
000162  5506              STRB     r6,[r0,r4]            ;1752
000164  bf00              NOP                            ;1752
000166  4628              MOV      r0,r5                 ;1753
000168  e76d              B        |L17.70|
;;;1755   
                          ENDP

00016a  0000              DCW      0x0000
                  |L17.364|
                          DCD      SPI_2linesRxISR_32BIT
                  |L17.368|
                          DCD      SPI_2linesTxISR_32BIT
                  |L17.372|
                          DCD      SPI_2linesRxISR_16BIT
                  |L17.376|
                          DCD      SPI_2linesTxISR_16BIT
                  |L17.380|
                          DCD      SPI_2linesRxISR_8BIT
                  |L17.384|
                          DCD      SPI_2linesTxISR_8BIT

                          AREA ||i.MID_SPI_Transmit_DMA||, CODE, READONLY, ALIGN=2

                  MID_SPI_Transmit_DMA PROC
;;;1773    */
;;;1774   MID_StatusTypeDef MID_SPI_Transmit_DMA(SPI_HandleTypeDef *mSPI,  uint8_t *pData, uint32_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1775   { 
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1776       // When DMA is ready
;;;1777       if(mSPI->State == MID_SPI_STATE_READY)
000008  2089              MOVS     r0,#0x89
00000a  5d00              LDRB     r0,[r0,r4]
00000c  2801              CMP      r0,#1
00000e  d14d              BNE      |L18.172|
;;;1778       {
;;;1779           // When parameter "pData" and Size not zero.
;;;1780           if((pData == NULL) || (Size == 0U))
000010  2e00              CMP      r6,#0
000012  d001              BEQ      |L18.24|
000014  2d00              CMP      r5,#0
000016  d101              BNE      |L18.28|
                  |L18.24|
;;;1781           {
;;;1782               return(MID_ERROR);
000018  2001              MOVS     r0,#1
                  |L18.26|
;;;1783           }
;;;1784           
;;;1785           //Process Locked 
;;;1786           __MID_LOCK(mSPI);
;;;1787           
;;;1788           // Change DMA peripheral state
;;;1789           mSPI->pTxBuffPtr = pData;
;;;1790           mSPI->TxXferSize = Size;
;;;1791           mSPI->TxXferCount = Size;
;;;1792           
;;;1793           mSPI->ErrorCode = MID_SPI_ERROR_NONE;
;;;1794           mSPI->State = MID_SPI_STATE_BUSY_TX;
;;;1795           
;;;1796           //Set the mSPI DMA transfer complete callback.
;;;1797           mSPI->mDMATX->XferCpltCallback = SPI_DMATransmitCplt;
;;;1798           
;;;1799           //Set the UART DMA Half transfer complete callback
;;;1800           mSPI->mDMATX->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
;;;1801           
;;;1802           //Set the DMA error callback 
;;;1803           mSPI->mDMATX->XferErrorCallback = SPI_DMAError;
;;;1804           
;;;1805           //Set the DMA abort callback
;;;1806           mSPI->mDMATX->XferAbortCallback = NULL;
;;;1807   
;;;1808           /* Configure the source, destination address and the data length */
;;;1809           if(mSPI->REG_TYPE == MID_SPI_SPI)
;;;1810           {
;;;1811               mSPI->Instance->CR0.B[3] |= SPI_CR0_DMA_TXEN_mask_b3;
;;;1812           }
;;;1813           else
;;;1814           {
;;;1815               mSPI->Instance->CR2.B[0] &= (~URT_CR2_TX_EN_mask_b0);
;;;1816               mSPI->Instance->CR0.B[3] |= SPI_CR0_DMA_TXEN_mask_b3;
;;;1817               mSPI->Instance->CR2.B[0] |= URT_CR2_TX_EN_mask_b0;
;;;1818           }
;;;1819   
;;;1820           MID_DMA_Start_IT(mSPI->mDMATX, (uint32_t) mSPI->pTxBuffPtr, (uint32_t)&mSPI->Instance->TDAT.W, Size);
;;;1821   
;;;1822           return(MID_BUSY);
;;;1823       }
;;;1824       else
;;;1825       {
;;;1826           /* Remain BUSY */
;;;1827           return(MID_BUSY);
;;;1828       }  
;;;1829   }
00001a  bd70              POP      {r4-r6,pc}
                  |L18.28|
00001c  bf00              NOP                            ;1786
00001e  2088              MOVS     r0,#0x88              ;1786
000020  5d00              LDRB     r0,[r0,r4]            ;1786
000022  2801              CMP      r0,#1                 ;1786
000024  d101              BNE      |L18.42|
000026  2002              MOVS     r0,#2                 ;1786
000028  e7f7              B        |L18.26|
                  |L18.42|
00002a  2101              MOVS     r1,#1                 ;1786
00002c  2088              MOVS     r0,#0x88              ;1786
00002e  5501              STRB     r1,[r0,r4]            ;1786
000030  bf00              NOP                            ;1786
000032  6366              STR      r6,[r4,#0x34]         ;1789
000034  63a5              STR      r5,[r4,#0x38]         ;1790
000036  63e5              STR      r5,[r4,#0x3c]         ;1791
000038  2100              MOVS     r1,#0                 ;1793
00003a  208c              MOVS     r0,#0x8c              ;1793
00003c  5101              STR      r1,[r0,r4]            ;1793
00003e  2103              MOVS     r1,#3                 ;1794
000040  2089              MOVS     r0,#0x89              ;1794
000042  5501              STRB     r1,[r0,r4]            ;1794
000044  481a              LDR      r0,|L18.176|
000046  6da1              LDR      r1,[r4,#0x58]         ;1797
000048  62c8              STR      r0,[r1,#0x2c]         ;1797
00004a  481a              LDR      r0,|L18.180|
00004c  6da1              LDR      r1,[r4,#0x58]         ;1800
00004e  6308              STR      r0,[r1,#0x30]         ;1800
000050  4819              LDR      r0,|L18.184|
000052  6da1              LDR      r1,[r4,#0x58]         ;1803
000054  6348              STR      r0,[r1,#0x34]         ;1803
000056  2000              MOVS     r0,#0                 ;1806
000058  6da1              LDR      r1,[r4,#0x58]         ;1806
00005a  6388              STR      r0,[r1,#0x38]         ;1806
00005c  2153              MOVS     r1,#0x53              ;1809
00005e  0609              LSLS     r1,r1,#24             ;1809
000060  6b20              LDR      r0,[r4,#0x30]         ;1809
000062  4288              CMP      r0,r1                 ;1809
000064  d106              BNE      |L18.116|
000066  6820              LDR      r0,[r4,#0]            ;1811
000068  7cc0              LDRB     r0,[r0,#0x13]         ;1811
00006a  2180              MOVS     r1,#0x80              ;1811
00006c  4308              ORRS     r0,r0,r1              ;1811
00006e  6821              LDR      r1,[r4,#0]            ;1811
000070  74c8              STRB     r0,[r1,#0x13]         ;1811
000072  e011              B        |L18.152|
                  |L18.116|
000074  6820              LDR      r0,[r4,#0]            ;1815
000076  7e00              LDRB     r0,[r0,#0x18]         ;1815
000078  2108              MOVS     r1,#8                 ;1815
00007a  4388              BICS     r0,r0,r1              ;1815
00007c  6821              LDR      r1,[r4,#0]            ;1815
00007e  7608              STRB     r0,[r1,#0x18]         ;1815
000080  6820              LDR      r0,[r4,#0]            ;1816
000082  7cc0              LDRB     r0,[r0,#0x13]         ;1816
000084  2180              MOVS     r1,#0x80              ;1816
000086  4308              ORRS     r0,r0,r1              ;1816
000088  6821              LDR      r1,[r4,#0]            ;1816
00008a  74c8              STRB     r0,[r1,#0x13]         ;1816
00008c  6820              LDR      r0,[r4,#0]            ;1817
00008e  7e00              LDRB     r0,[r0,#0x18]         ;1817
000090  2108              MOVS     r1,#8                 ;1817
000092  4308              ORRS     r0,r0,r1              ;1817
000094  6821              LDR      r1,[r4,#0]            ;1817
000096  7608              STRB     r0,[r1,#0x18]         ;1817
                  |L18.152|
000098  6823              LDR      r3,[r4,#0]            ;1820
00009a  461a              MOV      r2,r3                 ;1820
00009c  3234              ADDS     r2,r2,#0x34           ;1820
00009e  462b              MOV      r3,r5                 ;1820
0000a0  6b61              LDR      r1,[r4,#0x34]         ;1820
0000a2  6da0              LDR      r0,[r4,#0x58]         ;1820
0000a4  f7fffffe          BL       MID_DMA_Start_IT
0000a8  2002              MOVS     r0,#2                 ;1822
0000aa  e7b6              B        |L18.26|
                  |L18.172|
0000ac  2002              MOVS     r0,#2                 ;1827
0000ae  e7b4              B        |L18.26|
;;;1830   
                          ENDP

                  |L18.176|
                          DCD      SPI_DMATransmitCplt
                  |L18.180|
                          DCD      SPI_DMAHalfTransmitCplt
                  |L18.184|
                          DCD      SPI_DMAError

                          AREA ||i.MID_SPI_Transmit_IT||, CODE, READONLY, ALIGN=2

                  MID_SPI_Transmit_IT PROC
;;;1362    */
;;;1363   MID_StatusTypeDef MID_SPI_Transmit_IT(SPI_HandleTypeDef *mSPI, uint8_t *pData, uint32_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1364   {
000002  4603              MOV      r3,r0
;;;1365       MID_StatusTypeDef errorcode = MID_OK;
000004  2400              MOVS     r4,#0
;;;1366   
;;;1367       
;;;1368       // In this case, 32-bit access is performed on data source, Chcek Data is 32-bit aligned addrees
;;;1369       if ((mSPI->Init.DataSize > SPI_DATASIZE_16BIT) || 
000006  68d8              LDR      r0,[r3,#0xc]
000008  2810              CMP      r0,#0x10
00000a  d80c              BHI      |L19.38|
;;;1370           ((Size > 1U) && (mSPI->Init.DataSize > SPI_DATASIZE_8BIT) && (mSPI->Init.DataSize <= SPI_DATASIZE_16BIT)) ||
00000c  2a01              CMP      r2,#1
00000e  d905              BLS      |L19.28|
000010  68d8              LDR      r0,[r3,#0xc]
000012  2808              CMP      r0,#8
000014  d902              BLS      |L19.28|
000016  68d8              LDR      r0,[r3,#0xc]
000018  2810              CMP      r0,#0x10
00001a  d904              BLS      |L19.38|
                  |L19.28|
;;;1371           ((Size > 3U) && (mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)))
00001c  2a03              CMP      r2,#3
00001e  d903              BLS      |L19.40|
000020  68d8              LDR      r0,[r3,#0xc]
000022  2808              CMP      r0,#8
000024  d800              BHI      |L19.40|
                  |L19.38|
;;;1372       {   // Check 32 bit access address aligned
;;;1373           assert_param(IS_SPI_32BIT_ALIGNED_ADDRESS(pTxData));
000026  e008              B        |L19.58|
                  |L19.40|
;;;1374       }
;;;1375       else
;;;1376       {   // Check 16 bit access address aligned
;;;1377           if((mSPI->Init.DataSize > SPI_DATASIZE_8BIT) || ((Size > 1U) && (mSPI->Init.DataSize <= SPI_DATASIZE_8BIT)))
000028  68d8              LDR      r0,[r3,#0xc]
00002a  2808              CMP      r0,#8
00002c  d804              BHI      |L19.56|
00002e  2a01              CMP      r2,#1
000030  d903              BLS      |L19.58|
000032  68d8              LDR      r0,[r3,#0xc]
000034  2808              CMP      r0,#8
000036  d800              BHI      |L19.58|
                  |L19.56|
;;;1378           {   // Check 16 bit access address aligned
;;;1379               assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pTxData));
000038  bf00              NOP      
                  |L19.58|
;;;1380           }
;;;1381       }
;;;1382   
;;;1383       /* Process Locked */
;;;1384       __MID_LOCK(mSPI);
00003a  bf00              NOP      
00003c  2088              MOVS     r0,#0x88
00003e  5cc0              LDRB     r0,[r0,r3]
000040  2801              CMP      r0,#1
000042  d101              BNE      |L19.72|
000044  2002              MOVS     r0,#2
                  |L19.70|
;;;1385   
;;;1386       // When transfer data not index or SPI data size is 0 bytes
;;;1387       if ((pData == NULL) || (Size == 0U))
;;;1388       {
;;;1389           errorcode = MID_ERROR;
;;;1390           goto error;
;;;1391       }
;;;1392   
;;;1393       if (mSPI->State != MID_SPI_STATE_READY)
;;;1394       {
;;;1395           errorcode = MID_BUSY;
;;;1396           goto error;
;;;1397       }
;;;1398   
;;;1399       /* Set the transaction information */
;;;1400       mSPI->State       = MID_SPI_STATE_BUSY_TX;
;;;1401       mSPI->ErrorCode   = MID_SPI_ERROR_NONE;
;;;1402       mSPI->pTxBuffPtr  = (uint8_t *)pData;
;;;1403       mSPI->TxXferSize  = Size;
;;;1404       mSPI->TxXferCount = Size;
;;;1405   
;;;1406       /* Init field not used in handle to zero */
;;;1407       mSPI->pRxBuffPtr  = (uint8_t *)NULL;
;;;1408       mSPI->RxXferSize  = 0U;
;;;1409       mSPI->RxXferCount = 0U;
;;;1410       mSPI->RxISR       = NULL;
;;;1411   
;;;1412       /* Set the function for IT treatment */
;;;1413       // When data sizes > 16 bit
;;;1414       if(mSPI->Init.DataSize > SPI_DATASIZE_16BIT)
;;;1415       {
;;;1416           mSPI->TxISR = SPI_TxISR_32BIT;
;;;1417       }
;;;1418       else
;;;1419       {   // When data sizes > 8 bit
;;;1420           if(mSPI->Init.DataSize > SPI_DATASIZE_8BIT)
;;;1421           {
;;;1422               mSPI->TxISR = SPI_TxISR_16BIT;
;;;1423           }
;;;1424           // When data sizes <= 8 bit
;;;1425           else
;;;1426           {
;;;1427               mSPI->TxISR = SPI_TxISR_8BIT;
;;;1428           }
;;;1429       }
;;;1430   
;;;1431       /* Check if the SPI is already enabled */
;;;1432       if((mSPI->Instance->CR0.W & SPI_CR0_EN_mask_w )== 0)
;;;1433       {
;;;1434           // Enable SPI peripheral
;;;1435           __MID_SPI_ENABLE(mSPI);
;;;1436       }
;;;1437       
;;;1438       
;;;1439       /* Enable TXE and ERR interrupt */
;;;1440   #if (defined(MG32_2ND) || defined(MG32_3RD))
;;;1441       mSPI->TxRxStartEvent = 1;
;;;1442   #endif
;;;1443       __MID_SPI_CLEAR_TXDATA(mSPI);
;;;1444       __MID_SPI_ENABLE_IT(mSPI, (SPI_IT_TXF | mSPI->SPI_FLAG_TUDRF | SPI_IT_MODF | SPI_IT_WEF | SPI_IT_IEA));
;;;1445   
;;;1446       // Trigger SPI intterupt
;;;1447   #if (defined(MG32_2ND) || defined(MG32_3RD))
;;;1448       if(mSPI->REG_TYPE == MID_SPI_SPI)
;;;1449           __NVIC_SetPendingIRQ((IRQn_Type) mSPI->SPI_IRQ);
;;;1450   #endif
;;;1451       
;;;1452   error :
;;;1453       __MID_UNLOCK(mSPI);
;;;1454       return errorcode;
;;;1455   }
000046  bd70              POP      {r4-r6,pc}
                  |L19.72|
000048  2501              MOVS     r5,#1                 ;1384
00004a  2088              MOVS     r0,#0x88              ;1384
00004c  54c5              STRB     r5,[r0,r3]            ;1384
00004e  bf00              NOP                            ;1384
000050  2900              CMP      r1,#0                 ;1387
000052  d001              BEQ      |L19.88|
000054  2a00              CMP      r2,#0                 ;1387
000056  d101              BNE      |L19.92|
                  |L19.88|
000058  2401              MOVS     r4,#1                 ;1389
00005a  e03e              B        |L19.218|
                  |L19.92|
00005c  2089              MOVS     r0,#0x89              ;1393
00005e  5cc0              LDRB     r0,[r0,r3]            ;1393
000060  2801              CMP      r0,#1                 ;1393
000062  d001              BEQ      |L19.104|
000064  2402              MOVS     r4,#2                 ;1395
000066  e038              B        |L19.218|
                  |L19.104|
000068  2503              MOVS     r5,#3                 ;1400
00006a  2089              MOVS     r0,#0x89              ;1400
00006c  54c5              STRB     r5,[r0,r3]            ;1400
00006e  2500              MOVS     r5,#0                 ;1401
000070  208c              MOVS     r0,#0x8c              ;1401
000072  50c5              STR      r5,[r0,r3]            ;1401
000074  6359              STR      r1,[r3,#0x34]         ;1402
000076  639a              STR      r2,[r3,#0x38]         ;1403
000078  63da              STR      r2,[r3,#0x3c]         ;1404
00007a  2000              MOVS     r0,#0                 ;1407
00007c  6418              STR      r0,[r3,#0x40]         ;1407
00007e  6458              STR      r0,[r3,#0x44]         ;1408
000080  6498              STR      r0,[r3,#0x48]         ;1409
000082  6518              STR      r0,[r3,#0x50]         ;1410
000084  68d8              LDR      r0,[r3,#0xc]          ;1414
000086  2810              CMP      r0,#0x10              ;1414
000088  d902              BLS      |L19.144|
00008a  4817              LDR      r0,|L19.232|
00008c  6558              STR      r0,[r3,#0x54]         ;1416
00008e  e007              B        |L19.160|
                  |L19.144|
000090  68d8              LDR      r0,[r3,#0xc]          ;1420
000092  2808              CMP      r0,#8                 ;1420
000094  d902              BLS      |L19.156|
000096  4815              LDR      r0,|L19.236|
000098  6558              STR      r0,[r3,#0x54]         ;1422
00009a  e001              B        |L19.160|
                  |L19.156|
00009c  4814              LDR      r0,|L19.240|
00009e  6558              STR      r0,[r3,#0x54]         ;1427
                  |L19.160|
0000a0  6818              LDR      r0,[r3,#0]            ;1432
0000a2  6900              LDR      r0,[r0,#0x10]         ;1432
0000a4  07c0              LSLS     r0,r0,#31             ;1432
0000a6  0fc0              LSRS     r0,r0,#31             ;1432
0000a8  2800              CMP      r0,#0                 ;1432
0000aa  d105              BNE      |L19.184|
0000ac  6818              LDR      r0,[r3,#0]            ;1435
0000ae  6900              LDR      r0,[r0,#0x10]         ;1435
0000b0  2501              MOVS     r5,#1                 ;1435
0000b2  4328              ORRS     r0,r0,r5              ;1435
0000b4  681d              LDR      r5,[r3,#0]            ;1435
0000b6  6128              STR      r0,[r5,#0x10]         ;1435
                  |L19.184|
0000b8  2080              MOVS     r0,#0x80              ;1443
0000ba  58c0              LDR      r0,[r0,r3]            ;1443
0000bc  7800              LDRB     r0,[r0,#0]            ;1443
0000be  2582              MOVS     r5,#0x82              ;1443
0000c0  4328              ORRS     r0,r0,r5              ;1443
0000c2  2580              MOVS     r5,#0x80              ;1443
0000c4  58ed              LDR      r5,[r5,r3]            ;1443
0000c6  7028              STRB     r0,[r5,#0]            ;1443
0000c8  6818              LDR      r0,[r3,#0]            ;1444
0000ca  6845              LDR      r5,[r0,#4]            ;1444
0000cc  4e09              LDR      r6,|L19.244|
0000ce  6e58              LDR      r0,[r3,#0x64]         ;1444
0000d0  4330              ORRS     r0,r0,r6              ;1444
0000d2  4305              ORRS     r5,r5,r0              ;1444
0000d4  6818              LDR      r0,[r3,#0]            ;1444
0000d6  6045              STR      r5,[r0,#4]            ;1444
0000d8  bf00              NOP                            ;1452
                  |L19.218|
0000da  bf00              NOP                            ;1453
0000dc  2500              MOVS     r5,#0                 ;1453
0000de  2088              MOVS     r0,#0x88              ;1453
0000e0  54c5              STRB     r5,[r0,r3]            ;1453
0000e2  bf00              NOP                            ;1453
0000e4  4620              MOV      r0,r4                 ;1454
0000e6  e7ae              B        |L19.70|
;;;1456   
                          ENDP

                  |L19.232|
                          DCD      SPI_TxISR_32BIT
                  |L19.236|
                          DCD      SPI_TxISR_16BIT
                  |L19.240|
                          DCD      SPI_TxISR_8BIT
                  |L19.244|
                          DCD      0x00000381

                          AREA ||i.MID_SPI_TxCpltCallback||, CODE, READONLY, ALIGN=1

                  MID_SPI_TxCpltCallback PROC
;;;2627    */
;;;2628   __weak void MID_SPI_TxCpltCallback(SPI_HandleTypeDef *mSPI)
000000  4770              BX       lr
;;;2629   {
;;;2630       UNUSED(mSPI);
;;;2631       // To do ...
;;;2632   }
;;;2633   
                          ENDP


                          AREA ||i.MID_SPI_TxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  MID_SPI_TxHalfCpltCallback PROC
;;;2693    */
;;;2694   __weak void MID_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *mSPI)
000000  4770              BX       lr
;;;2695   {
;;;2696       UNUSED(mSPI);
;;;2697       // To do ...
;;;2698   }
;;;2699   
                          ENDP


                          AREA ||i.MID_SPI_TxRxCpltCallback||, CODE, READONLY, ALIGN=1

                  MID_SPI_TxRxCpltCallback PROC
;;;2671    */
;;;2672   __weak void MID_SPI_TxRxCpltCallback(SPI_HandleTypeDef *mSPI)
000000  4770              BX       lr
;;;2673   {
;;;2674       UNUSED(mSPI);
;;;2675       // To do ...
;;;2676   }
;;;2677   
                          ENDP


                          AREA ||i.MID_SPI_TxRxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  MID_SPI_TxRxHalfCpltCallback PROC
;;;2737    */
;;;2738   __weak void MID_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *mSPI)
000000  4770              BX       lr
;;;2739   {
;;;2740       UNUSED(mSPI);
;;;2741       // To do ...
;;;2742   }
;;;2743   
                          ENDP


                          AREA ||i.SPI_2linesRxISR_16BIT||, CODE, READONLY, ALIGN=1

                  SPI_2linesRxISR_16BIT PROC
;;;3332    */
;;;3333   static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *mSPI)
000000  b570              PUSH     {r4-r6,lr}
;;;3334   {
000002  4604              MOV      r4,r0
;;;3335       uint8_t  SPI_2linesRXISR_16BIT_RXNUM;
;;;3336   
;;;3337       
;;;3338       SPI_2linesRXISR_16BIT_RXNUM = (*mSPI->RNUM) & SPI_STA_RNUM_mask_b3;
000004  2084              MOVS     r0,#0x84
000006  5900              LDR      r0,[r0,r4]
000008  7800              LDRB     r0,[r0,#0]
00000a  0745              LSLS     r5,r0,#29
00000c  0f6d              LSRS     r5,r5,#29
;;;3339       
;;;3340       
;;;3341       // When receive size >= 2
;;;3342       if( SPI_2linesRXISR_16BIT_RXNUM == 4)
00000e  2d04              CMP      r5,#4
000010  d10f              BNE      |L24.50|
;;;3343       {
;;;3344           // Get 2 16 bit data
;;;3345           *((uint32_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.W;
000012  6820              LDR      r0,[r4,#0]
000014  6b00              LDR      r0,[r0,#0x30]
000016  6c21              LDR      r1,[r4,#0x40]
000018  6008              STR      r0,[r1,#0]
;;;3346           mSPI->pRxBuffPtr += sizeof(uint32_t);
00001a  6c20              LDR      r0,[r4,#0x40]
00001c  1d00              ADDS     r0,r0,#4
00001e  6420              STR      r0,[r4,#0x40]
;;;3347           mSPI->RxXferCount -= 2;
000020  6ca0              LDR      r0,[r4,#0x48]
000022  1e80              SUBS     r0,r0,#2
000024  64a0              STR      r0,[r4,#0x48]
;;;3348           
;;;3349           if (mSPI->RxXferCount == 1)
000026  6ca0              LDR      r0,[r4,#0x48]
000028  2801              CMP      r0,#1
00002a  d10c              BNE      |L24.70|
;;;3350           {
;;;3351               // set fiforxthresold according the reception data length: 16bit
;;;3352               *mSPI->RX_TH = 1;
00002c  6fa1              LDR      r1,[r4,#0x78]
00002e  7008              STRB     r0,[r1,#0]
000030  e009              B        |L24.70|
                  |L24.50|
;;;3353           }
;;;3354           
;;;3355       }
;;;3356       else
;;;3357       {
;;;3358           // Get 16 bit data
;;;3359           *((uint16_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.H[0];
000032  6820              LDR      r0,[r4,#0]
000034  8e00              LDRH     r0,[r0,#0x30]
000036  6c21              LDR      r1,[r4,#0x40]
000038  8008              STRH     r0,[r1,#0]
;;;3360           mSPI->pRxBuffPtr += sizeof(uint16_t);
00003a  6c20              LDR      r0,[r4,#0x40]
00003c  1c80              ADDS     r0,r0,#2
00003e  6420              STR      r0,[r4,#0x40]
;;;3361           mSPI->RxXferCount--;
000040  6ca0              LDR      r0,[r4,#0x48]
000042  1e40              SUBS     r0,r0,#1
000044  64a0              STR      r0,[r4,#0x48]
                  |L24.70|
;;;3362           
;;;3363       }
;;;3364       
;;;3365       // Check the end of the reception
;;;3366       if (mSPI->RxXferCount == 0)
000046  6ca0              LDR      r0,[r4,#0x48]
000048  2800              CMP      r0,#0
00004a  d10d              BNE      |L24.104|
;;;3367       {
;;;3368           // Disable RXF and ERR interrupt
;;;3369           __MID_SPI_DISABLE_IT(mSPI, SPI_IT_RXF | mSPI->SPI_FLAG_ERROR);
00004c  6820              LDR      r0,[r4,#0]
00004e  6840              LDR      r0,[r0,#4]
000050  2240              MOVS     r2,#0x40
000052  6ee1              LDR      r1,[r4,#0x6c]
000054  4311              ORRS     r1,r1,r2
000056  4388              BICS     r0,r0,r1
000058  6821              LDR      r1,[r4,#0]
00005a  6048              STR      r0,[r1,#4]
;;;3370   
;;;3371           // Check the end of the transmission
;;;3372           if (mSPI->TxXferCount == 0U)
00005c  6be0              LDR      r0,[r4,#0x3c]
00005e  2800              CMP      r0,#0
000060  d102              BNE      |L24.104|
;;;3373           {
;;;3374               SPI_CloseRxTx_ISR(mSPI);
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       SPI_CloseRxTx_ISR
                  |L24.104|
;;;3375           }
;;;3376       }
;;;3377   }
000068  bd70              POP      {r4-r6,pc}
;;;3378   
                          ENDP


                          AREA ||i.SPI_2linesRxISR_32BIT||, CODE, READONLY, ALIGN=1

                  SPI_2linesRxISR_32BIT PROC
;;;3443    */
;;;3444   static void SPI_2linesRxISR_32BIT(struct __SPI_HandleTypeDef *mSPI)
000000  b510              PUSH     {r4,lr}
;;;3445   {
000002  4604              MOV      r4,r0
;;;3446       // Get 32 bit RX data
;;;3447       *((uint32_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.W;
000004  6820              LDR      r0,[r4,#0]
000006  6b00              LDR      r0,[r0,#0x30]
000008  6c21              LDR      r1,[r4,#0x40]
00000a  6008              STR      r0,[r1,#0]
;;;3448       mSPI->pRxBuffPtr += sizeof(uint32_t);
00000c  6c20              LDR      r0,[r4,#0x40]
00000e  1d00              ADDS     r0,r0,#4
000010  6420              STR      r0,[r4,#0x40]
;;;3449       mSPI->RxXferCount--;
000012  6ca0              LDR      r0,[r4,#0x48]
000014  1e40              SUBS     r0,r0,#1
000016  64a0              STR      r0,[r4,#0x48]
;;;3450   
;;;3451       // Check the end of the reception.
;;;3452       if (mSPI->RxXferCount == 0U)
000018  6ca0              LDR      r0,[r4,#0x48]
00001a  2800              CMP      r0,#0
00001c  d10d              BNE      |L25.58|
;;;3453       {
;;;3454           // Disable RXF and ERR interrupt
;;;3455           __MID_SPI_DISABLE_IT(mSPI, SPI_IT_RXF | mSPI->SPI_FLAG_ERROR);
00001e  6820              LDR      r0,[r4,#0]
000020  6840              LDR      r0,[r0,#4]
000022  2240              MOVS     r2,#0x40
000024  6ee1              LDR      r1,[r4,#0x6c]
000026  4311              ORRS     r1,r1,r2
000028  4388              BICS     r0,r0,r1
00002a  6821              LDR      r1,[r4,#0]
00002c  6048              STR      r0,[r1,#4]
;;;3456   
;;;3457           // Check the end of the transmission
;;;3458           if (mSPI->TxXferCount == 0U)
00002e  6be0              LDR      r0,[r4,#0x3c]
000030  2800              CMP      r0,#0
000032  d102              BNE      |L25.58|
;;;3459           {
;;;3460               SPI_CloseRxTx_ISR(mSPI);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       SPI_CloseRxTx_ISR
                  |L25.58|
;;;3461           }
;;;3462       }
;;;3463   }
00003a  bd10              POP      {r4,pc}
;;;3464   
                          ENDP


                          AREA ||i.SPI_2linesRxISR_8BIT||, CODE, READONLY, ALIGN=1

                  SPI_2linesRxISR_8BIT PROC
;;;3211    */
;;;3212   static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *mSPI)
000000  b538              PUSH     {r3-r5,lr}
;;;3213   {
000002  4604              MOV      r4,r0
;;;3214       ctype    SPI_2linesRXISR_8BIT_Tmp;
;;;3215       uint8_t  SPI_2linesRXISR_8BIT_RXNUM;
;;;3216   
;;;3217       
;;;3218       SPI_2linesRXISR_8BIT_RXNUM = (*mSPI->RNUM) & SPI_STA_RNUM_mask_b3;
000004  2084              MOVS     r0,#0x84
000006  5900              LDR      r0,[r0,r4]
000008  7800              LDRB     r0,[r0,#0]
00000a  0745              LSLS     r5,r0,#29
00000c  0f6d              LSRS     r5,r5,#29
;;;3219       
;;;3220       
;;;3221       if( SPI_2linesRXISR_8BIT_RXNUM == 4)
00000e  2d04              CMP      r5,#4
000010  d104              BNE      |L26.28|
;;;3222       {
;;;3223           *((uint32_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.W;
000012  6820              LDR      r0,[r4,#0]
000014  6b00              LDR      r0,[r0,#0x30]
000016  6c21              LDR      r1,[r4,#0x40]
000018  6008              STR      r0,[r1,#0]
00001a  e01d              B        |L26.88|
                  |L26.28|
;;;3224       }
;;;3225       else if( SPI_2linesRXISR_8BIT_RXNUM == 3)
00001c  2d03              CMP      r5,#3
00001e  d10f              BNE      |L26.64|
;;;3226       {
;;;3227           SPI_2linesRXISR_8BIT_Tmp.W = mSPI->Instance->RDAT.W;
000020  6820              LDR      r0,[r4,#0]
000022  6b00              LDR      r0,[r0,#0x30]
000024  9000              STR      r0,[sp,#0]
;;;3228           
;;;3229           *((uint8_t *)mSPI->pRxBuffPtr)     = SPI_2linesRXISR_8BIT_Tmp.B[0];
000026  4668              MOV      r0,sp
000028  7800              LDRB     r0,[r0,#0]
00002a  6c21              LDR      r1,[r4,#0x40]
00002c  7008              STRB     r0,[r1,#0]
;;;3230           *((uint8_t *)(mSPI->pRxBuffPtr+1)) = SPI_2linesRXISR_8BIT_Tmp.B[1];
00002e  4668              MOV      r0,sp
000030  7840              LDRB     r0,[r0,#1]
000032  6c21              LDR      r1,[r4,#0x40]
000034  7048              STRB     r0,[r1,#1]
;;;3231           *((uint8_t *)(mSPI->pRxBuffPtr+2)) = SPI_2linesRXISR_8BIT_Tmp.B[2]; 
000036  4668              MOV      r0,sp
000038  7880              LDRB     r0,[r0,#2]
00003a  6c21              LDR      r1,[r4,#0x40]
00003c  7088              STRB     r0,[r1,#2]
00003e  e00b              B        |L26.88|
                  |L26.64|
;;;3232       }
;;;3233       else if( SPI_2linesRXISR_8BIT_RXNUM == 2)
000040  2d02              CMP      r5,#2
000042  d104              BNE      |L26.78|
;;;3234       {
;;;3235           *((uint16_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.H[0];
000044  6820              LDR      r0,[r4,#0]
000046  8e00              LDRH     r0,[r0,#0x30]
000048  6c21              LDR      r1,[r4,#0x40]
00004a  8008              STRH     r0,[r1,#0]
00004c  e004              B        |L26.88|
                  |L26.78|
;;;3236       }
;;;3237       else
;;;3238       {
;;;3239           *((uint8_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.B[0];
00004e  6820              LDR      r0,[r4,#0]
000050  3020              ADDS     r0,r0,#0x20
000052  7c00              LDRB     r0,[r0,#0x10]
000054  6c21              LDR      r1,[r4,#0x40]
000056  7008              STRB     r0,[r1,#0]
                  |L26.88|
;;;3240       }
;;;3241   
;;;3242       mSPI->pRxBuffPtr  += SPI_2linesRXISR_8BIT_RXNUM;
000058  6c20              LDR      r0,[r4,#0x40]
00005a  1940              ADDS     r0,r0,r5
00005c  6420              STR      r0,[r4,#0x40]
;;;3243       mSPI->RxXferCount -= SPI_2linesRXISR_8BIT_RXNUM;
00005e  6ca0              LDR      r0,[r4,#0x48]
000060  1b40              SUBS     r0,r0,r5
000062  64a0              STR      r0,[r4,#0x48]
;;;3244       
;;;3245       
;;;3246       // Check end of the reception
;;;3247       if (mSPI->RxXferCount == 0U)
000064  6ca0              LDR      r0,[r4,#0x48]
000066  2800              CMP      r0,#0
000068  d10e              BNE      |L26.136|
;;;3248       {
;;;3249           // Disable RXF  and ERR interrupt
;;;3250           __MID_SPI_DISABLE_IT(mSPI, SPI_IT_RXF | mSPI->SPI_FLAG_ERROR);
00006a  6820              LDR      r0,[r4,#0]
00006c  6841              LDR      r1,[r0,#4]
00006e  2240              MOVS     r2,#0x40
000070  6ee0              LDR      r0,[r4,#0x6c]
000072  4310              ORRS     r0,r0,r2
000074  4381              BICS     r1,r1,r0
000076  6820              LDR      r0,[r4,#0]
000078  6041              STR      r1,[r0,#4]
;;;3251           // Check the end of the transmission
;;;3252           if (mSPI->TxXferCount == 0U)
00007a  6be0              LDR      r0,[r4,#0x3c]
00007c  2800              CMP      r0,#0
00007e  d10f              BNE      |L26.160|
;;;3253           {
;;;3254               SPI_CloseRxTx_ISR(mSPI);
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       SPI_CloseRxTx_ISR
000086  e00b              B        |L26.160|
                  |L26.136|
;;;3255           }
;;;3256       }
;;;3257       else if(mSPI->RxXferCount < 4U && mSPI->REG_TYPE == MID_SPI_SPI)
000088  6ca0              LDR      r0,[r4,#0x48]
00008a  2804              CMP      r0,#4
00008c  d208              BCS      |L26.160|
00008e  2153              MOVS     r1,#0x53
000090  0609              LSLS     r1,r1,#24
000092  6b20              LDR      r0,[r4,#0x30]
000094  4288              CMP      r0,r1
000096  d103              BNE      |L26.160|
;;;3258       {
;;;3259           *mSPI->RX_TH = (mSPI->RxXferCount - 1);
000098  6ca0              LDR      r0,[r4,#0x48]
00009a  1e40              SUBS     r0,r0,#1
00009c  6fa1              LDR      r1,[r4,#0x78]
00009e  7008              STRB     r0,[r1,#0]
                  |L26.160|
;;;3260       }
;;;3261   }
0000a0  bd38              POP      {r3-r5,pc}
;;;3262   /**
                          ENDP


                          AREA ||i.SPI_2linesTxISR_16BIT||, CODE, READONLY, ALIGN=1

                  SPI_2linesTxISR_16BIT PROC
;;;3395    */
;;;3396   static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *mSPI)
000000  b510              PUSH     {r4,lr}
;;;3397   {
000002  4604              MOV      r4,r0
;;;3398       // When Tx count >= 2
;;;3399       if (mSPI->TxXferCount > 1)
000004  6be0              LDR      r0,[r4,#0x3c]
000006  2801              CMP      r0,#1
000008  d90a              BLS      |L27.32|
;;;3400       {   // Set 2 16 bit data
;;;3401           mSPI->Instance->TDAT.W = *((uint32_t *)mSPI->pTxBuffPtr);
00000a  6b60              LDR      r0,[r4,#0x34]
00000c  6800              LDR      r0,[r0,#0]
00000e  6821              LDR      r1,[r4,#0]
000010  6348              STR      r0,[r1,#0x34]
;;;3402           mSPI->pTxBuffPtr += sizeof(uint32_t);
000012  6b60              LDR      r0,[r4,#0x34]
000014  1d00              ADDS     r0,r0,#4
000016  6360              STR      r0,[r4,#0x34]
;;;3403           mSPI->TxXferCount -= 2;
000018  6be0              LDR      r0,[r4,#0x3c]
00001a  1e80              SUBS     r0,r0,#2
00001c  63e0              STR      r0,[r4,#0x3c]
00001e  e00c              B        |L27.58|
                  |L27.32|
;;;3404       }
;;;3405       // When Tx count = 1
;;;3406       else if (mSPI->TxXferCount == 1)
000020  6be0              LDR      r0,[r4,#0x3c]
000022  2801              CMP      r0,#1
000024  d109              BNE      |L27.58|
;;;3407       {   // Set 16 bit data
;;;3408           mSPI->Instance->TDAT.H[0] = *((uint16_t *)mSPI->pTxBuffPtr);
000026  6b60              LDR      r0,[r4,#0x34]
000028  8800              LDRH     r0,[r0,#0]
00002a  6821              LDR      r1,[r4,#0]
00002c  8688              STRH     r0,[r1,#0x34]
;;;3409           mSPI->pTxBuffPtr += sizeof(uint16_t);
00002e  6b60              LDR      r0,[r4,#0x34]
000030  1c80              ADDS     r0,r0,#2
000032  6360              STR      r0,[r4,#0x34]
;;;3410           mSPI->TxXferCount--;
000034  6be0              LDR      r0,[r4,#0x3c]
000036  1e40              SUBS     r0,r0,#1
000038  63e0              STR      r0,[r4,#0x3c]
                  |L27.58|
;;;3411       }
;;;3412       
;;;3413       // Check the end of the transmission
;;;3414       if (mSPI->TxXferCount == 0)
00003a  6be0              LDR      r0,[r4,#0x3c]
00003c  2800              CMP      r0,#0
00003e  d10d              BNE      |L27.92|
;;;3415       {
;;;3416           // Disable TXF and TCF interrupt
;;;3417           __MID_SPI_DISABLE_IT(mSPI, mSPI->SPI_FLAG_TCF | SPI_IT_TXF);
000040  6820              LDR      r0,[r4,#0]
000042  6840              LDR      r0,[r0,#4]
000044  2280              MOVS     r2,#0x80
000046  6f61              LDR      r1,[r4,#0x74]
000048  4311              ORRS     r1,r1,r2
00004a  4388              BICS     r0,r0,r1
00004c  6821              LDR      r1,[r4,#0]
00004e  6048              STR      r0,[r1,#4]
;;;3418   
;;;3419           // Check the end of the reception.
;;;3420           if (mSPI->RxXferCount == 0)
000050  6ca0              LDR      r0,[r4,#0x48]
000052  2800              CMP      r0,#0
000054  d102              BNE      |L27.92|
;;;3421           {
;;;3422               SPI_CloseRxTx_ISR(mSPI);
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       SPI_CloseRxTx_ISR
                  |L27.92|
;;;3423           }
;;;3424       }
;;;3425   }
00005c  bd10              POP      {r4,pc}
;;;3426   
                          ENDP


                          AREA ||i.SPI_2linesTxISR_32BIT||, CODE, READONLY, ALIGN=1

                  SPI_2linesTxISR_32BIT PROC
;;;3481    */
;;;3482   static void SPI_2linesTxISR_32BIT(struct __SPI_HandleTypeDef *mSPI)
000000  b510              PUSH     {r4,lr}
;;;3483   {
000002  4604              MOV      r4,r0
;;;3484       // Set 32 bit TX data
;;;3485       mSPI->Instance->TDAT.W = *((uint32_t *)mSPI->pTxBuffPtr);
000004  6b60              LDR      r0,[r4,#0x34]
000006  6800              LDR      r0,[r0,#0]
000008  6821              LDR      r1,[r4,#0]
00000a  6348              STR      r0,[r1,#0x34]
;;;3486       mSPI->pTxBuffPtr += sizeof(uint32_t);
00000c  6b60              LDR      r0,[r4,#0x34]
00000e  1d00              ADDS     r0,r0,#4
000010  6360              STR      r0,[r4,#0x34]
;;;3487       mSPI->TxXferCount--;
000012  6be0              LDR      r0,[r4,#0x3c]
000014  1e40              SUBS     r0,r0,#1
000016  63e0              STR      r0,[r4,#0x3c]
;;;3488   
;;;3489       // Check the end of the transmission
;;;3490       if (mSPI->TxXferCount == 0U)
000018  6be0              LDR      r0,[r4,#0x3c]
00001a  2800              CMP      r0,#0
00001c  d10d              BNE      |L28.58|
;;;3491       {
;;;3492           // Disable TXE and TCF interrupt
;;;3493           __MID_SPI_DISABLE_IT(mSPI, mSPI->SPI_FLAG_TCF | SPI_IT_TXF);
00001e  6820              LDR      r0,[r4,#0]
000020  6840              LDR      r0,[r0,#4]
000022  2280              MOVS     r2,#0x80
000024  6f61              LDR      r1,[r4,#0x74]
000026  4311              ORRS     r1,r1,r2
000028  4388              BICS     r0,r0,r1
00002a  6821              LDR      r1,[r4,#0]
00002c  6048              STR      r0,[r1,#4]
;;;3494           
;;;3495           // Check the end of the reception.
;;;3496           if (mSPI->RxXferCount == 0U)
00002e  6ca0              LDR      r0,[r4,#0x48]
000030  2800              CMP      r0,#0
000032  d102              BNE      |L28.58|
;;;3497           {
;;;3498               SPI_CloseRxTx_ISR(mSPI);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       SPI_CloseRxTx_ISR
                  |L28.58|
;;;3499           }
;;;3500       }
;;;3501   }
00003a  bd10              POP      {r4,pc}
;;;3502   
                          ENDP


                          AREA ||i.SPI_2linesTxISR_8BIT||, CODE, READONLY, ALIGN=1

                  SPI_2linesTxISR_8BIT PROC
;;;3277    */
;;;3278   static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *mSPI)
000000  b510              PUSH     {r4,lr}
;;;3279   {
000002  4604              MOV      r4,r0
;;;3280       // Transmit data in packing Bit mode > 4 bytes
;;;3281       if (mSPI->TxXferCount > 3)
000004  6be0              LDR      r0,[r4,#0x3c]
000006  2803              CMP      r0,#3
000008  d90a              BLS      |L29.32|
;;;3282       {   // Set 4 8 bit data
;;;3283           mSPI->Instance->TDAT.W = *((uint32_t *)mSPI->pTxBuffPtr);
00000a  6b60              LDR      r0,[r4,#0x34]
00000c  6800              LDR      r0,[r0,#0]
00000e  6821              LDR      r1,[r4,#0]
000010  6348              STR      r0,[r1,#0x34]
;;;3284           mSPI->pTxBuffPtr += sizeof(uint32_t);
000012  6b60              LDR      r0,[r4,#0x34]
000014  1d00              ADDS     r0,r0,#4
000016  6360              STR      r0,[r4,#0x34]
;;;3285           mSPI->TxXferCount -= 4U;
000018  6be0              LDR      r0,[r4,#0x3c]
00001a  1f00              SUBS     r0,r0,#4
00001c  63e0              STR      r0,[r4,#0x3c]
00001e  e01a              B        |L29.86|
                  |L29.32|
;;;3286       }
;;;3287       
;;;3288       // Transmit data in packing Bit mode => 2 bytes
;;;3289       else if (mSPI->TxXferCount > 1)
000020  6be0              LDR      r0,[r4,#0x3c]
000022  2801              CMP      r0,#1
000024  d90a              BLS      |L29.60|
;;;3290       {   // Set 2 8 bit data
;;;3291           mSPI->Instance->TDAT.H[0] = *((uint16_t *)mSPI->pTxBuffPtr);
000026  6b60              LDR      r0,[r4,#0x34]
000028  8800              LDRH     r0,[r0,#0]
00002a  6821              LDR      r1,[r4,#0]
00002c  8688              STRH     r0,[r1,#0x34]
;;;3292           mSPI->pTxBuffPtr += sizeof(uint16_t);
00002e  6b60              LDR      r0,[r4,#0x34]
000030  1c80              ADDS     r0,r0,#2
000032  6360              STR      r0,[r4,#0x34]
;;;3293           mSPI->TxXferCount -= 2U;
000034  6be0              LDR      r0,[r4,#0x3c]
000036  1e80              SUBS     r0,r0,#2
000038  63e0              STR      r0,[r4,#0x3c]
00003a  e00c              B        |L29.86|
                  |L29.60|
;;;3294       }
;;;3295       // Transmit data in packing Bit mode = 1 bytes
;;;3296       else if (mSPI->TxXferCount == 1)
00003c  6be0              LDR      r0,[r4,#0x3c]
00003e  2801              CMP      r0,#1
000040  d109              BNE      |L29.86|
;;;3297       {   // Set 8 bit data
;;;3298           *(__IO uint8_t *)&mSPI->Instance->TDAT.B[0] = (*mSPI->pTxBuffPtr++);
000042  6b61              LDR      r1,[r4,#0x34]
000044  1c48              ADDS     r0,r1,#1
000046  6360              STR      r0,[r4,#0x34]
000048  7809              LDRB     r1,[r1,#0]
00004a  6820              LDR      r0,[r4,#0]
00004c  3020              ADDS     r0,r0,#0x20
00004e  7501              STRB     r1,[r0,#0x14]
;;;3299           mSPI->TxXferCount--;
000050  6be0              LDR      r0,[r4,#0x3c]
000052  1e40              SUBS     r0,r0,#1
000054  63e0              STR      r0,[r4,#0x3c]
                  |L29.86|
;;;3300       }
;;;3301       
;;;3302       // Check the end of the transmission
;;;3303       if (mSPI->TxXferCount == 0U)
000056  6be0              LDR      r0,[r4,#0x3c]
000058  2800              CMP      r0,#0
00005a  d10d              BNE      |L29.120|
;;;3304       {
;;;3305           // Disable TXF and TCF interrupt
;;;3306           __MID_SPI_DISABLE_IT(mSPI, mSPI->SPI_FLAG_TCF | SPI_IT_TXF);
00005c  6820              LDR      r0,[r4,#0]
00005e  6840              LDR      r0,[r0,#4]
000060  2280              MOVS     r2,#0x80
000062  6f61              LDR      r1,[r4,#0x74]
000064  4311              ORRS     r1,r1,r2
000066  4388              BICS     r0,r0,r1
000068  6821              LDR      r1,[r4,#0]
00006a  6048              STR      r0,[r1,#4]
;;;3307   
;;;3308           // Check the end of the reception.
;;;3309           if (mSPI->RxXferCount == 0U)
00006c  6ca0              LDR      r0,[r4,#0x48]
00006e  2800              CMP      r0,#0
000070  d102              BNE      |L29.120|
;;;3310           {
;;;3311               SPI_CloseRxTx_ISR(mSPI);
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       SPI_CloseRxTx_ISR
                  |L29.120|
;;;3312           }
;;;3313       }
;;;3314   }
000078  bd10              POP      {r4,pc}
;;;3315   
                          ENDP


                          AREA ||i.SPI_AbortRx_ISR||, CODE, READONLY, ALIGN=2

                  SPI_AbortRx_ISR PROC
;;;4219    */
;;;4220   static void SPI_AbortRx_ISR(SPI_HandleTypeDef *mSPI)
000000  b57c              PUSH     {r2-r6,lr}
;;;4221   {
000002  4604              MOV      r4,r0
;;;4222       __IO uint32_t count;
;;;4223   
;;;4224       /* Disable SPI Peripheral */
;;;4225       __MID_SPI_DISABLE(mSPI);
000004  6820              LDR      r0,[r4,#0]
000006  6900              LDR      r0,[r0,#0x10]
000008  0840              LSRS     r0,r0,#1
00000a  0040              LSLS     r0,r0,#1
00000c  6821              LDR      r1,[r4,#0]
00000e  6108              STR      r0,[r1,#0x10]
;;;4226   
;;;4227       count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
000010  2118              MOVS     r1,#0x18
000012  4822              LDR      r0,|L30.156|
000014  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  4605              MOV      r5,r0
00001c  217d              MOVS     r1,#0x7d
00001e  00c9              LSLS     r1,r1,#3
000020  f7fffffe          BL       __aeabi_uidivmod
000024  2164              MOVS     r1,#0x64
000026  4348              MULS     r0,r1,r0
000028  9001              STR      r0,[sp,#4]
;;;4228   
;;;4229       /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
;;;4230       mSPI->Instance->INT.W = ~(SPI_IT_TXF | SPI_IT_RXF | SPI_IT_ERR);
00002a  481d              LDR      r0,|L30.160|
00002c  6821              LDR      r1,[r4,#0]
00002e  6048              STR      r0,[r1,#4]
;;;4231   
;;;4232       /* Check RXNEIE is disabled */
;;;4233       do
000030  bf00              NOP      
                  |L30.50|
;;;4234       {
;;;4235           if (count-- == 0U)
000032  9801              LDR      r0,[sp,#4]
000034  1e41              SUBS     r1,r0,#1
000036  9101              STR      r1,[sp,#4]
000038  2800              CMP      r0,#0
00003a  d106              BNE      |L30.74|
;;;4236           {
;;;4237               SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_ABORT);
00003c  208c              MOVS     r0,#0x8c
00003e  5900              LDR      r0,[r0,r4]
000040  2140              MOVS     r1,#0x40
000042  4308              ORRS     r0,r0,r1
000044  218c              MOVS     r1,#0x8c
000046  5108              STR      r0,[r1,r4]
;;;4238               break;
000048  e005              B        |L30.86|
                  |L30.74|
;;;4239           }
;;;4240       }
;;;4241   
;;;4242       while((mSPI->Instance->INT.W & SPI_IT_RXF) != 0);
00004a  6820              LDR      r0,[r4,#0]
00004c  6840              LDR      r0,[r0,#4]
00004e  2140              MOVS     r1,#0x40
000050  4008              ANDS     r0,r0,r1
000052  2800              CMP      r0,#0
000054  d1ed              BNE      |L30.50|
                  |L30.86|
000056  bf00              NOP                            ;4238
;;;4243   
;;;4244       /* Control the BSY flag */
;;;4245       if (SPI_WaitFlagStateUntilTimeout(mSPI, SPI_FLAG_BUSYF, CLR, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
000058  f7fffffe          BL       MID_GetTick
00005c  4605              MOV      r5,r0
00005e  2364              MOVS     r3,#0x64
000060  2200              MOVS     r2,#0
000062  2101              MOVS     r1,#1
000064  9000              STR      r0,[sp,#0]
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
00006c  2800              CMP      r0,#0
00006e  d002              BEQ      |L30.118|
;;;4246       {
;;;4247           mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
000070  2140              MOVS     r1,#0x40
000072  208c              MOVS     r0,#0x8c
000074  5101              STR      r1,[r0,r4]
                  |L30.118|
;;;4248       }
;;;4249   
;;;4250       /* Empty the FRLVL fifo */
;;;4251       if (SPI_WaitFifoStateUntilTimeout(mSPI, SPI_FLAG_RXLVL, SPI_RXLVL_EMPTY, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
000076  f7fffffe          BL       MID_GetTick
00007a  4605              MOV      r5,r0
00007c  2364              MOVS     r3,#0x64
00007e  2200              MOVS     r2,#0
000080  2107              MOVS     r1,#7
000082  9000              STR      r0,[sp,#0]
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
00008a  2800              CMP      r0,#0
00008c  d002              BEQ      |L30.148|
;;;4252       {
;;;4253           mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
00008e  2140              MOVS     r1,#0x40
000090  208c              MOVS     r0,#0x8c
000092  5101              STR      r1,[r0,r4]
                  |L30.148|
;;;4254       }
;;;4255   
;;;4256       mSPI->State = MID_SPI_STATE_ABORT;
000094  2107              MOVS     r1,#7
000096  2089              MOVS     r0,#0x89
000098  5501              STRB     r1,[r0,r4]
;;;4257   }
00009a  bd7c              POP      {r2-r6,pc}
;;;4258   
                          ENDP

                  |L30.156|
                          DCD      SystemCoreClock
                  |L30.160|
                          DCD      0xfffff03f

                          AREA ||i.SPI_AbortTx_ISR||, CODE, READONLY, ALIGN=2

                  SPI_AbortTx_ISR PROC
;;;4274    */
;;;4275   static void SPI_AbortTx_ISR(SPI_HandleTypeDef *mSPI)
000000  b57c              PUSH     {r2-r6,lr}
;;;4276   {
000002  4604              MOV      r4,r0
;;;4277       __IO uint32_t count;
;;;4278   
;;;4279       count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
000004  2118              MOVS     r1,#0x18
000006  4826              LDR      r0,|L31.160|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000a  f7fffffe          BL       __aeabi_uidivmod
00000e  4605              MOV      r5,r0
000010  217d              MOVS     r1,#0x7d
000012  00c9              LSLS     r1,r1,#3
000014  f7fffffe          BL       __aeabi_uidivmod
000018  2164              MOVS     r1,#0x64
00001a  4348              MULS     r0,r1,r0
00001c  9001              STR      r0,[sp,#4]
;;;4280   
;;;4281       /* Disable TXEIE, RXEIE and ERRIE interrupts */
;;;4282       mSPI->Instance->INT.W &= ~(SPI_IT_TXF | SPI_IT_RXF | SPI_IT_ERR);
00001e  6820              LDR      r0,[r4,#0]
000020  6840              LDR      r0,[r0,#4]
000022  213f              MOVS     r1,#0x3f
000024  0189              LSLS     r1,r1,#6
000026  4388              BICS     r0,r0,r1
000028  6821              LDR      r1,[r4,#0]
00002a  6048              STR      r0,[r1,#4]
;;;4283       
;;;4284       /* Check TXEIE is disabled */
;;;4285       do
00002c  bf00              NOP      
                  |L31.46|
;;;4286       {
;;;4287           if (count-- == 0U)
00002e  9801              LDR      r0,[sp,#4]
000030  1e41              SUBS     r1,r0,#1
000032  9101              STR      r1,[sp,#4]
000034  2800              CMP      r0,#0
000036  d106              BNE      |L31.70|
;;;4288           {
;;;4289               SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_ABORT);
000038  208c              MOVS     r0,#0x8c
00003a  5900              LDR      r0,[r0,r4]
00003c  2140              MOVS     r1,#0x40
00003e  4308              ORRS     r0,r0,r1
000040  218c              MOVS     r1,#0x8c
000042  5108              STR      r0,[r1,r4]
;;;4290               break;
000044  e005              B        |L31.82|
                  |L31.70|
;;;4291           }
;;;4292       }
;;;4293   
;;;4294       while((mSPI->Instance->INT.W & SPI_IT_TXF) != 0);
000046  6820              LDR      r0,[r4,#0]
000048  6840              LDR      r0,[r0,#4]
00004a  2180              MOVS     r1,#0x80
00004c  4008              ANDS     r0,r0,r1
00004e  2800              CMP      r0,#0
000050  d1ed              BNE      |L31.46|
                  |L31.82|
000052  bf00              NOP                            ;4290
;;;4295       
;;;4296       if (SPI_EndRxTxTransaction(mSPI, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
000054  f7fffffe          BL       MID_GetTick
000058  4605              MOV      r5,r0
00005a  462a              MOV      r2,r5
00005c  2164              MOVS     r1,#0x64
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       SPI_EndRxTxTransaction
000064  2800              CMP      r0,#0
000066  d002              BEQ      |L31.110|
;;;4297       {
;;;4298           mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
000068  2140              MOVS     r1,#0x40
00006a  208c              MOVS     r0,#0x8c
00006c  5101              STR      r1,[r0,r4]
                  |L31.110|
;;;4299       }
;;;4300   
;;;4301       /* Disable SPI Peripheral */
;;;4302       __MID_SPI_DISABLE(mSPI);
00006e  6820              LDR      r0,[r4,#0]
000070  6900              LDR      r0,[r0,#0x10]
000072  0840              LSRS     r0,r0,#1
000074  0040              LSLS     r0,r0,#1
000076  6821              LDR      r1,[r4,#0]
000078  6108              STR      r0,[r1,#0x10]
;;;4303   
;;;4304       /* Empty the FRLVL fifo */
;;;4305       if (SPI_WaitFifoStateUntilTimeout(mSPI, SPI_FLAG_RXLVL, SPI_RXLVL_EMPTY, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
00007a  f7fffffe          BL       MID_GetTick
00007e  4605              MOV      r5,r0
000080  2364              MOVS     r3,#0x64
000082  2200              MOVS     r2,#0
000084  2107              MOVS     r1,#7
000086  9000              STR      r0,[sp,#0]
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
00008e  2800              CMP      r0,#0
000090  d002              BEQ      |L31.152|
;;;4306       {
;;;4307           mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
000092  2140              MOVS     r1,#0x40
000094  208c              MOVS     r0,#0x8c
000096  5101              STR      r1,[r0,r4]
                  |L31.152|
;;;4308       }
;;;4309   
;;;4310       mSPI->State = MID_SPI_STATE_ABORT;
000098  2107              MOVS     r1,#7
00009a  2089              MOVS     r0,#0x89
00009c  5501              STRB     r1,[r0,r4]
;;;4311   }
00009e  bd7c              POP      {r2-r6,pc}
;;;4312   ///@}
                          ENDP

                  |L31.160|
                          DCD      SystemCoreClock

                          AREA ||i.SPI_CloseRxTx_ISR||, CODE, READONLY, ALIGN=1

                  SPI_CloseRxTx_ISR PROC
;;;4071    */
;;;4072   static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *mSPI)
000000  b570              PUSH     {r4-r6,lr}
;;;4073   {
000002  4604              MOV      r4,r0
;;;4074       uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;4075   
;;;4076       
;;;4077       // Init tickstart for timeout managment
;;;4078       tickstart = MID_GetTick();
000006  f7fffffe          BL       MID_GetTick
00000a  4605              MOV      r5,r0
;;;4079   
;;;4080       // Disable ERR interrupt
;;;4081       __MID_SPI_DISABLE_IT(mSPI, mSPI->SPI_FLAG_ERROR);
00000c  6820              LDR      r0,[r4,#0]
00000e  6840              LDR      r0,[r0,#4]
000010  6ee1              LDR      r1,[r4,#0x6c]
000012  4388              BICS     r0,r0,r1
000014  6821              LDR      r1,[r4,#0]
000016  6048              STR      r0,[r1,#4]
;;;4082   
;;;4083       // Check the end of the transaction
;;;4084       if (SPI_EndRxTxTransaction(mSPI, SPI_DEFAULT_TIMEOUT, tickstart) != MID_OK)
000018  462a              MOV      r2,r5
00001a  2164              MOVS     r1,#0x64
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SPI_EndRxTxTransaction
000022  2800              CMP      r0,#0
000024  d005              BEQ      |L32.50|
;;;4085       {
;;;4086           SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_FLAG);
000026  208c              MOVS     r0,#0x8c
000028  5900              LDR      r0,[r0,r4]
00002a  2120              MOVS     r1,#0x20
00002c  4308              ORRS     r0,r0,r1
00002e  218c              MOVS     r1,#0x8c
000030  5108              STR      r0,[r1,r4]
                  |L32.50|
;;;4087       }
;;;4088   
;;;4089       // When error happened
;;;4090       if (mSPI->ErrorCode == MID_SPI_ERROR_NONE)
000032  208c              MOVS     r0,#0x8c
000034  5900              LDR      r0,[r0,r4]
000036  2800              CMP      r0,#0
000038  d111              BNE      |L32.94|
;;;4091       {   
;;;4092           // When standard SPI receive
;;;4093           if (mSPI->State == MID_SPI_STATE_BUSY_RX)
00003a  2089              MOVS     r0,#0x89
00003c  5d00              LDRB     r0,[r0,r4]
00003e  2804              CMP      r0,#4
000040  d106              BNE      |L32.80|
;;;4094           {
;;;4095               mSPI->State = MID_SPI_STATE_READY;
000042  2101              MOVS     r1,#1
000044  2089              MOVS     r0,#0x89
000046  5501              STRB     r1,[r0,r4]
;;;4096               MID_SPI_RxCpltCallback(mSPI);
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       MID_SPI_RxCpltCallback
00004e  e00c              B        |L32.106|
                  |L32.80|
;;;4097           }
;;;4098           // When standard SPI transmit
;;;4099           else
;;;4100           {
;;;4101               mSPI->State = MID_SPI_STATE_READY;
000050  2101              MOVS     r1,#1
000052  2089              MOVS     r0,#0x89
000054  5501              STRB     r1,[r0,r4]
;;;4102               MID_SPI_TxRxCpltCallback(mSPI);
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       MID_SPI_TxRxCpltCallback
00005c  e005              B        |L32.106|
                  |L32.94|
;;;4103           }
;;;4104       }
;;;4105       // When error not happened
;;;4106       else
;;;4107       {
;;;4108           mSPI->State = MID_SPI_STATE_READY;
00005e  2101              MOVS     r1,#1
000060  2089              MOVS     r0,#0x89
000062  5501              STRB     r1,[r0,r4]
;;;4109           MID_SPI_ErrorCallback(mSPI);
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       MID_SPI_ErrorCallback
                  |L32.106|
;;;4110       }
;;;4111   }
00006a  bd70              POP      {r4-r6,pc}
;;;4112   
                          ENDP


                          AREA ||i.SPI_CloseRx_ISR||, CODE, READONLY, ALIGN=1

                  SPI_CloseRx_ISR PROC
;;;4128    */
;;;4129   static void SPI_CloseRx_ISR(SPI_HandleTypeDef *mSPI)
000000  b570              PUSH     {r4-r6,lr}
;;;4130   {
000002  4604              MOV      r4,r0
;;;4131       // Disable RXF and ERR interrupt
;;;4132       __MID_SPI_DISABLE_IT(mSPI, (SPI_IT_RXF | mSPI->SPI_FLAG_ERROR));
000004  6820              LDR      r0,[r4,#0]
000006  6840              LDR      r0,[r0,#4]
000008  2240              MOVS     r2,#0x40
00000a  6ee1              LDR      r1,[r4,#0x6c]
00000c  4311              ORRS     r1,r1,r2
00000e  4388              BICS     r0,r0,r1
000010  6821              LDR      r1,[r4,#0]
000012  6048              STR      r0,[r1,#4]
;;;4133   
;;;4134       // Check the end of the transaction
;;;4135       if (SPI_EndRxTransaction(mSPI, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
000014  f7fffffe          BL       MID_GetTick
000018  4605              MOV      r5,r0
00001a  462a              MOV      r2,r5
00001c  2164              MOVS     r1,#0x64
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SPI_EndRxTransaction
000024  2800              CMP      r0,#0
000026  d005              BEQ      |L33.52|
;;;4136       {
;;;4137           SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_FLAG);
000028  208c              MOVS     r0,#0x8c
00002a  5900              LDR      r0,[r0,r4]
00002c  2120              MOVS     r1,#0x20
00002e  4308              ORRS     r0,r0,r1
000030  218c              MOVS     r1,#0x8c
000032  5108              STR      r0,[r1,r4]
                  |L33.52|
;;;4138       }
;;;4139       mSPI->State = MID_SPI_STATE_READY;
000034  2101              MOVS     r1,#1
000036  2089              MOVS     r0,#0x89
000038  5501              STRB     r1,[r0,r4]
;;;4140   
;;;4141       // When error happened
;;;4142       if (mSPI->ErrorCode == MID_SPI_ERROR_NONE)
00003a  208c              MOVS     r0,#0x8c
00003c  5900              LDR      r0,[r0,r4]
00003e  2800              CMP      r0,#0
000040  d103              BNE      |L33.74|
;;;4143       {
;;;4144           MID_SPI_RxCpltCallback(mSPI);
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       MID_SPI_RxCpltCallback
000048  e002              B        |L33.80|
                  |L33.74|
;;;4145       }
;;;4146       // When error not happened
;;;4147       else
;;;4148       {
;;;4149           MID_SPI_ErrorCallback(mSPI);
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       MID_SPI_ErrorCallback
                  |L33.80|
;;;4150       }
;;;4151   }
000050  bd70              POP      {r4-r6,pc}
;;;4152   
                          ENDP


                          AREA ||i.SPI_CloseTx_ISR||, CODE, READONLY, ALIGN=1

                  SPI_CloseTx_ISR PROC
;;;4168    */
;;;4169   static void SPI_CloseTx_ISR(SPI_HandleTypeDef *mSPI)
000000  b538              PUSH     {r3-r5,lr}
;;;4170   {
000002  4604              MOV      r4,r0
;;;4171       uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;4172   
;;;4173       // Init tickstart for timeout management
;;;4174       tickstart = MID_GetTick();
000006  f7fffffe          BL       MID_GetTick
00000a  4605              MOV      r5,r0
;;;4175   
;;;4176       // Disable TXF, TCF and ERR interrupt
;;;4177       __MID_SPI_DISABLE_IT(mSPI, (SPI_IT_TXF | mSPI->SPI_FLAG_TCF | mSPI->SPI_FLAG_ERROR));
00000c  2180              MOVS     r1,#0x80
00000e  6f60              LDR      r0,[r4,#0x74]
000010  4308              ORRS     r0,r0,r1
000012  6ee1              LDR      r1,[r4,#0x6c]
000014  4308              ORRS     r0,r0,r1
000016  6821              LDR      r1,[r4,#0]
000018  6849              LDR      r1,[r1,#4]
00001a  4381              BICS     r1,r1,r0
00001c  6820              LDR      r0,[r4,#0]
00001e  6041              STR      r1,[r0,#4]
;;;4178   
;;;4179       // Check the end of the transaction
;;;4180       if (SPI_EndRxTxTransaction(mSPI, SPI_DEFAULT_TIMEOUT, tickstart) != MID_OK)
000020  462a              MOV      r2,r5
000022  2164              MOVS     r1,#0x64
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       SPI_EndRxTxTransaction
00002a  2800              CMP      r0,#0
00002c  d005              BEQ      |L34.58|
;;;4181       {
;;;4182           SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_FLAG);
00002e  208c              MOVS     r0,#0x8c
000030  5900              LDR      r0,[r0,r4]
000032  2120              MOVS     r1,#0x20
000034  4308              ORRS     r0,r0,r1
000036  218c              MOVS     r1,#0x8c
000038  5108              STR      r0,[r1,r4]
                  |L34.58|
;;;4183       }
;;;4184   
;;;4185       // Clear overrun flag in standard SPI communication mode because received is not read
;;;4186       if (mSPI->Init.DataLine == SPI_STANDARD_SPI)
00003a  68a0              LDR      r0,[r4,#8]
00003c  2800              CMP      r0,#0
00003e  d112              BNE      |L34.102|
;;;4187       {
;;;4188           __MID_SPI_CLEAR_ROVRFFLAG(mSPI);
000040  bf00              NOP      
000042  9000              STR      r0,[sp,#0]
000044  6820              LDR      r0,[r4,#0]
000046  6b00              LDR      r0,[r0,#0x30]
000048  9000              STR      r0,[sp,#0]
00004a  6820              LDR      r0,[r4,#0]
00004c  6b00              LDR      r0,[r0,#0x30]
00004e  9000              STR      r0,[sp,#0]
000050  6820              LDR      r0,[r4,#0]
000052  6800              LDR      r0,[r0,#0]
000054  9000              STR      r0,[sp,#0]
000056  6820              LDR      r0,[r4,#0]
000058  6800              LDR      r0,[r0,#0]
00005a  6ea1              LDR      r1,[r4,#0x68]
00005c  4308              ORRS     r0,r0,r1
00005e  6821              LDR      r1,[r4,#0]
000060  6008              STR      r0,[r1,#0]
000062  bf00              NOP      
000064  bf00              NOP      
                  |L34.102|
;;;4189       }
;;;4190   
;;;4191       mSPI->State = MID_SPI_STATE_READY;
000066  2101              MOVS     r1,#1
000068  2089              MOVS     r0,#0x89
00006a  5501              STRB     r1,[r0,r4]
;;;4192       // When error happened
;;;4193       if (mSPI->ErrorCode != MID_SPI_ERROR_NONE)
00006c  208c              MOVS     r0,#0x8c
00006e  5900              LDR      r0,[r0,r4]
000070  2800              CMP      r0,#0
000072  d003              BEQ      |L34.124|
;;;4194       {
;;;4195           MID_SPI_ErrorCallback(mSPI);
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       MID_SPI_ErrorCallback
00007a  e002              B        |L34.130|
                  |L34.124|
;;;4196       }
;;;4197       // When error not happened
;;;4198       else
;;;4199       {
;;;4200           MID_SPI_TxCpltCallback(mSPI);
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       MID_SPI_TxCpltCallback
                  |L34.130|
;;;4201       }
;;;4202   }
000082  bd38              POP      {r3-r5,pc}
;;;4203   
                          ENDP


                          AREA ||i.SPI_DMAAbortOnError||, CODE, READONLY, ALIGN=1

                  SPI_DMAAbortOnError PROC
;;;3185    */
;;;3186   static void SPI_DMAAbortOnError(DMA_HandleTypeDef *mdma)
000000  b570              PUSH     {r4-r6,lr}
;;;3187   {
000002  4605              MOV      r5,r0
;;;3188       SPI_HandleTypeDef *mSPI = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)mdma)->Parent;
000004  6aac              LDR      r4,[r5,#0x28]
;;;3189       mSPI->RxXferCount = 0U;
000006  2000              MOVS     r0,#0
000008  64a0              STR      r0,[r4,#0x48]
;;;3190       mSPI->TxXferCount = 0U;
00000a  63e0              STR      r0,[r4,#0x3c]
;;;3191   
;;;3192       MID_SPI_ErrorCallback(mSPI);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       MID_SPI_ErrorCallback
;;;3193   }
000012  bd70              POP      {r4-r6,pc}
;;;3194   
                          ENDP


                          AREA ||i.SPI_DMAError||, CODE, READONLY, ALIGN=1

                  SPI_DMAError PROC
;;;2079    */
;;;2080   static void SPI_DMAError(DMA_HandleTypeDef *mDMA)
000000  b570              PUSH     {r4-r6,lr}
;;;2081   {
000002  4605              MOV      r5,r0
;;;2082       SPI_HandleTypeDef *mSPI = mDMA->Parent;
000004  6aac              LDR      r4,[r5,#0x28]
;;;2083   
;;;2084       /* Stop the disable DMA transfer on SPI side */
;;;2085       CLEAR_BIT(mSPI->Instance->CR0.B[3], SPI_CR0_DMA_TXEN_mask_b3 | SPI_CR0_DMA_RXEN_mask_b3);
000006  6820              LDR      r0,[r4,#0]
000008  7cc0              LDRB     r0,[r0,#0x13]
00000a  21c0              MOVS     r1,#0xc0
00000c  4388              BICS     r0,r0,r1
00000e  6821              LDR      r1,[r4,#0]
000010  74c8              STRB     r0,[r1,#0x13]
;;;2086   
;;;2087       SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_DMA);
000012  208c              MOVS     r0,#0x8c
000014  5900              LDR      r0,[r0,r4]
000016  2110              MOVS     r1,#0x10
000018  4308              ORRS     r0,r0,r1
00001a  218c              MOVS     r1,#0x8c
00001c  5108              STR      r0,[r1,r4]
;;;2088       mSPI->State = MID_SPI_STATE_READY;
00001e  2101              MOVS     r1,#1
000020  2089              MOVS     r0,#0x89
000022  5501              STRB     r1,[r0,r4]
;;;2089       MID_SPI_ErrorCallback(mSPI);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       MID_SPI_ErrorCallback
;;;2090   }
00002a  bd70              POP      {r4-r6,pc}
;;;2091   
                          ENDP


                          AREA ||i.SPI_DMAHalfReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfReceiveCplt PROC
;;;2035    */
;;;2036   static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *mDMA)
000000  b570              PUSH     {r4-r6,lr}
;;;2037   {
000002  4604              MOV      r4,r0
;;;2038       SPI_HandleTypeDef *mSPI = mDMA->Parent;
000004  6aa5              LDR      r5,[r4,#0x28]
;;;2039   
;;;2040     MID_SPI_RxHalfCpltCallback(mSPI);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       MID_SPI_RxHalfCpltCallback
;;;2041   }
00000c  bd70              POP      {r4-r6,pc}
;;;2042   
                          ENDP


                          AREA ||i.SPI_DMAHalfTransmitCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfTransmitCplt PROC
;;;2013    */
;;;2014   static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *mDMA)
000000  b570              PUSH     {r4-r6,lr}
;;;2015   {
000002  4604              MOV      r4,r0
;;;2016       SPI_HandleTypeDef *mSPI = mDMA->Parent;
000004  6aa5              LDR      r5,[r4,#0x28]
;;;2017   
;;;2018       MID_SPI_TxHalfCpltCallback(mSPI);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       MID_SPI_TxHalfCpltCallback
;;;2019   }
00000c  bd70              POP      {r4-r6,pc}
;;;2020   
                          ENDP


                          AREA ||i.SPI_DMAHalfTransmitReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfTransmitReceiveCplt PROC
;;;2057    */
;;;2058   static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *mDMA)
000000  b570              PUSH     {r4-r6,lr}
;;;2059   {
000002  4604              MOV      r4,r0
;;;2060       SPI_HandleTypeDef *mSPI = mDMA->Parent;
000004  6aa5              LDR      r5,[r4,#0x28]
;;;2061   
;;;2062     MID_SPI_TxRxHalfCpltCallback(mSPI);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       MID_SPI_TxRxHalfCpltCallback
;;;2063   }
00000c  bd70              POP      {r4-r6,pc}
;;;2064   
                          ENDP


                          AREA ||i.SPI_DMAReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAReceiveCplt PROC
;;;2862    */
;;;2863   static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *mDMA)
000000  b570              PUSH     {r4-r6,lr}
;;;2864   {
000002  4605              MOV      r5,r0
;;;2865       SPI_HandleTypeDef *mSPI = mDMA->Parent;
000004  6aac              LDR      r4,[r5,#0x28]
;;;2866   
;;;2867   
;;;2868       /* Disable ERR interrupt */
;;;2869       __MID_SPI_DISABLE_IT(mSPI, SPI_IT_ERR);
000006  6820              LDR      r0,[r4,#0]
000008  6840              LDR      r0,[r0,#4]
00000a  210f              MOVS     r1,#0xf
00000c  0209              LSLS     r1,r1,#8
00000e  4388              BICS     r0,r0,r1
000010  6821              LDR      r1,[r4,#0]
000012  6048              STR      r0,[r1,#4]
;;;2870   
;;;2871       // Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
;;;2872   //    CLEAR_BIT(mSPI->Instance->CR0.B[3], SPI_CR0_DMA_TXEN_mask_b3 | SPI_CR0_DMA_RXEN_mask_b3);
;;;2873   
;;;2874       mSPI->RxXferCount = 0U;
000014  2000              MOVS     r0,#0
000016  64a0              STR      r0,[r4,#0x48]
;;;2875       mSPI->State = MID_SPI_STATE_READY;
000018  2101              MOVS     r1,#1
00001a  2089              MOVS     r0,#0x89
00001c  5501              STRB     r1,[r0,r4]
;;;2876   
;;;2877   
;;;2878       if (mSPI->ErrorCode != MID_SPI_ERROR_NONE)
00001e  208c              MOVS     r0,#0x8c
000020  5900              LDR      r0,[r0,r4]
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L40.46|
;;;2879       {
;;;2880           MID_SPI_ErrorCallback(mSPI);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       MID_SPI_ErrorCallback
                  |L40.44|
;;;2881           return;
;;;2882       }
;;;2883       __MID_UNLOCK(mSPI);
;;;2884   
;;;2885       MID_SPI_RxCpltCallback(mSPI);
;;;2886   }
00002c  bd70              POP      {r4-r6,pc}
                  |L40.46|
00002e  bf00              NOP                            ;2883
000030  2100              MOVS     r1,#0                 ;2883
000032  2088              MOVS     r0,#0x88              ;2883
000034  5501              STRB     r1,[r0,r4]            ;2883
000036  bf00              NOP                            ;2883
000038  4620              MOV      r0,r4                 ;2885
00003a  f7fffffe          BL       MID_SPI_RxCpltCallback
00003e  bf00              NOP      
000040  e7f4              B        |L40.44|
;;;2887   
                          ENDP


                          AREA ||i.SPI_DMARxAbortCallback||, CODE, READONLY, ALIGN=1

                  SPI_DMARxAbortCallback PROC
;;;3115    */
;;;3116   static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *mdma)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3117   {
000002  4605              MOV      r5,r0
;;;3118     SPI_HandleTypeDef *mSPI = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)mdma)->Parent;
000004  6aac              LDR      r4,[r5,#0x28]
;;;3119   
;;;3120     /* Disable SPI Peripheral */
;;;3121     __MID_SPI_DISABLE(mSPI);
000006  6820              LDR      r0,[r4,#0]
000008  6900              LDR      r0,[r0,#0x10]
00000a  0840              LSRS     r0,r0,#1
00000c  0040              LSLS     r0,r0,#1
00000e  6821              LDR      r1,[r4,#0]
000010  6108              STR      r0,[r1,#0x10]
;;;3122   
;;;3123     mSPI->mDMARX->XferAbortCallback = NULL;
000012  2000              MOVS     r0,#0
000014  6de1              LDR      r1,[r4,#0x5c]
000016  6388              STR      r0,[r1,#0x38]
;;;3124   
;;;3125     /* Disable Rx DMA Request */
;;;3126     CLEAR_BIT(mSPI->Instance->CR0.W, SPI_CR0_DMA_RXEN_mask_w);
000018  6820              LDR      r0,[r4,#0]
00001a  6900              LDR      r0,[r0,#0x10]
00001c  2101              MOVS     r1,#1
00001e  0789              LSLS     r1,r1,#30
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6108              STR      r0,[r1,#0x10]
;;;3127   
;;;3128     /* Control the BSY flag */
;;;3129     if (SPI_WaitFlagStateUntilTimeout(mSPI, SPI_FLAG_BUSYF, CLR, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
000026  f7fffffe          BL       MID_GetTick
00002a  4606              MOV      r6,r0
00002c  2364              MOVS     r3,#0x64
00002e  2200              MOVS     r2,#0
000030  2101              MOVS     r1,#1
000032  9000              STR      r0,[sp,#0]
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
00003a  2800              CMP      r0,#0
00003c  d002              BEQ      |L41.68|
;;;3130     {
;;;3131       mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
00003e  2140              MOVS     r1,#0x40
000040  208c              MOVS     r0,#0x8c
000042  5101              STR      r1,[r0,r4]
                  |L41.68|
;;;3132     }
;;;3133   
;;;3134     /* Empty the FRLVL fifo */
;;;3135     if (SPI_WaitFifoStateUntilTimeout(mSPI, SPI_FLAG_RXLVL, SPI_RXLVL_EMPTY, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
000044  f7fffffe          BL       MID_GetTick
000048  4606              MOV      r6,r0
00004a  2364              MOVS     r3,#0x64
00004c  2200              MOVS     r2,#0
00004e  2107              MOVS     r1,#7
000050  9000              STR      r0,[sp,#0]
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
000058  2800              CMP      r0,#0
00005a  d002              BEQ      |L41.98|
;;;3136     {
;;;3137       mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
00005c  2140              MOVS     r1,#0x40
00005e  208c              MOVS     r0,#0x8c
000060  5101              STR      r1,[r0,r4]
                  |L41.98|
;;;3138     }
;;;3139   
;;;3140     /* Check if an Abort process is still ongoing */
;;;3141     if (mSPI->mDMATX != NULL)
000062  6da0              LDR      r0,[r4,#0x58]
000064  2800              CMP      r0,#0
000066  d004              BEQ      |L41.114|
;;;3142     {
;;;3143       if (mSPI->mDMATX->XferAbortCallback != NULL)
000068  6da0              LDR      r0,[r4,#0x58]
00006a  6b80              LDR      r0,[r0,#0x38]
00006c  2800              CMP      r0,#0
00006e  d000              BEQ      |L41.114|
                  |L41.112|
;;;3144       {
;;;3145         return;
;;;3146       }
;;;3147     }
;;;3148   
;;;3149     /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
;;;3150     mSPI->RxXferCount = 0U;
;;;3151     mSPI->TxXferCount = 0U;
;;;3152   
;;;3153     /* Check no error during Abort procedure */
;;;3154     if (mSPI->ErrorCode != MID_SPI_ERROR_ABORT)
;;;3155     {
;;;3156       /* Reset errorCode */
;;;3157       mSPI->ErrorCode = MID_SPI_ERROR_NONE;
;;;3158     }
;;;3159   
;;;3160     /* Clear the Error flags in the SR register */
;;;3161     __MID_SPI_CLEAR_ROVRFFLAG(mSPI);
;;;3162     __MID_SPI_CLEAR_WEFFLAG(mSPI);
;;;3163   
;;;3164     /* Restore mSPI->State to Ready */
;;;3165     mSPI->State  = MID_SPI_STATE_READY;
;;;3166   
;;;3167     /* Call user Abort complete callback */
;;;3168     MID_SPI_AbortCpltCallback(mSPI);
;;;3169   }
000070  bdf8              POP      {r3-r7,pc}
                  |L41.114|
000072  2000              MOVS     r0,#0                 ;3150
000074  64a0              STR      r0,[r4,#0x48]         ;3150
000076  63e0              STR      r0,[r4,#0x3c]         ;3151
000078  208c              MOVS     r0,#0x8c              ;3154
00007a  5900              LDR      r0,[r0,r4]            ;3154
00007c  2840              CMP      r0,#0x40              ;3154
00007e  d002              BEQ      |L41.134|
000080  2100              MOVS     r1,#0                 ;3157
000082  208c              MOVS     r0,#0x8c              ;3157
000084  5101              STR      r1,[r0,r4]            ;3157
                  |L41.134|
000086  bf00              NOP                            ;3161
000088  2000              MOVS     r0,#0                 ;3161
00008a  9000              STR      r0,[sp,#0]            ;3161
00008c  6820              LDR      r0,[r4,#0]            ;3161
00008e  6b00              LDR      r0,[r0,#0x30]         ;3161
000090  9000              STR      r0,[sp,#0]            ;3161
000092  6820              LDR      r0,[r4,#0]            ;3161
000094  6b00              LDR      r0,[r0,#0x30]         ;3161
000096  9000              STR      r0,[sp,#0]            ;3161
000098  6820              LDR      r0,[r4,#0]            ;3161
00009a  6800              LDR      r0,[r0,#0]            ;3161
00009c  9000              STR      r0,[sp,#0]            ;3161
00009e  6820              LDR      r0,[r4,#0]            ;3161
0000a0  6800              LDR      r0,[r0,#0]            ;3161
0000a2  6ea1              LDR      r1,[r4,#0x68]         ;3161
0000a4  4308              ORRS     r0,r0,r1              ;3161
0000a6  6821              LDR      r1,[r4,#0]            ;3161
0000a8  6008              STR      r0,[r1,#0]            ;3161
0000aa  bf00              NOP                            ;3161
0000ac  bf00              NOP                            ;3161
0000ae  bf00              NOP                            ;3162
0000b0  2000              MOVS     r0,#0                 ;3162
0000b2  9000              STR      r0,[sp,#0]            ;3162
0000b4  6820              LDR      r0,[r4,#0]            ;3162
0000b6  6800              LDR      r0,[r0,#0]            ;3162
0000b8  9000              STR      r0,[sp,#0]            ;3162
0000ba  6820              LDR      r0,[r4,#0]            ;3162
0000bc  6800              LDR      r0,[r0,#0]            ;3162
0000be  2101              MOVS     r1,#1                 ;3162
0000c0  0249              LSLS     r1,r1,#9              ;3162
0000c2  4308              ORRS     r0,r0,r1              ;3162
0000c4  6821              LDR      r1,[r4,#0]            ;3162
0000c6  6008              STR      r0,[r1,#0]            ;3162
0000c8  bf00              NOP                            ;3162
0000ca  bf00              NOP                            ;3162
0000cc  2101              MOVS     r1,#1                 ;3165
0000ce  2089              MOVS     r0,#0x89              ;3165
0000d0  5501              STRB     r1,[r0,r4]            ;3165
0000d2  4620              MOV      r0,r4                 ;3168
0000d4  f7fffffe          BL       MID_SPI_AbortCpltCallback
0000d8  bf00              NOP      
0000da  e7c9              B        |L41.112|
;;;3170   
                          ENDP


                          AREA ||i.SPI_DMATransmitCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMATransmitCplt PROC
;;;2803    */
;;;2804   void SPI_DMATransmitCplt(DMA_HandleTypeDef *mDMA)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2805   {
000002  4605              MOV      r5,r0
;;;2806       SPI_HandleTypeDef *mSPI = mDMA->Parent;
000004  6aac              LDR      r4,[r5,#0x28]
;;;2807       uint32_t tickstart = 0U;
000006  2600              MOVS     r6,#0
;;;2808   
;;;2809   
;;;2810   
;;;2811       /* Init tickstart for timeout managment*/
;;;2812       tickstart = MID_GetTick();
000008  f7fffffe          BL       MID_GetTick
00000c  4606              MOV      r6,r0
;;;2813   
;;;2814       /* Disable ERR interrupt */
;;;2815       __MID_SPI_DISABLE_IT(mSPI, SPI_IT_ERR);
00000e  6820              LDR      r0,[r4,#0]
000010  6840              LDR      r0,[r0,#4]
000012  210f              MOVS     r1,#0xf
000014  0209              LSLS     r1,r1,#8
000016  4388              BICS     r0,r0,r1
000018  6821              LDR      r1,[r4,#0]
00001a  6048              STR      r0,[r1,#4]
;;;2816   
;;;2817       /* Disable Tx DMA Request */
;;;2818   //    CLEAR_BIT(mSPI->Instance->CR0.B[3], SPI_CR0_DMA_TXEN_mask_b3);
;;;2819   
;;;2820       /* Check the end of the transaction */
;;;2821       if (SPI_EndRxTxTransaction(mSPI, SPI_DEFAULT_TIMEOUT, tickstart) != MID_OK)
00001c  4632              MOV      r2,r6
00001e  2164              MOVS     r1,#0x64
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SPI_EndRxTxTransaction
000026  2800              CMP      r0,#0
000028  d005              BEQ      |L42.54|
;;;2822       {
;;;2823           SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_FLAG);
00002a  208c              MOVS     r0,#0x8c
00002c  5900              LDR      r0,[r0,r4]
00002e  2120              MOVS     r1,#0x20
000030  4308              ORRS     r0,r0,r1
000032  218c              MOVS     r1,#0x8c
000034  5108              STR      r0,[r1,r4]
                  |L42.54|
;;;2824       }
;;;2825   
;;;2826       /* Clear overrun flag in 2 Lines communication mode because received data is not read */
;;;2827       if (mSPI->Init.DataLine == SPI_STANDARD_SPI)
000036  68a0              LDR      r0,[r4,#8]
000038  2800              CMP      r0,#0
00003a  d112              BNE      |L42.98|
;;;2828       {
;;;2829           __MID_SPI_CLEAR_ROVRFFLAG(mSPI);
00003c  bf00              NOP      
00003e  9000              STR      r0,[sp,#0]
000040  6820              LDR      r0,[r4,#0]
000042  6b00              LDR      r0,[r0,#0x30]
000044  9000              STR      r0,[sp,#0]
000046  6820              LDR      r0,[r4,#0]
000048  6b00              LDR      r0,[r0,#0x30]
00004a  9000              STR      r0,[sp,#0]
00004c  6820              LDR      r0,[r4,#0]
00004e  6800              LDR      r0,[r0,#0]
000050  9000              STR      r0,[sp,#0]
000052  6820              LDR      r0,[r4,#0]
000054  6800              LDR      r0,[r0,#0]
000056  6ea1              LDR      r1,[r4,#0x68]
000058  4308              ORRS     r0,r0,r1
00005a  6821              LDR      r1,[r4,#0]
00005c  6008              STR      r0,[r1,#0]
00005e  bf00              NOP      
000060  bf00              NOP      
                  |L42.98|
;;;2830       }
;;;2831   
;;;2832       mSPI->TxXferCount = 0U;
000062  2000              MOVS     r0,#0
000064  63e0              STR      r0,[r4,#0x3c]
;;;2833       mSPI->State = MID_SPI_STATE_READY;
000066  2101              MOVS     r1,#1
000068  2089              MOVS     r0,#0x89
00006a  5501              STRB     r1,[r0,r4]
;;;2834   
;;;2835       if (mSPI->ErrorCode != MID_SPI_ERROR_NONE)
00006c  208c              MOVS     r0,#0x8c
00006e  5900              LDR      r0,[r0,r4]
000070  2800              CMP      r0,#0
000072  d003              BEQ      |L42.124|
;;;2836       {
;;;2837           MID_SPI_ErrorCallback(mSPI);
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       MID_SPI_ErrorCallback
                  |L42.122|
;;;2838           return;
;;;2839       }
;;;2840   
;;;2841       __MID_UNLOCK(mSPI);
;;;2842       
;;;2843       
;;;2844       MID_SPI_TxCpltCallback(mSPI);
;;;2845   }
00007a  bdf8              POP      {r3-r7,pc}
                  |L42.124|
00007c  bf00              NOP                            ;2841
00007e  2100              MOVS     r1,#0                 ;2841
000080  2088              MOVS     r0,#0x88              ;2841
000082  5501              STRB     r1,[r0,r4]            ;2841
000084  bf00              NOP                            ;2841
000086  4620              MOV      r0,r4                 ;2844
000088  f7fffffe          BL       MID_SPI_TxCpltCallback
00008c  bf00              NOP      
00008e  e7f4              B        |L42.122|
;;;2846   
                          ENDP


                          AREA ||i.SPI_DMATransmitReceiveCplt||, CODE, READONLY, ALIGN=2

                  SPI_DMATransmitReceiveCplt PROC
;;;2903    */
;;;2904   static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *mDMA)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2905   {
000002  4605              MOV      r5,r0
;;;2906       SPI_HandleTypeDef *mSPI = mDMA->Parent;
000004  6aac              LDR      r4,[r5,#0x28]
;;;2907       uint32_t           tickstart = 0U;
000006  2600              MOVS     r6,#0
;;;2908            
;;;2909       // Init tickstart for timeout management
;;;2910       tickstart = MID_GetTick();
000008  f7fffffe          BL       MID_GetTick
00000c  4606              MOV      r6,r0
;;;2911   
;;;2912       // Disable ERR interrupt
;;;2913       __MID_SPI_DISABLE_IT(mSPI, SPI_IT_ERR);
00000e  6820              LDR      r0,[r4,#0]
000010  6840              LDR      r0,[r0,#4]
000012  210f              MOVS     r1,#0xf
000014  0209              LSLS     r1,r1,#8
000016  4388              BICS     r0,r0,r1
000018  6821              LDR      r1,[r4,#0]
00001a  6048              STR      r0,[r1,#4]
;;;2914   
;;;2915       if((mDMA->Init.SrcPeri & MID_DMA_SPI_READ_MASK) > (MID_DMA_SPI_READ_MINID - 1))
00001c  7928              LDRB     r0,[r5,#4]
00001e  0700              LSLS     r0,r0,#28
000020  0f00              LSRS     r0,r0,#28
000022  2803              CMP      r0,#3
000024  d976              BLS      |L43.276|
;;;2916       {
;;;2917           if( (mDMA->Init.SrcPeri & MID_DMA_SPI_READ_MASK) < (MID_DMA_SPI_READ_MAXID + 1))
000026  7928              LDRB     r0,[r5,#4]
000028  0700              LSLS     r0,r0,#28
00002a  0f00              LSRS     r0,r0,#28
00002c  2809              CMP      r0,#9
00002e  d271              BCS      |L43.276|
;;;2918           {
;;;2919               mSPI->RxXferCount      = 0U;
000030  2000              MOVS     r0,#0
000032  64a0              STR      r0,[r4,#0x48]
;;;2920               *mSPI->RXTX_CLR       |= ( SPI_CR1_RDAT_CLR_mask_b0 | URT_CR4_RDAT_CLR_mask_b0);
000034  2080              MOVS     r0,#0x80
000036  5900              LDR      r0,[r0,r4]
000038  7800              LDRB     r0,[r0,#0]
00003a  2141              MOVS     r1,#0x41
00003c  4308              ORRS     r0,r0,r1
00003e  2180              MOVS     r1,#0x80
000040  5909              LDR      r1,[r1,r4]
000042  7008              STRB     r0,[r1,#0]
;;;2921               
;;;2922               /* Disable Rx/Tx DMA Request */
;;;2923   //            CLEAR_BIT(mSPI->Instance->CR0.B[3], SPI_CR0_DMA_RXEN_mask_b3);
;;;2924               
;;;2925               // When RXF happened or RXLVL not empty
;;;2926               while( (mSPI->Instance->STA.W & SPI_FLAG_RXF) || ((*(mSPI->RXTX_LVL)) & SPI_FLAG_RXLVL)!=0)
000044  e032              B        |L43.172|
                  |L43.70|
;;;2927               {
;;;2928                   // When RX shadow buffer not empty
;;;2929                   if( mSPI->RxXferCount!=0)
000046  6ca0              LDR      r0,[r4,#0x48]
000048  2800              CMP      r0,#0
00004a  d027              BEQ      |L43.156|
;;;2930                   {
;;;2931                       // Receive data in 32 Bit mode
;;;2932                       if(mSPI->Init.DataSize > SPI_DATASIZE_16BIT)
00004c  68e0              LDR      r0,[r4,#0xc]
00004e  2810              CMP      r0,#0x10
000050  d90a              BLS      |L43.104|
;;;2933                       {
;;;2934                           *((uint32_t*)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.W;
000052  6820              LDR      r0,[r4,#0]
000054  6b00              LDR      r0,[r0,#0x30]
000056  6c21              LDR      r1,[r4,#0x40]
000058  6008              STR      r0,[r1,#0]
;;;2935                           mSPI->pRxBuffPtr += sizeof(uint32_t);
00005a  6c20              LDR      r0,[r4,#0x40]
00005c  1d00              ADDS     r0,r0,#4
00005e  6420              STR      r0,[r4,#0x40]
;;;2936                           mSPI->RxXferCount--;
000060  6ca0              LDR      r0,[r4,#0x48]
000062  1e40              SUBS     r0,r0,#1
000064  64a0              STR      r0,[r4,#0x48]
000066  e021              B        |L43.172|
                  |L43.104|
;;;2937                       }
;;;2938                       // Receive data in 16 Bit mode
;;;2939                       else if (mSPI->Init.DataSize > SPI_DATASIZE_8BIT)
000068  68e0              LDR      r0,[r4,#0xc]
00006a  2808              CMP      r0,#8
00006c  d90a              BLS      |L43.132|
;;;2940                       {
;;;2941                           *((uint16_t*)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.H[0];
00006e  6820              LDR      r0,[r4,#0]
000070  8e00              LDRH     r0,[r0,#0x30]
000072  6c21              LDR      r1,[r4,#0x40]
000074  8008              STRH     r0,[r1,#0]
;;;2942                           mSPI->pRxBuffPtr += sizeof(uint16_t);
000076  6c20              LDR      r0,[r4,#0x40]
000078  1c80              ADDS     r0,r0,#2
00007a  6420              STR      r0,[r4,#0x40]
;;;2943                           mSPI->RxXferCount--;
00007c  6ca0              LDR      r0,[r4,#0x48]
00007e  1e40              SUBS     r0,r0,#1
000080  64a0              STR      r0,[r4,#0x48]
000082  e013              B        |L43.172|
                  |L43.132|
;;;2944                       }
;;;2945                       // Receive data in 8 Bit mode
;;;2946                       else 
;;;2947                       {
;;;2948                           (*mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.B[0];
000084  6820              LDR      r0,[r4,#0]
000086  3020              ADDS     r0,r0,#0x20
000088  7c00              LDRB     r0,[r0,#0x10]
00008a  6c21              LDR      r1,[r4,#0x40]
00008c  7008              STRB     r0,[r1,#0]
;;;2949                           mSPI->pRxBuffPtr += sizeof(uint8_t);
00008e  6c20              LDR      r0,[r4,#0x40]
000090  1c40              ADDS     r0,r0,#1
000092  6420              STR      r0,[r4,#0x40]
;;;2950                           mSPI->RxXferCount--;
000094  6ca0              LDR      r0,[r4,#0x48]
000096  1e40              SUBS     r0,r0,#1
000098  64a0              STR      r0,[r4,#0x48]
00009a  e007              B        |L43.172|
                  |L43.156|
;;;2951                       }
;;;2952                   }
;;;2953                   else
;;;2954                   {
;;;2955                       __MID_SPI_CLEAR_RXDATA(mSPI);
00009c  2080              MOVS     r0,#0x80
00009e  5900              LDR      r0,[r0,r4]
0000a0  7800              LDRB     r0,[r0,#0]
0000a2  2141              MOVS     r1,#0x41
0000a4  4308              ORRS     r0,r0,r1
0000a6  2180              MOVS     r1,#0x80
0000a8  5909              LDR      r1,[r1,r4]
0000aa  7008              STRB     r0,[r1,#0]
                  |L43.172|
0000ac  6820              LDR      r0,[r4,#0]            ;2926
0000ae  6800              LDR      r0,[r0,#0]            ;2926
0000b0  2140              MOVS     r1,#0x40              ;2926
0000b2  4008              ANDS     r0,r0,r1              ;2926
0000b4  2800              CMP      r0,#0                 ;2926
0000b6  d1c6              BNE      |L43.70|
0000b8  6fe0              LDR      r0,[r4,#0x7c]         ;2926
0000ba  7800              LDRB     r0,[r0,#0]            ;2926
0000bc  0740              LSLS     r0,r0,#29             ;2926
0000be  0f40              LSRS     r0,r0,#29             ;2926
0000c0  2800              CMP      r0,#0                 ;2926
0000c2  d1c0              BNE      |L43.70|
;;;2956                   }
;;;2957               }            
;;;2958               
;;;2959               // Clear error flag
;;;2960               if(mSPI->REG_TYPE == MID_SPI_SPI)
0000c4  2153              MOVS     r1,#0x53
0000c6  0609              LSLS     r1,r1,#24
0000c8  6b20              LDR      r0,[r4,#0x30]
0000ca  4288              CMP      r0,r1
0000cc  d109              BNE      |L43.226|
;;;2961                   WRITE_REG(mSPI->Instance->STA.W , (mSPI->SPI_FLAG_ROVRF | mSPI->SPI_FLAG_TUDRF | SPI_FLAG_MODF | SPI_FLAG_WEF | mSPI->SPI_FLAG_IDLF));
0000ce  6e61              LDR      r1,[r4,#0x64]
0000d0  6ea0              LDR      r0,[r4,#0x68]
0000d2  4308              ORRS     r0,r0,r1
0000d4  2103              MOVS     r1,#3
0000d6  0209              LSLS     r1,r1,#8
0000d8  4308              ORRS     r0,r0,r1
0000da  6f21              LDR      r1,[r4,#0x70]
0000dc  4308              ORRS     r0,r0,r1
0000de  6821              LDR      r1,[r4,#0]
0000e0  6008              STR      r0,[r1,#0]
                  |L43.226|
;;;2962               if(mSPI->REG_TYPE == MID_SPI_URT)
0000e2  2129              MOVS     r1,#0x29
0000e4  0649              LSLS     r1,r1,#25
0000e6  6b20              LDR      r0,[r4,#0x30]
0000e8  4288              CMP      r0,r1
0000ea  d104              BNE      |L43.246|
;;;2963                   WRITE_REG(mSPI->Instance->STA.W , (mSPI->SPI_FLAG_ROVRF | mSPI->SPI_FLAG_TUDRF));
0000ec  6e61              LDR      r1,[r4,#0x64]
0000ee  6ea0              LDR      r0,[r4,#0x68]
0000f0  4308              ORRS     r0,r0,r1
0000f2  6821              LDR      r1,[r4,#0]
0000f4  6008              STR      r0,[r1,#0]
                  |L43.246|
;;;2964               
;;;2965               // When status is DMA TX RX
;;;2966               if(mSPI->State == MID_SPI_STATE_BUSY_TX_RX)
0000f6  2089              MOVS     r0,#0x89
0000f8  5d00              LDRB     r0,[r0,r4]
0000fa  2805              CMP      r0,#5
0000fc  d103              BNE      |L43.262|
;;;2967               {
;;;2968                   mSPI->State = MID_SPI_STATE_BUSY_TX;
0000fe  2103              MOVS     r1,#3
000100  2089              MOVS     r0,#0x89
000102  5501              STRB     r1,[r0,r4]
000104  e006              B        |L43.276|
                  |L43.262|
;;;2969               }
;;;2970               // When status is DMA RX
;;;2971               else if(mSPI->State == MID_SPI_STATE_BUSY_RX)
000106  2089              MOVS     r0,#0x89
000108  5d00              LDRB     r0,[r0,r4]
00010a  2804              CMP      r0,#4
00010c  d102              BNE      |L43.276|
;;;2972               {
;;;2973                   mSPI->State = MID_SPI_STATE_READY;
00010e  2101              MOVS     r1,#1
000110  2089              MOVS     r0,#0x89
000112  5501              STRB     r1,[r0,r4]
                  |L43.276|
;;;2974               }
;;;2975           }
;;;2976       }
;;;2977           
;;;2978       if((mDMA->Init.DesPeri & MID_DMA_SPI_WRITE_MASK) > ( MID_DMA_SPI_WRITE_MINID - 1))
000114  210f              MOVS     r1,#0xf
000116  0209              LSLS     r1,r1,#8
000118  68a8              LDR      r0,[r5,#8]
00011a  4008              ANDS     r0,r0,r1
00011c  4923              LDR      r1,|L43.428|
00011e  4288              CMP      r0,r1
000120  d92c              BLS      |L43.380|
;;;2979       {
;;;2980           if((mDMA->Init.DesPeri & MID_DMA_SPI_WRITE_MASK) < ( MID_DMA_SPI_WRITE_MAXID + 1))
000122  210f              MOVS     r1,#0xf
000124  0209              LSLS     r1,r1,#8
000126  68a8              LDR      r0,[r5,#8]
000128  4008              ANDS     r0,r0,r1
00012a  4921              LDR      r1,|L43.432|
00012c  4288              CMP      r0,r1
00012e  d225              BCS      |L43.380|
;;;2981           {
;;;2982               mSPI->TxXferCount = 0U;
000130  2000              MOVS     r0,#0
000132  63e0              STR      r0,[r4,#0x3c]
;;;2983               
;;;2984               /* Disable Rx/Tx DMA Request */
;;;2985   //            CLEAR_BIT(mSPI->Instance->CR0.B[3], SPI_CR0_DMA_TXEN_mask_b3);
;;;2986               
;;;2987               // Control if the TX fifo is empty
;;;2988               if(SPI_WaitFlagStateUntilTimeout( mSPI, mSPI->SPI_FLAG_TCF, mSPI->SPI_FLAG_TCF , SPI_DEFAULT_TIMEOUT , tickstart) != MID_OK)
000134  9600              STR      r6,[sp,#0]
000136  6f62              LDR      r2,[r4,#0x74]
000138  4611              MOV      r1,r2
00013a  2364              MOVS     r3,#0x64
00013c  4620              MOV      r0,r4
00013e  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
000142  2800              CMP      r0,#0
000144  d006              BEQ      |L43.340|
;;;2989               {
;;;2990                   SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_FLAG);
000146  208c              MOVS     r0,#0x8c
000148  5900              LDR      r0,[r0,r4]
00014a  2120              MOVS     r1,#0x20
00014c  4308              ORRS     r0,r0,r1
00014e  218c              MOVS     r1,#0x8c
000150  5108              STR      r0,[r1,r4]
000152  e004              B        |L43.350|
                  |L43.340|
;;;2991               }
;;;2992               else
;;;2993               {   // Clear flag SPI TCF and TXF
;;;2994                   WRITE_REG(mSPI->Instance->STA.W , (mSPI->SPI_FLAG_TCF | SPI_FLAG_TXF));
000154  2180              MOVS     r1,#0x80
000156  6f60              LDR      r0,[r4,#0x74]
000158  4308              ORRS     r0,r0,r1
00015a  6821              LDR      r1,[r4,#0]
00015c  6008              STR      r0,[r1,#0]
                  |L43.350|
;;;2995               }
;;;2996               
;;;2997               // When status is DMA TX RX
;;;2998               if(mSPI->State == MID_SPI_STATE_BUSY_TX_RX)
00015e  2089              MOVS     r0,#0x89
000160  5d00              LDRB     r0,[r0,r4]
000162  2805              CMP      r0,#5
000164  d103              BNE      |L43.366|
;;;2999               {
;;;3000                   mSPI->State = MID_SPI_STATE_BUSY_RX;
000166  2104              MOVS     r1,#4
000168  2089              MOVS     r0,#0x89
00016a  5501              STRB     r1,[r0,r4]
00016c  e006              B        |L43.380|
                  |L43.366|
;;;3001               }
;;;3002               // When status is DMA TX
;;;3003               else if(mSPI->State == MID_SPI_STATE_BUSY_TX)
00016e  2089              MOVS     r0,#0x89
000170  5d00              LDRB     r0,[r0,r4]
000172  2803              CMP      r0,#3
000174  d102              BNE      |L43.380|
;;;3004               {
;;;3005                   mSPI->State = MID_SPI_STATE_READY;
000176  2101              MOVS     r1,#1
000178  2089              MOVS     r0,#0x89
00017a  5501              STRB     r1,[r0,r4]
                  |L43.380|
;;;3006               }
;;;3007           }
;;;3008       }
;;;3009       
;;;3010       
;;;3011   //    // Check the end of the transaction
;;;3012   //    if (SPI_EndRxTxTransaction(mSPI, SPI_DEFAULT_TIMEOUT, tickstart) != MID_OK)
;;;3013   //    {
;;;3014   //        SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_FLAG);
;;;3015   //    }
;;;3016       // Check transmit and receive is complete and unlock mSPI
;;;3017       if((mSPI->Instance->CR0.W & (SPI_CR0_DMA_TXEN_mask_w | SPI_CR0_DMA_RXEN_mask_w)) == 0x00000000)
00017c  6820              LDR      r0,[r4,#0]
00017e  6900              LDR      r0,[r0,#0x10]
000180  0f80              LSRS     r0,r0,#30
000182  0780              LSLS     r0,r0,#30
000184  2800              CMP      r0,#0
000186  d104              BNE      |L43.402|
;;;3018       {
;;;3019           __MID_UNLOCK(mSPI);
000188  bf00              NOP      
00018a  2100              MOVS     r1,#0
00018c  2088              MOVS     r0,#0x88
00018e  5501              STRB     r1,[r0,r4]
000190  bf00              NOP      
                  |L43.402|
;;;3020       }
;;;3021   
;;;3022       
;;;3023   
;;;3024       if (mSPI->ErrorCode != MID_SPI_ERROR_NONE)
000192  208c              MOVS     r0,#0x8c
000194  5900              LDR      r0,[r0,r4]
000196  2800              CMP      r0,#0
000198  d003              BEQ      |L43.418|
;;;3025       {
;;;3026           MID_SPI_ErrorCallback(mSPI);
00019a  4620              MOV      r0,r4
00019c  f7fffffe          BL       MID_SPI_ErrorCallback
                  |L43.416|
;;;3027           return;
;;;3028       }
;;;3029   
;;;3030       MID_SPI_TxRxCpltCallback(mSPI);
;;;3031   }
0001a0  bdf8              POP      {r3-r7,pc}
                  |L43.418|
0001a2  4620              MOV      r0,r4                 ;3030
0001a4  f7fffffe          BL       MID_SPI_TxRxCpltCallback
0001a8  bf00              NOP      
0001aa  e7f9              B        |L43.416|
;;;3032   
                          ENDP

                  |L43.428|
                          DCD      0x000003ff
                  |L43.432|
                          DCD      0x00000801

                          AREA ||i.SPI_DMATxAbortCallback||, CODE, READONLY, ALIGN=1

                  SPI_DMATxAbortCallback PROC
;;;3047    */
;;;3048   static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *mdma)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3049   {
000002  4605              MOV      r5,r0
;;;3050       SPI_HandleTypeDef *mSPI = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)mdma)->Parent;
000004  6aac              LDR      r4,[r5,#0x28]
;;;3051   
;;;3052       mSPI->mDMATX->XferAbortCallback = NULL;
000006  2000              MOVS     r0,#0
000008  6da1              LDR      r1,[r4,#0x58]
00000a  6388              STR      r0,[r1,#0x38]
;;;3053   
;;;3054       /* Disable Tx DMA Request */
;;;3055       CLEAR_BIT(mSPI->Instance->CR0.W, SPI_CR0_DMA_TXEN_mask_w);
00000c  6820              LDR      r0,[r4,#0]
00000e  6900              LDR      r0,[r0,#0x10]
000010  0040              LSLS     r0,r0,#1
000012  0840              LSRS     r0,r0,#1
000014  6821              LDR      r1,[r4,#0]
000016  6108              STR      r0,[r1,#0x10]
;;;3056   
;;;3057       if (SPI_EndRxTxTransaction(mSPI, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
000018  f7fffffe          BL       MID_GetTick
00001c  4606              MOV      r6,r0
00001e  4632              MOV      r2,r6
000020  2164              MOVS     r1,#0x64
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       SPI_EndRxTxTransaction
000028  2800              CMP      r0,#0
00002a  d002              BEQ      |L44.50|
;;;3058       {
;;;3059           mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
00002c  2140              MOVS     r1,#0x40
00002e  208c              MOVS     r0,#0x8c
000030  5101              STR      r1,[r0,r4]
                  |L44.50|
;;;3060       }
;;;3061   
;;;3062       /* Disable SPI Peripheral */
;;;3063       __MID_SPI_DISABLE(mSPI);
000032  6820              LDR      r0,[r4,#0]
000034  6900              LDR      r0,[r0,#0x10]
000036  0840              LSRS     r0,r0,#1
000038  0040              LSLS     r0,r0,#1
00003a  6821              LDR      r1,[r4,#0]
00003c  6108              STR      r0,[r1,#0x10]
;;;3064   
;;;3065       /* Empty the FRLVL fifo */
;;;3066       if (SPI_WaitFifoStateUntilTimeout(mSPI, SPI_FLAG_RXLVL, SPI_RXLVL_EMPTY, SPI_DEFAULT_TIMEOUT, MID_GetTick()) != MID_OK)
00003e  f7fffffe          BL       MID_GetTick
000042  4606              MOV      r6,r0
000044  2364              MOVS     r3,#0x64
000046  2200              MOVS     r2,#0
000048  2107              MOVS     r1,#7
00004a  9000              STR      r0,[sp,#0]
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
000052  2800              CMP      r0,#0
000054  d002              BEQ      |L44.92|
;;;3067       {
;;;3068           mSPI->ErrorCode = MID_SPI_ERROR_ABORT;
000056  2140              MOVS     r1,#0x40
000058  208c              MOVS     r0,#0x8c
00005a  5101              STR      r1,[r0,r4]
                  |L44.92|
;;;3069       }
;;;3070   
;;;3071       /* Check if an Abort process is still ongoing */
;;;3072       if (mSPI->mDMARX != NULL)
00005c  6de0              LDR      r0,[r4,#0x5c]
00005e  2800              CMP      r0,#0
000060  d004              BEQ      |L44.108|
;;;3073       {
;;;3074           if (mSPI->mDMARX->XferAbortCallback != NULL)
000062  6de0              LDR      r0,[r4,#0x5c]
000064  6b80              LDR      r0,[r0,#0x38]
000066  2800              CMP      r0,#0
000068  d000              BEQ      |L44.108|
                  |L44.106|
;;;3075           {
;;;3076               return;
;;;3077           }
;;;3078       }
;;;3079   
;;;3080       /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
;;;3081       mSPI->RxXferCount = 0U;
;;;3082       mSPI->TxXferCount = 0U;
;;;3083   
;;;3084       /* Check no error during Abort procedure */
;;;3085       if (mSPI->ErrorCode != MID_SPI_ERROR_ABORT)
;;;3086       {
;;;3087           /* Reset errorCode */
;;;3088           mSPI->ErrorCode = MID_SPI_ERROR_NONE;
;;;3089       }
;;;3090   
;;;3091       /* Clear the Error flags in the SR register */
;;;3092       __MID_SPI_CLEAR_ROVRFFLAG(mSPI);
;;;3093       __MID_SPI_CLEAR_WEFFLAG(mSPI);
;;;3094   
;;;3095       /* Restore mSPI->State to Ready */
;;;3096       mSPI->State  = MID_SPI_STATE_READY;
;;;3097   
;;;3098       /* Call user Abort complete callback */
;;;3099       MID_SPI_AbortCpltCallback(mSPI);
;;;3100   }
00006a  bdf8              POP      {r3-r7,pc}
                  |L44.108|
00006c  2000              MOVS     r0,#0                 ;3081
00006e  64a0              STR      r0,[r4,#0x48]         ;3081
000070  63e0              STR      r0,[r4,#0x3c]         ;3082
000072  208c              MOVS     r0,#0x8c              ;3085
000074  5900              LDR      r0,[r0,r4]            ;3085
000076  2840              CMP      r0,#0x40              ;3085
000078  d002              BEQ      |L44.128|
00007a  2100              MOVS     r1,#0                 ;3088
00007c  208c              MOVS     r0,#0x8c              ;3088
00007e  5101              STR      r1,[r0,r4]            ;3088
                  |L44.128|
000080  bf00              NOP                            ;3092
000082  2000              MOVS     r0,#0                 ;3092
000084  9000              STR      r0,[sp,#0]            ;3092
000086  6820              LDR      r0,[r4,#0]            ;3092
000088  6b00              LDR      r0,[r0,#0x30]         ;3092
00008a  9000              STR      r0,[sp,#0]            ;3092
00008c  6820              LDR      r0,[r4,#0]            ;3092
00008e  6b00              LDR      r0,[r0,#0x30]         ;3092
000090  9000              STR      r0,[sp,#0]            ;3092
000092  6820              LDR      r0,[r4,#0]            ;3092
000094  6800              LDR      r0,[r0,#0]            ;3092
000096  9000              STR      r0,[sp,#0]            ;3092
000098  6820              LDR      r0,[r4,#0]            ;3092
00009a  6800              LDR      r0,[r0,#0]            ;3092
00009c  6ea1              LDR      r1,[r4,#0x68]         ;3092
00009e  4308              ORRS     r0,r0,r1              ;3092
0000a0  6821              LDR      r1,[r4,#0]            ;3092
0000a2  6008              STR      r0,[r1,#0]            ;3092
0000a4  bf00              NOP                            ;3092
0000a6  bf00              NOP                            ;3092
0000a8  bf00              NOP                            ;3093
0000aa  2000              MOVS     r0,#0                 ;3093
0000ac  9000              STR      r0,[sp,#0]            ;3093
0000ae  6820              LDR      r0,[r4,#0]            ;3093
0000b0  6800              LDR      r0,[r0,#0]            ;3093
0000b2  9000              STR      r0,[sp,#0]            ;3093
0000b4  6820              LDR      r0,[r4,#0]            ;3093
0000b6  6800              LDR      r0,[r0,#0]            ;3093
0000b8  2101              MOVS     r1,#1                 ;3093
0000ba  0249              LSLS     r1,r1,#9              ;3093
0000bc  4308              ORRS     r0,r0,r1              ;3093
0000be  6821              LDR      r1,[r4,#0]            ;3093
0000c0  6008              STR      r0,[r1,#0]            ;3093
0000c2  bf00              NOP                            ;3093
0000c4  bf00              NOP                            ;3093
0000c6  2101              MOVS     r1,#1                 ;3096
0000c8  2089              MOVS     r0,#0x89              ;3096
0000ca  5501              STRB     r1,[r0,r4]            ;3096
0000cc  4620              MOV      r0,r4                 ;3099
0000ce  f7fffffe          BL       MID_SPI_AbortCpltCallback
0000d2  bf00              NOP      
0000d4  e7c9              B        |L44.106|
;;;3101   
                          ENDP


                          AREA ||i.SPI_EndRxTransaction||, CODE, READONLY, ALIGN=1

                  SPI_EndRxTransaction PROC
;;;3981    */
;;;3982   static MID_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *mSPI,  uint32_t Timeout, uint32_t Tickstart)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3983   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;3984       
;;;3985       /* Control if the TX fifo is empty */
;;;3986       // When SPI data lines is standard SPI and X-line data output
;;;3987       if( mSPI->REG_TYPE == MID_SPI_SPI)
000008  2153              MOVS     r1,#0x53
00000a  0609              LSLS     r1,r1,#24
00000c  6b20              LDR      r0,[r4,#0x30]
00000e  4288              CMP      r0,r1
000010  d121              BNE      |L45.86|
;;;3988       {
;;;3989           if(((mSPI->Instance->CR2.B[0] & SPI_CR2_DAT_LINE_mask_b0) == 0) || 
000012  6820              LDR      r0,[r4,#0]
000014  7e00              LDRB     r0,[r0,#0x18]
000016  2170              MOVS     r1,#0x70
000018  4008              ANDS     r0,r0,r1
00001a  2800              CMP      r0,#0
00001c  d005              BEQ      |L45.42|
;;;3990               (mSPI->Instance->CR2.B[0] & SPI_CR2_BDIR_OE_mask_b0) != 0)
00001e  6820              LDR      r0,[r4,#0]
000020  7e00              LDRB     r0,[r0,#0x18]
000022  2104              MOVS     r1,#4
000024  4008              ANDS     r0,r0,r1
000026  2800              CMP      r0,#0
000028  d032              BEQ      |L45.144|
                  |L45.42|
;;;3991           {
;;;3992               if(SPI_WaitFlagStateUntilTimeout( mSPI, mSPI->SPI_FLAG_TCF, mSPI->SPI_FLAG_TCF , Timeout , Tickstart) != MID_OK)
00002a  9500              STR      r5,[sp,#0]
00002c  6f62              LDR      r2,[r4,#0x74]
00002e  4611              MOV      r1,r2
000030  4633              MOV      r3,r6
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
000038  2800              CMP      r0,#0
00003a  d006              BEQ      |L45.74|
;;;3993               {
;;;3994                   SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_FLAG);
00003c  208c              MOVS     r0,#0x8c
00003e  5900              LDR      r0,[r0,r4]
000040  2120              MOVS     r1,#0x20
000042  4308              ORRS     r0,r0,r1
000044  218c              MOVS     r1,#0x8c
000046  5108              STR      r0,[r1,r4]
000048  e022              B        |L45.144|
                  |L45.74|
;;;3995               }
;;;3996               else
;;;3997               {
;;;3998                   WRITE_REG(mSPI->Instance->STA.W , (mSPI->SPI_FLAG_TCF | SPI_FLAG_TXF));
00004a  2180              MOVS     r1,#0x80
00004c  6f60              LDR      r0,[r4,#0x74]
00004e  4308              ORRS     r0,r0,r1
000050  6821              LDR      r1,[r4,#0]
000052  6008              STR      r0,[r1,#0]
000054  e01c              B        |L45.144|
                  |L45.86|
;;;3999               }
;;;4000           }
;;;4001       }
;;;4002       else if( ((mSPI->Init.Mode & SPI_MDS_MASK) == SPI_MODE_MASTER) && (mSPI->Init.DataLine == SPI_STANDARD_SPI) )
000056  2110              MOVS     r1,#0x10
000058  6860              LDR      r0,[r4,#4]
00005a  4008              ANDS     r0,r0,r1
00005c  2810              CMP      r0,#0x10
00005e  d117              BNE      |L45.144|
000060  68a0              LDR      r0,[r4,#8]
000062  2800              CMP      r0,#0
000064  d114              BNE      |L45.144|
;;;4003       {
;;;4004           if(SPI_WaitFlagStateUntilTimeout( mSPI, mSPI->SPI_FLAG_TCF, mSPI->SPI_FLAG_TCF , Timeout , Tickstart) != MID_OK)
000066  9500              STR      r5,[sp,#0]
000068  6f62              LDR      r2,[r4,#0x74]
00006a  4611              MOV      r1,r2
00006c  4633              MOV      r3,r6
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
000074  2800              CMP      r0,#0
000076  d006              BEQ      |L45.134|
;;;4005           {
;;;4006               SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_FLAG);
000078  208c              MOVS     r0,#0x8c
00007a  5900              LDR      r0,[r0,r4]
00007c  2120              MOVS     r1,#0x20
00007e  4308              ORRS     r0,r0,r1
000080  218c              MOVS     r1,#0x8c
000082  5108              STR      r0,[r1,r4]
000084  e004              B        |L45.144|
                  |L45.134|
;;;4007           }
;;;4008           else
;;;4009           {
;;;4010               WRITE_REG(mSPI->Instance->STA.W , (mSPI->SPI_FLAG_TCF | SPI_FLAG_TXF));
000086  2180              MOVS     r1,#0x80
000088  6f60              LDR      r0,[r4,#0x74]
00008a  4308              ORRS     r0,r0,r1
00008c  6821              LDR      r1,[r4,#0]
00008e  6008              STR      r0,[r1,#0]
                  |L45.144|
;;;4011           }
;;;4012       }
;;;4013       
;;;4014       while( (mSPI->Instance->STA.W & SPI_FLAG_RXF) || ((*(mSPI->RXTX_LVL)) & SPI_FLAG_RXLVL)!=0)
000090  e037              B        |L45.258|
                  |L45.146|
;;;4015       {
;;;4016           if( mSPI->RxXferCount!=0)
000092  6ca0              LDR      r0,[r4,#0x48]
000094  2800              CMP      r0,#0
000096  d027              BEQ      |L45.232|
;;;4017           {
;;;4018               /* Receive data in 32 Bit mode */
;;;4019               if(mSPI->Init.DataSize > SPI_DATASIZE_16BIT)
000098  68e0              LDR      r0,[r4,#0xc]
00009a  2810              CMP      r0,#0x10
00009c  d90a              BLS      |L45.180|
;;;4020               {
;;;4021                   *((uint32_t*)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.W;
00009e  6820              LDR      r0,[r4,#0]
0000a0  6b00              LDR      r0,[r0,#0x30]
0000a2  6c21              LDR      r1,[r4,#0x40]
0000a4  6008              STR      r0,[r1,#0]
;;;4022                   mSPI->pRxBuffPtr += sizeof(uint32_t);
0000a6  6c20              LDR      r0,[r4,#0x40]
0000a8  1d00              ADDS     r0,r0,#4
0000aa  6420              STR      r0,[r4,#0x40]
;;;4023                   mSPI->RxXferCount--;
0000ac  6ca0              LDR      r0,[r4,#0x48]
0000ae  1e40              SUBS     r0,r0,#1
0000b0  64a0              STR      r0,[r4,#0x48]
0000b2  e026              B        |L45.258|
                  |L45.180|
;;;4024               }
;;;4025               /* Receive data in 16 Bit mode */
;;;4026               else if (mSPI->Init.DataSize > SPI_DATASIZE_8BIT)
0000b4  68e0              LDR      r0,[r4,#0xc]
0000b6  2808              CMP      r0,#8
0000b8  d90a              BLS      |L45.208|
;;;4027               {
;;;4028                   *((uint16_t*)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.H[0];
0000ba  6820              LDR      r0,[r4,#0]
0000bc  8e00              LDRH     r0,[r0,#0x30]
0000be  6c21              LDR      r1,[r4,#0x40]
0000c0  8008              STRH     r0,[r1,#0]
;;;4029                   mSPI->pRxBuffPtr += sizeof(uint16_t);
0000c2  6c20              LDR      r0,[r4,#0x40]
0000c4  1c80              ADDS     r0,r0,#2
0000c6  6420              STR      r0,[r4,#0x40]
;;;4030                   mSPI->RxXferCount--;
0000c8  6ca0              LDR      r0,[r4,#0x48]
0000ca  1e40              SUBS     r0,r0,#1
0000cc  64a0              STR      r0,[r4,#0x48]
0000ce  e018              B        |L45.258|
                  |L45.208|
;;;4031               }
;;;4032               /* Receive data in 16 Bit mode */
;;;4033               else 
;;;4034               {
;;;4035                   (*mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.B[0];
0000d0  6820              LDR      r0,[r4,#0]
0000d2  3020              ADDS     r0,r0,#0x20
0000d4  7c00              LDRB     r0,[r0,#0x10]
0000d6  6c21              LDR      r1,[r4,#0x40]
0000d8  7008              STRB     r0,[r1,#0]
;;;4036                   mSPI->pRxBuffPtr += sizeof(uint8_t);
0000da  6c20              LDR      r0,[r4,#0x40]
0000dc  1c40              ADDS     r0,r0,#1
0000de  6420              STR      r0,[r4,#0x40]
;;;4037                   mSPI->RxXferCount--;
0000e0  6ca0              LDR      r0,[r4,#0x48]
0000e2  1e40              SUBS     r0,r0,#1
0000e4  64a0              STR      r0,[r4,#0x48]
0000e6  e00c              B        |L45.258|
                  |L45.232|
;;;4038               }
;;;4039           }
;;;4040           else if(mSPI->REG_TYPE == MID_SPI_SPI)
0000e8  2153              MOVS     r1,#0x53
0000ea  0609              LSLS     r1,r1,#24
0000ec  6b20              LDR      r0,[r4,#0x30]
0000ee  4288              CMP      r0,r1
0000f0  d107              BNE      |L45.258|
;;;4041           {
;;;4042               __MID_SPI_CLEAR_RXDATA(mSPI);
0000f2  2080              MOVS     r0,#0x80
0000f4  5900              LDR      r0,[r0,r4]
0000f6  7800              LDRB     r0,[r0,#0]
0000f8  2141              MOVS     r1,#0x41
0000fa  4308              ORRS     r0,r0,r1
0000fc  2180              MOVS     r1,#0x80
0000fe  5909              LDR      r1,[r1,r4]
000100  7008              STRB     r0,[r1,#0]
                  |L45.258|
000102  6820              LDR      r0,[r4,#0]            ;4014
000104  6800              LDR      r0,[r0,#0]            ;4014
000106  2140              MOVS     r1,#0x40              ;4014
000108  4008              ANDS     r0,r0,r1              ;4014
00010a  2800              CMP      r0,#0                 ;4014
00010c  d1c1              BNE      |L45.146|
00010e  6fe0              LDR      r0,[r4,#0x7c]         ;4014
000110  7800              LDRB     r0,[r0,#0]            ;4014
000112  0740              LSLS     r0,r0,#29             ;4014
000114  0f40              LSRS     r0,r0,#29             ;4014
000116  2800              CMP      r0,#0                 ;4014
000118  d1bb              BNE      |L45.146|
;;;4043           }
;;;4044   
;;;4045       }
;;;4046       
;;;4047       // Clear error flag
;;;4048       if(mSPI->REG_TYPE == MID_SPI_SPI)
00011a  2153              MOVS     r1,#0x53
00011c  0609              LSLS     r1,r1,#24
00011e  6b20              LDR      r0,[r4,#0x30]
000120  4288              CMP      r0,r1
000122  d109              BNE      |L45.312|
;;;4049           WRITE_REG(mSPI->Instance->STA.W , (mSPI->SPI_FLAG_ROVRF | mSPI->SPI_FLAG_TUDRF | SPI_FLAG_MODF | SPI_FLAG_WEF | mSPI->SPI_FLAG_IDLF));
000124  6e61              LDR      r1,[r4,#0x64]
000126  6ea0              LDR      r0,[r4,#0x68]
000128  4308              ORRS     r0,r0,r1
00012a  2103              MOVS     r1,#3
00012c  0209              LSLS     r1,r1,#8
00012e  4308              ORRS     r0,r0,r1
000130  6f21              LDR      r1,[r4,#0x70]
000132  4308              ORRS     r0,r0,r1
000134  6821              LDR      r1,[r4,#0]
000136  6008              STR      r0,[r1,#0]
                  |L45.312|
;;;4050       if(mSPI->REG_TYPE == MID_SPI_URT)
000138  2129              MOVS     r1,#0x29
00013a  0649              LSLS     r1,r1,#25
00013c  6b20              LDR      r0,[r4,#0x30]
00013e  4288              CMP      r0,r1
000140  d104              BNE      |L45.332|
;;;4051           WRITE_REG(mSPI->Instance->STA.W , (mSPI->SPI_FLAG_ROVRF | mSPI->SPI_FLAG_TUDRF));
000142  6e61              LDR      r1,[r4,#0x64]
000144  6ea0              LDR      r0,[r4,#0x68]
000146  4308              ORRS     r0,r0,r1
000148  6821              LDR      r1,[r4,#0]
00014a  6008              STR      r0,[r1,#0]
                  |L45.332|
;;;4052       
;;;4053       return(MID_OK);
00014c  2000              MOVS     r0,#0
;;;4054   } 
00014e  bdf8              POP      {r3-r7,pc}
;;;4055   
                          ENDP


                          AREA ||i.SPI_EndRxTxTransaction||, CODE, READONLY, ALIGN=1

                  SPI_EndRxTxTransaction PROC
;;;3908    */
;;;3909   static MID_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *mSPI, uint32_t Timeout, uint32_t Tickstart)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3910   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;3911       // Control if the TX fifo is empty
;;;3912       if(SPI_WaitFlagStateUntilTimeout( mSPI, mSPI->SPI_FLAG_TCF, mSPI->SPI_FLAG_TCF , Timeout , Tickstart) != MID_OK)
000008  9600              STR      r6,[sp,#0]
00000a  6f62              LDR      r2,[r4,#0x74]
00000c  4611              MOV      r1,r2
00000e  462b              MOV      r3,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
000016  2800              CMP      r0,#0
000018  d006              BEQ      |L46.40|
;;;3913       {
;;;3914           SET_BIT(mSPI->ErrorCode, MID_SPI_ERROR_FLAG);
00001a  208c              MOVS     r0,#0x8c
00001c  5900              LDR      r0,[r0,r4]
00001e  2120              MOVS     r1,#0x20
000020  4308              ORRS     r0,r0,r1
000022  218c              MOVS     r1,#0x8c
000024  5108              STR      r0,[r1,r4]
000026  e004              B        |L46.50|
                  |L46.40|
;;;3915       }
;;;3916       else
;;;3917       {   // Clear flag SPI TCF and TXF
;;;3918           WRITE_REG(mSPI->Instance->STA.W , (mSPI->SPI_FLAG_TCF | SPI_FLAG_TXF));
000028  2180              MOVS     r1,#0x80
00002a  6f60              LDR      r0,[r4,#0x74]
00002c  4308              ORRS     r0,r0,r1
00002e  6821              LDR      r1,[r4,#0]
000030  6008              STR      r0,[r1,#0]
                  |L46.50|
;;;3919       }
;;;3920       
;;;3921       // When RXF happened or RXLVL not empty
;;;3922       while( (mSPI->Instance->STA.W & SPI_FLAG_RXF) || ((*(mSPI->RXTX_LVL)) & SPI_FLAG_RXLVL)!=0)
000032  e032              B        |L46.154|
                  |L46.52|
;;;3923       {
;;;3924           // When RX shadow buffer not empty
;;;3925           if( mSPI->RxXferCount!=0)
000034  6ca0              LDR      r0,[r4,#0x48]
000036  2800              CMP      r0,#0
000038  d027              BEQ      |L46.138|
;;;3926           {
;;;3927               // Receive data in 32 Bit mode
;;;3928               if(mSPI->Init.DataSize > SPI_DATASIZE_16BIT)
00003a  68e0              LDR      r0,[r4,#0xc]
00003c  2810              CMP      r0,#0x10
00003e  d90a              BLS      |L46.86|
;;;3929               {
;;;3930                   *((uint32_t*)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.W;
000040  6820              LDR      r0,[r4,#0]
000042  6b00              LDR      r0,[r0,#0x30]
000044  6c21              LDR      r1,[r4,#0x40]
000046  6008              STR      r0,[r1,#0]
;;;3931                   mSPI->pRxBuffPtr += sizeof(uint32_t);
000048  6c20              LDR      r0,[r4,#0x40]
00004a  1d00              ADDS     r0,r0,#4
00004c  6420              STR      r0,[r4,#0x40]
;;;3932                   mSPI->RxXferCount--;
00004e  6ca0              LDR      r0,[r4,#0x48]
000050  1e40              SUBS     r0,r0,#1
000052  64a0              STR      r0,[r4,#0x48]
000054  e021              B        |L46.154|
                  |L46.86|
;;;3933               }
;;;3934               // Receive data in 16 Bit mode
;;;3935               else if (mSPI->Init.DataSize > SPI_DATASIZE_8BIT)
000056  68e0              LDR      r0,[r4,#0xc]
000058  2808              CMP      r0,#8
00005a  d90a              BLS      |L46.114|
;;;3936               {
;;;3937                   *((uint16_t*)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.H[0];
00005c  6820              LDR      r0,[r4,#0]
00005e  8e00              LDRH     r0,[r0,#0x30]
000060  6c21              LDR      r1,[r4,#0x40]
000062  8008              STRH     r0,[r1,#0]
;;;3938                   mSPI->pRxBuffPtr += sizeof(uint16_t);
000064  6c20              LDR      r0,[r4,#0x40]
000066  1c80              ADDS     r0,r0,#2
000068  6420              STR      r0,[r4,#0x40]
;;;3939                   mSPI->RxXferCount--;
00006a  6ca0              LDR      r0,[r4,#0x48]
00006c  1e40              SUBS     r0,r0,#1
00006e  64a0              STR      r0,[r4,#0x48]
000070  e013              B        |L46.154|
                  |L46.114|
;;;3940               }
;;;3941               // Receive data in 8 Bit mode
;;;3942               else 
;;;3943               {
;;;3944                   (*mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.B[0];
000072  6820              LDR      r0,[r4,#0]
000074  3020              ADDS     r0,r0,#0x20
000076  7c00              LDRB     r0,[r0,#0x10]
000078  6c21              LDR      r1,[r4,#0x40]
00007a  7008              STRB     r0,[r1,#0]
;;;3945                   mSPI->pRxBuffPtr += sizeof(uint8_t);
00007c  6c20              LDR      r0,[r4,#0x40]
00007e  1c40              ADDS     r0,r0,#1
000080  6420              STR      r0,[r4,#0x40]
;;;3946                   mSPI->RxXferCount--;
000082  6ca0              LDR      r0,[r4,#0x48]
000084  1e40              SUBS     r0,r0,#1
000086  64a0              STR      r0,[r4,#0x48]
000088  e007              B        |L46.154|
                  |L46.138|
;;;3947               }
;;;3948           }
;;;3949           else
;;;3950           {
;;;3951               __MID_SPI_CLEAR_RXDATA(mSPI);
00008a  2080              MOVS     r0,#0x80
00008c  5900              LDR      r0,[r0,r4]
00008e  7800              LDRB     r0,[r0,#0]
000090  2141              MOVS     r1,#0x41
000092  4308              ORRS     r0,r0,r1
000094  2180              MOVS     r1,#0x80
000096  5909              LDR      r1,[r1,r4]
000098  7008              STRB     r0,[r1,#0]
                  |L46.154|
00009a  6820              LDR      r0,[r4,#0]            ;3922
00009c  6800              LDR      r0,[r0,#0]            ;3922
00009e  2140              MOVS     r1,#0x40              ;3922
0000a0  4008              ANDS     r0,r0,r1              ;3922
0000a2  2800              CMP      r0,#0                 ;3922
0000a4  d1c6              BNE      |L46.52|
0000a6  6fe0              LDR      r0,[r4,#0x7c]         ;3922
0000a8  7800              LDRB     r0,[r0,#0]            ;3922
0000aa  0740              LSLS     r0,r0,#29             ;3922
0000ac  0f40              LSRS     r0,r0,#29             ;3922
0000ae  2800              CMP      r0,#0                 ;3922
0000b0  d1c0              BNE      |L46.52|
;;;3952           }
;;;3953       }
;;;3954       
;;;3955       // Clear error flag
;;;3956       if(mSPI->REG_TYPE == MID_SPI_SPI)
0000b2  2153              MOVS     r1,#0x53
0000b4  0609              LSLS     r1,r1,#24
0000b6  6b20              LDR      r0,[r4,#0x30]
0000b8  4288              CMP      r0,r1
0000ba  d109              BNE      |L46.208|
;;;3957           WRITE_REG(mSPI->Instance->STA.W , (mSPI->SPI_FLAG_ROVRF | mSPI->SPI_FLAG_TUDRF | SPI_FLAG_MODF | SPI_FLAG_WEF | mSPI->SPI_FLAG_IDLF));
0000bc  6e61              LDR      r1,[r4,#0x64]
0000be  6ea0              LDR      r0,[r4,#0x68]
0000c0  4308              ORRS     r0,r0,r1
0000c2  2103              MOVS     r1,#3
0000c4  0209              LSLS     r1,r1,#8
0000c6  4308              ORRS     r0,r0,r1
0000c8  6f21              LDR      r1,[r4,#0x70]
0000ca  4308              ORRS     r0,r0,r1
0000cc  6821              LDR      r1,[r4,#0]
0000ce  6008              STR      r0,[r1,#0]
                  |L46.208|
;;;3958       if(mSPI->REG_TYPE == MID_SPI_URT)
0000d0  2129              MOVS     r1,#0x29
0000d2  0649              LSLS     r1,r1,#25
0000d4  6b20              LDR      r0,[r4,#0x30]
0000d6  4288              CMP      r0,r1
0000d8  d104              BNE      |L46.228|
;;;3959           WRITE_REG(mSPI->Instance->STA.W , (mSPI->SPI_FLAG_ROVRF | mSPI->SPI_FLAG_TUDRF));
0000da  6e61              LDR      r1,[r4,#0x64]
0000dc  6ea0              LDR      r0,[r4,#0x68]
0000de  4308              ORRS     r0,r0,r1
0000e0  6821              LDR      r1,[r4,#0]
0000e2  6008              STR      r0,[r1,#0]
                  |L46.228|
;;;3960       
;;;3961       return(MID_OK);
0000e4  2000              MOVS     r0,#0
;;;3962   }
0000e6  bdf8              POP      {r3-r7,pc}
;;;3963   
                          ENDP


                          AREA ||i.SPI_RxISR_16BIT||, CODE, READONLY, ALIGN=1

                  SPI_RxISR_16BIT PROC
;;;3575    */
;;;3576   static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *mSPI)
000000  b570              PUSH     {r4-r6,lr}
;;;3577   {
000002  4604              MOV      r4,r0
;;;3578       uint8_t SPI_RxISR_16BIT_RXNUM;
;;;3579       
;;;3580       
;;;3581       SPI_RxISR_16BIT_RXNUM = (*mSPI->RNUM & SPI_STA_RNUM_mask_b3);
000004  2084              MOVS     r0,#0x84
000006  5900              LDR      r0,[r0,r4]
000008  7800              LDRB     r0,[r0,#0]
00000a  0745              LSLS     r5,r0,#29
00000c  0f6d              LSRS     r5,r5,#29
;;;3582       
;;;3583       
;;;3584       if( SPI_RxISR_16BIT_RXNUM == 4)
00000e  2d04              CMP      r5,#4
000010  d104              BNE      |L47.28|
;;;3585       {
;;;3586           *((uint32_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.W;
000012  6820              LDR      r0,[r4,#0]
000014  6b00              LDR      r0,[r0,#0x30]
000016  6c21              LDR      r1,[r4,#0x40]
000018  6008              STR      r0,[r1,#0]
00001a  e00f              B        |L47.60|
                  |L47.28|
;;;3587       }
;;;3588       else if( SPI_RxISR_16BIT_RXNUM == 2)
00001c  2d02              CMP      r5,#2
00001e  d104              BNE      |L47.42|
;;;3589       {
;;;3590           *((uint16_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.H[0];
000020  6820              LDR      r0,[r4,#0]
000022  8e00              LDRH     r0,[r0,#0x30]
000024  6c21              LDR      r1,[r4,#0x40]
000026  8008              STRH     r0,[r1,#0]
000028  e008              B        |L47.60|
                  |L47.42|
;;;3591       }
;;;3592       else if( SPI_RxISR_16BIT_RXNUM == 3)
00002a  2d03              CMP      r5,#3
00002c  d105              BNE      |L47.58|
;;;3593       {
;;;3594           *((uint16_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.H[0];
00002e  6820              LDR      r0,[r4,#0]
000030  8e00              LDRH     r0,[r0,#0x30]
000032  6c21              LDR      r1,[r4,#0x40]
000034  8008              STRH     r0,[r1,#0]
;;;3595           
;;;3596           SPI_RxISR_16BIT_RXNUM = 2;
000036  2502              MOVS     r5,#2
000038  e000              B        |L47.60|
                  |L47.58|
;;;3597       }
;;;3598       else
;;;3599       {
;;;3600           SPI_RxISR_16BIT_RXNUM = 0;
00003a  2500              MOVS     r5,#0
                  |L47.60|
;;;3601       }
;;;3602       
;;;3603       mSPI->pRxBuffPtr  += SPI_RxISR_16BIT_RXNUM;
00003c  6c20              LDR      r0,[r4,#0x40]
00003e  1940              ADDS     r0,r0,r5
000040  6420              STR      r0,[r4,#0x40]
;;;3604       mSPI->RxXferCount -= SPI_RxISR_16BIT_RXNUM;
000042  6ca0              LDR      r0,[r4,#0x48]
000044  1b40              SUBS     r0,r0,r5
000046  64a0              STR      r0,[r4,#0x48]
;;;3605       
;;;3606       // Check the end of the reception.
;;;3607       if (mSPI->RxXferCount == 0U)
000048  6ca0              LDR      r0,[r4,#0x48]
00004a  2800              CMP      r0,#0
00004c  d103              BNE      |L47.86|
;;;3608       {
;;;3609           SPI_CloseRx_ISR(mSPI);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       SPI_CloseRx_ISR
000054  e00b              B        |L47.110|
                  |L47.86|
;;;3610       }
;;;3611       else if(mSPI->RxXferCount <= 1) 
000056  6ca0              LDR      r0,[r4,#0x48]
000058  2801              CMP      r0,#1
00005a  d808              BHI      |L47.110|
;;;3612       {
;;;3613           // Modify RX_TH
;;;3614           MODIFY_REG( *mSPI->RNUM , SPI_STA_RNUM_mask_b3 , 1);
00005c  2084              MOVS     r0,#0x84
00005e  5900              LDR      r0,[r0,r4]
000060  7800              LDRB     r0,[r0,#0]
000062  08c0              LSRS     r0,r0,#3
000064  00c0              LSLS     r0,r0,#3
000066  1c40              ADDS     r0,r0,#1
000068  2184              MOVS     r1,#0x84
00006a  5909              LDR      r1,[r1,r4]
00006c  7008              STRB     r0,[r1,#0]
                  |L47.110|
;;;3615       }
;;;3616   }
00006e  bd70              POP      {r4-r6,pc}
;;;3617   
                          ENDP


                          AREA ||i.SPI_RxISR_32BIT||, CODE, READONLY, ALIGN=1

                  SPI_RxISR_32BIT PROC
;;;3633    */
;;;3634   static void SPI_RxISR_32BIT(struct __SPI_HandleTypeDef *mSPI)
000000  b510              PUSH     {r4,lr}
;;;3635   {
000002  4604              MOV      r4,r0
;;;3636       // Get 32 bit data
;;;3637       *((uint32_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.W;
000004  6820              LDR      r0,[r4,#0]
000006  6b00              LDR      r0,[r0,#0x30]
000008  6c21              LDR      r1,[r4,#0x40]
00000a  6008              STR      r0,[r1,#0]
;;;3638       mSPI->pRxBuffPtr += sizeof(uint32_t);
00000c  6c20              LDR      r0,[r4,#0x40]
00000e  1d00              ADDS     r0,r0,#4
000010  6420              STR      r0,[r4,#0x40]
;;;3639   
;;;3640       // RxCferCount --
;;;3641       mSPI->RxXferCount--;
000012  6ca0              LDR      r0,[r4,#0x48]
000014  1e40              SUBS     r0,r0,#1
000016  64a0              STR      r0,[r4,#0x48]
;;;3642   
;;;3643       // Check the end of the reception.
;;;3644       if (mSPI->RxXferCount == 0U)
000018  6ca0              LDR      r0,[r4,#0x48]
00001a  2800              CMP      r0,#0
00001c  d102              BNE      |L48.36|
;;;3645       {
;;;3646           SPI_CloseRx_ISR(mSPI);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SPI_CloseRx_ISR
                  |L48.36|
;;;3647       }
;;;3648   }
000024  bd10              POP      {r4,pc}
;;;3649   
                          ENDP


                          AREA ||i.SPI_RxISR_8BIT||, CODE, READONLY, ALIGN=1

                  SPI_RxISR_8BIT PROC
;;;3518    */
;;;3519   static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *mSPI)
000000  b538              PUSH     {r3-r5,lr}
;;;3520   {
000002  4604              MOV      r4,r0
;;;3521       uint8_t SPI_RxISR_8BIT_RXNUM;
;;;3522       ctype   SPI_RxISR_8BIT_Tmp;
;;;3523       
;;;3524       SPI_RxISR_8BIT_RXNUM = (*mSPI->RNUM & SPI_STA_RNUM_mask_b3);
000004  2084              MOVS     r0,#0x84
000006  5900              LDR      r0,[r0,r4]
000008  7800              LDRB     r0,[r0,#0]
00000a  0745              LSLS     r5,r0,#29
00000c  0f6d              LSRS     r5,r5,#29
;;;3525       
;;;3526       if( SPI_RxISR_8BIT_RXNUM == 4)
00000e  2d04              CMP      r5,#4
000010  d104              BNE      |L49.28|
;;;3527       {
;;;3528           *((uint32_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.W;
000012  6820              LDR      r0,[r4,#0]
000014  6b00              LDR      r0,[r0,#0x30]
000016  6c21              LDR      r1,[r4,#0x40]
000018  6008              STR      r0,[r1,#0]
00001a  e01d              B        |L49.88|
                  |L49.28|
;;;3529       }
;;;3530       else if( SPI_RxISR_8BIT_RXNUM == 3)
00001c  2d03              CMP      r5,#3
00001e  d10f              BNE      |L49.64|
;;;3531       {
;;;3532           SPI_RxISR_8BIT_Tmp.W = mSPI->Instance->RDAT.W;
000020  6820              LDR      r0,[r4,#0]
000022  6b00              LDR      r0,[r0,#0x30]
000024  9000              STR      r0,[sp,#0]
;;;3533           
;;;3534           *((uint8_t *)mSPI->pRxBuffPtr)      = (uint8_t) SPI_RxISR_8BIT_Tmp.B[0];
000026  4668              MOV      r0,sp
000028  7800              LDRB     r0,[r0,#0]
00002a  6c21              LDR      r1,[r4,#0x40]
00002c  7008              STRB     r0,[r1,#0]
;;;3535           *((uint8_t *)mSPI->pRxBuffPtr + 1)  = (uint8_t) SPI_RxISR_8BIT_Tmp.B[1];
00002e  4668              MOV      r0,sp
000030  7840              LDRB     r0,[r0,#1]
000032  6c21              LDR      r1,[r4,#0x40]
000034  7048              STRB     r0,[r1,#1]
;;;3536           *((uint8_t *)mSPI->pRxBuffPtr + 2)  = (uint8_t) SPI_RxISR_8BIT_Tmp.B[2];
000036  4668              MOV      r0,sp
000038  7880              LDRB     r0,[r0,#2]
00003a  6c21              LDR      r1,[r4,#0x40]
00003c  7088              STRB     r0,[r1,#2]
00003e  e00b              B        |L49.88|
                  |L49.64|
;;;3537       }
;;;3538       else if( SPI_RxISR_8BIT_RXNUM == 2)
000040  2d02              CMP      r5,#2
000042  d104              BNE      |L49.78|
;;;3539       {
;;;3540           *((uint16_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.H[0];
000044  6820              LDR      r0,[r4,#0]
000046  8e00              LDRH     r0,[r0,#0x30]
000048  6c21              LDR      r1,[r4,#0x40]
00004a  8008              STRH     r0,[r1,#0]
00004c  e004              B        |L49.88|
                  |L49.78|
;;;3541       }
;;;3542       else
;;;3543       {
;;;3544           *((uint8_t *)mSPI->pRxBuffPtr) = mSPI->Instance->RDAT.B[0];        
00004e  6820              LDR      r0,[r4,#0]
000050  3020              ADDS     r0,r0,#0x20
000052  7c00              LDRB     r0,[r0,#0x10]
000054  6c21              LDR      r1,[r4,#0x40]
000056  7008              STRB     r0,[r1,#0]
                  |L49.88|
;;;3545       }
;;;3546       
;;;3547       
;;;3548       mSPI->pRxBuffPtr  += SPI_RxISR_8BIT_RXNUM;
000058  6c20              LDR      r0,[r4,#0x40]
00005a  1940              ADDS     r0,r0,r5
00005c  6420              STR      r0,[r4,#0x40]
;;;3549       mSPI->RxXferCount -= SPI_RxISR_8BIT_RXNUM;
00005e  6ca0              LDR      r0,[r4,#0x48]
000060  1b40              SUBS     r0,r0,r5
000062  64a0              STR      r0,[r4,#0x48]
;;;3550       
;;;3551       if (mSPI->RxXferCount == 0U)
000064  6ca0              LDR      r0,[r4,#0x48]
000066  2800              CMP      r0,#0
000068  d103              BNE      |L49.114|
;;;3552       {
;;;3553           SPI_CloseRx_ISR(mSPI);
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       SPI_CloseRx_ISR
000070  e00b              B        |L49.138|
                  |L49.114|
;;;3554       }
;;;3555       else if( mSPI->RxXferCount < 4U && mSPI->REG_TYPE == MID_SPI_SPI)
000072  6ca0              LDR      r0,[r4,#0x48]
000074  2804              CMP      r0,#4
000076  d208              BCS      |L49.138|
000078  2153              MOVS     r1,#0x53
00007a  0609              LSLS     r1,r1,#24
00007c  6b20              LDR      r0,[r4,#0x30]
00007e  4288              CMP      r0,r1
000080  d103              BNE      |L49.138|
;;;3556       {
;;;3557           *mSPI->RX_TH = (mSPI->RxXferCount - 1);
000082  6ca0              LDR      r0,[r4,#0x48]
000084  1e40              SUBS     r0,r0,#1
000086  6fa1              LDR      r1,[r4,#0x78]
000088  7008              STRB     r0,[r1,#0]
                  |L49.138|
;;;3558       }
;;;3559   }
00008a  bd38              POP      {r3-r5,pc}
;;;3560   
                          ENDP


                          AREA ||i.SPI_TxISR_16BIT||, CODE, READONLY, ALIGN=1

                  SPI_TxISR_16BIT PROC
;;;3711    */
;;;3712   static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *mSPI)
000000  b510              PUSH     {r4,lr}
;;;3713   {
000002  4604              MOV      r4,r0
;;;3714       // Check the end of the transmission
;;;3715       if (mSPI->TxXferCount == 0U)
000004  6be0              LDR      r0,[r4,#0x3c]
000006  2800              CMP      r0,#0
000008  d102              BNE      |L50.16|
;;;3716       {
;;;3717           SPI_CloseTx_ISR(mSPI);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SPI_CloseTx_ISR
                  |L50.16|
;;;3718       }
;;;3719       
;;;3720       // When Tx count >= 2
;;;3721       if(mSPI->TxXferCount > 1)
000010  6be0              LDR      r0,[r4,#0x3c]
000012  2801              CMP      r0,#1
000014  d90a              BLS      |L50.44|
;;;3722       {
;;;3723           mSPI->Instance->TDAT.W = *((uint32_t *)mSPI->pTxBuffPtr);
000016  6b60              LDR      r0,[r4,#0x34]
000018  6800              LDR      r0,[r0,#0]
00001a  6821              LDR      r1,[r4,#0]
00001c  6348              STR      r0,[r1,#0x34]
;;;3724           mSPI->pTxBuffPtr += sizeof(uint32_t);
00001e  6b60              LDR      r0,[r4,#0x34]
000020  1d00              ADDS     r0,r0,#4
000022  6360              STR      r0,[r4,#0x34]
;;;3725           mSPI->TxXferCount -= 2;
000024  6be0              LDR      r0,[r4,#0x3c]
000026  1e80              SUBS     r0,r0,#2
000028  63e0              STR      r0,[r4,#0x3c]
00002a  e00c              B        |L50.70|
                  |L50.44|
;;;3726       }
;;;3727       // When Tx count >= 1
;;;3728       else if(mSPI->TxXferCount > 0)
00002c  6be0              LDR      r0,[r4,#0x3c]
00002e  2800              CMP      r0,#0
000030  d009              BEQ      |L50.70|
;;;3729       {
;;;3730           mSPI->Instance->TDAT.H[0] = *((uint16_t *)mSPI->pTxBuffPtr);
000032  6b60              LDR      r0,[r4,#0x34]
000034  8800              LDRH     r0,[r0,#0]
000036  6821              LDR      r1,[r4,#0]
000038  8688              STRH     r0,[r1,#0x34]
;;;3731           mSPI->pTxBuffPtr += sizeof(uint16_t);
00003a  6b60              LDR      r0,[r4,#0x34]
00003c  1c80              ADDS     r0,r0,#2
00003e  6360              STR      r0,[r4,#0x34]
;;;3732           mSPI->TxXferCount--;
000040  6be0              LDR      r0,[r4,#0x3c]
000042  1e40              SUBS     r0,r0,#1
000044  63e0              STR      r0,[r4,#0x3c]
                  |L50.70|
;;;3733       }
;;;3734   }
000046  bd10              POP      {r4,pc}
;;;3735   
                          ENDP


                          AREA ||i.SPI_TxISR_32BIT||, CODE, READONLY, ALIGN=1

                  SPI_TxISR_32BIT PROC
;;;3751    */
;;;3752   static void SPI_TxISR_32BIT(struct __SPI_HandleTypeDef *mSPI)
000000  b510              PUSH     {r4,lr}
;;;3753   {
000002  4604              MOV      r4,r0
;;;3754       // Check the end of the transmission
;;;3755       if (mSPI->TxXferCount == 0U)
000004  6be0              LDR      r0,[r4,#0x3c]
000006  2800              CMP      r0,#0
000008  d102              BNE      |L51.16|
;;;3756       {
;;;3757           SPI_CloseTx_ISR(mSPI);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SPI_CloseTx_ISR
                  |L51.16|
;;;3758       }
;;;3759       
;;;3760       // When Tx count >= 1
;;;3761       if(mSPI->TxXferCount > 0)
000010  6be0              LDR      r0,[r4,#0x3c]
000012  2800              CMP      r0,#0
000014  d009              BEQ      |L51.42|
;;;3762       {
;;;3763           /* Transmit data in 32 Bit mode */
;;;3764           mSPI->Instance->TDAT.W = *((uint32_t *)mSPI->pTxBuffPtr);
000016  6b60              LDR      r0,[r4,#0x34]
000018  6800              LDR      r0,[r0,#0]
00001a  6821              LDR      r1,[r4,#0]
00001c  6348              STR      r0,[r1,#0x34]
;;;3765           mSPI->pTxBuffPtr += sizeof(uint32_t);
00001e  6b60              LDR      r0,[r4,#0x34]
000020  1d00              ADDS     r0,r0,#4
000022  6360              STR      r0,[r4,#0x34]
;;;3766           mSPI->TxXferCount--;
000024  6be0              LDR      r0,[r4,#0x3c]
000026  1e40              SUBS     r0,r0,#1
000028  63e0              STR      r0,[r4,#0x3c]
                  |L51.42|
;;;3767       }
;;;3768   }
00002a  bd10              POP      {r4,pc}
;;;3769   
                          ENDP


                          AREA ||i.SPI_TxISR_8BIT||, CODE, READONLY, ALIGN=1

                  SPI_TxISR_8BIT PROC
;;;3665    */
;;;3666   static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *mSPI)
000000  b510              PUSH     {r4,lr}
;;;3667   {
000002  4604              MOV      r4,r0
;;;3668       // Check the end of the transmission
;;;3669       if (mSPI->TxXferCount == 0U)
000004  6be0              LDR      r0,[r4,#0x3c]
000006  2800              CMP      r0,#0
000008  d102              BNE      |L52.16|
;;;3670       {
;;;3671           SPI_CloseTx_ISR(mSPI);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SPI_CloseTx_ISR
                  |L52.16|
;;;3672       }
;;;3673       
;;;3674       // When Tx count >= 4
;;;3675       if(mSPI->TxXferCount > 3)
000010  6be0              LDR      r0,[r4,#0x3c]
000012  2803              CMP      r0,#3
000014  d90a              BLS      |L52.44|
;;;3676       {
;;;3677           mSPI->Instance->TDAT.W = *((uint32_t *)mSPI->pTxBuffPtr);
000016  6b60              LDR      r0,[r4,#0x34]
000018  6800              LDR      r0,[r0,#0]
00001a  6821              LDR      r1,[r4,#0]
00001c  6348              STR      r0,[r1,#0x34]
;;;3678           mSPI->pTxBuffPtr += sizeof(uint32_t);
00001e  6b60              LDR      r0,[r4,#0x34]
000020  1d00              ADDS     r0,r0,#4
000022  6360              STR      r0,[r4,#0x34]
;;;3679           mSPI->TxXferCount -= 4;
000024  6be0              LDR      r0,[r4,#0x3c]
000026  1f00              SUBS     r0,r0,#4
000028  63e0              STR      r0,[r4,#0x3c]
00002a  e01a              B        |L52.98|
                  |L52.44|
;;;3680       }
;;;3681       // When Tx count >= 2 ~ 3
;;;3682       else if(mSPI->TxXferCount > 1)
00002c  6be0              LDR      r0,[r4,#0x3c]
00002e  2801              CMP      r0,#1
000030  d90a              BLS      |L52.72|
;;;3683       {
;;;3684           mSPI->Instance->TDAT.H[0] = *((uint16_t *)mSPI->pTxBuffPtr);
000032  6b60              LDR      r0,[r4,#0x34]
000034  8800              LDRH     r0,[r0,#0]
000036  6821              LDR      r1,[r4,#0]
000038  8688              STRH     r0,[r1,#0x34]
;;;3685           mSPI->pTxBuffPtr += sizeof(uint16_t);
00003a  6b60              LDR      r0,[r4,#0x34]
00003c  1c80              ADDS     r0,r0,#2
00003e  6360              STR      r0,[r4,#0x34]
;;;3686           mSPI->TxXferCount -= 2;
000040  6be0              LDR      r0,[r4,#0x3c]
000042  1e80              SUBS     r0,r0,#2
000044  63e0              STR      r0,[r4,#0x3c]
000046  e00c              B        |L52.98|
                  |L52.72|
;;;3687       }
;;;3688       // When Tx count >= 1
;;;3689       else if(mSPI->TxXferCount > 0)
000048  6be0              LDR      r0,[r4,#0x3c]
00004a  2800              CMP      r0,#0
00004c  d009              BEQ      |L52.98|
;;;3690       {
;;;3691           mSPI->Instance->TDAT.B[0] = (*mSPI->pTxBuffPtr++);
00004e  6b61              LDR      r1,[r4,#0x34]
000050  1c48              ADDS     r0,r1,#1
000052  6360              STR      r0,[r4,#0x34]
000054  7809              LDRB     r1,[r1,#0]
000056  6820              LDR      r0,[r4,#0]
000058  3020              ADDS     r0,r0,#0x20
00005a  7501              STRB     r1,[r0,#0x14]
;;;3692           mSPI->TxXferCount--;
00005c  6be0              LDR      r0,[r4,#0x3c]
00005e  1e40              SUBS     r0,r0,#1
000060  63e0              STR      r0,[r4,#0x3c]
                  |L52.98|
;;;3693       }
;;;3694   }
000062  bd10              POP      {r4,pc}
;;;3695   
                          ENDP


                          AREA ||i.SPI_WaitFifoStateUntilTimeout||, CODE, READONLY, ALIGN=1

                  SPI_WaitFifoStateUntilTimeout PROC
;;;3842    */
;;;3843   static MID_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *mSPI, uint32_t Fifo, uint32_t State,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3844                                                          uint32_t Timeout, uint32_t Tickstart)
;;;3845   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
000008  461d              MOV      r5,r3
;;;3846       __IO uint8_t tmpreg;
;;;3847   
;;;3848   
;;;3849       // When RXLVL not empty
;;;3850       while ((mSPI->Instance->STA.W & Fifo) != State)
00000a  e02f              B        |L53.108|
                  |L53.12|
;;;3851       {
;;;3852           // When RDAT and RX shadow buffer not empty
;;;3853           if ((Fifo == SPI_FLAG_RXLVL) && (State == SPI_RXLVL_EMPTY))
00000c  2e07              CMP      r6,#7
00000e  d107              BNE      |L53.32|
000010  2f00              CMP      r7,#0
000012  d105              BNE      |L53.32|
;;;3854           {
;;;3855               // Store TDAT
;;;3856               tmpreg = *((__IO uint8_t *)&mSPI->Instance->RDAT.W);
000014  6820              LDR      r0,[r4,#0]
000016  3020              ADDS     r0,r0,#0x20
000018  7c01              LDRB     r1,[r0,#0x10]
00001a  9100              STR      r1,[sp,#0]
;;;3857               /* To avoid GCC warning */
;;;3858               UNUSED(tmpreg);
00001c  4668              MOV      r0,sp
00001e  7800              LDRB     r0,[r0,#0]
                  |L53.32|
;;;3859           }
;;;3860           
;;;3861           // When timeout not happened)
;;;3862           if (Timeout != MID_MAX_DELAY)
000020  1c68              ADDS     r0,r5,#1
000022  2800              CMP      r0,#0
000024  d022              BEQ      |L53.108|
;;;3863           {
;;;3864               // When timeout happened
;;;3865               if ((Timeout == 0U) || ((MID_GetTick() - Tickstart) >= Timeout))
000026  2d00              CMP      r5,#0
000028  d005              BEQ      |L53.54|
00002a  f7fffffe          BL       MID_GetTick
00002e  9906              LDR      r1,[sp,#0x18]
000030  1a40              SUBS     r0,r0,r1
000032  42a8              CMP      r0,r5
000034  d31a              BCC      |L53.108|
                  |L53.54|
;;;3866               {
;;;3867                   // Disable all interrupts for the interrupt process
;;;3868                   mSPI->Instance->INT.W = 0x00000000;
000036  2000              MOVS     r0,#0
000038  6821              LDR      r1,[r4,#0]
00003a  6048              STR      r0,[r1,#4]
;;;3869   
;;;3870                   // When master and not standard SPI
;;;3871                   if (((mSPI->Init.Mode & SPI_MDS_MASK) != 0) && (mSPI->Init.DataLine != SPI_STANDARD_SPI))
00003c  2110              MOVS     r1,#0x10
00003e  6860              LDR      r0,[r4,#4]
000040  4008              ANDS     r0,r0,r1
000042  2800              CMP      r0,#0
000044  d008              BEQ      |L53.88|
000046  68a0              LDR      r0,[r4,#8]
000048  2800              CMP      r0,#0
00004a  d005              BEQ      |L53.88|
;;;3872                   {
;;;3873                       // Disable SPI peripheral
;;;3874                       __MID_SPI_DISABLE(mSPI);
00004c  6820              LDR      r0,[r4,#0]
00004e  6900              LDR      r0,[r0,#0x10]
000050  0840              LSRS     r0,r0,#1
000052  0040              LSLS     r0,r0,#1
000054  6821              LDR      r1,[r4,#0]
000056  6108              STR      r0,[r1,#0x10]
                  |L53.88|
;;;3875                   }
;;;3876   
;;;3877                   mSPI->State = MID_SPI_STATE_READY;
000058  2101              MOVS     r1,#1
00005a  2089              MOVS     r0,#0x89
00005c  5501              STRB     r1,[r0,r4]
;;;3878   
;;;3879                   /* Process Unlocked */
;;;3880                   __MID_UNLOCK(mSPI);
00005e  bf00              NOP      
000060  2100              MOVS     r1,#0
000062  2088              MOVS     r0,#0x88
000064  5501              STRB     r1,[r0,r4]
000066  bf00              NOP      
;;;3881   
;;;3882                   
;;;3883                   return MID_TIMEOUT;
000068  2003              MOVS     r0,#3
                  |L53.106|
;;;3884               }
;;;3885           }
;;;3886       }
;;;3887   
;;;3888     return MID_OK;
;;;3889   }
00006a  bdf8              POP      {r3-r7,pc}
                  |L53.108|
00006c  6820              LDR      r0,[r4,#0]            ;3850
00006e  6800              LDR      r0,[r0,#0]            ;3850
000070  4030              ANDS     r0,r0,r6              ;3850
000072  42b8              CMP      r0,r7                 ;3850
000074  d1ca              BNE      |L53.12|
000076  2000              MOVS     r0,#0                 ;3888
000078  e7f7              B        |L53.106|
;;;3890   
                          ENDP


                          AREA ||i.SPI_WaitFlagStateUntilTimeout||, CODE, READONLY, ALIGN=1

                  SPI_WaitFlagStateUntilTimeout PROC
;;;3789    */
;;;3790   static MID_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *mSPI, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3791   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  461d              MOV      r5,r3
000008  9f06              LDR      r7,[sp,#0x18]
;;;3792   //    uint32_t Tmp;
;;;3793       
;;;3794       while (__MID_SPI_GET_FLAG(mSPI, Flag) ==0)
00000a  e016              B        |L54.58|
                  |L54.12|
;;;3795       {
;;;3796   //        Tmp = mSPI->Instance->STA.W;
;;;3797           
;;;3798           if (Timeout != MID_MAX_DELAY)
00000c  1c68              ADDS     r0,r5,#1
00000e  2800              CMP      r0,#0
000010  d013              BEQ      |L54.58|
;;;3799           {
;;;3800               if ((Timeout == 0U) || ((MID_GetTick() - Tickstart) >= Timeout))
000012  2d00              CMP      r5,#0
000014  d004              BEQ      |L54.32|
000016  f7fffffe          BL       MID_GetTick
00001a  1bc0              SUBS     r0,r0,r7
00001c  42a8              CMP      r0,r5
00001e  d30c              BCC      |L54.58|
                  |L54.32|
;;;3801               {
;;;3802                   /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;3803                   on both master and slave sides in order to resynchronize the master
;;;3804                   and slave for their respective CRC calculation */
;;;3805                   
;;;3806                   // Disable TXE, RXNE and ERR interrupts for the interrupt process
;;;3807                   mSPI->Instance->INT.W = 0x00000000;
000020  2000              MOVS     r0,#0
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;3808                   
;;;3809   
;;;3810                   mSPI->State = MID_SPI_STATE_READY;
000026  2101              MOVS     r1,#1
000028  2089              MOVS     r0,#0x89
00002a  5501              STRB     r1,[r0,r4]
;;;3811                   
;;;3812                   /* Process Unlocked */
;;;3813                   __MID_UNLOCK(mSPI);
00002c  bf00              NOP      
00002e  2100              MOVS     r1,#0
000030  2088              MOVS     r0,#0x88
000032  5501              STRB     r1,[r0,r4]
000034  bf00              NOP      
;;;3814                   
;;;3815                   return MID_TIMEOUT;
000036  2003              MOVS     r0,#3
                  |L54.56|
;;;3816               }
;;;3817           }
;;;3818       }
;;;3819   
;;;3820       return MID_OK;
;;;3821   }
000038  bdf8              POP      {r3-r7,pc}
                  |L54.58|
00003a  6820              LDR      r0,[r4,#0]            ;3794
00003c  6800              LDR      r0,[r0,#0]            ;3794
00003e  4030              ANDS     r0,r0,r6              ;3794
000040  42b0              CMP      r0,r6                 ;3794
000042  d101              BNE      |L54.72|
000044  2001              MOVS     r0,#1                 ;3794
000046  e000              B        |L54.74|
                  |L54.72|
000048  2000              MOVS     r0,#0                 ;3794
                  |L54.74|
00004a  2800              CMP      r0,#0                 ;3794
00004c  d0de              BEQ      |L54.12|
00004e  2000              MOVS     r0,#0                 ;3820
000050  e7f2              B        |L54.56|
;;;3822   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CSC_InitConfig
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00010000
                          DCD      0x00000000
                          DCD      0x00000210
                          DCD      0x00000001
                          DCD      0x00000008
                          DCD      0x0000911f
                          DCD      0x000f13ed
                          DCD      0x00008993
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00b71b00
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  SPI_MODE_TABLE
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000200
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000600
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x00000110
                          DCD      0x00000000
                          DCD      0x00000210
                          DCD      0x00000610
                          DCD      0x00000710
                          DCD      0x00000000
                          DCD      0x00000000
                  SPI_CLKDIV_TABLE
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x00000020
                          DCD      0x00000030
                          DCD      0x00000130
                          DCD      0x00000330
                          DCD      0x00000730
                          DCD      0x00001730
                          DCD      0x00002730
                          DCD      0x00003730

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_SPI_MID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_SPI_MID_c_6fccf41c____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_SPI_MID_c_6fccf41c____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_SPI_MID_c_6fccf41c____REVSH|
#line 496
|__asm___18_MG32x02z_SPI_MID_c_6fccf41c____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
