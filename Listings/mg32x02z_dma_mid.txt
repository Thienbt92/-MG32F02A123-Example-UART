; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_dma_mid.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_dma_mid.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_dma_mid.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_DMA_MID.c]
                          THUMB

                          AREA ||i.DMA_SetConfig||, CODE, READONLY, ALIGN=1

                  DMA_SetConfig PROC
;;;774     */
;;;775    static void DMA_SetConfig(DMA_HandleTypeDef *mDMA, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b530              PUSH     {r4,r5,lr}
;;;776    {
;;;777    	/* Clear all flags */
;;;778        mDMA->DMAChannelIndex->A.W |= DMA_CH_ALL_FLAG;
000002  6c04              LDR      r4,[r0,#0x40]
000004  6824              LDR      r4,[r4,#0]
000006  2507              MOVS     r5,#7
000008  066d              LSLS     r5,r5,#25
00000a  432c              ORRS     r4,r4,r5
00000c  6c05              LDR      r5,[r0,#0x40]
00000e  602c              STR      r4,[r5,#0]
;;;779        
;;;780        /* Config DMA channel parameters */
;;;781        mDMA->DMAChannelIndex->A.W |= mDMA->Init.MEMMode | mDMA->Init.BSize | mDMA->Init.LoopMode;
000010  68c5              LDR      r5,[r0,#0xc]
000012  6904              LDR      r4,[r0,#0x10]
000014  432c              ORRS     r4,r4,r5
000016  6985              LDR      r5,[r0,#0x18]
000018  432c              ORRS     r4,r4,r5
00001a  6c05              LDR      r5,[r0,#0x40]
00001c  682d              LDR      r5,[r5,#0]
00001e  432c              ORRS     r4,r4,r5
000020  6c05              LDR      r5,[r0,#0x40]
000022  602c              STR      r4,[r5,#0]
;;;782        mDMA->DMAChannelIndex->B.W = mDMA->Init.DesPeri | DMA_DINC_ENABLE | \
000024  2501              MOVS     r5,#1
000026  046d              LSLS     r5,r5,#17
000028  6884              LDR      r4,[r0,#8]
00002a  432c              ORRS     r4,r4,r5
00002c  6845              LDR      r5,[r0,#4]
00002e  432c              ORRS     r4,r4,r5
000030  2501              MOVS     r5,#1
000032  042d              LSLS     r5,r5,#16
000034  432c              ORRS     r4,r4,r5
000036  6c05              LDR      r5,[r0,#0x40]
000038  606c              STR      r4,[r5,#4]
;;;783                                     mDMA->Init.SrcPeri | DMA_SINC_ENABLE;
;;;784    
;;;785        /* Source from memory */
;;;786        if(mDMA->Init.SrcPeri == MID_DMA_MEMORY_READ)
00003a  6844              LDR      r4,[r0,#4]
00003c  2c00              CMP      r4,#0
00003e  d101              BNE      |L1.68|
;;;787        {
;;;788            /* Configure DMA Channel source address */
;;;789            mDMA->DMAChannelIndex->SSA.W = SrcAddress;
000040  6c04              LDR      r4,[r0,#0x40]
000042  6121              STR      r1,[r4,#0x10]
                  |L1.68|
;;;790        }
;;;791        
;;;792        /* Destination to memory */
;;;793        if(mDMA->Init.DesPeri == MID_DMA_MEMORY_WRITE)
000044  6884              LDR      r4,[r0,#8]
000046  2c00              CMP      r4,#0
000048  d101              BNE      |L1.78|
;;;794        {
;;;795            /* Configure DMA Channel source address */
;;;796            mDMA->DMAChannelIndex->DSA.W = DstAddress;
00004a  6c04              LDR      r4,[r0,#0x40]
00004c  61a2              STR      r2,[r4,#0x18]
                  |L1.78|
;;;797        }
;;;798    
;;;799        /* Configure DMA Channel data length */
;;;800        mDMA->DMAChannelIndex->NUM.W = DataLength;
00004e  6c04              LDR      r4,[r0,#0x40]
000050  60a3              STR      r3,[r4,#8]
;;;801        
;;;802    }
000052  bd30              POP      {r4,r5,pc}
;;;803    ///@}
                          ENDP


                          AREA ||i.MID_DMA_Abort||, CODE, READONLY, ALIGN=1

                  MID_DMA_Abort PROC
;;;320     */
;;;321    MID_StatusTypeDef MID_DMA_Abort(DMA_HandleTypeDef *mDMA)
000000  4601              MOV      r1,r0
;;;322    {
;;;323        
;;;324    	/* Disable DMA IT */
;;;325    	mDMA->DMAChannelIndex->A.W &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
000002  6c08              LDR      r0,[r1,#0x40]
000004  6800              LDR      r0,[r0,#0]
000006  2207              MOVS     r2,#7
000008  0452              LSLS     r2,r2,#17
00000a  4390              BICS     r0,r0,r2
00000c  6c0a              LDR      r2,[r1,#0x40]
00000e  6010              STR      r0,[r2,#0]
;;;326    	
;;;327    	/* Disable the channel */
;;;328        mDMA->DMAChannelIndex->A.W &= ~(DMA_CR0_EN_enable_w);
000010  6c08              LDR      r0,[r1,#0x40]
000012  6800              LDR      r0,[r0,#0]
000014  0840              LSRS     r0,r0,#1
000016  0040              LSLS     r0,r0,#1
000018  6c0a              LDR      r2,[r1,#0x40]
00001a  6010              STR      r0,[r2,#0]
;;;329    	
;;;330    	/* Clear all flags */
;;;331        mDMA->DMAChannelIndex->A.W |= DMA_CH_ALL_FLAG;
00001c  6c08              LDR      r0,[r1,#0x40]
00001e  6800              LDR      r0,[r0,#0]
000020  2207              MOVS     r2,#7
000022  0652              LSLS     r2,r2,#25
000024  4310              ORRS     r0,r0,r2
000026  6c0a              LDR      r2,[r1,#0x40]
000028  6010              STR      r0,[r2,#0]
;;;332    	
;;;333    	/* Change the DMA state*/
;;;334    	mDMA->State = MID_DMA_STATE_READY; 
00002a  2001              MOVS     r0,#1
00002c  7748              STRB     r0,[r1,#0x1d]
;;;335    	
;;;336    	/* Process Unlocked */
;;;337    	__MID_UNLOCK(mDMA);
00002e  bf00              NOP      
000030  2000              MOVS     r0,#0
000032  7708              STRB     r0,[r1,#0x1c]
000034  bf00              NOP      
;;;338    	
;;;339    	return MID_SUCCESS; 
;;;340    }
000036  4770              BX       lr
;;;341    
                          ENDP


                          AREA ||i.MID_DMA_Abort_IT||, CODE, READONLY, ALIGN=1

                  MID_DMA_Abort_IT PROC
;;;356     */
;;;357    MID_StatusTypeDef MID_DMA_Abort_IT(DMA_HandleTypeDef *mDMA)
000000  b570              PUSH     {r4-r6,lr}
;;;358    {
000002  4604              MOV      r4,r0
;;;359        MID_StatusTypeDef status = MID_SUCCESS;
000004  2500              MOVS     r5,#0
;;;360    
;;;361        if(MID_DMA_STATE_BUSY != mDMA->State)
000006  7f60              LDRB     r0,[r4,#0x1d]
000008  2800              CMP      r0,#0
00000a  d003              BEQ      |L3.20|
;;;362        {
;;;363            /* no transfer ongoing */
;;;364            mDMA->ErrorCode = MID_DMA_ERROR_NO_XFER;
00000c  2004              MOVS     r0,#4
00000e  63e0              STR      r0,[r4,#0x3c]
;;;365    
;;;366            status = MID_FAILURE;
000010  2501              MOVS     r5,#1
000012  e01f              B        |L3.84|
                  |L3.20|
;;;367        }
;;;368        else
;;;369        { 
;;;370            /* Disable DMA IT */
;;;371            mDMA->DMAChannelIndex->A.W &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
000014  6c20              LDR      r0,[r4,#0x40]
000016  6800              LDR      r0,[r0,#0]
000018  2107              MOVS     r1,#7
00001a  0449              LSLS     r1,r1,#17
00001c  4388              BICS     r0,r0,r1
00001e  6c21              LDR      r1,[r4,#0x40]
000020  6008              STR      r0,[r1,#0]
;;;372    
;;;373            /* Disable the channel */
;;;374            mDMA->DMAChannelIndex->A.W &= ~(DMA_CR0_EN_enable_w);
000022  6c20              LDR      r0,[r4,#0x40]
000024  6800              LDR      r0,[r0,#0]
000026  0840              LSRS     r0,r0,#1
000028  0040              LSLS     r0,r0,#1
00002a  6c21              LDR      r1,[r4,#0x40]
00002c  6008              STR      r0,[r1,#0]
;;;375    
;;;376            /* Clear all flags */
;;;377            mDMA->DMAChannelIndex->A.W |= DMA_CH_ALL_FLAG;
00002e  6c20              LDR      r0,[r4,#0x40]
000030  6800              LDR      r0,[r0,#0]
000032  2107              MOVS     r1,#7
000034  0649              LSLS     r1,r1,#25
000036  4308              ORRS     r0,r0,r1
000038  6c21              LDR      r1,[r4,#0x40]
00003a  6008              STR      r0,[r1,#0]
;;;378    
;;;379            /* Change the DMA state */
;;;380            mDMA->State = MID_DMA_STATE_READY;
00003c  2001              MOVS     r0,#1
00003e  7760              STRB     r0,[r4,#0x1d]
;;;381    
;;;382            /* Process Unlocked */
;;;383            __MID_UNLOCK(mDMA);
000040  bf00              NOP      
000042  2000              MOVS     r0,#0
000044  7720              STRB     r0,[r4,#0x1c]
000046  bf00              NOP      
;;;384    
;;;385            /* Call User Abort callback */ 
;;;386            if(mDMA->XferAbortCallback != NULL)
000048  6ba0              LDR      r0,[r4,#0x38]
00004a  2800              CMP      r0,#0
00004c  d002              BEQ      |L3.84|
;;;387            {
;;;388                mDMA->XferAbortCallback(mDMA);
00004e  4620              MOV      r0,r4
000050  6ba1              LDR      r1,[r4,#0x38]
000052  4788              BLX      r1
                  |L3.84|
;;;389            } 
;;;390        }
;;;391        return status;
000054  4628              MOV      r0,r5
;;;392    }
000056  bd70              POP      {r4-r6,pc}
;;;393    
                          ENDP


                          AREA ||i.MID_DMA_DeInit||, CODE, READONLY, ALIGN=1

                  MID_DMA_DeInit PROC
;;;145     */
;;;146    MID_StatusTypeDef MID_DMA_DeInit(DMA_HandleTypeDef *mDMA)
000000  4601              MOV      r1,r0
;;;147    {
;;;148        /* Check the DMA handle allocation */
;;;149        if(NULL == mDMA)
000002  2900              CMP      r1,#0
000004  d101              BNE      |L4.10|
;;;150        {
;;;151            return MID_FAILURE;
000006  2001              MOVS     r0,#1
                  |L4.8|
;;;152        }
;;;153    
;;;154        /* Disable the selected DMA Channelx */
;;;155        mDMA->DMAChannelIndex->A.W &= ~(DMA_CR0_EN_enable_w);
;;;156    
;;;157        /* Clear all flags */
;;;158        mDMA->DMAChannelIndex->A.W |= DMA_CH_ALL_FLAG;
;;;159    
;;;160        /* Initialize the error code */
;;;161        mDMA->ErrorCode = MID_DMA_ERROR_NONE;
;;;162    
;;;163        /* Initialize the DMA state */
;;;164        mDMA->State = MID_DMA_STATE_RESET;
;;;165    
;;;166        /* Release Lock */
;;;167        __MID_UNLOCK(mDMA);
;;;168    
;;;169        return MID_SUCCESS;
;;;170    }
000008  4770              BX       lr
                  |L4.10|
00000a  6c08              LDR      r0,[r1,#0x40]         ;155
00000c  6800              LDR      r0,[r0,#0]            ;155
00000e  0840              LSRS     r0,r0,#1              ;155
000010  0040              LSLS     r0,r0,#1              ;155
000012  6c0a              LDR      r2,[r1,#0x40]         ;155
000014  6010              STR      r0,[r2,#0]            ;155
000016  6c08              LDR      r0,[r1,#0x40]         ;158
000018  6800              LDR      r0,[r0,#0]            ;158
00001a  2207              MOVS     r2,#7                 ;158
00001c  0652              LSLS     r2,r2,#25             ;158
00001e  4310              ORRS     r0,r0,r2              ;158
000020  6c0a              LDR      r2,[r1,#0x40]         ;158
000022  6010              STR      r0,[r2,#0]            ;158
000024  2000              MOVS     r0,#0                 ;161
000026  63c8              STR      r0,[r1,#0x3c]         ;161
000028  2002              MOVS     r0,#2                 ;164
00002a  7748              STRB     r0,[r1,#0x1d]         ;164
00002c  bf00              NOP                            ;167
00002e  2000              MOVS     r0,#0                 ;167
000030  7708              STRB     r0,[r1,#0x1c]         ;167
000032  bf00              NOP                            ;167
000034  bf00              NOP                            ;169
000036  e7e7              B        |L4.8|
;;;171    ///@}
                          ENDP


                          AREA ||i.MID_DMA_GetError||, CODE, READONLY, ALIGN=1

                  MID_DMA_GetError PROC
;;;753     */
;;;754    uint32_t MID_DMA_GetError(DMA_HandleTypeDef *mDMA)
000000  4601              MOV      r1,r0
;;;755    {
;;;756        return mDMA->ErrorCode;
000002  6bc8              LDR      r0,[r1,#0x3c]
;;;757    }
000004  4770              BX       lr
;;;758    
                          ENDP


                          AREA ||i.MID_DMA_GetState||, CODE, READONLY, ALIGN=1

                  MID_DMA_GetState PROC
;;;741     */
;;;742    MID_DMA_StateTypeDef MID_DMA_GetState(DMA_HandleTypeDef *mDMA)
000000  4601              MOV      r1,r0
;;;743    {
;;;744        return mDMA->State;
000002  7f48              LDRB     r0,[r1,#0x1d]
;;;745    }
000004  4770              BX       lr
;;;746    
                          ENDP


                          AREA ||i.MID_DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  MID_DMA_IRQHandler PROC
;;;516     */
;;;517    void MID_DMA_IRQHandler(DMA_HandleTypeDef *mDMA)
000000  b570              PUSH     {r4-r6,lr}
;;;518    {
000002  4604              MOV      r4,r0
;;;519        uint32_t tmp;
;;;520    
;;;521        /* Half Transfer Complete Interrupt management ******************************/
;;;522        if ((mDMA->DMAChannelIndex->A.W & (DMA_IT_HT | DMA_CH_FLAG_HALF)) == (DMA_IT_HT | DMA_CH_FLAG_HALF))
000004  6c20              LDR      r0,[r4,#0x40]
000006  6800              LDR      r0,[r0,#0]
000008  4933              LDR      r1,|L7.216|
00000a  4008              ANDS     r0,r0,r1
00000c  4288              CMP      r0,r1
00000e  d11c              BNE      |L7.74|
;;;523        {
;;;524        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;525            if(mDMA->DMAChannelIndex->A.MBIT.LOOP == 0)
000010  6c20              LDR      r0,[r4,#0x40]
000012  7800              LDRB     r0,[r0,#0]
000014  0740              LSLS     r0,r0,#29
000016  0fc0              LSRS     r0,r0,#31
000018  2800              CMP      r0,#0
00001a  d105              BNE      |L7.40|
;;;526            {
;;;527                /* Disable the half transfer interrupt */
;;;528                tmp = mDMA->DMAChannelIndex->A.W;
00001c  6c20              LDR      r0,[r4,#0x40]
00001e  6805              LDR      r5,[r0,#0]
;;;529                tmp &= ~(DMA_IT_HT | DMA_CH_ALL_FLAG);
000020  482e              LDR      r0,|L7.220|
000022  4005              ANDS     r5,r5,r0
;;;530                mDMA->DMAChannelIndex->A.W = tmp;
000024  6c20              LDR      r0,[r4,#0x40]
000026  6005              STR      r5,[r0,#0]
                  |L7.40|
;;;531            }
;;;532    
;;;533            /* Clear the half transfer complete flag */
;;;534            tmp = mDMA->DMAChannelIndex->A.W & ~(DMA_CH_ALL_FLAG);
000028  6c20              LDR      r0,[r4,#0x40]
00002a  6800              LDR      r0,[r0,#0]
00002c  2107              MOVS     r1,#7
00002e  0649              LSLS     r1,r1,#25
000030  4388              BICS     r0,r0,r1
000032  4605              MOV      r5,r0
;;;535            tmp |= DMA_CH_FLAG_HALF;
000034  2001              MOVS     r0,#1
000036  0680              LSLS     r0,r0,#26
000038  4305              ORRS     r5,r5,r0
;;;536            mDMA->DMAChannelIndex->A.W = tmp;
00003a  6c20              LDR      r0,[r4,#0x40]
00003c  6005              STR      r5,[r0,#0]
;;;537    
;;;538            /* DMA peripheral state is not updated in Half Transfer */
;;;539            /* State is updated only in Transfer Complete case */
;;;540    
;;;541            if(mDMA->XferHalfCpltCallback != NULL)
00003e  6b20              LDR      r0,[r4,#0x30]
000040  2800              CMP      r0,#0
000042  d002              BEQ      |L7.74|
;;;542            {
;;;543                /* Half transfer callback */
;;;544                mDMA->XferHalfCpltCallback(mDMA);
000044  4620              MOV      r0,r4
000046  6b21              LDR      r1,[r4,#0x30]
000048  4788              BLX      r1
                  |L7.74|
;;;545            }
;;;546        }
;;;547    
;;;548        /* Transfer Complete Interrupt management ***********************************/
;;;549        if ((mDMA->DMAChannelIndex->A.W & (DMA_IT_TC | DMA_CH_FLAG_COMPLETE)) == (DMA_IT_TC | DMA_CH_FLAG_COMPLETE))
00004a  6c20              LDR      r0,[r4,#0x40]
00004c  6800              LDR      r0,[r0,#0]
00004e  4924              LDR      r1,|L7.224|
000050  4008              ANDS     r0,r0,r1
000052  4288              CMP      r0,r1
000054  d11f              BNE      |L7.150|
;;;550        {
;;;551            if(mDMA->DMAChannelIndex->A.MBIT.LOOP == 0)
000056  6c20              LDR      r0,[r4,#0x40]
000058  7800              LDRB     r0,[r0,#0]
00005a  0740              LSLS     r0,r0,#29
00005c  0fc0              LSRS     r0,r0,#31
00005e  2800              CMP      r0,#0
000060  d107              BNE      |L7.114|
;;;552            {
;;;553                /* Disable the transfer complete  & transfer error interrupts */
;;;554                /* if the DMA mode is not CIRCULAR */
;;;555                tmp = mDMA->DMAChannelIndex->A.W;
000062  6c20              LDR      r0,[r4,#0x40]
000064  6805              LDR      r5,[r0,#0]
;;;556                tmp &= ~(DMA_IT_TE | DMA_IT_HT | DMA_IT_TC | DMA_CH_ALL_FLAG);
000066  481f              LDR      r0,|L7.228|
000068  4005              ANDS     r5,r5,r0
;;;557                mDMA->DMAChannelIndex->A.W = tmp;
00006a  6c20              LDR      r0,[r4,#0x40]
00006c  6005              STR      r5,[r0,#0]
;;;558    
;;;559                /* Change the DMA state */
;;;560                mDMA->State = MID_DMA_STATE_READY;
00006e  2001              MOVS     r0,#1
000070  7760              STRB     r0,[r4,#0x1d]
                  |L7.114|
;;;561            }
;;;562    
;;;563            /* Clear the transfer complete flag */
;;;564            mDMA->DMAChannelIndex->A.W |= DMA_CH_ALL_FLAG;
000072  6c20              LDR      r0,[r4,#0x40]
000074  6800              LDR      r0,[r0,#0]
000076  2107              MOVS     r1,#7
000078  0649              LSLS     r1,r1,#25
00007a  4308              ORRS     r0,r0,r1
00007c  6c21              LDR      r1,[r4,#0x40]
00007e  6008              STR      r0,[r1,#0]
;;;565    
;;;566            /* Process Unlocked */
;;;567            __MID_UNLOCK(mDMA);
000080  bf00              NOP      
000082  2000              MOVS     r0,#0
000084  7720              STRB     r0,[r4,#0x1c]
000086  bf00              NOP      
;;;568    
;;;569            if(mDMA->XferCpltCallback != NULL)
000088  6ae0              LDR      r0,[r4,#0x2c]
00008a  2800              CMP      r0,#0
00008c  d023              BEQ      |L7.214|
;;;570            {
;;;571                /* Transfer complete callback */
;;;572                mDMA->XferCpltCallback(mDMA);
00008e  4620              MOV      r0,r4
000090  6ae1              LDR      r1,[r4,#0x2c]
000092  4788              BLX      r1
000094  e01f              B        |L7.214|
                  |L7.150|
;;;573            }
;;;574        }
;;;575    
;;;576        /* Transfer Error Interrupt management ***************************************/
;;;577        else if ((mDMA->DMAChannelIndex->A.W & (DMA_IT_TE | DMA_CH_FLAG_ERRF)) == (DMA_IT_TE | DMA_CH_FLAG_ERRF))
000096  6c20              LDR      r0,[r4,#0x40]
000098  6800              LDR      r0,[r0,#0]
00009a  4913              LDR      r1,|L7.232|
00009c  4008              ANDS     r0,r0,r1
00009e  4288              CMP      r0,r1
0000a0  d119              BNE      |L7.214|
;;;578        {
;;;579            /* When a DMA transfer error occurs */
;;;580            /* A hardware clear of its EN bits is performed */
;;;581            /* Then, disable all DMA interrupts */
;;;582            mDMA->DMAChannelIndex->A.W &= ~(DMA_IT_HT | DMA_IT_HT | DMA_IT_TE | DMA_CH_ALL_FLAG);
0000a2  6c20              LDR      r0,[r4,#0x40]
0000a4  6800              LDR      r0,[r0,#0]
0000a6  4911              LDR      r1,|L7.236|
0000a8  4008              ANDS     r0,r0,r1
0000aa  6c21              LDR      r1,[r4,#0x40]
0000ac  6008              STR      r0,[r1,#0]
;;;583    
;;;584            /* Clear all flags */
;;;585            mDMA->DMAChannelIndex->A.W |= DMA_CH_ALL_FLAG;
0000ae  6c20              LDR      r0,[r4,#0x40]
0000b0  6800              LDR      r0,[r0,#0]
0000b2  2107              MOVS     r1,#7
0000b4  0649              LSLS     r1,r1,#25
0000b6  4308              ORRS     r0,r0,r1
0000b8  6c21              LDR      r1,[r4,#0x40]
0000ba  6008              STR      r0,[r1,#0]
;;;586    
;;;587            /* Update error code */
;;;588            mDMA->ErrorCode = MID_DMA_ERROR_TE;
0000bc  2001              MOVS     r0,#1
0000be  63e0              STR      r0,[r4,#0x3c]
;;;589    
;;;590            /* Change the DMA state */
;;;591            mDMA->State = MID_DMA_STATE_READY;    
0000c0  7760              STRB     r0,[r4,#0x1d]
;;;592    
;;;593            /* Process Unlocked */
;;;594            __MID_UNLOCK(mDMA); 
0000c2  bf00              NOP      
0000c4  2000              MOVS     r0,#0
0000c6  7720              STRB     r0,[r4,#0x1c]
0000c8  bf00              NOP      
;;;595    
;;;596            if(mDMA->XferErrorCallback != NULL)
0000ca  6b60              LDR      r0,[r4,#0x34]
0000cc  2800              CMP      r0,#0
0000ce  d002              BEQ      |L7.214|
;;;597            {
;;;598                /* Transfer error callback */
;;;599                mDMA->XferErrorCallback(mDMA);
0000d0  4620              MOV      r0,r4
0000d2  6b61              LDR      r1,[r4,#0x34]
0000d4  4788              BLX      r1
                  |L7.214|
;;;600            }
;;;601        }
;;;602    }
0000d6  bd70              POP      {r4-r6,pc}
;;;603    ///@}
                          ENDP

                  |L7.216|
                          DCD      0x04040000
                  |L7.220|
                          DCD      0xf1fbffff
                  |L7.224|
                          DCD      0x02020000
                  |L7.228|
                          DCD      0xf1f1ffff
                  |L7.232|
                          DCD      0x08080000
                  |L7.236|
                          DCD      0xf1f3ffff

                          AREA ||i.MID_DMA_Init||, CODE, READONLY, ALIGN=2

                  MID_DMA_Init PROC
;;;63      */
;;;64     MID_StatusTypeDef MID_DMA_Init(DMA_HandleTypeDef *mDMA)
000000  4601              MOV      r1,r0
;;;65     {
;;;66     
;;;67         /* Check the DMA handle allocation */
;;;68         if(NULL == mDMA)
000002  2900              CMP      r1,#0
000004  d101              BNE      |L8.10|
;;;69         {
;;;70             return MID_FAILURE;
000006  2001              MOVS     r0,#1
                  |L8.8|
;;;71         }
;;;72     
;;;73         /* Reset DMA channel */
;;;74         mDMA->DMAChannelIndex->A.W &= ~(DMA_CR0_EN_enable_w);
;;;75     
;;;76         /* Change DMA peripheral state */
;;;77         mDMA->State = MID_DMA_STATE_BUSY;
;;;78     
;;;79         /* Config DMA macro priority mode, Extra-GPL channel and Enable DMA*/
;;;80     #if defined(MG32_1ST) || defined(MG32_3RD)
;;;81         mDMA->Instance->CR0.W |= (mDMA->PriorityMode | mDMA->ExtraGPL_Channel | DMA_CR0_EN_enable_w);
;;;82     #else
;;;83         mDMA->Instance->CR0.W |= (mDMA->ExtraGPL_Channel | DMA_CR0_EN_enable_w);
;;;84     #endif   
;;;85         
;;;86         /* Prepare the DMA Channel configuration and Enable */
;;;87         /* Burst Size, Loop Mode, Memory Address increase mode, Priority */
;;;88     #if defined(MG32_1ST) || defined(MG32_3RD)
;;;89         
;;;90         // dummy number for MG32_1ST
;;;91         #if defined(MG32_1ST)
;;;92             mDMA->DMAChannelIndex->NUM.H[0] = 0x0002;
;;;93         #endif
;;;94         
;;;95         mDMA->DMAChannelIndex->A.W = mDMA->Init.BSize | mDMA->Init.LoopMode | mDMA->Init.MEMMode | mDMA->Init.Priority |  \
;;;96                                DMA_CR0_EN_enable_w;
;;;97     #else
;;;98         mDMA->DMAChannelIndex->A.W = mDMA->Init.BSize | mDMA->Init.LoopMode | mDMA->Init.MEMMode | DMA_CR0_EN_enable_w;
;;;99     #endif   
;;;100    
;;;101    #if defined(MG32_1ST)
;;;102        if (mDMA->DMAChannelIndex == DMAChannel0)           // Disable DMAChannel0 Loop mode
;;;103            SYS->CR0.W &= ~(SYS_CR0_CH0_LAST_yes_w);
;;;104        else if (mDMA->DMAChannelIndex == DMAChannel1)      // Disable DMAChannel1 Loop mode
;;;105            SYS->CR0.W &= ~(SYS_CR0_CH1_LAST_yes_w);
;;;106        else                                                // Disable DMAChannel2 Loop mode
;;;107            SYS->CR0.W &= ~(SYS_CR0_CH2_LAST_yes_w);
;;;108    #endif
;;;109        
;;;110        /* Prepare the DMA Channel configuration */
;;;111        /* Source, Destination, Source memory increase, Destination memory increase */
;;;112        mDMA->DMAChannelIndex->B.W = mDMA->Init.SrcPeri | mDMA->Init.DesPeri | DMA_SINC_ENABLE | DMA_DINC_ENABLE;
;;;113          
;;;114        /* Clean callbacks */
;;;115        mDMA->XferCpltCallback = NULL;
;;;116        mDMA->XferHalfCpltCallback = NULL;
;;;117        mDMA->XferErrorCallback = NULL;
;;;118        mDMA->XferAbortCallback = NULL;
;;;119    
;;;120        /* Initialise the error code */
;;;121        mDMA->ErrorCode = MID_DMA_ERROR_NONE;
;;;122    
;;;123        /* Initialize the DMA state*/
;;;124        mDMA->State = MID_DMA_STATE_READY;
;;;125    
;;;126        /* Allocate lock resource and initialize it */
;;;127        mDMA->Lock = MID_UnLocked;
;;;128    
;;;129        return MID_SUCCESS;
;;;130    }
000008  4770              BX       lr
                  |L8.10|
00000a  6c08              LDR      r0,[r1,#0x40]         ;74
00000c  6800              LDR      r0,[r0,#0]            ;74
00000e  0840              LSRS     r0,r0,#1              ;74
000010  0040              LSLS     r0,r0,#1              ;74
000012  6c0a              LDR      r2,[r1,#0x40]         ;74
000014  6010              STR      r0,[r2,#0]            ;74
000016  2000              MOVS     r0,#0                 ;77
000018  7748              STRB     r0,[r1,#0x1d]         ;77
00001a  6a4a              LDR      r2,[r1,#0x24]         ;81
00001c  6a08              LDR      r0,[r1,#0x20]         ;81
00001e  4310              ORRS     r0,r0,r2              ;81
000020  2201              MOVS     r2,#1                 ;81
000022  4310              ORRS     r0,r0,r2              ;81
000024  680a              LDR      r2,[r1,#0]            ;81
000026  6912              LDR      r2,[r2,#0x10]         ;81
000028  4310              ORRS     r0,r0,r2              ;81
00002a  680a              LDR      r2,[r1,#0]            ;81
00002c  6110              STR      r0,[r2,#0x10]         ;81
00002e  2002              MOVS     r0,#2                 ;92
000030  6c0a              LDR      r2,[r1,#0x40]         ;92
000032  8110              STRH     r0,[r2,#8]            ;92
000034  698a              LDR      r2,[r1,#0x18]         ;95
000036  68c8              LDR      r0,[r1,#0xc]          ;95
000038  4310              ORRS     r0,r0,r2              ;95
00003a  690a              LDR      r2,[r1,#0x10]         ;95
00003c  4310              ORRS     r0,r0,r2              ;95
00003e  694a              LDR      r2,[r1,#0x14]         ;95
000040  4310              ORRS     r0,r0,r2              ;95
000042  2201              MOVS     r2,#1                 ;95
000044  4310              ORRS     r0,r0,r2              ;95
000046  6c0a              LDR      r2,[r1,#0x40]         ;95
000048  6010              STR      r0,[r2,#0]            ;95
00004a  4a1a              LDR      r2,|L8.180|
00004c  6c08              LDR      r0,[r1,#0x40]         ;102
00004e  4290              CMP      r0,r2                 ;102
000050  d107              BNE      |L8.98|
000052  4819              LDR      r0,|L8.184|
000054  6900              LDR      r0,[r0,#0x10]         ;103
000056  2201              MOVS     r2,#1                 ;103
000058  0412              LSLS     r2,r2,#16             ;103
00005a  4390              BICS     r0,r0,r2              ;103
00005c  4a16              LDR      r2,|L8.184|
00005e  6110              STR      r0,[r2,#0x10]         ;103
000060  e013              B        |L8.138|
                  |L8.98|
000062  4a14              LDR      r2,|L8.180|
000064  3220              ADDS     r2,r2,#0x20           ;104
000066  6c08              LDR      r0,[r1,#0x40]         ;104
000068  4290              CMP      r0,r2                 ;104
00006a  d107              BNE      |L8.124|
00006c  4812              LDR      r0,|L8.184|
00006e  6900              LDR      r0,[r0,#0x10]         ;105
000070  2201              MOVS     r2,#1                 ;105
000072  0452              LSLS     r2,r2,#17             ;105
000074  4390              BICS     r0,r0,r2              ;105
000076  4a10              LDR      r2,|L8.184|
000078  6110              STR      r0,[r2,#0x10]         ;105
00007a  e006              B        |L8.138|
                  |L8.124|
00007c  480e              LDR      r0,|L8.184|
00007e  6900              LDR      r0,[r0,#0x10]         ;107
000080  2201              MOVS     r2,#1                 ;107
000082  0492              LSLS     r2,r2,#18             ;107
000084  4390              BICS     r0,r0,r2              ;107
000086  4a0c              LDR      r2,|L8.184|
000088  6110              STR      r0,[r2,#0x10]         ;107
                  |L8.138|
00008a  688a              LDR      r2,[r1,#8]            ;112
00008c  6848              LDR      r0,[r1,#4]            ;112
00008e  4310              ORRS     r0,r0,r2              ;112
000090  2203              MOVS     r2,#3                 ;112
000092  0412              LSLS     r2,r2,#16             ;112
000094  4310              ORRS     r0,r0,r2              ;112
000096  6c0a              LDR      r2,[r1,#0x40]         ;112
000098  6050              STR      r0,[r2,#4]            ;112
00009a  2000              MOVS     r0,#0                 ;115
00009c  62c8              STR      r0,[r1,#0x2c]         ;115
00009e  6308              STR      r0,[r1,#0x30]         ;116
0000a0  6348              STR      r0,[r1,#0x34]         ;117
0000a2  6388              STR      r0,[r1,#0x38]         ;118
0000a4  63c8              STR      r0,[r1,#0x3c]         ;121
0000a6  2001              MOVS     r0,#1                 ;124
0000a8  7748              STRB     r0,[r1,#0x1d]         ;124
0000aa  2000              MOVS     r0,#0                 ;127
0000ac  7708              STRB     r0,[r1,#0x1c]         ;127
0000ae  bf00              NOP                            ;129
0000b0  e7aa              B        |L8.8|
;;;131    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L8.180|
                          DCD      0x4bf00020
                  |L8.184|
                          DCD      0x4c030000

                          AREA ||i.MID_DMA_PollForTransfer||, CODE, READONLY, ALIGN=1

                  MID_DMA_PollForTransfer PROC
;;;409     */
;;;410    MID_StatusTypeDef MID_DMA_PollForTransfer(DMA_HandleTypeDef *mDMA, uint32_t CompleteLevel, uint32_t Timeout)
000000  b5f8              PUSH     {r3-r7,lr}
;;;411    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;412        uint32_t temp;
;;;413        uint32_t tickstart = 0U;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;414    
;;;415        if(MID_DMA_STATE_BUSY != mDMA->State)
00000c  7f60              LDRB     r0,[r4,#0x1d]
00000e  2800              CMP      r0,#0
000010  d007              BEQ      |L9.34|
;;;416        {
;;;417            /* no transfer ongoing */
;;;418            mDMA->ErrorCode = MID_DMA_ERROR_NO_XFER;
000012  2004              MOVS     r0,#4
000014  63e0              STR      r0,[r4,#0x3c]
;;;419            __MID_UNLOCK(mDMA);
000016  bf00              NOP      
000018  2000              MOVS     r0,#0
00001a  7720              STRB     r0,[r4,#0x1c]
00001c  bf00              NOP      
;;;420            return MID_FAILURE;
00001e  2001              MOVS     r0,#1
                  |L9.32|
;;;421        }
;;;422    
;;;423        /* Polling mode not supported in loop mode */
;;;424        if ((0x0000) != (mDMA->DMAChannelIndex->A.MBIT.LOOP))
;;;425        {
;;;426            mDMA->ErrorCode = MID_DMA_ERROR_NOT_SUPPORTED;
;;;427            return MID_FAILURE;
;;;428        }
;;;429    
;;;430        /* Get the level transfer complete flag */
;;;431        if(MID_DMA_FULL_TRANSFER == CompleteLevel)
;;;432        {
;;;433            /* Transfer Complete flag */
;;;434            temp = DMA_CH0A_CH0_TC2F_happened_w;
;;;435        }
;;;436        else
;;;437        {
;;;438            /* Half Transfer Complete flag */
;;;439            temp = DMA_CH0A_CH0_TH2F_happened_w;
;;;440        }
;;;441    
;;;442        /* Get tick */
;;;443        tickstart = MID_GetTick();
;;;444    
;;;445        while(0x00000000 == (mDMA->DMAChannelIndex->A.W & temp))
;;;446        {
;;;447            if(0x00000000 != (mDMA->DMAChannelIndex->A.W & DMA_CH0A_CH0_ERR2F_happened_w))
;;;448            {      
;;;449                /* When a DMA transfer error occurs */
;;;450                /* Clear all flags */
;;;451                mDMA->DMAChannelIndex->A.W |= DMA_CH_ALL_FLAG;
;;;452    
;;;453                /* clear of its EN bits */
;;;454                mDMA->DMAChannelIndex->A.W &= ~(DMA_CR0_EN_enable_w);
;;;455    
;;;456                /* Update error code */
;;;457                mDMA->ErrorCode = MID_DMA_ERROR_TE;
;;;458    
;;;459                /* Change the DMA state */
;;;460                mDMA->State= MID_DMA_STATE_READY;       
;;;461    
;;;462                /* Process Unlocked */
;;;463                __MID_UNLOCK(mDMA);
;;;464    
;;;465                return MID_FAILURE;      
;;;466            }  
;;;467          
;;;468            /* Check for the Timeout */
;;;469            if(Timeout != MID_MAX_DELAY)
;;;470            {
;;;471                if((Timeout == 0U) || ((MID_GetTick() - tickstart) > Timeout))
;;;472                {
;;;473                    /* Update error code */
;;;474                    mDMA->ErrorCode = MID_DMA_ERROR_TIMEOUT;
;;;475    
;;;476                    /* Change the DMA state */
;;;477                    mDMA->State = MID_DMA_STATE_READY;
;;;478    
;;;479                    /* Process Unlocked */
;;;480                    __MID_UNLOCK(mDMA);
;;;481    
;;;482                    return MID_FAILURE;
;;;483                }
;;;484            }
;;;485          
;;;486        }
;;;487    
;;;488        if(MID_DMA_FULL_TRANSFER == CompleteLevel)
;;;489        {
;;;490            /* Clear the transfer complete flag */
;;;491            mDMA->DMAChannelIndex->A.W |= DMA_CH_FLAG_COMPLETE | DMA_CH_FLAG_HALF;
;;;492    
;;;493            /* The selected Channelx EN bit is cleared (DMA is disabled and 
;;;494            all transfers are complete) */
;;;495            mDMA->State = MID_DMA_STATE_READY;
;;;496        }
;;;497        else
;;;498        { 
;;;499            /* Clear the half transfer complete flag */
;;;500            mDMA->DMAChannelIndex->A.W |= DMA_CH_FLAG_COMPLETE;
;;;501        }
;;;502    
;;;503        /* Process unlocked */
;;;504        __MID_UNLOCK(mDMA);  
;;;505    
;;;506        return MID_FAILURE;
;;;507    }
000020  bdf8              POP      {r3-r7,pc}
                  |L9.34|
000022  6c20              LDR      r0,[r4,#0x40]         ;424
000024  7800              LDRB     r0,[r0,#0]            ;424
000026  0740              LSLS     r0,r0,#29             ;424
000028  0fc0              LSRS     r0,r0,#31             ;424
00002a  2800              CMP      r0,#0                 ;424
00002c  d004              BEQ      |L9.56|
00002e  20ff              MOVS     r0,#0xff              ;426
000030  3001              ADDS     r0,#1                 ;426
000032  63e0              STR      r0,[r4,#0x3c]         ;426
000034  2001              MOVS     r0,#1                 ;427
000036  e7f3              B        |L9.32|
                  |L9.56|
000038  2e00              CMP      r6,#0                 ;431
00003a  d102              BNE      |L9.66|
00003c  2701              MOVS     r7,#1                 ;434
00003e  067f              LSLS     r7,r7,#25             ;434
000040  e001              B        |L9.70|
                  |L9.66|
000042  2701              MOVS     r7,#1                 ;439
000044  06bf              LSLS     r7,r7,#26             ;439
                  |L9.70|
000046  f7fffffe          BL       MID_GetTick
00004a  9000              STR      r0,[sp,#0]            ;443
00004c  e031              B        |L9.178|
                  |L9.78|
00004e  6c20              LDR      r0,[r4,#0x40]         ;447
000050  6800              LDR      r0,[r0,#0]            ;447
000052  2101              MOVS     r1,#1                 ;447
000054  06c9              LSLS     r1,r1,#27             ;447
000056  4008              ANDS     r0,r0,r1              ;447
000058  2800              CMP      r0,#0                 ;447
00005a  d015              BEQ      |L9.136|
00005c  6c20              LDR      r0,[r4,#0x40]         ;451
00005e  6800              LDR      r0,[r0,#0]            ;451
000060  2107              MOVS     r1,#7                 ;451
000062  0649              LSLS     r1,r1,#25             ;451
000064  4308              ORRS     r0,r0,r1              ;451
000066  6c21              LDR      r1,[r4,#0x40]         ;451
000068  6008              STR      r0,[r1,#0]            ;451
00006a  6c20              LDR      r0,[r4,#0x40]         ;454
00006c  6800              LDR      r0,[r0,#0]            ;454
00006e  0840              LSRS     r0,r0,#1              ;454
000070  0040              LSLS     r0,r0,#1              ;454
000072  6c21              LDR      r1,[r4,#0x40]         ;454
000074  6008              STR      r0,[r1,#0]            ;454
000076  2001              MOVS     r0,#1                 ;457
000078  63e0              STR      r0,[r4,#0x3c]         ;457
00007a  7760              STRB     r0,[r4,#0x1d]         ;460
00007c  bf00              NOP                            ;463
00007e  2000              MOVS     r0,#0                 ;463
000080  7720              STRB     r0,[r4,#0x1c]         ;463
000082  bf00              NOP                            ;463
000084  2001              MOVS     r0,#1                 ;465
000086  e7cb              B        |L9.32|
                  |L9.136|
000088  1c68              ADDS     r0,r5,#1              ;469
00008a  2800              CMP      r0,#0                 ;469
00008c  d011              BEQ      |L9.178|
00008e  2d00              CMP      r5,#0                 ;471
000090  d005              BEQ      |L9.158|
000092  f7fffffe          BL       MID_GetTick
000096  9900              LDR      r1,[sp,#0]            ;471
000098  1a40              SUBS     r0,r0,r1              ;471
00009a  42a8              CMP      r0,r5                 ;471
00009c  d909              BLS      |L9.178|
                  |L9.158|
00009e  2020              MOVS     r0,#0x20              ;474
0000a0  63e0              STR      r0,[r4,#0x3c]         ;474
0000a2  2001              MOVS     r0,#1                 ;477
0000a4  7760              STRB     r0,[r4,#0x1d]         ;477
0000a6  bf00              NOP                            ;480
0000a8  2000              MOVS     r0,#0                 ;480
0000aa  7720              STRB     r0,[r4,#0x1c]         ;480
0000ac  bf00              NOP                            ;480
0000ae  2001              MOVS     r0,#1                 ;482
0000b0  e7b6              B        |L9.32|
                  |L9.178|
0000b2  6c20              LDR      r0,[r4,#0x40]         ;445
0000b4  6800              LDR      r0,[r0,#0]            ;445
0000b6  4038              ANDS     r0,r0,r7              ;445
0000b8  2800              CMP      r0,#0                 ;445
0000ba  d0c8              BEQ      |L9.78|
0000bc  2e00              CMP      r6,#0                 ;488
0000be  d109              BNE      |L9.212|
0000c0  6c20              LDR      r0,[r4,#0x40]         ;491
0000c2  6800              LDR      r0,[r0,#0]            ;491
0000c4  2103              MOVS     r1,#3                 ;491
0000c6  0649              LSLS     r1,r1,#25             ;491
0000c8  4308              ORRS     r0,r0,r1              ;491
0000ca  6c21              LDR      r1,[r4,#0x40]         ;491
0000cc  6008              STR      r0,[r1,#0]            ;491
0000ce  2001              MOVS     r0,#1                 ;495
0000d0  7760              STRB     r0,[r4,#0x1d]         ;495
0000d2  e006              B        |L9.226|
                  |L9.212|
0000d4  6c20              LDR      r0,[r4,#0x40]         ;500
0000d6  6800              LDR      r0,[r0,#0]            ;500
0000d8  2101              MOVS     r1,#1                 ;500
0000da  0649              LSLS     r1,r1,#25             ;500
0000dc  4308              ORRS     r0,r0,r1              ;500
0000de  6c21              LDR      r1,[r4,#0x40]         ;500
0000e0  6008              STR      r0,[r1,#0]            ;500
                  |L9.226|
0000e2  bf00              NOP                            ;504
0000e4  2000              MOVS     r0,#0                 ;504
0000e6  7720              STRB     r0,[r4,#0x1c]         ;504
0000e8  bf00              NOP                            ;504
0000ea  2001              MOVS     r0,#1                 ;506
0000ec  e798              B        |L9.32|
;;;508    
                          ENDP


                          AREA ||i.MID_DMA_RegisterCallback||, CODE, READONLY, ALIGN=1

                  MID_DMA_RegisterCallback PROC
;;;627     */
;;;628    __weak MID_StatusTypeDef MID_DMA_RegisterCallback(DMA_HandleTypeDef *mDMA, MID_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef * _mDMA))
000000  b510              PUSH     {r4,lr}
;;;629    {
000002  4603              MOV      r3,r0
;;;630        MID_StatusTypeDef status = MID_SUCCESS;
000004  2400              MOVS     r4,#0
;;;631    
;;;632        /* Process locked */
;;;633        __MID_LOCK(mDMA);
000006  bf00              NOP      
000008  7f18              LDRB     r0,[r3,#0x1c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L10.18|
00000e  2002              MOVS     r0,#2
                  |L10.16|
;;;634    
;;;635        if(MID_DMA_STATE_READY == mDMA->State)
;;;636        {
;;;637            switch (CallbackID)
;;;638            {
;;;639            case  MID_DMA_XFER_CPLT_CB_ID:
;;;640                mDMA->XferCpltCallback = pCallback;
;;;641                break;
;;;642    
;;;643            case  MID_DMA_XFER_HALFCPLT_CB_ID:
;;;644                mDMA->XferHalfCpltCallback = pCallback;
;;;645                break;         
;;;646    
;;;647            case  MID_DMA_XFER_ERROR_CB_ID:
;;;648                mDMA->XferErrorCallback = pCallback;
;;;649                break;         
;;;650               
;;;651            case  MID_DMA_XFER_ABORT_CB_ID:
;;;652                mDMA->XferAbortCallback = pCallback;
;;;653                break; 
;;;654               
;;;655            default:
;;;656                status = MID_FAILURE;
;;;657                break;                                                            
;;;658            }
;;;659        }
;;;660        else
;;;661        {
;;;662            status = MID_FAILURE;
;;;663        } 
;;;664    
;;;665        /* Release Lock */
;;;666        __MID_UNLOCK(mDMA);
;;;667    
;;;668        return status;
;;;669    }
000010  bd10              POP      {r4,pc}
                  |L10.18|
000012  2001              MOVS     r0,#1                 ;633
000014  7718              STRB     r0,[r3,#0x1c]         ;633
000016  bf00              NOP                            ;633
000018  7f58              LDRB     r0,[r3,#0x1d]         ;635
00001a  2801              CMP      r0,#1                 ;635
00001c  d113              BNE      |L10.70|
00001e  2900              CMP      r1,#0                 ;637
000020  d006              BEQ      |L10.48|
000022  2901              CMP      r1,#1                 ;637
000024  d006              BEQ      |L10.52|
000026  2902              CMP      r1,#2                 ;637
000028  d006              BEQ      |L10.56|
00002a  2903              CMP      r1,#3                 ;637
00002c  d108              BNE      |L10.64|
00002e  e005              B        |L10.60|
                  |L10.48|
000030  62da              STR      r2,[r3,#0x2c]         ;640
000032  e007              B        |L10.68|
                  |L10.52|
000034  631a              STR      r2,[r3,#0x30]         ;644
000036  e005              B        |L10.68|
                  |L10.56|
000038  635a              STR      r2,[r3,#0x34]         ;648
00003a  e003              B        |L10.68|
                  |L10.60|
00003c  639a              STR      r2,[r3,#0x38]         ;652
00003e  e001              B        |L10.68|
                  |L10.64|
000040  2401              MOVS     r4,#1                 ;656
000042  bf00              NOP                            ;657
                  |L10.68|
000044  e000              B        |L10.72|
                  |L10.70|
000046  2401              MOVS     r4,#1                 ;662
                  |L10.72|
000048  bf00              NOP                            ;666
00004a  2000              MOVS     r0,#0                 ;666
00004c  7718              STRB     r0,[r3,#0x1c]         ;666
00004e  bf00              NOP                            ;666
000050  4620              MOV      r0,r4                 ;668
000052  e7dd              B        |L10.16|
;;;670    
                          ENDP


                          AREA ||i.MID_DMA_Start||, CODE, READONLY, ALIGN=1

                  MID_DMA_Start PROC
;;;196     */
;;;197    MID_StatusTypeDef MID_DMA_Start(DMA_HandleTypeDef *mDMA, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b5f8              PUSH     {r3-r7,lr}
;;;198    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;199    	MID_StatusTypeDef status = MID_SUCCESS;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;200      
;;;201        /* Process locked */
;;;202        __MID_LOCK(mDMA);
00000e  bf00              NOP      
000010  7f20              LDRB     r0,[r4,#0x1c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L11.26|
000016  2002              MOVS     r0,#2
                  |L11.24|
;;;203    
;;;204        if(MID_DMA_STATE_READY == mDMA->State)
;;;205        {
;;;206            /* Change DMA peripheral state */  
;;;207            mDMA->State = MID_DMA_STATE_BUSY;
;;;208    
;;;209            mDMA->ErrorCode = MID_DMA_ERROR_NONE;
;;;210    
;;;211            //  	/* Disable the peripheral */
;;;212            //    mDMA->DMAChannelIndex->A.W &= ~(DMA_CR0_EN_enable_w);
;;;213    
;;;214            /* Configure the source, destination address and the data length */
;;;215            DMA_SetConfig(mDMA, SrcAddress, DstAddress, DataLength);
;;;216    
;;;217            /* Send DMA request */
;;;218            mDMA->DMAChannelIndex->A.W |= (DMA_CH0A_CH0_REQ_enable_w);
;;;219        }
;;;220        else
;;;221        {
;;;222            /* Process Unlocked */
;;;223            __MID_UNLOCK(mDMA);
;;;224    
;;;225            /* Remain BUSY */
;;;226            status = MID_BUSY;
;;;227        }  
;;;228    
;;;229        return status; 
;;;230    }
000018  bdf8              POP      {r3-r7,pc}
                  |L11.26|
00001a  2001              MOVS     r0,#1                 ;202
00001c  7720              STRB     r0,[r4,#0x1c]         ;202
00001e  bf00              NOP                            ;202
000020  7f60              LDRB     r0,[r4,#0x1d]         ;204
000022  2801              CMP      r0,#1                 ;204
000024  d110              BNE      |L11.72|
000026  2000              MOVS     r0,#0                 ;207
000028  7760              STRB     r0,[r4,#0x1d]         ;207
00002a  63e0              STR      r0,[r4,#0x3c]         ;209
00002c  463b              MOV      r3,r7                 ;215
00002e  4632              MOV      r2,r6                 ;215
000030  4629              MOV      r1,r5                 ;215
000032  4620              MOV      r0,r4                 ;215
000034  f7fffffe          BL       DMA_SetConfig
000038  6c20              LDR      r0,[r4,#0x40]         ;218
00003a  6800              LDR      r0,[r0,#0]            ;218
00003c  2101              MOVS     r1,#1                 ;218
00003e  03c9              LSLS     r1,r1,#15             ;218
000040  4308              ORRS     r0,r0,r1              ;218
000042  6c21              LDR      r1,[r4,#0x40]         ;218
000044  6008              STR      r0,[r1,#0]            ;218
000046  e005              B        |L11.84|
                  |L11.72|
000048  bf00              NOP                            ;223
00004a  2000              MOVS     r0,#0                 ;223
00004c  7720              STRB     r0,[r4,#0x1c]         ;223
00004e  bf00              NOP                            ;223
000050  2002              MOVS     r0,#2                 ;226
000052  9000              STR      r0,[sp,#0]            ;226
                  |L11.84|
000054  9800              LDR      r0,[sp,#0]            ;229
000056  e7df              B        |L11.24|
;;;231    
                          ENDP


                          AREA ||i.MID_DMA_Start_IT||, CODE, READONLY, ALIGN=1

                  MID_DMA_Start_IT PROC
;;;249     */
;;;250    MID_StatusTypeDef MID_DMA_Start_IT(DMA_HandleTypeDef *mDMA, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b5ff              PUSH     {r0-r7,lr}
;;;251    {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;252        uint32_t tmp;
;;;253        
;;;254    	MID_StatusTypeDef status = MID_SUCCESS;
000008  2600              MOVS     r6,#0
;;;255      
;;;256        /* Process locked */
;;;257        __MID_LOCK(mDMA);
00000a  bf00              NOP      
00000c  7f20              LDRB     r0,[r4,#0x1c]
00000e  2801              CMP      r0,#1
000010  d102              BNE      |L12.24|
000012  2002              MOVS     r0,#2
                  |L12.20|
;;;258    
;;;259        if(MID_SUCCESS == status)
;;;260        {
;;;261            /* Change DMA peripheral state */  
;;;262            mDMA->State = MID_DMA_STATE_BUSY;
;;;263    
;;;264            mDMA->ErrorCode = MID_DMA_ERROR_NONE;
;;;265    
;;;266            /* Enable the DMA IEA interrupt bit */
;;;267            __DRV_DMA_ENABLE_ITEA(mDMA);
;;;268    
;;;269            /* Enable the transfer complete, & transfer error interrupts */
;;;270            /* Half transfer interrupt is optional: enable it only if associated callback is available */
;;;271            if(NULL != mDMA->XferHalfCpltCallback )
;;;272            {
;;;273                tmp = mDMA->DMAChannelIndex->A.W;
;;;274                tmp |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
;;;275                mDMA->DMAChannelIndex->A.W = tmp;
;;;276            }
;;;277            else
;;;278            {        
;;;279                tmp = mDMA->DMAChannelIndex->A.W;
;;;280                tmp |= (DMA_IT_TC | DMA_IT_TE);
;;;281                tmp &= ~(DMA_IT_HT);
;;;282                mDMA->DMAChannelIndex->A.W = tmp;
;;;283            }
;;;284    
;;;285            /* Configure the source, destination address and the data length */
;;;286            DMA_SetConfig(mDMA, SrcAddress, DstAddress, DataLength);
;;;287    
;;;288            /* Send DMA request */
;;;289            mDMA->DMAChannelIndex->A.W |= (DMA_CH0A_CH0_REQ_enable_w);
;;;290    
;;;291            /* Change DMA peripheral state */  
;;;292            mDMA->State = MID_DMA_STATE_READY;
;;;293    
;;;294        }
;;;295        else
;;;296        {
;;;297            /* Process Unlocked */
;;;298            __MID_UNLOCK(mDMA);
;;;299    
;;;300            /* Remain BUSY */
;;;301            status = MID_BUSY;
;;;302        }  
;;;303    
;;;304        return status; 
;;;305    }
000014  b005              ADD      sp,sp,#0x14
000016  bdf0              POP      {r4-r7,pc}
                  |L12.24|
000018  2001              MOVS     r0,#1                 ;257
00001a  7720              STRB     r0,[r4,#0x1c]         ;257
00001c  bf00              NOP                            ;257
00001e  2e00              CMP      r6,#0                 ;259
000020  d12f              BNE      |L12.130|
000022  2000              MOVS     r0,#0                 ;262
000024  7760              STRB     r0,[r4,#0x1d]         ;262
000026  63e0              STR      r0,[r4,#0x3c]         ;264
000028  6820              LDR      r0,[r4,#0]            ;267
00002a  6840              LDR      r0,[r0,#4]            ;267
00002c  2101              MOVS     r1,#1                 ;267
00002e  4308              ORRS     r0,r0,r1              ;267
000030  6821              LDR      r1,[r4,#0]            ;267
000032  6048              STR      r0,[r1,#4]            ;267
000034  6b20              LDR      r0,[r4,#0x30]         ;271
000036  2800              CMP      r0,#0                 ;271
000038  d007              BEQ      |L12.74|
00003a  6c20              LDR      r0,[r4,#0x40]         ;273
00003c  6805              LDR      r5,[r0,#0]            ;273
00003e  2007              MOVS     r0,#7                 ;274
000040  0440              LSLS     r0,r0,#17             ;274
000042  4305              ORRS     r5,r5,r0              ;274
000044  6c20              LDR      r0,[r4,#0x40]         ;275
000046  6005              STR      r5,[r0,#0]            ;275
000048  e00b              B        |L12.98|
                  |L12.74|
00004a  6c20              LDR      r0,[r4,#0x40]         ;279
00004c  6805              LDR      r5,[r0,#0]            ;279
00004e  2005              MOVS     r0,#5                 ;280
000050  0440              LSLS     r0,r0,#17             ;280
000052  4305              ORRS     r5,r5,r0              ;280
000054  2101              MOVS     r1,#1                 ;281
000056  0489              LSLS     r1,r1,#18             ;281
000058  4628              MOV      r0,r5                 ;281
00005a  4388              BICS     r0,r0,r1              ;281
00005c  4605              MOV      r5,r0                 ;281
00005e  6c20              LDR      r0,[r4,#0x40]         ;282
000060  6005              STR      r5,[r0,#0]            ;282
                  |L12.98|
000062  4639              MOV      r1,r7                 ;286
000064  4620              MOV      r0,r4                 ;286
000066  9b04              LDR      r3,[sp,#0x10]         ;286
000068  9a03              LDR      r2,[sp,#0xc]          ;286
00006a  f7fffffe          BL       DMA_SetConfig
00006e  6c20              LDR      r0,[r4,#0x40]         ;289
000070  6800              LDR      r0,[r0,#0]            ;289
000072  2101              MOVS     r1,#1                 ;289
000074  03c9              LSLS     r1,r1,#15             ;289
000076  4308              ORRS     r0,r0,r1              ;289
000078  6c21              LDR      r1,[r4,#0x40]         ;289
00007a  6008              STR      r0,[r1,#0]            ;289
00007c  2001              MOVS     r0,#1                 ;292
00007e  7760              STRB     r0,[r4,#0x1d]         ;292
000080  e004              B        |L12.140|
                  |L12.130|
000082  bf00              NOP                            ;298
000084  2000              MOVS     r0,#0                 ;298
000086  7720              STRB     r0,[r4,#0x1c]         ;298
000088  bf00              NOP                            ;298
00008a  2602              MOVS     r6,#2                 ;301
                  |L12.140|
00008c  4630              MOV      r0,r6                 ;304
00008e  e7c1              B        |L12.20|
;;;306    
                          ENDP


                          AREA ||i.MID_DMA_UnRegisterCallback||, CODE, READONLY, ALIGN=1

                  MID_DMA_UnRegisterCallback PROC
;;;679     */
;;;680    __weak MID_StatusTypeDef MID_DMA_UnRegisterCallback(DMA_HandleTypeDef *mDMA, MID_DMA_CallbackIDTypeDef CallbackID)
000000  b510              PUSH     {r4,lr}
;;;681    {
000002  4602              MOV      r2,r0
;;;682        MID_StatusTypeDef status = MID_SUCCESS;
000004  2400              MOVS     r4,#0
;;;683    
;;;684        /* Process locked */
;;;685        __MID_LOCK(mDMA);
000006  bf00              NOP      
000008  7f10              LDRB     r0,[r2,#0x1c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L13.18|
00000e  2002              MOVS     r0,#2
                  |L13.16|
;;;686    
;;;687        if(MID_DMA_STATE_READY == mDMA->State)
;;;688        {
;;;689            switch (CallbackID)
;;;690            {
;;;691            case  MID_DMA_XFER_CPLT_CB_ID:
;;;692                mDMA->XferCpltCallback = NULL;
;;;693                break;
;;;694    
;;;695            case  MID_DMA_XFER_HALFCPLT_CB_ID:
;;;696                mDMA->XferHalfCpltCallback = NULL;
;;;697                break;         
;;;698    
;;;699            case  MID_DMA_XFER_ERROR_CB_ID:
;;;700                mDMA->XferErrorCallback = NULL;
;;;701                break;         
;;;702    
;;;703            case  MID_DMA_XFER_ABORT_CB_ID:
;;;704                mDMA->XferAbortCallback = NULL;
;;;705                break; 
;;;706    
;;;707            case   MID_DMA_XFER_ALL_CB_ID:
;;;708                mDMA->XferCpltCallback = NULL;
;;;709                mDMA->XferHalfCpltCallback = NULL;
;;;710                mDMA->XferErrorCallback = NULL;
;;;711                mDMA->XferAbortCallback = NULL;
;;;712                break; 
;;;713    
;;;714            default:
;;;715                status = MID_FAILURE;
;;;716            break;                                                            
;;;717            }
;;;718        }
;;;719        else
;;;720        {
;;;721            status = MID_FAILURE;
;;;722        } 
;;;723    
;;;724        /* Release Lock */
;;;725        __MID_UNLOCK(mDMA);
;;;726    
;;;727        return status;
;;;728    }
000010  bd10              POP      {r4,pc}
                  |L13.18|
000012  2001              MOVS     r0,#1                 ;685
000014  7710              STRB     r0,[r2,#0x1c]         ;685
000016  bf00              NOP                            ;685
000018  7f50              LDRB     r0,[r2,#0x1d]         ;687
00001a  2801              CMP      r0,#1                 ;687
00001c  d11b              BNE      |L13.86|
00001e  000b              MOVS     r3,r1                 ;689
000020  f7fffffe          BL       __ARM_common_switch8
000024  0504070a          DCB      0x05,0x04,0x07,0x0a
000028  0d101600          DCB      0x0d,0x10,0x16,0x00
00002c  2000              MOVS     r0,#0                 ;692
00002e  62d0              STR      r0,[r2,#0x2c]         ;692
000030  e010              B        |L13.84|
000032  2000              MOVS     r0,#0                 ;696
000034  6310              STR      r0,[r2,#0x30]         ;696
000036  e00d              B        |L13.84|
000038  2000              MOVS     r0,#0                 ;700
00003a  6350              STR      r0,[r2,#0x34]         ;700
00003c  e00a              B        |L13.84|
00003e  2000              MOVS     r0,#0                 ;704
000040  6390              STR      r0,[r2,#0x38]         ;704
000042  e007              B        |L13.84|
000044  2000              MOVS     r0,#0                 ;708
000046  62d0              STR      r0,[r2,#0x2c]         ;708
000048  6310              STR      r0,[r2,#0x30]         ;709
00004a  6350              STR      r0,[r2,#0x34]         ;710
00004c  6390              STR      r0,[r2,#0x38]         ;711
00004e  e001              B        |L13.84|
000050  2401              MOVS     r4,#1                 ;715
000052  bf00              NOP                            ;716
                  |L13.84|
000054  e000              B        |L13.88|
                  |L13.86|
000056  2401              MOVS     r4,#1                 ;721
                  |L13.88|
000058  bf00              NOP                            ;725
00005a  2000              MOVS     r0,#0                 ;725
00005c  7710              STRB     r0,[r2,#0x1c]         ;725
00005e  bf00              NOP                            ;725
000060  4620              MOV      r0,r4                 ;727
000062  e7d5              B        |L13.16|
;;;729    
                          ENDP


                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L84.24|
                  |L84.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L84.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L84.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_DMA_MID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_DMA_MID_c_f3e8b34d____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_DMA_MID_c_f3e8b34d____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_DMA_MID_c_f3e8b34d____REVSH|
#line 496
|__asm___18_MG32x02z_DMA_MID_c_f3e8b34d____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
