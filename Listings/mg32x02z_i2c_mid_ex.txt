; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_i2c_mid_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_i2c_mid_ex.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_i2c_mid_ex.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_I2C_MID_ex.c]
                          THUMB

                          AREA ||i.MID_I2CEx_ConfigDigitalFilter||, CODE, READONLY, ALIGN=1

                  MID_I2CEx_ConfigDigitalFilter PROC
;;;128     */
;;;129    MID_StatusTypeDef MID_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *mI2C, uint32_t DigitalFilter)
000000  b510              PUSH     {r4,lr}
;;;130    {
000002  4602              MOV      r2,r0
;;;131        uint32_t tmpreg = 0U;
000004  2300              MOVS     r3,#0
;;;132    
;;;133        /* Check the parameters */
;;;134        assert_param(IS_I2C_ALL_INSTANCE(mI2C->Instance));
;;;135        assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
;;;136    
;;;137        if((mI2C->State & MID_I2C_STATE_READY) != 0)
000006  2034              MOVS     r0,#0x34
000008  5c80              LDRB     r0,[r0,r2]
00000a  2480              MOVS     r4,#0x80
00000c  4020              ANDS     r0,r0,r4
00000e  2800              CMP      r0,#0
000010  d023              BEQ      |L1.90|
;;;138        {
;;;139            /* Process Locked */
;;;140            __MID_LOCK(mI2C);
000012  bf00              NOP      
000014  2030              MOVS     r0,#0x30
000016  5c80              LDRB     r0,[r0,r2]
000018  2801              CMP      r0,#1
00001a  d101              BNE      |L1.32|
00001c  2002              MOVS     r0,#2
                  |L1.30|
;;;141    
;;;142            mI2C->State = MID_I2C_STATE_BUSY;
;;;143    
;;;144            /* Disable the selected I2C peripheral */
;;;145            __DRV_I2C_DISABLE(mI2C);
;;;146    
;;;147            /* Get the old register value */
;;;148            // tmpreg = mI2C->Instance->CR1;
;;;149    
;;;150            /* Reset I2Cx DNF bits [11:8] */
;;;151            // tmpreg &= ~(I2C_CR1_DNF);
;;;152    
;;;153            /* Set I2Cx DNF coefficient */
;;;154            tmpreg |= DigitalFilter << 8U;
;;;155    
;;;156            /* Store the new register value */
;;;157            // mI2C->Instance->CR1 = tmpreg;
;;;158    
;;;159            __DRV_I2C_ENABLE(mI2C);
;;;160    
;;;161            mI2C->State = MID_I2C_STATE_READY;
;;;162    
;;;163            /* Process Unlocked */
;;;164            __MID_UNLOCK(mI2C);
;;;165    
;;;166            return MID_OK;
;;;167        }
;;;168        else
;;;169        {
;;;170            return MID_BUSY;
;;;171        }
;;;172    }
00001e  bd10              POP      {r4,pc}
                  |L1.32|
000020  2401              MOVS     r4,#1                 ;140
000022  2030              MOVS     r0,#0x30              ;140
000024  5484              STRB     r4,[r0,r2]            ;140
000026  bf00              NOP                            ;140
000028  2034              MOVS     r0,#0x34              ;142
00002a  5484              STRB     r4,[r0,r2]            ;142
00002c  6810              LDR      r0,[r2,#0]            ;145
00002e  6900              LDR      r0,[r0,#0x10]         ;145
000030  43a0              BICS     r0,r0,r4              ;145
000032  6814              LDR      r4,[r2,#0]            ;145
000034  6120              STR      r0,[r4,#0x10]         ;145
000036  0208              LSLS     r0,r1,#8              ;154
000038  4303              ORRS     r3,r3,r0              ;154
00003a  6810              LDR      r0,[r2,#0]            ;159
00003c  6900              LDR      r0,[r0,#0x10]         ;159
00003e  2401              MOVS     r4,#1                 ;159
000040  4320              ORRS     r0,r0,r4              ;159
000042  6814              LDR      r4,[r2,#0]            ;159
000044  6120              STR      r0,[r4,#0x10]         ;159
000046  2480              MOVS     r4,#0x80              ;161
000048  2034              MOVS     r0,#0x34              ;161
00004a  5484              STRB     r4,[r0,r2]            ;161
00004c  bf00              NOP                            ;164
00004e  2400              MOVS     r4,#0                 ;164
000050  2030              MOVS     r0,#0x30              ;164
000052  5484              STRB     r4,[r0,r2]            ;164
000054  bf00              NOP                            ;164
000056  2000              MOVS     r0,#0                 ;166
000058  e7e1              B        |L1.30|
                  |L1.90|
00005a  2002              MOVS     r0,#2                 ;170
00005c  e7df              B        |L1.30|
;;;173    
                          ENDP


                          AREA ||i.MID_I2CEx_ConfigPreDriveTime||, CODE, READONLY, ALIGN=1

                  MID_I2CEx_ConfigPreDriveTime PROC
;;;182     */
;;;183    MID_StatusTypeDef MID_I2CEx_ConfigPreDriveTime(I2C_HandleTypeDef *mI2C, uint32_t PreDriveTimeSelection)
000000  b510              PUSH     {r4,lr}
;;;184    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;185        uint32_t lRegTmp;
;;;186        /* Check the parameter */
;;;187        assert_param(IS_I2C_PREDRIVETIME(PreDriveTimeSelection));
;;;188    
;;;189        if((mI2C->State & MID_I2C_STATE_READY) != 0)
000006  2034              MOVS     r0,#0x34
000008  5c80              LDRB     r0,[r0,r2]
00000a  2480              MOVS     r4,#0x80
00000c  4020              ANDS     r0,r0,r4
00000e  2800              CMP      r0,#0
000010  d02d              BEQ      |L2.110|
;;;190        {
;;;191            /* Process Locked */
;;;192            __MID_LOCK(mI2C);
000012  bf00              NOP      
000014  2030              MOVS     r0,#0x30
000016  5c80              LDRB     r0,[r0,r2]
000018  2801              CMP      r0,#1
00001a  d101              BNE      |L2.32|
00001c  2002              MOVS     r0,#2
                  |L2.30|
;;;193    
;;;194            mI2C->State = MID_I2C_STATE_BUSY;
;;;195    
;;;196            /* Disable the selected I2C peripheral */
;;;197            __DRV_I2C_DISABLE(mI2C);
;;;198    
;;;199            /* Enable wakeup from stop mode */
;;;200            lRegTmp = mI2C->Instance->CR0.W;
;;;201            lRegTmp &= ~I2C_PDT_MASK;
;;;202            lRegTmp |= PreDriveTimeSelection;
;;;203            mI2C->Instance->CR0.W = lRegTmp;
;;;204    
;;;205            __DRV_I2C_ENABLE(mI2C);
;;;206    
;;;207            mI2C->State = MID_I2C_STATE_READY;
;;;208    
;;;209            /* Process Unlocked */
;;;210            __MID_UNLOCK(mI2C);
;;;211    
;;;212            return MID_OK;
;;;213        }
;;;214        else
;;;215        {
;;;216            return MID_BUSY;
;;;217        }
;;;218    }
00001e  bd10              POP      {r4,pc}
                  |L2.32|
000020  2401              MOVS     r4,#1                 ;192
000022  2030              MOVS     r0,#0x30              ;192
000024  5484              STRB     r4,[r0,r2]            ;192
000026  bf00              NOP                            ;192
000028  2034              MOVS     r0,#0x34              ;194
00002a  5484              STRB     r4,[r0,r2]            ;194
00002c  6810              LDR      r0,[r2,#0]            ;197
00002e  6900              LDR      r0,[r0,#0x10]         ;197
000030  43a0              BICS     r0,r0,r4              ;197
000032  6814              LDR      r4,[r2,#0]            ;197
000034  6120              STR      r0,[r4,#0x10]         ;197
000036  6810              LDR      r0,[r2,#0]            ;200
000038  6901              LDR      r1,[r0,#0x10]         ;200
00003a  2403              MOVS     r4,#3                 ;201
00003c  03a4              LSLS     r4,r4,#14             ;201
00003e  4608              MOV      r0,r1                 ;201
000040  43a0              BICS     r0,r0,r4              ;201
000042  4601              MOV      r1,r0                 ;201
000044  4608              MOV      r0,r1                 ;202
000046  4318              ORRS     r0,r0,r3              ;202
000048  4601              MOV      r1,r0                 ;202
00004a  6810              LDR      r0,[r2,#0]            ;203
00004c  6101              STR      r1,[r0,#0x10]         ;203
00004e  6810              LDR      r0,[r2,#0]            ;205
000050  6900              LDR      r0,[r0,#0x10]         ;205
000052  2401              MOVS     r4,#1                 ;205
000054  4320              ORRS     r0,r0,r4              ;205
000056  6814              LDR      r4,[r2,#0]            ;205
000058  6120              STR      r0,[r4,#0x10]         ;205
00005a  2480              MOVS     r4,#0x80              ;207
00005c  2034              MOVS     r0,#0x34              ;207
00005e  5484              STRB     r4,[r0,r2]            ;207
000060  bf00              NOP                            ;210
000062  2400              MOVS     r4,#0                 ;210
000064  2030              MOVS     r0,#0x30              ;210
000066  5484              STRB     r4,[r0,r2]            ;210
000068  bf00              NOP                            ;210
00006a  2000              MOVS     r0,#0                 ;212
00006c  e7d7              B        |L2.30|
                  |L2.110|
00006e  2002              MOVS     r0,#2                 ;216
000070  e7d5              B        |L2.30|
;;;219    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CSC_InitConfig
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00010000
                          DCD      0x00000000
                          DCD      0x00000210
                          DCD      0x00000001
                          DCD      0x00000008
                          DCD      0x0000911f
                          DCD      0x000f13ed
                          DCD      0x00008993
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00b71b00
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_I2C_MID_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_MG32x02z_I2C_MID_ex_c_482f8046____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___21_MG32x02z_I2C_MID_ex_c_482f8046____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_MG32x02z_I2C_MID_ex_c_482f8046____REVSH|
#line 496
|__asm___21_MG32x02z_I2C_MID_ex_c_482f8046____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
