; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_dac_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_dac_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_dac_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_DAC_DRV.c]
                          THUMB

                          AREA ||i.DAC_ClearFlag||, CODE, READONLY, ALIGN=1

                  DAC_ClearFlag PROC
;;;457     */
;;;458    void DAC_ClearFlag(DAC_Struct* DACx, uint32_t DAC_ITSrc)
000000  6001              STR      r1,[r0,#0]
;;;459    {
;;;460        DACx->STA.W = DAC_ITSrc;
;;;461    }
000002  4770              BX       lr
;;;462    ///@}
                          ENDP


                          AREA ||i.DAC_Cmd||, CODE, READONLY, ALIGN=1

                  DAC_Cmd PROC
;;;87      */
;;;88     void DAC_Cmd(DAC_Struct* DACx, FunctionalState NewState)
000000  7c02              LDRB     r2,[r0,#0x10]
;;;89     {
;;;90         DACx->CR0.MBIT.DA0_EN = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7402              STRB     r2,[r0,#0x10]
;;;91     
;;;92     }
00000e  4770              BX       lr
;;;93     
                          ENDP


                          AREA ||i.DAC_CurrentMode_Select||, CODE, READONLY, ALIGN=1

                  DAC_CurrentMode_Select PROC
;;;139     */
;;;140    void DAC_CurrentMode_Select(DAC_Struct* DACx, DAC_CurrentModeDef OutCurr)
000000  b510              PUSH     {r4,lr}
;;;141    {
;;;142        DACx->CR0.MBIT.CMOD0_SEL = OutCurr;
000002  7c02              LDRB     r2,[r0,#0x10]
000004  230c              MOVS     r3,#0xc
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  240c              MOVS     r4,#0xc
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7402              STRB     r2,[r0,#0x10]
;;;143    
;;;144    }
000012  bd10              POP      {r4,pc}
;;;145    #endif
                          ENDP


                          AREA ||i.DAC_DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DAC_DMA_Cmd PROC
;;;484     */
;;;485    void DAC_DMA_Cmd(DAC_Struct* DACx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;486    {
;;;487        DACx->CR0.MBIT.DMA_EN = NewState;
000002  7cc2              LDRB     r2,[r0,#0x13]
000004  2380              MOVS     r3,#0x80
000006  439a              BICS     r2,r2,r3
000008  01cb              LSLS     r3,r1,#7
00000a  2480              MOVS     r4,#0x80
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  74c2              STRB     r2,[r0,#0x13]
;;;488    
;;;489    }
000012  bd10              POP      {r4,pc}
;;;490    ///@}
                          ENDP


                          AREA ||i.DAC_DataAlignment_Select||, CODE, READONLY, ALIGN=1

                  DAC_DataAlignment_Select PROC
;;;312     */
;;;313    void DAC_DataAlignment_Select(DAC_Struct* DACx, DAC_DataAlignModeDef AlignMode)
000000  b510              PUSH     {r4,lr}
;;;314    {
;;;315        DACx->CR0.MBIT.ALIGN0_SEL = AlignMode;
000002  7c02              LDRB     r2,[r0,#0x10]
000004  2310              MOVS     r3,#0x10
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2410              MOVS     r4,#0x10
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7402              STRB     r2,[r0,#0x10]
;;;316    }
000012  bd10              POP      {r4,pc}
;;;317    
                          ENDP


                          AREA ||i.DAC_DataResolution_Select||, CODE, READONLY, ALIGN=1

                  DAC_DataResolution_Select PROC
;;;333     */
;;;334    void DAC_DataResolution_Select(DAC_Struct* DACx, DAC_ResolutionDef ResolutionData)
000000  b510              PUSH     {r4,lr}
;;;335    {
;;;336        DACx->CR0.MBIT.RES0_SEL = ResolutionData;
000002  7c02              LDRB     r2,[r0,#0x10]
000004  2340              MOVS     r3,#0x40
000006  439a              BICS     r2,r2,r3
000008  018b              LSLS     r3,r1,#6
00000a  2440              MOVS     r4,#0x40
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7402              STRB     r2,[r0,#0x10]
;;;337    }
000012  bd10              POP      {r4,pc}
;;;338    ///@}
                          ENDP


                          AREA ||i.DAC_DeInit||, CODE, READONLY, ALIGN=1

                  DAC_DeInit PROC
;;;56      */
;;;57     void DAC_DeInit(DAC_Struct* DACx)
000000  2100              MOVS     r1,#0
;;;58     {
;;;59          DACx->INT.W = 0x00000000;
000002  6041              STR      r1,[r0,#4]
;;;60          DACx->CR0.W = 0x00000000;
000004  6101              STR      r1,[r0,#0x10]
;;;61          DACx->DAT0.W = 0x00000000;
000006  6201              STR      r1,[r0,#0x20]
;;;62          DACx->STA.W = 0xFFFFFFFF;
000008  1e49              SUBS     r1,r1,#1
00000a  6001              STR      r1,[r0,#0]
;;;63     }
00000c  4770              BX       lr
;;;64     ///@}
                          ENDP


                          AREA ||i.DAC_GetAllFlagStatus||, CODE, READONLY, ALIGN=1

                  DAC_GetAllFlagStatus PROC
;;;436     */
;;;437    uint32_t DAC_GetAllFlagStatus(DAC_Struct* DACx)
000000  4601              MOV      r1,r0
;;;438    {
;;;439        return DACx->STA.W;
000002  6808              LDR      r0,[r1,#0]
;;;440    }
000004  4770              BX       lr
;;;441    
                          ENDP


                          AREA ||i.DAC_GetDACState||, CODE, READONLY, ALIGN=1

                  DAC_GetDACState PROC
;;;106     */
;;;107    DRV_Return DAC_GetDACState(DAC_Struct* DACx)
000000  4601              MOV      r1,r0
;;;108    {
;;;109        if (DACx->CR0.MBIT.DA0_EN)
000002  7c08              LDRB     r0,[r1,#0x10]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L9.16|
;;;110            return DRV_Success;
00000c  2000              MOVS     r0,#0
                  |L9.14|
;;;111        else 
;;;112            return DRV_Failure;
;;;113    
;;;114    }
00000e  4770              BX       lr
                  |L9.16|
000010  2001              MOVS     r0,#1                 ;112
000012  e7fc              B        |L9.14|
;;;115    ///@}
                          ENDP


                          AREA ||i.DAC_GetDAT0||, CODE, READONLY, ALIGN=1

                  DAC_GetDAT0 PROC
;;;188     */
;;;189    uint16_t DAC_GetDAT0(DAC_Struct* DACx)
000000  4601              MOV      r1,r0
;;;190    {
;;;191        return DACx->DAT0.H[0];
000002  8c08              LDRH     r0,[r1,#0x20]
;;;192    }
000004  4770              BX       lr
;;;193    
                          ENDP


                          AREA ||i.DAC_GetOutput||, CODE, READONLY, ALIGN=1

                  DAC_GetOutput PROC
;;;223     */
;;;224    uint16_t DAC_GetOutput(DAC_Struct* DACx)
000000  4601              MOV      r1,r0
;;;225    {
;;;226        return DACx->DOR0.H[0];
000002  8d08              LDRH     r0,[r1,#0x28]
;;;227    }
000004  4770              BX       lr
;;;228    
                          ENDP


                          AREA ||i.DAC_GetSingleFlagStatus||, CODE, READONLY, ALIGN=1

                  DAC_GetSingleFlagStatus PROC
;;;415     */
;;;416    DRV_Return DAC_GetSingleFlagStatus(DAC_Struct* DACx, uint32_t DAC_ITSrc)
000000  4602              MOV      r2,r0
;;;417    {
;;;418        if (DACx->STA.W & DAC_ITSrc)
000002  6810              LDR      r0,[r2,#0]
000004  4008              ANDS     r0,r0,r1
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L12.14|
;;;419            return DRV_Happened;
00000a  2001              MOVS     r0,#1
                  |L12.12|
;;;420        else 
;;;421            return DRV_UnHappened;
;;;422        
;;;423    }
00000c  4770              BX       lr
                  |L12.14|
00000e  2000              MOVS     r0,#0                 ;421
000010  e7fc              B        |L12.12|
;;;424    
                          ENDP


                          AREA ||i.DAC_ITEA_Cmd||, CODE, READONLY, ALIGN=1

                  DAC_ITEA_Cmd PROC
;;;389     */
;;;390    void DAC_ITEA_Cmd(DAC_Struct* DACx, FunctionalState NewState)
000000  7902              LDRB     r2,[r0,#4]
;;;391    {
;;;392        DACx->INT.MBIT.IEA = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7102              STRB     r2,[r0,#4]
;;;393    }
00000e  4770              BX       lr
;;;394    
                          ENDP


                          AREA ||i.DAC_IT_Config||, CODE, READONLY, ALIGN=1

                  DAC_IT_Config PROC
;;;366     */
;;;367    void DAC_IT_Config(DAC_Struct* DACx, uint32_t DAC_ITSrc, FunctionalState NewState)
000000  2a01              CMP      r2,#1
;;;368    {
;;;369        if (NewState == ENABLE)
000002  d103              BNE      |L14.12|
;;;370            DACx->INT.W |= DAC_ITSrc;
000004  6843              LDR      r3,[r0,#4]
000006  430b              ORRS     r3,r3,r1
000008  6043              STR      r3,[r0,#4]
00000a  e002              B        |L14.18|
                  |L14.12|
;;;371        else
;;;372            DACx->INT.W &= ~DAC_ITSrc;
00000c  6843              LDR      r3,[r0,#4]
00000e  438b              BICS     r3,r3,r1
000010  6043              STR      r3,[r0,#4]
                  |L14.18|
;;;373    }
000012  4770              BX       lr
;;;374    
                          ENDP


                          AREA ||i.DAC_SetDAT0||, CODE, READONLY, ALIGN=1

                  DAC_SetDAT0 PROC
;;;206     */
;;;207    void DAC_SetDAT0(DAC_Struct* DACx,uint16_t dat)
000000  8401              STRH     r1,[r0,#0x20]
;;;208    {
;;;209        DACx->DAT0.H[0] = dat;
;;;210    }
000002  4770              BX       lr
;;;211    
                          ENDP


                          AREA ||i.DAC_TriggerEdge_Select||, CODE, READONLY, ALIGN=1

                  DAC_TriggerEdge_Select PROC
;;;284     */
;;;285    void DAC_TriggerEdge_Select(DAC_Struct* DACx, DAC_TriggerEdgeDef DACEdgeSel)
000000  b510              PUSH     {r4,lr}
;;;286    {
;;;287        DACx->CR0.MBIT.TRG0_SEL = DACEdgeSel;
000002  7c42              LDRB     r2,[r0,#0x11]
000004  2330              MOVS     r3,#0x30
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2430              MOVS     r4,#0x30
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7442              STRB     r2,[r0,#0x11]
;;;288    }
000012  bd10              POP      {r4,pc}
;;;289    ///@}
                          ENDP


                          AREA ||i.DAC_TriggerSource_Select||, CODE, READONLY, ALIGN=1

                  DAC_TriggerSource_Select PROC
;;;261     */
;;;262    void DAC_TriggerSource_Select(DAC_Struct* DACx, DAC_TriggerSourceDef DACTrgSel)
000000  7c42              LDRB     r2,[r0,#0x11]
;;;263    {
;;;264        DACx->CR0.MBIT.START0_SEL = DACTrgSel;
000002  08d2              LSRS     r2,r2,#3
000004  00d2              LSLS     r2,r2,#3
000006  074b              LSLS     r3,r1,#29
000008  0f5b              LSRS     r3,r3,#29
00000a  431a              ORRS     r2,r2,r3
00000c  7442              STRB     r2,[r0,#0x11]
;;;265    }
00000e  4770              BX       lr
;;;266    
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_DAC_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_DAC_DRV_c_4da4a0a9____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_DAC_DRV_c_4da4a0a9____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_DAC_DRV_c_4da4a0a9____REVSH|
#line 496
|__asm___18_MG32x02z_DAC_DRV_c_4da4a0a9____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
