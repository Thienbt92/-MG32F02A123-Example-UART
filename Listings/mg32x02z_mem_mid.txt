; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_mem_mid.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_mem_mid.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_mem_mid.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_MEM_MID.c]
                          THUMB

                          AREA ||i.MID_MEM_ConfigIAPSize||, CODE, READONLY, ALIGN=2

                  MID_MEM_ConfigIAPSize PROC
;;;432     */
;;;433    MID_StatusTypeDef MID_MEM_ConfigIAPSize(uint32_t Size)
000000  4601              MOV      r1,r0
;;;434    {
;;;435        uint32_t lTemp = MEM->IAPSZ.W;
000002  204d              MOVS     r0,#0x4d
000004  0600              LSLS     r0,r0,#24
000006  6a82              LDR      r2,[r0,#0x28]
;;;436    
;;;437        /* Check IAP_Size_Lock */
;;;438        if(MEM->CR0.MBIT.IAP_AEN == 0)
000008  7c80              LDRB     r0,[r0,#0x12]
00000a  0680              LSLS     r0,r0,#26
00000c  0fc0              LSRS     r0,r0,#31
00000e  2800              CMP      r0,#0
000010  d101              BNE      |L1.22|
;;;439            return MID_ERROR;
000012  2001              MOVS     r0,#1
                  |L1.20|
;;;440    
;;;441        /* Check Config Size Alignment Page Size */
;;;442        if((Size & MEM_FLASH_PAGE_SIZE) != 0)
;;;443            return MID_ERROR;
;;;444    
;;;445        /* MEM Register Write UnProtect*/
;;;446        __MID_MEM_UNPROTECT();
;;;447    
;;;448        /* Write IAP Size*/
;;;449        MEM->IAPSZ.W = Size >> 2;
;;;450    
;;;451        /* MEM Register Write Protect*/
;;;452        __MID_MEM_PROTECT();
;;;453    
;;;454        // check IAP Space is Over Device Flash Size?
;;;455        if(__MID_MEM_GET_FLAG(MEM_FLAG_IAPSE) != 0)
;;;456        {
;;;457            /* MEM Register Write UnProtect*/
;;;458            __MID_MEM_UNPROTECT();
;;;459    
;;;460            /* Restore IAP Original Config */
;;;461            MEM->IAPSZ.W = lTemp;
;;;462    
;;;463            /* MEM Register Write Protect*/
;;;464            __MID_MEM_PROTECT();
;;;465            return MID_ERROR;
;;;466        }
;;;467        else
;;;468            return MID_OK;
;;;469    }
000014  4770              BX       lr
                  |L1.22|
000016  0588              LSLS     r0,r1,#22             ;442
000018  0d80              LSRS     r0,r0,#22             ;442
00001a  2800              CMP      r0,#0                 ;442
00001c  d001              BEQ      |L1.34|
00001e  2001              MOVS     r0,#1                 ;443
000020  e7f8              B        |L1.20|
                  |L1.34|
000022  480d              LDR      r0,|L1.88|
000024  234d              MOVS     r3,#0x4d              ;446
000026  061b              LSLS     r3,r3,#24             ;446
000028  8198              STRH     r0,[r3,#0xc]          ;446
00002a  0888              LSRS     r0,r1,#2              ;449
00002c  6298              STR      r0,[r3,#0x28]         ;449
00002e  2000              MOVS     r0,#0                 ;452
000030  8198              STRH     r0,[r3,#0xc]          ;452
000032  4618              MOV      r0,r3                 ;455
000034  6800              LDR      r0,[r0,#0]            ;455
000036  2301              MOVS     r3,#1                 ;455
000038  041b              LSLS     r3,r3,#16             ;455
00003a  4018              ANDS     r0,r0,r3              ;455
00003c  2800              CMP      r0,#0                 ;455
00003e  d009              BEQ      |L1.84|
000040  4805              LDR      r0,|L1.88|
000042  234d              MOVS     r3,#0x4d              ;458
000044  061b              LSLS     r3,r3,#24             ;458
000046  8198              STRH     r0,[r3,#0xc]          ;458
000048  4618              MOV      r0,r3                 ;461
00004a  6282              STR      r2,[r0,#0x28]         ;461
00004c  2000              MOVS     r0,#0                 ;464
00004e  8198              STRH     r0,[r3,#0xc]          ;464
000050  2001              MOVS     r0,#1                 ;465
000052  e7df              B        |L1.20|
                  |L1.84|
000054  2000              MOVS     r0,#0                 ;468
000056  e7dd              B        |L1.20|
;;;470    
                          ENDP

                  |L1.88|
                          DCD      0x0000a217

                          AREA ||i.MID_MEM_FlashPageErase||, CODE, READONLY, ALIGN=2

                  MID_MEM_FlashPageErase PROC
;;;247     */
;;;248    MID_StatusTypeDef MID_MEM_FlashPageErase(uint32_t PageAddress)
000000  b570              PUSH     {r4-r6,lr}
;;;249    {
000002  4604              MOV      r4,r0
;;;250        MID_StatusTypeDef status = MID_ERROR;
000004  2501              MOVS     r5,#1
;;;251    
;;;252        /* Check the parameters */
;;;253        assert_param(IS_MEM_PROGRAM_ADDRESS(Address));
;;;254    
;;;255        /* Process Locked */
;;;256        __MID_LOCK(&mMEM);
000006  bf00              NOP      
000008  482f              LDR      r0,|L2.200|
00000a  7800              LDRB     r0,[r0,#0]  ; mMEM
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L2.20|
000010  2002              MOVS     r0,#2
                  |L2.18|
;;;257    
;;;258        /* Clean the error context */
;;;259        mMEM.ErrorCode = MEM_ERROR_NONE;
;;;260    
;;;261        /* Check IHRCO is Enable */
;;;262        if(MID_CSC_GetCK_IHRCOFreq() == 0)
;;;263            return MID_ERROR;
;;;264    
;;;265        /* Check Program on Page Address */
;;;266      #if defined(MG32_1ST) || defined(MG32_2ND)
;;;267        if((PageAddress & 0x000003FF) != 0)
;;;268            return MID_ERROR;
;;;269      #elif defined(MG32_3RD)
;;;270        if((PageAddress & 0x000001FF) != 0)
;;;271            return MID_ERROR;
;;;272      #endif
;;;273    
;;;274        /* Wait for last operation to be completed */
;;;275        status = MID_MEM_WaitForLastOperation(MEM_TIMEOUT_VALUE);
;;;276    
;;;277        if(status == MID_OK)
;;;278        {
;;;279            /* MEM Register Write UnProtect*/
;;;280            __MID_MEM_UNPROTECT();
;;;281    
;;;282            /* MEM Flash Write Enable */
;;;283            __MID_MEM_ENABLE();
;;;284    
;;;285            /* MEM Flash Write Access Space Enable */
;;;286            __MID_MEM_ACCESS_ENABLE(MEM_ACCESS_IAP_WRITE | MEM_ACCESS_AP_WRITE | MEM_ACCESS_ISPD_WRITE);
;;;287    
;;;288            /* MEM Flash Write Mode Config */
;;;289            __MID_MEM_SET_WRITE_MODE(MEM_WRITE_MODE_PAGEERASE);
;;;290    
;;;291            /* MEM Flash Write Sequence Key Single or Multiple*/
;;;292            __MID_MEM_SET_SINGLE_WRITE_SEQUENCE();
;;;293    
;;;294            /* Mem Flag Clear */
;;;295            __MID_MEM_CLEAR_FLAG(MEM_FLAG_EOP | MEM_FLAG_WRE);
;;;296            __ISB();
;;;297    
;;;298            /* MEM Flash Access Page Erase */
;;;299            *(uint32_t *)PageAddress = 0xFFFFFFFF;
;;;300    
;;;301            /* MEM Register Write UnProtect*/
;;;302            __MID_MEM_UNPROTECT();
;;;303    
;;;304            /* MEM Flash Write Mode Config */
;;;305            __MID_MEM_SET_WRITE_MODE(MEM_WRITE_MODE_STANBY);
;;;306    
;;;307            /* MEM Flash Write Access Space Disable */
;;;308            __MID_MEM_ACCESS_DISABLE(MEM_ACCESS_IAP_WRITE | MEM_ACCESS_AP_WRITE | MEM_ACCESS_ISPD_WRITE);
;;;309    
;;;310            /* Wait for last operation to be completed */
;;;311            status = MID_MEM_WaitForLastOperation(MEM_TIMEOUT_VALUE);
;;;312    
;;;313            /* If the program operation is completed, disable the PG Bit */
;;;314            __MID_MEM_DISABLE();
;;;315    
;;;316            /* MEM Register Write Protect*/
;;;317            __MID_MEM_PROTECT();
;;;318        }
;;;319    
;;;320        /* Process Unlocked */
;;;321        __MID_UNLOCK(&mMEM);
;;;322    
;;;323        return status;
;;;324    }
000012  bd70              POP      {r4-r6,pc}
                  |L2.20|
000014  2001              MOVS     r0,#1                 ;256
000016  492c              LDR      r1,|L2.200|
000018  7008              STRB     r0,[r1,#0]            ;256
00001a  bf00              NOP                            ;256
00001c  2000              MOVS     r0,#0                 ;259
00001e  6048              STR      r0,[r1,#4]            ;259  ; mMEM
000020  f7fffffe          BL       MID_CSC_GetCK_IHRCOFreq
000024  2800              CMP      r0,#0                 ;262
000026  d101              BNE      |L2.44|
000028  2001              MOVS     r0,#1                 ;263
00002a  e7f2              B        |L2.18|
                  |L2.44|
00002c  05a0              LSLS     r0,r4,#22             ;267
00002e  0d80              LSRS     r0,r0,#22             ;267
000030  2800              CMP      r0,#0                 ;267
000032  d001              BEQ      |L2.56|
000034  2001              MOVS     r0,#1                 ;268
000036  e7ec              B        |L2.18|
                  |L2.56|
000038  4824              LDR      r0,|L2.204|
00003a  f7fffffe          BL       MID_MEM_WaitForLastOperation
00003e  4605              MOV      r5,r0                 ;275
000040  2d00              CMP      r5,#0                 ;277
000042  d13a              BNE      |L2.186|
000044  4822              LDR      r0,|L2.208|
000046  214d              MOVS     r1,#0x4d              ;280
000048  0609              LSLS     r1,r1,#24             ;280
00004a  8188              STRH     r0,[r1,#0xc]          ;280
00004c  2001              MOVS     r0,#1                 ;283
00004e  7408              STRB     r0,[r1,#0x10]         ;283
000050  4608              MOV      r0,r1                 ;286
000052  6940              LDR      r0,[r0,#0x14]         ;286
000054  2107              MOVS     r1,#7                 ;286
000056  4308              ORRS     r0,r0,r1              ;286
000058  214d              MOVS     r1,#0x4d              ;286
00005a  0609              LSLS     r1,r1,#24             ;286
00005c  6148              STR      r0,[r1,#0x14]         ;286
00005e  4608              MOV      r0,r1                 ;289
000060  7c00              LDRB     r0,[r0,#0x10]         ;289
000062  21f0              MOVS     r1,#0xf0              ;289
000064  4388              BICS     r0,r0,r1              ;289
000066  3020              ADDS     r0,r0,#0x20           ;289
000068  214d              MOVS     r1,#0x4d              ;289
00006a  0609              LSLS     r1,r1,#24             ;289
00006c  7408              STRB     r0,[r1,#0x10]         ;289
00006e  2046              MOVS     r0,#0x46              ;292
000070  7708              STRB     r0,[r1,#0x1c]         ;292
000072  20b9              MOVS     r0,#0xb9              ;292
000074  7708              STRB     r0,[r1,#0x1c]         ;292
000076  2022              MOVS     r0,#0x22              ;295
000078  6008              STR      r0,[r1,#0]            ;295
00007a  f3bf8f6f          ISB                            ;296
00007e  1e68              SUBS     r0,r5,#1              ;299
000080  6020              STR      r0,[r4,#0]            ;299
000082  4813              LDR      r0,|L2.208|
000084  8188              STRH     r0,[r1,#0xc]          ;302
000086  4608              MOV      r0,r1                 ;305
000088  7c00              LDRB     r0,[r0,#0x10]         ;305
00008a  21f0              MOVS     r1,#0xf0              ;305
00008c  4388              BICS     r0,r0,r1              ;305
00008e  214d              MOVS     r1,#0x4d              ;305
000090  0609              LSLS     r1,r1,#24             ;305
000092  7408              STRB     r0,[r1,#0x10]         ;305
000094  4608              MOV      r0,r1                 ;308
000096  6940              LDR      r0,[r0,#0x14]         ;308
000098  08c0              LSRS     r0,r0,#3              ;308
00009a  00c0              LSLS     r0,r0,#3              ;308
00009c  6148              STR      r0,[r1,#0x14]         ;308
00009e  480b              LDR      r0,|L2.204|
0000a0  f7fffffe          BL       MID_MEM_WaitForLastOperation
0000a4  4605              MOV      r5,r0                 ;311
0000a6  204d              MOVS     r0,#0x4d              ;314
0000a8  0600              LSLS     r0,r0,#24             ;314
0000aa  7c00              LDRB     r0,[r0,#0x10]         ;314
0000ac  0840              LSRS     r0,r0,#1              ;314
0000ae  0040              LSLS     r0,r0,#1              ;314
0000b0  214d              MOVS     r1,#0x4d              ;314
0000b2  0609              LSLS     r1,r1,#24             ;314
0000b4  7408              STRB     r0,[r1,#0x10]         ;314
0000b6  2000              MOVS     r0,#0                 ;317
0000b8  8188              STRH     r0,[r1,#0xc]          ;317
                  |L2.186|
0000ba  bf00              NOP                            ;321
0000bc  2000              MOVS     r0,#0                 ;321
0000be  4902              LDR      r1,|L2.200|
0000c0  7008              STRB     r0,[r1,#0]            ;321
0000c2  bf00              NOP                            ;321
0000c4  4628              MOV      r0,r5                 ;323
0000c6  e7a4              B        |L2.18|
;;;325    
                          ENDP

                  |L2.200|
                          DCD      mMEM
                  |L2.204|
                          DCD      0x0000c350
                  |L2.208|
                          DCD      0x0000a217

                          AREA ||i.MID_MEM_FlashProgram||, CODE, READONLY, ALIGN=2

                  MID_MEM_FlashProgram PROC
;;;155      */
;;;156    MID_StatusTypeDef MID_MEM_FlashProgram(uint32_t Address, uint32_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;157    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;158        MID_StatusTypeDef status = MID_OK;
000006  2600              MOVS     r6,#0
;;;159    
;;;160        /* Process Locked */
;;;161        __MID_LOCK(&mMEM);
000008  bf00              NOP      
00000a  4831              LDR      r0,|L3.208|
00000c  7800              LDRB     r0,[r0,#0]  ; mMEM
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L3.22|
000012  2002              MOVS     r0,#2
                  |L3.20|
;;;162    
;;;163        /* Check the parameters */
;;;164        assert_param(IS_MEM_PROGRAM_ADDRESS(Address));
;;;165    
;;;166        /* Check IHRCO is Enable */
;;;167        if(MID_CSC_GetCK_IHRCOFreq() == 0)
;;;168        {
;;;169            mMEM.ErrorCode |= MEM_ERROR_IHRCO;
;;;170            return MID_ERROR;
;;;171        }
;;;172    
;;;173        /* Check Program on Word Address */
;;;174        if((Address & 0x00000003) != 0)
;;;175            return MID_ERROR;
;;;176    
;;;177        /* Wait for last operation to be completed */
;;;178        status = MID_MEM_WaitForLastOperation(MEM_TIMEOUT_VALUE);
;;;179    
;;;180        if(status == MID_OK)
;;;181        {
;;;182            /* MEM Register Write UnProtect*/
;;;183            __MID_MEM_UNPROTECT();
;;;184    
;;;185            /* MEM Flash Write Enable */
;;;186            __MID_MEM_ENABLE();
;;;187    
;;;188            /* MEM Flash Write Access Space Enable */
;;;189            __MID_MEM_ACCESS_ENABLE(MEM_ACCESS_IAP_WRITE | MEM_ACCESS_AP_WRITE | MEM_ACCESS_ISPD_WRITE);
;;;190    
;;;191            /* MEM Flash Write Mode Config */
;;;192            __MID_MEM_SET_WRITE_MODE(MEM_WRITE_MODE_PROGRAM);
;;;193    
;;;194            /* MEM Flash Write Sequence Key Single or Multiple*/
;;;195            __MID_MEM_SET_SINGLE_WRITE_SEQUENCE();
;;;196    
;;;197            // Mem Flag Clear.
;;;198            __MID_MEM_CLEAR_FLAG(MEM_FLAG_EOP | MEM_FLAG_WRE);
;;;199            __ISB();
;;;200    
;;;201            *(uint32_t *)Address = Data;
;;;202    
;;;203            /* MEM Register Write Protect*/
;;;204            __MID_MEM_UNPROTECT();
;;;205    
;;;206            /* MEM Flash Write Mode Config */
;;;207            __MID_MEM_SET_WRITE_MODE(MEM_WRITE_MODE_STANBY);
;;;208    
;;;209            /* MEM Flash Write Access Space Disable */
;;;210            __MID_MEM_ACCESS_DISABLE(MEM_ACCESS_IAP_WRITE | MEM_ACCESS_AP_WRITE | MEM_ACCESS_ISPD_WRITE);
;;;211    
;;;212            /* Wait for last operation to be completed */
;;;213            status = MID_MEM_WaitForLastOperation(MEM_TIMEOUT_VALUE);
;;;214    
;;;215            /* If the program operation is completed, disable the PG Bit */
;;;216            __MID_MEM_DISABLE();
;;;217    
;;;218            /* MEM Register Write Protect*/
;;;219            __MID_MEM_PROTECT();
;;;220        }
;;;221    
;;;222        /* Process Unlocked */
;;;223        __MID_UNLOCK(&mMEM);
;;;224    
;;;225        return status;
;;;226    }
000014  bd70              POP      {r4-r6,pc}
                  |L3.22|
000016  2001              MOVS     r0,#1                 ;161
000018  492d              LDR      r1,|L3.208|
00001a  7008              STRB     r0,[r1,#0]            ;161
00001c  bf00              NOP                            ;161
00001e  f7fffffe          BL       MID_CSC_GetCK_IHRCOFreq
000022  2800              CMP      r0,#0                 ;167
000024  d107              BNE      |L3.54|
000026  482a              LDR      r0,|L3.208|
000028  6840              LDR      r0,[r0,#4]            ;169  ; mMEM
00002a  2108              MOVS     r1,#8                 ;169
00002c  4308              ORRS     r0,r0,r1              ;169
00002e  4928              LDR      r1,|L3.208|
000030  6048              STR      r0,[r1,#4]            ;169  ; mMEM
000032  2001              MOVS     r0,#1                 ;170
000034  e7ee              B        |L3.20|
                  |L3.54|
000036  07a0              LSLS     r0,r4,#30             ;174
000038  0f80              LSRS     r0,r0,#30             ;174
00003a  2800              CMP      r0,#0                 ;174
00003c  d001              BEQ      |L3.66|
00003e  2001              MOVS     r0,#1                 ;175
000040  e7e8              B        |L3.20|
                  |L3.66|
000042  4824              LDR      r0,|L3.212|
000044  f7fffffe          BL       MID_MEM_WaitForLastOperation
000048  4606              MOV      r6,r0                 ;178
00004a  2e00              CMP      r6,#0                 ;180
00004c  d139              BNE      |L3.194|
00004e  4822              LDR      r0,|L3.216|
000050  214d              MOVS     r1,#0x4d              ;183
000052  0609              LSLS     r1,r1,#24             ;183
000054  8188              STRH     r0,[r1,#0xc]          ;183
000056  2001              MOVS     r0,#1                 ;186
000058  7408              STRB     r0,[r1,#0x10]         ;186
00005a  4608              MOV      r0,r1                 ;189
00005c  6940              LDR      r0,[r0,#0x14]         ;189
00005e  2107              MOVS     r1,#7                 ;189
000060  4308              ORRS     r0,r0,r1              ;189
000062  214d              MOVS     r1,#0x4d              ;189
000064  0609              LSLS     r1,r1,#24             ;189
000066  6148              STR      r0,[r1,#0x14]         ;189
000068  4608              MOV      r0,r1                 ;192
00006a  7c00              LDRB     r0,[r0,#0x10]         ;192
00006c  21f0              MOVS     r1,#0xf0              ;192
00006e  4388              BICS     r0,r0,r1              ;192
000070  3010              ADDS     r0,r0,#0x10           ;192
000072  214d              MOVS     r1,#0x4d              ;192
000074  0609              LSLS     r1,r1,#24             ;192
000076  7408              STRB     r0,[r1,#0x10]         ;192
000078  2046              MOVS     r0,#0x46              ;195
00007a  7708              STRB     r0,[r1,#0x1c]         ;195
00007c  20b9              MOVS     r0,#0xb9              ;195
00007e  7708              STRB     r0,[r1,#0x1c]         ;195
000080  2022              MOVS     r0,#0x22              ;198
000082  6008              STR      r0,[r1,#0]            ;198
000084  f3bf8f6f          ISB                            ;199
000088  6025              STR      r5,[r4,#0]            ;201
00008a  4813              LDR      r0,|L3.216|
00008c  8188              STRH     r0,[r1,#0xc]          ;204
00008e  4608              MOV      r0,r1                 ;207
000090  7c00              LDRB     r0,[r0,#0x10]         ;207
000092  21f0              MOVS     r1,#0xf0              ;207
000094  4388              BICS     r0,r0,r1              ;207
000096  214d              MOVS     r1,#0x4d              ;207
000098  0609              LSLS     r1,r1,#24             ;207
00009a  7408              STRB     r0,[r1,#0x10]         ;207
00009c  4608              MOV      r0,r1                 ;210
00009e  6940              LDR      r0,[r0,#0x14]         ;210
0000a0  08c0              LSRS     r0,r0,#3              ;210
0000a2  00c0              LSLS     r0,r0,#3              ;210
0000a4  6148              STR      r0,[r1,#0x14]         ;210
0000a6  480b              LDR      r0,|L3.212|
0000a8  f7fffffe          BL       MID_MEM_WaitForLastOperation
0000ac  4606              MOV      r6,r0                 ;213
0000ae  204d              MOVS     r0,#0x4d              ;216
0000b0  0600              LSLS     r0,r0,#24             ;216
0000b2  7c00              LDRB     r0,[r0,#0x10]         ;216
0000b4  0840              LSRS     r0,r0,#1              ;216
0000b6  0040              LSLS     r0,r0,#1              ;216
0000b8  214d              MOVS     r1,#0x4d              ;216
0000ba  0609              LSLS     r1,r1,#24             ;216
0000bc  7408              STRB     r0,[r1,#0x10]         ;216
0000be  2000              MOVS     r0,#0                 ;219
0000c0  8188              STRH     r0,[r1,#0xc]          ;219
                  |L3.194|
0000c2  bf00              NOP                            ;223
0000c4  2000              MOVS     r0,#0                 ;223
0000c6  4902              LDR      r1,|L3.208|
0000c8  7008              STRB     r0,[r1,#0]            ;223
0000ca  bf00              NOP                            ;223
0000cc  4630              MOV      r0,r6                 ;225
0000ce  e7a1              B        |L3.20|
;;;227    
                          ENDP

                  |L3.208|
                          DCD      mMEM
                  |L3.212|
                          DCD      0x0000c350
                  |L3.216|
                          DCD      0x0000a217

                          AREA ||i.MID_MEM_GetError||, CODE, READONLY, ALIGN=2

                  MID_MEM_GetError PROC
;;;797     */
;;;798    uint32_t MID_MEM_GetError(void)
000000  4801              LDR      r0,|L4.8|
;;;799    {
;;;800       return mMEM.ErrorCode;
000002  6840              LDR      r0,[r0,#4]  ; mMEM
;;;801    }
000004  4770              BX       lr
;;;802    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      mMEM

                          AREA ||i.MID_MEM_GetIAPExecuteState||, CODE, READONLY, ALIGN=1

                  MID_MEM_GetIAPExecuteState PROC
;;;594     */
;;;595    FunctionalState MID_MEM_GetIAPExecuteState(void)
000000  204d              MOVS     r0,#0x4d
;;;596    {
;;;597        if(MEM->CR1.MBIT.IAP_EXEC == 0)
000002  0600              LSLS     r0,r0,#24
000004  7d00              LDRB     r0,[r0,#0x14]
000006  06c0              LSLS     r0,r0,#27
000008  0fc0              LSRS     r0,r0,#31
00000a  2800              CMP      r0,#0
00000c  d101              BNE      |L5.18|
;;;598            return ENABLE;
00000e  2001              MOVS     r0,#1
                  |L5.16|
;;;599        else
;;;600            return DISABLE;
;;;601    }
000010  4770              BX       lr
                  |L5.18|
000012  2000              MOVS     r0,#0                 ;600
000014  e7fc              B        |L5.16|
;;;602    
                          ENDP


                          AREA ||i.MID_MEM_GetIAPSizeLockState||, CODE, READONLY, ALIGN=1

                  MID_MEM_GetIAPSizeLockState PROC
;;;530     */
;;;531    FunctionalState MID_MEM_GetIAPSizeLockState(void)
000000  204d              MOVS     r0,#0x4d
;;;532    {
;;;533        if(MEM->CR0.MBIT.IAP_AEN == 0)
000002  0600              LSLS     r0,r0,#24
000004  7c80              LDRB     r0,[r0,#0x12]
000006  0680              LSLS     r0,r0,#26
000008  0fc0              LSRS     r0,r0,#31
00000a  2800              CMP      r0,#0
00000c  d101              BNE      |L6.18|
;;;534            return ENABLE;
00000e  2001              MOVS     r0,#1
                  |L6.16|
;;;535        else
;;;536            return DISABLE;
;;;537    }
000010  4770              BX       lr
                  |L6.18|
000012  2000              MOVS     r0,#0                 ;536
000014  e7fc              B        |L6.16|
;;;538    
                          ENDP


                          AREA ||i.MID_MEM_IAPExecuteDisable||, CODE, READONLY, ALIGN=2

                  MID_MEM_IAPExecuteDisable PROC
;;;558     */
;;;559    MID_StatusTypeDef MID_MEM_IAPExecuteDisable(void)
000000  4806              LDR      r0,|L7.28|
;;;560    {
;;;561        /* MEM Register Write UnProtect*/
;;;562        __MID_MEM_UNPROTECT();
000002  214d              MOVS     r1,#0x4d
000004  0609              LSLS     r1,r1,#24
000006  8188              STRH     r0,[r1,#0xc]
;;;563    
;;;564        /* MEM Disable IAP Execute Code Function */
;;;565        MEM->CR1.MBIT.IAP_EXEC = 0;
000008  4608              MOV      r0,r1
00000a  7d00              LDRB     r0,[r0,#0x14]
00000c  2110              MOVS     r1,#0x10
00000e  4388              BICS     r0,r0,r1
000010  214d              MOVS     r1,#0x4d
000012  0609              LSLS     r1,r1,#24
000014  7508              STRB     r0,[r1,#0x14]
;;;566    
;;;567        /* MEM Register Write Protect*/
;;;568        __MID_MEM_PROTECT();
000016  2000              MOVS     r0,#0
000018  8188              STRH     r0,[r1,#0xc]
;;;569    
;;;570        return MID_OK;
;;;571    }
00001a  4770              BX       lr
;;;572    
                          ENDP

                  |L7.28|
                          DCD      0x0000a217

                          AREA ||i.MID_MEM_IAPSizeLock||, CODE, READONLY, ALIGN=2

                  MID_MEM_IAPSizeLock PROC
;;;492     */
;;;493    MID_StatusTypeDef MID_MEM_IAPSizeLock(void)
000000  4806              LDR      r0,|L8.28|
;;;494    {
;;;495        /* MEM Register Write UnProtect*/
;;;496        __MID_MEM_UNPROTECT();
000002  214d              MOVS     r1,#0x4d
000004  0609              LSLS     r1,r1,#24
000006  8188              STRH     r0,[r1,#0xc]
;;;497    
;;;498        /* MEM Disable IAP Size Config Function */
;;;499        MEM->CR0.MBIT.IAP_AEN = 0;
000008  4608              MOV      r0,r1
00000a  7c80              LDRB     r0,[r0,#0x12]
00000c  2120              MOVS     r1,#0x20
00000e  4388              BICS     r0,r0,r1
000010  214d              MOVS     r1,#0x4d
000012  0609              LSLS     r1,r1,#24
000014  7488              STRB     r0,[r1,#0x12]
;;;500    
;;;501        /* MEM Register Write Protect*/
;;;502        __MID_MEM_PROTECT();
000016  2000              MOVS     r0,#0
000018  8188              STRH     r0,[r1,#0xc]
;;;503    
;;;504        return MID_OK;
;;;505    }
00001a  4770              BX       lr
;;;506    
                          ENDP

                  |L8.28|
                          DCD      0x0000a217

                          AREA ||i.MID_MEM_IRQHandler||, CODE, READONLY, ALIGN=1

                  MID_MEM_IRQHandler PROC
;;;743     */
;;;744    void MID_MEM_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;745    {
;;;746        MID_MEM_ITHandlerCallback();
000002  f7fffffe          BL       MID_MEM_ITHandlerCallback
;;;747    }
000006  bd10              POP      {r4,pc}
;;;748    
                          ENDP


                          AREA ||i.MID_MEM_ITHandlerCallback||, CODE, READONLY, ALIGN=1

                  MID_MEM_ITHandlerCallback PROC
;;;754     */
;;;755    __weak void MID_MEM_ITHandlerCallback(void)
000000  4770              BX       lr
;;;756    {
;;;757      /* NOTE : This function should not be modified, when the callback is needed,
;;;758                the MID_MEM_InterruptHandlerCallback could be implemented in the user file
;;;759       */
;;;760    }
;;;761    
                          ENDP


                          AREA ||i.MID_MEM_Lock||, CODE, READONLY, ALIGN=1

                  MID_MEM_Lock PROC
;;;394     */
;;;395    MID_StatusTypeDef MID_MEM_Lock(void)
000000  2000              MOVS     r0,#0
;;;396    {
;;;397        /* Set the LOCK Bit to lock the MEM Registers access */
;;;398        MEM->KEY.H[0] = 0x0000U;
000002  214d              MOVS     r1,#0x4d
000004  0609              LSLS     r1,r1,#24
000006  8188              STRH     r0,[r1,#0xc]
;;;399        return MID_OK;
;;;400    }
000008  4770              BX       lr
;;;401    
                          ENDP


                          AREA ||i.MID_MEM_Unlock||, CODE, READONLY, ALIGN=2

                  MID_MEM_Unlock PROC
;;;360     */
;;;361    MID_StatusTypeDef MID_MEM_Unlock(void)
000000  2000              MOVS     r0,#0
;;;362    {
;;;363        MID_StatusTypeDef status = MID_OK;
;;;364    
;;;365        if(MEM->KEY.H[0] != 0)
000002  214d              MOVS     r1,#0x4d
000004  0609              LSLS     r1,r1,#24
000006  8989              LDRH     r1,[r1,#0xc]
000008  2900              CMP      r1,#0
00000a  d008              BEQ      |L12.30|
;;;366        {
;;;367            /* Authorize the MEM Registers access */
;;;368            MEM->KEY.H[0] = 0xA217;
00000c  4904              LDR      r1,|L12.32|
00000e  224d              MOVS     r2,#0x4d
000010  0612              LSLS     r2,r2,#24
000012  8191              STRH     r1,[r2,#0xc]
;;;369    
;;;370            /* Verify Flash is unlocked */
;;;371            if(MEM->KEY.H[0] != 0)
000014  4611              MOV      r1,r2
000016  8989              LDRH     r1,[r1,#0xc]
000018  2900              CMP      r1,#0
00001a  d000              BEQ      |L12.30|
;;;372            {
;;;373                status = MID_ERROR;
00001c  2001              MOVS     r0,#1
                  |L12.30|
;;;374            }
;;;375        }
;;;376        return status;
;;;377    }
00001e  4770              BX       lr
;;;378    
                          ENDP

                  |L12.32|
                          DCD      0x0000a217

                          AREA ||i.MID_MEM_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  MID_MEM_WaitForLastOperation PROC
;;;829     */
;;;830    MID_StatusTypeDef MID_MEM_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;831    {
000002  4604              MOV      r4,r0
;;;832      /* Wait for the MEM operation to complete by polling on BUSY flag to be reset.
;;;833         Even if the MEM operation fails, the BUSY flag will be reset and an error
;;;834         flag will be set */
;;;835    
;;;836        uint32_t tickstart = MID_GetTick();
000004  f7fffffe          BL       MID_GetTick
000008  4605              MOV      r5,r0
;;;837    
;;;838        while(__MID_MEM_GET_FLAG(MEM_FLAG_BUSY)) 
00000a  e00b              B        |L13.36|
                  |L13.12|
;;;839        { 
;;;840            if (Timeout != MID_MAX_DELAY)
00000c  1c60              ADDS     r0,r4,#1
00000e  2800              CMP      r0,#0
000010  d008              BEQ      |L13.36|
;;;841            {
;;;842                if((Timeout == 0U) || ((MID_GetTick() - tickstart) > Timeout))
000012  2c00              CMP      r4,#0
000014  d004              BEQ      |L13.32|
000016  f7fffffe          BL       MID_GetTick
00001a  1b40              SUBS     r0,r0,r5
00001c  42a0              CMP      r0,r4
00001e  d901              BLS      |L13.36|
                  |L13.32|
;;;843                {
;;;844                    return MID_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L13.34|
;;;845                }
;;;846            }
;;;847        }
;;;848    
;;;849        /* Check MEM End of Operation flag  */
;;;850        if (__MID_MEM_GET_FLAG(MEM_FLAG_EOP) != 0)
;;;851        {
;;;852            /* Clear MEM End of Operation pending bit */
;;;853            __MID_MEM_CLEAR_FLAG(MEM_FLAG_EOP);
;;;854        }
;;;855    
;;;856        if(__MID_MEM_GET_FLAG(MEM_FLAG_WRE) != 0)
;;;857        {
;;;858            /*Save the error code*/
;;;859            mMEM.ErrorCode |= MEM_ERROR_WR;
;;;860    
;;;861            /* Clear MEM End of Operation pending bit */
;;;862            __MID_MEM_CLEAR_FLAG(MEM_FLAG_WRE);
;;;863            return MID_ERROR;
;;;864        }
;;;865    
;;;866        /* There is no error flag set */
;;;867        return MID_OK;
;;;868    }
000022  bd70              POP      {r4-r6,pc}
                  |L13.36|
000024  204d              MOVS     r0,#0x4d              ;838
000026  0600              LSLS     r0,r0,#24             ;838
000028  6800              LDR      r0,[r0,#0]            ;838
00002a  07c0              LSLS     r0,r0,#31             ;838
00002c  0fc0              LSRS     r0,r0,#31             ;838
00002e  2800              CMP      r0,#0                 ;838
000030  d1ec              BNE      |L13.12|
000032  204d              MOVS     r0,#0x4d              ;850
000034  0600              LSLS     r0,r0,#24             ;850
000036  6800              LDR      r0,[r0,#0]            ;850
000038  2102              MOVS     r1,#2                 ;850
00003a  4008              ANDS     r0,r0,r1              ;850
00003c  2800              CMP      r0,#0                 ;850
00003e  d003              BEQ      |L13.72|
000040  2002              MOVS     r0,#2                 ;853
000042  214d              MOVS     r1,#0x4d              ;853
000044  0609              LSLS     r1,r1,#24             ;853
000046  6008              STR      r0,[r1,#0]            ;853
                  |L13.72|
000048  204d              MOVS     r0,#0x4d              ;856
00004a  0600              LSLS     r0,r0,#24             ;856
00004c  6800              LDR      r0,[r0,#0]            ;856
00004e  2120              MOVS     r1,#0x20              ;856
000050  4008              ANDS     r0,r0,r1              ;856
000052  2800              CMP      r0,#0                 ;856
000054  d00b              BEQ      |L13.110|
000056  4807              LDR      r0,|L13.116|
000058  6840              LDR      r0,[r0,#4]            ;859  ; mMEM
00005a  2102              MOVS     r1,#2                 ;859
00005c  4308              ORRS     r0,r0,r1              ;859
00005e  4905              LDR      r1,|L13.116|
000060  6048              STR      r0,[r1,#4]            ;859  ; mMEM
000062  2020              MOVS     r0,#0x20              ;862
000064  214d              MOVS     r1,#0x4d              ;862
000066  0609              LSLS     r1,r1,#24             ;862
000068  6008              STR      r0,[r1,#0]            ;862
00006a  2001              MOVS     r0,#1                 ;863
00006c  e7d9              B        |L13.34|
                  |L13.110|
00006e  2000              MOVS     r0,#0                 ;867
000070  e7d7              B        |L13.34|
;;;869    
                          ENDP

000072  0000              DCW      0x0000
                  |L13.116|
                          DCD      mMEM

                          AREA ||i.MID_MEM_WarmResettoAP||, CODE, READONLY, ALIGN=2

                  MID_MEM_WarmResettoAP PROC
;;;618     */
;;;619    void MID_MEM_WarmResettoAP(void)
000000  4810              LDR      r0,|L14.68|
;;;620    {
;;;621        /* RST Register Write UnProtect*/
;;;622        RST->KEY.H[0] = 0xA217;         // 20-Byte
000002  2113              MOVS     r1,#0x13
000004  0689              LSLS     r1,r1,#26
000006  8188              STRH     r0,[r1,#0xc]
;;;623    
;;;624        /* SofrWare Cool Reset Disable */
;;;625        RST->CE.W &= ~RST_WE_SW_WE_mask_b0;
000008  4608              MOV      r0,r1
00000a  6940              LDR      r0,[r0,#0x14]
00000c  2102              MOVS     r1,#2
00000e  4388              BICS     r0,r0,r1
000010  2113              MOVS     r1,#0x13
000012  0689              LSLS     r1,r1,#26
000014  6148              STR      r0,[r1,#0x14]
;;;626    
;;;627        /* SofrWare Cool Reset Disable */
;;;628        RST->WE.B[0] |= RST_WE_SW_WE_mask_b0;
000016  4608              MOV      r0,r1
000018  7e00              LDRB     r0,[r0,#0x18]
00001a  2102              MOVS     r1,#2
00001c  4308              ORRS     r0,r0,r1
00001e  2113              MOVS     r1,#0x13
000020  0689              LSLS     r1,r1,#26
000022  7608              STRB     r0,[r1,#0x18]
;;;629    
;;;630        /* RST Register Write Protect*/
;;;631        RST->KEY.H[0] = 0;
000024  2000              MOVS     r0,#0
000026  8188              STRH     r0,[r1,#0xc]
;;;632    
;;;633        /* MEM Register Write UnProtect*/
;;;634        __MID_MEM_UNPROTECT();
000028  4806              LDR      r0,|L14.68|
00002a  214d              MOVS     r1,#0x4d
00002c  0609              LSLS     r1,r1,#24
00002e  8188              STRH     r0,[r1,#0xc]
;;;635    
;;;636        /* Set Boot From AP Flash */
;;;637        MEM->CR0.B[2] = ((MEM->CR0.B[2] & (~MEM_CR0_BOOT_MS_mask_b2)) | MEM_CR0_BOOT_MS_application_flash_b2);
000030  4608              MOV      r0,r1
000032  7c80              LDRB     r0,[r0,#0x12]
000034  0880              LSRS     r0,r0,#2
000036  0080              LSLS     r0,r0,#2
000038  7488              STRB     r0,[r1,#0x12]
;;;638    
;;;639        /* MEM Register Write UnProtect*/
;;;640        __MID_MEM_PROTECT();
00003a  2000              MOVS     r0,#0
00003c  8188              STRH     r0,[r1,#0xc]
;;;641    
;;;642        /* Initiates a system reset request to reset the MCU */
;;;643        __NVIC_SystemReset();
00003e  f7fffffe          BL       __NVIC_SystemReset
;;;644    
;;;645        while(1);
;;;646    }
;;;647    
                          ENDP

000042  0000              DCW      0x0000
                  |L14.68|
                          DCD      0x0000a217

                          AREA ||i.MID_MEM_WarmResettoISP||, CODE, READONLY, ALIGN=2

                  MID_MEM_WarmResettoISP PROC
;;;663     */
;;;664    void MID_MEM_WarmResettoISP(void)
000000  4810              LDR      r0,|L15.68|
;;;665    {
;;;666        /* RST Register Write UnProtect*/
;;;667        RST->KEY.H[0] = 0xA217;         // 20-Byte
000002  2113              MOVS     r1,#0x13
000004  0689              LSLS     r1,r1,#26
000006  8188              STRH     r0,[r1,#0xc]
;;;668    
;;;669        /* SofrWare Cool Reset Disable */
;;;670        RST->CE.W &= ~RST_WE_SW_WE_mask_b0;
000008  4608              MOV      r0,r1
00000a  6940              LDR      r0,[r0,#0x14]
00000c  2102              MOVS     r1,#2
00000e  4388              BICS     r0,r0,r1
000010  2113              MOVS     r1,#0x13
000012  0689              LSLS     r1,r1,#26
000014  6148              STR      r0,[r1,#0x14]
;;;671    
;;;672        /* SofrWare Cool Reset Disable */
;;;673        RST->WE.B[0] |= RST_WE_SW_WE_mask_b0;
000016  4608              MOV      r0,r1
000018  7e00              LDRB     r0,[r0,#0x18]
00001a  2102              MOVS     r1,#2
00001c  4308              ORRS     r0,r0,r1
00001e  2113              MOVS     r1,#0x13
000020  0689              LSLS     r1,r1,#26
000022  7608              STRB     r0,[r1,#0x18]
;;;674    
;;;675        /* RST Register Write Protect*/
;;;676        RST->KEY.H[0] = 0;
000024  2000              MOVS     r0,#0
000026  8188              STRH     r0,[r1,#0xc]
;;;677    
;;;678        /* MEM Register Write UnProtect*/
;;;679        __MID_MEM_UNPROTECT();
000028  4806              LDR      r0,|L15.68|
00002a  214d              MOVS     r1,#0x4d
00002c  0609              LSLS     r1,r1,#24
00002e  8188              STRH     r0,[r1,#0xc]
;;;680    
;;;681        /* Set Boot From ISP Flash */
;;;682        MEM->CR0.B[2] = ((MEM->CR0.B[2] & (~MEM_CR0_BOOT_MS_mask_b2)) | MEM_CR0_BOOT_MS_boot_flash_b2);
000030  4608              MOV      r0,r1
000032  7c80              LDRB     r0,[r0,#0x12]
000034  0880              LSRS     r0,r0,#2
000036  0080              LSLS     r0,r0,#2
000038  1c40              ADDS     r0,r0,#1
00003a  7488              STRB     r0,[r1,#0x12]
;;;683    
;;;684        /* MEM Register Write UnProtect*/
;;;685        __MID_MEM_PROTECT();
00003c  2000              MOVS     r0,#0
00003e  8188              STRH     r0,[r1,#0xc]
;;;686    
;;;687        /* Initiates a system reset request to reset the MCU */
;;;688        __NVIC_SystemReset();
000040  f7fffffe          BL       __NVIC_SystemReset
;;;689    
;;;690        while(1);
;;;691    }
;;;692    
                          ENDP

                  |L15.68|
                          DCD      0x0000a217

                          AREA ||i.MID_MEM_WarmResettoSRAM||, CODE, READONLY, ALIGN=2

                  MID_MEM_WarmResettoSRAM PROC
;;;708     */
;;;709    void MID_MEM_WarmResettoSRAM(void)
000000  4810              LDR      r0,|L16.68|
;;;710    {
;;;711        /* RST Register Write UnProtect*/
;;;712        RST->KEY.H[0] = 0xA217;         // 20-Byte
000002  2113              MOVS     r1,#0x13
000004  0689              LSLS     r1,r1,#26
000006  8188              STRH     r0,[r1,#0xc]
;;;713    
;;;714        /* SofrWare Cool Reset Disable */
;;;715        RST->CE.W &= ~RST_WE_SW_WE_mask_b0;
000008  4608              MOV      r0,r1
00000a  6940              LDR      r0,[r0,#0x14]
00000c  2102              MOVS     r1,#2
00000e  4388              BICS     r0,r0,r1
000010  2113              MOVS     r1,#0x13
000012  0689              LSLS     r1,r1,#26
000014  6148              STR      r0,[r1,#0x14]
;;;716    
;;;717        /* SofrWare Cool Reset Disable */
;;;718        RST->WE.B[0] |= RST_WE_SW_WE_mask_b0;
000016  4608              MOV      r0,r1
000018  7e00              LDRB     r0,[r0,#0x18]
00001a  2102              MOVS     r1,#2
00001c  4308              ORRS     r0,r0,r1
00001e  2113              MOVS     r1,#0x13
000020  0689              LSLS     r1,r1,#26
000022  7608              STRB     r0,[r1,#0x18]
;;;719    
;;;720        /* RST Register Write Protect*/
;;;721        RST->KEY.H[0] = 0;
000024  2000              MOVS     r0,#0
000026  8188              STRH     r0,[r1,#0xc]
;;;722    
;;;723        /* MEM Register Write UnProtect*/
;;;724        __MID_MEM_UNPROTECT();
000028  4806              LDR      r0,|L16.68|
00002a  214d              MOVS     r1,#0x4d
00002c  0609              LSLS     r1,r1,#24
00002e  8188              STRH     r0,[r1,#0xc]
;;;725    
;;;726        /* Set Boot From SRAM Memory */
;;;727        MEM->CR0.B[2] = ((MEM->CR0.B[2] & (~MEM_CR0_BOOT_MS_mask_b2)) | MEM_CR0_BOOT_MS_embedded_sram_b2);
000030  4608              MOV      r0,r1
000032  7c80              LDRB     r0,[r0,#0x12]
000034  0880              LSRS     r0,r0,#2
000036  0080              LSLS     r0,r0,#2
000038  1c80              ADDS     r0,r0,#2
00003a  7488              STRB     r0,[r1,#0x12]
;;;728    
;;;729        /* MEM Register Write UnProtect*/
;;;730        __MID_MEM_PROTECT();
00003c  2000              MOVS     r0,#0
00003e  8188              STRH     r0,[r1,#0xc]
;;;731    
;;;732        /* Initiates a system reset request to reset the MCU */
;;;733        __NVIC_SystemReset();
000040  f7fffffe          BL       __NVIC_SystemReset
;;;734    
;;;735        while(1);
;;;736    }
;;;737    
                          ENDP

                  |L16.68|
                          DCD      0x0000a217

                          AREA ||i.__NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  __NVIC_SystemReset PROC
;;;858     */
;;;859    __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
000000  f3bf8f4f          DSB      
;;;860    {
;;;861      __DSB();                                                          /* Ensure all outstanding memory accesses included
;;;862                                                                           buffered write are completed before reset */
;;;863      SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
000004  4803              LDR      r0,|L17.20|
000006  4904              LDR      r1,|L17.24|
000008  60c8              STR      r0,[r1,#0xc]
;;;864                     SCB_AIRCR_SYSRESETREQ_Msk);
;;;865      __DSB();                                                          /* Ensure completion of memory access */
00000a  f3bf8f4f          DSB      
;;;866    
;;;867      for(;;)                                                           /* wait until reset */
00000e  bf00              NOP      
                  |L17.16|
;;;868      {
;;;869        __NOP();
000010  bf00              NOP      
000012  e7fd              B        |L17.16|
;;;870      }
;;;871    }
;;;872    
                          ENDP

                  |L17.20|
                          DCD      0x05fa0004
                  |L17.24|
                          DCD      0xe000ed00

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CSC_InitConfig
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00010000
                          DCD      0x00000000
                          DCD      0x00000210
                          DCD      0x00000001
                          DCD      0x00000008
                          DCD      0x0000911f
                          DCD      0x000f13ed
                          DCD      0x00008993
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00b71b00
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  mMEM
                          %        8

;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_MEM_MID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_MEM_MID_c_95df9c9b____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_MEM_MID_c_95df9c9b____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_MEM_MID_c_95df9c9b____REVSH|
#line 496
|__asm___18_MG32x02z_MEM_MID_c_95df9c9b____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
