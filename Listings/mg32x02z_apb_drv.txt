; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_apb_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_apb_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_apb_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_APB_DRV.c]
                          THUMB

                          AREA ||i.APB_BreakSourceChannel0_Select||, CODE, READONLY, ALIGN=1

                  APB_BreakSourceChannel0_Select PROC
;;;162     */
;;;163    void APB_BreakSourceChannel0_Select(OBM_Struct* OBMx, BKS0SrcDef BKS0Sel)
000000  7882              LDRB     r2,[r0,#2]
;;;164    {
;;;165        OBMx->OBMx0.MBIT.BKS0 = BKS0Sel;
000002  0912              LSRS     r2,r2,#4
000004  0112              LSLS     r2,r2,#4
000006  070b              LSLS     r3,r1,#28
000008  0f1b              LSRS     r3,r3,#28
00000a  431a              ORRS     r2,r2,r3
00000c  7082              STRB     r2,[r0,#2]
;;;166    }
00000e  4770              BX       lr
;;;167    
                          ENDP


                          AREA ||i.APB_BreakSourceChannel1_Select||, CODE, READONLY, ALIGN=1

                  APB_BreakSourceChannel1_Select PROC
;;;196     */
;;;197    void APB_BreakSourceChannel1_Select(OBM_Struct* OBMx, BKS1SrcDef BKS1Sel)
000000  b510              PUSH     {r4,lr}
;;;198    {
;;;199        OBMx->OBMx0.MBIT.BKS1 = BKS1Sel;
000002  7882              LDRB     r2,[r0,#2]
000004  23f0              MOVS     r3,#0xf0
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  24f0              MOVS     r4,#0xf0
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7082              STRB     r2,[r0,#2]
;;;200    }
000012  bd10              POP      {r4,pc}
;;;201    
                          ENDP


                          AREA ||i.APB_BreakSourceChannel2_Select||, CODE, READONLY, ALIGN=1

                  APB_BreakSourceChannel2_Select PROC
;;;224     */
;;;225    void APB_BreakSourceChannel2_Select(OBM_Struct* OBMx, BKS2SrcDef BKS2Sel)
000000  78c2              LDRB     r2,[r0,#3]
;;;226    {
;;;227        OBMx->OBMx0.MBIT.BKS2 = BKS2Sel;
000002  0912              LSRS     r2,r2,#4
000004  0112              LSLS     r2,r2,#4
000006  070b              LSLS     r3,r1,#28
000008  0f1b              LSRS     r3,r3,#28
00000a  431a              ORRS     r2,r2,r3
00000c  70c2              STRB     r2,[r0,#3]
;;;228    }
00000e  4770              BX       lr
;;;229    /**
                          ENDP


                          AREA ||i.APB_ClearFlag||, CODE, READONLY, ALIGN=1

                  APB_ClearFlag PROC
;;;984     */
;;;985    void APB_ClearFlag(APB_Struct* APBx, uint32_t APB_ITSrc)
000000  6001              STR      r1,[r0,#0]
;;;986    {
;;;987        APBx->STA.W = APB_ITSrc;
;;;988    }
000002  4770              BX       lr
;;;989    
                          ENDP


                          AREA ||i.APB_GetAllFlagStatus||, CODE, READONLY, ALIGN=1

                  APB_GetAllFlagStatus PROC
;;;963     */
;;;964    uint32_t APB_GetAllFlagStatus(APB_Struct* APBx)
000000  4601              MOV      r1,r0
;;;965    {
;;;966        return APBx->STA.W;
000002  6808              LDR      r0,[r1,#0]
;;;967    }
000004  4770              BX       lr
;;;968    
                          ENDP


                          AREA ||i.APB_GetOBMxInitState||, CODE, READONLY, ALIGN=1

                  APB_GetOBMxInitState PROC
;;;484     */
;;;485    DRV_Return APB_GetOBMxInitState(OBM_Struct* OBMx)	
000000  4601              MOV      r1,r0
;;;486    {
;;;487        if (OBMx->OBMx0.MBIT.STA)
000002  7808              LDRB     r0,[r1,#0]
000004  06c0              LSLS     r0,r0,#27
000006  0fc0              LSRS     r0,r0,#31
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L6.16|
;;;488            return DRV_Logic1;
00000c  2001              MOVS     r0,#1
                  |L6.14|
;;;489        else 
;;;490            return DRV_Logic0;
;;;491        
;;;492    }
00000e  4770              BX       lr
                  |L6.16|
000010  2000              MOVS     r0,#0                 ;490
000012  e7fc              B        |L6.14|
;;;493    ///@}
                          ENDP


                          AREA ||i.APB_GetOBMxOutputState||, CODE, READONLY, ALIGN=1

                  APB_GetOBMxOutputState PROC
;;;340     */
;;;341    DRV_Return APB_GetOBMxOutputState(OBM_Struct* OBMx)
000000  4601              MOV      r1,r0
;;;342    {
;;;343    #if defined(MG32_2ND) || defined(MG32_3RD)
;;;344        if (OBMx == OBM0)
;;;345        {
;;;346            if (APB->STA.MBIT.OBM0_OUT)
;;;347                return DRV_Logic1;
;;;348            else 
;;;349                return DRV_Logic0;
;;;350        }
;;;351    #endif    
;;;352        if (APB->STA.MBIT.OBM1_OUT)
000002  205f              MOVS     r0,#0x5f
000004  0600              LSLS     r0,r0,#24
000006  7880              LDRB     r0,[r0,#2]
000008  0780              LSLS     r0,r0,#30
00000a  0fc0              LSRS     r0,r0,#31
00000c  2800              CMP      r0,#0
00000e  d001              BEQ      |L7.20|
;;;353            return DRV_Logic1;
000010  2001              MOVS     r0,#1
                  |L7.18|
;;;354        else 
;;;355            return DRV_Logic0;
;;;356    }
000012  4770              BX       lr
                  |L7.20|
000014  2000              MOVS     r0,#0                 ;355
000016  e7fc              B        |L7.18|
;;;357    
                          ENDP


                          AREA ||i.APB_GetOBMxSwitchState||, CODE, READONLY, ALIGN=1

                  APB_GetOBMxSwitchState PROC
;;;420     */
;;;421    DRV_Return APB_GetOBMxSwitchState(OBM_Struct* OBMx)	
000000  4601              MOV      r1,r0
;;;422    {
;;;423    #if defined(MG32_2ND) || defined(MG32_3RD)
;;;424        if(OBMx == OBM0)
;;;425        {
;;;426            if(APB->STA.MBIT.OBM0_SW)
;;;427                return DRV_Logic1;
;;;428            else 
;;;429                return DRV_Logic0;
;;;430        }
;;;431        
;;;432    #endif    
;;;433        if (APB->STA.MBIT.OBM1_SW)
000002  205f              MOVS     r0,#0x5f
000004  0600              LSLS     r0,r0,#24
000006  78c0              LDRB     r0,[r0,#3]
000008  0780              LSLS     r0,r0,#30
00000a  0fc0              LSRS     r0,r0,#31
00000c  2800              CMP      r0,#0
00000e  d001              BEQ      |L8.20|
;;;434            return DRV_Logic1;
000010  2001              MOVS     r0,#1
                  |L8.18|
;;;435        else 
;;;436            return DRV_Logic0;
;;;437        
;;;438    }
000012  4770              BX       lr
                  |L8.20|
000014  2000              MOVS     r0,#0                 ;436
000016  e7fc              B        |L8.18|
;;;439    
                          ENDP


                          AREA ||i.APB_GetSingleFlagStatus||, CODE, READONLY, ALIGN=1

                  APB_GetSingleFlagStatus PROC
;;;942     */
;;;943    DRV_Return APB_GetSingleFlagStatus(APB_Struct* APBx, uint32_t ITSrc)
000000  4602              MOV      r2,r0
;;;944    {
;;;945        if (APBx->STA.W & ITSrc)
000002  6810              LDR      r0,[r2,#0]
000004  4008              ANDS     r0,r0,r1
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L9.14|
;;;946            return DRV_Happened;
00000a  2001              MOVS     r0,#1
                  |L9.12|
;;;947        else 
;;;948            return DRV_UnHappened;
;;;949        
;;;950    }
00000c  4770              BX       lr
                  |L9.14|
00000e  2000              MOVS     r0,#0                 ;948
000010  e7fc              B        |L9.12|
;;;951    
                          ENDP


                          AREA ||i.APB_IRCLK_Select||, CODE, READONLY, ALIGN=1

                  APB_IRCLK_Select PROC
;;;630     */
;;;631    void APB_IRCLK_Select(IRCLKSrcDef IRCLKSel)
000000  215f              MOVS     r1,#0x5f
;;;632    {
;;;633        APB->CR0.MBIT.IRCLK_MUX = IRCLKSel;
000002  0609              LSLS     r1,r1,#24
000004  7c49              LDRB     r1,[r1,#0x11]
000006  08c9              LSRS     r1,r1,#3
000008  00c9              LSLS     r1,r1,#3
00000a  0742              LSLS     r2,r0,#29
00000c  0f52              LSRS     r2,r2,#29
00000e  4311              ORRS     r1,r1,r2
000010  225f              MOVS     r2,#0x5f
000012  0612              LSLS     r2,r2,#24
000014  7451              STRB     r1,[r2,#0x11]
;;;634    }
000016  4770              BX       lr
;;;635    
                          ENDP


                          AREA ||i.APB_IRDAT_Select||, CODE, READONLY, ALIGN=1

                  APB_IRDAT_Select PROC
;;;655     */
;;;656    void APB_IRDAT_Select(IRDATSrcDef IRDATSel)
000000  215f              MOVS     r1,#0x5f
;;;657    {
;;;658        APB->CR0.MBIT.IRDAT_MUX = IRDATSel;
000002  0609              LSLS     r1,r1,#24
000004  7c49              LDRB     r1,[r1,#0x11]
000006  2270              MOVS     r2,#0x70
000008  4391              BICS     r1,r1,r2
00000a  0102              LSLS     r2,r0,#4
00000c  2370              MOVS     r3,#0x70
00000e  401a              ANDS     r2,r2,r3
000010  4311              ORRS     r1,r1,r2
000012  225f              MOVS     r2,#0x5f
000014  0612              LSLS     r2,r2,#24
000016  7451              STRB     r1,[r2,#0x11]
;;;659    }
000018  4770              BX       lr
;;;660    	
                          ENDP


                          AREA ||i.APB_ITEA_Cmd||, CODE, READONLY, ALIGN=1

                  APB_ITEA_Cmd PROC
;;;916     */
;;;917    void APB_ITEA_Cmd(APB_Struct* APBx, FunctionalState NewState)
000000  7902              LDRB     r2,[r0,#4]
;;;918    {
;;;919        APBx->INT.MBIT.IEA = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7102              STRB     r2,[r0,#4]
;;;920    }
00000e  4770              BX       lr
;;;921    
                          ENDP


                          AREA ||i.APB_ITR6_Select||, CODE, READONLY, ALIGN=1

                  APB_ITR6_Select PROC
;;;90      */
;;;91     void APB_ITR6_Select(APB_TimerITR6SrcDef ITR6Src)
000000  215f              MOVS     r1,#0x5f
;;;92     {
;;;93         APB->CR2.MBIT.ITR6_MUX = ITR6Src;
000002  0609              LSLS     r1,r1,#24
000004  7e09              LDRB     r1,[r1,#0x18]
000006  08c9              LSRS     r1,r1,#3
000008  00c9              LSLS     r1,r1,#3
00000a  0742              LSLS     r2,r0,#29
00000c  0f52              LSRS     r2,r2,#29
00000e  4311              ORRS     r1,r1,r2
000010  225f              MOVS     r2,#0x5f
000012  0612              LSLS     r2,r2,#24
000014  7611              STRB     r1,[r2,#0x18]
;;;94     }
000016  4770              BX       lr
;;;95     
                          ENDP


                          AREA ||i.APB_ITR7_Select||, CODE, READONLY, ALIGN=1

                  APB_ITR7_Select PROC
;;;119     */
;;;120    void APB_ITR7_Select(APB_TimerITR7SrcDef ITR7Src)
000000  215f              MOVS     r1,#0x5f
;;;121    {
;;;122        APB->CR2.MBIT.ITR7_MUX = ITR7Src;
000002  0609              LSLS     r1,r1,#24
000004  7e09              LDRB     r1,[r1,#0x18]
000006  22f0              MOVS     r2,#0xf0
000008  4391              BICS     r1,r1,r2
00000a  0102              LSLS     r2,r0,#4
00000c  23f0              MOVS     r3,#0xf0
00000e  401a              ANDS     r2,r2,r3
000010  4311              ORRS     r1,r1,r2
000012  225f              MOVS     r2,#0x5f
000014  0612              LSLS     r2,r2,#24
000016  7611              STRB     r1,[r2,#0x18]
;;;123    }
000018  4770              BX       lr
;;;124    ///@}
                          ENDP


                          AREA ||i.APB_IT_Config||, CODE, READONLY, ALIGN=1

                  APB_IT_Config PROC
;;;894     */
;;;895    void APB_IT_Config(APB_Struct* APBx, uint32_t ITsrc, FunctionalState NewState)
000000  2a01              CMP      r2,#1
;;;896    {
;;;897        if (NewState == ENABLE)
000002  d103              BNE      |L15.12|
;;;898            APBx->INT.W |= ITsrc;
000004  6843              LDR      r3,[r0,#4]
000006  430b              ORRS     r3,r3,r1
000008  6043              STR      r3,[r0,#4]
00000a  e002              B        |L15.18|
                  |L15.12|
;;;899        else
;;;900            APBx->INT.W &= ~ITsrc;
00000c  6843              LDR      r3,[r0,#4]
00000e  438b              BICS     r3,r3,r1
000010  6043              STR      r3,[r0,#4]
                  |L15.18|
;;;901    }
000012  4770              BX       lr
;;;902    
                          ENDP


                          AREA ||i.APB_InverseBKS0_Cmd||, CODE, READONLY, ALIGN=1

                  APB_InverseBKS0_Cmd PROC
;;;243     */
;;;244    void APB_InverseBKS0_Cmd(OBM_Struct* OBMx, FunctionalState NewState)
000000  7842              LDRB     r2,[r0,#1]
;;;245    {
;;;246        OBMx->OBMx0.MBIT.BKN0 = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7042              STRB     r2,[r0,#1]
;;;247    }
00000e  4770              BX       lr
;;;248    /**
                          ENDP


                          AREA ||i.APB_InverseBKS1_Cmd||, CODE, READONLY, ALIGN=1

                  APB_InverseBKS1_Cmd PROC
;;;262     */
;;;263    void APB_InverseBKS1_Cmd(OBM_Struct* OBMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;264    {
;;;265        OBMx->OBMx0.MBIT.BKN1 = NewState;
000002  7842              LDRB     r2,[r0,#1]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7042              STRB     r2,[r0,#1]
;;;266    }
000012  bd10              POP      {r4,pc}
;;;267    /**
                          ENDP


                          AREA ||i.APB_InverseBKS2_Cmd||, CODE, READONLY, ALIGN=1

                  APB_InverseBKS2_Cmd PROC
;;;281     */
;;;282    void APB_InverseBKS2_Cmd(OBM_Struct* OBMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;283    {
;;;284        OBMx->OBMx0.MBIT.BKN2 = NewState;
000002  7842              LDRB     r2,[r0,#1]
000004  2304              MOVS     r3,#4
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  2404              MOVS     r4,#4
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7042              STRB     r2,[r0,#1]
;;;285    }
000012  bd10              POP      {r4,pc}
;;;286    ///@}
                          ENDP


                          AREA ||i.APB_InverseIRCLK_Cmd||, CODE, READONLY, ALIGN=1

                  APB_InverseIRCLK_Cmd PROC
;;;673     */
;;;674    void APB_InverseIRCLK_Cmd(FunctionalState NewState)
000000  215f              MOVS     r1,#0x5f
;;;675    {
;;;676        APB->CR0.MBIT.IRCLK_INV = NewState;
000002  0609              LSLS     r1,r1,#24
000004  7c09              LDRB     r1,[r1,#0x10]
000006  2210              MOVS     r2,#0x10
000008  4391              BICS     r1,r1,r2
00000a  0102              LSLS     r2,r0,#4
00000c  2310              MOVS     r3,#0x10
00000e  401a              ANDS     r2,r2,r3
000010  4311              ORRS     r1,r1,r2
000012  225f              MOVS     r2,#0x5f
000014  0612              LSLS     r2,r2,#24
000016  7411              STRB     r1,[r2,#0x10]
;;;677    }
000018  4770              BX       lr
;;;678    
                          ENDP


                          AREA ||i.APB_InverseIRDAT_Cmd||, CODE, READONLY, ALIGN=1

                  APB_InverseIRDAT_Cmd PROC
;;;691     */
;;;692    void APB_InverseIRDAT_Cmd(FunctionalState NewState)
000000  215f              MOVS     r1,#0x5f
;;;693    {
;;;694        APB->CR0.MBIT.IRDAT_INV = NewState;
000002  0609              LSLS     r1,r1,#24
000004  7c09              LDRB     r1,[r1,#0x10]
000006  2220              MOVS     r2,#0x20
000008  4391              BICS     r1,r1,r2
00000a  0142              LSLS     r2,r0,#5
00000c  2320              MOVS     r3,#0x20
00000e  401a              ANDS     r2,r2,r3
000010  4311              ORRS     r1,r1,r2
000012  225f              MOVS     r2,#0x5f
000014  0612              LSLS     r2,r2,#24
000016  7411              STRB     r1,[r2,#0x10]
;;;695    }
000018  4770              BX       lr
;;;696    ///@}
                          ENDP


                          AREA ||i.APB_InverseOBMxOutput_Cmd||, CODE, READONLY, ALIGN=1

                  APB_InverseOBMxOutput_Cmd PROC
;;;372     */
;;;373    void APB_InverseOBMxOutput_Cmd(OBM_Struct* OBMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;374    {
;;;375        OBMx->OBMx1.MBIT.POL = NewState;
000002  7902              LDRB     r2,[r0,#4]
000004  2304              MOVS     r3,#4
000006  439a              BICS     r2,r2,r3
000008  008b              LSLS     r3,r1,#2
00000a  2404              MOVS     r4,#4
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7102              STRB     r2,[r0,#4]
;;;376    }
000012  bd10              POP      {r4,pc}
;;;377    /**
                          ENDP


                          AREA ||i.APB_InverseOutputChannel0_Cmd||, CODE, READONLY, ALIGN=1

                  APB_InverseOutputChannel0_Cmd PROC
;;;577     */
;;;578    void APB_InverseOutputChannel0_Cmd(OBM_Struct* OBMx, FunctionalState NewState)
000000  7902              LDRB     r2,[r0,#4]
;;;579    {
;;;580        OBMx->OBMx1.MBIT.INV0 = NewState;
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
00000a  431a              ORRS     r2,r2,r3
00000c  7102              STRB     r2,[r0,#4]
;;;581    }
00000e  4770              BX       lr
;;;582    
                          ENDP


                          AREA ||i.APB_InverseOutputChannel1_Cmd||, CODE, READONLY, ALIGN=1

                  APB_InverseOutputChannel1_Cmd PROC
;;;597     */
;;;598    void APB_InverseOutputChannel1_Cmd(OBM_Struct* OBMx, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;599    {
;;;600        OBMx->OBMx1.MBIT.INV1 = NewState;
000002  7902              LDRB     r2,[r0,#4]
000004  2302              MOVS     r3,#2
000006  439a              BICS     r2,r2,r3
000008  004b              LSLS     r3,r1,#1
00000a  2402              MOVS     r4,#2
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7102              STRB     r2,[r0,#4]
;;;601    }
000012  bd10              POP      {r4,pc}
;;;602    ///@}
                          ENDP


                          AREA ||i.APB_OBMxOpMode_Select||, CODE, READONLY, ALIGN=1

                  APB_OBMxOpMode_Select PROC
;;;312     */
;;;313    void APB_OBMxOpMode_Select(OBM_Struct* OBMx, OBMxOperateModeTypedef OPMode)
000000  7802              LDRB     r2,[r0,#0]
;;;314    {
;;;315        OBMx->OBMx0.MBIT.MDS = OPMode;
000002  0892              LSRS     r2,r2,#2
000004  0092              LSLS     r2,r2,#2
000006  078b              LSLS     r3,r1,#30
000008  0f9b              LSRS     r3,r3,#30
00000a  431a              ORRS     r2,r2,r3
00000c  7002              STRB     r2,[r0,#0]
;;;316    }
00000e  4770              BX       lr
;;;317    ///@}
                          ENDP


                          AREA ||i.APB_OutputChannel0Source_Select||, CODE, READONLY, ALIGN=1

                  APB_OutputChannel0Source_Select PROC
;;;526     */
;;;527    void APB_OutputChannel0Source_Select(OBM_Struct* OBMx, OBMxChannel0TypeDef OBM0LSSel)
000000  7982              LDRB     r2,[r0,#6]
;;;528    {
;;;529        OBMx->OBMx1.MBIT.MUX0 = OBM0LSSel;
000002  0912              LSRS     r2,r2,#4
000004  0112              LSLS     r2,r2,#4
000006  070b              LSLS     r3,r1,#28
000008  0f1b              LSRS     r3,r3,#28
00000a  431a              ORRS     r2,r2,r3
00000c  7182              STRB     r2,[r0,#6]
;;;530    }
00000e  4770              BX       lr
;;;531    
                          ENDP


                          AREA ||i.APB_OutputChannel1Source_Select||, CODE, READONLY, ALIGN=1

                  APB_OutputChannel1Source_Select PROC
;;;557     */
;;;558    void APB_OutputChannel1Source_Select(OBM_Struct* OBMx, OBMxChannel1TypeDef OBM0HSSel)
000000  b510              PUSH     {r4,lr}
;;;559    {
;;;560        OBMx->OBMx1.MBIT.MUX1 = OBM0HSSel;
000002  7982              LDRB     r2,[r0,#6]
000004  23f0              MOVS     r3,#0xf0
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  24f0              MOVS     r4,#0xf0
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7182              STRB     r2,[r0,#6]
;;;561    }
000012  bd10              POP      {r4,pc}
;;;562    
                          ENDP


                          AREA ||i.APB_OutputFilter_Select||, CODE, READONLY, ALIGN=1

                  APB_OutputFilter_Select PROC
;;;394     */
;;;395    void APB_OutputFilter_Select(OBM_Struct* OBMx, OBMxFilterTypedef FilterClks)
000000  b510              PUSH     {r4,lr}
;;;396    {
;;;397        OBMx->OBMx1.MBIT.FCKS = FilterClks;
000002  7902              LDRB     r2,[r0,#4]
000004  2330              MOVS     r3,#0x30
000006  439a              BICS     r2,r2,r3
000008  010b              LSLS     r3,r1,#4
00000a  2430              MOVS     r4,#0x30
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  7102              STRB     r2,[r0,#4]
;;;398    }
000012  bd10              POP      {r4,pc}
;;;399    ///@}
                          ENDP


                          AREA ||i.APB_SetOBMxInitState||, CODE, READONLY, ALIGN=1

                  APB_SetOBMxInitState PROC
;;;454     */
;;;455    void APB_SetOBMxInitState(OBM_Struct* OBMx, BitAction CurSta)
000000  b510              PUSH     {r4,lr}
;;;456    {
000002  460a              MOV      r2,r1
;;;457        uint8_t RegT;
;;;458        
;;;459        RegT = OBMx->OBMx0.B[0] | APB_OBMx_unlocked;
000004  7803              LDRB     r3,[r0,#0]
000006  2420              MOVS     r4,#0x20
000008  4323              ORRS     r3,r3,r4
00000a  4619              MOV      r1,r3
;;;460        
;;;461        if (CurSta == SET)
00000c  2a01              CMP      r2,#1
00000e  d102              BNE      |L28.22|
;;;462            RegT |= APB_OBMx_initial_1;
000010  2310              MOVS     r3,#0x10
000012  4319              ORRS     r1,r1,r3
000014  e003              B        |L28.30|
                  |L28.22|
;;;463        else
;;;464            RegT &= ~APB_OBMx_initial_1;
000016  2410              MOVS     r4,#0x10
000018  460b              MOV      r3,r1
00001a  43a3              BICS     r3,r3,r4
00001c  4619              MOV      r1,r3
                  |L28.30|
;;;465        
;;;466        OBMx->OBMx0.B[0] = RegT;
00001e  7001              STRB     r1,[r0,#0]
;;;467        
;;;468    }
000020  bd10              POP      {r4,pc}
;;;469    
                          ENDP


                          AREA ||i.APB_TimerX_Cmd||, CODE, READONLY, ALIGN=1

                  APB_TimerX_Cmd PROC
;;;65      */
;;;66     void APB_TimerX_Cmd(uint32_t TMxEnBit)
000000  215f              MOVS     r1,#0x5f
;;;67     {
;;;68         APB->CR1.W |= TMxEnBit;
000002  0609              LSLS     r1,r1,#24
000004  6949              LDR      r1,[r1,#0x14]
000006  4301              ORRS     r1,r1,r0
000008  225f              MOVS     r2,#0x5f
00000a  0612              LSLS     r2,r2,#24
00000c  6151              STR      r1,[r2,#0x14]
;;;69     }
00000e  4770              BX       lr
;;;70     
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_APB_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_APB_DRV_c_d4712b5f____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_APB_DRV_c_d4712b5f____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_APB_DRV_c_d4712b5f____REVSH|
#line 496
|__asm___18_MG32x02z_APB_DRV_c_d4712b5f____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
