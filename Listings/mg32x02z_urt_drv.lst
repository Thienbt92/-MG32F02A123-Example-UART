L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_URT_DRV.c"
N
N
N /**
N ******************************************************************************
N *
N * @file        MG32x02z_URT_DRV.c
N * @brief       The code is URT driver C file.
N *
N * @par         Project
N *              MG32x02z
N * @version     V1.20
N * @date        2021/04/21
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2017 MegaWin Technology Co., Ltd.
N *              All rights reserved.
N * 
N ******************************************************************************* 
N * @par Disclaimer
N * The Demo software is provided "AS IS" without any warranty, either
N * expressed or implied, including, but not limited to, the implied warranties
N * of merchantability and fitness for a particular purpose. The author will
N * not be liable for any special, incidental, consequential or indirect
N * damages due to loss of data or any other reason.
N * These statements agree with the world wide and local dictated laws about
N * authorship and violence against these laws.
N *******************************************************************************
N *******************************************************************************
N */
N
N 
N
N#include "MG32x02z_URT_DRV.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z_URT_DRV.h" 1
N
N
N
N
N
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_URT_DRV.H
N *
N * @brief       This file contains all the functions prototypes for the URT
N *              firmware library.
N *
N * @par         Project
N *              MG32x02z
N * @version     V1.16
N * @date        2021/04/21
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2017 MegaWin Technology Co., Ltd.
N *              All rights reserved.
N *
N ******************************************************************************
N * @par 		Disclaimer 
N *		The Demo software is provided "AS IS"  without any warranty, either 
N *		expressed or implied, including, but not limited to, the implied warranties 
N *		of merchantability and fitness for a particular purpose.  The author will 
N *		not be liable for any special, incidental, consequential or indirect 
N *		damages due to loss of data or any other reason. 
N *		These statements agree with the world wide and local dictated laws about 
N *		authorship and violence against these laws. 
N ******************************************************************************
N ******************************************************************************
N */
N 
N#ifndef _MG32x02z_URT_DRV_H
N 
N#define _MG32x02z_URT_DRV_H
N 
N#include "MG32x02z.h" 
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z.h
N *
N * @brief       MG32x02z Device Peripheral Access Layer Header File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:41 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z_H
N#define _MG32x02z_H
N#define _MG32x02z_H_VER                             3.9     /*!< File Version */
N
N
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N *************************************************
N *  Chip definitions
N *************************************************
N */
N// Chip Generation
N#if defined(MG32F02A132) || defined(MG32F02A072) || defined(MA862)
X#if 1L || 0L || 0L
N  #define MG32_1ST
N#elif defined(MG32F02A032)
S  #define MG32_2ND
S#elif defined(MG32F02A128) || defined(MG32F02U128) || defined(MG32F02A064) || defined(MG32F02U064)
S  #define MG32_3RD
S#elif defined(MG32F02V032)
S  #define MG32_4TH
N#endif
N
N#if defined(MG32F02U128) || defined(MG32F02U064)
X#if 0L || 0L
S  #define USB_TYPE    1
N#else
N  #define USB_TYPE    0
N#endif
N    
N
N/**
N *************************************************
N *  ARM CPU Configuration Setting
N *************************************************
N */
N#define __CM0_REV                 0 /*!< Core Revision r0p0                             */
N#define __MPU_PRESENT             0 /*!< Chip do not provide MPU                       */
N#define __NVIC_PRIO_BITS          2 /*!< Chip uses 2 Bits for the Priority Levels      */
N#define __Vendor_SysTickConfig    0 /*!< Set to 1 if different SysTick Config is used   */
N
N/**
N ******************************************************************************
N * @enum        IRQn
N *              Interrupt Number Definition
N ******************************************************************************
N */
Ntypedef enum IRQn
N{
N/******  Cortex-M0 Processor Exceptions Numbers Definitions *****************************************/
N    NMI_IRQn                    = -14 , /*!<  ;Non Maskable Interrupt                               */
N    HardFault_IRQn              = -13 , /*!<  ;Cortex-M0 Hard Fault Interrupt                       */
N    SVC_IRQn                    = -5 ,  /*!<  ;Cortex-M0 SV Call Interrupt                          */
N    PendSV_IRQn                 = -2 ,  /*!<  ;Cortex-M0 Pend SV Interrupt                          */
N    SysTick_IRQn                = -1 ,  /*!<  ;Cortex-M0 System Tick Interrupt                      */
N/******  Peripheral Interrupt Numbers Definitions ***************************************************/
N    WWDT_IRQn                   =  0 ,  /*!<  ;Window Watchdog                                      */
N    SYS_IRQn                    =  1 ,  /*!<  ;System global Interrupt                              */
N    EXINT0_IRQn                 =  3 ,  /*!<  ;EXIC EXINT0 (PA)                                     */
N    EXINT1_IRQn                 =  4 ,  /*!<  ;EXIC EXINT1 (PB)                                     */
N    EXINT2_IRQn                 =  5 ,  /*!<  ;EXIC EXINT2 (PC)                                     */
N    EXINT3_IRQn                 =  6 ,  /*!<  ;EXIC EXINT3/EXINT4 (PD/PE)                           */
N    COMP_IRQn                   =  7 ,  /*!<  ;Analog Comparators global Interrupt                  */
N    DMA_IRQn                    =  8 ,  /*!<  ;DMA all channel global Interrupt                     */
N    ADC_IRQn                    =  10 , /*!<  ;ADC                                                  */
N    DAC_IRQn                    =  11 , /*!<  ;DAC                                                  */
N    TM0x_IRQn                   =  12 , /*!<  ;Timer TM0x global Interrupt                          */
N    TM10_IRQn                   =  13 , /*!<  ;Timer TM10                                           */
N    TM1x_IRQn                   =  14 , /*!<  ;Timer TM16 ... global Interrupt                      */
N    TM20_IRQn                   =  15 , /*!<  ;Timer TM20                                           */
N    TM2x_IRQn                   =  16 , /*!<  ;Timer TM26 ... global Interrupt                      */
N    TM3x_IRQn                   =  17 , /*!<  ;Timer TM3x global Interrupt                          */
N    URT0_IRQn                   =  20 , /*!<  ;UART URT0                                            */
N    URT123_IRQn                 =  21 , /*!<  ;UART URT1/2/3 global Interrupt                       */
N    URT4x_IRQn                  =  22 , /*!<  ;UART URT4/5/6/7 global Interrupt                     */
N    SPI0_IRQn                   =  24 , /*!<  ;SPI0                                                 */
N    I2C0_IRQn                   =  28 , /*!<  ;I2C0                                                 */
N    I2Cx_IRQn                   =  29 , /*!<  ;I2C1 ... global Interrupt                            */
N    USB_IRQn                    =  30 , /*!<  ;USB                                                  */
N    APX_IRQn                    =  31 , /*!<  ;APX                                                  */
N} IRQn_Type;                    /*!< Interrupt Number Definition */
N
N
N#include "core_cm0.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\core_cm0.h" 1
N/**************************************************************************//**
N * @file     core_cm0.h
N * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
N * @version  V5.0.8
N * @date     21. August 2019
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S  #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__clang__)
X#elif 0L
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM0_H_GENERIC
N#define __CORE_CM0_H_GENERIC
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 35 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\core_cm0.h" 2
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex_M0
N  @{
N */
N
N#include "cmsis_version.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\cmsis_version.h" 1
N/**************************************************************************//**
N * @file     cmsis_version.h
N * @brief    CMSIS Core(M) Version definitions
N * @version  V5.0.4
N * @date     23. July 2019
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2019 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S  #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__clang__)
X#elif 0L
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CMSIS_VERSION_H
N#define __CMSIS_VERSION_H
N
N/*  CMSIS Version definitions */
N#define __CM_CMSIS_VERSION_MAIN  ( 5U)                                      /*!< [31:16] CMSIS Core(M) main version */
N#define __CM_CMSIS_VERSION_SUB   ( 4U)                                      /*!< [15:0]  CMSIS Core(M) sub version */
N#define __CM_CMSIS_VERSION       ((__CM_CMSIS_VERSION_MAIN << 16U) | \
N                                   __CM_CMSIS_VERSION_SUB           )       /*!< CMSIS Core(M) version number */
X#define __CM_CMSIS_VERSION       ((__CM_CMSIS_VERSION_MAIN << 16U) |                                    __CM_CMSIS_VERSION_SUB           )        
N#endif
L 64 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\core_cm0.h" 2
N 
N/*  CMSIS CM0 definitions */
N#define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] CMSIS HAL main version */
N#define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  CMSIS HAL sub version */
N#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
N                                    __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL version number */
X#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) |                                     __CM0_CMSIS_VERSION_SUB           )   
N
N#define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    This core does not support an FPU at all
N*/
N#define __FPU_USED       0U
N
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 0L
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
N  #endif
N
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_FP
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TI_ARM__ )
S  #if defined __TI_VFP_SUPPORT__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
N#endif
N
N#include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\cmsis_compiler.h" 1
N/**************************************************************************//**
N * @file     cmsis_compiler.h
N * @brief    CMSIS compiler generic header file
N * @version  V5.1.0
N * @date     09. October 2018
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_COMPILER_H
N#define __CMSIS_COMPILER_H
N
N#include <stdint.h>
N
N/*
N * Arm Compiler 4/5
N */
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS compiler ARMCC (Arm Compiler 5) header file
N * @version  V5.2.1
N * @date     26. March 2020
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2020 Arm Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060960 < 400677)
S  #error "Please use Arm Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* CMSIS compiler control architecture macros */
N#if ((defined (__TARGET_ARCH_6_M  ) && (__TARGET_ARCH_6_M   == 1)) || \
N     (defined (__TARGET_ARCH_6S_M ) && (__TARGET_ARCH_6S_M  == 1))   )
X#if ((0L && (__TARGET_ARCH_6_M   == 1)) ||      (1L && (1  == 1))   )
N  #define __ARM_ARCH_6M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7_M ) && (__TARGET_ARCH_7_M  == 1))
X#if (0L && (__TARGET_ARCH_7_M  == 1))
S  #define __ARM_ARCH_7M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7E_M) && (__TARGET_ARCH_7E_M == 1))
X#if (0L && (__TARGET_ARCH_7E_M == 1))
S  #define __ARM_ARCH_7EM__          1
N#endif
N
N  /* __ARM_ARCH_8M_BASE__  not applicable */
N  /* __ARM_ARCH_8M_MAIN__  not applicable */
N  /* __ARM_ARCH_8_1M_MAIN__  not applicable */
N
N/* CMSIS compiler control DSP macros */
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S  #define __ARM_FEATURE_DSP         1
N#endif
N
N/* CMSIS compiler specific defines */
N#ifndef   __ASM
N  #define __ASM                                  __asm
N#endif
N#ifndef   __INLINE
N  #define __INLINE                               __inline
N#endif
N#ifndef   __STATIC_INLINE
N  #define __STATIC_INLINE                        static __inline
N#endif
N#ifndef   __STATIC_FORCEINLINE                 
N  #define __STATIC_FORCEINLINE                   static __forceinline
N#endif           
N#ifndef   __NO_RETURN
N  #define __NO_RETURN                            __declspec(noreturn)
N#endif
N#ifndef   __USED
N  #define __USED                                 __attribute__((used))
N#endif
N#ifndef   __WEAK
N  #define __WEAK                                 __attribute__((weak))
N#endif
N#ifndef   __PACKED
N  #define __PACKED                               __attribute__((packed))
N#endif
N#ifndef   __PACKED_STRUCT
N  #define __PACKED_STRUCT                        __packed struct
N#endif
N#ifndef   __PACKED_UNION
N  #define __PACKED_UNION                         __packed union
N#endif
N#ifndef   __UNALIGNED_UINT32        /* deprecated */
N  #define __UNALIGNED_UINT32(x)                  (*((__packed uint32_t *)(x)))
N#endif
N#ifndef   __UNALIGNED_UINT16_WRITE
N  #define __UNALIGNED_UINT16_WRITE(addr, val)    ((*((__packed uint16_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT16_READ
N  #define __UNALIGNED_UINT16_READ(addr)          (*((const __packed uint16_t *)(addr)))
N#endif
N#ifndef   __UNALIGNED_UINT32_WRITE
N  #define __UNALIGNED_UINT32_WRITE(addr, val)    ((*((__packed uint32_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT32_READ
N  #define __UNALIGNED_UINT32_READ(addr)          (*((const __packed uint32_t *)(addr)))
N#endif
N#ifndef   __ALIGNED
N  #define __ALIGNED(x)                           __attribute__((aligned(x)))
N#endif
N#ifndef   __RESTRICT
N  #define __RESTRICT                             __restrict
N#endif
N#ifndef   __COMPILER_BARRIER
N  #define __COMPILER_BARRIER()                   __memory_changed()
N#endif
N
N/* #########################  Startup and Lowlevel Init  ######################## */
N
N#ifndef __PROGRAM_START
N#define __PROGRAM_START           __main
N#endif
N
N#ifndef __INITIAL_SP
N#define __INITIAL_SP              Image$$ARM_LIB_STACK$$ZI$$Limit
N#endif
N
N#ifndef __STACK_LIMIT
N#define __STACK_LIMIT             Image$$ARM_LIB_STACK$$ZI$$Base
N#endif
N
N#ifndef __VECTOR_TABLE
N#define __VECTOR_TABLE            __Vectors
N#endif
N
N#ifndef __VECTOR_TABLE_ATTRIBUTE
N#define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section("RESET")))
N#endif
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/**
N  \brief   Enable IRQ Interrupts
N  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __enable_irq();     */
N
N
N/**
N  \brief   Disable IRQ Interrupts
N  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Enable FIQ
S  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __enable_fault_irq                __enable_fiq
S
S
S/**
S  \brief   Disable FIQ
S  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __disable_fault_irq               __disable_fiq
S
S
S/**
S  \brief   Get Base Priority
S  \details Returns the current value of the Base Priority register.
S  \return               Base Priority register value
S */
S__STATIC_INLINE uint32_t  __get_BASEPRI(void)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  return(__regBasePri);
S}
S
S
S/**
S  \brief   Set Base Priority
S  \details Assigns the given value to the Base Priority register.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  __regBasePri = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Set Base Priority with condition
S  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
S           or the new value increases the BASEPRI priority level.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
S{
S  register uint32_t __regBasePriMax      __ASM("basepri_max");
S  __regBasePriMax = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Get Fault Mask
S  \details Returns the current value of the Fault Mask register.
S  \return               Fault Mask register value
S */
S__STATIC_INLINE uint32_t __get_FAULTMASK(void)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  return(__regFaultMask);
S}
S
S
S/**
S  \brief   Set Fault Mask
S  \details Assigns the given value to the Fault Mask register.
S  \param [in]    faultMask  Fault Mask value to set
S */
S__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  __regFaultMask = (faultMask & (uint32_t)1U);
S}
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N
N/**
N  \brief   Get FPSCR
N  \details Returns the current value of the Floating Point Status/Control register.
N  \return               Floating Point Status/Control register value
N */
N__STATIC_INLINE uint32_t __get_FPSCR(void)
Xstatic __inline uint32_t __get_FPSCR(void)
N{
N#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
N     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((0L && (__FPU_PRESENT == 1U)) &&      (1L && (0U    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
N#else
N   return(0U);
N#endif
N}
N
N
N/**
N  \brief   Set FPSCR
N  \details Assigns the given value to the Floating Point Status/Control register.
N  \param [in]    fpscr  Floating Point Status/Control value to set
N */
N__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
Xstatic __inline void __set_FPSCR(uint32_t fpscr)
N{
N#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
N     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((0L && (__FPU_PRESENT == 1U)) &&      (1L && (0U    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
N#else
N  (void)fpscr;
N#endif
N}
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB()                           __isb(0xF)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB()                           __dsb(0xF)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB()                           __dmb(0xF)
N
N                  
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x78563412.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 0x34127856.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For example, 0x0080 becomes 0x8000.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int16_t __REVSH(int16_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int16_t __REVSH(int16_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    op1  Value to rotate
N  \param [in]    op2  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S  #define __RBIT                          __rbit
N#else
N__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
X__attribute__((always_inline)) static __inline uint32_t __RBIT(uint32_t value)
N{
N  uint32_t result;
N  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
N
N  result = value;                      /* r will be reversed bits of v; first get LSB of v */
N  for (value >>= 1U; value != 0U; value >>= 1U)
N  {
N    result <<= 1U;
N    result |= value & 1U;
N    s--;
N  }
N  result <<= s;                        /* shift when v's highest bits are zero */
N  return result;
N}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   LDR Exclusive (8 bit)
S  \details Executes a exclusive LDR instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
S#else
S  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (16 bit)
S  \details Executes a exclusive LDR instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
S#else
S  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (32 bit)
S  \details Executes a exclusive LDR instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
S#else
S  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (8 bit)
S  \details Executes a exclusive STR instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (16 bit)
S  \details Executes a exclusive STR instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (32 bit)
S  \details Executes a exclusive STR instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   Remove the exclusive lock
S  \details Removes the exclusive lock which is created by LDREX.
S */
S#define __CLREX                           __clrex
S
S
S/**
S  \brief   Signed Saturate
S  \details Saturates a signed value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (1..32)
S  \return             Saturated value
S */
S#define __SSAT                            __ssat
S
S
S/**
S  \brief   Unsigned Saturate
S  \details Saturates an unsigned value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (0..31)
S  \return             Saturated value
S */
S#define __USAT                            __usat
S
S
S/**
S  \brief   Rotate Right with Extend (32 bit)
S  \details Moves each bit of a bitstring right by one bit.
S           The carry input is shifted in at the left end of the bitstring.
S  \param [in]    value  Value to rotate
S  \return               Rotated value
S */
S#ifndef __NO_EMBEDDED_ASM
S__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
S{
S  rrx r0, r0
S  bx lr
S}
S#endif
S
S
S/**
S  \brief   LDRT Unprivileged (8 bit)
S  \details Executes a Unprivileged LDRT instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (16 bit)
S  \details Executes a Unprivileged LDRT instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (32 bit)
S  \details Executes a Unprivileged LDRT instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
S
S
S/**
S  \brief   STRT Unprivileged (8 bit)
S  \details Executes a Unprivileged STRT instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRBT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (16 bit)
S  \details Executes a Unprivileged STRT instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRHT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (32 bit)
S  \details Executes a Unprivileged STRT instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRT(value, ptr)                __strt(value, ptr)
S
N#else  /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#else   
N
N/**
N  \brief   Signed Saturate
N  \details Saturates a signed value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (1..32)
N  \return             Saturated value
N */
N__attribute__((always_inline)) __STATIC_INLINE int32_t __SSAT(int32_t val, uint32_t sat)
X__attribute__((always_inline)) static __inline int32_t __SSAT(int32_t val, uint32_t sat)
N{
N  if ((sat >= 1U) && (sat <= 32U))
N  {
N    const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
N    const int32_t min = -1 - max ;
N    if (val > max)
N    {
N      return max;
N    }
N    else if (val < min)
N    {
N      return min;
N    }
N  }
N  return val;
N}
N
N/**
N  \brief   Unsigned Saturate
N  \details Saturates an unsigned value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (0..31)
N  \return             Saturated value
N */
N__attribute__((always_inline)) __STATIC_INLINE uint32_t __USAT(int32_t val, uint32_t sat)
X__attribute__((always_inline)) static __inline uint32_t __USAT(int32_t val, uint32_t sat)
N{
N  if (sat <= 31U)
N  {
N    const uint32_t max = ((1U << sat) - 1U);
N    if (val > (int32_t)max)
N    {
N      return max;
N    }
N    else if (val < 0)
N    {
N      return 0U;
N    }
N  }
N  return (uint32_t)val;
N}
N
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S#define __SADD8                           __sadd8
S#define __QADD8                           __qadd8
S#define __SHADD8                          __shadd8
S#define __UADD8                           __uadd8
S#define __UQADD8                          __uqadd8
S#define __UHADD8                          __uhadd8
S#define __SSUB8                           __ssub8
S#define __QSUB8                           __qsub8
S#define __SHSUB8                          __shsub8
S#define __USUB8                           __usub8
S#define __UQSUB8                          __uqsub8
S#define __UHSUB8                          __uhsub8
S#define __SADD16                          __sadd16
S#define __QADD16                          __qadd16
S#define __SHADD16                         __shadd16
S#define __UADD16                          __uadd16
S#define __UQADD16                         __uqadd16
S#define __UHADD16                         __uhadd16
S#define __SSUB16                          __ssub16
S#define __QSUB16                          __qsub16
S#define __SHSUB16                         __shsub16
S#define __USUB16                          __usub16
S#define __UQSUB16                         __uqsub16
S#define __UHSUB16                         __uhsub16
S#define __SASX                            __sasx
S#define __QASX                            __qasx
S#define __SHASX                           __shasx
S#define __UASX                            __uasx
S#define __UQASX                           __uqasx
S#define __UHASX                           __uhasx
S#define __SSAX                            __ssax
S#define __QSAX                            __qsax
S#define __SHSAX                           __shsax
S#define __USAX                            __usax
S#define __UQSAX                           __uqsax
S#define __UHSAX                           __uhsax
S#define __USAD8                           __usad8
S#define __USADA8                          __usada8
S#define __SSAT16                          __ssat16
S#define __USAT16                          __usat16
S#define __UXTB16                          __uxtb16
S#define __UXTAB16                         __uxtab16
S#define __SXTB16                          __sxtb16
S#define __SXTAB16                         __sxtab16
S#define __SMUAD                           __smuad
S#define __SMUADX                          __smuadx
S#define __SMLAD                           __smlad
S#define __SMLADX                          __smladx
S#define __SMLALD                          __smlald
S#define __SMLALDX                         __smlaldx
S#define __SMUSD                           __smusd
S#define __SMUSDX                          __smusdx
S#define __SMLSD                           __smlsd
S#define __SMLSDX                          __smlsdx
S#define __SMLSLD                          __smlsld
S#define __SMLSLDX                         __smlsldx
S#define __SEL                             __sel
S#define __QADD                            __qadd
S#define __QSUB                            __qsub
S
S#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
S                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
S
S#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
S                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
S
S#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
S                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
S
S#define __SXTB16_RORn(ARG1, ARG2)        __SXTB16(__ROR(ARG1, ARG2))
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 35 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\cmsis_compiler.h" 2
N
N
N/*
N * Arm Compiler 6.6 LTM (armclang)
N */
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050) && (__ARMCC_VERSION < 6100100)
S  #include "cmsis_armclang_ltm.h"
S
S  /*
S * Arm Compiler above 6.10.1 (armclang)
S */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6100100)
S  #include "cmsis_armclang.h"
S
S
S/*
S * GNU Compiler
S */
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S
S/*
S * IAR Compiler
S */
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iccarm.h>
S
S
S/*
S * TI Arm Compiler
S */
S#elif defined ( __TI_ARM__ )
S  #include <cmsis_ccs.h>
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __attribute__((packed))
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __attribute__((packed)) T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void*)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)                           __attribute__((aligned(x)))
S  #endif
S  #ifndef   __RESTRICT
S    #define __RESTRICT                             __restrict
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S/*
S * TASKING Compiler
S */
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __packed__
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __packed__
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __packed__
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __packed__ T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __align(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S/*
S * COSMIC Compiler
S */
S#elif defined ( __CSMC__ )
S   #include <cmsis_csm.h>
S
S #ifndef   __ASM
S    #define __ASM                                  _asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __STATIC_FORCEINLINE
S    #define __STATIC_FORCEINLINE                   __STATIC_INLINE
S  #endif
S  #ifndef   __NO_RETURN
S    // NO RETURN is automatically detected hence no warning here
S    #define __NO_RETURN
S  #endif
S  #ifndef   __USED
S    #warning No compiler specific solution for __USED. __USED is ignored.
S    #define __USED
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __weak
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               @packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        @packed struct
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         @packed union
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    @packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S  #ifndef   __COMPILER_BARRIER
S    #warning No compiler specific solution for __COMPILER_BARRIER. __COMPILER_BARRIER is ignored.
S    #define __COMPILER_BARRIER()                   (void)0
S  #endif
S
S
S#else
S  #error Unknown compiler.
N#endif
N
N
N#endif /* __CMSIS_COMPILER_H */
N
L 116 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include\core_cm0.h" 2
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM0_H_DEPENDANT
N#define __CORE_CM0_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM0_REV
S    #define __CM0_REV               0x0000U
S    #warning "__CM0_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          2U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex_M0 */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
N    uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[1U];                
N        uint32_t RESERVED0[31U];
N  __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[1U];                
N        uint32_t RESERVED1[31U];
N  __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[1U];                
N        uint32_t RESERVED2[31U];
N  __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[1U];                
N        uint32_t RESERVED3[31U];
N        uint32_t RESERVED4[64U];
N  __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
X  volatile uint32_t IP[8U];                  
N}  NVIC_Type;
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N        uint32_t RESERVED0;
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N        uint32_t RESERVED1;
N  __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED */
X  volatile uint32_t SHP[2U];                 
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible over DAP and not via processor.
N            Therefore they are not covered by the Cortex-M0 header file.
N  @{
N */
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Core Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N#ifdef CMSIS_NVIC_VIRTUAL
S  #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
S    #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
S  #endif
S  #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
N#else
N  #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
N  #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
N  #define NVIC_EnableIRQ              __NVIC_EnableIRQ
N  #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
N  #define NVIC_DisableIRQ             __NVIC_DisableIRQ
N  #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
N  #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
N  #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
N/*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
N  #define NVIC_SetPriority            __NVIC_SetPriority
N  #define NVIC_GetPriority            __NVIC_GetPriority
N  #define NVIC_SystemReset            __NVIC_SystemReset
N#endif /* CMSIS_NVIC_VIRTUAL */
N
N#ifdef CMSIS_VECTAB_VIRTUAL
S  #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
S    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
S  #endif
S  #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
N#else
N  #define NVIC_SetVector              __NVIC_SetVector
N  #define NVIC_GetVector              __NVIC_GetVector
N#endif  /* (CMSIS_VECTAB_VIRTUAL) */
N
N#define NVIC_USER_IRQ_OFFSET          16
N
N
N/* The following EXC_RETURN values are saved the LR on exception entry */
N#define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after return                               */
N#define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after return                                */
N#define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after return                                */
N
N
N/* Interrupt Priorities are WORD accessible only under Armv6-M                  */
N/* The following MACROS handle generation of the register offset and byte masks */
N#define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
N#define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
N#define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
N
N#define __NVIC_SetPriorityGrouping(X) (void)(X)
N#define __NVIC_GetPriorityGrouping()  (0U)
N
N/**
N  \brief   Enable Interrupt
N  \details Enables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    __COMPILER_BARRIER();
X    __memory_changed();
N    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
N    __COMPILER_BARRIER();
X    __memory_changed();
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Enable status
N  \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt is not enabled.
N  \return             1  Interrupt is enabled.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Disable Interrupt
N  \details Disables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
N    __DSB();
X    __dsb(0xF);
N    __ISB();
X    __isb(0xF);
N  }
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the NVIC pending register and returns the pending bit for the specified device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N  \note    The priority cannot be set for every processor exception.
N */
N__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  = ((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N  else
N  {
N    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] = ((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[ ( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N  else
N  {
N    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N}
N
N
N/**
N  \brief   Encode Priority
N  \details Encodes the priority for an interrupt with the given priority group,
N           preemptive priority value, and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]     PriorityGroup  Used priority group.
N  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
N  \param [in]       SubPriority  Subpriority value (starting from 0).
N  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
N */
N__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(2)) ? (uint32_t)(2) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(2)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(2));
N
N  return (
N           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
N           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
N         );
N}
N
N
N/**
N  \brief   Decode Priority
N  \details Decodes an interrupt priority value with a given priority group to
N           preemptive priority value and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
N  \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC_GetPriority().
N  \param [in]     PriorityGroup  Used priority group.
N  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
N  \param [out]     pSubPriority  Subpriority value (starting from 0).
N */
N__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
Xstatic __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(2)) ? (uint32_t)(2) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(2)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(2));
N
N  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
N  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
N}
N
N
N
N/**
N  \brief   Set Interrupt Vector
N  \details Sets an interrupt vector in SRAM based interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N           Address 0 must be mapped to SRAM.
N  \param [in]   IRQn      Interrupt number
N  \param [in]   vector    Address of interrupt handler function
N */
N__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
Xstatic __inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
N{
N  uint32_t *vectors = (uint32_t *)(NVIC_USER_IRQ_OFFSET << 2);      /* point to 1st user interrupt */
X  uint32_t *vectors = (uint32_t *)(16 << 2);       
N  *(vectors + (int32_t)IRQn) = vector;                              /* use pointer arithmetic to access vector */
N  /* ARM Application Note 321 states that the M0 does not require the architectural barrier */
N}
N
N
N/**
N  \brief   Get Interrupt Vector
N  \details Reads an interrupt vector from interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn      Interrupt number.
N  \return                 Address of interrupt handler function
N */
N__STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
N{
N  uint32_t *vectors = (uint32_t *)(NVIC_USER_IRQ_OFFSET << 2);      /* point to 1st user interrupt */
X  uint32_t *vectors = (uint32_t *)(16 << 2);       
N  return *(vectors + (int32_t)IRQn);                                /* use pointer arithmetic to access vector */
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
X__declspec(noreturn) static __inline void __NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  __dsb(0xF);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FAUL << 16U) |
N                 SCB_AIRCR_SYSRESETREQ_Msk);
X                 (1UL << 2U));
N  __DSB();                                                          /* Ensure completion of memory access */
X  __dsb(0xF);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N/* ##########################  FPU functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_FpuFunctions FPU Functions
N  \brief    Function that provides FPU type.
N  @{
N */
N
N/**
N  \brief   get FPU type
N  \details returns the FPU type
N  \returns
N   - \b  0: No FPU
N   - \b  1: Single precision FPU
N   - \b  2: Double + Single precision FPU
N */
N__STATIC_INLINE uint32_t SCB_GetFPUType(void)
Xstatic __inline uint32_t SCB_GetFPUType(void)
N{
N    return 0U;           /* No FPU */
N}
N
N
N/*@} end of CMSIS_Core_FpuFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
X#if 1L && (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  __NVIC_SetPriority (SysTick_IRQn, (1UL << 2) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 107 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z.h" 2
N#include <stdint.h>
N
N/**
N *************************************************
N *  New type definitions
N *************************************************
N */
Ntypedef signed char boolean;		/*!< Boolean	*/
Ntypedef unsigned char byte;			/*!< Byte		*/
N//typedef signed char int8;
N//typedef signed char sint8;
N//typedef unsigned char uint8;
N//typedef signed short int16;
N//typedef signed short sint16;
N//typedef unsigned short uint16;
N//typedef signed int int16;
N//typedef signed int sint16;
N//typedef unsigned int uint16;
N//typedef signed long int32;
N//typedef signed long sint32;
N//typedef unsigned long uint32;
Ntypedef unsigned long long uint64;	/*!< Uint 64-bit	*/
Ntypedef float float32;				/*!< Float 32-bit	*/
Ntypedef double float64;				/*!< Float 64-bit	*/
N
N/**
N *************************************************
N *  @union		ctype
N *				Combined 32/16/8-bit type
N *************************************************
N */
Ntypedef union
N{								
N	__IO uint8_t    B[4];			/*!< Byte 8-bit 		*/
X	volatile uint8_t    B[4];			 
N	__IO uint16_t   H[2];			/*!< Half-Word 16-bit 	*/
X	volatile uint16_t   H[2];			 
N	__IO uint32_t   W;				/*!< Word 32-bit 		*/
X	volatile uint32_t   W;				 
N} ctype;
N
N
N/**
N *************************************************
N *  General definitions
N *************************************************
N */
N//#define     __I     volatile                /*!< defines 'read only' permissions		*/
N//#define     __O     volatile                /*!< defines 'write only' permissions		*/
N//#define     __IO    volatile                /*!< defines 'read / write' permissions	*/
N
N#define TRUE		1				/*!< True	*/
N#define FALSE		0				/*!< False	*/
N
N//#define ENABLE		1
N//#define DISABLE		0
N
N#define MASK8(val)  (((val) < 256) ? (val) : (val) < 65536 ? (val) >> 8 : (val) < 16777216 ?  (val) >> 16 : (val) >> 24)	/*!< Mask 8-bit		*/  
N#define MASK16(val)  (((val) < 65536) ? (val) : (val)>> 16) 																/*!< Mask 16-bit	*/
N
N/**
N ******************************************************************************
N * @enum        FunctionalState
N *              Enable/Disable
N ******************************************************************************
N */
Ntypedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;										/*!< Enable/Disable	*/
N/**
N ******************************************************************************
N * @enum        FlagStatus
N *              Clear/Se
N ******************************************************************************
N */
Ntypedef enum {CLR = 0, SET = !CLR} FlagStatus ,BitAction;											/*!< Clear/Set	*/
N/**
N ******************************************************************************
N * @enum        ITStatus
N *              None/Happened/Stable/Unstable
N ******************************************************************************
N */
Ntypedef enum {NONE = 0,  HAPPENED = !NONE, UNSTABLE = 0, STABLE = !UNSTABLE} ITStatus, CSCStatus;	/*!< None/Happened/Stable/Unstablee	*/       
N
N
N/**
N *************************************************
N *  Hardware Access
N *************************************************
N */
N 
N///**
N// * @brief  get register value
N// * @param  _reg : definitions of register name, like MODULE_REGNAME
N// */
N//#define HW_ReadReg(_reg)             (_reg)											/*!< Hardware Read Register */
N
N///**
N// * @brief  set register value
N// * @param  _reg : definitions of register name, like MODULE_REGNAME
N// * @param  _value : definitions of register value, like MODULE_REGNAME_xyz
N// */
N//#define HW_WriteReg(_reg, _value)     _reg = (_value)								/*!< Hardware Write Register */
N
N///**
N// * @brief  set register bits value =1
N// * @param  _reg : definitions of register name, like MODULE_REGNAME
N// * @param  _mask : definitions of register mask value, like MODULE_REGNAME_mask
N// */
N//#define HW_SetBit(_reg, _mask)		HW_WriteReg(_reg, (HW_ReadReg(_reg) | (_mask))) /*!< Hardware Set Register Bit */
N
N///**
N// * @brief  set register bits value =0
N// * @param  _reg : definitions of register name, like MODULE_REGNAME
N// * @param  _mask : definitions of register mask value, like MODULE_REGNAME_mask
N// */
N//#define HW_ClrBit(_reg, _mask)		HW_WriteReg(_reg, (HW_ReadReg(_reg) & ~(_mask)))    /*!< Hardware Clear Register Bit */
N
N/**
N * @brief  get register bit value
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  BIT : definitions of register mask value, like MODULE_REGNAME_mask
N */
N#define READ_BIT(REG, BIT)    ((REG) & (BIT))
N
N/**
N * @brief  clear register, value = 0
N * @param  REG : definitions of register name, like MODULE_REGNAME
N */
N#define CLEAR_REG(REG)        ((REG) = (0x0))                                       /*!< Hardware Clear Register */
N
N/**
N * @brief  set register value
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  VAL : definitions of register value, like MODULE_REGNAME_xyz
N */
N#define WRITE_REG(REG, VAL)   ((REG) = (VAL))                                       /*!< Hardware Write Register */
N
N/**
N * @brief  get register value
N * @param  REG : definitions of register name, like MODULE_REGNAME
N */
N#define READ_REG(REG)         ((REG))                                               /*!< Hardware Write Register */
N
N/**
N * @brief  set register bits value =1
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  BIT : definitions of register mask value, like MODULE_REGNAME_mask
N */
N#define SET_BIT(REG, BIT)     ((REG) |= (BIT))                                      /*!< Hardware Set Register Bit */
N
N/**
N * @brief  set register bits value =0
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  BIT : definitions of register mask value, like MODULE_REGNAME_mask
N */
N#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))                                     /*!< Hardware Clear Register Bit */
N
N/**
N * @brief  set register bits value =1
N * @param  REG : definitions of register name, like MODULE_REGNAME
N * @param  CLEARMASK : definitions of register mask value, like MODULE_REGNAME_mask
N * @param  SETMASK : definitions of register mask value, like MODULE_REGNAME_mask
N */
N#define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))  /*!< Hardware Register Modify */
N
N/**
N ******************************************************************************
N *
N *              Header Files Include
N *
N ******************************************************************************
N */
N//#include "MG32x02z__RegPointer.h"
N//#include "MG32x02z__RegAddress.h"
N//#include "MG32x02z_GPIO.h"
N//#include "MG32x02z_GPL.h"
N//#include "MG32x02z_DMA.h"
N//#include "MG32x02z_RST.h"
N//#include "MG32x02z_CSC.h"
N//#include "MG32x02z_PW.h"
N//#include "MG32x02z_SYS.h"
N//#include "MG32x02z_MEM.h"
N//#include "MG32x02z_EMB.h"
N//#include "MG32x02z_CFG.h"
N//#include "MG32x02z_EXIC.h"
N//#include "MG32x02z_I2C.h"
N//#include "MG32x02z_URT.h"
N//#include "MG32x02z_SPI.h"
N//#include "MG32x02z_TM.h"
N//#include "MG32x02z_ADC.h"
N//#include "MG32x02z_CMP.h"
N//#include "MG32x02z_DAC.h"
N//#include "MG32x02z_IWDT.h"
N//#include "MG32x02z_WWDT.h"
N//#include "MG32x02z_RTC.h"
N//#include "MG32x02z_APB.h"
N//#include "MG32x02z_CPU.h"
N
N#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050) /* ARM Compiler V6 */
X#if 1L && (5060960 >= 6010050)  
S  #ifndef __weak
S    #define __weak  __attribute__((weak))
S  #endif
S  #ifndef __packed
S    #define __packed  __attribute__((packed))
S  #endif
S#elif defined ( __GNUC__ ) && !defined (__CC_ARM) /* GNU Compiler */
X#elif 0L && !1L  
S  #ifndef __weak
S    #define __weak   __attribute__((weak))
S  #endif /* __weak */
S  #ifndef __packed
S    #define __packed __attribute__((__packed__))
S  #endif /* __packed */
N#endif /* __GNUC__ */
N
N/* Macro to get variable aligned on 4-bytes, for __ICCARM__ the directive "#pragma data_alignment=4" must be used instead */
N#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050) /* ARM Compiler V6 */
X#if 1L && (5060960 >= 6010050)  
S  #ifndef __ALIGN_BEGIN
S    #define __ALIGN_BEGIN
S  #endif
S  #ifndef __ALIGN_END
S    #define __ALIGN_END      __attribute__ ((aligned (4)))
S  #endif
S#elif defined ( __GNUC__ ) && !defined (__CC_ARM) /* GNU Compiler */
X#elif 0L && !1L  
S  #ifndef __ALIGN_END
S    #define __ALIGN_END    __attribute__ ((aligned (4)))
S  #endif /* __ALIGN_END */
S  #ifndef __ALIGN_BEGIN  
S    #define __ALIGN_BEGIN
S  #endif /* __ALIGN_BEGIN */
N#else
N  #ifndef __ALIGN_END
N    #define __ALIGN_END
N  #endif /* __ALIGN_END */
N  #ifndef __ALIGN_BEGIN      
N    #if defined   (__CC_ARM)      /* ARM Compiler V5*/
X    #if 1L       
N      #define __ALIGN_BEGIN    __align(4)  
N    #elif defined (__ICCARM__)    /* IAR Compiler */
S      #define __ALIGN_BEGIN 
N    #endif /* __CC_ARM */
N  #endif /* __ALIGN_BEGIN */
N#endif /* __GNUC__ */
N
N/** 
N  * @brief  __NOINLINE definition
N  */ 
N#if defined ( __CC_ARM   ) || (defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) || defined   (  __GNUC__  )
X#if 1L || (1L && (5060960 >= 6010050)) || 0L
N/* ARM V4/V5 and V6 & GNU Compiler
N   -------------------------------
N*/
N  #define __NOINLINE __attribute__ ( (noinline) )
N
N#elif defined ( __ICCARM__ )
S  /* ICCARM Compiler
S     ---------------
S  */
S  #define __NOINLINE _Pragma("optimize = no_inline")
S
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif  // _MG32x02z_H
N
N/*----------------------------------------------------------------------------*/
N/*                           End of file MG32x02z.h                           */
N/*----------------------------------------------------------------------------*/
L 40 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z_URT_DRV.h" 2
N#include "MG32x02z__Common_DRV.h" 
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z__Common_DRV.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z__Common_DRV.h
N *
N * @brief       This is the C code format driver head file.
N *
N * @par         Project
N *              MG32x02z
N * @version     V1.14
N * @date        2019/04/15
N * @author      Megawin Software Center
N * @copyright   Copyright (c) 2017 MegaWin Technology Co., Ltd.
N *              All rights reserved.
N *
N ******************************************************************************
N * @par 		Disclaimer 
N *		The Demo software is provided "AS IS"  without any warranty, either 
N *		expressed or implied, including, but not limited to, the implied warranties 
N *		of merchantability and fitness for a particular purpose.  The author will 
N *		not be liable for any special, incidental, consequential or indirect 
N *		damages due to loss of data or any other reason. 
N *		These statements agree with the world wide and local dictated laws about 
N *		authorship and violence against these laws. 
N ******************************************************************************
N ******************************************************************************
N */ 
N
N
N
N#ifndef _MG32x02z_Common_DRV_H
N#define _MG32x02z_Common_DRV_H
N#define _MG32x02z_Common_DRV_H_VER                            0.1      /*!< File Version */
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N
N#include "stdint.h"
N#include "stdio.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060044
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 42 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z__Common_DRV.h" 2
N#include "string.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060044
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 43 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z__Common_DRV.h" 2
N#include "MG32x02z.h"
N
N
N
N     // Debug Configuration Setting
N#define MG_Debug	1				/*!< 0=Normal, 1=Debug for Test Chip    */
N
N
N/**
N * @enum		DRV_Return
N * @brief		General Driver return status
N */
Ntypedef enum 
N{
N    /* common status values */
N    DRV_Logic0 = 0,             /*!<                                    */
N    DRV_Logic1 = 1,             /*!< operation failed					*/
N    DRV_Low = 0,                /*!< operation failed					*/
N    DRV_High = 1,               /*!< operation failed					*/
N    DRV_Normal = 0,             /*!< operation failed					*/
N    DRV_UnHappened = 0,         /*!< operation failed					*/
N    DRV_Happened = 1,           /*!< operation failed					*/
N    DRV_Success = 0,            /*!< successful outcome					*/
N    DRV_Failure = 1,            /*!< operation failed					*/
N    DRV_False = 0,              /*!<                                    */
N    DRV_True = !DRV_False,      /*!<                                    */
N    DRV_Unready = 0,            /*!<                                    */
N    DRV_Ready = !DRV_Unready,   /*!<                                    */
N
N    /* For PW module */
N    PW_HighThreshold = 0,
N    PW_LowThreshold = 1,
N    PW_None = 0,
N    PW_Sleep = 1,
N    PW_Stop = 2,    
N
N    DRV_Completed,              /*!< operation failed					*/
N    DRV_TimeOut,                /*!< operation failed					*/
N    DRV_OverRange,
N    DRV_OutsideLow,
N    DRV_OutsideHigh,
N    DRV_Inside,
N    DRV_Busy,                   /*!<                                    */
N    DRV_OverFlow,               /*!<                                    */
N    DRV_UnderFlow,              /*!<                                    */
N//	DRV_ERR_INVALID_HANDLE,		/*!< invalid handle						*/
N//	DRV_ERR_INVALID_ID,			/*!< invalid identifier					*/
N//	DRV_ERR_INVALID_PARAM,		/*!< invalid parameter					*/
N//	DRV_ERR_INVALID_OP,			/*!< requested operation is invalid		*/
N//	DRV_ERR_MEMORY_ALLOC,		/*!< problem allocating memory			*/
N//	DRV_ERR_MEMORY_SIZE,		/*!< problem with the size of memory	*/
N//	DRV_ERR_RESOURCE_UNAVAILABLE,
N//	DRV_ERR_TIMEOUT,			/*!< timeout							*/
N//	DRV_ERR_MAX					/*!< Max error number*/
N
N//	DRV_WARN_NO_ACTION,			/* < the function completed successfully,*/
N	                                /* < but no action was taken            */
N//	DRV_WARN_PARAM_CLIPPED,		/*!< the function has completed			*/
N//									/*!< successfully, though a parameter was	*/
N//									/*!< clipped to within a valid range.		*/
N//	DRV_WARN_BUFFER_EMPTY,
N//	DRV_WARN_BUFFER_FULL,
N//	DRV_WARN_UNINITED,			/*!< driver has not been initialized yet */
N//	DRV_WARN_INITED,			/*!< driver has been initialized already */
N
N}DRV_Return;           /*!< Driver Return Status Definitions */
N
N
N
N/**
N * @enum		Protect_Type
N * @brief		TMx interrupt enable source  
N */
Ntypedef enum { 
N    RSTprotect = (uint32_t)0x4C00000C,
N    CSCprotect = (uint32_t)0x4C01000C,  
N    PWprotect = (uint32_t)0x4C02000C,
N    MEMprotect = (uint32_t)0x4D00000C,  
N    MEMsprotect = (uint32_t)0x4D00000E,
N    CFGprotect = (uint32_t)0x4FF0000C,
N    IWDTprotect = (uint32_t)0x5D00000C,  
N    WWDTprotect = (uint32_t)0x5D01000C,  
N    RTCprotect = (uint32_t)0x5D04000C,
N}Protect_Type;          /*!< Definitions for protection function */
N
N
N
N
N/**
N * @enum		Lock_Type
N * @brief		Lock Module. 
N */
Ntypedef enum{
N    RSTLock = (uint32_t)0x4C00000E,
N    IWDTLock = (uint32_t)0x5D00000E,  
N    RTCLock = (uint32_t)0x5D04000E,
N}Lock_Type;             /*!< Definitions for locked function */
N
N
N
N#if defined(IRQHandler_Middleware_Level_)
X#if 0L
S  #define InitTick(__TickClock__, __TickPriority__) MID_InitTick(__TickPriority__)
S  #define Delay         MID_Delay
S  #define GetTick       MID_GetTick
S  #define SuspendTick   MID_SuspendTick
S  #define ResumeTick    MID_ResumeTick
N#else
N  DRV_Return InitTick(uint32_t TickClock, uint32_t TickPriority);
N  void IncTick(void);
N  void Delay(__IO uint32_t DelayTime);
X  void Delay(volatile uint32_t DelayTime);
N  uint32_t GetTick(void);
N  void SuspendTick(void);
N  void ResumeTick(void);
N#endif
N
NDRV_Return ProtectModuleReg(Protect_Type Module);             /*!< Protect Module Register Write */
NDRV_Return UnProtectModuleReg(Protect_Type Module);           /*!< UnProtect Module Register Write */
NDRV_Return LockModuleReg(Lock_Type Module);                   /*!< Lock Module Register Write until Chip Reset */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
N
N
L 41 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z_URT_DRV.h" 2
N#include "MG32x02z_URT.h"
L 1 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include\MG32x02z_URT.h" 1
N/**
N ******************************************************************************
N *
N * @file        MG32x02z_URT.h
N *
N * @brief       MG32x02z URT Register Definitions Header File
N *
N * @par         Project
N *              MG32x02z
N * @version     V3.9 (Register File Date : 2021_0331)
N * @date        2021/04/07 18:41 (H File Generated Date)
N * @author      HeadCodeGen V1.10
N * @copyright   Copyright (c) 2021 Megawin Technology Co., Ltd.
N *              All rights reserved.
N *
N * Important!   This file is generated by code generator. Do not edit!
N *
N ******************************************************************************
N */
N
N#ifndef _MG32x02z_URT_H
N#define _MG32x02z_URT_H
N#define _MG32x02z_URT_H_VER                         3.9     /*!< File Version */
N
N#if !(MG32x02z_H_VER == MG32x02z_URT_H_VER)
S    #error "MG32x02z_URT_H - Main/Module Version Mismatch !"
N#endif
N
N/**
N ******************************************************************************
N *
N * @struct      URT_Struct
N *              URT  [Module Structure Typedef]
N *
N ******************************************************************************
N */
Ntypedef struct
N{
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  RHF           :1;     //[0] UART receive hold flag
X            volatile uint8_t  RHF           :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  UGF           :1;     //[1] UART general event flag
X            volatile uint8_t  UGF           :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  TCF           :1;     //[2] UART transmission complete flag
X            volatile uint8_t  TCF           :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  ERRF          :1;     //[3] UART error interrupt flag for parity error, frame error, overrun error, receive time 
X            volatile uint8_t  ERRF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  LSF           :1;     //[4] UART line statue flag for break condition, idle line, CTS detect
X            volatile uint8_t  LSF           :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t  RXDF          :1;     //[5] UART received data byte number is different from previous received data byte number f
X            volatile const  uint8_t  RXDF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  RXF           :1;     //[6] UART receive data register not empty
X            volatile uint8_t  RXF           :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  TXF           :1;     //[7] UART transmit data register empty
X            volatile uint8_t  TXF           :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :1;     //[8] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[9] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  SADRF         :1;     //[10] UART slave address matched flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  SADRF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  BRTF          :1;     //[11] UART baud-rate generator timer timeout flag
X            volatile uint8_t  BRTF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  TMOF          :1;     //[12] UART timeout timer timeout flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  TMOF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  CALCF         :1;     //[13] UART auto baud-rate calibration complete flag
X            volatile uint8_t  CALCF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :1;     //[14] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[15] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  BKF           :1;     //[16] UART break condition detect flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  BKF           :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  IDLF          :1;     //[17] UART idle line detect flag. (set by hardware and clear by software writing 1)
X            volatile uint8_t  IDLF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  CTSF          :1;     //[18] UART CTS change detect interrupt flag
X            volatile uint8_t  CTSF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :1;     //[19] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  PEF           :1;     //[20] UART parity error flag
X            volatile uint8_t  PEF           :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  FEF           :1;     //[21] UART frame error flag.  (set by hardware and clear by software writing 1)
X            volatile uint8_t  FEF           :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  NCEF          :1;     //[22] UART receive noised character error flag
X            volatile uint8_t  NCEF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  ROVRF         :1;     //[23] UART receive overrun error flag
X            volatile uint8_t  ROVRF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  TXEF          :1;     //[24] UART TX error detect flag
X            volatile uint8_t  TXEF          :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :2;     //[26..25] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  RXTMOF        :1;     //[27] UART receive time out flag.  (set by hardware and clear by software writing 1)
X            volatile uint8_t  RXTMOF        :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  IDTMOF        :1;     //[28] UART idle state time out flag.  (set by hardware and clear by software writing 1)
X            volatile uint8_t  IDTMOF        :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  BKTMOF        :1;     //[29] UART break receive time out flag.  (set by hardware and clear by software writing 1)
X            volatile uint8_t  BKTMOF        :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __IO uint8_t  CALTMOF       :1;     //[30] UART auto baud-rate calibration sync field receive time-out time out flag
X            volatile uint8_t  CALTMOF       :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t                :1;     //[31] 
X            volatile const  uint8_t                :1;     
N        }MBIT;
N    }STA;                               /*!< STA        ~ Offset[0x00]  URT status register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  IEA           :1;     //[0] UART interrupt all enable
X            volatile uint8_t  IEA           :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  UG_IE         :1;     //[1] UART general event interrupt enable for URTx_SADRF , URTx_TF , URTx_RCNTF or URTx_TCN
X            volatile uint8_t  UG_IE         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TC_IE         :1;     //[2] UART transmission complete interrupt enable
X            volatile uint8_t  TC_IE         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  ERR_IE        :1;     //[3] UART error interrupt enable for parity error, frame error, overrun error, receive tim
X            volatile uint8_t  ERR_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  LS_IE         :1;     //[4] UART line statue flag for break condition, idle line, CTS detect.
X            volatile uint8_t  LS_IE         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[5] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  RX_IE         :1;     //[6] UART receive data register not empty interrupt enable
X            volatile uint8_t  RX_IE         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TX_IE         :1;     //[7] UART transmit data register empty interrupt enable. Refer to URTx_TXF for the detail.
X            volatile uint8_t  TX_IE         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[8] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[9] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  SADR_IE       :1;     //[10] UART slave address matched interrupt enable.
X            volatile uint8_t  SADR_IE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  BRT_IE        :1;     //[11] UART baud-rate generator timer timeout interrupt enable.
X            volatile uint8_t  BRT_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TMO_IE        :1;     //[12] UART timeout timer timeout interrupt enable.
X            volatile uint8_t  TMO_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CALC_IE       :1;     //[13] UART auto baud-rate calibration complete interrupt enable.
X            volatile uint8_t  CALC_IE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[14] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[15] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  BK_IE         :1;     //[16] UART break condition detect interrupt enable.
X            volatile uint8_t  BK_IE         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  IDL_IE        :1;     //[17] UART idle line detect interrupt enable.
X            volatile uint8_t  IDL_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CTS_IE        :1;     //[18] UART CTS change detect interrupt enable.
X            volatile uint8_t  CTS_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[19] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  PE_IE         :1;     //[20] UART parity error interrupt enable.
X            volatile uint8_t  PE_IE         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  FE_IE         :1;     //[21] UART frame error interrupt enable.
X            volatile uint8_t  FE_IE         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  NCE_IE        :1;     //[22] UART receive noised character interrupt enable. 
X            volatile uint8_t  NCE_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  ROVR_IE       :1;     //[23] UART receive overrun error interrupt enable. Refer to URTx_ROVRF for the detail.
X            volatile uint8_t  ROVR_IE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TXE_IE        :1;     //[24] UART TX error detect interrupt enable. Refer to URTx_TXE_MDS for detail.
X            volatile uint8_t  TXE_IE        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :2;     //[26..25] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  RXTMO_IE      :1;     //[27] UART receive time out interrupt enable.
X            volatile uint8_t  RXTMO_IE      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  IDTMO_IE      :1;     //[28] UART idle state time out interrupt enable.
X            volatile uint8_t  IDTMO_IE      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  BKTMO_IE      :1;     //[29] UART break receive time out interrupt enable.
X            volatile uint8_t  BKTMO_IE      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CALTMO_IE     :1;     //[30] UART auto baud-rate calibration sync field receive time-out time out interrupt enable
X            volatile uint8_t  CALTMO_IE     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[31] 
X            volatile const  uint8_t                :1;     
N        }MBIT;
N    }INT;                               /*!< INT        ~ Offset[0x04]  URT interrupt enable register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :1;     //[0] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CK_SEL        :3;     //[3..1] UART internal clock CK_UART source select.
X            volatile uint8_t  CK_SEL        :3;     
N                                        //0x0 = PROC : CK_URTx_PR process clock from CSC
N                                        //0x1 = Reserved (PROC)
N                                        //0x2 = CK_LS
N                                        //0x3 = TM00_TRGO
N                                        //0x4 = Reserved (PROC)
N            __IO uint8_t  CLK_EN        :1;     //[4] URTx_CLK signal output enable.
X            volatile uint8_t  CLK_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CLK_CKS       :1;     //[5] UART external clock output source select.
X            volatile uint8_t  CLK_CKS       :1;     
N                                        //0 = OUT : CK_URTx_OUT from clock output divider
N                                        //1 = SC : CK_URTx_SC from clock  input prescaler
N            __I  uint8_t                :2;     //[7..6] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __IO uint8_t  RX_CKS        :2;     //[17..16] UART receive clock source select.
X            volatile uint8_t  RX_CKS        :2;     
N                                        //0x0 = Internal : UART internal clock source CK_URTx_INT
N                                        //0x1 = TM01_TRGO
N                                        //0x2 = TM10_TRGO
N                                        //0x3 = Reserved
N            __I  uint8_t                :2;     //[19..18] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  TX_CKS        :2;     //[21..20] UART transmission clock source select.
X            volatile uint8_t  TX_CKS        :2;     
N                                        //0x0 = Internal : UART internal clock source CK_URTx_INT
N                                        //0x1 = TM01_TRGO
N                                        //0x2 = TM10_TRGO
N                                        //0x3 = Reserved
N            __I  uint8_t                :2;     //[23..22] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  BR_EN         :1;     //[24] UART baud-rate timer enable. When enables, the baud-rate timer 
X            volatile uint8_t  BR_EN         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  BR_MDS        :1;     //[25] UART baud-rate timer mode select
X            volatile uint8_t  BR_MDS        :1;     
N                                        //0 = Separated : Separated PSC and CNT counters for UART baud-rate generator
N                                        //1 = Combined : Combine to a linear counter for general using timer
N            __IO uint8_t  BRO_STA       :1;     //[26] UART baud-rate timer timeout signal initial state
X            volatile uint8_t  BRO_STA       :1;     
N                                        //0 = 0 (Output 0)
N                                        //1 = 1 (Output 1)
N            __IO uint8_t  BRO_LCK       :1;     //[27] UART baud-rate timer timeout signal initial state control
X            volatile uint8_t  BRO_LCK       :1;     
N                                        //0 = Locked
N                                        //1 = Un-Locked
N            __IO uint8_t  CKO_STA       :1;     //[28] UART PSC clock output signal initial state
X            volatile uint8_t  CKO_STA       :1;     
N                                        //0 = 0 (Output 0)
N                                        //1 = 1 (Output 1)
N            __IO uint8_t  CKO_LCK       :1;     //[29] UART PSC clock output signal initial state control
X            volatile uint8_t  CKO_LCK       :1;     
N                                        //0 = Locked
N                                        //1 = Un-Locked
N            __I  uint8_t                :2;     //[31..30] 
X            volatile const  uint8_t                :2;     
N        }MBIT;
N    }CLK;                               /*!< CLK        ~ Offset[0x08]  URT clock source register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  BUSYF         :1;     //[0] UART RX busy flag
X            volatile const  uint8_t  BUSYF         :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Busy (Event happened)
N            __I  uint8_t  PAR           :1;     //[1] UART data receive parity bit of shift buffer
X            volatile const  uint8_t  PAR           :1;     
N            __I  uint8_t  ADR           :1;     //[2] UART data receive slave address bit of shift buffer.
X            volatile const  uint8_t  ADR           :1;     
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[4] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  NCF           :1;     //[5] UART receive noised character flag.  (set and clear by hardware)
X            volatile const  uint8_t  NCF           :1;     
N                                        //0 = Normal (No event occurred)
N                                        //1 = Happened (Event happened)
N            __I  uint8_t  BKBF          :1;     //[6] UART send break busy flag.  (set and clear by hardware)
X            volatile const  uint8_t  BKBF          :1;     
N                                        //0 = Normal (No break transmitted or transmit finished)
N                                        //1 = Busy (Event happened)
N            __I  uint8_t  IR_BUSYF      :1;     //[7] UART IrDA data received busy flag. 
X            volatile const  uint8_t  IR_BUSYF      :1;     
N                                        //0 = No (No IrDA signal detect)
N                                        //1 = Busy (detect some IrDA signal)
N            __I  uint8_t                :1;     //[8] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[9] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :2;     //[11..10] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t  CTS           :1;     //[12] UART CTS line status bit
X            volatile const  uint8_t  CTS           :1;     
N            __I  uint8_t                :1;     //[13] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[14] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[15] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :8;     //[23..16] 
X            volatile const  uint8_t                :8;     
N            __I  uint8_t  RX_LVL        :3;     //[26..24] UART data buffer received level indications.
X            volatile const  uint8_t  RX_LVL        :3;     
N                                        //0x0 = 0 (0-byte,empty)
N                                        //0x1 = 1 (1-byte)
N                                        //0x2 = 2 (2-byte)
N                                        //0x3 = 3 (3-byte)
N                                        //0x4 = 4 (4-byte)
N            __I  uint8_t                :1;     //[27] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  TX_LVL        :3;     //[30..28] UART data buffer transmission remained level indications.
X            volatile const  uint8_t  TX_LVL        :3;     
N                                        //0x0 = 0 (0-byte,empty)
N                                        //0x1 = 1 (1-byte)
N                                        //0x2 = 2 (2-byte)
N                                        //0x3 = 3 (3-byte)
N                                        //0x4 = 4 (4-byte)
N            __I  uint8_t                :1;     //[31] 
X            volatile const  uint8_t                :1;     
N        }MBIT;
N    }STA2;                              /*!< STA2       ~ Offset[0x0C]  URT status register 2 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  EN            :1;     //[0] UART function enable bit.
X            volatile uint8_t  EN            :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  OS_MDS        :1;     //[1] UART RX data oversampling majority vote select.
X            volatile uint8_t  OS_MDS        :1;     
N                                        //0 = Three : Three sample bits method
N                                        //1 = One : One sample bit method and noise free
N            __IO uint8_t  HDX_EN        :1;     //[2] UART Half-duplex mode enable
X            volatile uint8_t  HDX_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  DAT_LINE      :1;     //[3] UART communication data line select.
X            volatile uint8_t  DAT_LINE      :1;     
N                                        //0 = 2 : 2-lines separated ~ URTx_RX , URTx_TX
N                                        //1 = 1 : 1-line Bidirectional ~URTx_TX only.
N            __IO uint8_t  MDS           :3;     //[6..4] UART mode select
X            volatile uint8_t  MDS           :3;     
N                                        //0x0 = UART : UART mode
N                                        //0x1 = SYNC : Synchronous/Shift-Register mode
N                                        //0x2 = IDLE : Idle-line mode for multi-processor
N                                        //0x3 = ADR : Address-bit mode for multi-processor
N            __IO uint8_t  GSA_EN        :1;     //[7] UART multi-processor global slave address enable.
X            volatile uint8_t  GSA_EN        :1;     
N            __IO uint8_t  IO_SWP        :1;     //[8] URTx_RX/URTx_TX swap enable bit.
X            volatile uint8_t  IO_SWP        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[9] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  RX_INV        :1;     //[10] URTx_RX input signal inverse enable.
X            volatile uint8_t  RX_INV        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TX_INV        :1;     //[11] URTx_TX output signal inverse enable.
X            volatile uint8_t  TX_INV        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  DE_EN         :1;     //[12] URTx_DE signal output enable.
X            volatile uint8_t  DE_EN         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  DE_INV        :1;     //[13] URTx_DE signal inverse enable. The hardware DE output default is low level.
X            volatile uint8_t  DE_INV        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  DE_GT         :2;     //[15..14] URTx_DE signal output guard time select by unit of bit time
X            volatile uint8_t  DE_GT         :2;     
N                                        //0x0 = 1/4
N                                        //0x1 = 1/2
N                                        //0x2 = 1
N                                        //0x3 = 2
N            __IO uint8_t  RX_TH         :2;     //[17..16] UART data buffer high threshold for received access
X            volatile uint8_t  RX_TH         :2;     
N                                        //0x0 = 1byte (default)
N                                        //0x1 = 2byte
N                                        //0x2 = 3byte
N                                        //0x3 = 4byte
N            __I  uint8_t                :2;     //[19..18] 
X            volatile const  uint8_t                :2;     
N            __IO uint8_t  IDL_MDS       :1;     //[20] UART idle line detect management mode select
X            volatile uint8_t  IDL_MDS       :1;     
N                                        //0 = No (No operation)
N                                        //1 = Load (Force to load shadow buffer)
N            __IO uint8_t  NCHAR_HE      :1;     //[21] UART receiving hold enable bit if receives a noised character
X            volatile uint8_t  NCHAR_HE      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  NCHAR_DIS     :1;     //[22] UART receiving noised character disable bit
X            volatile uint8_t  NCHAR_DIS     :1;     
N                                        //0 = Enable (Accept noised character)
N                                        //1 = Disable (Skip noised character)
N            __IO uint8_t  LBM_EN        :1;     //[23] UART Loop back mode enable bit
X            volatile uint8_t  LBM_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[24] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :4;     //[28..25] 
X            volatile const  uint8_t                :4;     
N            __IO uint8_t  DDTX_EN       :1;     //[29] Hardware force to disable DMA TX function enable bit when detects a break condition
X            volatile uint8_t  DDTX_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  DMA_RXEN      :1;     //[30] Direct memory access enable to receive
X            volatile uint8_t  DMA_RXEN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  DMA_TXEN      :1;     //[31] Direct memory access enable to transmit
X            volatile uint8_t  DMA_TXEN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N        }MBIT;
N    }CR0;                               /*!< CR0        ~ Offset[0x10]  URT control register 0 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  RXDSIZE       :2;     //[1..0] UART RX data bit length
X            volatile uint8_t  RXDSIZE       :2;     
N                                        //0x0 = 8bit
N                                        //0x1 = 7bit
N                                        //0x2 = Reserved
N                                        //0x3 = Reserved
N            __IO uint8_t  RXPAR_EN      :1;     //[2] UART RX parity bit enable
X            volatile uint8_t  RXPAR_EN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  RXPAR_POL     :1;     //[3] UART RX parity bit polarity. This bit is no effect for SYNC mods.
X            volatile uint8_t  RXPAR_POL     :1;     
N                                        //0x0 = Even
N                                        //0x1 = Odd
N            __IO uint8_t  RXPAR_STK     :1;     //[4] UART stuck parity bit input enable
X            volatile uint8_t  RXPAR_STK     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  RXMSB_EN      :1;     //[5] UART RX data order Msb first enable
X            volatile uint8_t  RXMSB_EN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  RXSTP_LEN     :2;     //[7..6] UART RX stop bit length select
X            volatile uint8_t  RXSTP_LEN     :2;     
N                                        //0x0 = 0.5bit
N                                        //0x1 = 1bit
N                                        //0x2 = Reserved
N                                        //0x3 = 2bit
N            __IO uint8_t  RXOS_NUM      :5;     //[12..8] UART RX data oversampling samples select
X            volatile uint8_t  RXOS_NUM      :5;     
N            __I  uint8_t                :3;     //[15..13] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  TXDSIZE       :2;     //[17..16] UART TX data bit length
X            volatile uint8_t  TXDSIZE       :2;     
N                                        //0x0 = 8bit
N                                        //0x1 = 7bit
N                                        //0x2 = Reserved
N                                        //0x3 = Reserved
N            __IO uint8_t  TXPAR_EN      :1;     //[18] UART TX parity bit enable
X            volatile uint8_t  TXPAR_EN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TXPAR_POL     :1;     //[19] UART TX parity bit polarity. This bit is no effect for SPI and SYNC mods.
X            volatile uint8_t  TXPAR_POL     :1;     
N                                        //0x0 = Even
N                                        //0x1 = Odd
N            __IO uint8_t  TXPAR_STK     :1;     //[20] UART stuck parity bit output enable
X            volatile uint8_t  TXPAR_STK     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TXMSB_EN      :1;     //[21] UART TX data order Msb first enable
X            volatile uint8_t  TXMSB_EN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TXSTP_LEN     :2;     //[23..22] UART TX stop bit length select
X            volatile uint8_t  TXSTP_LEN     :2;     
N                                        //0x0 = 0.5bit (Reserved)
N                                        //0x1 = 1bit
N                                        //0x2 = 1.5bit (Reserved)
N                                        //0x3 = 2bit
N            __IO uint8_t  TXOS_NUM      :5;     //[28..24] UART TX data oversampling samples select
X            volatile uint8_t  TXOS_NUM      :5;     
N            __I  uint8_t                :3;     //[31..29] 
X            volatile const  uint8_t                :3;     
N        }MBIT;
N    }CR1;                               /*!< CR1        ~ Offset[0x14]  URT control register 1 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  BK_TX         :1;     //[0] UART break condition for next data transmitted
X            volatile uint8_t  BK_TX         :1;     
N                                        //0 = Normal
N                                        //1 = Send : Send Break
N            __IO uint8_t  ADR_TX        :1;     //[1] UART slave address for next data transmitted
X            volatile uint8_t  ADR_TX        :1;     
N                                        //0 = Normal
N                                        //1 = Send : Send Address
N            __IO uint8_t  RX_EN         :1;     //[2] UART receiver enable
X            volatile uint8_t  RX_EN         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TX_EN         :1;     //[3] UART transmitter enable.
X            volatile uint8_t  TX_EN         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TX_HALT       :1;     //[4] UART transmitter halt enable.
X            volatile uint8_t  TX_HALT       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :3;     //[7..5] 
X            volatile const  uint8_t                :3;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __IO uint8_t  NSS_SWO       :1;     //[16] UART NSS signal software output control bit when URTx_NSS_SWEN is enable.
X            volatile uint8_t  NSS_SWO       :1;     
N            __I  uint8_t                :1;     //[17] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :6;     //[23..18] 
X            volatile const  uint8_t                :6;     
N            __I  uint8_t                :1;     //[24] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  NSS_INV       :1;     //[25] UART NSS output signal inverse enable
X            volatile uint8_t  NSS_INV       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  NSS_SWEN      :1;     //[26] UART NSS signal output set by software control function enable bit.
X            volatile uint8_t  NSS_SWEN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[27] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :2;     //[29..28] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :2;     //[31..30] 
X            volatile const  uint8_t                :2;     
N        }MBIT;
N    }CR2;                               /*!< CR2        ~ Offset[0x18]  URT control register 2 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :1;     //[0] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CPOL          :1;     //[1] UART clock polarity select. It is used to select the SPI clock level in idle state.
X            volatile uint8_t  CPOL          :1;     
N                                        //0 = Low
N                                        //1 = High
N            __IO uint8_t  CPHA          :1;     //[2] UART clock phase select
X            volatile uint8_t  CPHA          :1;     
N                                        //0 = Leading edge
N                                        //1 = Trailing edge
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  DET_BK        :1;     //[4] UART bit time select for break detection or transmission
X            volatile uint8_t  DET_BK        :1;     
N                                        //0x0 = 1Bit
N                                        //0x1 = 3Bit
N            __I  uint8_t                :3;     //[7..5] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  DET_IDL       :8;     //[15..8] UART idle line detect threshold value by using receive bit time
X            volatile uint8_t  DET_IDL       :8;     
N            __IO uint8_t  TXGT_LEN      :8;     //[23..16] UART TX guard time or idle-line length
X            volatile uint8_t  TXGT_LEN      :8;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }CR3;                               /*!< CR3        ~ Offset[0x1C]  URT control register 3 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t                :1;     //[0] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[2] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[3] 
X            volatile const  uint8_t                :1;     
N            __O  uint8_t  RDAT_INV      :1;     //[4] UART inverse received data enable
X            volatile  uint8_t  RDAT_INV      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __O  uint8_t  TDAT_INV      :1;     //[5] UART inverse transmitted data enable
X            volatile  uint8_t  TDAT_INV      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __O  uint8_t  RDAT_CLR      :1;     //[6] UART  received data clear enable
X            volatile  uint8_t  RDAT_CLR      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __O  uint8_t  TDAT_CLR      :1;     //[7] UART  transmitted data clear enable
X            volatile  uint8_t  TDAT_CLR      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  RNUM          :3;     //[10..8] UART received data byte number when data shadow buffer last transfer to URTx_RDAT reg
X            volatile uint8_t  RNUM          :3;     
N                                        //0x0 = 0 (0-byte)
N                                        //0x1 = 1 (1-byte)
N                                        //0x2 = 2 (2-byte)
N                                        //0x3 = 3 (3-byte)
N                                        //0x4 = 4 (4-byte)
N            __I  uint8_t                :1;     //[11] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t  TNUM          :3;     //[14..12] UART remained data byte number in data register. Value 0~4 is valid only.
X            volatile const  uint8_t  TNUM          :3;     
N                                        //0x0 = 0 (0-byte)
N                                        //0x1 = 1 (1-byte)
N                                        //0x2 = 2 (2-byte)
N                                        //0x3 = 3 (3-byte)
N                                        //0x4 = 4 (4-byte)
N            __I  uint8_t                :1;     //[15] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :8;     //[23..16] 
X            volatile const  uint8_t                :8;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }CR4;                               /*!< CR4        ~ Offset[0x20]  URT control register 4 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  RLR           :8;     //[7..0] UART baud-rate clock counter reload register
X            volatile uint8_t  RLR           :8;     
N            __IO uint8_t  PSR           :4;     //[11..8] UART baud-rate clock prescaler reload register
X            volatile uint8_t  PSR           :4;     
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }RLR;                               /*!< RLR        ~ Offset[0x24]  URT baud-rate clock counter reload register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  CNT           :8;     //[7..0] UART baud-rate clock counter value register.
X            volatile const  uint8_t  CNT           :8;     
N            __I  uint8_t  PSC           :4;     //[11..8] UART baud-rate clock prescaler value register.
X            volatile const  uint8_t  PSC           :4;     
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CNT;                               /*!< CNT        ~ Offset[0x28]  URT baud-rate clock counter register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  RCAP_DAT      :8;     //[7..0] UART capture data from RX shift buffer for Parity error / Frame error / Break detect 
X            volatile uint8_t  RCAP_DAT      :8;     
N            __IO uint8_t  RCAP_STP      :1;     //[8] UART capture stop bit from RX shift buffer.
X            volatile uint8_t  RCAP_STP      :1;     
N            __IO uint8_t  RCAP_PAR      :1;     //[9] UART capture parity bit from RX shift buffer.
X            volatile uint8_t  RCAP_PAR      :1;     
N            __IO uint8_t  RCAP_ADR      :1;     //[10] UART capture address bit from RX shift buffer.
X            volatile uint8_t  RCAP_ADR      :1;     
N            __I  uint8_t                :5;     //[15..11] 
X            volatile const  uint8_t                :5;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }RCAP;                              /*!< RCAP       ~ Offset[0x2C]  URT RX data capture register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint32_t RDAT          :32;    //[31..0] UART received data register
X            volatile const  uint32_t RDAT          :32;    
N        }MBIT;
N    }RDAT;                              /*!< RDAT       ~ Offset[0x30]  URT RX data register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint32_t TDAT          :32;    //[31..0] UART transmitted data register
X            volatile uint32_t TDAT          :32;    
N        }MBIT;
N    }TDAT;                              /*!< TDAT       ~ Offset[0x34]  URT TX data register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __O  uint32_t TDAT3         :24;    //[23..0] UART transmitted data register for 3-byte data write only
X            volatile  uint32_t TDAT3         :24;    
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }TDAT3;                             /*!< TDAT3      ~ Offset[0x38]  URT TX data 3-byte register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __I  uint8_t  RSBUF         :8;     //[7..0] UART RX data shift buffer register.
X            volatile const  uint8_t  RSBUF         :8;     
N            __I  uint8_t  TSBUF         :8;     //[15..8] UART TX data shift buffer register.
X            volatile const  uint8_t  TSBUF         :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }SBUF;                              /*!< SBUF       ~ Offset[0x3C]  URT data shift buffer register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  TMO_EN        :1;     //[0] UART timeout timer enable.
X            volatile uint8_t  TMO_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TMO_RST       :1;     //[1] UART timeout timer force reset enable. (set by software and clear by hardware)
X            volatile uint8_t  TMO_RST       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TMO_MDS       :2;     //[3..2] UART timeout timer mode select
X            volatile uint8_t  TMO_MDS       :2;     
N                                        //0x0 = UART : UART timeout timer
N                                        //0x1 = General : general using timer
N            __IO uint8_t  IDTMO_EN      :1;     //[4] UART Idle timeout detection enable bit
X            volatile uint8_t  IDTMO_EN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  RXTMO_EN      :1;     //[5] UART RX timeout enable bit for shadow buffer data loading into URTx_RDAT
X            volatile uint8_t  RXTMO_EN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  BKTMO_EN      :1;     //[6] UART Break timeout detection enable bit
X            volatile uint8_t  BKTMO_EN      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CALTMO_EN     :1;     //[7] UART Calibration timeout detection enable bit
X            volatile uint8_t  CALTMO_EN     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  TMO_CKS       :3;     //[10..8] UART timeout timer clock source select
X            volatile uint8_t  TMO_CKS       :3;     
N                                        //0x0 = UART (CK_URTx_BIT clock)
N                                        //0x1 = Input (CK_UART clock input) 
N                                        //0x2 = Noise (Noise bit receive event)
N                                        //0x3 = Reserved
N            __I  uint8_t                :3;     //[13..11] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  TMO_STA       :1;     //[14] UART timeout timer timeout signal initial state
X            volatile uint8_t  TMO_STA       :1;     
N                                        //0 = 0 (Output 0)
N                                        //1 = 1 (Output 1)
N            __IO uint8_t  TMO_LCK       :1;     //[15] UART timeout timer timeout signal initial state control
X            volatile uint8_t  TMO_LCK       :1;     
N                                        //0 = Locked
N                                        //1 = Un-Locked
N            __IO uint8_t  RXTMO_TH      :8;     //[23..16] UART RX data buffer timeout detect threshold value by using receive bit time
X            volatile uint8_t  RXTMO_TH      :8;     
N            __IO uint8_t  BKTMO_TH      :4;     //[27..24] UART receive Break timeout detect threshold value by using receive bit time
X            volatile uint8_t  BKTMO_TH      :4;     
N            __IO uint8_t  CALTMO_TH     :4;     //[31..28] UART calibration timeout detect threshold value for TMO counter value comparison
X            volatile uint8_t  CALTMO_TH     :4;     
N        }MBIT;
N    }TMOUT;                             /*!< TMOUT      ~ Offset[0x40]  URT timeout control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint16_t IDTMO_TH      :16;    //[15..0] UART receive idle timeout detect threshold value by using receive bit time
X            volatile uint16_t IDTMO_TH      :16;    
N            __IO uint16_t TMO_CNT       :16;    //[31..16] UART timeout counter value.
X            volatile uint16_t TMO_CNT       :16;    
N        }MBIT;
N    }TMOUT2;                            /*!< TMOUT2     ~ Offset[0x44]  URT timeout control register 2 */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  RXE_MDS       :2;     //[1..0] UART RX parity error detect control mode select
X            volatile uint8_t  RXE_MDS       :2;     
N                                        //0x0 = Disable
N                                        //0x1 = Enable : hardware RX auto retry number by setting URTx_RXE_NUM
N                                        //0x2 = Auto : hardware RX auto retry always unless receiving parity correct character
N            __IO uint8_t  TXE_MDS       :2;     //[3..2] UART TX error detect mode select
X            volatile uint8_t  TXE_MDS       :2;     
N                                        //0x0 = Disable
N                                        //0x1 = CHK_Low : check asserted low by RX device (for SmartCard)
N                                        //0x2 = CHK_TX : check TX data by RX input data (for LIN mode)
N                                        //0x3 = Reserved
N            __IO uint8_t  RXE_LEN       :1;     //[4] UART RX parity error detect and NACK transmission 
X            volatile uint8_t  RXE_LEN       :1;     
N                                        //0x0 = 1Bit
N                                        //0x1 = 2Bit
N            __I  uint8_t                :3;     //[7..5] 
X            volatile const  uint8_t                :3;     
N            __IO uint8_t  TXE_NUM       :3;     //[10..8] UART TX error detect and data resend maximum number
X            volatile uint8_t  TXE_NUM       :3;     
N            __I  uint8_t                :1;     //[11] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  RXE_NUM       :3;     //[14..12] UART RX parity error detect and NACK transmission retry maximum number
X            volatile uint8_t  RXE_NUM       :3;     
N            __I  uint8_t                :1;     //[15] 
X            volatile const  uint8_t                :1;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }SC;                                /*!< SC         ~ Offset[0x48]  URT SmartCard control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  SA_RX         :8;     //[7..0] UART multi-processor mode received slave address
X            volatile uint8_t  SA_RX         :8;     
N            __IO uint8_t  SA_MSK        :8;     //[15..8] UART multi-processor slave address mask register
X            volatile uint8_t  SA_MSK        :8;     
N            __I  uint8_t                :8;     //[23..16] 
X            volatile const  uint8_t                :8;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }SADR;                              /*!< SADR       ~ Offset[0x4C]  URT slave address detect register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  CAL_EN        :1;     //[0] UART baud-rate calibration enable
X            volatile uint8_t  CAL_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CAL_AUTO      :1;     //[1] UART Break detection and auto baud-rate calibration enable
X            volatile uint8_t  CAL_AUTO      :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CAL_MDS       :2;     //[3..2] UART auto baud-rate calibration mode select.
X            volatile uint8_t  CAL_MDS       :2;     
N                                        //0x0 = Start : measure the start bit
N                                        //0x1 = Edge : measure start falling edge to next falling edge
N                                        //0x2 = Reserved
N                                        //0x3 = Reserved
N            __I  uint8_t                :2;     //[5..4] 
X            volatile const  uint8_t                :2;     
N            __I  uint8_t                :1;     //[6] 
X            volatile const  uint8_t                :1;     
N            __IO uint8_t  CALC_HE       :1;     //[7] UART auto baud-rate calibration complete data receive hold enable
X            volatile uint8_t  CALC_HE       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :4;     //[11..8] 
X            volatile const  uint8_t                :4;     
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }CAL;                               /*!< CAL        ~ Offset[0x50]  URT calibration control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  IR_EN         :1;     //[0] UART IrDA data format enable
X            volatile uint8_t  IR_EN         :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :1;     //[1] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :6;     //[7..2] 
X            volatile const  uint8_t                :6;     
N            __IO uint8_t  IR_PW         :4;     //[11..8] UART IrDA output pulse width select
X            volatile uint8_t  IR_PW         :4;     
N            __I  uint8_t                :4;     //[15..12] 
X            volatile const  uint8_t                :4;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }IRDA;                              /*!< IRDA       ~ Offset[0x54]  URT IrDA control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  CTS_EN        :1;     //[0] UART CTS hardware flow control enable
X            volatile uint8_t  CTS_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  RTS_EN        :1;     //[1] UART RTS hardware flow control enable
X            volatile uint8_t  RTS_EN        :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  CTS_INV       :1;     //[2] URTx_CTS input inverse enable.
X            volatile uint8_t  CTS_INV       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  RTS_INV       :1;     //[3] URTx_RTS output inverse enable
X            volatile uint8_t  RTS_INV       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  RTS_OUT       :1;     //[4] URTx_RTS output control data bit. This bit is no effect when URTx_RTS_EN is set.
X            volatile uint8_t  RTS_OUT       :1;     
N                                        //0 = 0 (Output 0)
N                                        //1 = 1 (Output 1)
N            __I  uint8_t                :1;     //[5] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[6] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :1;     //[7] 
X            volatile const  uint8_t                :1;     
N            __I  uint8_t                :8;     //[15..8] 
X            volatile const  uint8_t                :8;     
N            __I  uint16_t               :16;    //[31..16] 
X            volatile const  uint16_t               :16;    
N        }MBIT;
N    }HFC;                               /*!< HFC        ~ Offset[0x58]  URT hardware flow control register */
N
N    union
N    {
N        __IO  uint32_t  W;
X        volatile  uint32_t  W;
N        __IO  uint16_t  H[2];
X        volatile  uint16_t  H[2];
N        __IO  uint8_t   B[4];
X        volatile  uint8_t   B[4];
N        struct
N        {
N            __IO uint8_t  MUTE_EN       :1;     //[0] UART mute mode enable
X            volatile uint8_t  MUTE_EN       :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :7;     //[7..1] 
X            volatile const  uint8_t                :7;     
N            __IO uint8_t  MUTE_AEN0     :1;     //[8] UART mute mode auto enter by multi-processor slave address unmatched condition enable
X            volatile uint8_t  MUTE_AEN0     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  MUTE_AEN1     :1;     //[9] UART mute mode auto enter by idle line detection enable bit
X            volatile uint8_t  MUTE_AEN1     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :6;     //[15..10] 
X            volatile const  uint8_t                :6;     
N            __IO uint8_t  MUTE_AEX0     :1;     //[16] UART auto exit mute mode and receive data by multi-processor slave address matched co
X            volatile uint8_t  MUTE_AEX0     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  MUTE_AEX1     :1;     //[17] UART auto exit mute mode and receive data by Break condition detection enable bit
X            volatile uint8_t  MUTE_AEX1     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __IO uint8_t  MUTE_AEX2     :1;     //[18] UART auto exit mute mode and receive data by  idle line detection enable bit
X            volatile uint8_t  MUTE_AEX2     :1;     
N                                        //0 = Disable
N                                        //1 = Enable
N            __I  uint8_t                :5;     //[23..19] 
X            volatile const  uint8_t                :5;     
N            __I  uint8_t                :8;     //[31..24] 
X            volatile const  uint8_t                :8;     
N        }MBIT;
N    }MUTE;                              /*!< MUTE       ~ Offset[0x5C]  URT mute control register */
N
N} URT_Struct;
N
N/**
N ******************************************************************************
N *
N * @name        URT  [Base Address/Type]
N *
N ******************************************************************************
N */
N///@{
N#define URT0_Base                       ((uint32_t)0x52000000)              /*!< UART Control Module-0 */
N#define URT1_Base                       ((uint32_t)0x52010000)              /*!< UART Control Module-1 */
N#define URT2_Base                       ((uint32_t)0x52020000)              /*!< UART Control Module-2 */
N#define URT3_Base                       ((uint32_t)0x52030000)              /*!< UART Control Module-3 */
N#define URT0                            ((URT_Struct*) URT0_Base)
N#define URT1                            ((URT_Struct*) URT1_Base)
N#define URT2                            ((URT_Struct*) URT2_Base)
N#define URT3                            ((URT_Struct*) URT3_Base)
N///@}
N
N/**
N ******************************************************************************
N *
N * @name        URT  [Register Definitions]
N *
N ******************************************************************************
N */
N/**
N ******************************************************************************
N * @name        URT_STA  [register's definitions]
N *              Offset[0x00]  URT status register 1
N ******************************************************************************
N */
N///@{
N#define URT_STA_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_STA */
N#define URT_STA_CALTMOF_mask_w                      ((uint32_t)0x40000000)  /*!< Bit Mask of 32bit */
N#define URT_STA_CALTMOF_mask_h1                     ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define URT_STA_CALTMOF_mask_b3                     ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define URT_STA_CALTMOF_normal_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_CALTMOF_normal_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_CALTMOF_normal_b3                   ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_CALTMOF_happened_w                  ((uint32_t)0x40000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_CALTMOF_happened_h1                 ((uint16_t)0x4000)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_CALTMOF_happened_b3                 ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_BKTMOF_mask_w                       ((uint32_t)0x20000000)  /*!< Bit Mask of 32bit */
N#define URT_STA_BKTMOF_mask_h1                      ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define URT_STA_BKTMOF_mask_b3                      ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_STA_BKTMOF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_BKTMOF_normal_h1                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_BKTMOF_normal_b3                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_BKTMOF_happened_w                   ((uint32_t)0x20000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_BKTMOF_happened_h1                  ((uint16_t)0x2000)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_BKTMOF_happened_b3                  ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_IDTMOF_mask_w                       ((uint32_t)0x10000000)  /*!< Bit Mask of 32bit */
N#define URT_STA_IDTMOF_mask_h1                      ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define URT_STA_IDTMOF_mask_b3                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_STA_IDTMOF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_IDTMOF_normal_h1                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_IDTMOF_normal_b3                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_IDTMOF_happened_w                   ((uint32_t)0x10000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_IDTMOF_happened_h1                  ((uint16_t)0x1000)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_IDTMOF_happened_b3                  ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_RXTMOF_mask_w                       ((uint32_t)0x08000000)  /*!< Bit Mask of 32bit */
N#define URT_STA_RXTMOF_mask_h1                      ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define URT_STA_RXTMOF_mask_b3                      ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_STA_RXTMOF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_RXTMOF_normal_h1                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_RXTMOF_normal_b3                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_RXTMOF_happened_w                   ((uint32_t)0x08000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_RXTMOF_happened_h1                  ((uint16_t)0x0800)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_RXTMOF_happened_b3                  ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_TXEF_mask_w                         ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define URT_STA_TXEF_mask_h1                        ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define URT_STA_TXEF_mask_b3                        ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_STA_TXEF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_TXEF_normal_h1                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_TXEF_normal_b3                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_TXEF_happened_w                     ((uint32_t)0x01000000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_TXEF_happened_h1                    ((uint16_t)0x0100)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_TXEF_happened_b3                    ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_ROVRF_mask_w                        ((uint32_t)0x00800000)  /*!< Bit Mask of 32bit */
N#define URT_STA_ROVRF_mask_h1                       ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define URT_STA_ROVRF_mask_b2                       ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define URT_STA_ROVRF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_ROVRF_normal_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_ROVRF_normal_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_ROVRF_happened_w                    ((uint32_t)0x00800000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_ROVRF_happened_h1                   ((uint16_t)0x0080)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_ROVRF_happened_b2                   ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_NCEF_mask_w                         ((uint32_t)0x00400000)  /*!< Bit Mask of 32bit */
N#define URT_STA_NCEF_mask_h1                        ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define URT_STA_NCEF_mask_b2                        ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define URT_STA_NCEF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_NCEF_normal_h1                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_NCEF_normal_b2                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_NCEF_happened_w                     ((uint32_t)0x00400000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_NCEF_happened_h1                    ((uint16_t)0x0040)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_NCEF_happened_b2                    ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_FEF_mask_w                          ((uint32_t)0x00200000)  /*!< Bit Mask of 32bit */
N#define URT_STA_FEF_mask_h1                         ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define URT_STA_FEF_mask_b2                         ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_STA_FEF_normal_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_FEF_normal_h1                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_FEF_normal_b2                       ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_FEF_happened_w                      ((uint32_t)0x00200000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_FEF_happened_h1                     ((uint16_t)0x0020)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_FEF_happened_b2                     ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_PEF_mask_w                          ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define URT_STA_PEF_mask_h1                         ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_STA_PEF_mask_b2                         ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_STA_PEF_normal_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_PEF_normal_h1                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_PEF_normal_b2                       ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_PEF_happened_w                      ((uint32_t)0x00100000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_PEF_happened_h1                     ((uint16_t)0x0010)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_PEF_happened_b2                     ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_CTSF_mask_w                         ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define URT_STA_CTSF_mask_h1                        ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define URT_STA_CTSF_mask_b2                        ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_STA_CTSF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_CTSF_normal_h1                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_CTSF_normal_b2                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_CTSF_happened_w                     ((uint32_t)0x00040000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_CTSF_happened_h1                    ((uint16_t)0x0004)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_CTSF_happened_b2                    ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_IDLF_mask_w                         ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define URT_STA_IDLF_mask_h1                        ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define URT_STA_IDLF_mask_b2                        ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_STA_IDLF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_IDLF_normal_h1                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_IDLF_normal_b2                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_IDLF_happened_w                     ((uint32_t)0x00020000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_IDLF_happened_h1                    ((uint16_t)0x0002)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_IDLF_happened_b2                    ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_BKF_mask_w                          ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define URT_STA_BKF_mask_h1                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_STA_BKF_mask_b2                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_STA_BKF_normal_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_BKF_normal_h1                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_BKF_normal_b2                       ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_BKF_happened_w                      ((uint32_t)0x00010000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_BKF_happened_h1                     ((uint16_t)0x0001)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_BKF_happened_b2                     ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_CALCF_mask_w                        ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define URT_STA_CALCF_mask_h0                       ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define URT_STA_CALCF_mask_b1                       ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_STA_CALCF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_CALCF_normal_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_CALCF_normal_b1                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_CALCF_happened_w                    ((uint32_t)0x00002000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_CALCF_happened_h0                   ((uint16_t)0x2000)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_CALCF_happened_b1                   ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_TMOF_mask_w                         ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define URT_STA_TMOF_mask_h0                        ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define URT_STA_TMOF_mask_b1                        ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_STA_TMOF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_TMOF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_TMOF_normal_b1                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_TMOF_happened_w                     ((uint32_t)0x00001000)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_TMOF_happened_h0                    ((uint16_t)0x1000)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_TMOF_happened_b1                    ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_BRTF_mask_w                         ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define URT_STA_BRTF_mask_h0                        ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define URT_STA_BRTF_mask_b1                        ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_STA_BRTF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_BRTF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_BRTF_normal_b1                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_BRTF_happened_w                     ((uint32_t)0x00000800)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_BRTF_happened_h0                    ((uint16_t)0x0800)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_BRTF_happened_b1                    ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_SADRF_mask_w                        ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define URT_STA_SADRF_mask_h0                       ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define URT_STA_SADRF_mask_b1                       ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_STA_SADRF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_SADRF_normal_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_SADRF_normal_b1                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_SADRF_happened_w                    ((uint32_t)0x00000400)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_SADRF_happened_h0                   ((uint16_t)0x0400)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_SADRF_happened_b1                   ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_TXF_mask_w                          ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define URT_STA_TXF_mask_h0                         ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define URT_STA_TXF_mask_b0                         ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define URT_STA_TXF_normal_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_TXF_normal_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_TXF_normal_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_TXF_happened_w                      ((uint32_t)0x00000080)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_TXF_happened_h0                     ((uint16_t)0x0080)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_TXF_happened_b0                     ((uint8_t )0x80)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_RXF_mask_w                          ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define URT_STA_RXF_mask_h0                         ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define URT_STA_RXF_mask_b0                         ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define URT_STA_RXF_normal_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_RXF_normal_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_RXF_normal_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_RXF_happened_w                      ((uint32_t)0x00000040)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_RXF_happened_h0                     ((uint16_t)0x0040)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_RXF_happened_b0                     ((uint8_t )0x40)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_RXDF_mask_w                         ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define URT_STA_RXDF_mask_h0                        ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define URT_STA_RXDF_mask_b0                        ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_STA_RXDF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_RXDF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_RXDF_normal_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_RXDF_happened_w                     ((uint32_t)0x00000020)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_RXDF_happened_h0                    ((uint16_t)0x0020)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_RXDF_happened_b0                    ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_LSF_mask_w                          ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define URT_STA_LSF_mask_h0                         ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_STA_LSF_mask_b0                         ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_STA_LSF_normal_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_LSF_normal_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_LSF_normal_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_LSF_happened_w                      ((uint32_t)0x00000010)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_LSF_happened_h0                     ((uint16_t)0x0010)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_LSF_happened_b0                     ((uint8_t )0x10)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_ERRF_mask_w                         ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define URT_STA_ERRF_mask_h0                        ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define URT_STA_ERRF_mask_b0                        ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_STA_ERRF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_ERRF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_ERRF_normal_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_ERRF_happened_w                     ((uint32_t)0x00000008)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_ERRF_happened_h0                    ((uint16_t)0x0008)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_ERRF_happened_b0                    ((uint8_t )0x08)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_TCF_mask_w                          ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define URT_STA_TCF_mask_h0                         ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define URT_STA_TCF_mask_b0                         ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_STA_TCF_normal_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_TCF_normal_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_TCF_normal_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_TCF_happened_w                      ((uint32_t)0x00000004)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_TCF_happened_h0                     ((uint16_t)0x0004)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_TCF_happened_b0                     ((uint8_t )0x04)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_UGF_mask_w                          ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define URT_STA_UGF_mask_h0                         ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define URT_STA_UGF_mask_b0                         ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_STA_UGF_normal_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_UGF_normal_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_UGF_normal_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_UGF_happened_w                      ((uint32_t)0x00000002)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_UGF_happened_h0                     ((uint16_t)0x0002)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_UGF_happened_b0                     ((uint8_t )0x02)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA_RHF_mask_w                          ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define URT_STA_RHF_mask_h0                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_STA_RHF_mask_b0                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_STA_RHF_normal_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA_RHF_normal_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA_RHF_normal_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA_RHF_happened_w                      ((uint32_t)0x00000001)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA_RHF_happened_h0                     ((uint16_t)0x0001)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA_RHF_happened_b0                     ((uint8_t )0x01)        /*!< Bit Value =(1):Happened of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_INT  [register's definitions]
N *              Offset[0x04]  URT interrupt enable register
N ******************************************************************************
N */
N///@{
N#define URT_INT_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_INT */
N#define URT_INT_CALTMO_IE_mask_w                    ((uint32_t)0x40000000)  /*!< Bit Mask of 32bit */
N#define URT_INT_CALTMO_IE_mask_h1                   ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define URT_INT_CALTMO_IE_mask_b3                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define URT_INT_CALTMO_IE_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_CALTMO_IE_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_CALTMO_IE_disable_b3                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_CALTMO_IE_enable_w                  ((uint32_t)0x40000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_CALTMO_IE_enable_h1                 ((uint16_t)0x4000)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_CALTMO_IE_enable_b3                 ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_BKTMO_IE_mask_w                     ((uint32_t)0x20000000)  /*!< Bit Mask of 32bit */
N#define URT_INT_BKTMO_IE_mask_h1                    ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define URT_INT_BKTMO_IE_mask_b3                    ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_INT_BKTMO_IE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_BKTMO_IE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_BKTMO_IE_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_BKTMO_IE_enable_w                   ((uint32_t)0x20000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_BKTMO_IE_enable_h1                  ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_BKTMO_IE_enable_b3                  ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_IDTMO_IE_mask_w                     ((uint32_t)0x10000000)  /*!< Bit Mask of 32bit */
N#define URT_INT_IDTMO_IE_mask_h1                    ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define URT_INT_IDTMO_IE_mask_b3                    ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_INT_IDTMO_IE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_IDTMO_IE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_IDTMO_IE_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_IDTMO_IE_enable_w                   ((uint32_t)0x10000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_IDTMO_IE_enable_h1                  ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_IDTMO_IE_enable_b3                  ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_RXTMO_IE_mask_w                     ((uint32_t)0x08000000)  /*!< Bit Mask of 32bit */
N#define URT_INT_RXTMO_IE_mask_h1                    ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define URT_INT_RXTMO_IE_mask_b3                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_INT_RXTMO_IE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_RXTMO_IE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_RXTMO_IE_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_RXTMO_IE_enable_w                   ((uint32_t)0x08000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_RXTMO_IE_enable_h1                  ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_RXTMO_IE_enable_b3                  ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_TXE_IE_mask_w                       ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define URT_INT_TXE_IE_mask_h1                      ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define URT_INT_TXE_IE_mask_b3                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_INT_TXE_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_TXE_IE_disable_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_TXE_IE_disable_b3                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_TXE_IE_enable_w                     ((uint32_t)0x01000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_TXE_IE_enable_h1                    ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_TXE_IE_enable_b3                    ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_ROVR_IE_mask_w                      ((uint32_t)0x00800000)  /*!< Bit Mask of 32bit */
N#define URT_INT_ROVR_IE_mask_h1                     ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define URT_INT_ROVR_IE_mask_b2                     ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define URT_INT_ROVR_IE_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_ROVR_IE_disable_h1                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_ROVR_IE_disable_b2                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_ROVR_IE_enable_w                    ((uint32_t)0x00800000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_ROVR_IE_enable_h1                   ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_ROVR_IE_enable_b2                   ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_NCE_IE_mask_w                       ((uint32_t)0x00400000)  /*!< Bit Mask of 32bit */
N#define URT_INT_NCE_IE_mask_h1                      ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define URT_INT_NCE_IE_mask_b2                      ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define URT_INT_NCE_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_NCE_IE_disable_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_NCE_IE_disable_b2                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_NCE_IE_enable_w                     ((uint32_t)0x00400000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_NCE_IE_enable_h1                    ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_NCE_IE_enable_b2                    ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_FE_IE_mask_w                        ((uint32_t)0x00200000)  /*!< Bit Mask of 32bit */
N#define URT_INT_FE_IE_mask_h1                       ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define URT_INT_FE_IE_mask_b2                       ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_INT_FE_IE_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_FE_IE_disable_h1                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_FE_IE_disable_b2                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_FE_IE_enable_w                      ((uint32_t)0x00200000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_FE_IE_enable_h1                     ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_FE_IE_enable_b2                     ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_PE_IE_mask_w                        ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define URT_INT_PE_IE_mask_h1                       ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_INT_PE_IE_mask_b2                       ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_INT_PE_IE_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_PE_IE_disable_h1                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_PE_IE_disable_b2                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_PE_IE_enable_w                      ((uint32_t)0x00100000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_PE_IE_enable_h1                     ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_PE_IE_enable_b2                     ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_CTS_IE_mask_w                       ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define URT_INT_CTS_IE_mask_h1                      ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define URT_INT_CTS_IE_mask_b2                      ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_INT_CTS_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_CTS_IE_disable_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_CTS_IE_disable_b2                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_CTS_IE_enable_w                     ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_CTS_IE_enable_h1                    ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_CTS_IE_enable_b2                    ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_IDL_IE_mask_w                       ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define URT_INT_IDL_IE_mask_h1                      ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define URT_INT_IDL_IE_mask_b2                      ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_INT_IDL_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_IDL_IE_disable_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_IDL_IE_disable_b2                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_IDL_IE_enable_w                     ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_IDL_IE_enable_h1                    ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_IDL_IE_enable_b2                    ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_BK_IE_mask_w                        ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define URT_INT_BK_IE_mask_h1                       ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_INT_BK_IE_mask_b2                       ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_INT_BK_IE_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_BK_IE_disable_h1                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_BK_IE_disable_b2                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_BK_IE_enable_w                      ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_BK_IE_enable_h1                     ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_BK_IE_enable_b2                     ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_CALC_IE_mask_w                      ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define URT_INT_CALC_IE_mask_h0                     ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define URT_INT_CALC_IE_mask_b1                     ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_INT_CALC_IE_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_CALC_IE_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_CALC_IE_disable_b1                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_CALC_IE_enable_w                    ((uint32_t)0x00002000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_CALC_IE_enable_h0                   ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_CALC_IE_enable_b1                   ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_TMO_IE_mask_w                       ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define URT_INT_TMO_IE_mask_h0                      ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define URT_INT_TMO_IE_mask_b1                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_INT_TMO_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_TMO_IE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_TMO_IE_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_TMO_IE_enable_w                     ((uint32_t)0x00001000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_TMO_IE_enable_h0                    ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_TMO_IE_enable_b1                    ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_BRT_IE_mask_w                       ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define URT_INT_BRT_IE_mask_h0                      ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define URT_INT_BRT_IE_mask_b1                      ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_INT_BRT_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_BRT_IE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_BRT_IE_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_BRT_IE_enable_w                     ((uint32_t)0x00000800)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_BRT_IE_enable_h0                    ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_BRT_IE_enable_b1                    ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_SADR_IE_mask_w                      ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define URT_INT_SADR_IE_mask_h0                     ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define URT_INT_SADR_IE_mask_b1                     ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_INT_SADR_IE_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_SADR_IE_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_SADR_IE_disable_b1                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_SADR_IE_enable_w                    ((uint32_t)0x00000400)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_SADR_IE_enable_h0                   ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_SADR_IE_enable_b1                   ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_TX_IE_mask_w                        ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define URT_INT_TX_IE_mask_h0                       ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define URT_INT_TX_IE_mask_b0                       ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define URT_INT_TX_IE_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_TX_IE_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_TX_IE_disable_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_TX_IE_enable_w                      ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_TX_IE_enable_h0                     ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_TX_IE_enable_b0                     ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_RX_IE_mask_w                        ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define URT_INT_RX_IE_mask_h0                       ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define URT_INT_RX_IE_mask_b0                       ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define URT_INT_RX_IE_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_RX_IE_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_RX_IE_disable_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_RX_IE_enable_w                      ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_RX_IE_enable_h0                     ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_RX_IE_enable_b0                     ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_LS_IE_mask_w                        ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define URT_INT_LS_IE_mask_h0                       ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_INT_LS_IE_mask_b0                       ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_INT_LS_IE_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_LS_IE_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_LS_IE_disable_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_LS_IE_enable_w                      ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_LS_IE_enable_h0                     ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_LS_IE_enable_b0                     ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_ERR_IE_mask_w                       ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define URT_INT_ERR_IE_mask_h0                      ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define URT_INT_ERR_IE_mask_b0                      ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_INT_ERR_IE_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_ERR_IE_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_ERR_IE_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_ERR_IE_enable_w                     ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_ERR_IE_enable_h0                    ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_ERR_IE_enable_b0                    ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_TC_IE_mask_w                        ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define URT_INT_TC_IE_mask_h0                       ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define URT_INT_TC_IE_mask_b0                       ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_INT_TC_IE_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_TC_IE_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_TC_IE_disable_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_TC_IE_enable_w                      ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_TC_IE_enable_h0                     ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_TC_IE_enable_b0                     ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_UG_IE_mask_w                        ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define URT_INT_UG_IE_mask_h0                       ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define URT_INT_UG_IE_mask_b0                       ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_INT_UG_IE_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_UG_IE_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_UG_IE_disable_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_UG_IE_enable_w                      ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_UG_IE_enable_h0                     ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_UG_IE_enable_b0                     ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_INT_IEA_mask_w                          ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define URT_INT_IEA_mask_h0                         ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_INT_IEA_mask_b0                         ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_INT_IEA_disable_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_INT_IEA_disable_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_INT_IEA_disable_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_INT_IEA_enable_w                        ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_INT_IEA_enable_h0                       ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_INT_IEA_enable_b0                       ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_CLK  [register's definitions]
N *              Offset[0x08]  URT clock source register
N ******************************************************************************
N */
N///@{
N#define URT_CLK_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_CLK */
N#define URT_CLK_CKO_LCK_mask_w                      ((uint32_t)0x20000000)  /*!< Bit Mask of 32bit */
N#define URT_CLK_CKO_LCK_mask_h1                     ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define URT_CLK_CKO_LCK_mask_b3                     ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_CLK_CKO_LCK_locked_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Locked of 32bit */
N#define URT_CLK_CKO_LCK_locked_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Locked of 16bit */
N#define URT_CLK_CKO_LCK_locked_b3                   ((uint8_t )0x00)        /*!< Bit Value =(0):Locked of 8bit */
N#define URT_CLK_CKO_LCK_un_locked_w                 ((uint32_t)0x20000000)  /*!< Bit Value =(1):Un-Locked of 32bit */
N#define URT_CLK_CKO_LCK_un_locked_h1                ((uint16_t)0x2000)      /*!< Bit Value =(1):Un-Locked of 16bit */
N#define URT_CLK_CKO_LCK_un_locked_b3                ((uint8_t )0x20)        /*!< Bit Value =(1):Un-Locked of 8bit */
N
N#define URT_CLK_CKO_STA_mask_w                      ((uint32_t)0x10000000)  /*!< Bit Mask of 32bit */
N#define URT_CLK_CKO_STA_mask_h1                     ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define URT_CLK_CKO_STA_mask_b3                     ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_CLK_CKO_STA_0_w                         ((uint32_t)0x00000000)  /*!< Bit Value =(0):0 of 32bit */
N#define URT_CLK_CKO_STA_0_h1                        ((uint16_t)0x0000)      /*!< Bit Value =(0):0 of 16bit */
N#define URT_CLK_CKO_STA_0_b3                        ((uint8_t )0x00)        /*!< Bit Value =(0):0 of 8bit */
N#define URT_CLK_CKO_STA_1_w                         ((uint32_t)0x10000000)  /*!< Bit Value =(1):1 of 32bit */
N#define URT_CLK_CKO_STA_1_h1                        ((uint16_t)0x1000)      /*!< Bit Value =(1):1 of 16bit */
N#define URT_CLK_CKO_STA_1_b3                        ((uint8_t )0x10)        /*!< Bit Value =(1):1 of 8bit */
N
N#define URT_CLK_BRO_LCK_mask_w                      ((uint32_t)0x08000000)  /*!< Bit Mask of 32bit */
N#define URT_CLK_BRO_LCK_mask_h1                     ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define URT_CLK_BRO_LCK_mask_b3                     ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_CLK_BRO_LCK_locked_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Locked of 32bit */
N#define URT_CLK_BRO_LCK_locked_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Locked of 16bit */
N#define URT_CLK_BRO_LCK_locked_b3                   ((uint8_t )0x00)        /*!< Bit Value =(0):Locked of 8bit */
N#define URT_CLK_BRO_LCK_un_locked_w                 ((uint32_t)0x08000000)  /*!< Bit Value =(1):Un-Locked of 32bit */
N#define URT_CLK_BRO_LCK_un_locked_h1                ((uint16_t)0x0800)      /*!< Bit Value =(1):Un-Locked of 16bit */
N#define URT_CLK_BRO_LCK_un_locked_b3                ((uint8_t )0x08)        /*!< Bit Value =(1):Un-Locked of 8bit */
N
N#define URT_CLK_BRO_STA_mask_w                      ((uint32_t)0x04000000)  /*!< Bit Mask of 32bit */
N#define URT_CLK_BRO_STA_mask_h1                     ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define URT_CLK_BRO_STA_mask_b3                     ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_CLK_BRO_STA_0_w                         ((uint32_t)0x00000000)  /*!< Bit Value =(0):0 of 32bit */
N#define URT_CLK_BRO_STA_0_h1                        ((uint16_t)0x0000)      /*!< Bit Value =(0):0 of 16bit */
N#define URT_CLK_BRO_STA_0_b3                        ((uint8_t )0x00)        /*!< Bit Value =(0):0 of 8bit */
N#define URT_CLK_BRO_STA_1_w                         ((uint32_t)0x04000000)  /*!< Bit Value =(1):1 of 32bit */
N#define URT_CLK_BRO_STA_1_h1                        ((uint16_t)0x0400)      /*!< Bit Value =(1):1 of 16bit */
N#define URT_CLK_BRO_STA_1_b3                        ((uint8_t )0x04)        /*!< Bit Value =(1):1 of 8bit */
N
N#define URT_CLK_BR_MDS_mask_w                       ((uint32_t)0x02000000)  /*!< Bit Mask of 32bit */
N#define URT_CLK_BR_MDS_mask_h1                      ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define URT_CLK_BR_MDS_mask_b3                      ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_CLK_BR_MDS_separated_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Separated of 32bit */
N#define URT_CLK_BR_MDS_separated_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Separated of 16bit */
N#define URT_CLK_BR_MDS_separated_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Separated of 8bit */
N#define URT_CLK_BR_MDS_combined_w                   ((uint32_t)0x02000000)  /*!< Bit Value =(1):Combined of 32bit */
N#define URT_CLK_BR_MDS_combined_h1                  ((uint16_t)0x0200)      /*!< Bit Value =(1):Combined of 16bit */
N#define URT_CLK_BR_MDS_combined_b3                  ((uint8_t )0x02)        /*!< Bit Value =(1):Combined of 8bit */
N
N#define URT_CLK_BR_EN_mask_w                        ((uint32_t)0x01000000)  /*!< Bit Mask of 32bit */
N#define URT_CLK_BR_EN_mask_h1                       ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define URT_CLK_BR_EN_mask_b3                       ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_CLK_BR_EN_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CLK_BR_EN_disable_h1                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CLK_BR_EN_disable_b3                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CLK_BR_EN_enable_w                      ((uint32_t)0x01000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CLK_BR_EN_enable_h1                     ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CLK_BR_EN_enable_b3                     ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CLK_TX_CKS_mask_w                       ((uint32_t)0x00300000)  /*!< Bit Mask of 32bit */
N#define URT_CLK_TX_CKS_mask_h1                      ((uint16_t)0x0030)      /*!< Bit Mask of 16bit */
N#define URT_CLK_TX_CKS_mask_b2                      ((uint8_t )0x30)        /*!< Bit Mask of 8bit */
N#define URT_CLK_TX_CKS_internal_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Internal of 32bit */
N#define URT_CLK_TX_CKS_internal_h1                  ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Internal of 16bit */
N#define URT_CLK_TX_CKS_internal_b2                  ((uint8_t )0x00)        /*!< Bit Value =(0x0):Internal of 8bit */
N#define URT_CLK_TX_CKS_tm01_trgo_w                  ((uint32_t)0x00100000)  /*!< Bit Value =(0x1):TM01_TRGO of 32bit */
N#define URT_CLK_TX_CKS_tm01_trgo_h1                 ((uint16_t)0x0010)      /*!< Bit Value =(0x1):TM01_TRGO of 16bit */
N#define URT_CLK_TX_CKS_tm01_trgo_b2                 ((uint8_t )0x10)        /*!< Bit Value =(0x1):TM01_TRGO of 8bit */
N#define URT_CLK_TX_CKS_tm10_trgo_w                  ((uint32_t)0x00200000)  /*!< Bit Value =(0x2):TM10_TRGO of 32bit */
N#define URT_CLK_TX_CKS_tm10_trgo_h1                 ((uint16_t)0x0020)      /*!< Bit Value =(0x2):TM10_TRGO of 16bit */
N#define URT_CLK_TX_CKS_tm10_trgo_b2                 ((uint8_t )0x20)        /*!< Bit Value =(0x2):TM10_TRGO of 8bit */
N
N#define URT_CLK_RX_CKS_mask_w                       ((uint32_t)0x00030000)  /*!< Bit Mask of 32bit */
N#define URT_CLK_RX_CKS_mask_h1                      ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define URT_CLK_RX_CKS_mask_b2                      ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define URT_CLK_RX_CKS_internal_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Internal of 32bit */
N#define URT_CLK_RX_CKS_internal_h1                  ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Internal of 16bit */
N#define URT_CLK_RX_CKS_internal_b2                  ((uint8_t )0x00)        /*!< Bit Value =(0x0):Internal of 8bit */
N#define URT_CLK_RX_CKS_tm01_trgo_w                  ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):TM01_TRGO of 32bit */
N#define URT_CLK_RX_CKS_tm01_trgo_h1                 ((uint16_t)0x0001)      /*!< Bit Value =(0x1):TM01_TRGO of 16bit */
N#define URT_CLK_RX_CKS_tm01_trgo_b2                 ((uint8_t )0x01)        /*!< Bit Value =(0x1):TM01_TRGO of 8bit */
N#define URT_CLK_RX_CKS_tm10_trgo_w                  ((uint32_t)0x00020000)  /*!< Bit Value =(0x2):TM10_TRGO of 32bit */
N#define URT_CLK_RX_CKS_tm10_trgo_h1                 ((uint16_t)0x0002)      /*!< Bit Value =(0x2):TM10_TRGO of 16bit */
N#define URT_CLK_RX_CKS_tm10_trgo_b2                 ((uint8_t )0x02)        /*!< Bit Value =(0x2):TM10_TRGO of 8bit */
N
N#define URT_CLK_CLK_CKS_mask_w                      ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define URT_CLK_CLK_CKS_mask_h0                     ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define URT_CLK_CLK_CKS_mask_b0                     ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_CLK_CLK_CKS_out_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):OUT of 32bit */
N#define URT_CLK_CLK_CKS_out_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):OUT of 16bit */
N#define URT_CLK_CLK_CKS_out_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):OUT of 8bit */
N#define URT_CLK_CLK_CKS_sc_w                        ((uint32_t)0x00000020)  /*!< Bit Value =(1):SC of 32bit */
N#define URT_CLK_CLK_CKS_sc_h0                       ((uint16_t)0x0020)      /*!< Bit Value =(1):SC of 16bit */
N#define URT_CLK_CLK_CKS_sc_b0                       ((uint8_t )0x20)        /*!< Bit Value =(1):SC of 8bit */
N
N#define URT_CLK_CLK_EN_mask_w                       ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define URT_CLK_CLK_EN_mask_h0                      ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_CLK_CLK_EN_mask_b0                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_CLK_CLK_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CLK_CLK_EN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CLK_CLK_EN_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CLK_CLK_EN_enable_w                     ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CLK_CLK_EN_enable_h0                    ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CLK_CLK_EN_enable_b0                    ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CLK_CK_SEL_mask_w                       ((uint32_t)0x0000000E)  /*!< Bit Mask of 32bit */
N#define URT_CLK_CK_SEL_mask_h0                      ((uint16_t)0x000E)      /*!< Bit Mask of 16bit */
N#define URT_CLK_CK_SEL_mask_b0                      ((uint8_t )0x0E)        /*!< Bit Mask of 8bit */
N#define URT_CLK_CK_SEL_proc_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):PROC of 32bit */
N#define URT_CLK_CK_SEL_proc_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0x0):PROC of 16bit */
N#define URT_CLK_CK_SEL_proc_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0x0):PROC of 8bit */
N#define URT_CLK_CK_SEL_ck_ls_w                      ((uint32_t)0x00000004)  /*!< Bit Value =(0x2):CK_LS of 32bit */
N#define URT_CLK_CK_SEL_ck_ls_h0                     ((uint16_t)0x0004)      /*!< Bit Value =(0x2):CK_LS of 16bit */
N#define URT_CLK_CK_SEL_ck_ls_b0                     ((uint8_t )0x04)        /*!< Bit Value =(0x2):CK_LS of 8bit */
N#define URT_CLK_CK_SEL_tm00_trgo_w                  ((uint32_t)0x00000006)  /*!< Bit Value =(0x3):TM00_TRGO of 32bit */
N#define URT_CLK_CK_SEL_tm00_trgo_h0                 ((uint16_t)0x0006)      /*!< Bit Value =(0x3):TM00_TRGO of 16bit */
N#define URT_CLK_CK_SEL_tm00_trgo_b0                 ((uint8_t )0x06)        /*!< Bit Value =(0x3):TM00_TRGO of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_STA2  [register's definitions]
N *              Offset[0x0C]  URT status register 2
N ******************************************************************************
N */
N///@{
N#define URT_STA2_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_STA2 */
N#define URT_STA2_TX_LVL_mask_w                      ((uint32_t)0x70000000)  /*!< Bit Mask of 32bit */
N#define URT_STA2_TX_LVL_mask_h1                     ((uint16_t)0x7000)      /*!< Bit Mask of 16bit */
N#define URT_STA2_TX_LVL_mask_b3                     ((uint8_t )0x70)        /*!< Bit Mask of 8bit */
N#define URT_STA2_TX_LVL_0_w                         ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):0 of 32bit */
N#define URT_STA2_TX_LVL_0_h1                        ((uint16_t)0x0000)      /*!< Bit Value =(0x0):0 of 16bit */
N#define URT_STA2_TX_LVL_0_b3                        ((uint8_t )0x00)        /*!< Bit Value =(0x0):0 of 8bit */
N#define URT_STA2_TX_LVL_1_w                         ((uint32_t)0x10000000)  /*!< Bit Value =(0x1):1 of 32bit */
N#define URT_STA2_TX_LVL_1_h1                        ((uint16_t)0x1000)      /*!< Bit Value =(0x1):1 of 16bit */
N#define URT_STA2_TX_LVL_1_b3                        ((uint8_t )0x10)        /*!< Bit Value =(0x1):1 of 8bit */
N#define URT_STA2_TX_LVL_2_w                         ((uint32_t)0x20000000)  /*!< Bit Value =(0x2):2 of 32bit */
N#define URT_STA2_TX_LVL_2_h1                        ((uint16_t)0x2000)      /*!< Bit Value =(0x2):2 of 16bit */
N#define URT_STA2_TX_LVL_2_b3                        ((uint8_t )0x20)        /*!< Bit Value =(0x2):2 of 8bit */
N#define URT_STA2_TX_LVL_3_w                         ((uint32_t)0x30000000)  /*!< Bit Value =(0x3):3 of 32bit */
N#define URT_STA2_TX_LVL_3_h1                        ((uint16_t)0x3000)      /*!< Bit Value =(0x3):3 of 16bit */
N#define URT_STA2_TX_LVL_3_b3                        ((uint8_t )0x30)        /*!< Bit Value =(0x3):3 of 8bit */
N#define URT_STA2_TX_LVL_4_w                         ((uint32_t)0x40000000)  /*!< Bit Value =(0x4):4 of 32bit */
N#define URT_STA2_TX_LVL_4_h1                        ((uint16_t)0x4000)      /*!< Bit Value =(0x4):4 of 16bit */
N#define URT_STA2_TX_LVL_4_b3                        ((uint8_t )0x40)        /*!< Bit Value =(0x4):4 of 8bit */
N
N#define URT_STA2_RX_LVL_mask_w                      ((uint32_t)0x07000000)  /*!< Bit Mask of 32bit */
N#define URT_STA2_RX_LVL_mask_h1                     ((uint16_t)0x0700)      /*!< Bit Mask of 16bit */
N#define URT_STA2_RX_LVL_mask_b3                     ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define URT_STA2_RX_LVL_0_w                         ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):0 of 32bit */
N#define URT_STA2_RX_LVL_0_h1                        ((uint16_t)0x0000)      /*!< Bit Value =(0x0):0 of 16bit */
N#define URT_STA2_RX_LVL_0_b3                        ((uint8_t )0x00)        /*!< Bit Value =(0x0):0 of 8bit */
N#define URT_STA2_RX_LVL_1_w                         ((uint32_t)0x01000000)  /*!< Bit Value =(0x1):1 of 32bit */
N#define URT_STA2_RX_LVL_1_h1                        ((uint16_t)0x0100)      /*!< Bit Value =(0x1):1 of 16bit */
N#define URT_STA2_RX_LVL_1_b3                        ((uint8_t )0x01)        /*!< Bit Value =(0x1):1 of 8bit */
N#define URT_STA2_RX_LVL_2_w                         ((uint32_t)0x02000000)  /*!< Bit Value =(0x2):2 of 32bit */
N#define URT_STA2_RX_LVL_2_h1                        ((uint16_t)0x0200)      /*!< Bit Value =(0x2):2 of 16bit */
N#define URT_STA2_RX_LVL_2_b3                        ((uint8_t )0x02)        /*!< Bit Value =(0x2):2 of 8bit */
N#define URT_STA2_RX_LVL_3_w                         ((uint32_t)0x03000000)  /*!< Bit Value =(0x3):3 of 32bit */
N#define URT_STA2_RX_LVL_3_h1                        ((uint16_t)0x0300)      /*!< Bit Value =(0x3):3 of 16bit */
N#define URT_STA2_RX_LVL_3_b3                        ((uint8_t )0x03)        /*!< Bit Value =(0x3):3 of 8bit */
N#define URT_STA2_RX_LVL_4_w                         ((uint32_t)0x04000000)  /*!< Bit Value =(0x4):4 of 32bit */
N#define URT_STA2_RX_LVL_4_h1                        ((uint16_t)0x0400)      /*!< Bit Value =(0x4):4 of 16bit */
N#define URT_STA2_RX_LVL_4_b3                        ((uint8_t )0x04)        /*!< Bit Value =(0x4):4 of 8bit */
N
N#define URT_STA2_CTS_mask_w                         ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define URT_STA2_CTS_mask_h0                        ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define URT_STA2_CTS_mask_b1                        ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_STA2_CTS_shift_w                        (12)                    /*!< Bit Shift of 32bit */
N#define URT_STA2_CTS_shift_h0                       (12)                    /*!< Bit Shift of 16bit */
N#define URT_STA2_CTS_shift_b1                       (4)                     /*!< Bit Shift of 8bit */
N
N#define URT_STA2_IR_BUSYF_mask_w                    ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define URT_STA2_IR_BUSYF_mask_h0                   ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define URT_STA2_IR_BUSYF_mask_b0                   ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define URT_STA2_IR_BUSYF_no_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):No of 32bit */
N#define URT_STA2_IR_BUSYF_no_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0):No of 16bit */
N#define URT_STA2_IR_BUSYF_no_b0                     ((uint8_t )0x00)        /*!< Bit Value =(0):No of 8bit */
N#define URT_STA2_IR_BUSYF_busy_w                    ((uint32_t)0x00000080)  /*!< Bit Value =(1):Busy of 32bit */
N#define URT_STA2_IR_BUSYF_busy_h0                   ((uint16_t)0x0080)      /*!< Bit Value =(1):Busy of 16bit */
N#define URT_STA2_IR_BUSYF_busy_b0                   ((uint8_t )0x80)        /*!< Bit Value =(1):Busy of 8bit */
N
N#define URT_STA2_BKBF_mask_w                        ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define URT_STA2_BKBF_mask_h0                       ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define URT_STA2_BKBF_mask_b0                       ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define URT_STA2_BKBF_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA2_BKBF_normal_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA2_BKBF_normal_b0                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA2_BKBF_busy_w                        ((uint32_t)0x00000040)  /*!< Bit Value =(1):Busy of 32bit */
N#define URT_STA2_BKBF_busy_h0                       ((uint16_t)0x0040)      /*!< Bit Value =(1):Busy of 16bit */
N#define URT_STA2_BKBF_busy_b0                       ((uint8_t )0x40)        /*!< Bit Value =(1):Busy of 8bit */
N
N#define URT_STA2_NCF_mask_w                         ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define URT_STA2_NCF_mask_h0                        ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define URT_STA2_NCF_mask_b0                        ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_STA2_NCF_normal_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA2_NCF_normal_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA2_NCF_normal_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA2_NCF_happened_w                     ((uint32_t)0x00000020)  /*!< Bit Value =(1):Happened of 32bit */
N#define URT_STA2_NCF_happened_h0                    ((uint16_t)0x0020)      /*!< Bit Value =(1):Happened of 16bit */
N#define URT_STA2_NCF_happened_b0                    ((uint8_t )0x20)        /*!< Bit Value =(1):Happened of 8bit */
N
N#define URT_STA2_ADR_mask_w                         ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define URT_STA2_ADR_mask_h0                        ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define URT_STA2_ADR_mask_b0                        ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_STA2_ADR_shift_w                        (2)                     /*!< Bit Shift of 32bit */
N#define URT_STA2_ADR_shift_h0                       (2)                     /*!< Bit Shift of 16bit */
N#define URT_STA2_ADR_shift_b0                       (2)                     /*!< Bit Shift of 8bit */
N
N#define URT_STA2_PAR_mask_w                         ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define URT_STA2_PAR_mask_h0                        ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define URT_STA2_PAR_mask_b0                        ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_STA2_PAR_shift_w                        (1)                     /*!< Bit Shift of 32bit */
N#define URT_STA2_PAR_shift_h0                       (1)                     /*!< Bit Shift of 16bit */
N#define URT_STA2_PAR_shift_b0                       (1)                     /*!< Bit Shift of 8bit */
N
N#define URT_STA2_BUSYF_mask_w                       ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define URT_STA2_BUSYF_mask_h0                      ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_STA2_BUSYF_mask_b0                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_STA2_BUSYF_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_STA2_BUSYF_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_STA2_BUSYF_normal_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_STA2_BUSYF_busy_w                       ((uint32_t)0x00000001)  /*!< Bit Value =(1):Busy of 32bit */
N#define URT_STA2_BUSYF_busy_h0                      ((uint16_t)0x0001)      /*!< Bit Value =(1):Busy of 16bit */
N#define URT_STA2_BUSYF_busy_b0                      ((uint8_t )0x01)        /*!< Bit Value =(1):Busy of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_CR0  [register's definitions]
N *              Offset[0x10]  URT control register 0
N ******************************************************************************
N */
N///@{
N#define URT_CR0_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_CR0 */
N#define URT_CR0_DMA_TXEN_mask_w                     ((uint32_t)0x80000000)  /*!< Bit Mask of 32bit */
N#define URT_CR0_DMA_TXEN_mask_h1                    ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define URT_CR0_DMA_TXEN_mask_b3                    ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define URT_CR0_DMA_TXEN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR0_DMA_TXEN_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR0_DMA_TXEN_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR0_DMA_TXEN_enable_w                   ((uint32_t)0x80000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR0_DMA_TXEN_enable_h1                  ((uint16_t)0x8000)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR0_DMA_TXEN_enable_b3                  ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR0_DMA_RXEN_mask_w                     ((uint32_t)0x40000000)  /*!< Bit Mask of 32bit */
N#define URT_CR0_DMA_RXEN_mask_h1                    ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define URT_CR0_DMA_RXEN_mask_b3                    ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define URT_CR0_DMA_RXEN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR0_DMA_RXEN_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR0_DMA_RXEN_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR0_DMA_RXEN_enable_w                   ((uint32_t)0x40000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR0_DMA_RXEN_enable_h1                  ((uint16_t)0x4000)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR0_DMA_RXEN_enable_b3                  ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR0_DDTX_EN_mask_w                      ((uint32_t)0x20000000)  /*!< Bit Mask of 32bit */
N#define URT_CR0_DDTX_EN_mask_h1                     ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define URT_CR0_DDTX_EN_mask_b3                     ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_CR0_DDTX_EN_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR0_DDTX_EN_disable_h1                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR0_DDTX_EN_disable_b3                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR0_DDTX_EN_enable_w                    ((uint32_t)0x20000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR0_DDTX_EN_enable_h1                   ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR0_DDTX_EN_enable_b3                   ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR0_LBM_EN_mask_w                       ((uint32_t)0x00800000)  /*!< Bit Mask of 32bit */
N#define URT_CR0_LBM_EN_mask_h1                      ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define URT_CR0_LBM_EN_mask_b2                      ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define URT_CR0_LBM_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR0_LBM_EN_disable_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR0_LBM_EN_disable_b2                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR0_LBM_EN_enable_w                     ((uint32_t)0x00800000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR0_LBM_EN_enable_h1                    ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR0_LBM_EN_enable_b2                    ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR0_NCHAR_DIS_mask_w                    ((uint32_t)0x00400000)  /*!< Bit Mask of 32bit */
N#define URT_CR0_NCHAR_DIS_mask_h1                   ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define URT_CR0_NCHAR_DIS_mask_b2                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define URT_CR0_NCHAR_DIS_enable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Enable of 32bit */
N#define URT_CR0_NCHAR_DIS_enable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Enable of 16bit */
N#define URT_CR0_NCHAR_DIS_enable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Enable of 8bit */
N#define URT_CR0_NCHAR_DIS_disable_w                 ((uint32_t)0x00400000)  /*!< Bit Value =(1):Disable of 32bit */
N#define URT_CR0_NCHAR_DIS_disable_h1                ((uint16_t)0x0040)      /*!< Bit Value =(1):Disable of 16bit */
N#define URT_CR0_NCHAR_DIS_disable_b2                ((uint8_t )0x40)        /*!< Bit Value =(1):Disable of 8bit */
N
N#define URT_CR0_NCHAR_HE_mask_w                     ((uint32_t)0x00200000)  /*!< Bit Mask of 32bit */
N#define URT_CR0_NCHAR_HE_mask_h1                    ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define URT_CR0_NCHAR_HE_mask_b2                    ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_CR0_NCHAR_HE_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR0_NCHAR_HE_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR0_NCHAR_HE_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR0_NCHAR_HE_enable_w                   ((uint32_t)0x00200000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR0_NCHAR_HE_enable_h1                  ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR0_NCHAR_HE_enable_b2                  ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR0_IDL_MDS_mask_w                      ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define URT_CR0_IDL_MDS_mask_h1                     ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_CR0_IDL_MDS_mask_b2                     ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_CR0_IDL_MDS_no_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):No of 32bit */
N#define URT_CR0_IDL_MDS_no_h1                       ((uint16_t)0x0000)      /*!< Bit Value =(0):No of 16bit */
N#define URT_CR0_IDL_MDS_no_b2                       ((uint8_t )0x00)        /*!< Bit Value =(0):No of 8bit */
N#define URT_CR0_IDL_MDS_load_w                      ((uint32_t)0x00100000)  /*!< Bit Value =(1):Load of 32bit */
N#define URT_CR0_IDL_MDS_load_h1                     ((uint16_t)0x0010)      /*!< Bit Value =(1):Load of 16bit */
N#define URT_CR0_IDL_MDS_load_b2                     ((uint8_t )0x10)        /*!< Bit Value =(1):Load of 8bit */
N
N#define URT_CR0_RX_TH_mask_w                        ((uint32_t)0x00030000)  /*!< Bit Mask of 32bit */
N#define URT_CR0_RX_TH_mask_h1                       ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define URT_CR0_RX_TH_mask_b2                       ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define URT_CR0_RX_TH_1byte_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):1byte of 32bit */
N#define URT_CR0_RX_TH_1byte_h1                      ((uint16_t)0x0000)      /*!< Bit Value =(0x0):1byte of 16bit */
N#define URT_CR0_RX_TH_1byte_b2                      ((uint8_t )0x00)        /*!< Bit Value =(0x0):1byte of 8bit */
N#define URT_CR0_RX_TH_2byte_w                       ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):2byte of 32bit */
N#define URT_CR0_RX_TH_2byte_h1                      ((uint16_t)0x0001)      /*!< Bit Value =(0x1):2byte of 16bit */
N#define URT_CR0_RX_TH_2byte_b2                      ((uint8_t )0x01)        /*!< Bit Value =(0x1):2byte of 8bit */
N#define URT_CR0_RX_TH_3byte_w                       ((uint32_t)0x00020000)  /*!< Bit Value =(0x2):3byte of 32bit */
N#define URT_CR0_RX_TH_3byte_h1                      ((uint16_t)0x0002)      /*!< Bit Value =(0x2):3byte of 16bit */
N#define URT_CR0_RX_TH_3byte_b2                      ((uint8_t )0x02)        /*!< Bit Value =(0x2):3byte of 8bit */
N#define URT_CR0_RX_TH_4byte_w                       ((uint32_t)0x00030000)  /*!< Bit Value =(0x3):4byte of 32bit */
N#define URT_CR0_RX_TH_4byte_h1                      ((uint16_t)0x0003)      /*!< Bit Value =(0x3):4byte of 16bit */
N#define URT_CR0_RX_TH_4byte_b2                      ((uint8_t )0x03)        /*!< Bit Value =(0x3):4byte of 8bit */
N
N#define URT_CR0_DE_GT_mask_w                        ((uint32_t)0x0000C000)  /*!< Bit Mask of 32bit */
N#define URT_CR0_DE_GT_mask_h0                       ((uint16_t)0xC000)      /*!< Bit Mask of 16bit */
N#define URT_CR0_DE_GT_mask_b1                       ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define URT_CR0_DE_GT_1_4_w                         ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):1/4 of 32bit */
N#define URT_CR0_DE_GT_1_4_h0                        ((uint16_t)0x0000)      /*!< Bit Value =(0x0):1/4 of 16bit */
N#define URT_CR0_DE_GT_1_4_b1                        ((uint8_t )0x00)        /*!< Bit Value =(0x0):1/4 of 8bit */
N#define URT_CR0_DE_GT_1_2_w                         ((uint32_t)0x00004000)  /*!< Bit Value =(0x1):1/2 of 32bit */
N#define URT_CR0_DE_GT_1_2_h0                        ((uint16_t)0x4000)      /*!< Bit Value =(0x1):1/2 of 16bit */
N#define URT_CR0_DE_GT_1_2_b1                        ((uint8_t )0x40)        /*!< Bit Value =(0x1):1/2 of 8bit */
N#define URT_CR0_DE_GT_1_w                           ((uint32_t)0x00008000)  /*!< Bit Value =(0x2):1 of 32bit */
N#define URT_CR0_DE_GT_1_h0                          ((uint16_t)0x8000)      /*!< Bit Value =(0x2):1 of 16bit */
N#define URT_CR0_DE_GT_1_b1                          ((uint8_t )0x80)        /*!< Bit Value =(0x2):1 of 8bit */
N#define URT_CR0_DE_GT_2_w                           ((uint32_t)0x0000C000)  /*!< Bit Value =(0x3):2 of 32bit */
N#define URT_CR0_DE_GT_2_h0                          ((uint16_t)0xC000)      /*!< Bit Value =(0x3):2 of 16bit */
N#define URT_CR0_DE_GT_2_b1                          ((uint8_t )0xC0)        /*!< Bit Value =(0x3):2 of 8bit */
N
N#define URT_CR0_DE_INV_mask_w                       ((uint32_t)0x00002000)  /*!< Bit Mask of 32bit */
N#define URT_CR0_DE_INV_mask_h0                      ((uint16_t)0x2000)      /*!< Bit Mask of 16bit */
N#define URT_CR0_DE_INV_mask_b1                      ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_CR0_DE_INV_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR0_DE_INV_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR0_DE_INV_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR0_DE_INV_enable_w                     ((uint32_t)0x00002000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR0_DE_INV_enable_h0                    ((uint16_t)0x2000)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR0_DE_INV_enable_b1                    ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR0_DE_EN_mask_w                        ((uint32_t)0x00001000)  /*!< Bit Mask of 32bit */
N#define URT_CR0_DE_EN_mask_h0                       ((uint16_t)0x1000)      /*!< Bit Mask of 16bit */
N#define URT_CR0_DE_EN_mask_b1                       ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_CR0_DE_EN_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR0_DE_EN_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR0_DE_EN_disable_b1                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR0_DE_EN_enable_w                      ((uint32_t)0x00001000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR0_DE_EN_enable_h0                     ((uint16_t)0x1000)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR0_DE_EN_enable_b1                     ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR0_TX_INV_mask_w                       ((uint32_t)0x00000800)  /*!< Bit Mask of 32bit */
N#define URT_CR0_TX_INV_mask_h0                      ((uint16_t)0x0800)      /*!< Bit Mask of 16bit */
N#define URT_CR0_TX_INV_mask_b1                      ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_CR0_TX_INV_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR0_TX_INV_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR0_TX_INV_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR0_TX_INV_enable_w                     ((uint32_t)0x00000800)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR0_TX_INV_enable_h0                    ((uint16_t)0x0800)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR0_TX_INV_enable_b1                    ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR0_RX_INV_mask_w                       ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define URT_CR0_RX_INV_mask_h0                      ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define URT_CR0_RX_INV_mask_b1                      ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_CR0_RX_INV_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR0_RX_INV_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR0_RX_INV_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR0_RX_INV_enable_w                     ((uint32_t)0x00000400)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR0_RX_INV_enable_h0                    ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR0_RX_INV_enable_b1                    ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR0_IO_SWP_mask_w                       ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define URT_CR0_IO_SWP_mask_h0                      ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define URT_CR0_IO_SWP_mask_b1                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_CR0_IO_SWP_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR0_IO_SWP_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR0_IO_SWP_disable_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR0_IO_SWP_enable_w                     ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR0_IO_SWP_enable_h0                    ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR0_IO_SWP_enable_b1                    ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR0_GSA_EN_mask_w                       ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define URT_CR0_GSA_EN_mask_h0                      ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define URT_CR0_GSA_EN_mask_b0                      ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define URT_CR0_GSA_EN_shift_w                      (7)                     /*!< Bit Shift of 32bit */
N#define URT_CR0_GSA_EN_shift_h0                     (7)                     /*!< Bit Shift of 16bit */
N#define URT_CR0_GSA_EN_shift_b0                     (7)                     /*!< Bit Shift of 8bit */
N
N#define URT_CR0_MDS_mask_w                          ((uint32_t)0x00000070)  /*!< Bit Mask of 32bit */
N#define URT_CR0_MDS_mask_h0                         ((uint16_t)0x0070)      /*!< Bit Mask of 16bit */
N#define URT_CR0_MDS_mask_b0                         ((uint8_t )0x70)        /*!< Bit Mask of 8bit */
N#define URT_CR0_MDS_uart_w                          ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):UART of 32bit */
N#define URT_CR0_MDS_uart_h0                         ((uint16_t)0x0000)      /*!< Bit Value =(0x0):UART of 16bit */
N#define URT_CR0_MDS_uart_b0                         ((uint8_t )0x00)        /*!< Bit Value =(0x0):UART of 8bit */
N#define URT_CR0_MDS_sync_w                          ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):SYNC of 32bit */
N#define URT_CR0_MDS_sync_h0                         ((uint16_t)0x0010)      /*!< Bit Value =(0x1):SYNC of 16bit */
N#define URT_CR0_MDS_sync_b0                         ((uint8_t )0x10)        /*!< Bit Value =(0x1):SYNC of 8bit */
N#define URT_CR0_MDS_idle_w                          ((uint32_t)0x00000020)  /*!< Bit Value =(0x2):IDLE of 32bit */
N#define URT_CR0_MDS_idle_h0                         ((uint16_t)0x0020)      /*!< Bit Value =(0x2):IDLE of 16bit */
N#define URT_CR0_MDS_idle_b0                         ((uint8_t )0x20)        /*!< Bit Value =(0x2):IDLE of 8bit */
N#define URT_CR0_MDS_adr_w                           ((uint32_t)0x00000030)  /*!< Bit Value =(0x3):ADR of 32bit */
N#define URT_CR0_MDS_adr_h0                          ((uint16_t)0x0030)      /*!< Bit Value =(0x3):ADR of 16bit */
N#define URT_CR0_MDS_adr_b0                          ((uint8_t )0x30)        /*!< Bit Value =(0x3):ADR of 8bit */
N
N#define URT_CR0_DAT_LINE_mask_w                     ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define URT_CR0_DAT_LINE_mask_h0                    ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define URT_CR0_DAT_LINE_mask_b0                    ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_CR0_DAT_LINE_2_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):2 of 32bit */
N#define URT_CR0_DAT_LINE_2_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):2 of 16bit */
N#define URT_CR0_DAT_LINE_2_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):2 of 8bit */
N#define URT_CR0_DAT_LINE_1_w                        ((uint32_t)0x00000008)  /*!< Bit Value =(1):1 of 32bit */
N#define URT_CR0_DAT_LINE_1_h0                       ((uint16_t)0x0008)      /*!< Bit Value =(1):1 of 16bit */
N#define URT_CR0_DAT_LINE_1_b0                       ((uint8_t )0x08)        /*!< Bit Value =(1):1 of 8bit */
N
N#define URT_CR0_HDX_EN_mask_w                       ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define URT_CR0_HDX_EN_mask_h0                      ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define URT_CR0_HDX_EN_mask_b0                      ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_CR0_HDX_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR0_HDX_EN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR0_HDX_EN_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR0_HDX_EN_enable_w                     ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR0_HDX_EN_enable_h0                    ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR0_HDX_EN_enable_b0                    ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR0_OS_MDS_mask_w                       ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define URT_CR0_OS_MDS_mask_h0                      ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define URT_CR0_OS_MDS_mask_b0                      ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_CR0_OS_MDS_three_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Three of 32bit */
N#define URT_CR0_OS_MDS_three_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Three of 16bit */
N#define URT_CR0_OS_MDS_three_b0                     ((uint8_t )0x00)        /*!< Bit Value =(0):Three of 8bit */
N#define URT_CR0_OS_MDS_one_w                        ((uint32_t)0x00000002)  /*!< Bit Value =(1):One of 32bit */
N#define URT_CR0_OS_MDS_one_h0                       ((uint16_t)0x0002)      /*!< Bit Value =(1):One of 16bit */
N#define URT_CR0_OS_MDS_one_b0                       ((uint8_t )0x02)        /*!< Bit Value =(1):One of 8bit */
N
N#define URT_CR0_EN_mask_w                           ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define URT_CR0_EN_mask_h0                          ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_CR0_EN_mask_b0                          ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_CR0_EN_disable_w                        ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR0_EN_disable_h0                       ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR0_EN_disable_b0                       ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR0_EN_enable_w                         ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR0_EN_enable_h0                        ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR0_EN_enable_b0                        ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_CR1  [register's definitions]
N *              Offset[0x14]  URT control register 1
N ******************************************************************************
N */
N///@{
N#define URT_CR1_default                             ((uint32_t)0x0F400F40)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_CR1 */
N#define URT_CR1_TXOS_NUM_mask_w                     ((uint32_t)0x1F000000)  /*!< Bit Mask of 32bit */
N#define URT_CR1_TXOS_NUM_mask_h1                    ((uint16_t)0x1F00)      /*!< Bit Mask of 16bit */
N#define URT_CR1_TXOS_NUM_mask_b3                    ((uint8_t )0x1F)        /*!< Bit Mask of 8bit */
N#define URT_CR1_TXOS_NUM_shift_w                    (24)                    /*!< Bit Shift of 32bit */
N#define URT_CR1_TXOS_NUM_shift_h1                   (8)                     /*!< Bit Shift of 16bit */
N#define URT_CR1_TXOS_NUM_shift_b3                   (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_CR1_TXSTP_LEN_mask_w                    ((uint32_t)0x00C00000)  /*!< Bit Mask of 32bit */
N#define URT_CR1_TXSTP_LEN_mask_h1                   ((uint16_t)0x00C0)      /*!< Bit Mask of 16bit */
N#define URT_CR1_TXSTP_LEN_mask_b2                   ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define URT_CR1_TXSTP_LEN_0_5bit_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):0.5bit of 32bit */
N#define URT_CR1_TXSTP_LEN_0_5bit_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):0.5bit of 16bit */
N#define URT_CR1_TXSTP_LEN_0_5bit_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):0.5bit of 8bit */
N#define URT_CR1_TXSTP_LEN_1bit_w                    ((uint32_t)0x00400000)  /*!< Bit Value =(0x1):1bit of 32bit */
N#define URT_CR1_TXSTP_LEN_1bit_h1                   ((uint16_t)0x0040)      /*!< Bit Value =(0x1):1bit of 16bit */
N#define URT_CR1_TXSTP_LEN_1bit_b2                   ((uint8_t )0x40)        /*!< Bit Value =(0x1):1bit of 8bit */
N#define URT_CR1_TXSTP_LEN_1_5bit_w                  ((uint32_t)0x00800000)  /*!< Bit Value =(0x2):1.5bit of 32bit */
N#define URT_CR1_TXSTP_LEN_1_5bit_h1                 ((uint16_t)0x0080)      /*!< Bit Value =(0x2):1.5bit of 16bit */
N#define URT_CR1_TXSTP_LEN_1_5bit_b2                 ((uint8_t )0x80)        /*!< Bit Value =(0x2):1.5bit of 8bit */
N#define URT_CR1_TXSTP_LEN_2bit_w                    ((uint32_t)0x00C00000)  /*!< Bit Value =(0x3):2bit of 32bit */
N#define URT_CR1_TXSTP_LEN_2bit_h1                   ((uint16_t)0x00C0)      /*!< Bit Value =(0x3):2bit of 16bit */
N#define URT_CR1_TXSTP_LEN_2bit_b2                   ((uint8_t )0xC0)        /*!< Bit Value =(0x3):2bit of 8bit */
N
N#define URT_CR1_TXMSB_EN_mask_w                     ((uint32_t)0x00200000)  /*!< Bit Mask of 32bit */
N#define URT_CR1_TXMSB_EN_mask_h1                    ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define URT_CR1_TXMSB_EN_mask_b2                    ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_CR1_TXMSB_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR1_TXMSB_EN_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR1_TXMSB_EN_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR1_TXMSB_EN_enable_w                   ((uint32_t)0x00200000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR1_TXMSB_EN_enable_h1                  ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR1_TXMSB_EN_enable_b2                  ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR1_TXPAR_STK_mask_w                    ((uint32_t)0x00100000)  /*!< Bit Mask of 32bit */
N#define URT_CR1_TXPAR_STK_mask_h1                   ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_CR1_TXPAR_STK_mask_b2                   ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_CR1_TXPAR_STK_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR1_TXPAR_STK_disable_h1                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR1_TXPAR_STK_disable_b2                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR1_TXPAR_STK_enable_w                  ((uint32_t)0x00100000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR1_TXPAR_STK_enable_h1                 ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR1_TXPAR_STK_enable_b2                 ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR1_TXPAR_POL_mask_w                    ((uint32_t)0x00080000)  /*!< Bit Mask of 32bit */
N#define URT_CR1_TXPAR_POL_mask_h1                   ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define URT_CR1_TXPAR_POL_mask_b2                   ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_CR1_TXPAR_POL_even_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Even of 32bit */
N#define URT_CR1_TXPAR_POL_even_h1                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Even of 16bit */
N#define URT_CR1_TXPAR_POL_even_b2                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):Even of 8bit */
N#define URT_CR1_TXPAR_POL_odd_w                     ((uint32_t)0x00080000)  /*!< Bit Value =(0x1):Odd of 32bit */
N#define URT_CR1_TXPAR_POL_odd_h1                    ((uint16_t)0x0008)      /*!< Bit Value =(0x1):Odd of 16bit */
N#define URT_CR1_TXPAR_POL_odd_b2                    ((uint8_t )0x08)        /*!< Bit Value =(0x1):Odd of 8bit */
N
N#define URT_CR1_TXPAR_EN_mask_w                     ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define URT_CR1_TXPAR_EN_mask_h1                    ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define URT_CR1_TXPAR_EN_mask_b2                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_CR1_TXPAR_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR1_TXPAR_EN_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR1_TXPAR_EN_disable_b2                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR1_TXPAR_EN_enable_w                   ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR1_TXPAR_EN_enable_h1                  ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR1_TXPAR_EN_enable_b2                  ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR1_TXDSIZE_mask_w                      ((uint32_t)0x00030000)  /*!< Bit Mask of 32bit */
N#define URT_CR1_TXDSIZE_mask_h1                     ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define URT_CR1_TXDSIZE_mask_b2                     ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define URT_CR1_TXDSIZE_8bit_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):8bit of 32bit */
N#define URT_CR1_TXDSIZE_8bit_h1                     ((uint16_t)0x0000)      /*!< Bit Value =(0x0):8bit of 16bit */
N#define URT_CR1_TXDSIZE_8bit_b2                     ((uint8_t )0x00)        /*!< Bit Value =(0x0):8bit of 8bit */
N#define URT_CR1_TXDSIZE_7bit_w                      ((uint32_t)0x00010000)  /*!< Bit Value =(0x1):7bit of 32bit */
N#define URT_CR1_TXDSIZE_7bit_h1                     ((uint16_t)0x0001)      /*!< Bit Value =(0x1):7bit of 16bit */
N#define URT_CR1_TXDSIZE_7bit_b2                     ((uint8_t )0x01)        /*!< Bit Value =(0x1):7bit of 8bit */
N
N#define URT_CR1_RXOS_NUM_mask_w                     ((uint32_t)0x00001F00)  /*!< Bit Mask of 32bit */
N#define URT_CR1_RXOS_NUM_mask_h0                    ((uint16_t)0x1F00)      /*!< Bit Mask of 16bit */
N#define URT_CR1_RXOS_NUM_mask_b1                    ((uint8_t )0x1F)        /*!< Bit Mask of 8bit */
N#define URT_CR1_RXOS_NUM_shift_w                    (8)                     /*!< Bit Shift of 32bit */
N#define URT_CR1_RXOS_NUM_shift_h0                   (8)                     /*!< Bit Shift of 16bit */
N#define URT_CR1_RXOS_NUM_shift_b1                   (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_CR1_RXSTP_LEN_mask_w                    ((uint32_t)0x000000C0)  /*!< Bit Mask of 32bit */
N#define URT_CR1_RXSTP_LEN_mask_h0                   ((uint16_t)0x00C0)      /*!< Bit Mask of 16bit */
N#define URT_CR1_RXSTP_LEN_mask_b0                   ((uint8_t )0xC0)        /*!< Bit Mask of 8bit */
N#define URT_CR1_RXSTP_LEN_0_5bit_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):0.5bit of 32bit */
N#define URT_CR1_RXSTP_LEN_0_5bit_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0x0):0.5bit of 16bit */
N#define URT_CR1_RXSTP_LEN_0_5bit_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0x0):0.5bit of 8bit */
N#define URT_CR1_RXSTP_LEN_1bit_w                    ((uint32_t)0x00000040)  /*!< Bit Value =(0x1):1bit of 32bit */
N#define URT_CR1_RXSTP_LEN_1bit_h0                   ((uint16_t)0x0040)      /*!< Bit Value =(0x1):1bit of 16bit */
N#define URT_CR1_RXSTP_LEN_1bit_b0                   ((uint8_t )0x40)        /*!< Bit Value =(0x1):1bit of 8bit */
N#define URT_CR1_RXSTP_LEN_2bit_w                    ((uint32_t)0x000000C0)  /*!< Bit Value =(0x3):2bit of 32bit */
N#define URT_CR1_RXSTP_LEN_2bit_h0                   ((uint16_t)0x00C0)      /*!< Bit Value =(0x3):2bit of 16bit */
N#define URT_CR1_RXSTP_LEN_2bit_b0                   ((uint8_t )0xC0)        /*!< Bit Value =(0x3):2bit of 8bit */
N
N#define URT_CR1_RXMSB_EN_mask_w                     ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define URT_CR1_RXMSB_EN_mask_h0                    ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define URT_CR1_RXMSB_EN_mask_b0                    ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_CR1_RXMSB_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR1_RXMSB_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR1_RXMSB_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR1_RXMSB_EN_enable_w                   ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR1_RXMSB_EN_enable_h0                  ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR1_RXMSB_EN_enable_b0                  ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR1_RXPAR_STK_mask_w                    ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define URT_CR1_RXPAR_STK_mask_h0                   ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_CR1_RXPAR_STK_mask_b0                   ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_CR1_RXPAR_STK_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR1_RXPAR_STK_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR1_RXPAR_STK_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR1_RXPAR_STK_enable_w                  ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR1_RXPAR_STK_enable_h0                 ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR1_RXPAR_STK_enable_b0                 ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR1_RXPAR_POL_mask_w                    ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define URT_CR1_RXPAR_POL_mask_h0                   ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define URT_CR1_RXPAR_POL_mask_b0                   ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_CR1_RXPAR_POL_even_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Even of 32bit */
N#define URT_CR1_RXPAR_POL_even_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Even of 16bit */
N#define URT_CR1_RXPAR_POL_even_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):Even of 8bit */
N#define URT_CR1_RXPAR_POL_odd_w                     ((uint32_t)0x00000008)  /*!< Bit Value =(0x1):Odd of 32bit */
N#define URT_CR1_RXPAR_POL_odd_h0                    ((uint16_t)0x0008)      /*!< Bit Value =(0x1):Odd of 16bit */
N#define URT_CR1_RXPAR_POL_odd_b0                    ((uint8_t )0x08)        /*!< Bit Value =(0x1):Odd of 8bit */
N
N#define URT_CR1_RXPAR_EN_mask_w                     ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define URT_CR1_RXPAR_EN_mask_h0                    ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define URT_CR1_RXPAR_EN_mask_b0                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_CR1_RXPAR_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR1_RXPAR_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR1_RXPAR_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR1_RXPAR_EN_enable_w                   ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR1_RXPAR_EN_enable_h0                  ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR1_RXPAR_EN_enable_b0                  ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR1_RXDSIZE_mask_w                      ((uint32_t)0x00000003)  /*!< Bit Mask of 32bit */
N#define URT_CR1_RXDSIZE_mask_h0                     ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define URT_CR1_RXDSIZE_mask_b0                     ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define URT_CR1_RXDSIZE_8bit_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):8bit of 32bit */
N#define URT_CR1_RXDSIZE_8bit_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0x0):8bit of 16bit */
N#define URT_CR1_RXDSIZE_8bit_b0                     ((uint8_t )0x00)        /*!< Bit Value =(0x0):8bit of 8bit */
N#define URT_CR1_RXDSIZE_7bit_w                      ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):7bit of 32bit */
N#define URT_CR1_RXDSIZE_7bit_h0                     ((uint16_t)0x0001)      /*!< Bit Value =(0x1):7bit of 16bit */
N#define URT_CR1_RXDSIZE_7bit_b0                     ((uint8_t )0x01)        /*!< Bit Value =(0x1):7bit of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_CR2  [register's definitions]
N *              Offset[0x18]  URT control register 2
N ******************************************************************************
N */
N///@{
N#define URT_CR2_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_CR2 */
N#define URT_CR2_NSS_SWEN_mask_w                     ((uint32_t)0x04000000)  /*!< Bit Mask of 32bit */
N#define URT_CR2_NSS_SWEN_mask_h1                    ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define URT_CR2_NSS_SWEN_mask_b3                    ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_CR2_NSS_SWEN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR2_NSS_SWEN_disable_h1                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR2_NSS_SWEN_disable_b3                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR2_NSS_SWEN_enable_w                   ((uint32_t)0x04000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR2_NSS_SWEN_enable_h1                  ((uint16_t)0x0400)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR2_NSS_SWEN_enable_b3                  ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR2_NSS_INV_mask_w                      ((uint32_t)0x02000000)  /*!< Bit Mask of 32bit */
N#define URT_CR2_NSS_INV_mask_h1                     ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define URT_CR2_NSS_INV_mask_b3                     ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_CR2_NSS_INV_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR2_NSS_INV_disable_h1                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR2_NSS_INV_disable_b3                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR2_NSS_INV_enable_w                    ((uint32_t)0x02000000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR2_NSS_INV_enable_h1                   ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR2_NSS_INV_enable_b3                   ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR2_NSS_SWO_mask_w                      ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define URT_CR2_NSS_SWO_mask_h1                     ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_CR2_NSS_SWO_mask_b2                     ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_CR2_NSS_SWO_shift_w                     (16)                    /*!< Bit Shift of 32bit */
N#define URT_CR2_NSS_SWO_shift_h1                    (0)                     /*!< Bit Shift of 16bit */
N#define URT_CR2_NSS_SWO_shift_b2                    (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_CR2_TX_HALT_mask_w                      ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define URT_CR2_TX_HALT_mask_h0                     ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_CR2_TX_HALT_mask_b0                     ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_CR2_TX_HALT_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR2_TX_HALT_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR2_TX_HALT_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR2_TX_HALT_enable_w                    ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR2_TX_HALT_enable_h0                   ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR2_TX_HALT_enable_b0                   ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR2_TX_EN_mask_w                        ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define URT_CR2_TX_EN_mask_h0                       ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define URT_CR2_TX_EN_mask_b0                       ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_CR2_TX_EN_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR2_TX_EN_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR2_TX_EN_disable_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR2_TX_EN_enable_w                      ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR2_TX_EN_enable_h0                     ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR2_TX_EN_enable_b0                     ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR2_RX_EN_mask_w                        ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define URT_CR2_RX_EN_mask_h0                       ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define URT_CR2_RX_EN_mask_b0                       ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_CR2_RX_EN_disable_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR2_RX_EN_disable_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR2_RX_EN_disable_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR2_RX_EN_enable_w                      ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR2_RX_EN_enable_h0                     ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR2_RX_EN_enable_b0                     ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR2_ADR_TX_mask_w                       ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define URT_CR2_ADR_TX_mask_h0                      ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define URT_CR2_ADR_TX_mask_b0                      ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_CR2_ADR_TX_normal_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_CR2_ADR_TX_normal_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_CR2_ADR_TX_normal_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_CR2_ADR_TX_send_w                       ((uint32_t)0x00000002)  /*!< Bit Value =(1):Send of 32bit */
N#define URT_CR2_ADR_TX_send_h0                      ((uint16_t)0x0002)      /*!< Bit Value =(1):Send of 16bit */
N#define URT_CR2_ADR_TX_send_b0                      ((uint8_t )0x02)        /*!< Bit Value =(1):Send of 8bit */
N
N#define URT_CR2_BK_TX_mask_w                        ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define URT_CR2_BK_TX_mask_h0                       ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_CR2_BK_TX_mask_b0                       ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_CR2_BK_TX_normal_w                      ((uint32_t)0x00000000)  /*!< Bit Value =(0):Normal of 32bit */
N#define URT_CR2_BK_TX_normal_h0                     ((uint16_t)0x0000)      /*!< Bit Value =(0):Normal of 16bit */
N#define URT_CR2_BK_TX_normal_b0                     ((uint8_t )0x00)        /*!< Bit Value =(0):Normal of 8bit */
N#define URT_CR2_BK_TX_send_w                        ((uint32_t)0x00000001)  /*!< Bit Value =(1):Send of 32bit */
N#define URT_CR2_BK_TX_send_h0                       ((uint16_t)0x0001)      /*!< Bit Value =(1):Send of 16bit */
N#define URT_CR2_BK_TX_send_b0                       ((uint8_t )0x01)        /*!< Bit Value =(1):Send of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_CR3  [register's definitions]
N *              Offset[0x1C]  URT control register 3
N ******************************************************************************
N */
N///@{
N#define URT_CR3_default                             ((uint32_t)0x00000A00)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_CR3 */
N#define URT_CR3_TXGT_LEN_mask_w                     ((uint32_t)0x00FF0000)  /*!< Bit Mask of 32bit */
N#define URT_CR3_TXGT_LEN_mask_h1                    ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define URT_CR3_TXGT_LEN_mask_b2                    ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N#define URT_CR3_DET_IDL_mask_w                      ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define URT_CR3_DET_IDL_mask_h0                     ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define URT_CR3_DET_IDL_mask_b1                     ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define URT_CR3_DET_IDL_shift_w                     (8)                     /*!< Bit Shift of 32bit */
N#define URT_CR3_DET_IDL_shift_h0                    (8)                     /*!< Bit Shift of 16bit */
N#define URT_CR3_DET_IDL_shift_b1                    (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_CR3_DET_BK_mask_w                       ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define URT_CR3_DET_BK_mask_h0                      ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_CR3_DET_BK_mask_b0                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_CR3_DET_BK_1bit_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):1Bit of 32bit */
N#define URT_CR3_DET_BK_1bit_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0x0):1Bit of 16bit */
N#define URT_CR3_DET_BK_1bit_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0x0):1Bit of 8bit */
N#define URT_CR3_DET_BK_3bit_w                       ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):3Bit of 32bit */
N#define URT_CR3_DET_BK_3bit_h0                      ((uint16_t)0x0010)      /*!< Bit Value =(0x1):3Bit of 16bit */
N#define URT_CR3_DET_BK_3bit_b0                      ((uint8_t )0x10)        /*!< Bit Value =(0x1):3Bit of 8bit */
N
N#define URT_CR3_CPHA_mask_w                         ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define URT_CR3_CPHA_mask_h0                        ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define URT_CR3_CPHA_mask_b0                        ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_CR3_CPHA_leading_edge_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Leading edge of 32bit */
N#define URT_CR3_CPHA_leading_edge_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Leading edge of 16bit */
N#define URT_CR3_CPHA_leading_edge_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Leading edge of 8bit */
N#define URT_CR3_CPHA_trailing_edge_w                ((uint32_t)0x00000004)  /*!< Bit Value =(1):Trailing edge of 32bit */
N#define URT_CR3_CPHA_trailing_edge_h0               ((uint16_t)0x0004)      /*!< Bit Value =(1):Trailing edge of 16bit */
N#define URT_CR3_CPHA_trailing_edge_b0               ((uint8_t )0x04)        /*!< Bit Value =(1):Trailing edge of 8bit */
N
N#define URT_CR3_CPOL_mask_w                         ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define URT_CR3_CPOL_mask_h0                        ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define URT_CR3_CPOL_mask_b0                        ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_CR3_CPOL_low_w                          ((uint32_t)0x00000000)  /*!< Bit Value =(0):Low of 32bit */
N#define URT_CR3_CPOL_low_h0                         ((uint16_t)0x0000)      /*!< Bit Value =(0):Low of 16bit */
N#define URT_CR3_CPOL_low_b0                         ((uint8_t )0x00)        /*!< Bit Value =(0):Low of 8bit */
N#define URT_CR3_CPOL_high_w                         ((uint32_t)0x00000002)  /*!< Bit Value =(1):High of 32bit */
N#define URT_CR3_CPOL_high_h0                        ((uint16_t)0x0002)      /*!< Bit Value =(1):High of 16bit */
N#define URT_CR3_CPOL_high_b0                        ((uint8_t )0x02)        /*!< Bit Value =(1):High of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_CR4  [register's definitions]
N *              Offset[0x20]  URT control register 4
N ******************************************************************************
N */
N///@{
N#define URT_CR4_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_CR4 */
N#define URT_CR4_TNUM_mask_w                         ((uint32_t)0x00007000)  /*!< Bit Mask of 32bit */
N#define URT_CR4_TNUM_mask_h0                        ((uint16_t)0x7000)      /*!< Bit Mask of 16bit */
N#define URT_CR4_TNUM_mask_b1                        ((uint8_t )0x70)        /*!< Bit Mask of 8bit */
N#define URT_CR4_TNUM_0_w                            ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):0 of 32bit */
N#define URT_CR4_TNUM_0_h0                           ((uint16_t)0x0000)      /*!< Bit Value =(0x0):0 of 16bit */
N#define URT_CR4_TNUM_0_b1                           ((uint8_t )0x00)        /*!< Bit Value =(0x0):0 of 8bit */
N#define URT_CR4_TNUM_1_w                            ((uint32_t)0x00001000)  /*!< Bit Value =(0x1):1 of 32bit */
N#define URT_CR4_TNUM_1_h0                           ((uint16_t)0x1000)      /*!< Bit Value =(0x1):1 of 16bit */
N#define URT_CR4_TNUM_1_b1                           ((uint8_t )0x10)        /*!< Bit Value =(0x1):1 of 8bit */
N#define URT_CR4_TNUM_2_w                            ((uint32_t)0x00002000)  /*!< Bit Value =(0x2):2 of 32bit */
N#define URT_CR4_TNUM_2_h0                           ((uint16_t)0x2000)      /*!< Bit Value =(0x2):2 of 16bit */
N#define URT_CR4_TNUM_2_b1                           ((uint8_t )0x20)        /*!< Bit Value =(0x2):2 of 8bit */
N#define URT_CR4_TNUM_3_w                            ((uint32_t)0x00003000)  /*!< Bit Value =(0x3):3 of 32bit */
N#define URT_CR4_TNUM_3_h0                           ((uint16_t)0x3000)      /*!< Bit Value =(0x3):3 of 16bit */
N#define URT_CR4_TNUM_3_b1                           ((uint8_t )0x30)        /*!< Bit Value =(0x3):3 of 8bit */
N#define URT_CR4_TNUM_4_w                            ((uint32_t)0x00004000)  /*!< Bit Value =(0x4):4 of 32bit */
N#define URT_CR4_TNUM_4_h0                           ((uint16_t)0x4000)      /*!< Bit Value =(0x4):4 of 16bit */
N#define URT_CR4_TNUM_4_b1                           ((uint8_t )0x40)        /*!< Bit Value =(0x4):4 of 8bit */
N
N#define URT_CR4_RNUM_mask_w                         ((uint32_t)0x00000700)  /*!< Bit Mask of 32bit */
N#define URT_CR4_RNUM_mask_h0                        ((uint16_t)0x0700)      /*!< Bit Mask of 16bit */
N#define URT_CR4_RNUM_mask_b1                        ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define URT_CR4_RNUM_0_w                            ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):0 of 32bit */
N#define URT_CR4_RNUM_0_h0                           ((uint16_t)0x0000)      /*!< Bit Value =(0x0):0 of 16bit */
N#define URT_CR4_RNUM_0_b1                           ((uint8_t )0x00)        /*!< Bit Value =(0x0):0 of 8bit */
N#define URT_CR4_RNUM_1_w                            ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):1 of 32bit */
N#define URT_CR4_RNUM_1_h0                           ((uint16_t)0x0100)      /*!< Bit Value =(0x1):1 of 16bit */
N#define URT_CR4_RNUM_1_b1                           ((uint8_t )0x01)        /*!< Bit Value =(0x1):1 of 8bit */
N#define URT_CR4_RNUM_2_w                            ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):2 of 32bit */
N#define URT_CR4_RNUM_2_h0                           ((uint16_t)0x0200)      /*!< Bit Value =(0x2):2 of 16bit */
N#define URT_CR4_RNUM_2_b1                           ((uint8_t )0x02)        /*!< Bit Value =(0x2):2 of 8bit */
N#define URT_CR4_RNUM_3_w                            ((uint32_t)0x00000300)  /*!< Bit Value =(0x3):3 of 32bit */
N#define URT_CR4_RNUM_3_h0                           ((uint16_t)0x0300)      /*!< Bit Value =(0x3):3 of 16bit */
N#define URT_CR4_RNUM_3_b1                           ((uint8_t )0x03)        /*!< Bit Value =(0x3):3 of 8bit */
N#define URT_CR4_RNUM_4_w                            ((uint32_t)0x00000400)  /*!< Bit Value =(0x4):4 of 32bit */
N#define URT_CR4_RNUM_4_h0                           ((uint16_t)0x0400)      /*!< Bit Value =(0x4):4 of 16bit */
N#define URT_CR4_RNUM_4_b1                           ((uint8_t )0x04)        /*!< Bit Value =(0x4):4 of 8bit */
N
N#define URT_CR4_TDAT_CLR_mask_w                     ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define URT_CR4_TDAT_CLR_mask_h0                    ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define URT_CR4_TDAT_CLR_mask_b0                    ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define URT_CR4_TDAT_CLR_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR4_TDAT_CLR_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR4_TDAT_CLR_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR4_TDAT_CLR_enable_w                   ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR4_TDAT_CLR_enable_h0                  ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR4_TDAT_CLR_enable_b0                  ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR4_RDAT_CLR_mask_w                     ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define URT_CR4_RDAT_CLR_mask_h0                    ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define URT_CR4_RDAT_CLR_mask_b0                    ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define URT_CR4_RDAT_CLR_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR4_RDAT_CLR_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR4_RDAT_CLR_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR4_RDAT_CLR_enable_w                   ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR4_RDAT_CLR_enable_h0                  ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR4_RDAT_CLR_enable_b0                  ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR4_TDAT_INV_mask_w                     ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define URT_CR4_TDAT_INV_mask_h0                    ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define URT_CR4_TDAT_INV_mask_b0                    ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_CR4_TDAT_INV_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR4_TDAT_INV_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR4_TDAT_INV_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR4_TDAT_INV_enable_w                   ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR4_TDAT_INV_enable_h0                  ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR4_TDAT_INV_enable_b0                  ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CR4_RDAT_INV_mask_w                     ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define URT_CR4_RDAT_INV_mask_h0                    ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_CR4_RDAT_INV_mask_b0                    ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_CR4_RDAT_INV_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CR4_RDAT_INV_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CR4_RDAT_INV_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CR4_RDAT_INV_enable_w                   ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CR4_RDAT_INV_enable_h0                  ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CR4_RDAT_INV_enable_b0                  ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_RLR  [register's definitions]
N *              Offset[0x24]  URT baud-rate clock counter reload register
N ******************************************************************************
N */
N///@{
N#define URT_RLR_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_RLR */
N#define URT_RLR_PSR_mask_w                          ((uint32_t)0x00000F00)  /*!< Bit Mask of 32bit */
N#define URT_RLR_PSR_mask_h0                         ((uint16_t)0x0F00)      /*!< Bit Mask of 16bit */
N#define URT_RLR_PSR_mask_b1                         ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define URT_RLR_PSR_shift_w                         (8)                     /*!< Bit Shift of 32bit */
N#define URT_RLR_PSR_shift_h0                        (8)                     /*!< Bit Shift of 16bit */
N#define URT_RLR_PSR_shift_b1                        (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_RLR_RLR_mask_w                          ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define URT_RLR_RLR_mask_h0                         ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define URT_RLR_RLR_mask_b0                         ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define URT_RLR_RLR_shift_w                         (0)                     /*!< Bit Shift of 32bit */
N#define URT_RLR_RLR_shift_h0                        (0)                     /*!< Bit Shift of 16bit */
N#define URT_RLR_RLR_shift_b0                        (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_CNT  [register's definitions]
N *              Offset[0x28]  URT baud-rate clock counter register
N ******************************************************************************
N */
N///@{
N#define URT_CNT_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_CNT */
N#define URT_CNT_PSC_mask_w                          ((uint32_t)0x00000F00)  /*!< Bit Mask of 32bit */
N#define URT_CNT_PSC_mask_h0                         ((uint16_t)0x0F00)      /*!< Bit Mask of 16bit */
N#define URT_CNT_PSC_mask_b1                         ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define URT_CNT_PSC_shift_w                         (8)                     /*!< Bit Shift of 32bit */
N#define URT_CNT_PSC_shift_h0                        (8)                     /*!< Bit Shift of 16bit */
N#define URT_CNT_PSC_shift_b1                        (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_CNT_CNT_mask_w                          ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define URT_CNT_CNT_mask_h0                         ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define URT_CNT_CNT_mask_b0                         ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define URT_CNT_CNT_shift_w                         (0)                     /*!< Bit Shift of 32bit */
N#define URT_CNT_CNT_shift_h0                        (0)                     /*!< Bit Shift of 16bit */
N#define URT_CNT_CNT_shift_b0                        (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_RCAP  [register's definitions]
N *              Offset[0x2C]  URT RX data capture register
N ******************************************************************************
N */
N///@{
N#define URT_RCAP_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_RCAP */
N#define URT_RCAP_RCAP_ADR_mask_w                    ((uint32_t)0x00000400)  /*!< Bit Mask of 32bit */
N#define URT_RCAP_RCAP_ADR_mask_h0                   ((uint16_t)0x0400)      /*!< Bit Mask of 16bit */
N#define URT_RCAP_RCAP_ADR_mask_b1                   ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_RCAP_RCAP_ADR_shift_w                   (10)                    /*!< Bit Shift of 32bit */
N#define URT_RCAP_RCAP_ADR_shift_h0                  (10)                    /*!< Bit Shift of 16bit */
N#define URT_RCAP_RCAP_ADR_shift_b1                  (2)                     /*!< Bit Shift of 8bit */
N
N#define URT_RCAP_RCAP_PAR_mask_w                    ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define URT_RCAP_RCAP_PAR_mask_h0                   ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define URT_RCAP_RCAP_PAR_mask_b1                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_RCAP_RCAP_PAR_shift_w                   (9)                     /*!< Bit Shift of 32bit */
N#define URT_RCAP_RCAP_PAR_shift_h0                  (9)                     /*!< Bit Shift of 16bit */
N#define URT_RCAP_RCAP_PAR_shift_b1                  (1)                     /*!< Bit Shift of 8bit */
N
N#define URT_RCAP_RCAP_STP_mask_w                    ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define URT_RCAP_RCAP_STP_mask_h0                   ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define URT_RCAP_RCAP_STP_mask_b1                   ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_RCAP_RCAP_STP_shift_w                   (8)                     /*!< Bit Shift of 32bit */
N#define URT_RCAP_RCAP_STP_shift_h0                  (8)                     /*!< Bit Shift of 16bit */
N#define URT_RCAP_RCAP_STP_shift_b1                  (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_RCAP_RCAP_DAT_mask_w                    ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define URT_RCAP_RCAP_DAT_mask_h0                   ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define URT_RCAP_RCAP_DAT_mask_b0                   ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define URT_RCAP_RCAP_DAT_shift_w                   (0)                     /*!< Bit Shift of 32bit */
N#define URT_RCAP_RCAP_DAT_shift_h0                  (0)                     /*!< Bit Shift of 16bit */
N#define URT_RCAP_RCAP_DAT_shift_b0                  (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_RDAT  [register's definitions]
N *              Offset[0x30]  URT RX data register
N ******************************************************************************
N */
N///@{
N#define URT_RDAT_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_RDAT */
N#define URT_RDAT_RDAT_mask_w                        ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define URT_RDAT_RDAT_shift_w                       (0)                     /*!< Bit Shift of 32bit */
N#define URT_RDAT_RDAT_shift_h0                      (0)                     /*!< Bit Shift of 16bit */
N#define URT_RDAT_RDAT_shift_b0                      (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_TDAT  [register's definitions]
N *              Offset[0x34]  URT TX data register
N ******************************************************************************
N */
N///@{
N#define URT_TDAT_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_TDAT */
N#define URT_TDAT_TDAT_mask_w                        ((uint32_t)0xFFFFFFFF)  /*!< Bit Mask of 32bit */
N#define URT_TDAT_TDAT_shift_w                       (0)                     /*!< Bit Shift of 32bit */
N#define URT_TDAT_TDAT_shift_h0                      (0)                     /*!< Bit Shift of 16bit */
N#define URT_TDAT_TDAT_shift_b0                      (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_TDAT3  [register's definitions]
N *              Offset[0x38]  URT TX data 3-byte register
N ******************************************************************************
N */
N///@{
N#define URT_TDAT3_default                           ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_TDAT3 */
N#define URT_TDAT3_TDAT3_mask_w                      ((uint32_t)0x00FFFFFF)  /*!< Bit Mask of 32bit */
N#define URT_TDAT3_TDAT3_shift_w                     (0)                     /*!< Bit Shift of 32bit */
N#define URT_TDAT3_TDAT3_shift_h0                    (0)                     /*!< Bit Shift of 16bit */
N#define URT_TDAT3_TDAT3_shift_b0                    (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_SBUF  [register's definitions]
N *              Offset[0x3C]  URT data shift buffer register
N ******************************************************************************
N */
N///@{
N#define URT_SBUF_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_SBUF */
N#define URT_SBUF_TSBUF_mask_w                       ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define URT_SBUF_TSBUF_mask_h0                      ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define URT_SBUF_TSBUF_mask_b1                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define URT_SBUF_TSBUF_shift_w                      (8)                     /*!< Bit Shift of 32bit */
N#define URT_SBUF_TSBUF_shift_h0                     (8)                     /*!< Bit Shift of 16bit */
N#define URT_SBUF_TSBUF_shift_b1                     (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_SBUF_RSBUF_mask_w                       ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define URT_SBUF_RSBUF_mask_h0                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define URT_SBUF_RSBUF_mask_b0                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define URT_SBUF_RSBUF_shift_w                      (0)                     /*!< Bit Shift of 32bit */
N#define URT_SBUF_RSBUF_shift_h0                     (0)                     /*!< Bit Shift of 16bit */
N#define URT_SBUF_RSBUF_shift_b0                     (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_TMOUT  [register's definitions]
N *              Offset[0x40]  URT timeout control register
N ******************************************************************************
N */
N///@{
N#define URT_TMOUT_default                           ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_TMOUT */
N#define URT_TMOUT_CALTMO_TH_mask_w                  ((uint32_t)0xF0000000)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_CALTMO_TH_mask_h1                 ((uint16_t)0xF000)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_CALTMO_TH_mask_b3                 ((uint8_t )0xF0)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_CALTMO_TH_shift_w                 (28)                    /*!< Bit Shift of 32bit */
N#define URT_TMOUT_CALTMO_TH_shift_h1                (12)                    /*!< Bit Shift of 16bit */
N#define URT_TMOUT_CALTMO_TH_shift_b3                (4)                     /*!< Bit Shift of 8bit */
N
N#define URT_TMOUT_BKTMO_TH_mask_w                   ((uint32_t)0x0F000000)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_BKTMO_TH_mask_h1                  ((uint16_t)0x0F00)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_BKTMO_TH_mask_b3                  ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_BKTMO_TH_shift_w                  (24)                    /*!< Bit Shift of 32bit */
N#define URT_TMOUT_BKTMO_TH_shift_h1                 (8)                     /*!< Bit Shift of 16bit */
N#define URT_TMOUT_BKTMO_TH_shift_b3                 (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_TMOUT_RXTMO_TH_mask_w                   ((uint32_t)0x00FF0000)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_RXTMO_TH_mask_h1                  ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_RXTMO_TH_mask_b2                  ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_RXTMO_TH_shift_w                  (16)                    /*!< Bit Shift of 32bit */
N#define URT_TMOUT_RXTMO_TH_shift_h1                 (0)                     /*!< Bit Shift of 16bit */
N#define URT_TMOUT_RXTMO_TH_shift_b2                 (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_TMOUT_TMO_LCK_mask_w                    ((uint32_t)0x00008000)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_TMO_LCK_mask_h0                   ((uint16_t)0x8000)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_TMO_LCK_mask_b1                   ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_TMO_LCK_locked_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Locked of 32bit */
N#define URT_TMOUT_TMO_LCK_locked_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Locked of 16bit */
N#define URT_TMOUT_TMO_LCK_locked_b1                 ((uint8_t )0x00)        /*!< Bit Value =(0):Locked of 8bit */
N#define URT_TMOUT_TMO_LCK_un_locked_w               ((uint32_t)0x00008000)  /*!< Bit Value =(1):Un-Locked of 32bit */
N#define URT_TMOUT_TMO_LCK_un_locked_h0              ((uint16_t)0x8000)      /*!< Bit Value =(1):Un-Locked of 16bit */
N#define URT_TMOUT_TMO_LCK_un_locked_b1              ((uint8_t )0x80)        /*!< Bit Value =(1):Un-Locked of 8bit */
N
N#define URT_TMOUT_TMO_STA_mask_w                    ((uint32_t)0x00004000)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_TMO_STA_mask_h0                   ((uint16_t)0x4000)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_TMO_STA_mask_b1                   ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_TMO_STA_0_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0):0 of 32bit */
N#define URT_TMOUT_TMO_STA_0_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0):0 of 16bit */
N#define URT_TMOUT_TMO_STA_0_b1                      ((uint8_t )0x00)        /*!< Bit Value =(0):0 of 8bit */
N#define URT_TMOUT_TMO_STA_1_w                       ((uint32_t)0x00004000)  /*!< Bit Value =(1):1 of 32bit */
N#define URT_TMOUT_TMO_STA_1_h0                      ((uint16_t)0x4000)      /*!< Bit Value =(1):1 of 16bit */
N#define URT_TMOUT_TMO_STA_1_b1                      ((uint8_t )0x40)        /*!< Bit Value =(1):1 of 8bit */
N
N#define URT_TMOUT_TMO_CKS_mask_w                    ((uint32_t)0x00000700)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_TMO_CKS_mask_h0                   ((uint16_t)0x0700)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_TMO_CKS_mask_b1                   ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_TMO_CKS_uart_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):UART of 32bit */
N#define URT_TMOUT_TMO_CKS_uart_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):UART of 16bit */
N#define URT_TMOUT_TMO_CKS_uart_b1                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):UART of 8bit */
N#define URT_TMOUT_TMO_CKS_input_w                   ((uint32_t)0x00000100)  /*!< Bit Value =(0x1):Input of 32bit */
N#define URT_TMOUT_TMO_CKS_input_h0                  ((uint16_t)0x0100)      /*!< Bit Value =(0x1):Input of 16bit */
N#define URT_TMOUT_TMO_CKS_input_b1                  ((uint8_t )0x01)        /*!< Bit Value =(0x1):Input of 8bit */
N#define URT_TMOUT_TMO_CKS_noise_w                   ((uint32_t)0x00000200)  /*!< Bit Value =(0x2):Noise of 32bit */
N#define URT_TMOUT_TMO_CKS_noise_h0                  ((uint16_t)0x0200)      /*!< Bit Value =(0x2):Noise of 16bit */
N#define URT_TMOUT_TMO_CKS_noise_b1                  ((uint8_t )0x02)        /*!< Bit Value =(0x2):Noise of 8bit */
N
N#define URT_TMOUT_CALTMO_EN_mask_w                  ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_CALTMO_EN_mask_h0                 ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_CALTMO_EN_mask_b0                 ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_CALTMO_EN_disable_w               ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_TMOUT_CALTMO_EN_disable_h0              ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_TMOUT_CALTMO_EN_disable_b0              ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_TMOUT_CALTMO_EN_enable_w                ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_TMOUT_CALTMO_EN_enable_h0               ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_TMOUT_CALTMO_EN_enable_b0               ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_TMOUT_BKTMO_EN_mask_w                   ((uint32_t)0x00000040)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_BKTMO_EN_mask_h0                  ((uint16_t)0x0040)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_BKTMO_EN_mask_b0                  ((uint8_t )0x40)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_BKTMO_EN_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_TMOUT_BKTMO_EN_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_TMOUT_BKTMO_EN_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_TMOUT_BKTMO_EN_enable_w                 ((uint32_t)0x00000040)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_TMOUT_BKTMO_EN_enable_h0                ((uint16_t)0x0040)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_TMOUT_BKTMO_EN_enable_b0                ((uint8_t )0x40)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_TMOUT_RXTMO_EN_mask_w                   ((uint32_t)0x00000020)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_RXTMO_EN_mask_h0                  ((uint16_t)0x0020)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_RXTMO_EN_mask_b0                  ((uint8_t )0x20)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_RXTMO_EN_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_TMOUT_RXTMO_EN_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_TMOUT_RXTMO_EN_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_TMOUT_RXTMO_EN_enable_w                 ((uint32_t)0x00000020)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_TMOUT_RXTMO_EN_enable_h0                ((uint16_t)0x0020)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_TMOUT_RXTMO_EN_enable_b0                ((uint8_t )0x20)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_TMOUT_IDTMO_EN_mask_w                   ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_IDTMO_EN_mask_h0                  ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_IDTMO_EN_mask_b0                  ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_IDTMO_EN_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_TMOUT_IDTMO_EN_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_TMOUT_IDTMO_EN_disable_b0               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_TMOUT_IDTMO_EN_enable_w                 ((uint32_t)0x00000010)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_TMOUT_IDTMO_EN_enable_h0                ((uint16_t)0x0010)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_TMOUT_IDTMO_EN_enable_b0                ((uint8_t )0x10)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_TMOUT_TMO_MDS_mask_w                    ((uint32_t)0x0000000C)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_TMO_MDS_mask_h0                   ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_TMO_MDS_mask_b0                   ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_TMO_MDS_uart_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):UART of 32bit */
N#define URT_TMOUT_TMO_MDS_uart_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):UART of 16bit */
N#define URT_TMOUT_TMO_MDS_uart_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):UART of 8bit */
N#define URT_TMOUT_TMO_MDS_general_w                 ((uint32_t)0x00000004)  /*!< Bit Value =(0x1):General of 32bit */
N#define URT_TMOUT_TMO_MDS_general_h0                ((uint16_t)0x0004)      /*!< Bit Value =(0x1):General of 16bit */
N#define URT_TMOUT_TMO_MDS_general_b0                ((uint8_t )0x04)        /*!< Bit Value =(0x1):General of 8bit */
N
N#define URT_TMOUT_TMO_RST_mask_w                    ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_TMO_RST_mask_h0                   ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_TMO_RST_mask_b0                   ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_TMO_RST_disable_w                 ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_TMOUT_TMO_RST_disable_h0                ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_TMOUT_TMO_RST_disable_b0                ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_TMOUT_TMO_RST_enable_w                  ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_TMOUT_TMO_RST_enable_h0                 ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_TMOUT_TMO_RST_enable_b0                 ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_TMOUT_TMO_EN_mask_w                     ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT_TMO_EN_mask_h0                    ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT_TMO_EN_mask_b0                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_TMOUT_TMO_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_TMOUT_TMO_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_TMOUT_TMO_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_TMOUT_TMO_EN_enable_w                   ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_TMOUT_TMO_EN_enable_h0                  ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_TMOUT_TMO_EN_enable_b0                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_TMOUT2  [register's definitions]
N *              Offset[0x44]  URT timeout control register 2
N ******************************************************************************
N */
N///@{
N#define URT_TMOUT2_default                          ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_TMOUT2 */
N#define URT_TMOUT2_TMO_CNT_mask_w                   ((uint32_t)0xFFFF0000)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT2_TMO_CNT_mask_h1                  ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT2_TMO_CNT_shift_w                  (16)                    /*!< Bit Shift of 32bit */
N#define URT_TMOUT2_TMO_CNT_shift_h1                 (0)                     /*!< Bit Shift of 16bit */
N#define URT_TMOUT2_TMO_CNT_shift_b2                 (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_TMOUT2_IDTMO_TH_mask_w                  ((uint32_t)0x0000FFFF)  /*!< Bit Mask of 32bit */
N#define URT_TMOUT2_IDTMO_TH_mask_h0                 ((uint16_t)0xFFFF)      /*!< Bit Mask of 16bit */
N#define URT_TMOUT2_IDTMO_TH_shift_w                 (0)                     /*!< Bit Shift of 32bit */
N#define URT_TMOUT2_IDTMO_TH_shift_h0                (0)                     /*!< Bit Shift of 16bit */
N#define URT_TMOUT2_IDTMO_TH_shift_b0                (0)                     /*!< Bit Shift of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_SC  [register's definitions]
N *              Offset[0x48]  URT SmartCard control register
N ******************************************************************************
N */
N///@{
N#define URT_SC_default                              ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_SC */
N#define URT_SC_RXE_NUM_mask_w                       ((uint32_t)0x00007000)  /*!< Bit Mask of 32bit */
N#define URT_SC_RXE_NUM_mask_h0                      ((uint16_t)0x7000)      /*!< Bit Mask of 16bit */
N#define URT_SC_RXE_NUM_mask_b1                      ((uint8_t )0x70)        /*!< Bit Mask of 8bit */
N#define URT_SC_RXE_NUM_shift_w                      (12)                    /*!< Bit Shift of 32bit */
N#define URT_SC_RXE_NUM_shift_h0                     (12)                    /*!< Bit Shift of 16bit */
N#define URT_SC_RXE_NUM_shift_b1                     (4)                     /*!< Bit Shift of 8bit */
N
N#define URT_SC_TXE_NUM_mask_w                       ((uint32_t)0x00000700)  /*!< Bit Mask of 32bit */
N#define URT_SC_TXE_NUM_mask_h0                      ((uint16_t)0x0700)      /*!< Bit Mask of 16bit */
N#define URT_SC_TXE_NUM_mask_b1                      ((uint8_t )0x07)        /*!< Bit Mask of 8bit */
N#define URT_SC_TXE_NUM_shift_w                      (8)                     /*!< Bit Shift of 32bit */
N#define URT_SC_TXE_NUM_shift_h0                     (8)                     /*!< Bit Shift of 16bit */
N#define URT_SC_TXE_NUM_shift_b1                     (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_SC_RXE_LEN_mask_w                       ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define URT_SC_RXE_LEN_mask_h0                      ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_SC_RXE_LEN_mask_b0                      ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_SC_RXE_LEN_1bit_w                       ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):1Bit of 32bit */
N#define URT_SC_RXE_LEN_1bit_h0                      ((uint16_t)0x0000)      /*!< Bit Value =(0x0):1Bit of 16bit */
N#define URT_SC_RXE_LEN_1bit_b0                      ((uint8_t )0x00)        /*!< Bit Value =(0x0):1Bit of 8bit */
N#define URT_SC_RXE_LEN_2bit_w                       ((uint32_t)0x00000010)  /*!< Bit Value =(0x1):2Bit of 32bit */
N#define URT_SC_RXE_LEN_2bit_h0                      ((uint16_t)0x0010)      /*!< Bit Value =(0x1):2Bit of 16bit */
N#define URT_SC_RXE_LEN_2bit_b0                      ((uint8_t )0x10)        /*!< Bit Value =(0x1):2Bit of 8bit */
N
N#define URT_SC_TXE_MDS_mask_w                       ((uint32_t)0x0000000C)  /*!< Bit Mask of 32bit */
N#define URT_SC_TXE_MDS_mask_h0                      ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define URT_SC_TXE_MDS_mask_b0                      ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define URT_SC_TXE_MDS_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Disable of 32bit */
N#define URT_SC_TXE_MDS_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Disable of 16bit */
N#define URT_SC_TXE_MDS_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):Disable of 8bit */
N#define URT_SC_TXE_MDS_chk_low_w                    ((uint32_t)0x00000004)  /*!< Bit Value =(0x1):CHK_Low of 32bit */
N#define URT_SC_TXE_MDS_chk_low_h0                   ((uint16_t)0x0004)      /*!< Bit Value =(0x1):CHK_Low of 16bit */
N#define URT_SC_TXE_MDS_chk_low_b0                   ((uint8_t )0x04)        /*!< Bit Value =(0x1):CHK_Low of 8bit */
N#define URT_SC_TXE_MDS_chk_tx_w                     ((uint32_t)0x00000008)  /*!< Bit Value =(0x2):CHK_TX of 32bit */
N#define URT_SC_TXE_MDS_chk_tx_h0                    ((uint16_t)0x0008)      /*!< Bit Value =(0x2):CHK_TX of 16bit */
N#define URT_SC_TXE_MDS_chk_tx_b0                    ((uint8_t )0x08)        /*!< Bit Value =(0x2):CHK_TX of 8bit */
N
N#define URT_SC_RXE_MDS_mask_w                       ((uint32_t)0x00000003)  /*!< Bit Mask of 32bit */
N#define URT_SC_RXE_MDS_mask_h0                      ((uint16_t)0x0003)      /*!< Bit Mask of 16bit */
N#define URT_SC_RXE_MDS_mask_b0                      ((uint8_t )0x03)        /*!< Bit Mask of 8bit */
N#define URT_SC_RXE_MDS_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Disable of 32bit */
N#define URT_SC_RXE_MDS_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Disable of 16bit */
N#define URT_SC_RXE_MDS_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0x0):Disable of 8bit */
N#define URT_SC_RXE_MDS_enable_w                     ((uint32_t)0x00000001)  /*!< Bit Value =(0x1):Enable of 32bit */
N#define URT_SC_RXE_MDS_enable_h0                    ((uint16_t)0x0001)      /*!< Bit Value =(0x1):Enable of 16bit */
N#define URT_SC_RXE_MDS_enable_b0                    ((uint8_t )0x01)        /*!< Bit Value =(0x1):Enable of 8bit */
N#define URT_SC_RXE_MDS_auto_w                       ((uint32_t)0x00000002)  /*!< Bit Value =(0x2):Auto of 32bit */
N#define URT_SC_RXE_MDS_auto_h0                      ((uint16_t)0x0002)      /*!< Bit Value =(0x2):Auto of 16bit */
N#define URT_SC_RXE_MDS_auto_b0                      ((uint8_t )0x02)        /*!< Bit Value =(0x2):Auto of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_SADR  [register's definitions]
N *              Offset[0x4C]  URT slave address detect register
N ******************************************************************************
N */
N///@{
N#define URT_SADR_default                            ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_SADR */
N#define URT_SADR_SA_MSK_mask_w                      ((uint32_t)0x0000FF00)  /*!< Bit Mask of 32bit */
N#define URT_SADR_SA_MSK_mask_h0                     ((uint16_t)0xFF00)      /*!< Bit Mask of 16bit */
N#define URT_SADR_SA_MSK_mask_b1                     ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N#define URT_SADR_SA_MSK_shift_w                     (8)                     /*!< Bit Shift of 32bit */
N#define URT_SADR_SA_MSK_shift_h0                    (8)                     /*!< Bit Shift of 16bit */
N#define URT_SADR_SA_MSK_shift_b1                    (0)                     /*!< Bit Shift of 8bit */
N
N#define URT_SADR_SA_RX_mask_w                       ((uint32_t)0x000000FF)  /*!< Bit Mask of 32bit */
N#define URT_SADR_SA_RX_mask_h0                      ((uint16_t)0x00FF)      /*!< Bit Mask of 16bit */
N#define URT_SADR_SA_RX_mask_b0                      ((uint8_t )0xFF)        /*!< Bit Mask of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_CAL  [register's definitions]
N *              Offset[0x50]  URT calibration control register
N ******************************************************************************
N */
N///@{
N#define URT_CAL_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_CAL */
N#define URT_CAL_CALC_HE_mask_w                      ((uint32_t)0x00000080)  /*!< Bit Mask of 32bit */
N#define URT_CAL_CALC_HE_mask_h0                     ((uint16_t)0x0080)      /*!< Bit Mask of 16bit */
N#define URT_CAL_CALC_HE_mask_b0                     ((uint8_t )0x80)        /*!< Bit Mask of 8bit */
N#define URT_CAL_CALC_HE_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CAL_CALC_HE_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CAL_CALC_HE_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CAL_CALC_HE_enable_w                    ((uint32_t)0x00000080)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CAL_CALC_HE_enable_h0                   ((uint16_t)0x0080)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CAL_CALC_HE_enable_b0                   ((uint8_t )0x80)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CAL_CAL_MDS_mask_w                      ((uint32_t)0x0000000C)  /*!< Bit Mask of 32bit */
N#define URT_CAL_CAL_MDS_mask_h0                     ((uint16_t)0x000C)      /*!< Bit Mask of 16bit */
N#define URT_CAL_CAL_MDS_mask_b0                     ((uint8_t )0x0C)        /*!< Bit Mask of 8bit */
N#define URT_CAL_CAL_MDS_start_w                     ((uint32_t)0x00000000)  /*!< Bit Value =(0x0):Start of 32bit */
N#define URT_CAL_CAL_MDS_start_h0                    ((uint16_t)0x0000)      /*!< Bit Value =(0x0):Start of 16bit */
N#define URT_CAL_CAL_MDS_start_b0                    ((uint8_t )0x00)        /*!< Bit Value =(0x0):Start of 8bit */
N#define URT_CAL_CAL_MDS_edge_w                      ((uint32_t)0x00000004)  /*!< Bit Value =(0x1):Edge of 32bit */
N#define URT_CAL_CAL_MDS_edge_h0                     ((uint16_t)0x0004)      /*!< Bit Value =(0x1):Edge of 16bit */
N#define URT_CAL_CAL_MDS_edge_b0                     ((uint8_t )0x04)        /*!< Bit Value =(0x1):Edge of 8bit */
N
N#define URT_CAL_CAL_AUTO_mask_w                     ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define URT_CAL_CAL_AUTO_mask_h0                    ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define URT_CAL_CAL_AUTO_mask_b0                    ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_CAL_CAL_AUTO_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CAL_CAL_AUTO_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CAL_CAL_AUTO_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CAL_CAL_AUTO_enable_w                   ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CAL_CAL_AUTO_enable_h0                  ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CAL_CAL_AUTO_enable_b0                  ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_CAL_CAL_EN_mask_w                       ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define URT_CAL_CAL_EN_mask_h0                      ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_CAL_CAL_EN_mask_b0                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_CAL_CAL_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_CAL_CAL_EN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_CAL_CAL_EN_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_CAL_CAL_EN_enable_w                     ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_CAL_CAL_EN_enable_h0                    ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_CAL_CAL_EN_enable_b0                    ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_IRDA  [register's definitions]
N *              Offset[0x54]  URT IrDA control register
N ******************************************************************************
N */
N///@{
N#define URT_IRDA_default                            ((uint32_t)0x00000300)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_IRDA */
N#define URT_IRDA_IR_PW_mask_w                       ((uint32_t)0x00000F00)  /*!< Bit Mask of 32bit */
N#define URT_IRDA_IR_PW_mask_h0                      ((uint16_t)0x0F00)      /*!< Bit Mask of 16bit */
N#define URT_IRDA_IR_PW_mask_b1                      ((uint8_t )0x0F)        /*!< Bit Mask of 8bit */
N
N#define URT_IRDA_IR_EN_mask_w                       ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define URT_IRDA_IR_EN_mask_h0                      ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_IRDA_IR_EN_mask_b0                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_IRDA_IR_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_IRDA_IR_EN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_IRDA_IR_EN_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_IRDA_IR_EN_enable_w                     ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_IRDA_IR_EN_enable_h0                    ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_IRDA_IR_EN_enable_b0                    ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_HFC  [register's definitions]
N *              Offset[0x58]  URT hardware flow control register
N ******************************************************************************
N */
N///@{
N#define URT_HFC_default                             ((uint32_t)0x00000000)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_HFC */
N#define URT_HFC_RTS_OUT_mask_w                      ((uint32_t)0x00000010)  /*!< Bit Mask of 32bit */
N#define URT_HFC_RTS_OUT_mask_h0                     ((uint16_t)0x0010)      /*!< Bit Mask of 16bit */
N#define URT_HFC_RTS_OUT_mask_b0                     ((uint8_t )0x10)        /*!< Bit Mask of 8bit */
N#define URT_HFC_RTS_OUT_0_w                         ((uint32_t)0x00000000)  /*!< Bit Value =(0):0 of 32bit */
N#define URT_HFC_RTS_OUT_0_h0                        ((uint16_t)0x0000)      /*!< Bit Value =(0):0 of 16bit */
N#define URT_HFC_RTS_OUT_0_b0                        ((uint8_t )0x00)        /*!< Bit Value =(0):0 of 8bit */
N#define URT_HFC_RTS_OUT_1_w                         ((uint32_t)0x00000010)  /*!< Bit Value =(1):1 of 32bit */
N#define URT_HFC_RTS_OUT_1_h0                        ((uint16_t)0x0010)      /*!< Bit Value =(1):1 of 16bit */
N#define URT_HFC_RTS_OUT_1_b0                        ((uint8_t )0x10)        /*!< Bit Value =(1):1 of 8bit */
N
N#define URT_HFC_RTS_INV_mask_w                      ((uint32_t)0x00000008)  /*!< Bit Mask of 32bit */
N#define URT_HFC_RTS_INV_mask_h0                     ((uint16_t)0x0008)      /*!< Bit Mask of 16bit */
N#define URT_HFC_RTS_INV_mask_b0                     ((uint8_t )0x08)        /*!< Bit Mask of 8bit */
N#define URT_HFC_RTS_INV_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_HFC_RTS_INV_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_HFC_RTS_INV_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_HFC_RTS_INV_enable_w                    ((uint32_t)0x00000008)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_HFC_RTS_INV_enable_h0                   ((uint16_t)0x0008)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_HFC_RTS_INV_enable_b0                   ((uint8_t )0x08)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_HFC_CTS_INV_mask_w                      ((uint32_t)0x00000004)  /*!< Bit Mask of 32bit */
N#define URT_HFC_CTS_INV_mask_h0                     ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define URT_HFC_CTS_INV_mask_b0                     ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_HFC_CTS_INV_disable_w                   ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_HFC_CTS_INV_disable_h0                  ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_HFC_CTS_INV_disable_b0                  ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_HFC_CTS_INV_enable_w                    ((uint32_t)0x00000004)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_HFC_CTS_INV_enable_h0                   ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_HFC_CTS_INV_enable_b0                   ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_HFC_RTS_EN_mask_w                       ((uint32_t)0x00000002)  /*!< Bit Mask of 32bit */
N#define URT_HFC_RTS_EN_mask_h0                      ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define URT_HFC_RTS_EN_mask_b0                      ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_HFC_RTS_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_HFC_RTS_EN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_HFC_RTS_EN_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_HFC_RTS_EN_enable_w                     ((uint32_t)0x00000002)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_HFC_RTS_EN_enable_h0                    ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_HFC_RTS_EN_enable_b0                    ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_HFC_CTS_EN_mask_w                       ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define URT_HFC_CTS_EN_mask_h0                      ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_HFC_CTS_EN_mask_b0                      ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_HFC_CTS_EN_disable_w                    ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_HFC_CTS_EN_disable_h0                   ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_HFC_CTS_EN_disable_b0                   ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_HFC_CTS_EN_enable_w                     ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_HFC_CTS_EN_enable_h0                    ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_HFC_CTS_EN_enable_b0                    ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N/**
N ******************************************************************************
N * @name        URT_MUTE  [register's definitions]
N *              Offset[0x5C]  URT mute control register
N ******************************************************************************
N */
N///@{
N#define URT_MUTE_default                            ((uint32_t)0x00010100)  /*!< Reg Reset Default Value */
N
N/* Bit fields of URT_MUTE */
N#define URT_MUTE_MUTE_AEX2_mask_w                   ((uint32_t)0x00040000)  /*!< Bit Mask of 32bit */
N#define URT_MUTE_MUTE_AEX2_mask_h1                  ((uint16_t)0x0004)      /*!< Bit Mask of 16bit */
N#define URT_MUTE_MUTE_AEX2_mask_b2                  ((uint8_t )0x04)        /*!< Bit Mask of 8bit */
N#define URT_MUTE_MUTE_AEX2_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_MUTE_MUTE_AEX2_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_MUTE_MUTE_AEX2_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_MUTE_MUTE_AEX2_enable_w                 ((uint32_t)0x00040000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_MUTE_MUTE_AEX2_enable_h1                ((uint16_t)0x0004)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_MUTE_MUTE_AEX2_enable_b2                ((uint8_t )0x04)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_MUTE_MUTE_AEX1_mask_w                   ((uint32_t)0x00020000)  /*!< Bit Mask of 32bit */
N#define URT_MUTE_MUTE_AEX1_mask_h1                  ((uint16_t)0x0002)      /*!< Bit Mask of 16bit */
N#define URT_MUTE_MUTE_AEX1_mask_b2                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_MUTE_MUTE_AEX1_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_MUTE_MUTE_AEX1_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_MUTE_MUTE_AEX1_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_MUTE_MUTE_AEX1_enable_w                 ((uint32_t)0x00020000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_MUTE_MUTE_AEX1_enable_h1                ((uint16_t)0x0002)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_MUTE_MUTE_AEX1_enable_b2                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_MUTE_MUTE_AEX0_mask_w                   ((uint32_t)0x00010000)  /*!< Bit Mask of 32bit */
N#define URT_MUTE_MUTE_AEX0_mask_h1                  ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_MUTE_MUTE_AEX0_mask_b2                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_MUTE_MUTE_AEX0_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_MUTE_MUTE_AEX0_disable_h1               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_MUTE_MUTE_AEX0_disable_b2               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_MUTE_MUTE_AEX0_enable_w                 ((uint32_t)0x00010000)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_MUTE_MUTE_AEX0_enable_h1                ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_MUTE_MUTE_AEX0_enable_b2                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_MUTE_MUTE_AEN1_mask_w                   ((uint32_t)0x00000200)  /*!< Bit Mask of 32bit */
N#define URT_MUTE_MUTE_AEN1_mask_h0                  ((uint16_t)0x0200)      /*!< Bit Mask of 16bit */
N#define URT_MUTE_MUTE_AEN1_mask_b1                  ((uint8_t )0x02)        /*!< Bit Mask of 8bit */
N#define URT_MUTE_MUTE_AEN1_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_MUTE_MUTE_AEN1_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_MUTE_MUTE_AEN1_disable_b1               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_MUTE_MUTE_AEN1_enable_w                 ((uint32_t)0x00000200)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_MUTE_MUTE_AEN1_enable_h0                ((uint16_t)0x0200)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_MUTE_MUTE_AEN1_enable_b1                ((uint8_t )0x02)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_MUTE_MUTE_AEN0_mask_w                   ((uint32_t)0x00000100)  /*!< Bit Mask of 32bit */
N#define URT_MUTE_MUTE_AEN0_mask_h0                  ((uint16_t)0x0100)      /*!< Bit Mask of 16bit */
N#define URT_MUTE_MUTE_AEN0_mask_b1                  ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_MUTE_MUTE_AEN0_disable_w                ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_MUTE_MUTE_AEN0_disable_h0               ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_MUTE_MUTE_AEN0_disable_b1               ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_MUTE_MUTE_AEN0_enable_w                 ((uint32_t)0x00000100)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_MUTE_MUTE_AEN0_enable_h0                ((uint16_t)0x0100)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_MUTE_MUTE_AEN0_enable_b1                ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N#define URT_MUTE_MUTE_EN_mask_w                     ((uint32_t)0x00000001)  /*!< Bit Mask of 32bit */
N#define URT_MUTE_MUTE_EN_mask_h0                    ((uint16_t)0x0001)      /*!< Bit Mask of 16bit */
N#define URT_MUTE_MUTE_EN_mask_b0                    ((uint8_t )0x01)        /*!< Bit Mask of 8bit */
N#define URT_MUTE_MUTE_EN_disable_w                  ((uint32_t)0x00000000)  /*!< Bit Value =(0):Disable of 32bit */
N#define URT_MUTE_MUTE_EN_disable_h0                 ((uint16_t)0x0000)      /*!< Bit Value =(0):Disable of 16bit */
N#define URT_MUTE_MUTE_EN_disable_b0                 ((uint8_t )0x00)        /*!< Bit Value =(0):Disable of 8bit */
N#define URT_MUTE_MUTE_EN_enable_w                   ((uint32_t)0x00000001)  /*!< Bit Value =(1):Enable of 32bit */
N#define URT_MUTE_MUTE_EN_enable_h0                  ((uint16_t)0x0001)      /*!< Bit Value =(1):Enable of 16bit */
N#define URT_MUTE_MUTE_EN_enable_b0                  ((uint8_t )0x01)        /*!< Bit Value =(1):Enable of 8bit */
N
N///@}
N
N#endif  // _MG32x02z_URT_H
N
N/*----------------------------------------------------------------------------*/
N/*                         End of file MG32x02z_URT.h                         */
N/*----------------------------------------------------------------------------*/
L 42 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include\MG32x02z_URT_DRV.h" 2
N
N
N///@{
N#define URT_IT_CALTMO    URT_STA_CALTMOF_mask_w     /*!< Baud rate calibration sync field receive time out interrupt. */
N#define URT_IT_BKTMO     URT_STA_BKTMOF_mask_w      /*!< Break receive time out interrupt. */
N#define URT_IT_IDTMO     URT_STA_IDTMOF_mask_w      /*!< Idle state time out interrupt. */
N#define URT_IT_RXTMO     URT_STA_RXTMOF_mask_w      /*!< Receive time out interrupt. */
N#if defined(URT_STA_TUDRF_mask_w)
X#if 0L
S#define URT_IT_TUDR      URT_STA_TUDRF_mask_w       /*!< URT SPI Slave mode transmit underrun interrupt.*/
N#endif
N#define URT_IT_TXE       URT_STA_TXEF_mask_w        /*!< TX error detect interrupt. */
N#define URT_IT_ROVR      URT_STA_ROVRF_mask_w       /*!< Receive overrun error interrupt. */
N#define URT_IT_NCE       URT_STA_NCEF_mask_w        /*!< Receive noised character error detect interrupt. */
N#define URT_IT_FE        URT_STA_FEF_mask_w         /*!< Receive frame error detect interrupt. */
N#define URT_IT_PE        URT_STA_PEF_mask_w         /*!< Receive parity error detect interrupt. */
N#define URT_IT_CTS       URT_STA_CTSF_mask_w        /*!< CTS change detect interrupt. */
N#define URT_IT_IDL       URT_STA_IDLF_mask_w        /*!< RX idle line detect interrupt. */
N#define URT_IT_BK        URT_STA_BKF_mask_w         /*!< Break condition detect interrupt. */
N#define URT_IT_CALC      URT_STA_CALCF_mask_w       /*!< Auto baudrate calibration complete interrupt. */
N#define URT_IT_TMO       URT_STA_TMOF_mask_w        /*!< Timeout timer timeout interrupt. */
N#define URT_IT_BRT       URT_STA_BRTF_mask_w        /*!< Baud rate generator timer timeout interrupt. */
N#define URT_IT_SADR      URT_STA_SADRF_mask_w       /*!< Slave address matched interrupt. */
N#define URT_IT_TX        URT_STA_TXF_mask_w         /*!< Transmit data register empty interrupt. */
N#define URT_IT_RX        URT_STA_RXF_mask_w         /*!< Receive data register not empty interrupt. */
N#define URT_IT_LS        URT_STA_LSF_mask_w         /*!< URT line status relationship interrupt. */
N#define URT_IT_ERR       URT_STA_ERRF_mask_w        /*!< URT error relationship interrupt. */
N#define URT_IT_TC        URT_STA_TCF_mask_w         /*!< Transmission complete interrupt.(shadow buffer , data register , shift buffer empty) */
N#define URT_IT_UG        URT_STA_UGF_mask_w         /*!< URT genernal event relationship interrupt. */
N#define URT_IT_Mask      0x7BF73CDE                 /*!< Compare URT interrupt setting range. */
N
N
N#define URT_EVENT_RXDF    URT_STA_RXDF_mask_w       /*!< URT received data byte number is different from previous received data byte number for URT_RDAT */
N#define URT_EVENT_RHF     URT_STA_RHF_mask_w        /*!< URT received hold flag. */
N#define URT_EVENT_IRBUSYF URT_STA2_IR_BUSYF_mask_w  /*!< URT IrDa data received busy flag. */
N#define URT_EVENT_BKBF    URT_STA2_BKBF_mask_w      /*!< URT send break busy flag. */
N#define URT_EVENT_NCF     URT_STA2_NCF_mask_w       /*!< URT receive noised character flag. */
N#define URT_EVENT_RXBUSYF URT_STA2_BUSYF_mask_w     /*!< URT RX busy flag. */
N
N#if defined(URT_STA_CALOVF_mask_w)
X#if 0L
S    #define URT_EVENT_CALOVF    URT_STA_CALOVF_mask_w   /*!<The event flag is that result of calibration is overflow baudrate generator counter.*/
N#endif
N#if defined(URT_STA_CALUDF_mask_w)
X#if 0L
S    #define URT_EVENT_CALUDF    URT_STA_CALUDF_mask_w   /*!<The event flag is that result of calibration is underflow baudrate generator counter.*/
N#endif
N///@}
N
N
N///@{
N#define URT_ExitMute_IdleDetect         URT_MUTE_MUTE_AEX2_enable_b2  /*!<URT auto exit mute mode definitions*/ 
N#define URT_ExitMute_BreakDetect        URT_MUTE_MUTE_AEX1_enable_b2  /*!<URT auto exit mute mode definitions*/ 
N#define URT_ExitMute_AddressMatch       URT_MUTE_MUTE_AEX0_enable_b2  /*!<URT auto exit mute mode definitions*/ 
N
N#define URT_EnterMute_idleDetect        URT_MUTE_MUTE_AEN1_enable_b1  /*!<URT auto enter mute mode definitions*/ 
N#define URT_EnterMute_AddressUnmatch    URT_MUTE_MUTE_AEN0_enable_b1  /*!<URT auto enter mute mode definitions*/ 
N///@}
N
N
N///@{
N//#define 
N
N///@}
N
N
N///@{
N/*! @enum   URT_STOP_TypeDef
N    @brief  URT stop bit select definitions.
N*/
Ntypedef enum
N{
N	URT_StopBits_1_0  = 0x40,                                             /*!< URT stop bit is 1bit.   */
N	URT_StopBits_2_0  = 0xC0,                                             /*!< URT stop bit is 2bit.   */
N    
N    #if defined(URT_CR1_RXSTP_LEN_0_5bit_w)
X    #if 1L
N        URT_StopBits_0_5  = 0x00,                                         /*!< URT stop bit is 0.5bit. */ 
N    #endif
N    
N    #if defined(URT_CR1_RXSTP_LEN_1_5bit_w)
X    #if 0L
S        URT_StopBits_1_5  = 0x80,                                         /*!< URT stop bit is 1.5bit. */    
N    #endif
N}URT_STOP_TypeDef;
N
N/*! @enum   URT_DataOrder_TypeDef
N    @brief  URT data order select definitions.
N*/ 
Ntypedef enum
N{
N	URT_DataTyped_LSB    = 0x00,       /*!< URT data order is LSB */
N	URT_DataTyped_MSB    = 0x20        /*!< URT data order is MSB */
N}URT_DataOrder_TypeDef;
N
N/*! @enum   URT_Parity_TypeDef
N    @brief  URT parity bit select definitions.
N*/ 
Ntypedef enum 
N{
N   	URT_Parity_No		= 0x00,        /*!< URT no parity bit. */
N	URT_Parity_Even	    = 0x04,        /*!< URT parity bit is even. */   
N	URT_Parity_Odd 	    = 0x0C,        /*!< URT parity bit is oddd. */
N	URT_Parity_All_H	= 0x1C,        /*!< URT parity bit always is H.*/
N	URT_Parity_All_L	= 0x14         /*!< URT parity bit always is L.*/
N}URT_Parity_TypeDef;
N
N/*! @enum   URT_DataLength_TypeDef
N    @brief  URT data length select definitions.
N*/ 
Ntypedef enum
N{
N	URT_DataLength_8      = 0x00,      /*!< URT data length is 8 bit. */ 
N    URT_DataLength_7      = 0x01       /*!< URT data length is 7 bit. */
N}URT_DataLength_TypeDef;
N
N
N/*! @enum   URT_Mode_TypeDef
N    @brief  URT mode configuration
N*/
Ntypedef enum
N{
N	URT_URT_mode     = URT_CR0_MDS_uart_w,        /*!< Uart mode*/
X	URT_URT_mode     = ((uint32_t)0x00000000),         
N	URT_SYNC_mode    = URT_CR0_MDS_sync_w,        /*!< Synchronous/Shift-Register mode*/
X	URT_SYNC_mode    = ((uint32_t)0x00000010),         
N	URT_IDLE_mode    = URT_CR0_MDS_idle_w,        /*!< Idle-line mode for multi-processor*/
X	URT_IDLE_mode    = ((uint32_t)0x00000020),         
N	URT_ADR_mode     = URT_CR0_MDS_adr_w,         /*!< Address-bit mode for multi-processor*/
X	URT_ADR_mode     = ((uint32_t)0x00000030),          
N}URT_Mode_TypeDef;
N
N
N#if defined(URT_CR0_SYNC_MDS_mask_w)
X#if 0L
S/*! @enum   URT_SYNCMode_TypeDef
S    @brief  URT SYNC mode configuration
S*/
Stypedef enum
S{
S    URT_SYNC_MASTER    = URT_CR0_SYNC_MDS_master_w,
S    URT_SYNC_SLAVE     = URT_CR0_SYNC_MDS_slave_w,
S}URT_SYNCMode_TypeDef;
N#endif
N
N/*! @enum   URT_DataLine_TypeDef
N    @brief  Data line select definitions.
N*/
Ntypedef enum
N{
N    URT_DataLine_2     =  URT_CR0_DAT_LINE_2_b0,         /*!< URT Data line is 2-line.*/
X    URT_DataLine_2     =  ((uint8_t )0x00),          
N    URT_DataLine_1     =  URT_CR0_DAT_LINE_1_b0          /*!< URT Data line is 1-line.*/
X    URT_DataLine_1     =  ((uint8_t )0x08)           
N}URT_DataLine_TypeDef;
N///@}
N
N
N
N///@{
N/*! @enum   URT_BDMode_TypeDef
N    @brief  URT Baud rate generator mode select definitions.
N*/ 
Ntypedef enum
N{
N    URT_BDMode_Separated    =   URT_CLK_BR_MDS_separated_w,    /*!< Pre counter and baudrate counter relationship is separated */
X    URT_BDMode_Separated    =   ((uint32_t)0x00000000),     
N    URT_BDMode_Combined     =   URT_CLK_BR_MDS_combined_w      /*!< Pre counter and baudrate counter relationship is combined*/
X    URT_BDMode_Combined     =   ((uint32_t)0x02000000)       
N}URT_BDMode_TypeDef;
N
N/*! @enum   URT_BDClock_TypeDef
N    @brief  URT Baud rate generator clock source select definitions.
N*/ 
Ntypedef enum
N{
N    URT_BDClock_PROC         =  URT_CLK_CK_SEL_proc_w,                                               /*!< URT baud rate generator clock source from PROC. */
X    URT_BDClock_PROC         =  ((uint32_t)0x00000000),                                                
N    URT_BDClock_LS        =  URT_CLK_CK_SEL_ck_ls_w,                                                 /*!< URT baud rate generator clock source from LS. */
X    URT_BDClock_LS        =  ((uint32_t)0x00000004),                                                  
N    URT_BDClock_Timer00TRGO  =  URT_CLK_CK_SEL_tm00_trgo_w,                                          /*!< URT baud rate generator clock source from TRGO. */ 
X    URT_BDClock_Timer00TRGO  =  ((uint32_t)0x00000006),                                            
N    
N    #if defined(URT_CLK_CK_SEL_ext_clk_w)
X    #if 0L
S        URT_BDClock_EXT      =  URT_CLK_CK_SEL_ext_clk_w,                                            /*!< URT baud rate generator clock source from External pin*/
N    #endif
N    
N    #if defined(URT_CLK_CK_SEL_nco0_p0_w)
X    #if 0L
S        URT_BDClock_NCO0_P0  =  URT_CLK_CK_SEL_nco0_p0_w,                                             /*!< URT baud rate generator clock source from NCO0_P0*/
N    #endif
N}URT_BDClock_TypeDef;
N
N
N#if defined(URT_CLK_BR_CKS_mask_w)
X#if 0L
S/*! @enum   URT_BRCounterClock_TypeDef
S    @brief  UART baud-rate timer clock source select.
S*/ 
Stypedef enum
S{
S    URT_BRCountClock_PSC     = URT_CLK_BR_CKS_psc_w,                           /*!< URT baud-rate timer clock source from clock prescaler output.*/                          
S    URT_BRCountClock_CK_URT  = URT_CLK_BR_CKS_ck_urtx_w,                       /*!< URT baud-rate timer clock source from URT internal clock input.*/
S}URT_BRCounterClock_TypeDef;
S
N#endif
N
N
N/*! @enum   URT_CLKSource_TypeDef
N    @brief  URT URT_CLK output clock source
N*/
Ntypedef enum
N{
N    URT_CK_OUT 	    =	URT_CLK_CLK_CKS_out_w,                                 /*!< URT_CLK output clock source from CK_URTx_OUT*/
X    URT_CK_OUT 	    =	((uint32_t)0x00000000),                                  
N	URT_CK_SC		=	URT_CLK_CLK_CKS_sc_w,                                  /*!< URT_CLK output clock source from CK_URTx_SC */
X	URT_CK_SC		=	((uint32_t)0x00000020),                                   
N}URT_CLKSource_TypeDef;
N
N
N/*! @enum  URT_TXClock_TypeDef
N    @brief URT TX clock source select definitions.
N*/
Ntypedef enum
N{
N    URT_TXClock_Internal     =  URT_CLK_TX_CKS_internal_w,                    /*!< URT TX clock source from Baudrate generator. */
X    URT_TXClock_Internal     =  ((uint32_t)0x00000000),                     
N    URT_TXClock_Timer01TRGO  =  URT_CLK_TX_CKS_tm01_trgo_w,                   /*!< URT TX clock source from Timer01 TRGO. */
X    URT_TXClock_Timer01TRGO  =  ((uint32_t)0x00100000),                    
N    URT_TXClock_Timer10TRGO  =  URT_CLK_TX_CKS_tm10_trgo_w,                   /*!< URT TX clock source from Timer10 TRGO. */
X    URT_TXClock_Timer10TRGO  =  ((uint32_t)0x00200000),                    
N    
N    #if defined(URT_CLK_TX_CKS_ext_clk_w)
X    #if 0L
S        URT_TXClock_EXT      =  URT_CLK_TX_CKS_ext_clk_w,                     /*!< URT TX clock source from external pin. */
N    #endif
N    
N}URT_TXClock_TypeDef;
N
N
N/*! @enum  URT_RXClock_TypeDef
N    @brief URT RX clock source select definitions.
N*/
Ntypedef enum
N{
N    URT_RXClock_Internal     =  URT_CLK_RX_CKS_internal_w,                     /*!< URT RX clock source from Baudrate generator. */
X    URT_RXClock_Internal     =  ((uint32_t)0x00000000),                      
N    URT_RXClock_Timer01TRGO  =  URT_CLK_RX_CKS_tm01_trgo_w,                    /*!< URT RX clock source from Timer01 TRGO. */
X    URT_RXClock_Timer01TRGO  =  ((uint32_t)0x00010000),                     
N    URT_RXClock_Timer10TRGO  =  URT_CLK_RX_CKS_tm10_trgo_w,                    /*!< URT RX clock source from Timer10 TRGO. */
X    URT_RXClock_Timer10TRGO  =  ((uint32_t)0x00020000),                     
N    
N    #if defined(URT_CLK_RX_CKS_ext_clk_w)
X    #if 0L
S        URT_RXClock_EXT      =  URT_CLK_RX_CKS_ext_clk_w,                      /*!< URT TX clock source from external pin. */
N    #endif
N    
N}URT_RXClock_TypeDef;
N
N
N/*! @enum   URT_RXSMP_TypeDef
N    @brief  URT RX oversample time mode
N*/
Ntypedef enum
N{
N	URT_RXSMP_3TIME		= URT_CR0_OS_MDS_three_w,                 /*!< URT RX data oversampling majority vote from 3 sample bits method. */               
X	URT_RXSMP_3TIME		= ((uint32_t)0x00000000),                                 
N	URT_RXSMP_1TIME		= URT_CR0_OS_MDS_one_w                    /*!< URT RX data oversampling majority vote from one sample bit method and noise free.*/
X	URT_RXSMP_1TIME		= ((uint32_t)0x00000002)                     
N}URT_RXSMP_TypeDef;
N
N
N///@}
N
N
N///@{
N
N
N/*! @enum   URT_TMOMDS_TypeDef
N    @brief  URT timerout timer mode source select definitions.
N*/
Ntypedef enum
N{
N   URT_TMOMDS_URT     = URT_TMOUT_TMO_MDS_uart_w,       /*!< Timeout timer mode is URT mode ( URT detect timeout using) */
X   URT_TMOMDS_URT     = ((uint32_t)0x00000000),        
N   URT_TMOMDS_General = URT_TMOUT_TMO_MDS_general_w     /*!< Timeout timer mode is general mode ( General timer using )*/
X   URT_TMOMDS_General = ((uint32_t)0x00000004)      
N}URT_TMOMDS_TypeDef; 
N
N
N/*! @enum   URT_TMOCLK_TypeDef
N    @brief  URT timerout timer clock source select definitions.
N*/
Ntypedef enum
N{
N	URT_TMOCLK_BitTime  = URT_TMOUT_TMO_CKS_uart_w,      /*!< Timeout timer clock source is from RX baudrate.*/
X	URT_TMOCLK_BitTime  = ((uint32_t)0x00000000),       
N	URT_TMOCLK_CK_URTX  = URT_TMOUT_TMO_CKS_input_w,     /*!< Timeout timer clock source is from URT function clock source*/
X	URT_TMOCLK_CK_URTX  = ((uint32_t)0x00000100),      
N	URT_TMOCLK_Noise    = URT_TMOUT_TMO_CKS_noise_w      /*!< Timeout timer clock source is from Noise detect time.*/
X	URT_TMOCLK_Noise    = ((uint32_t)0x00000200)       
N}URT_TMOCLK_TypeDef;
N
N///@}
N
N
N
N///@{
N
N/*! @enum   URT_RXTH_TypeDef
N    @brief  URT RX shadow buffer threshold byte number select definitions.
N*/
Ntypedef enum
N{
N    URT_RXTH_1BYTE   =  URT_CR0_RX_TH_1byte_w,       /*!< URT RX shadow buffer threshold is 1 byte */
X    URT_RXTH_1BYTE   =  ((uint32_t)0x00000000),        
N    URT_RXTH_2BYTE   =  URT_CR0_RX_TH_2byte_w,       /*!< URT RX shadow buffer threshold is 2 byte */
X    URT_RXTH_2BYTE   =  ((uint32_t)0x00010000),        
N    URT_RXTH_3BYTE   =  URT_CR0_RX_TH_3byte_w,       /*!< URT RX shadow buffer threshold is 3 byte */
X    URT_RXTH_3BYTE   =  ((uint32_t)0x00020000),        
N    URT_RXTH_4BYTE   =  URT_CR0_RX_TH_4byte_w,       /*!< URT RX shadow buffer threshold is 4 byte */
X    URT_RXTH_4BYTE   =  ((uint32_t)0x00030000),        
N}URT_RXTH_TypeDef;
N
N
N/*! @enum   URT_RCAP_TypeDef
N    @brief  URT capture status bit select definitions.
N*/
Ntypedef enum
N{
N    URT_RCAP_ADR    =   URT_RCAP_RCAP_ADR_mask_w,      /*!< Capture address bit value.*/    
X    URT_RCAP_ADR    =   ((uint32_t)0x00000400),           
N    URT_RCAP_PAR    =   URT_RCAP_RCAP_PAR_mask_w,      /*!< Capture parity bit value.*/
X    URT_RCAP_PAR    =   ((uint32_t)0x00000200),       
N    URT_RCAP_STP    =   URT_RCAP_RCAP_STP_mask_w,      /*!< Capture stop bit value.*/
X    URT_RCAP_STP    =   ((uint32_t)0x00000100),       
N}URT_RCAP_TypeDef;
N
N
N/*! @enum   URT_SBUFBit_TypeDef
N    @brief  URT shift buffer status bit select definitions.
N*/
Ntypedef enum
N{
N    URT_SBUF_ADR    =   URT_STA2_ADR_mask_w,          /*!< Shift buffer address bit.*/
X    URT_SBUF_ADR    =   ((uint32_t)0x00000004),           
N    URT_SBUF_PAR    =   URT_STA2_PAR_mask_w,          /*!< Shift buffer parity bit.*/
X    URT_SBUF_PAR    =   ((uint32_t)0x00000002),           
N}URT_SBUFBit_TypeDef;
N
N
N/*! @enum   URT_DEGT_TypeDef
N    @brief  URT DE signal output guard time select definitions.
N*/
Ntypedef enum
N{
N    URT_DEGT_1_4  =  URT_CR0_DE_GT_1_4_w,              /*!< DE guard time is 1/4 bit time.*/
X    URT_DEGT_1_4  =  ((uint32_t)0x00000000),               
N    URT_DEGT_1_2  =  URT_CR0_DE_GT_1_2_w,              /*!< DE guard time is 1/2 bit time.*/
X    URT_DEGT_1_2  =  ((uint32_t)0x00004000),               
N    URT_DEGT_1    =  URT_CR0_DE_GT_1_w,                /*!< DE guard time is 1 bit time.*/
X    URT_DEGT_1    =  ((uint32_t)0x00008000),                 
N    URT_DEGT_2    =  URT_CR0_DE_GT_2_w                 /*!< DE guard time is 2 bit time.*/
X    URT_DEGT_2    =  ((uint32_t)0x0000C000)                  
N}URT_DEGT_TypeDef;
N
N
N/*! @enum    URT_IDLEMOde_TypeDef
N    @brief   URT idle line detect management mode select definitions.
N*/
Ntypedef enum
N{
N    URT_IDLEMode_No   =  URT_CR0_IDL_MDS_no_w,         /*!< No operation.*/
X    URT_IDLEMode_No   =  ((uint32_t)0x00000000),          
N    URT_IDLEMode_Load =  URT_CR0_IDL_MDS_load_w,       /*!< Force to load shadow buffer.*/
X    URT_IDLEMode_Load =  ((uint32_t)0x00100000),        
N}URT_IDLEMOde_TypeDef;
N
N///@}
N
N
N///@{
N
N/*! @enum   URT_CPHA_TypeDef
N    @brief  SYNC mode sampling type select definitions.
N*/
Ntypedef enum
N{
N    URT_CPHA0_LeadEdge  =   URT_CR3_CPHA_leading_edge_w ,        /*!< Sampling on leading edge. */
X    URT_CPHA0_LeadEdge  =   ((uint32_t)0x00000000) ,         
N    URT_CPHA1_TrailEdge =   URT_CR3_CPHA_trailing_edge_w,        /*!< Sampling on trailing edge. */
X    URT_CPHA1_TrailEdge =   ((uint32_t)0x00000004),         
N
N}URT_CPHA_TypeDef;
N
N/*! @enum   URT_CPOL_TypeDef
N    @brief  SYNC mode clock polarity type select definitions.
N*/
Ntypedef enum
N{
N    URT_CPOL0_Low     = URT_CR3_CPOL_low_w,             /*!< clock is low in idle state. */
X    URT_CPOL0_Low     = ((uint32_t)0x00000000),              
N    URT_CPOL1_High    = URT_CR3_CPOL_high_w,            /*!< clock is high in idle state.*/
X    URT_CPOL1_High    = ((uint32_t)0x00000002),             
N}URT_CPOL_TypeDef;
N
N
N#if defined(URT_CR2_DOUT_MDS_mask_w)
X#if 0L
S/*! @enum  URT_MOSIIdleStatus_TypeDef
S    @brief URT's SPI Master Mode MOSI Stauts control in bus idle.
S*/
Stypedef enum
S{
S    URT_mSPI_MOSI_Idle_Tristate       =  (URT_CR2_DOUT_MDS_disable_b3| URT_CR2_DOUT_IDL_lbit_b3),         /*!< MOSI IDLE status is tristate in SPI master mode.     */
S    URT_mSPI_MOSI_Idle_LastBit        =  (URT_CR2_DOUT_MDS_enable_b3 | URT_CR2_DOUT_IDL_lbit_b3),         /*!< MOSI IDLE status is keeping last status value in SPI master mode. */
S    URT_mSPI_MOSI_Idle_Low            =  (URT_CR2_DOUT_MDS_enable_b3 | URT_CR2_DOUT_IDL_0_b3),            /*!< MOSI IDLE status is high in SPI master mode.*/
S    URT_mSPI_MOSI_Idle_High           =  (URT_CR2_DOUT_MDS_enable_b3 | URT_CR2_DOUT_IDL_1_b3),            /*!< MOSI IDLE status is low in SPI master mode.*/
S}URT_MOSIIdleStatus_TypeDef;
N#endif
N///@}
N
N///@{
N/*! @enum    URT_CALMode_TypeDef
N    @brief   URT auto calibration mode select definitions.
N*/
N
Ntypedef enum
N{
N    URT_CALMode_Start = URT_CAL_CAL_MDS_start_w,         /*!< Measure the start bit.*/
X    URT_CALMode_Start = ((uint32_t)0x00000000),          
N    URT_CALMode_Edge  = URT_CAL_CAL_MDS_edge_w           /*!< Measure start falling edge to next falling edge.*/
X    URT_CALMode_Edge  = ((uint32_t)0x00000004)            
N}URT_CALMode_TypeDef;
N
N
N/*! @enum    URT_ExtraBK_TypeDef
N    @brief   URT extra break bit select definitions.
N*/
Ntypedef enum
N{
N    URT_ExtraBK_1BIT   =  URT_CR3_DET_BK_1bit_w,           /*!< Extra break bit is 1 bit.*/          
X    URT_ExtraBK_1BIT   =  ((uint32_t)0x00000000),                      
N    URT_ExtraBK_3BIT   =  URT_CR3_DET_BK_3bit_w            /*!< Extra break bit is 3 bit.*/
X    URT_ExtraBK_3BIT   =  ((uint32_t)0x00000010)             
N}URT_ExtraBK_TypeDef;
N///@}
N
N///@{
N
N/*! @enum   URT_IrDAPulse_TypeDef
N    @brief  IrDa output pulse width configuration.
N*/
Ntypedef enum
N{
N	URT_IrDATra_1			=	0,                          /*!< IrDa output pulse width is  1 / URTX_TXOS_NUM. */
N	URT_IrDATra_2			=	1,                          /*!< IrDa output pulse width is  2 / URTX_TXOS_NUM. */                 
N	URT_IrDATra_3			=	2,                          /*!< IrDa output pulse width is  3 / URTX_TXOS_NUM. */
N	URT_IrDATra_4			=	3,                          /*!< IrDa output pulse width is  4 / URTX_TXOS_NUM. */
N	URT_IrDATra_5			=	4,                          /*!< IrDa output pulse width is  5 / URTX_TXOS_NUM. */
N	URT_IrDATra_6			=	5,                          /*!< IrDa output pulse width is  6 / URTX_TXOS_NUM. */
N	URT_IrDATra_7			=	6,                          /*!< IrDa output pulse width is  7 / URTX_TXOS_NUM. */
N	URT_IrDATra_8			=	7,                          /*!< IrDa output pulse width is  8 / URTX_TXOS_NUM. */
N	URT_IrDATra_9			=	8,                          /*!< IrDa output pulse width is  9 / URTX_TXOS_NUM. */
N	URT_IrDATra_10			=	9,                          /*!< IrDa output pulse width is  10 / URTX_TXOS_NUM. */
N	URT_IrDATra_11			=	10,                         /*!< IrDa output pulse width is  11 / URTX_TXOS_NUM. */
N	URT_IrDATra_12			=	11,                         /*!< IrDa output pulse width is  12 / URTX_TXOS_NUM. */
N	URT_IrDATra_13			=	12,                         /*!< IrDa output pulse width is  13 / URTX_TXOS_NUM. */
N	URT_IrDATra_14			=	13,                         /*!< IrDa output pulse width is  14 / URTX_TXOS_NUM. */
N	URT_IrDATra_15			=	14,                         /*!< IrDa output pulse width is  15 / URTX_TXOS_NUM. */
N	URT_IrDATra_16_			=	15,                         /*!< IrDa output pulse width is  16 / URTX_TXOS_NUM. */
N}URT_IrDAPulse_TypeDef;
N///@}
N
N
N///@{
N
N/*! @enum  URT_RXPERetryMode_TypeDef
N    @brief RX parity error retry time select definitions.
N*/
Ntypedef enum
N{
N    URT_RXPERetry_Disable   =  URT_SC_RXE_MDS_disable_w,  /*!< RX no auto retry when detecting parity error.*/   
X    URT_RXPERetry_Disable   =  ((uint32_t)0x00000000),      
N    URT_RXPERetry_Limited   =  URT_SC_RXE_MDS_enable_w,   /*!< RX limited time auto retry when detecting party error.*/
X    URT_RXPERetry_Limited   =  ((uint32_t)0x00000001),    
N    URT_RXPERetry_Unlimited =  URT_SC_RXE_MDS_auto_w      /*!< RX alway auto retry unless recceiving parity correct character.*/
X    URT_RXPERetry_Unlimited =  ((uint32_t)0x00000002)       
N}URT_RXPERetryMode_TypeDef;
N
N/*! @enum   URT_RXErrorSignal_TypeDef
N    @brief  URT error signal length select definitions.
N*/
Ntypedef enum
N{
N    URT_RXErrorSignal_1BIT = URT_SC_RXE_LEN_1bit_w,      /*!< URT RX parity error detect and NACK transmission 1 bit time length.*/
X    URT_RXErrorSignal_1BIT = ((uint32_t)0x00000000),       
N    URT_RXErrorSignal_2BIT = URT_SC_RXE_LEN_2bit_w,      /*!< URT RX parity error detect and NACK transmission 2 bit time length.*/
X    URT_RXErrorSignal_2BIT = ((uint32_t)0x00000010),       
N}URT_RXErrorSignal_TypeDef;
N
N
N/*! @param  URT_RXPERetryTime_TypeDef
N    @brief  URT RX parity error auto retry time select definitions.
N*/
Ntypedef enum
N{
N    URT_RXPERetry_0 =   (0 << URT_SC_RXE_NUM_shift_w),   /*!< No auto retry.*/
X    URT_RXPERetry_0 =   (0 << (12)),    
N    URT_RXPERetry_1 =   (1 << URT_SC_RXE_NUM_shift_w),   /*!< Auto retry 1 time.*/
X    URT_RXPERetry_1 =   (1 << (12)),    
N    URT_RXPERetry_2 =   (2 << URT_SC_RXE_NUM_shift_w),   /*!< Auto retry 2 times.*/
X    URT_RXPERetry_2 =   (2 << (12)),    
N    URT_RXPERetry_3 =   (3 << URT_SC_RXE_NUM_shift_w),   /*!< Auto retry 3 times.*/
X    URT_RXPERetry_3 =   (3 << (12)),    
N    URT_RXPERetry_4 =   (4 << URT_SC_RXE_NUM_shift_w),   /*!< Auto retry 4 times.*/
X    URT_RXPERetry_4 =   (4 << (12)),    
N    URT_RXPERetry_5 =   (5 << URT_SC_RXE_NUM_shift_w),   /*!< Auto retry 5 times.*/
X    URT_RXPERetry_5 =   (5 << (12)),    
N    URT_RXPERetry_6 =   (6 << URT_SC_RXE_NUM_shift_w),   /*!< Auto retry 6 times.*/
X    URT_RXPERetry_6 =   (6 << (12)),    
N    URT_RXPERetry_7 =   (7 << URT_SC_RXE_NUM_shift_w),   /*!< Auto retry 7 times.*/
X    URT_RXPERetry_7 =   (7 << (12)),    
N}URT_RXPERetryTime_TypeDef;
N
N
N/*! @param  URT_TXErrorReSendTime_TypeDef
N    @brief  URT TX auto resend time select definitions.
N*/
Ntypedef enum
N{
N    URT_TXErrorResend_0 = (0 << URT_SC_TXE_NUM_shift_w),  /*!< No auto resend. */
X    URT_TXErrorResend_0 = (0 << (8)),   
N    URT_TXErrorResend_1 = (1 << URT_SC_TXE_NUM_shift_w),  /*!< Auto resend 1 time.*/
X    URT_TXErrorResend_1 = (1 << (8)),   
N    URT_TXErrorResend_2 = (2 << URT_SC_TXE_NUM_shift_w),  /*!< Auto resend 2 times.*/
X    URT_TXErrorResend_2 = (2 << (8)),   
N    URT_TXErrorResend_3 = (3 << URT_SC_TXE_NUM_shift_w),  /*!< Auto resend 3 times.*/
X    URT_TXErrorResend_3 = (3 << (8)),   
N    URT_TXErrorResend_4 = (4 << URT_SC_TXE_NUM_shift_w),  /*!< Auto resend 4 times.*/
X    URT_TXErrorResend_4 = (4 << (8)),   
N    URT_TXErrorResend_5 = (5 << URT_SC_TXE_NUM_shift_w),  /*!< Auto resend 5 times.*/
X    URT_TXErrorResend_5 = (5 << (8)),   
N    URT_TXErrorResend_6 = (6 << URT_SC_TXE_NUM_shift_w),  /*!< Auto resend 6 times.*/
X    URT_TXErrorResend_6 = (6 << (8)),   
N    URT_TXErrorResend_7 = (7 << URT_SC_TXE_NUM_shift_w),  /*!< Auto resend 7 times.*/
X    URT_TXErrorResend_7 = (7 << (8)),   
N}URT_TXErrorReSendTime_TypeDef;
N
N
N/*! @enum  URT_TXErrorMode_TypeDef
N    @brief URT TX error detect mode select definitions.
N*/
Ntypedef enum
N{ 
N    URT_TXErrorDetect_Disable       = URT_SC_TXE_MDS_disable_w,  /*!< TX error detect disable */
X    URT_TXErrorDetect_Disable       = ((uint32_t)0x00000000),   
N    URT_TXErrorDetect_ErrorSignal   = URT_SC_TXE_MDS_chk_low_w,  /*!< TX error detect mode is that check low in stop bit.*/
X    URT_TXErrorDetect_ErrorSignal   = ((uint32_t)0x00000004),   
N    URT_TXErrorDetect_TX            = URT_SC_TXE_MDS_chk_tx_w    /*!< TX error detect mode is that TX detect*/
X    URT_TXErrorDetect_TX            = ((uint32_t)0x00000008)     
N}URT_TXErrorMode_TypeDef;
N///@}
N
N
N#if defined(URT_CLK_ECK_CKS_mask_w)
X#if 0L
S/*! @enum  URT_ExternalClockMux_TypeDef
S    @brief URT external clock input pin select definitions.
S*/
Stypedef enum
S{
S    URT_ExternalClockInput_CLK      = URT_CLK_ECK_CKS_clk_w,
S    URT_ExternalClockInput_RX       = URT_CLK_ECK_CKS_rx_w,
S}URT_ExternalClockMux_TypeDef;
N#endif
N
N
N/*! @struct URT_Data_TypeDef
N    @brief  URT data character configuration.
N*/ 
Ntypedef struct
N{
N    URT_DataLength_TypeDef  URT_TX_DataLength;  /*!< URT TX data length select. */ 
N    URT_DataLength_TypeDef  URT_RX_DataLength;	/*!< URT RX data length select. */
N    URT_DataOrder_TypeDef   URT_TX_DataOrder;   /*!< URT TX data order select. */
N    URT_DataOrder_TypeDef   URT_RX_DataOrder;   /*!< URT RX data order select. */
N    URT_STOP_TypeDef        URT_TX_StopBits;    /*!< URT TX stop bit select. */
N    URT_STOP_TypeDef        URT_RX_StopBits;	/*!< URT RX stop bit select. */
N    URT_Parity_TypeDef      URT_TX_Parity;      /*!< URT TX parity mode select. */
N    URT_Parity_TypeDef      URT_RX_Parity;      /*!< URT RX parity mode select. */
N    FunctionalState         URT_TX_DataInverse; /*!< URT TX Data inverse enable or disable*/
N    FunctionalState         URT_RX_DataInverse; /*!< URT RX Data inverse enable or disable*/
N}URT_Data_TypeDef;
N
N
N/*! @struct URT_BRG_TypeDef
N    @brief  URT baudrate generator configuration.
N*/ 
Ntypedef struct
N{
N	URT_BDClock_TypeDef		       URT_InteranlClockSource;        /*!< Baud rate generator clock source select. */
N	URT_BDMode_TypeDef	           URT_BaudRateMode;               /*!< Baud rate generator counter mode select. */
N	uint8_t				  	       URT_PrescalerCounterReload;     /*!< Prescaler counter reload value. */
N	uint8_t				  	       URT_BaudRateCounterReload;      /*!< Baud rate counter reload value. */
N}URT_BRG_TypeDef;
N
N
N/*! @struct URT_IrDA_TypeDef
N    @brief  URT IrDa mode configuration.
N*/ 
Ntypedef struct
N{
N    URT_IrDAPulse_TypeDef        URT_IrDaPulseWidth;         /*!< IrDa output pulse select. */
N}URT_IrDA_TypeDef;
N
N
N/*! @struct URT_RXParityError_TypeDef
N    @brief  URT RX parity error relationship configuration.
N*/
Ntypedef struct
N{
N    URT_RXPERetryMode_TypeDef    URT_RXPERetryMode;         /*!< RX parity error auto retry mode select. */
N    URT_RXErrorSignal_TypeDef    URT_RXErrorSignal;         /*!< RX error signal length select.*/
N    URT_RXPERetryTime_TypeDef    URT_RXPERetryTime;         /*!< RX auto retry time select when auto retry mode is limited time auto retry.*/
N}URT_RXParityError_TypeDef;
N
N
N///@{
Nvoid URT_IT_Config( URT_Struct*  , uint32_t , FunctionalState );
Nvoid URT_ITEA_Cmd( URT_Struct*  , FunctionalState );
Nuint32_t URT_GetITAllFlagStatus( URT_Struct* );
NDRV_Return URT_GetITSingleFlagStatus( URT_Struct*  , uint32_t );
Nvoid URT_ClearITFlag( URT_Struct*  , uint32_t );
NDRV_Return URT_GetRxDifferentFlag( URT_Struct* );
NDRV_Return URT_GetRxHoldFlag( URT_Struct* );
Nvoid URT_ClearRxHoldFlag( URT_Struct* );
NDRV_Return URT_GetIrDaBusyFlag( URT_Struct* );
NDRV_Return URT_GetBreakBusyFlag( URT_Struct* );
NDRV_Return URT_GetRxBusyFlag( URT_Struct* );
NDRV_Return URT_GetRxNoiseFlag( URT_Struct* );
Nuint32_t URT_GetITStatus(URT_Struct* URTX);
N///@}
N
N
N///@{
Nvoid URT_DataCharacter_Config( URT_Struct* , URT_Data_TypeDef* );
Nvoid URT_Mode_Select( URT_Struct*  , URT_Mode_TypeDef );
Nvoid URT_DataLine_Select( URT_Struct* , URT_DataLine_TypeDef );
Nvoid URT_HalfDuplexMode_Cmd( URT_Struct* , FunctionalState );
Nvoid URT_LoopBackMode_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_TX_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_RX_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_RXInverse_Cmd(URT_Struct*  , FunctionalState );
Nvoid URT_TXInverse_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_NoiseDataSkip_Cmd(URT_Struct* , FunctionalState );
Nvoid URT_Cmd( URT_Struct*  , FunctionalState );
N///@}
N
N
N
N///@{
Nvoid URT_BaudRateGenerator_Config( URT_Struct*  , URT_BRG_TypeDef* );
Nvoid URT_BaudRateGeneratorMode_Select( URT_Struct*  , URT_BDMode_TypeDef );
Nvoid URT_BaudRateGeneratorClock_Select( URT_Struct*  , URT_BDClock_TypeDef );
N
N#if defined(URT_CLK_BR_CKS_mask_w)
X#if 0L
Svoid URT_BaudRateCounterClockSource_Select( URT_Struct* , URT_BRCounterClock_TypeDef );
N#endif
N
Nuint8_t URT_GetBaudRateGeneratorPreReload( URT_Struct* );
Nuint8_t URT_GetBaudRateGeneratorCountReload( URT_Struct* );
Nuint8_t URT_GetBaudRateGeneratorPre( URT_Struct* );
Nuint8_t URT_GetBaudRateGeneratorCount( URT_Struct* );
N
Nvoid URT_BaudRateGenerator_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_CLKSignalSource_Select( URT_Struct*  , URT_CLKSource_TypeDef );
Nvoid URT_CLKSignal_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_CtrlBROSignalStatus_SW( URT_Struct*  , BitAction );
Nvoid URT_CtrlCLKSignalStatus_SW( URT_Struct*  , BitAction );
Nvoid URT_TXClockSource_Select( URT_Struct*  , URT_TXClock_TypeDef );
Nvoid URT_RXClockSource_Select( URT_Struct*  , URT_RXClock_TypeDef );
NDRV_Return URT_TXOverSamplingSampleNumber_Select( URT_Struct*  , uint8_t );
NDRV_Return URT_RXOverSamplingSampleNumber_Select( URT_Struct*  , uint8_t );
Nvoid URT_RXOverSamplingMode_Select( URT_Struct*  , URT_RXSMP_TypeDef );
N
N///@}
N
N
N///@{
Nvoid URT_TimeroutTimer_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_TriggerTimeoutTimerRst_SW( URT_Struct*  );
Nvoid URT_TimeoutMode_Select( URT_Struct*  , URT_TMOMDS_TypeDef );
Nvoid URT_TimeoutTimerClockSource_Select( URT_Struct*  , URT_TMOCLK_TypeDef );
Nvoid URT_IdleDetect_Select( URT_Struct*  , uint8_t );
Nvoid URT_IdleTimeoutDetect_Config( URT_Struct*  , FunctionalState  , uint16_t );
Nvoid URT_RXTimeoutDetect_Config( URT_Struct*  , FunctionalState  , uint8_t );
NDRV_Return URT_BreakTimeoutDetect_Config( URT_Struct*  , FunctionalState  , uint8_t );
NDRV_Return URT_CalibrationTimeoutDetect_Config( URT_Struct*  , FunctionalState  , uint8_t );
Nvoid URT_CtrlTMOSignalStatus_SW( URT_Struct*  , BitAction );
Nuint16_t URT_GetTimeoutTimerCounter( URT_Struct* );
Nvoid URT_SetTimeoutTimerCounter( URT_Struct* , uint16_t );
Nuint16_t URT_GetTimeoutTimerReload( URT_Struct* );
Nvoid URT_SetTimeoutTimerCompare( URT_Struct* , uint16_t);
N///@}
N
N
N///@{
Nuint8_t URT_GetTXShadowBufferLevel( URT_Struct* );
Nuint8_t URT_GetRXShadowBufferLevel( URT_Struct* );
Nvoid URT_ClearTXData( URT_Struct* );
Nvoid URT_ClearRXData( URT_Struct* );
Nuint8_t URT_GetTXDataRegLevel( URT_Struct* );
Nvoid URT_RXShadowBufferThreshold_Select( URT_Struct*  , URT_RXTH_TypeDef );
Nuint8_t URT_GetRXDataRegLevel( URT_Struct* );
Nuint32_t URT_GetRXData( URT_Struct* );
Nuint8_t URT_GetCaptureData( URT_Struct* );
Nuint8_t URT_GetCaptureStatusBit( URT_Struct*  , URT_RCAP_TypeDef );
Nuint8_t URT_GetRXShiftBufferStatusBit( URT_Struct*  , URT_SBUFBit_TypeDef );
Nuint8_t URT_GetTXShiftBufferData( URT_Struct* );
Nuint8_t URT_GetRXShiftBufferData( URT_Struct* );
Nvoid URT_RTS_Cmd( URT_Struct* , FunctionalState  );
Nvoid URT_RTSInverse_Cmd( URT_Struct* URTX, FunctionalState URT_RTS_INV);
Nvoid URT_CtrlRTS_SW( URT_Struct*  , BitAction );
Nvoid URT_CTS_Cmd( URT_Struct* , FunctionalState);
NDRV_Return URT_GetCTSLineStatus( URT_Struct* );
Nvoid URT_CTSInverse_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_DE_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_DEInverse_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_DEGuardTime_Select( URT_Struct*  , URT_DEGT_TypeDef );
Nvoid URT_IdlehandleMode_Select( URT_Struct*  , URT_IDLEMOde_TypeDef );
Nvoid URT_TXHalt_Cmd(URT_Struct*  , FunctionalState );
Nvoid URT_TXGuardTime_Select( URT_Struct*  , uint8_t );
NDRV_Return URT_SetTXData( URT_Struct*  , uint8_t  , uint32_t );
N///@}
N
N
N
N///@{
Nvoid URT_CPHAMode_Select( URT_Struct*  , URT_CPHA_TypeDef );
Nvoid URT_CPOLMode_Select( URT_Struct* , URT_CPOL_TypeDef );
N
N#if defined(URT_CR0_SYNC_MDS_mask_w)
X#if 0L
S    void URT_SYNCMode_Select( URT_Struct* URTX , URT_SYNCMode_TypeDef URT_SYNC_MDS);
N#endif
N
N#if defined(URT_CR2_NSSI_EN_mask_w)
X#if 0L
S    void URT_NssInput_Cmd( URT_Struct* , FunctionalState);
N#endif
N#if defined(URT_CR2_DOUT_MDS_mask_w)
X#if 0L
S    void URT_SPIMasterDataOutputIdleStatus_Select( URT_Struct* , URT_MOSIIdleStatus_TypeDef);
N#endif
Nvoid URT_NssInverse_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_NssSW_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_CtrlNSS_SW( URT_Struct*  , BitAction );
N///@}
N
N
N
N///@{
Nvoid URT_SetSlaveAddressMask( URT_Struct*  , uint8_t );
Nvoid URT_SetSlaveAddress( URT_Struct*  , uint8_t );
Nvoid URT_GlobalAddress_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_SendAddress( URT_Struct*  , uint8_t );
N///@}
N
N
N
N///@{
Nvoid URT_CalibrationMode_Select( URT_Struct*  , URT_CALMode_TypeDef );
Nvoid URT_AutoCalibration_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_Calibration_SW( URT_Struct*  , FunctionalState );
Nvoid URT_CalibrationCompleteDataHold_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_ExtraBreakBit_Select( URT_Struct*  , URT_ExtraBK_TypeDef );
Nvoid URT_SendBreak( URT_Struct* );
N
N#if defined(URT_STA_CALOVF_mask_w) && defined(URT_STA_CALUDF_mask_w)
X#if 0L && 0L
S    DRV_Return URT_GetCalibrationResult(URT_Struct*);
N#endif
N
N///@}
N
N
N///@{
Nvoid URT_TXDMA_Cmd( URT_Struct* , FunctionalState );
Nvoid URT_RXDMA_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_BreakDisableDMA_Cmd( URT_Struct*  , FunctionalState );
N///@}
N
N
N///@{
Nvoid URT_IrDA_Config( URT_Struct*  , URT_IrDA_TypeDef* );
Nvoid URT_IrDA_Cmd( URT_Struct*  , FunctionalState );
N///@}
N
N
N
N///@{
Nvoid URT_AutoExitMuteMode_Select( URT_Struct* , uint8_t );
Nvoid URT_AutoEnterMuteMode_Select( URT_Struct* , uint8_t );
Nvoid URT_Mute_Cmd( URT_Struct*  , FunctionalState );
N///@}
N
N
N///@{
Nvoid URT_NoiseCapture_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_NoiseHoldData_Cmd( URT_Struct*  , FunctionalState );
Nvoid URT_RXParityError_Config( URT_Struct*  , URT_RXParityError_TypeDef*  );
Nvoid URT_TXErrorDetectMode_Select( URT_Struct*  , URT_TXErrorMode_TypeDef );
Nvoid URT_TXErrorResendTime_Select( URT_Struct*  , URT_TXErrorReSendTime_TypeDef );
N
N///@}
N
N
N///@{
Nvoid URT_RxTxSwap_Cmd(URT_Struct*, FunctionalState);
N#if defined(URT_CLK_ECK_CKS_mask_w)
X#if 0L
S    void URT_ExternalClockMux_Select(URT_Struct*,  URT_ExternalClockMux_TypeDef);
N#endif
N///@}
N
N
N///@{
N#if defined(URT_CR0_SDT_EN_mask_w)
X#if 0L
S    void URT_SDT_Cmd( URT_Struct* , FunctionalState);
N#endif
N///@}
N
N
N#endif
N
N
L 33 "C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_URT_DRV.c" 2
N
N
N
N/**
N * @name	Interrupt And Event
N *             
N */ 
N///@{
N/**
N *******************************************************************************
N * @brief	    URT local interrupt enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_IT: (The device support which interrupt refer to the device spec , please)
N *  @arg\b      URT_IT_CALTMO : Baud rate calibration sync field receive time out.
N *  @arg\b      URT_IT_BKTMO  : Break receive time out.
N *  @arg\b      URT_IT_IDTMO  : Idle state time out.
N *  @arg\b      URT_IT_RXTMO  : Receive time out.
N *  @arg\b      URT_IT_TUDR   : URT SPI slave mode transmit underrun.
N *  @arg\b      URT_IT_TXE    : TX error detect.
N *  @arg\b      URT_IT_ROVR   : Receive overrun error.
N *  @arg\b      URT_IT_NCE    : Receive noised character error detect.
N *  @arg\b      URT_IT_FE     : Receive frame error detect.
N *  @arg\b      URT_IT_PE     : Receive parity error detect.
N *  @arg\b      URT_IT_CTS    : CTS change detect.
N *  @arg\b      URT_IT_IDL    : RX idle line detect.
N *  @arg\b      URT_IT_BK     : Break condition detect.
N *  @arg\b      URT_IT_CALC   : Auto baudrate calibration complete.
N *  @arg\b      URT_IT_TMO    : Timeout timer timeout.
N *  @arg\b      URT_IT_BRT    : Baud rate generator timer timeout.
N *  @arg\b      URT_IT_SADR   : Slave address matched.
N *  @arg\b      URT_IT_TX     : Transmit data register empty.
N *  @arg\b      URT_IT_RX     : Receive data register not empty.
N *  @arg\b      URT_IT_LS     : URT line status relationship interrupt.
N *  @arg\b      URT_IT_ERR    : URT error relationship interrupt.
N *  @arg\b      URT_IT_TC     : Transmission complete.(shadow buffer , data register , shift buffer empty)
N *  @arg\b      URT_IT_UG     : URT genernal event relationship interrupt.
N * @param[in]   URT_IT_State:
N * 	@arg\b      ENABLE : Enable interrupt of URT_IT.
N *  @arg\b      DISABLE: Disable interrupt of URT_IT.
N * @return          
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_IT_Config(URT0, (URT_IT_TC | URT_IT_TX | URT_IT_RX) , ENABLE);
N    
N    or
N    
N    URT_IT_Config(URT0, 0x000000C4 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_IT_Config( URT_Struct* URTX , uint32_t URT_IT, FunctionalState URT_IT_State)
N{
N
N    URTX->INT.W = (( URTX->INT.W & (~URT_IT) ) | ( URT_IT * URT_IT_State));
N}
N
N
N/**
N *******************************************************************************
N * @brief	    Read URTx interrupt enable register. 
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      URTX interrupt enable register value.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetITStatus(URT0);
N * @endcode
N *******************************************************************************
N */
Nuint32_t URT_GetITStatus(URT_Struct* URTX)
N{
N    return(URTX->INT.W);
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URTx global all interrupt event are enable or disable control.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_ITEA_State:
N * 	@arg\b      ENABLE : Enable URTX global all interrupt event. 
N *  @arg\b      DISABLE: Disable URTX global all interrupt event.
N * @return       
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_ITEA_Cmd(URT0,ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_ITEA_Cmd( URT_Struct* URTX , FunctionalState URT_ITEA_State)
N{
N    URTX->INT.W =  ((URTX->INT.W & (~URT_INT_IEA_mask_w)) | (URT_INT_IEA_mask_w * URT_ITEA_State));
X    URTX->INT.W =  ((URTX->INT.W & (~((uint32_t)0x00000001))) | (((uint32_t)0x00000001) * URT_ITEA_State));
N}
N
N
N/**
N *******************************************************************************
N * @brief	    Read all URTx interrupt flag. 
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      URTX all interrupt flag.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetITAllFlagStatus(URT0);
N * @endcode
N *******************************************************************************
N */
Nuint32_t URT_GetITAllFlagStatus( URT_Struct* URTX)
N{
N    uint32_t tmp;
N    
N    tmp = URTX->STA.W;
N    tmp = tmp & (~(URT_EVENT_RXDF | URT_EVENT_RHF));
X    tmp = tmp & (~(((uint32_t)0x00000020) | ((uint32_t)0x00000001)));
N    
N    
N    return(tmp);
N}
N
N
N/**
N *******************************************************************************
N * @brief	    Read single URTx interrupt flag. 
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_ITFlag: (The device support which flag refer to the device spec , please)
N *  @arg\b      URT_IT_CALTMO : Baud rate calibration sync field receive time out.
N *  @arg\b      URT_IT_BKTMO  : Break receive time out.
N *  @arg\b      URT_IT_IDTMO  : Idle state time out.
N *  @arg\b      URT_IT_RXTMO  : Receive time out.
N *  @arg\b      URT_IT_TUDR   : URT SPI slave mode transmit underrun.
N *  @arg\b      URT_IT_TXE    : TX error detect.
N *  @arg\b      URT_IT_ROVR   : Receive overrun error.
N *  @arg\b      URT_IT_NCE    : Receive noised character error detect.
N *  @arg\b      URT_IT_FE     : Receive frame error detect.
N *  @arg\b      URT_IT_PE     : Receive parity error detect.
N *  @arg\b      URT_IT_CTS    : CTS change detect.
N *  @arg\b      URT_IT_IDL    : RX idle line detect.
N *  @arg\b      URT_IT_BK     : Break condition detect.
N *  @arg\b      URT_IT_CALC   : Auto baudrate calibration complete.
N *  @arg\b      URT_IT_TMO    : Timeout timer timeout.
N *  @arg\b      URT_IT_BRT    : Baud rate generator timer timeout.
N *  @arg\b      URT_IT_SADR   : Slave address matched.
N *  @arg\b      URT_IT_TX     : Transmit data register empty.
N *  @arg\b      URT_IT_RX     : Receive data register not empty.
N *  @arg\b      URT_IT_LS     : URT line status relationship interrupt.
N *  @arg\b      URT_IT_ERR    : URT error relationship interrupt.
N *  @arg\b      URT_IT_TC     : Transmission complete.(shadow buffer , data register , shift buffer empty)
N *  @arg\b      URT_IT_UG     : URT genernal event relationship interrupt.
N * @return      Single interrupt flag whether  happened or not.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetITSingleFlagStatus(URT0, URT_IT_RX);
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_GetITSingleFlagStatus( URT_Struct* URTX , uint32_t URT_ITFlag)
N{
N   
N    if((URT_ITFlag & (~URT_IT_Mask))!=0)              /*!< URT_ITFlag value over range */
X    if((URT_ITFlag & (~0x7BF73CDE))!=0)               
N    {
N        return(DRV_UnHappened);
N    }
N    if((URTX->STA.W & URT_ITFlag)==0)
N    {
N        return(DRV_UnHappened);
N    }
N    return(DRV_Happened);    
N}
N
N
N/**
N *******************************************************************************
N * @brief	    Clear URTx interrupt flag. 
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_ITFlag: (The device support which flag refer to the device spec , please)
N *  @arg\b      URT_IT_CALTMO : Baud rate calibration sync field receive time out.
N *  @arg\b      URT_IT_BKTMO  : Break receive time out.
N *  @arg\b      URT_IT_IDTMO  : Idle state time out.
N *  @arg\b      URT_IT_RXTMO  : Receive time out.
N *  @arg\b      URT_IT_TUDR   : URT SPI slave mode transmit underrun.
N *  @arg\b      URT_IT_TXE    : TX error detect.
N *  @arg\b      URT_IT_ROVR   : Receive overrun error.
N *  @arg\b      URT_IT_NCE    : Receive noised character error detect.
N *  @arg\b      URT_IT_FE     : Receive frame error detect.
N *  @arg\b      URT_IT_PE     : Receive parity error detect.
N *  @arg\b      URT_IT_CTS    : CTS change detect.
N *  @arg\b      URT_IT_IDL    : RX idle line detect.
N *  @arg\b      URT_IT_BK     : Break condition detect.
N *  @arg\b      URT_IT_CALC   : Auto baudrate calibration complete.
N *  @arg\b      URT_IT_TMO    : Timeout timer timeout.
N *  @arg\b      URT_IT_BRT    : Baud rate generator timer timeout.
N *  @arg\b      URT_IT_SADR   : Slave address matched.
N *  @arg\b      URT_IT_TX     : Transmit data register empty.
N *  @arg\b      URT_IT_RX     : Receive data register not empty.
N *  @arg\b      URT_IT_LS     : URT line status relationship interrupt.
N *  @arg\b      URT_IT_ERR    : URT error relationship interrupt.
N *  @arg\b      URT_IT_TC     : Transmission complete.(shadow buffer , data register , shift buffer empty)
N *  @arg\b      URT_IT_UG     : URT genernal event relationship interrupt.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_ClearITFlag(URT0, (URT_IT_TX | URT_IT_TC) );
N    
N    or
N    
N    URT_ClearITFlag(URT0, 0x00000084 );
N * @endcode
N *******************************************************************************
N */
Nvoid URT_ClearITFlag( URT_Struct* URTX , uint32_t URT_ITFlag)
N{
N    URTX->STA.W = URT_ITFlag & (~(URT_EVENT_RXDF|URT_EVENT_RHF));;
X    URTX->STA.W = URT_ITFlag & (~(((uint32_t)0x00000020)|((uint32_t)0x00000001)));;
N    
N}
N
N/**
N *******************************************************************************
N * @brief	    Read URTX RXDF event flag. 
N * @details     
N *  @arg\b      1. RXDF (receive data byte number is different from previous received data byte number.)
N *  @arg\b      2. First data load to data register the flag is set after IC initial.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      RXDF event flag status.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetRxDifferentFlag(URT0);
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_GetRxDifferentFlag( URT_Struct* URTX)
N{
N    if((URTX->STA.W & URT_EVENT_RXDF)==0)
X    if((URTX->STA.W & ((uint32_t)0x00000020))==0)
N    {
N        return(DRV_UnHappened);
N    }
N    return(DRV_Happened);
N}
N
N/**
N *******************************************************************************
N * @brief	    Read URTX receive hold event flag. 
N * @details     In the condition the shift buffer is held and do not load data 
N *      \n      to shadow buffer until the flag is cleared.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      URTX receive hold event flag status.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetRxHoldFlag(URT0);
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_GetRxHoldFlag( URT_Struct* URTX)
N{
N    if((URTX->STA.W & URT_EVENT_RHF)==0)
X    if((URTX->STA.W & ((uint32_t)0x00000001))==0)
N    {
N        return(DRV_UnHappened);
N    }
N    return(DRV_Happened);
N}
N
N
N/**
N *******************************************************************************
N * @brief	    Clear URTX receive hold event flag. 
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_ClearRxHoldFlag(URT0);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_ClearRxHoldFlag( URT_Struct* URTX)
N{
N    URTX->STA.W = URT_EVENT_RHF;
X    URTX->STA.W = ((uint32_t)0x00000001);
N}
N
N/**
N *******************************************************************************
N * @brief	    Read URTX IrDa data receive busy event flag. 
N * @details     When detect IrDa signal ,the flag is set and clear after no IrDa signal detect.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      IrDa data receive busy event flag status.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetIrDaBusyFlag(URT0);
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_GetIrDaBusyFlag( URT_Struct* URTX)
N{
N    if((URTX->STA2.W & URT_EVENT_IRBUSYF)==0)
X    if((URTX->STA2.W & ((uint32_t)0x00000080))==0)
N    {
N        return(DRV_UnHappened);
N    }
N    return(DRV_Happened);
N}
N
N/**
N *******************************************************************************
N * @brief	    Read send break busy flag.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Break busy event flag status.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetBreakBusyFlag(URT0);
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_GetBreakBusyFlag( URT_Struct* URTX)
N{
N    if((URTX->STA2.W & URT_EVENT_BKBF)==0)
X    if((URTX->STA2.W & ((uint32_t)0x00000040))==0)
N    {
N        return(DRV_UnHappened);
N    }
N    return(DRV_Happened);   
N    
N}
N
N
N/**
N *******************************************************************************
N * @brief	    Read RX busy flag.
N * @details     When detect valid start bit, the flag is set and clear after stop bit.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      RX busy event flag status.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetRxBusyFlag(URT0);
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_GetRxBusyFlag( URT_Struct* URTX)
N{
N    if((URTX->STA2.W & URT_EVENT_RXBUSYF) ==0)
X    if((URTX->STA2.W & ((uint32_t)0x00000001)) ==0)
N    {
N        return(DRV_UnHappened);
N    }
N    return(DRV_Happened);
N}
N
N/**
N *******************************************************************************
N * @brief	    Read Receive noised character event flag.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Receive noised character event flag status.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetRxNoiseFlag(URT0);
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_GetRxNoiseFlag( URT_Struct* URTX)
N{
N    if((URTX->STA2.W & URT_EVENT_NCF)==0)
X    if((URTX->STA2.W & ((uint32_t)0x00000020))==0)
N    {
N        return(DRV_UnHappened);
N    }
N    return(DRV_Happened);
N    
N    
N}
N///@}
N
N
N/**
N * @name	Mode
N *   		
N */ 
N///@{
N/**
N *******************************************************************************
N * @brief	    URT data character configuration.
N * @details     1. URT4 ~ URT7 the following parameter have to same.
N *      \n         - URT_TX_DataLength / URT_RX_DataLength
N *      \n         - URT_TX_StopBits / URT_RX_StopBit
N *      \n      2  URT4 ~ URT7 the following parameter's the some option is linkage.
N *      \n         - URT_RX_Parity is sure URT_Parity_No if URT_TX_Parity is URT_Parity_No.            
N *      \n      3. URT4 ~ URT7 the follwoing parameter can't option.
N *      \n         - URT_TX_DataOrder / URT_RX_DataOrder     : TX / RX data order only LSB.
N *      \n         - URT_TX_DataInverse / URT_RX_DataInverse : It can't data inverse.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_InitStruct:
N *  @arg\b      URT_TX_DataLength / URT_RX_DataLength:
N *      \n      -URT_DataLength_8: Data length is 8 bit.
N *      \n      -URT_DataLength_7: Data length is 7 bit.
N *  @arg\b      URT_TX_DataOrder / URT_RX_DataOrder:
N *      \n      -URT_DataTyped_LSB: Data order is LSB.
N *      \n      -URT_DataTyped_MSB: Data order is MSB.
N *  @arg\b      URT_TX_Parity / URT_RX_Parity:
N *      \n      -URT_Parity_No   : No parity bit.
N *      \n      -URT_Parity_Even : Parity bit is even.
N *      \n      -URT_Parity_Odd  : Parity bit is odd.
N *      \n      -URT_Parity_All_H: Parity bit always is H.
N *      \n      -URT_Parity_All_L: Parity bit always is L.
N *  @arg\b      URT_TX_StopBits / URT_RX_StopBit:
N *      \n      -URT_StopBits_1_0: Stop bit is 1 bit.
N *      \n      -URT_StopBits_2_0: Stop bit is 2 bit.
N *  @arg\b      URT_TX_DataInverse / URT_RX_DataInverse:
N *      \n      -DISABLE: Data bit no inverse.
N *      \n      -ENABLE : Data bit inverse.
N * @return      No
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_Data_TypeDef URT_Datastruct;
N    
N    URT_Datastruct.URT_TX_DataLength = URT_DataLength_8;
N    URT_Datastruct.URT_RX_DataLength = URT_DataLength_8;
N    URT_Datastruct.URT_TX_DataOrder  = URT_DataTyped_LSB;
N    URT_Datastruct.URT_RX_DataOrder  = URT_DataTyped_LSB;
N    URT_Datastruct.URT_TX_Parity     = URT_Parity_No;
N    URT_Datastruct.URT_RX_Parity     = URT_Parity_No;
N    URT_Datastruct.URT_TX_StopBits   = URT_StopBits_1_0;
N    URT_Datastruct.URT_RX_StopBits   = URT_StopBits_1_0;
N    URT_Datastruct.URT_TX_DataInverse= DISABLE;
N    URT_Datastruct.URT_RX_DataInverse= DISABLE;
N    URT_DataCharacter_Config(URT0,&URT_Datastruct);    
N * @endcode
N *******************************************************************************
N */
Nvoid URT_DataCharacter_Config( URT_Struct* URTX, URT_Data_TypeDef* URT_InitStruct)
N{
N    uint8_t tmp;
N    
N    URTX->CR1.B[2] = (URT_InitStruct->URT_TX_DataLength | URT_InitStruct->URT_TX_DataOrder | URT_InitStruct->URT_TX_Parity | URT_InitStruct->URT_TX_StopBits);
N    URTX->CR1.B[0] = (URT_InitStruct->URT_RX_DataLength | URT_InitStruct->URT_RX_DataOrder | URT_InitStruct->URT_RX_Parity | URT_InitStruct->URT_RX_StopBits);
N
N    tmp = URTX->CR4.B[0] & (~(URT_CR4_RDAT_INV_mask_b0|URT_CR4_TDAT_INV_mask_b0));
X    tmp = URTX->CR4.B[0] & (~(((uint8_t )0x10)|((uint8_t )0x20)));
N    tmp = tmp | ((URT_InitStruct->URT_RX_DataInverse<<4 )| ( URT_InitStruct->URT_TX_DataInverse << 5));
N    URTX->CR4.B[0] = tmp;
N    
N    
N}
N
N /**
N *******************************************************************************
N * @brief       URT mode select.
N * @details  
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_MDS: 
N *	@arg\b      URT_URT_mode : URT mode.
N *	@arg\b		URT_SYNC_mode: Synchronous/shift register mode.
N *	@arg\b		URT_IDLE_mode: Idle line mode for multi processor.
N *	@arg\b		URT_ADR_mode : Address bit mode for multi processor.
N * @return      
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_Mode_Select( URT0 , URT_URT_mode);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_Mode_Select( URT_Struct* URTX , URT_Mode_TypeDef URT_MDS)
N{    
N    URTX->CR0.W = (URTX->CR0.W & (~URT_CR0_MDS_mask_w) ) | URT_MDS; 
X    URTX->CR0.W = (URTX->CR0.W & (~((uint32_t)0x00000070)) ) | URT_MDS; 
N    
N    if(URT_MDS == URT_ADR_mode || URT_MDS == URT_IDLE_mode)
N    {
N        URTX->MUTE.W = URTX->MUTE.W | URT_MUTE_MUTE_EN_mask_w;
X        URTX->MUTE.W = URTX->MUTE.W | ((uint32_t)0x00000001);
N    }
N    else
N    {
N        URTX->MUTE.W = URTX->MUTE.W & (~URT_MUTE_MUTE_EN_mask_w);
X        URTX->MUTE.W = URTX->MUTE.W & (~((uint32_t)0x00000001));
N    }
N}
N
N/**
N *******************************************************************************
N * @brief	    URT data line select.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_DAT_LINE:  
N *  @arg\b      URT_DataLine_2: 2-line seqarated.
N *  @arg\b      URT_DataLine_1: 1-line bidirectional.
N * @return      
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_DataLine_Select(URT0,URT_DataLine_2);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_DataLine_Select( URT_Struct* URTX, URT_DataLine_TypeDef URT_DAT_LINE)
N{   
N    URTX->CR0.W = ((URTX->CR0.W & (~URT_CR0_DAT_LINE_mask_w)) | URT_DAT_LINE);
X    URTX->CR0.W = ((URTX->CR0.W & (~((uint32_t)0x00000008))) | URT_DAT_LINE);
N}
N
N/**
N *******************************************************************************
N * @brief	    URT half-duplex mode enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_HDX_EN:  
N *  @arg\b      DISABLE: URT half-duplex mode disable.
N *  @arg\b      ENABLE : URT half-duplex mode enable.
N * @return      
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_HalfDuplexMode_Cmd(URT0,ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_HalfDuplexMode_Cmd( URT_Struct* URTX, FunctionalState URT_HDX_EN)
N{
N 
N    URTX->CR0.W = ((URTX->CR0.W & (~URT_CR0_HDX_EN_mask_w)) | ( URT_CR0_HDX_EN_mask_w * URT_HDX_EN));
X    URTX->CR0.W = ((URTX->CR0.W & (~((uint32_t)0x00000004))) | ( ((uint32_t)0x00000004) * URT_HDX_EN));
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT loop back mode enable or disable.
N * @details     When enable, the received input is taken from transmitted 
N *              output to replace from input pin.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_LBM_EN:  
N *  @arg\b      DISABLE: Disable loop back mode.
N *  @arg\b      ENABLE : Enable loop back mode ( RX->TX , CTS->RTS)
N * @return      
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_LoopBackMode_Cmd(URT0,ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_LoopBackMode_Cmd( URT_Struct* URTX , FunctionalState URT_LBM_EN)
N{
N     
N    URTX->CR0.W = ((URTX->CR0.W & (~URT_CR0_LBM_EN_mask_w)) | ( URT_CR0_LBM_EN_mask_w * URT_LBM_EN));
X    URTX->CR0.W = ((URTX->CR0.W & (~((uint32_t)0x00800000))) | ( ((uint32_t)0x00800000) * URT_LBM_EN));
N    
N}
N/**
N *******************************************************************************
N * @brief	    URT TX function enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TX_EN:  
N *  @arg\b      DISABLE: URT TX function disable.
N *  @arg\b      ENABLE : URT TX function enable.
N * @return      No
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_TX_Cmd(URT0,ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_TX_Cmd( URT_Struct* URTX , FunctionalState URT_TX_EN)
N{    
N    URTX->CR2.W = (( URTX->CR2.W & (~URT_CR2_TX_EN_mask_w)) | (URT_CR2_TX_EN_mask_w * URT_TX_EN));
X    URTX->CR2.W = (( URTX->CR2.W & (~((uint32_t)0x00000008))) | (((uint32_t)0x00000008) * URT_TX_EN));
N}
N
N/**
N *******************************************************************************
N * @brief	    URT RX function enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_RX_EN:  
N *  @arg\b      DISABLE: URT RX function disable.
N *  @arg\b      ENABLE : URT RX function enable.
N * @return      No
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_RX_Cmd(URT0,ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_RX_Cmd( URT_Struct* URTX , FunctionalState URT_RX_EN)
N{    
N    URTX->CR2.W = (( URTX->CR2.W & (~URT_CR2_RX_EN_mask_w)) | (URT_CR2_RX_EN_mask_w * URT_RX_EN));
X    URTX->CR2.W = (( URTX->CR2.W & (~((uint32_t)0x00000004))) | (((uint32_t)0x00000004) * URT_RX_EN));
N}
N
N/**
N *******************************************************************************
N * @brief	    URT RX input signal inverse enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_RX_INV:  
N *  @arg\b      DISABLE: Disable RX input signal inverse.
N *  @arg\b      ENABLE : Enable RX input signal inverse.
N * @return      No
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_RXInverse_Cmd(URT0,ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_RXInverse_Cmd(URT_Struct* URTX , FunctionalState URT_RX_INV)
N{
N    URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_RX_INV_mask_w)) | ( URT_CR0_RX_INV_mask_w * URT_RX_INV));
X    URTX->CR0.W = (( URTX->CR0.W & (~((uint32_t)0x00000400))) | ( ((uint32_t)0x00000400) * URT_RX_INV));
N}
N
N/**
N *******************************************************************************
N * @brief	    URT TX output signal inverse enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TX_INV:  
N *  @arg\b      DISABLE: Disable TX input signal inverse.
N *  @arg\b      ENABLE : Enable TX input signal inverse.
N * @return      No
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_TXInverse_Cmd(URT0,ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_TXInverse_Cmd( URT_Struct* URTX , FunctionalState URT_TX_INV)
N{
N    URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_TX_INV_mask_w)) | (URT_CR0_TX_INV_mask_w * URT_TX_INV));
X    URTX->CR0.W = (( URTX->CR0.W & (~((uint32_t)0x00000800))) | (((uint32_t)0x00000800) * URT_TX_INV));
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    To select URT receive whether noise data or not.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_NCHAR_DIS:  
N *  @arg\b      DISABLE: Accept noised character.
N *  @arg\b      ENABLE : Skip noise character.
N * @return      No
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_NoiseDataSkip_Cmd(URT0,ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_NoiseDataSkip_Cmd(URT_Struct* URTX, FunctionalState URT_NCHAR_DIS)
N{
N    URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_NCHAR_DIS_mask_w)) | (URT_CR0_NCHAR_DIS_mask_w * URT_NCHAR_DIS));
X    URTX->CR0.W = (( URTX->CR0.W & (~((uint32_t)0x00400000))) | (((uint32_t)0x00400000) * URT_NCHAR_DIS));
N    
N    
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    URT function enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_EN:  
N *  @arg\b      DISABLE: URT function disable.
N *  @arg\b      ENABLE : URT function enable.
N * @return      No
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_Cmd(URT0,ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_Cmd( URT_Struct*  URTX, FunctionalState URT_EN) 
N{
N    URTX->CR0.W = ((URTX->CR0.W & (~URT_CR0_EN_mask_w)) | (URT_CR0_EN_mask_w * URT_EN));
X    URTX->CR0.W = ((URTX->CR0.W & (~((uint32_t)0x00000001))) | (((uint32_t)0x00000001) * URT_EN));
N}
N
N///@}
N
N
N
N
N
N/**
N * @name	Clock
N *   		
N */ 
N///@{
N
N/**
N *******************************************************************************
N * @brief	    URT baudrate generator configuration.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_BRGStruct:
N *  @arg\b      URT_InteranlClockSource (The following option refer to the device spec , please)
N *      \n      -URT_BDClock_PROC       :
N *      \n      -URT_BDClock_LS         :
N *      \n      -URT_BDClock_Timer00TRGO:
N *      \n      -URT_BDClock_EXT        : (The option MG32F02A132 / MG32F02A072 no support)
N *      \n      -URT_BDClock_NCO0_P0    : (The option MG32F02A132 / MG32F02A072 / MG32F02A032 no support)
N *  @arg\b      URT_BaudRateMode
N *      \n      -URT_BDMode_Separated :
N *      \n      -URT_BDMode_Combined  :
N *  @arg\b      URT_BRCounterClock_TypeDef
N *  @arg\b      URT_PrescalerCounterReload :
N *  @arg\b      URT_BaudRateCounterReload  :
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_BRG_TypeDef URT_BRGStruct;
N    
N    URT_BRGStruct.URT_InteranlClockSource = URT_BDClock_PROC;
N    URT_BRGStruct.URT_BaudRateMode = URT_BDMode_Separated;
N    URT_BRGStruct.URT_BaudRateCounterReload = 214;
N    URT_BRGStruct.URT_PrescalerCounterReload = 14;
N    URT_BaudRateGenerator_Config(URT0,&URT_BRGStruct);    
N * @endcode
N *******************************************************************************
N */
Nvoid URT_BaudRateGenerator_Config( URT_Struct* URTX , URT_BRG_TypeDef* URT_BRGStruct)
N{
N    URTX->CLK.W = ((URTX->CLK.W & (~(URT_CLK_CK_SEL_mask_w| URT_CLK_BR_MDS_mask_w))) | 
X    URTX->CLK.W = ((URTX->CLK.W & (~(((uint32_t)0x0000000E)| ((uint32_t)0x02000000)))) | 
N                  (URT_BRGStruct->URT_BaudRateMode | URT_BRGStruct->URT_InteranlClockSource));
N    URTX->RLR.B[0] = URT_BRGStruct->URT_BaudRateCounterReload;
N    URTX->RLR.B[1] = URT_BRGStruct->URT_PrescalerCounterReload;
N}
N
N/**
N *******************************************************************************
N * @brief	    URT select baudrate generator mode.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_BD_MDS:
N *  @arg\b      URT_BDMode_Separated  : Separated PSC and CNT counters for UART baudrate generator.
N *  @arg\b      URT_BDMode_Combined   : Combine to a linear counter for general using timer.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_BaudRateGeneratorMode_Select(URT0 , URT_BDMode_Separated);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_BaudRateGeneratorMode_Select( URT_Struct* URTX , URT_BDMode_TypeDef URT_BD_MDS)
N{ 
N    URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_BR_MDS_mask_w)) | URT_BD_MDS);
X    URTX->CLK.W = (( URTX->CLK.W & (~((uint32_t)0x02000000))) | URT_BD_MDS);
N    
N}
N
N/**
N *******************************************************************************
N * @brief	    URT select baudrate generator clock source.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CK_SEL:
N *  @arg\b      URT_BDClock_PROC        : CK_URT0_PR process clock from CSC.
N *  @arg\b      URT_BDClock_LS          : 
N *  @arg\b      URT_BDClock_Timer00TRGO : Timer00 TRGO.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_BaudRateGeneratorClock_Select(URT0 , URT_BDClock_PROC);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_BaudRateGeneratorClock_Select( URT_Struct* URTX , URT_BDClock_TypeDef URT_CK_SEL)
N{
N    URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_CK_SEL_mask_w)) | URT_CK_SEL);
X    URTX->CLK.W = (( URTX->CLK.W & (~((uint32_t)0x0000000E))) | URT_CK_SEL);
N}
N
N#if defined(URT_CLK_BR_CKS_mask_w)
X#if 0L
S/**
S *******************************************************************************
S * @brief	    URT baudrate counter clock source select.
S * @details     
S * @param[in]   URTX:
S *  @arg\b      URT0: URT0 relationship control.
S *  @arg\b      URT1: URT1 relationship control.
S *  @arg\b      URT2: URT2 relationship control.
S *  @arg\b      URT3: URT3 relationship control.
S * @param[in]   URT_BR_CKS:
S *  @arg\b      URT_BRCountClock_PSC        : Clock prescaler output.
S *  @arg\b      URT_BRCountClock_CK_URT     : UART internal clock input.
S * @return      
S * @exception   No
S * @note 
S * @par         Example
S * @code
S    URT_BaudRateCounterClockSource_Select(URT0 , URT_BRCountClock_PSC);
S * @endcode
S *******************************************************************************
S */
Svoid URT_BaudRateCounterClockSource_Select( URT_Struct* URTX , URT_BRCounterClock_TypeDef URT_BR_CKS)
S{
S    URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_BR_CKS_mask_w)) | URT_BR_CKS);
S}
N#endif
N
N/**
N *******************************************************************************
N * @brief	    Get URT baud rate generator prescaler reload register.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Baud rate generator prescaler reload register value.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetBaudRateGeneratorPreReload( URT0);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetBaudRateGeneratorPreReload( URT_Struct* URTX)
N{
N    return(URTX->RLR.B[1]);
N}
N
N/**
N *******************************************************************************
N * @brief	    Get URT baud rate generator counter reload register.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Baud rate generator counter reload register value.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetBaudRateGeneratorCountReload( URT0);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetBaudRateGeneratorCountReload( URT_Struct* URTX)
N{
N    return(URTX->RLR.B[0]);
N}
N
N
N/**
N *******************************************************************************
N * @brief	    Get URT baud rate generator prescaler register.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Baud rate generator prescaler count register value .
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetBaudRateGeneratorPre( URT0);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetBaudRateGeneratorPre( URT_Struct* URTX)
N{
N    return(URTX->CNT.B[1]);
N}
N
N/**
N *******************************************************************************
N * @brief	    Get URT baud-rate clock counter value.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Baud rate generator count register value .
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetBaudRateGeneratorCount( URT0);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetBaudRateGeneratorCount( URT_Struct* URTX)
N{
N    return(URTX->CNT.B[0]);
N}
N
N/**
N *******************************************************************************
N * @brief	    URT baudrate generator enable or disable .
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_BR_EN:
N *  @arg\b      DISABLE  : Disable baudrate generator.
N *  @arg\b      ENABLE   : Enable baudrate generator.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_BaudRateGenerator_Cmd(URT0 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_BaudRateGenerator_Cmd( URT_Struct* URTX , FunctionalState URT_BR_EN)
N{
N    URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_BR_EN_mask_w)) | (URT_CLK_BR_EN_mask_w * URT_BR_EN));
X    URTX->CLK.W = (( URTX->CLK.W & (~((uint32_t)0x01000000))) | (((uint32_t)0x01000000) * URT_BR_EN));
N}
N
N/**
N *******************************************************************************
N * @brief	    URTX_CLK clock source select.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CLK_CKS:
N *  @arg\b      URT_CK_OUT : Signal from clock output divider.
N *  @arg\b      URT_CK_SC  : Signal from clock input prescaler.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CLKSignalSource_Select(URT0 , URT_CK_SC);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CLKSignalSource_Select( URT_Struct* URTX , URT_CLKSource_TypeDef URT_CLK_CKS)
N{
N    URTX->CLK.W = ((URTX->CLK.W & (~ URT_CLK_CLK_CKS_mask_w)) | URT_CLK_CKS);
X    URTX->CLK.W = ((URTX->CLK.W & (~ ((uint32_t)0x00000020))) | URT_CLK_CKS);
N}
N
N/**
N *******************************************************************************
N * @brief	    URTX_CLK signal output enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CLK_EN:
N *  @arg\b      DISABLE  : URT_CLK signal disable.
N *  @arg\b      ENABLE   : URT_CLK signal enable.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CLKSignal_Cmd(URT0 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CLKSignal_Cmd( URT_Struct* URTX , FunctionalState URT_CLK_EN)
N{
N    URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_CLK_EN_mask_w)) | ( URT_CLK_CLK_EN_mask_w * URT_CLK_EN));
X    URTX->CLK.W = (( URTX->CLK.W & (~((uint32_t)0x00000010))) | ( ((uint32_t)0x00000010) * URT_CLK_EN));
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    URT baudrate timer timerout signal output state.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_BRO_STA:
N *  @arg\b      CLR : URTX_BRO is logical 0.
N *  @arg\b      SET : URTX_BRO is logical 1.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CtrlBROSignalStatus_SW(URT0 , SET);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CtrlBROSignalStatus_SW( URT_Struct* URTX , BitAction URT_BRO_STA)
N{    
N    URTX->CLK.W = (( (URTX->CLK.W & (~URT_CLK_BRO_STA_mask_w)) | URT_CLK_BRO_LCK_mask_w) | ( URT_CLK_BRO_STA_mask_w * URT_BRO_STA));
X    URTX->CLK.W = (( (URTX->CLK.W & (~((uint32_t)0x04000000))) | ((uint32_t)0x08000000)) | ( ((uint32_t)0x04000000) * URT_BRO_STA));
N}
N
N/**
N *******************************************************************************
N * @brief	    URTX PSC clock output signal state.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CKO_STA:
N *  @arg\b      CLR : URT_CLK is logical 0.
N *  @arg\b      SET : URT_CLK is logical 1.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CtrlCLKSignalStatus_SW(URT0 , SET);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CtrlCLKSignalStatus_SW( URT_Struct* URTX , BitAction URT_CKO_STA)
N{ 
N    URTX->CLK.W = ((( URTX->CLK.W & (~URT_CLK_CKO_STA_mask_w)) | URT_CLK_CKO_LCK_mask_w) | (URT_CLK_CKO_STA_mask_w * URT_CKO_STA));
X    URTX->CLK.W = ((( URTX->CLK.W & (~((uint32_t)0x10000000))) | ((uint32_t)0x20000000)) | (((uint32_t)0x10000000) * URT_CKO_STA));
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT select TX clock source.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TX_CKS:
N *  @arg\b      URT_TXClock_Internal   : URT TX clock source from baudrate genertor.
N *  @arg\b      URT_TXClock_Timer01TRGO: URT TX clock source from timer01 TRGO.
N *  @arg\b      URT_TXClock_Timer10TRGO: URT TX clock source from timer10 TRGO.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_TXClockSource_Select(URT0 , URT_TXClock_Internal);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_TXClockSource_Select( URT_Struct* URTX , URT_TXClock_TypeDef URT_TX_CKS)
N{
N    URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_TX_CKS_mask_w)) | URT_TX_CKS);
X    URTX->CLK.W = (( URTX->CLK.W & (~((uint32_t)0x00300000))) | URT_TX_CKS);
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT select RX clock source.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_RX_CKS:
N *  @arg\b      URT_RXClock_Internal   : URT TX clock source from baudrate genertor.
N *  @arg\b      URT_RXClock_Timer01TRGO: URT TX clock source from timer01 TRGO.
N *  @arg\b      URT_RXClock_Timer10TRGO: URT TX clock source from timer10 TRGO.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_RXClockSource_Select(URT0 , URT_RXClock_Internal);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_RXClockSource_Select( URT_Struct* URTX , URT_RXClock_TypeDef URT_RX_CKS)
N{   
N    URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_RX_CKS_mask_w)) | URT_RX_CKS);
X    URTX->CLK.W = (( URTX->CLK.W & (~((uint32_t)0x00030000))) | URT_RX_CKS);
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT TX data oversampling samples select.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TXOS_NUM:
N *  @arg\b      (0 ~ 31)
N *      \n      -In SC and SPI mode the valid value is from 1 to 31 for oversampling number from 2 to 32.
N *      \n      -The other mode the valid value is from 7 to 31 for oversampling number from  8 to 32.
N * @return      DRV_Return:
N *  @arg\b      DRV_Failure : URT TX oversampling setting fail.
N *  @arg\b      DRV_Success : URT TX oversampling setting success.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_TXOverSamplingSampleNumber_Select( URT0, 7);
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_TXOverSamplingSampleNumber_Select( URT_Struct* URTX , uint8_t URT_TXOS_NUM)
N{
N    if(URT_TXOS_NUM>31)
N    {
N        return(DRV_Failure);
N    }
N    URTX->CR1.B[3] = URT_TXOS_NUM;
N    return(DRV_Success);
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT RX data oversampling samples select.
N * @details     1. URT4 - URT7 the function no effect.
N *      \n      2. URT4 - URT7 RX oversampling samples select the same as TX oversampling 
N *     \n          samples select.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_RXOS_NUM:
N *  @arg\b      (0 ~ 31)
N *      \n      -The valid value is from 7 to 31 for oversampling samples from 8 to 32.
N * @return      DRV_Return:
N *  @arg\b      DRV_Failure : URT RX oversampling setting fail.
N *  @arg\b      DRV_Success : URT RX oversampling setting success.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_RXOverSamplingSampleNumber_Select( URT0, 7);
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_RXOverSamplingSampleNumber_Select( URT_Struct* URTX , uint8_t URT_RXOS_NUM)
N{
N    if(URT_RXOS_NUM>31)
N    {
N        return(DRV_Failure);
N    }
N    URTX->CR1.B[1] = URT_RXOS_NUM;
N    return(DRV_Success);
N}    
N
N
N/**
N *******************************************************************************
N * @brief	    URT RX data oversampling majority vote select.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_OS_MDS:
N *  @arg\b      URT_RXSMP_3TIME: Three sample bits method.
N *  @arg\b      URT_RXSMP_1TIME: One sample bit method and noise free.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_RXOverSamplingMode_Select( URT0, URT_RXSMP_3TIME);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_RXOverSamplingMode_Select( URT_Struct* URTX , URT_RXSMP_TypeDef URT_OS_MDS)
N{
N    URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_OS_MDS_mask_w)) | URT_OS_MDS);
X    URTX->CR0.W = (( URTX->CR0.W & (~((uint32_t)0x00000002))) | URT_OS_MDS);
N}
N
N///@}
N
N
N
N
N
N/**
N * @name  Timerout Timer
N          Timerout timer relationship driver.
N */
N///@{
N
N
N/**
N *******************************************************************************
N * @brief	    URT Timeout timer function enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TMO_EN:  
N *  @arg\b      DISABLE: URT timeout timer function disable.
N *  @arg\b      ENABLE : URT timeout timer function enable.
N * @return      
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_TimeroutTimer_Cmd(URT0,ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_TimeroutTimer_Cmd( URT_Struct* URTX , FunctionalState URT_TMO_EN)
N{ 
N    URTX->TMOUT.W = (( URTX->TMOUT.W & (~URT_TMOUT_TMO_EN_mask_w)) | (URT_TMOUT_TMO_EN_mask_w * URT_TMO_EN));
X    URTX->TMOUT.W = (( URTX->TMOUT.W & (~((uint32_t)0x00000001))) | (((uint32_t)0x00000001) * URT_TMO_EN));
N}
N
N/**
N *******************************************************************************
N * @brief	    URT timeout timer reset.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_TriggerTimeoutTimerRst_SW(URT0);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_TriggerTimeoutTimerRst_SW( URT_Struct* URTX )
N{    
N    URTX->TMOUT.W = (URTX->TMOUT.W | URT_TMOUT_TMO_RST_mask_w);
X    URTX->TMOUT.W = (URTX->TMOUT.W | ((uint32_t)0x00000002));
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT Timeout timer mode select.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TMO_MDS:  
N *  @arg\b      URT_TMOMDS_URT     : Timeout timer mode is URT mode. ( URT detect timeout using)
N *  @arg\b      URT_TMOMDS_General : Timeout timer mode is general mode. ( General timer using )
N * @return      
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_TimeoutMode_Select( URT0, URT_TMOMDS_URT);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_TimeoutMode_Select( URT_Struct* URTX , URT_TMOMDS_TypeDef URT_TMO_MDS)
N{
N    URTX->TMOUT.W = (( URTX->TMOUT.W & (~URT_TMOUT_TMO_MDS_mask_w)) | URT_TMO_MDS);
X    URTX->TMOUT.W = (( URTX->TMOUT.W & (~((uint32_t)0x0000000C))) | URT_TMO_MDS);
N}
N
N/**
N *******************************************************************************
N * @brief	    URT Timeout timer clock source select.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TMO_CKS:  
N *  @arg\b      URT_TMOCLK_BitTime : URT BIT clock.
N *  @arg\b      URT_TMOCLK_CK_URTX : URT clock input.
N *  @arg\b      URT_TMOCLK_Noise   : Noise (Noise bit receive event)
N * @return      
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_TimeoutTimerClockSource_Select(URT0,URT_TMOCLK_BitTime);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_TimeoutTimerClockSource_Select( URT_Struct* URTX , URT_TMOCLK_TypeDef URT_TMO_CKS)
N{
N    URTX->TMOUT.W = (( URTX->TMOUT.W & (~URT_TMOUT_TMO_CKS_mask_w)) | URT_TMO_CKS); 
X    URTX->TMOUT.W = (( URTX->TMOUT.W & (~((uint32_t)0x00000700))) | URT_TMO_CKS); 
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    URT idle line detect threshold value by using receive bit time.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_DET_IDLE: (0 ~ 255)
N *  @arg\b      The value (0 ~ 255) indicates (1 ~ 256) bit time.
N * @return      
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_IdleDetect_Select(URT0 , 48);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_IdleDetect_Select( URT_Struct* URTX , uint8_t URT_DET_IDLE)
N{
N    URTX->CR3.B[1] = URT_DET_IDLE;
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT Idle timerout detect.
N * @details     1.When enable the function have to enable Timeout timer and Timeout
N *                timer mode is no general mode.
N *      \n      2.The detect starting after STOP bit of the last character.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_IDTMO_EN:
N *  @arg\b      DISABLE: Disable idle timeout detect.
N *  @arg\b      ENABLE : Enable idle timeout detect.
N * @param[in]   URT_IDTMO_TH: (0 ~ 65535)
N *  @arg\b      The value : It is 0 ~ 65535 timeout timer clock.
N * @return      
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_IdleTimeoutDetect_Config(URT0 , ENABLE , 65535);
N    
N    or 
N    
N    URT_IdleTimeoutDetect_Config(URT0 , DISABLE , XX);        // XX : it can to write any value , beacse it don't care in disable. 
N
N * @endcode
N *******************************************************************************
N */
Nvoid URT_IdleTimeoutDetect_Config( URT_Struct* URTX , FunctionalState URT_IDTMO_EN , uint16_t URT_IDTMO_TH)
N{ 
N    if(URT_IDTMO_EN == DISABLE)
N    {
N        URTX->TMOUT.W = URTX->TMOUT.W & (~URT_TMOUT_IDTMO_EN_mask_w);
X        URTX->TMOUT.W = URTX->TMOUT.W & (~((uint32_t)0x00000010));
N        return;
N    }
N    URTX->TMOUT2.H[0] = URT_IDTMO_TH;
N    URTX->TMOUT.W = URTX->TMOUT.W | (URT_TMOUT_IDTMO_EN_mask_w);
X    URTX->TMOUT.W = URTX->TMOUT.W | (((uint32_t)0x00000010));
N}
N
N/**
N *******************************************************************************
N * @brief	    URT RX timeout detect.
N * @details     1.When enable the function have to enable Timeout timer and Timeout
N *                timer mode is no general mode.
N *      \n      2.The detect starting after STOP bit of the last character.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_RXTMO_EN:
N *  @arg\b      DISABLE: Disable RX timeout detect.
N *  @arg\b      ENABLE : Enable RX timeout detect.
N * @param[in]   URT_RXTMO_TH: (0 ~ 255)
N *  @arg\b      The value: Indicates ( value + 1) * 8 timeout timer clock.
N * @return      
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_RXTimeoutDetect_Config(URT0 , ENABLE , 255);
N    
N    or 
N    
N    URT_RXTimeoutDetect_Config(URT0 , DISABLE , XX);        // XX : it can to write any value , beacse it don't care in disable. 
N
N * @endcode
N *******************************************************************************
N */
Nvoid URT_RXTimeoutDetect_Config( URT_Struct* URTX , FunctionalState URT_RXTMO_EN , uint8_t URT_RXTMO_TH)
N{
N    if(URT_RXTMO_EN == DISABLE)
N    { 
N        URTX->TMOUT.W = URTX->TMOUT.W & (~URT_TMOUT_RXTMO_EN_mask_w);
X        URTX->TMOUT.W = URTX->TMOUT.W & (~((uint32_t)0x00000020));
N        return;
N    }
N    URTX->TMOUT.B[2] = URT_RXTMO_TH;
N    URTX->TMOUT.W = URTX->TMOUT.W | URT_TMOUT_RXTMO_EN_mask_w;
X    URTX->TMOUT.W = URTX->TMOUT.W | ((uint32_t)0x00000020);
N    
N    
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT break timeout detect.
N * @details     1.When enable the function have to enable Timeout timer and Timeout
N *                timer mode is no general mode.
N *      \n      2.The detect starting after URT_BKF bit asserting( Hardware detect 
N *                break character.)
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_BKTMO_EN:
N *  @arg\b      DISABLE: Disable break timeout detect.
N *  @arg\b      ENABLE : Enable break timeout detect.
N * @param[in]   URT_BKTMO_TH: (0 ~ 15)
N *  @arg\b      The value: Indicates (URT_BKTMO_TH + 1) timeout timer clock.
N * @return    
N *  @arg\b      DRV_Failure: URT_BKTMO_TH value over range.
N *  @arg\b      DRV_Success: Break timeout detect configure success.
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_BreakTimeoutDetect_Config(URT0 , ENABLE , 15);
N    
N    or 
N    
N    URT_BreakTimeoutDetect_Config(URT0 , DISABLE , XX);        // XX : it can to write any value , beacse it don't care in disable. 
N
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_BreakTimeoutDetect_Config( URT_Struct* URTX , FunctionalState URT_BKTMO_EN , uint8_t URT_BKTMO_TH)
N{
N    if(URT_BKTMO_EN == DISABLE)
N    {
N        URTX->TMOUT.W = URTX->TMOUT.W & (~URT_TMOUT_BKTMO_EN_mask_w);
X        URTX->TMOUT.W = URTX->TMOUT.W & (~((uint32_t)0x00000040));
N        return(DRV_Success);
N    }
N    if(URT_BKTMO_TH > 15)
N    {
N        return(DRV_Failure);
N    }    
N    URTX->TMOUT.W = (((URTX->TMOUT.W & (~URT_TMOUT_BKTMO_TH_mask_w)) | URT_TMOUT_BKTMO_EN_mask_w) | (URT_BKTMO_TH << URT_TMOUT_BKTMO_TH_shift_w));
X    URTX->TMOUT.W = (((URTX->TMOUT.W & (~((uint32_t)0x0F000000))) | ((uint32_t)0x00000040)) | (URT_BKTMO_TH << (24)));
N    return(DRV_Success);
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    URT calibration timeout detect.
N * @details     1.When enable the function have to enable Timeout timer and Timeout
N *                timer mode is no general mode.
N *              2.The detect starting after starting to detect SYNC.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CALTMO_EN:
N *  @arg\b      DISABLE: Disable calibration timeout detect.
N *  @arg\b      ENABLE : Enable calibration timeout detect.
N * @param[in]   URT_CALTMO_TH: (0 ~ 15)
N *  @arg\b      0              : Indicate 0xFF timeout timer clock.
N *  @arg\b      The other value: Indicates (URT_CALTMO_TH * 0x10) timeout timer clock.
N * @return    
N *  @arg\b      DRV_Failure: URT_CALTMO_TH value over range.
N *  @arg\b      DRV_Success: Calibration timeout detect configure success.
N * @exception   No
N * @note
N * @par         Example
N * @code
N    URT_CalibrationTimeoutDetect_Config(URT0 , ENABLE , 15);
N    
N    or 
N    
N    URT_CalibrationTimeoutDetect_Config(URT0 , DISABLE , XX);        // XX : it can to write any value , beacse it don't care in disable. 
N
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_CalibrationTimeoutDetect_Config( URT_Struct* URTX , FunctionalState URT_CALTMO_EN , uint8_t URT_CALTMO_TH)
N{
N    if(URT_CALTMO_EN == DISABLE)
N    {
N        URTX->TMOUT.W = URTX->TMOUT.W & (~URT_TMOUT_CALTMO_EN_mask_w);
X        URTX->TMOUT.W = URTX->TMOUT.W & (~((uint32_t)0x00000080));
N        return(DRV_Success);
N    }
N    if(URT_CALTMO_TH > 15)
N    {
N        return(DRV_Failure);
N    }    
N    URTX->TMOUT.W = ((( URTX->TMOUT.W & (~URT_TMOUT_CALTMO_TH_mask_w)) | URT_TMOUT_CALTMO_EN_mask_w) | (URT_CALTMO_TH << URT_TMOUT_CALTMO_TH_shift_w));
X    URTX->TMOUT.W = ((( URTX->TMOUT.W & (~((uint32_t)0xF0000000))) | ((uint32_t)0x00000080)) | (URT_CALTMO_TH << (28)));
N    return(DRV_Success);
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    URTX URT_TMO output signal state control.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TMO_STA:
N *  @arg\b      CLR : URT_TMO output signal is logical 0.
N *  @arg\b      SET : URT_TMO output signal is logical 1.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CtrlTMOSignalStatus_SW(URT0 , SET);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CtrlTMOSignalStatus_SW( URT_Struct* URTX , BitAction URT_TMO_STA) 
N{
N
N
N    URTX->TMOUT.W = ((URTX->TMOUT.W & (~URT_TMOUT_TMO_STA_mask_w)) | URT_TMOUT_TMO_LCK_mask_w) | (URT_TMOUT_TMO_STA_mask_w * URT_TMO_STA);
X    URTX->TMOUT.W = ((URTX->TMOUT.W & (~((uint32_t)0x00004000))) | ((uint32_t)0x00008000)) | (((uint32_t)0x00004000) * URT_TMO_STA);
N
N}
N
N/**
N *******************************************************************************
N * @brief	    URTX get timeout timer counter value.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Timeout timer counter value.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetTimeoutTimerCounter(URT0);
N * @endcode
N *******************************************************************************
N */
Nuint16_t URT_GetTimeoutTimerCounter( URT_Struct* URTX)
N{
N    return(URTX->TMOUT2.H[1]);
N}
N
N/**
N *******************************************************************************
N * @brief	    URTX set timeout timer counter value.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TMO_CNT: Set timeout timer counter value.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_SetTimeoutTimerCounter(URT0,65535);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_SetTimeoutTimerCounter( URT_Struct* URTX, uint16_t URT_TMO_CNT)
N{
N    URTX->TMOUT2.H[1] = URT_TMO_CNT;
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    URTX get timeout timer reload value.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Timeout timer reload value.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetTimeoutTimerReload(URT0);
N * @endcode
N *******************************************************************************
N */
Nuint16_t URT_GetTimeoutTimerReload( URT_Struct* URTX)
N{
N    return(URTX->TMOUT2.H[0]);
N}
N
N/**
N *******************************************************************************
N * @brief	    URTX Set timeout timer compare value.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TMO_RELOAD: Set timeout timer compare value if timerout timer mode is general mode.
N * @return      
N * @exception   No
N * @note        To use in timerout timer mode is general mode.
N * @par         Example
N * @code
N    URT_SetTimeoutTimerCompare(URT0,65535);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_SetTimeoutTimerCompare( URT_Struct* URTX, uint16_t URT_TMO_RELOAD)
N{
N    URTX->TMOUT2.H[0] = URT_TMO_RELOAD;
N}
N///@}
N
N
N
N
N
N
N
N
N
N
N/**
N * @name Data Control
N         URT data control relationship driver.
N */
N///@{
N
N
N
N
N/**
N *******************************************************************************
N * @brief	    Get URTX TX shadow buffer remained data byte number.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Transmission shadow buffer remained level.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetTXShadowBufferLevel(URT0);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetTXShadowBufferLevel( URT_Struct* URTX)
N{
N    return(URTX->STA2.MBIT.TX_LVL);
N}
N
N/**
N *******************************************************************************
N * @brief       Get URTX RX shadow buffer level now.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Receive shadow buffer level.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetRXShadowBufferLevel(URT0);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetRXShadowBufferLevel( URT_Struct* URTX)
N{
N    return(URTX->STA2.MBIT.RX_LVL);
N}
N
N
N/**
N *******************************************************************************
N * @brief       URT TX data clear.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_ClearTXData(URT0);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_ClearTXData( URT_Struct* URTX)
N{
N    URTX->CR4.W = URTX->CR4.W | URT_CR4_TDAT_CLR_mask_w;
X    URTX->CR4.W = URTX->CR4.W | ((uint32_t)0x00000080);
N}
N
N
N/**
N *******************************************************************************
N * @brief       URT RX data clear.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_ClearRXData(URT0);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_ClearRXData( URT_Struct* URTX)
N{
N    URTX->CR4.W = URTX->CR4.W | URT_CR4_RDAT_CLR_mask_w;
X    URTX->CR4.W = URTX->CR4.W | ((uint32_t)0x00000040);
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    Get URTX TX data register remained data byte number.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetTXDataRegLevel(URT0);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetTXDataRegLevel( URT_Struct* URTX)
N{
N    return(URTX->CR4.MBIT.TNUM);
N}
N
N
N/**
N *******************************************************************************
N * @brief       URT shadow buffer threshold select.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_RX_TH:
N *  @arg\b      URT_RXTH_1BYTE : 1 byte
N *  @arg\b      URT_RXTH_2BYTE : 2 byte
N *  @arg\b      URT_RXTH_3BYTE : 3 byte
N *  @arg\b      URT_RXTH_4BYTE : 4 byte
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_RXShadowBufferThreshold_Select( URT0, URT_RXTH_4BYTE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_RXShadowBufferThreshold_Select( URT_Struct* URTX , URT_RXTH_TypeDef URT_RX_TH)
N{
N    URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_RX_TH_mask_w)) | URT_RX_TH);    
X    URTX->CR0.W = (( URTX->CR0.W & (~((uint32_t)0x00030000))) | URT_RX_TH);    
N}
N
N
N/**
N *******************************************************************************
N * @brief       Get URTX RX shadow buffer load to data register data byte number.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Data register have data byte number now.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetRXDataRegLevel(URT0);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetRXDataRegLevel( URT_Struct* URTX)
N{
N    return(URTX->CR4.MBIT.RNUM);
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URTX get received data register.
N * @details     read the register will clear RXF.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Receive data.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetRXData(URT0);
N * @endcode
N *******************************************************************************
N */
Nuint32_t URT_GetRXData( URT_Struct* URTX)
N{
N    return(URTX->RDAT.W);
N}
N
N/**
N *******************************************************************************
N * @brief	    Get URTX capture data 
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      Capture data.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetRXData(URT0);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetCaptureData( URT_Struct* URTX)
N{
N    return(URTX->RCAP.B[0]);
N}
N
N/**
N *******************************************************************************
N * @brief	    Get URTX capture status bit value.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_RCAP:
N *  @arg\b      URT_RCAP_ADR : capture address bit value.
N *  @arg\b      URT_RCAP_PAR : capture parity bit value.
N *  @arg\b      URT_RCAP_STP : capture stop bit value.
N * @return      Capture status bit value.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetCaptureStatusBit( URT0, URT_RCAP_PAR);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetCaptureStatusBit( URT_Struct* URTX , URT_RCAP_TypeDef URT_RCAP)
N{
N    if((URTX->RCAP.W & URT_RCAP)==0)
N    {
N        return(0); 
N    }
N    return(1);
N}
N
N/**
N *******************************************************************************
N * @brief	    Get URTX RX shift buffer status bit value.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_SBF_StatusBit:
N *  @arg\b      URT_SBUF_ADR : Shift buffer address bit value.
N *  @arg\b      URT_SBUF_PAR : Shift buffer parity bit value.
N * @return      RX shift buffer status bit value.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetRXShiftBufferStatusBit( URT0, URT_SBUF_PAR);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetRXShiftBufferStatusBit( URT_Struct* URTX , URT_SBUFBit_TypeDef URT_SBF_StatusBit)
N{
N    if((URTX->STA2.W & URT_SBF_StatusBit)==0)
N    {
N        return(0);
N    }
N    return(1);
N}
N
N/**
N *******************************************************************************
N * @brief	    Get URTX TX shift buffer data. 
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      TX shift buffer data.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetTXShiftBufferData(URT0);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetTXShiftBufferData( URT_Struct* URTX)
N{
N    return(URTX->SBUF.B[1]);
N}
N
N/**
N *******************************************************************************
N * @brief	    Get URTX RX shift buffer data. 
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      RX shift buffer data.
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetRXShiftBufferData(URT0);
N * @endcode
N *******************************************************************************
N */
Nuint8_t URT_GetRXShiftBufferData( URT_Struct* URTX)
N{
N    return(URTX->SBUF.B[0]);    
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    URTX RTS hardware flow control enable / disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_RTS_EN:
N *  @arg\b      DISABLE  : Disable RTS hardware flow control.
N *  @arg\b      ENABLE   : Enable RTS hardware flow control.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_RTS_Cmd(URT0 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_RTS_Cmd( URT_Struct* URTX, FunctionalState  URT_RTS_EN) 
N{
N    URTX->HFC.W = (( URTX->HFC.W & (~URT_HFC_RTS_EN_mask_w)) | (URT_HFC_RTS_EN_mask_w * URT_RTS_EN));
X    URTX->HFC.W = (( URTX->HFC.W & (~((uint32_t)0x00000002))) | (((uint32_t)0x00000002) * URT_RTS_EN));
N}
N
N/**
N *******************************************************************************
N * @brief	    URTX RTS signal inverse enable / disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_RTS_INV:
N *  @arg\b      DISABLE  : Disable RTS signal inverse disable.
N *  @arg\b      ENABLE   : Enable RTS signal inverse enable.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_RTSInverse_Cmd(URT0 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_RTSInverse_Cmd( URT_Struct* URTX, FunctionalState URT_RTS_INV)
N{    
N    URTX->HFC.W = (( URTX->HFC.W & (~URT_HFC_RTS_INV_mask_w)) | (URT_HFC_RTS_INV_mask_w * URT_RTS_INV));
X    URTX->HFC.W = (( URTX->HFC.W & (~((uint32_t)0x00000008))) | (((uint32_t)0x00000008) * URT_RTS_INV));
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    URTX RTS output control data bit by software.
N * @details     The driver is no effect when URT_RTS_Cmd function enable.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_RTS_OUT:
N *  @arg\b      CLR  : RTS output logical 0.
N *  @arg\b      SET  : RTS output logical 1.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CtrlRTS_SW(URT0 , SET);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CtrlRTS_SW( URT_Struct* URTX , BitAction URT_RTS_OUT)
N{   
N    URTX->HFC.W = (( URTX->HFC.W & (~URT_HFC_RTS_OUT_mask_w)) | ( URT_HFC_RTS_OUT_mask_w * URT_RTS_OUT)); 
X    URTX->HFC.W = (( URTX->HFC.W & (~((uint32_t)0x00000010))) | ( ((uint32_t)0x00000010) * URT_RTS_OUT)); 
N}
N
N/**
N *******************************************************************************
N * @brief	    URTX CTS hardware flow control enable / disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CTS_EN:
N *  @arg\b      DISABLE  : Disable CTS hardware flow control.
N *  @arg\b      ENABLE   : Enable CTS hardware flow control.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CTS_Cmd(URT0 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CTS_Cmd( URT_Struct* URTX, FunctionalState URT_CTS_EN)
N{
N    URTX->HFC.W = (( URTX->HFC.W & (~URT_HFC_CTS_EN_mask_w)) | ( URT_HFC_CTS_EN_mask_w * URT_CTS_EN));
X    URTX->HFC.W = (( URTX->HFC.W & (~((uint32_t)0x00000001))) | ( ((uint32_t)0x00000001) * URT_CTS_EN));
N}
N
N
N/**
N *******************************************************************************
N * @brief	    Get URTX CTS line status.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      
N *  @arg\b      DRV_Logic0: CTS line status is logic 0
N *  @arg\b      DRV_Logic1: CTS line status is logic 1
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    tmp = URT_GetCTSLineStatus(URT0);
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_GetCTSLineStatus( URT_Struct* URTX)
N{
N    uint32_t tmp;
N    
N    tmp = URTX->STA2.W;
N    if( (tmp & URT_STA2_CTS_mask_w) == 0)
X    if( (tmp & ((uint32_t)0x00001000)) == 0)
N    {
N        return(DRV_Logic0);
N    }
N    return(DRV_Logic1);
N}
N
N/**
N *******************************************************************************
N * @brief	    URTX CTS signal inverse enable / disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CTS_INV:
N *  @arg\b      DISABLE  : Disable CTS signal inverse disable.
N *  @arg\b      ENABLE   : Enable CTS signal inverse enable.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CTSInverse_Cmd(URT0 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CTSInverse_Cmd( URT_Struct* URTX , FunctionalState URT_CTS_INV)
N{    
N    URTX->HFC.W = (( URTX->HFC.W & (~URT_HFC_CTS_INV_mask_w)) | ( URT_HFC_CTS_INV_mask_w * URT_CTS_INV));   
X    URTX->HFC.W = (( URTX->HFC.W & (~((uint32_t)0x00000004))) | ( ((uint32_t)0x00000004) * URT_CTS_INV));   
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URTX DE signal output enable / disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_DE_EN:
N *  @arg\b      DISABLE  : Disable DE signal output.
N *  @arg\b      ENABLE   : Enable DE signal output.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_DE_Cmd(URT0 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_DE_Cmd( URT_Struct* URTX , FunctionalState URT_DE_EN)
N{    
N    URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_DE_EN_mask_w)) | (URT_CR0_DE_EN_mask_w * URT_DE_EN));
X    URTX->CR0.W = (( URTX->CR0.W & (~((uint32_t)0x00001000))) | (((uint32_t)0x00001000) * URT_DE_EN));
N}
N
N/**
N *******************************************************************************
N * @brief	    URTX DE signal inverse output enable / disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_DE_INV:
N *  @arg\b      DISABLE  : Disable DE signal inverse output.
N *  @arg\b      ENABLE   : Enable DE signal inverse output.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_DEInverse_Cmd(URT0 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_DEInverse_Cmd( URT_Struct* URTX , FunctionalState URT_DE_INV)
N{    
N    URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_DE_INV_mask_w)) | (URT_CR0_DE_INV_mask_w * URT_DE_INV));
X    URTX->CR0.W = (( URTX->CR0.W & (~((uint32_t)0x00002000))) | (((uint32_t)0x00002000) * URT_DE_INV));
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URTX DE guard time .
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_DE_GT:
N *  @arg\b      URT_DEGT_1_4 : DE guard time is 1/4 bit time.
N *  @arg\b      URT_DEGT_1_2 : DE guard time is 1/2 bit time.
N *  @arg\b      URT_DEGT_1   : DE guard time is 1 bit time. 
N *  @arg\b      URT_DEGT_2   : DE guard time is 2 bit time.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_DEGuardTime_Select(URT0 , URT_DEGT_1);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_DEGuardTime_Select( URT_Struct* URTX , URT_DEGT_TypeDef URT_DE_GT)
N{
N    URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_DE_GT_mask_w)) | URT_DE_GT);
X    URTX->CR0.W = (( URTX->CR0.W & (~((uint32_t)0x0000C000))) | URT_DE_GT);
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URTX idle line detect management mode select.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_IDL_MDS:
N *  @arg\b      URT_IDLEMode_No   : No operation when detecting idle line. 
N *  @arg\b      URT_IDLEMode_Load : Force to load shadow buffer when detecting idle line.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_IdlehandleMode_Select(URT0,URT_IDLEMode_Load);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_IdlehandleMode_Select( URT_Struct* URTX , URT_IDLEMOde_TypeDef URT_IDL_MDS)
N{
N
N    URTX->CR0.W = ((URTX->CR0.W & (~URT_CR0_IDL_MDS_mask_w)) | URT_IDL_MDS);
X    URTX->CR0.W = ((URTX->CR0.W & (~((uint32_t)0x00100000))) | URT_IDL_MDS);
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT transmitter halt enable / disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TX_HALT:
N *  @arg\b      DISABLE : TX halt disable.
N *  @arg\b      ENABLE  : TX halt enable.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_TXHalt_Cmd(URT0 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_TXHalt_Cmd(URT_Struct* URTX , FunctionalState URT_TX_HALT)
N{
N    URTX->CR2.W = ((URTX->CR2.W & (~URT_CR2_TX_HALT_mask_w)) | (URT_CR2_TX_HALT_mask_w * URT_TX_HALT));
X    URTX->CR2.W = ((URTX->CR2.W & (~((uint32_t)0x00000010))) | (((uint32_t)0x00000010) * URT_TX_HALT));
N}
N///@}
N
N
N
N
N/**
N *******************************************************************************
N * @brief	    URT transmitter halt enable / disable.
N * @details     TX guard time between adjacent characters' transmission in 
N *              the unit of bit time.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TXGT_LEN: 
N *  @arg\b      (0 ~ 255) : Guard time() is 0 ~ 255 bit time. 
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_TXGuardTime_Select(URT0 , 48);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_TXGuardTime_Select( URT_Struct* URTX , uint8_t URT_TXGT_LEN)
N{
N    URTX->CR3.B[2] = URT_TXGT_LEN;
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    URT transfer data .
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   Data_len: Transfer data byte.
N * @param[in]   URT_TDAT: Transfer data.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_SetTXData(URT0 , 1 , 0x48);
N * @endcode
N *******************************************************************************
N */
NDRV_Return URT_SetTXData( URT_Struct* URTX , uint8_t Data_len , uint32_t URT_TDAT)
N{
N    switch(Data_len)
N    {
N        case 1:
N                 URTX->TDAT.B[0] = (uint8_t) URT_TDAT;
N                 break;
N        case 2:
N                 URTX->TDAT.H[0] = (uint16_t) URT_TDAT;
N                 break;
N        case 3:
N                 URTX->TDAT3.W = URT_TDAT;
N                 break;
N        case 4:
N                 URTX->TDAT.W = URT_TDAT;
N                 break;
N        default:
N                 return(DRV_Failure);
N    }
N    return(DRV_Success);
N}
N
N/**
N * @name   SYNC Mode  
N           SYNC mode relationship driver.
N */
N///@{
N
N
N/**
N *******************************************************************************
N * @brief	    URT data sampling mode select in SYNC mode. 
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CPHA:
N *  @arg\b      URT_CPHA0_LeadEdge : Sampling on leading edge.
N *  @arg\b      URT_CPHA1_TrailEdge: Sampling on trailing edge.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CPHAMode_Select( URT0, URT_CPHA0_LeadEdge);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CPHAMode_Select( URT_Struct* URTX , URT_CPHA_TypeDef URT_CPHA)
N{   
N    URTX->CR3.W = (( URTX->CR3.W & (~URT_CR3_CPHA_mask_w)) | URT_CPHA);   
X    URTX->CR3.W = (( URTX->CR3.W & (~((uint32_t)0x00000004))) | URT_CPHA);   
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    URT clock polarity type select in SYNC mode.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CPOL:
N *  @arg\b      URT_CPOL0_Low : Clock state is low in idle state.
N *  @arg\b      URT_CPOL1_High: Clock state is high in idle state.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CPOLMode_Select( URT0, URT_CPOL0_Low);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CPOLMode_Select( URT_Struct* URTX, URT_CPOL_TypeDef URT_CPOL)
N{   
N    URTX->CR3.W = ((URTX->CR3.W  & (~URT_CR3_CPOL_mask_w)) | URT_CPOL);      
X    URTX->CR3.W = ((URTX->CR3.W  & (~((uint32_t)0x00000002))) | URT_CPOL);      
N}
N
N/**
N *******************************************************************************
N * @brief	    URT NSS output signal inverse disable / enable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_NSS_INV:
N *  @arg\b      DISABLE: Disable NSS output signal inverse. 
N *  @arg\b      ENABLE : Enable NSS output signal inverse.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_NssInverse_Cmd( URT0, ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_NssInverse_Cmd( URT_Struct* URTX , FunctionalState URT_NSS_INV)
N{   
N    #if defined(URT_CR2_NSSI_INV_mask_w)
X    #if 0L
S        URTX->CR2.W = (( URTX->CR2.W & (~(URT_CR2_NSS_INV_mask_w | URT_CR2_NSSI_INV_mask_w))) | ( (URT_CR2_NSS_INV_mask_w | URT_CR2_NSSI_INV_mask_w) * URT_NSS_INV));   
N    #else
N        URTX->CR2.W = (( URTX->CR2.W & (~(URT_CR2_NSS_INV_mask_w))) | ( (URT_CR2_NSS_INV_mask_w) * URT_NSS_INV)); 
X        URTX->CR2.W = (( URTX->CR2.W & (~(((uint32_t)0x02000000)))) | ( (((uint32_t)0x02000000)) * URT_NSS_INV)); 
N    #endif 
N}
N
N
N
N/**
N *******************************************************************************
N * @brief	    URT NSS signal software control disable / enable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_NSS_SWEN:
N *  @arg\b      DISABLE: NSS signal output controled by hardware.
N *  @arg\b      ENABLE : NSS signal output controled by software.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_NssSW_Cmd( URT0, ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_NssSW_Cmd( URT_Struct* URTX , FunctionalState URT_NSS_SWEN)
N{
N    URTX->CR2.W = (( URTX->CR2.W & (~URT_CR2_NSS_SWEN_mask_w)) | ( URT_CR2_NSS_SWEN_mask_w * URT_NSS_SWEN));
X    URTX->CR2.W = (( URTX->CR2.W & (~((uint32_t)0x04000000))) | ( ((uint32_t)0x04000000) * URT_NSS_SWEN));
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT NSS signal software output control.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_NSS_SWO:
N *  @arg\b      CLR: NSS output logical 0.. 
N *  @arg\b      SET: NSS output logical 1.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CtrlNSS_SW( URT0, SET);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CtrlNSS_SW( URT_Struct* URTX , BitAction URT_NSS_SWO)
N{ 
N    URTX->CR2.W = (( URTX->CR2.W & (~URT_CR2_NSS_SWO_mask_w)) | ( URT_CR2_NSS_SWO_mask_w * URT_NSS_SWO));
X    URTX->CR2.W = (( URTX->CR2.W & (~((uint32_t)0x00010000))) | ( ((uint32_t)0x00010000) * URT_NSS_SWO));
N}
N
N#if defined(URT_CR2_NSSI_EN_mask_w)
X#if 0L
S /**
S *******************************************************************************
S * @brief       URT's NSSI function control in SPI slave mode.
S * @details  
S * @param[in]   URTX:
S *  @arg\b      URT0: URT0 relationship control.
S *  @arg\b      URT1: URT1 relationship control.
S *  @arg\b      URT2: URT2 relationship control.
S *  @arg\b      URT3: URT3 relationship control.
S * @param[in]   URT_NSSI_EN: 
S *	@arg\b      DISABLE : Disable NSSI function.
S *	@arg\b		ENABLE  : Enable NSSI function.
S * @return      
S * @exception   No
S * @note
S * @par         Example
S * @code
S    URT_NssInput_Cmd( URT0 , ENABLE);
S * @endcode
S *******************************************************************************
S */
Svoid URT_NssInput_Cmd( URT_Struct* URTX, FunctionalState URT_NSSI_EN)
S{
S    URTX->CR2.W = ((URTX->CR2.W & (~URT_CR2_NSSI_EN_mask_w)) | ( URT_CR2_NSSI_EN_mask_w * URT_NSSI_EN));
S}
N#endif
N
N#if defined(URT_CR2_DOUT_MDS_mask_w)
X#if 0L
S /**
S *******************************************************************************
S * @brief       Control URT SPI Master Mode MOSI Pin status in Bus is idle. 
S * @details  
S * @param[in]   URTX:
S *  @arg\b      URT0: URT0 relationship control.
S *  @arg\b      URT1: URT1 relationship control.
S *  @arg\b      URT2: URT2 relationship control.
S *  @arg\b      URT3: URT3 relationship control.
S * @param[in]   URT_MOSI_IDLESTATUS: 
S *	@arg\b      URT_mSPI_MOSI_Idle_Tristate : MOSI idle status is tristate.
S *	@arg\b		URT_mSPI_MOSI_Idle_LastBit  : MOSI idle status is last bit.
S *  @arg\b      URT_mSPI_MOSI_Idle_Low      : MOSI idle is Low.
S *  @arg\b      URT_mSPI_MOSI_Idle_High     : MOSI idle is High.
S * @return      
S * @exception   No
S * @note
S * @par         Example
S * @code
S    URT_SPIMasterDataOutputIdleStatus_Select( URT0 , URT_mSPI_MOSI_Idle_LastBit);
S * @endcode
S *******************************************************************************
S */
Svoid URT_SPIMasterDataOutputIdleStatus_Select( URT_Struct* URTX , URT_MOSIIdleStatus_TypeDef URT_MOSI_IDLESTATUS)
S{
S    URTX->CR2.B[3] = ((URTX->CR2.B[3] & (~(URT_CR2_DOUT_IDL_mask_b3 | URT_CR2_DOUT_MDS_mask_b3))) | URT_MOSI_IDLESTATUS);
S}
N#endif
N
N#if defined(URT_CR0_SYNC_MDS_mask_w)
X#if 0L
S /**
S *******************************************************************************
S * @brief       URT SYNC mode select.
S * @details  
S * @param[in]   URTX:
S *  @arg\b      URT0: URT0 relationship control.
S *  @arg\b      URT1: URT1 relationship control.
S *  @arg\b      URT2: URT2 relationship control.
S *  @arg\b      URT3: URT3 relationship control.
S * @param[in]   URT_SYNC_MDS: 
S *	@arg\b      URT_URT_mode : URT mode.
S *	@arg\b		URT_SYNC_MASTER: Synchronous/shift Maseter mode
S *	@arg\b		URT_SYNC_SLAVE : Synchronous/shift Slave mode
S * @return      
S * @exception   No
S * @note
S * @par         Example
S * @code
S    URT_SYNCMode_Select( URT0 , URT_SYNC_MASTER);
S * @endcode
S *******************************************************************************
S */
Svoid URT_SYNCMode_Select( URT_Struct* URTX , URT_SYNCMode_TypeDef URT_SYNC_MDS)
S{
S    MODIFY_REG( URTX->CR0.W , URT_CR0_SYNC_MDS_mask_w , URT_SYNC_MDS);
S}
N#endif
N///@}
N
N
N
N
N
N/**
N * @name   Address Mode  
N           Address mode relationship driver.
N */
N///@{
N
N/**
N *******************************************************************************
N * @brief	    URTX multi-processor slave address mask setting. 
N * @details     Zero in this result is considered as don't care.
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_SA_MSK: (0x00 ~ 0xFF)
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_SetSlaveAddressMask( URT0, 0xF0);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_SetSlaveAddressMask( URT_Struct* URTX , uint8_t URT_SA_MSK)
N{
N    URTX->SADR.B[1] = URT_SA_MSK;
N}
N
N/**
N *******************************************************************************
N * @brief	    URTX multi-processor mode received slave address.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_SA_RX: (0x00 ~ 0xFF)
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_SetSlaveAddress( URT0, 0x68);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_SetSlaveAddress( URT_Struct* URTX , uint8_t URT_SA_RX)
N{ 
N    URTX->SADR.B[0] = URT_SA_RX;
N}
N
N/**
N *******************************************************************************
N * @brief	    URT0 multi-processor global slave address enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_GSA_EN:
N *  @arg\b      DISABLE: Multi-processor global slave address disable.
N *  @arg\b      ENABLE : Multi-porcessor global slave address enable.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_GlobalAddress_Cmd( URT0, ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_GlobalAddress_Cmd( URT_Struct* URTX , FunctionalState URT_GSA_EN)
N{
N    URTX->CR0.W = (URTX->CR0.W & (~URT_CR0_GSA_EN_mask_w)) | (URT_CR0_GSA_EN_mask_w*URT_GSA_EN);
X    URTX->CR0.W = (URTX->CR0.W & (~((uint32_t)0x00000080))) | (((uint32_t)0x00000080)*URT_GSA_EN);
N}
N/**
N *******************************************************************************
N * @brief	    URT Send break signal.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_ADR_TX: Send Address value.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_SendAddress( URT0 , 0x68 ); 
N * @endcode
N *******************************************************************************
N */
Nvoid URT_SendAddress( URT_Struct* URTX , uint8_t URT_ADR_TX)
N{
N    URTX->CR2.W = URTX->CR2.W | URT_CR2_ADR_TX_mask_w;
X    URTX->CR2.W = URTX->CR2.W | ((uint32_t)0x00000002);
N    URTX->TDAT.B[0] = URT_ADR_TX;
N}
N
N///@}
N
N
N
N
N
N
N
N
N
N/**
N * @name   Break & SYNC  
N           
N */
N///@{
N
N
N/**
N *******************************************************************************
N * @brief	    URT auto baud rate calibration mode select.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CAL_MDS:
N *  @arg\b      URT_CALMode_Start: Measure the start bit.
N *  @arg\b      URT_CALMode_Edge : Measure start falling edge to next falling edge.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CalibrationMode_Select( URT0, URT_CALMode_Start);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CalibrationMode_Select( URT_Struct* URTX , URT_CALMode_TypeDef URT_CAL_MDS)
N{
N    URTX->CAL.W = (( URTX->CAL.W & (~URT_CAL_CAL_MDS_mask_w)) | URT_CAL_MDS);
X    URTX->CAL.W = (( URTX->CAL.W & (~((uint32_t)0x0000000C))) | URT_CAL_MDS);
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT auto baudrate calibration enable .
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CAL_AUTO:
N *  @arg\b      DISABLE: Disable auto baudrate calibration.
N *  @arg\b      ENABLE : Enable auto baudrate calibration.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_AutoCalibration_Cmd( URT0, ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_AutoCalibration_Cmd( URT_Struct* URTX , FunctionalState URT_CAL_AUTO)
N{
N    URTX->CAL.W = (( URTX->CAL.W & (~URT_CAL_CAL_AUTO_mask_w)) | (URT_CAL_CAL_AUTO_mask_w * URT_CAL_AUTO));
X    URTX->CAL.W = (( URTX->CAL.W & (~((uint32_t)0x00000002))) | (((uint32_t)0x00000002) * URT_CAL_AUTO));
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT baudrate calibration enable .
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CAL_EN:
N *  @arg\b      DISABLE: Disable baudrate calibration.
N *  @arg\b      ENABLE : Enable baudrate calibration.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_Calibration_SW( URT0, ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_Calibration_SW( URT_Struct* URTX , FunctionalState URT_CAL_EN)
N{
N    URTX->CAL.W = (( URTX->CAL.W & (~URT_CAL_CAL_EN_mask_w)) | (URT_CAL_CAL_EN_mask_w * URT_CAL_EN));
X    URTX->CAL.W = (( URTX->CAL.W & (~((uint32_t)0x00000001))) | (((uint32_t)0x00000001) * URT_CAL_EN));
N}
N
N
N/**
N *******************************************************************************
N * @brief	    After URT baudrate calibration complete hold receive data enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_CALC_HE:
N *  @arg\b      DISABLE: No hold data from shift buffer to shadow buffer after calibration.
N *  @arg\b      ENABLE : Hold data from shift buffer to shadow buffer after calibration.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_CalibrationCompleteDataHold_Cmd( URT0, ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_CalibrationCompleteDataHold_Cmd( URT_Struct* URTX , FunctionalState URT_CALC_HE)
N{
N    URTX->CAL.W = (( URTX->CAL.W & (~URT_CAL_CALC_HE_mask_w)) | ( URT_CAL_CALC_HE_mask_w * URT_CALC_HE));
X    URTX->CAL.W = (( URTX->CAL.W & (~((uint32_t)0x00000080))) | ( ((uint32_t)0x00000080) * URT_CALC_HE));
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT extra break bit select.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_DET_BK:
N *  @arg\b      URT_ExtraBK_1BIT: Extra break bit is 1 bit.
N *  @arg\b      URT_ExtraBK_3BIT: Extra break bit is 3 bit.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_ExtraBreakBit_Select( URT0, URT_ExtraBK_3BIT);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_ExtraBreakBit_Select( URT_Struct* URTX , URT_ExtraBK_TypeDef URT_DET_BK)
N{
N    URTX->CR3.W = ((URTX->CR3.W & (~URT_CR3_DET_BK_mask_w)) | URT_DET_BK);
X    URTX->CR3.W = ((URTX->CR3.W & (~((uint32_t)0x00000010))) | URT_DET_BK);
N}
N
N/**
N *******************************************************************************
N * @brief	    URT Send break signal.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_SendBreak( URT0 );
N * @endcode
N *******************************************************************************
N */
Nvoid URT_SendBreak( URT_Struct* URTX)
N{
N    URTX->CR2.W = URTX->CR2.W | URT_CR2_BK_TX_mask_w;
X    URTX->CR2.W = URTX->CR2.W | ((uint32_t)0x00000001);
N    URTX->TDAT.B[0] = 0x48;
N}
N
N
N
N#if defined(URT_STA_CALOVF_mask_w) && defined(URT_STA_CALUDF_mask_w)
X#if 0L && 0L
S/**
S *******************************************************************************
S * @brief	    Get URT auto baud-rate calibration result.
S * @details     
S * @param[in]   URTX:
S *  @arg\b      URT0: URT0 relationship control.
S *  @arg\b      URT1: URT1 relationship control.
S *  @arg\b      URT2: URT2 relationship control.
S *  @arg\b      URT3: URT3 relationship control.
S * @return      DRV_Success   : Calibration success.
S * @return      DRV_OverFlow  : Overflow baudrate generator counter.
S * @return      DRV_UnderFlow : Underflow baudrate generator counter.
S * @exception   No
S * @note 
S * @par         Example
S * @code
S       DRV_Return URT_CAL_Result;
S       
S       URT_CAL_Result = URT_GetCalibrationResult(URT0);
S * @endcode
S *******************************************************************************
S */
SDRV_Return URT_GetCalibrationResult(URT_Struct* URTX)
S{
S    uint32_t Tmp;
S    
S    Tmp = URTX->STA.W & (URT_EVENT_CALOVF|URT_EVENT_CALUDF);
S    URTX->STA.W = URTX->STA.W | (URT_STA_CALOVF_mask_w | URT_STA_CALUDF_mask_w);
S     
S    if(Tmp==URT_EVENT_CALOVF)
S    {
S        return(DRV_OverFlow);
S    }
S    else if(Tmp==URT_EVENT_CALUDF)
S    {
S        return(DRV_UnderFlow);
S    }
S    
S    return(DRV_Success);
S}
S
S
N#endif
N
N
N
N///@}
N
N
N
N
N/**
N * @name   DMA 
N           URT DMA relationship driver.
N */
N///@{
N
N
N/**
N *******************************************************************************
N * @brief	    URT DMA TX function disable or enable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_DMA_TXEN:
N *  @arg\b      DISABLE: Disable DMA TX function.
N *  @arg\b      ENABLE : Enable DMA TX function.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_TXDMA_Cmd( URT0, ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_TXDMA_Cmd( URT_Struct* URTX, FunctionalState URT_DMA_TXEN)
N{
N    if((URTX->CR2.W & URT_CR2_TX_EN_mask_w) !=0)
X    if((URTX->CR2.W & ((uint32_t)0x00000008)) !=0)
N    {
N        URTX->CR2.W = URTX->CR2.W & (~URT_CR2_TX_EN_mask_w);
X        URTX->CR2.W = URTX->CR2.W & (~((uint32_t)0x00000008));
N        if(URT_DMA_TXEN==ENABLE)
N        {
N            URTX->CR0.W = URTX->CR0.W | URT_CR0_DMA_TXEN_mask_w;
X            URTX->CR0.W = URTX->CR0.W | ((uint32_t)0x80000000);
N        }
N        else
N        {
N            URTX->CR0.W = URTX->CR0.W & (~URT_CR0_DMA_TXEN_mask_w); 
X            URTX->CR0.W = URTX->CR0.W & (~((uint32_t)0x80000000)); 
N        }
N        URTX->CR2.W = URTX->CR2.W | URT_CR2_TX_EN_mask_w;
X        URTX->CR2.W = URTX->CR2.W | ((uint32_t)0x00000008);
N    }
N    else
N    {
N        if(URT_DMA_TXEN==ENABLE)
N        {
N            URTX->CR0.W = URTX->CR0.W | URT_CR0_DMA_TXEN_mask_w;
X            URTX->CR0.W = URTX->CR0.W | ((uint32_t)0x80000000);
N        }
N        else
N        {
N            URTX->CR0.W = URTX->CR0.W & (~URT_CR0_DMA_TXEN_mask_w); 
X            URTX->CR0.W = URTX->CR0.W & (~((uint32_t)0x80000000)); 
N        }
N    }
N}
N    
N/**
N *******************************************************************************
N * @brief	    URT DMA RX function disable or enable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_DMA_RXEN:
N *  @arg\b      DISABLE: Disable DMA RX function.
N *  @arg\b      ENABLE : Enable DMA RX function.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_RXDMA_Cmd( URT0, ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_RXDMA_Cmd( URT_Struct* URTX , FunctionalState URT_DMA_RXEN)
N{
N    if((URTX->CR2.W & URT_CR2_RX_EN_mask_w) !=0)
X    if((URTX->CR2.W & ((uint32_t)0x00000004)) !=0)
N    {
N        URTX->CR2.W = URTX->CR2.W & (~URT_CR2_RX_EN_mask_w);
X        URTX->CR2.W = URTX->CR2.W & (~((uint32_t)0x00000004));
N        if(URT_DMA_RXEN==ENABLE)
N        {
N            URTX->CR0.W = URTX->CR0.W | URT_CR0_DMA_RXEN_mask_w;
X            URTX->CR0.W = URTX->CR0.W | ((uint32_t)0x40000000);
N        }
N        else
N        {
N            URTX->CR0.W = URTX->CR0.W & (~URT_CR0_DMA_RXEN_mask_w);   
X            URTX->CR0.W = URTX->CR0.W & (~((uint32_t)0x40000000));   
N        }
N        URTX->CR2.W = URTX->CR2.W | URT_CR2_RX_EN_mask_w;
X        URTX->CR2.W = URTX->CR2.W | ((uint32_t)0x00000004);
N    }
N    else
N    {
N        if(URT_DMA_RXEN==ENABLE)
N        {
N            URTX->CR0.W = URTX->CR0.W | URT_CR0_DMA_RXEN_mask_w;
X            URTX->CR0.W = URTX->CR0.W | ((uint32_t)0x40000000);
N        }
N        else
N        {
N            URTX->CR0.W = URTX->CR0.W & (~URT_CR0_DMA_RXEN_mask_w);   
X            URTX->CR0.W = URTX->CR0.W & (~((uint32_t)0x40000000));   
N        }
N    }    
N}
N
N    
N/**
N *******************************************************************************
N * @brief	    URT auto disable DMA (TX and RX) when detect break signal 
N *              function disable or enable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_DDTX_EN:
N *  @arg\b      DISABLE: Disable the function , auto disable DMA (TX/RX) when detect break signal.
N *  @arg\b      ENABLE : Enable the function , auto disable DMA (TX/RX) when detect break signal.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_BreakDisableDMA_Cmd( URT0, ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_BreakDisableDMA_Cmd( URT_Struct* URTX , FunctionalState URT_DDTX_EN)
N{
N    URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_DDTX_EN_mask_w)) | (URT_CR0_DDTX_EN_mask_w * URT_DDTX_EN));
X    URTX->CR0.W = (( URTX->CR0.W & (~((uint32_t)0x20000000))) | (((uint32_t)0x20000000) * URT_DDTX_EN));
N}
N///@}
N
N
N
N/**
N * @name   IrDA 
N           IrDA relationship driver.
N */
N///@{
N/**
N *******************************************************************************
N * @brief	    IrDA TX / RX mode configuration.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_IRDA:
N *  @arg\b      URT_IrDaPulseWidth:
N *      \n      -URT_IrDATra_1 : Pulse is 1  CK_URTx_TX clock.
N *      \n      -URT_IrDATra_2 : Pulse is 2  CK_URTx_TX clock.
N *      \n      -URT_IrDATra_3 : Pulse is 3  CK_URTx_TX clock.
N *      \n      -URT_IrDATra_4 : Pulse is 4  CK_URTx_TX clock.
N *      \n      -URT_IrDATra_5 : Pulse is 5  CK_URTx_TX clock.
N *      \n      -URT_IrDATra_6 : Pulse is 6  CK_URTx_TX clock.
N *      \n      -URT_IrDATra_7 : Pulse is 7  CK_URTx_TX clock.
N *      \n      -URT_IrDATra_8 : Pulse is 8  CK_URTx_TX clock.
N *      \n      -URT_IrDATra_9 : Pulse is 9  CK_URTx_TX clock.
N *      \n      -URT_IrDATra_10: Pulse is 10 CK_URTx_TX clock.
N *      \n      -URT_IrDATra_11: Pulse is 11 CK_URTx_TX clock.
N *      \n      -URT_IrDATra_12: Pulse is 12 CK_URTx_TX clock.
N *      \n      -URT_IrDATra_13: Pulse is 13 CK_URTx_TX clock.
N *      \n      -URT_IrDATra_14: Pulse is 14 CK_URTx_TX clock.
N *      \n      -URT_IrDATra_15: Pulse is 15 CK_URTx_TX clock.
N *      \n      -URT_IrDATra_16: Pulse is 16 CK_URTx_TX clock.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_IrDA_TypeDef URT_IRDA;
N    
N    URT_IRDA.URT_IrDaPulseWidth = URT_IrDATra_9;
N    URT_IrDA_Config(URT0,&URT_IRDA);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_IrDA_Config( URT_Struct* URTX , URT_IrDA_TypeDef* URT_IRDA)
N{
N
N    URTX->IRDA.W = ((URTX->IRDA.W & (~(URT_IRDA_IR_PW_mask_w) )) |
X    URTX->IRDA.W = ((URTX->IRDA.W & (~(((uint32_t)0x00000F00)) )) |
N                   ((URT_IRDA->URT_IrDaPulseWidth <<8) ));
N    
N}
N
N
N/**
N *******************************************************************************
N * @brief	    IrDA encoder / decoder enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_IR_EN:
N *  @arg\b      DISABLE: IrDA encoder / decoder disable.     
N *  @arg\b      ENABLE : IrDA encoder / decoder enable.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_IrDA_Cmd(URT0 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_IrDA_Cmd( URT_Struct* URTX , FunctionalState URT_IR_EN)
N{
N    URTX->IRDA.W = (( URTX->IRDA.W & (~URT_IRDA_IR_EN_mask_w )) | ( URT_IRDA_IR_EN_mask_w * URT_IR_EN));
X    URTX->IRDA.W = (( URTX->IRDA.W & (~((uint32_t)0x00000001) )) | ( ((uint32_t)0x00000001) * URT_IR_EN));
N}
N
N///@}
N
N
N
N
N
N
N/**
N * @name	Mute 
N *   		Mute relationship driver.
N */ 
N///@{
N
N/**
N *******************************************************************************
N * @brief	    URT select automatic exit mute mode.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_ExitMuteMode:
N *  @arg\b      URT_ExitMute_IdleDetect  : When detect idle line URT auto exit mute mode.
N *  @arg\b      URT_ExitMute_BreakDetect : When detect break signal URT auto exit mute mode.
N *  @arg\b      URT_ExitMute_AddressMatch: When address match URT auto exit mute mode.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_AutoExitMuteMode_Select(URT0 , (URT_ExitMute_AddressMatch | URT_ExitMute_IdleDetect) );
N * @endcode
N *******************************************************************************
N */
Nvoid URT_AutoExitMuteMode_Select( URT_Struct* URTX, uint8_t URT_ExitMuteMode)
N{
N    URTX->MUTE.B[2] = URT_ExitMuteMode;
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT select automatic enter mute mode.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_EnterMuteMode:
N *  @arg\b      URT_EnterMute_idleDetect     : When detect idle line URT auto enter mute mode.
N *  @arg\b      URT_EnterMute_AddressUnmatch : When address unmatch URT auto enter mute mode.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_AutoEnterMuteMode_Select(URT0 , (URT_EnterMute_AddressUnmatch | URT_EnterMute_idleDetect));
N * @endcode
N *******************************************************************************
N */
Nvoid URT_AutoEnterMuteMode_Select( URT_Struct* URTX, uint8_t URT_EnterMuteMode)
N{ 
N    URTX->MUTE.B[1] = URT_EnterMuteMode;
N}
N
N/**
N *******************************************************************************
N * @brief	    URT into mute mode or exit mute mode by software.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_Mute_EN:
N *  @arg\b      DISABLE : Disable URT mute function. 
N *  @arg\b      ENABLE  : Enable URT mute function.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_Mute_Cmd(URT0 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_Mute_Cmd( URT_Struct* URTX , FunctionalState URT_Mute_EN)
N{
N    
N    URTX->MUTE.W = (( URTX->MUTE.W & (~URT_MUTE_MUTE_EN_mask_w)) | (URT_MUTE_MUTE_EN_mask_w * URT_Mute_EN));
X    URTX->MUTE.W = (( URTX->MUTE.W & (~((uint32_t)0x00000001))) | (((uint32_t)0x00000001) * URT_Mute_EN));
N}
N
N
N
N///@}
N
N
N/**
N * @name	Error 
N *   		Error detect and handle.
N */ 
N///@{
N
N
N/**
N *******************************************************************************
N * @brief	    URT RX parity error relationship control.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_RXPE:
N *  @arg\b      URT_RXPERetryMode:
N *      \n      -URT_RXPERetry_Disable  : Disable auto retry when RX parity error.
N *      \n      -URT_RXPERetry_Limited  : Limited time auto retry when RX parity error.  
N *      \n      -URT_RXPERetry_Unlimited: Always auto retry unless receiving parity correct character.
N *  @arg\b      URT_RXErrorSignal:
N *      \n      -URT_RXErrorSignal_1BIT: Error signal is 1 bit.
N *      \n      -URT_RXErrorSignal_2BIT: Error signal is 2 bit.
N *  @arg\b      URT_RXPERetryTime : Auto retry time when retry mode is limited time auto retry.
N *      \n      -( URT_RXPERetry_0 ~ URT_RXPERetry_7) : ( 0 ~ 7 time). 
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_RXParityError_TypeDef   URT_RXPE;
N
N    URT_RXPE.URT_RXPERetryMode = URT_RXPERetry_Limited;
N    URT_RXPE.URT_RXErrorSignal = URT_RXErrorSignal_1BIT;
N    URT_RXPE.URT_RXPERetryTime = URT_RXPERetry_3;
N    URT_RXParityError_Config( URT0 , &URT_RXPE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_RXParityError_Config( URT_Struct* URTX , URT_RXParityError_TypeDef*  URT_RXPE)
N{
N    URTX->SC.W = (URTX->SC.W & (~(URT_SC_RXE_MDS_mask_w | URT_SC_RXE_LEN_mask_w | URT_SC_RXE_NUM_mask_w))) |  
X    URTX->SC.W = (URTX->SC.W & (~(((uint32_t)0x00000003) | ((uint32_t)0x00000010) | ((uint32_t)0x00007000)))) |  
N                 (URT_RXPE->URT_RXPERetryMode | URT_RXPE->URT_RXErrorSignal | URT_RXPE->URT_RXPERetryTime);
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT TX error detect mode select.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TXE_MDS:
N *  @arg\b      URT_TXErrorDetect_Disable    : TX error detect disable.
N *  @arg\b      URT_TXErrorDetect_ErrorSignal: Check asserted low by RX device (for SC)
N *  @arg\b      URT_TXErrorDetect_TX         : Check TX data by RX input data (for LIN mode)
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_TXErrorDetectMode_Select(URT0 , URT_TXErrorDetect_ErrorSignal);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_TXErrorDetectMode_Select( URT_Struct* URTX , URT_TXErrorMode_TypeDef URT_TXE_MDS)
N{
N    URTX->SC.W = (URTX->SC.W & (~URT_SC_TXE_MDS_mask_w)) | URT_TXE_MDS;
X    URTX->SC.W = (URTX->SC.W & (~((uint32_t)0x0000000C))) | URT_TXE_MDS;
N}
N
N
N/**
N *******************************************************************************
N * @brief	    URT TX error detect and data resend maximum number.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_TXE_NUM:
N *  @arg\b      URT_TXErrorResend_0                      : Indicates to disable hardware auto resend. 
N *  @arg\b      (URT_TXErrorResend_1~URT_TXErrorResend_7): Resend maximum number for continuous TX error detection.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_TXErrorResendTime_Select(URT0 , URT_TXErrorResend_3);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_TXErrorResendTime_Select( URT_Struct* URTX , URT_TXErrorReSendTime_TypeDef URT_TXE_NUM)
N{
N    URTX->SC.W = (( URTX->SC.W & (~URT_SC_TXE_NUM_mask_w)) | URT_TXE_NUM);
X    URTX->SC.W = (( URTX->SC.W & (~((uint32_t)0x00000700))) | URT_TXE_NUM);
N}
N
N///@}
N
N
N
N/**
N * @name   Pin Control 
N           
N */
N///@{
N/**
N *******************************************************************************
N * @brief	    URT RX / TX swap enable or disable.
N * @details     
N * @param[in]   URTX:
N *  @arg\b      URT0: URT0 relationship control.
N *  @arg\b      URT1: URT1 relationship control.
N *  @arg\b      URT2: URT2 relationship control.
N *  @arg\b      URT3: URT3 relationship control.
N * @param[in]   URT_IO_SWP:
N *  @arg\b      DISABLE : RX / TX swap disable.
N *  @arg\b      ENABLE  : RX / TX swap enable.
N * @return      
N * @exception   No
N * @note 
N * @par         Example
N * @code
N    URT_RxTxSwap_Cmd(URT0 , ENABLE);
N * @endcode
N *******************************************************************************
N */
Nvoid URT_RxTxSwap_Cmd(URT_Struct* URTX , FunctionalState URT_IO_SWP)
N{
N    URTX->CR0.W = (URTX->CR0.W & (~URT_CR0_IO_SWP_mask_w)) | (URT_CR0_IO_SWP_mask_w * URT_IO_SWP);
X    URTX->CR0.W = (URTX->CR0.W & (~((uint32_t)0x00000100))) | (((uint32_t)0x00000100) * URT_IO_SWP);
N}
N
N
N#if defined(URT_CLK_ECK_CKS_mask_w)
X#if 0L
S/**
S *******************************************************************************
S * @brief	    URT external clock signal multiplexer select.
S * @details     
S * @param[in]   URTX:
S *  @arg\b      URT0: URT0 relationship control.
S *  @arg\b      URT1: URT1 relationship control.
S *  @arg\b      URT2: URT2 relationship control.
S *  @arg\b      URT3: URT3 relationship control.
S * @param[in]   ECK_SEL:
S *  @arg\b      URT_ExternalClockInput_CLK : external clock singal IO is URT_CLK pin
S *  @arg\b      URT_ExternalClockInput_RX  : 1. external clock singal IO is URT_RX if TX / RX no swap.
S *      \n                                   2. external clock signal IO is URT_TX if TX / RX swap.
S * @return      
S * @exception   No
S * @note 
S *      \n      1. In MG32F02A032 the function only control external clock singal input.
S * @par         Example
S * @code
S    URT_ExternalClockMux_Select(URT0 , URT_ExternalClockInput_CLK);
S * @endcode
S *******************************************************************************
S */
Svoid URT_ExternalClockMux_Select(URT_Struct* URTX,  URT_ExternalClockMux_TypeDef  ECK_SEL)
S{
S    URTX->CLK.W = ((URTX->CLK.W & (~URT_CLK_ECK_CKS_mask_w)) | ECK_SEL);
S}
N#endif
N
N///@}
N
N
N/**
N * @name   SDT Relationship Control 
N           
N */
N///@{
N#if defined(URT_CR0_SDT_EN_mask_w)
X#if 0L
S/**
S *******************************************************************************
S * @brief	    URT input from SDT event output enable.
S * @details     
S * @param[in]   URTX:
S *  @arg\b      URT0: URT0 relationship control.
S *  @arg\b      URT1: URT1 relationship control.
S *  @arg\b      URT2: URT2 relationship control.
S *  @arg\b      URT3: URT3 relationship control.
S * @param[in]   SDT_EN:
S *  @arg\b      DISABLE : SDT signal input disable.
S *  @arg\b      ENABLE  : SDT signal input enable.
S * @return      
S * @exception   No
S * @note 
S * @par         Example
S * @code
S    URT_RxTxSwap_Cmd(URT0 , ENABLE);
S * @endcode
S *******************************************************************************
S */
Svoid URT_SDT_Cmd( URT_Struct* URTX , FunctionalState SDT_EN )
S{
S    URTX->CR0.W = (URTX->CR0.W & (~URT_CR0_SDT_EN_mask_w)) | (URT_CR0_SDT_EN_mask_w * SDT_EN);       
S}
N#endif
N///@}
N
