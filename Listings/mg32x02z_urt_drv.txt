; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_urt_drv.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_urt_drv.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_urt_drv.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Source\MG32x02z_URT_DRV.c]
                          THUMB

                          AREA ||i.URT_AutoCalibration_Cmd||, CODE, READONLY, ALIGN=1

                  URT_AutoCalibration_Cmd PROC
;;;2939    */
;;;2940   void URT_AutoCalibration_Cmd( URT_Struct* URTX , FunctionalState URT_CAL_AUTO)
000000  6d02              LDR      r2,[r0,#0x50]
;;;2941   {
;;;2942       URTX->CAL.W = (( URTX->CAL.W & (~URT_CAL_CAL_AUTO_mask_w)) | (URT_CAL_CAL_AUTO_mask_w * URT_CAL_AUTO));
000002  2302              MOVS     r3,#2
000004  439a              BICS     r2,r2,r3
000006  004b              LSLS     r3,r1,#1
000008  431a              ORRS     r2,r2,r3
00000a  6502              STR      r2,[r0,#0x50]
;;;2943   }
00000c  4770              BX       lr
;;;2944   
                          ENDP


                          AREA ||i.URT_AutoEnterMuteMode_Select||, CODE, READONLY, ALIGN=1

                  URT_AutoEnterMuteMode_Select PROC
;;;3380    */
;;;3381   void URT_AutoEnterMuteMode_Select( URT_Struct* URTX, uint8_t URT_EnterMuteMode)
000000  225d              MOVS     r2,#0x5d
;;;3382   { 
;;;3383       URTX->MUTE.B[1] = URT_EnterMuteMode;
000002  5411              STRB     r1,[r2,r0]
;;;3384   }
000004  4770              BX       lr
;;;3385   
                          ENDP


                          AREA ||i.URT_AutoExitMuteMode_Select||, CODE, READONLY, ALIGN=1

                  URT_AutoExitMuteMode_Select PROC
;;;3353    */
;;;3354   void URT_AutoExitMuteMode_Select( URT_Struct* URTX, uint8_t URT_ExitMuteMode)
000000  225e              MOVS     r2,#0x5e
;;;3355   {
;;;3356       URTX->MUTE.B[2] = URT_ExitMuteMode;
000002  5411              STRB     r1,[r2,r0]
;;;3357   }
000004  4770              BX       lr
;;;3358   
                          ENDP


                          AREA ||i.URT_BaudRateGeneratorClock_Select||, CODE, READONLY, ALIGN=1

                  URT_BaudRateGeneratorClock_Select PROC
;;;943     */
;;;944    void URT_BaudRateGeneratorClock_Select( URT_Struct* URTX , URT_BDClock_TypeDef URT_CK_SEL)
000000  6882              LDR      r2,[r0,#8]
;;;945    {
;;;946        URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_CK_SEL_mask_w)) | URT_CK_SEL);
000002  230e              MOVS     r3,#0xe
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  6082              STR      r2,[r0,#8]
;;;947    }
00000a  4770              BX       lr
;;;948    
                          ENDP


                          AREA ||i.URT_BaudRateGeneratorMode_Select||, CODE, READONLY, ALIGN=1

                  URT_BaudRateGeneratorMode_Select PROC
;;;915     */
;;;916    void URT_BaudRateGeneratorMode_Select( URT_Struct* URTX , URT_BDMode_TypeDef URT_BD_MDS)
000000  6882              LDR      r2,[r0,#8]
;;;917    { 
;;;918        URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_BR_MDS_mask_w)) | URT_BD_MDS);
000002  2301              MOVS     r3,#1
000004  065b              LSLS     r3,r3,#25
000006  439a              BICS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  6082              STR      r2,[r0,#8]
;;;919        
;;;920    }
00000c  4770              BX       lr
;;;921    
                          ENDP


                          AREA ||i.URT_BaudRateGenerator_Cmd||, CODE, READONLY, ALIGN=1

                  URT_BaudRateGenerator_Cmd PROC
;;;1090    */
;;;1091   void URT_BaudRateGenerator_Cmd( URT_Struct* URTX , FunctionalState URT_BR_EN)
000000  6882              LDR      r2,[r0,#8]
;;;1092   {
;;;1093       URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_BR_EN_mask_w)) | (URT_CLK_BR_EN_mask_w * URT_BR_EN));
000002  2301              MOVS     r3,#1
000004  061b              LSLS     r3,r3,#24
000006  439a              BICS     r2,r2,r3
000008  060b              LSLS     r3,r1,#24
00000a  431a              ORRS     r2,r2,r3
00000c  6082              STR      r2,[r0,#8]
;;;1094   }
00000e  4770              BX       lr
;;;1095   
                          ENDP


                          AREA ||i.URT_BaudRateGenerator_Config||, CODE, READONLY, ALIGN=2

                  URT_BaudRateGenerator_Config PROC
;;;886     */
;;;887    void URT_BaudRateGenerator_Config( URT_Struct* URTX , URT_BRG_TypeDef* URT_BRGStruct)
000000  b510              PUSH     {r4,lr}
;;;888    {
;;;889        URTX->CLK.W = ((URTX->CLK.W & (~(URT_CLK_CK_SEL_mask_w| URT_CLK_BR_MDS_mask_w))) | 
000002  780b              LDRB     r3,[r1,#0]
000004  684a              LDR      r2,[r1,#4]
000006  431a              ORRS     r2,r2,r3
000008  6883              LDR      r3,[r0,#8]
00000a  4c05              LDR      r4,|L7.32|
00000c  4023              ANDS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  6082              STR      r2,[r0,#8]
;;;890                      (URT_BRGStruct->URT_BaudRateMode | URT_BRGStruct->URT_InteranlClockSource));
;;;891        URTX->RLR.B[0] = URT_BRGStruct->URT_BaudRateCounterReload;
000012  7a4b              LDRB     r3,[r1,#9]
000014  2224              MOVS     r2,#0x24
000016  5413              STRB     r3,[r2,r0]
;;;892        URTX->RLR.B[1] = URT_BRGStruct->URT_PrescalerCounterReload;
000018  7a0b              LDRB     r3,[r1,#8]
00001a  2225              MOVS     r2,#0x25
00001c  5413              STRB     r3,[r2,r0]
;;;893    }
00001e  bd10              POP      {r4,pc}
;;;894    
                          ENDP

                  |L7.32|
                          DCD      0xfdfffff1

                          AREA ||i.URT_BreakDisableDMA_Cmd||, CODE, READONLY, ALIGN=1

                  URT_BreakDisableDMA_Cmd PROC
;;;3231    */
;;;3232   void URT_BreakDisableDMA_Cmd( URT_Struct* URTX , FunctionalState URT_DDTX_EN)
000000  6902              LDR      r2,[r0,#0x10]
;;;3233   {
;;;3234       URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_DDTX_EN_mask_w)) | (URT_CR0_DDTX_EN_mask_w * URT_DDTX_EN));
000002  2301              MOVS     r3,#1
000004  075b              LSLS     r3,r3,#29
000006  439a              BICS     r2,r2,r3
000008  074b              LSLS     r3,r1,#29
00000a  431a              ORRS     r2,r2,r3
00000c  6102              STR      r2,[r0,#0x10]
;;;3235   }
00000e  4770              BX       lr
;;;3236   ///@}
                          ENDP


                          AREA ||i.URT_BreakTimeoutDetect_Config||, CODE, READONLY, ALIGN=1

                  URT_BreakTimeoutDetect_Config PROC
;;;1617    */
;;;1618   DRV_Return URT_BreakTimeoutDetect_Config( URT_Struct* URTX , FunctionalState URT_BKTMO_EN , uint8_t URT_BKTMO_TH)
000000  b510              PUSH     {r4,lr}
;;;1619   {
000002  4603              MOV      r3,r0
;;;1620       if(URT_BKTMO_EN == DISABLE)
000004  2900              CMP      r1,#0
000006  d105              BNE      |L9.20|
;;;1621       {
;;;1622           URTX->TMOUT.W = URTX->TMOUT.W & (~URT_TMOUT_BKTMO_EN_mask_w);
000008  6c18              LDR      r0,[r3,#0x40]
00000a  2440              MOVS     r4,#0x40
00000c  43a0              BICS     r0,r0,r4
00000e  6418              STR      r0,[r3,#0x40]
;;;1623           return(DRV_Success);
000010  2000              MOVS     r0,#0
                  |L9.18|
;;;1624       }
;;;1625       if(URT_BKTMO_TH > 15)
;;;1626       {
;;;1627           return(DRV_Failure);
;;;1628       }    
;;;1629       URTX->TMOUT.W = (((URTX->TMOUT.W & (~URT_TMOUT_BKTMO_TH_mask_w)) | URT_TMOUT_BKTMO_EN_mask_w) | (URT_BKTMO_TH << URT_TMOUT_BKTMO_TH_shift_w));
;;;1630       return(DRV_Success);
;;;1631   }
000012  bd10              POP      {r4,pc}
                  |L9.20|
000014  2a0f              CMP      r2,#0xf               ;1625
000016  dd01              BLE      |L9.28|
000018  2001              MOVS     r0,#1                 ;1627
00001a  e7fa              B        |L9.18|
                  |L9.28|
00001c  6c18              LDR      r0,[r3,#0x40]         ;1629
00001e  240f              MOVS     r4,#0xf               ;1629
000020  0624              LSLS     r4,r4,#24             ;1629
000022  43a0              BICS     r0,r0,r4              ;1629
000024  2440              MOVS     r4,#0x40              ;1629
000026  4320              ORRS     r0,r0,r4              ;1629
000028  0614              LSLS     r4,r2,#24             ;1629
00002a  4320              ORRS     r0,r0,r4              ;1629
00002c  6418              STR      r0,[r3,#0x40]         ;1629
00002e  2000              MOVS     r0,#0                 ;1630
000030  e7ef              B        |L9.18|
;;;1632   
                          ENDP


                          AREA ||i.URT_CLKSignalSource_Select||, CODE, READONLY, ALIGN=1

                  URT_CLKSignalSource_Select PROC
;;;1116    */
;;;1117   void URT_CLKSignalSource_Select( URT_Struct* URTX , URT_CLKSource_TypeDef URT_CLK_CKS)
000000  6882              LDR      r2,[r0,#8]
;;;1118   {
;;;1119       URTX->CLK.W = ((URTX->CLK.W & (~ URT_CLK_CLK_CKS_mask_w)) | URT_CLK_CKS);
000002  2320              MOVS     r3,#0x20
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  6082              STR      r2,[r0,#8]
;;;1120   }
00000a  4770              BX       lr
;;;1121   
                          ENDP


                          AREA ||i.URT_CLKSignal_Cmd||, CODE, READONLY, ALIGN=1

                  URT_CLKSignal_Cmd PROC
;;;1142    */
;;;1143   void URT_CLKSignal_Cmd( URT_Struct* URTX , FunctionalState URT_CLK_EN)
000000  6882              LDR      r2,[r0,#8]
;;;1144   {
;;;1145       URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_CLK_EN_mask_w)) | ( URT_CLK_CLK_EN_mask_w * URT_CLK_EN));
000002  2310              MOVS     r3,#0x10
000004  439a              BICS     r2,r2,r3
000006  010b              LSLS     r3,r1,#4
000008  431a              ORRS     r2,r2,r3
00000a  6082              STR      r2,[r0,#8]
;;;1146   }
00000c  4770              BX       lr
;;;1147   
                          ENDP


                          AREA ||i.URT_CPHAMode_Select||, CODE, READONLY, ALIGN=1

                  URT_CPHAMode_Select PROC
;;;2560    */
;;;2561   void URT_CPHAMode_Select( URT_Struct* URTX , URT_CPHA_TypeDef URT_CPHA)
000000  69c2              LDR      r2,[r0,#0x1c]
;;;2562   {   
;;;2563       URTX->CR3.W = (( URTX->CR3.W & (~URT_CR3_CPHA_mask_w)) | URT_CPHA);   
000002  2304              MOVS     r3,#4
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  61c2              STR      r2,[r0,#0x1c]
;;;2564   }
00000a  4770              BX       lr
;;;2565   
                          ENDP


                          AREA ||i.URT_CPOLMode_Select||, CODE, READONLY, ALIGN=1

                  URT_CPOLMode_Select PROC
;;;2588    */
;;;2589   void URT_CPOLMode_Select( URT_Struct* URTX, URT_CPOL_TypeDef URT_CPOL)
000000  69c2              LDR      r2,[r0,#0x1c]
;;;2590   {   
;;;2591       URTX->CR3.W = ((URTX->CR3.W  & (~URT_CR3_CPOL_mask_w)) | URT_CPOL);      
000002  2302              MOVS     r3,#2
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  61c2              STR      r2,[r0,#0x1c]
;;;2592   }
00000a  4770              BX       lr
;;;2593   
                          ENDP


                          AREA ||i.URT_CTSInverse_Cmd||, CODE, READONLY, ALIGN=1

                  URT_CTSInverse_Cmd PROC
;;;2316    */
;;;2317   void URT_CTSInverse_Cmd( URT_Struct* URTX , FunctionalState URT_CTS_INV)
000000  6d82              LDR      r2,[r0,#0x58]
;;;2318   {    
;;;2319       URTX->HFC.W = (( URTX->HFC.W & (~URT_HFC_CTS_INV_mask_w)) | ( URT_HFC_CTS_INV_mask_w * URT_CTS_INV));   
000002  2304              MOVS     r3,#4
000004  439a              BICS     r2,r2,r3
000006  008b              LSLS     r3,r1,#2
000008  431a              ORRS     r2,r2,r3
00000a  6582              STR      r2,[r0,#0x58]
;;;2320   }
00000c  4770              BX       lr
;;;2321   
                          ENDP


                          AREA ||i.URT_CTS_Cmd||, CODE, READONLY, ALIGN=1

                  URT_CTS_Cmd PROC
;;;2257    */
;;;2258   void URT_CTS_Cmd( URT_Struct* URTX, FunctionalState URT_CTS_EN)
000000  6d82              LDR      r2,[r0,#0x58]
;;;2259   {
;;;2260       URTX->HFC.W = (( URTX->HFC.W & (~URT_HFC_CTS_EN_mask_w)) | ( URT_HFC_CTS_EN_mask_w * URT_CTS_EN));
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  430a              ORRS     r2,r2,r1
000008  6582              STR      r2,[r0,#0x58]
;;;2261   }
00000a  4770              BX       lr
;;;2262   
                          ENDP


                          AREA ||i.URT_CalibrationCompleteDataHold_Cmd||, CODE, READONLY, ALIGN=1

                  URT_CalibrationCompleteDataHold_Cmd PROC
;;;2993    */
;;;2994   void URT_CalibrationCompleteDataHold_Cmd( URT_Struct* URTX , FunctionalState URT_CALC_HE)
000000  6d02              LDR      r2,[r0,#0x50]
;;;2995   {
;;;2996       URTX->CAL.W = (( URTX->CAL.W & (~URT_CAL_CALC_HE_mask_w)) | ( URT_CAL_CALC_HE_mask_w * URT_CALC_HE));
000002  2380              MOVS     r3,#0x80
000004  439a              BICS     r2,r2,r3
000006  01cb              LSLS     r3,r1,#7
000008  431a              ORRS     r2,r2,r3
00000a  6502              STR      r2,[r0,#0x50]
;;;2997   }
00000c  4770              BX       lr
;;;2998   
                          ENDP


                          AREA ||i.URT_CalibrationMode_Select||, CODE, READONLY, ALIGN=1

                  URT_CalibrationMode_Select PROC
;;;2912    */
;;;2913   void URT_CalibrationMode_Select( URT_Struct* URTX , URT_CALMode_TypeDef URT_CAL_MDS)
000000  6d02              LDR      r2,[r0,#0x50]
;;;2914   {
;;;2915       URTX->CAL.W = (( URTX->CAL.W & (~URT_CAL_CAL_MDS_mask_w)) | URT_CAL_MDS);
000002  230c              MOVS     r3,#0xc
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  6502              STR      r2,[r0,#0x50]
;;;2916   }
00000a  4770              BX       lr
;;;2917   
                          ENDP


                          AREA ||i.URT_CalibrationTimeoutDetect_Config||, CODE, READONLY, ALIGN=1

                  URT_CalibrationTimeoutDetect_Config PROC
;;;1667    */
;;;1668   DRV_Return URT_CalibrationTimeoutDetect_Config( URT_Struct* URTX , FunctionalState URT_CALTMO_EN , uint8_t URT_CALTMO_TH)
000000  b510              PUSH     {r4,lr}
;;;1669   {
000002  4603              MOV      r3,r0
;;;1670       if(URT_CALTMO_EN == DISABLE)
000004  2900              CMP      r1,#0
000006  d105              BNE      |L18.20|
;;;1671       {
;;;1672           URTX->TMOUT.W = URTX->TMOUT.W & (~URT_TMOUT_CALTMO_EN_mask_w);
000008  6c18              LDR      r0,[r3,#0x40]
00000a  2480              MOVS     r4,#0x80
00000c  43a0              BICS     r0,r0,r4
00000e  6418              STR      r0,[r3,#0x40]
;;;1673           return(DRV_Success);
000010  2000              MOVS     r0,#0
                  |L18.18|
;;;1674       }
;;;1675       if(URT_CALTMO_TH > 15)
;;;1676       {
;;;1677           return(DRV_Failure);
;;;1678       }    
;;;1679       URTX->TMOUT.W = ((( URTX->TMOUT.W & (~URT_TMOUT_CALTMO_TH_mask_w)) | URT_TMOUT_CALTMO_EN_mask_w) | (URT_CALTMO_TH << URT_TMOUT_CALTMO_TH_shift_w));
;;;1680       return(DRV_Success);
;;;1681   }
000012  bd10              POP      {r4,pc}
                  |L18.20|
000014  2a0f              CMP      r2,#0xf               ;1675
000016  dd01              BLE      |L18.28|
000018  2001              MOVS     r0,#1                 ;1677
00001a  e7fa              B        |L18.18|
                  |L18.28|
00001c  6c18              LDR      r0,[r3,#0x40]         ;1679
00001e  0100              LSLS     r0,r0,#4              ;1679
000020  0900              LSRS     r0,r0,#4              ;1679
000022  2480              MOVS     r4,#0x80              ;1679
000024  4320              ORRS     r0,r0,r4              ;1679
000026  0714              LSLS     r4,r2,#28             ;1679
000028  4320              ORRS     r0,r0,r4              ;1679
00002a  6418              STR      r0,[r3,#0x40]         ;1679
00002c  2000              MOVS     r0,#0                 ;1680
00002e  e7f0              B        |L18.18|
;;;1682   
                          ENDP


                          AREA ||i.URT_Calibration_SW||, CODE, READONLY, ALIGN=1

                  URT_Calibration_SW PROC
;;;2966    */
;;;2967   void URT_Calibration_SW( URT_Struct* URTX , FunctionalState URT_CAL_EN)
000000  6d02              LDR      r2,[r0,#0x50]
;;;2968   {
;;;2969       URTX->CAL.W = (( URTX->CAL.W & (~URT_CAL_CAL_EN_mask_w)) | (URT_CAL_CAL_EN_mask_w * URT_CAL_EN));
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  430a              ORRS     r2,r2,r1
000008  6502              STR      r2,[r0,#0x50]
;;;2970   }
00000a  4770              BX       lr
;;;2971   
                          ENDP


                          AREA ||i.URT_ClearITFlag||, CODE, READONLY, ALIGN=1

                  URT_ClearITFlag PROC
;;;280     */
;;;281    void URT_ClearITFlag( URT_Struct* URTX , uint32_t URT_ITFlag)
000000  2321              MOVS     r3,#0x21
;;;282    {
;;;283        URTX->STA.W = URT_ITFlag & (~(URT_EVENT_RXDF|URT_EVENT_RHF));;
000002  460a              MOV      r2,r1
000004  439a              BICS     r2,r2,r3
000006  6002              STR      r2,[r0,#0]
;;;284        
;;;285    }
000008  4770              BX       lr
;;;286    
                          ENDP


                          AREA ||i.URT_ClearRXData||, CODE, READONLY, ALIGN=1

                  URT_ClearRXData PROC
;;;1917    */
;;;1918   void URT_ClearRXData( URT_Struct* URTX)
000000  6a01              LDR      r1,[r0,#0x20]
;;;1919   {
;;;1920       URTX->CR4.W = URTX->CR4.W | URT_CR4_RDAT_CLR_mask_w;
000002  2240              MOVS     r2,#0x40
000004  4311              ORRS     r1,r1,r2
000006  6201              STR      r1,[r0,#0x20]
;;;1921   }
000008  4770              BX       lr
;;;1922   
                          ENDP


                          AREA ||i.URT_ClearRxHoldFlag||, CODE, READONLY, ALIGN=1

                  URT_ClearRxHoldFlag PROC
;;;362     */
;;;363    void URT_ClearRxHoldFlag( URT_Struct* URTX)
000000  2101              MOVS     r1,#1
;;;364    {
;;;365        URTX->STA.W = URT_EVENT_RHF;
000002  6001              STR      r1,[r0,#0]
;;;366    }
000004  4770              BX       lr
;;;367    
                          ENDP


                          AREA ||i.URT_ClearTXData||, CODE, READONLY, ALIGN=1

                  URT_ClearTXData PROC
;;;1893    */
;;;1894   void URT_ClearTXData( URT_Struct* URTX)
000000  6a01              LDR      r1,[r0,#0x20]
;;;1895   {
;;;1896       URTX->CR4.W = URTX->CR4.W | URT_CR4_TDAT_CLR_mask_w;
000002  2280              MOVS     r2,#0x80
000004  4311              ORRS     r1,r1,r2
000006  6201              STR      r1,[r0,#0x20]
;;;1897   }
000008  4770              BX       lr
;;;1898   
                          ENDP


                          AREA ||i.URT_Cmd||, CODE, READONLY, ALIGN=1

                  URT_Cmd PROC
;;;832     */
;;;833    void URT_Cmd( URT_Struct*  URTX, FunctionalState URT_EN) 
000000  6902              LDR      r2,[r0,#0x10]
;;;834    {
;;;835        URTX->CR0.W = ((URTX->CR0.W & (~URT_CR0_EN_mask_w)) | (URT_CR0_EN_mask_w * URT_EN));
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  430a              ORRS     r2,r2,r1
000008  6102              STR      r2,[r0,#0x10]
;;;836    }
00000a  4770              BX       lr
;;;837    
                          ENDP


                          AREA ||i.URT_CtrlBROSignalStatus_SW||, CODE, READONLY, ALIGN=1

                  URT_CtrlBROSignalStatus_SW PROC
;;;1170    */
;;;1171   void URT_CtrlBROSignalStatus_SW( URT_Struct* URTX , BitAction URT_BRO_STA)
000000  6882              LDR      r2,[r0,#8]
;;;1172   {    
;;;1173       URTX->CLK.W = (( (URTX->CLK.W & (~URT_CLK_BRO_STA_mask_w)) | URT_CLK_BRO_LCK_mask_w) | ( URT_CLK_BRO_STA_mask_w * URT_BRO_STA));
000002  2301              MOVS     r3,#1
000004  069b              LSLS     r3,r3,#26
000006  439a              BICS     r2,r2,r3
000008  005b              LSLS     r3,r3,#1
00000a  431a              ORRS     r2,r2,r3
00000c  068b              LSLS     r3,r1,#26
00000e  431a              ORRS     r2,r2,r3
000010  6082              STR      r2,[r0,#8]
;;;1174   }
000012  4770              BX       lr
;;;1175   
                          ENDP


                          AREA ||i.URT_CtrlCLKSignalStatus_SW||, CODE, READONLY, ALIGN=1

                  URT_CtrlCLKSignalStatus_SW PROC
;;;1196    */
;;;1197   void URT_CtrlCLKSignalStatus_SW( URT_Struct* URTX , BitAction URT_CKO_STA)
000000  6882              LDR      r2,[r0,#8]
;;;1198   { 
;;;1199       URTX->CLK.W = ((( URTX->CLK.W & (~URT_CLK_CKO_STA_mask_w)) | URT_CLK_CKO_LCK_mask_w) | (URT_CLK_CKO_STA_mask_w * URT_CKO_STA));
000002  2301              MOVS     r3,#1
000004  071b              LSLS     r3,r3,#28
000006  439a              BICS     r2,r2,r3
000008  005b              LSLS     r3,r3,#1
00000a  431a              ORRS     r2,r2,r3
00000c  070b              LSLS     r3,r1,#28
00000e  431a              ORRS     r2,r2,r3
000010  6082              STR      r2,[r0,#8]
;;;1200   }
000012  4770              BX       lr
;;;1201   
                          ENDP


                          AREA ||i.URT_CtrlNSS_SW||, CODE, READONLY, ALIGN=1

                  URT_CtrlNSS_SW PROC
;;;2673    */
;;;2674   void URT_CtrlNSS_SW( URT_Struct* URTX , BitAction URT_NSS_SWO)
000000  6982              LDR      r2,[r0,#0x18]
;;;2675   { 
;;;2676       URTX->CR2.W = (( URTX->CR2.W & (~URT_CR2_NSS_SWO_mask_w)) | ( URT_CR2_NSS_SWO_mask_w * URT_NSS_SWO));
000002  2301              MOVS     r3,#1
000004  041b              LSLS     r3,r3,#16
000006  439a              BICS     r2,r2,r3
000008  040b              LSLS     r3,r1,#16
00000a  431a              ORRS     r2,r2,r3
00000c  6182              STR      r2,[r0,#0x18]
;;;2677   }
00000e  4770              BX       lr
;;;2678   
                          ENDP


                          AREA ||i.URT_CtrlRTS_SW||, CODE, READONLY, ALIGN=1

                  URT_CtrlRTS_SW PROC
;;;2231    */
;;;2232   void URT_CtrlRTS_SW( URT_Struct* URTX , BitAction URT_RTS_OUT)
000000  6d82              LDR      r2,[r0,#0x58]
;;;2233   {   
;;;2234       URTX->HFC.W = (( URTX->HFC.W & (~URT_HFC_RTS_OUT_mask_w)) | ( URT_HFC_RTS_OUT_mask_w * URT_RTS_OUT)); 
000002  2310              MOVS     r3,#0x10
000004  439a              BICS     r2,r2,r3
000006  010b              LSLS     r3,r1,#4
000008  431a              ORRS     r2,r2,r3
00000a  6582              STR      r2,[r0,#0x58]
;;;2235   }
00000c  4770              BX       lr
;;;2236   
                          ENDP


                          AREA ||i.URT_CtrlTMOSignalStatus_SW||, CODE, READONLY, ALIGN=1

                  URT_CtrlTMOSignalStatus_SW PROC
;;;1705    */
;;;1706   void URT_CtrlTMOSignalStatus_SW( URT_Struct* URTX , BitAction URT_TMO_STA) 
000000  6c02              LDR      r2,[r0,#0x40]
;;;1707   {
;;;1708   
;;;1709   
;;;1710       URTX->TMOUT.W = ((URTX->TMOUT.W & (~URT_TMOUT_TMO_STA_mask_w)) | URT_TMOUT_TMO_LCK_mask_w) | (URT_TMOUT_TMO_STA_mask_w * URT_TMO_STA);
000002  2301              MOVS     r3,#1
000004  039b              LSLS     r3,r3,#14
000006  439a              BICS     r2,r2,r3
000008  005b              LSLS     r3,r3,#1
00000a  431a              ORRS     r2,r2,r3
00000c  038b              LSLS     r3,r1,#14
00000e  431a              ORRS     r2,r2,r3
000010  6402              STR      r2,[r0,#0x40]
;;;1711   
;;;1712   }
000012  4770              BX       lr
;;;1713   
                          ENDP


                          AREA ||i.URT_DEGuardTime_Select||, CODE, READONLY, ALIGN=1

                  URT_DEGuardTime_Select PROC
;;;2398    */
;;;2399   void URT_DEGuardTime_Select( URT_Struct* URTX , URT_DEGT_TypeDef URT_DE_GT)
000000  6902              LDR      r2,[r0,#0x10]
;;;2400   {
;;;2401       URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_DE_GT_mask_w)) | URT_DE_GT);
000002  2303              MOVS     r3,#3
000004  039b              LSLS     r3,r3,#14
000006  439a              BICS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  6102              STR      r2,[r0,#0x10]
;;;2402   }
00000c  4770              BX       lr
;;;2403   
                          ENDP


                          AREA ||i.URT_DEInverse_Cmd||, CODE, READONLY, ALIGN=1

                  URT_DEInverse_Cmd PROC
;;;2369    */
;;;2370   void URT_DEInverse_Cmd( URT_Struct* URTX , FunctionalState URT_DE_INV)
000000  6902              LDR      r2,[r0,#0x10]
;;;2371   {    
;;;2372       URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_DE_INV_mask_w)) | (URT_CR0_DE_INV_mask_w * URT_DE_INV));
000002  2301              MOVS     r3,#1
000004  035b              LSLS     r3,r3,#13
000006  439a              BICS     r2,r2,r3
000008  034b              LSLS     r3,r1,#13
00000a  431a              ORRS     r2,r2,r3
00000c  6102              STR      r2,[r0,#0x10]
;;;2373   }
00000e  4770              BX       lr
;;;2374   
                          ENDP


                          AREA ||i.URT_DE_Cmd||, CODE, READONLY, ALIGN=1

                  URT_DE_Cmd PROC
;;;2343    */
;;;2344   void URT_DE_Cmd( URT_Struct* URTX , FunctionalState URT_DE_EN)
000000  6902              LDR      r2,[r0,#0x10]
;;;2345   {    
;;;2346       URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_DE_EN_mask_w)) | (URT_CR0_DE_EN_mask_w * URT_DE_EN));
000002  2301              MOVS     r3,#1
000004  031b              LSLS     r3,r3,#12
000006  439a              BICS     r2,r2,r3
000008  030b              LSLS     r3,r1,#12
00000a  431a              ORRS     r2,r2,r3
00000c  6102              STR      r2,[r0,#0x10]
;;;2347   }
00000e  4770              BX       lr
;;;2348   
                          ENDP


                          AREA ||i.URT_DataCharacter_Config||, CODE, READONLY, ALIGN=1

                  URT_DataCharacter_Config PROC
;;;542     */
;;;543    void URT_DataCharacter_Config( URT_Struct* URTX, URT_Data_TypeDef* URT_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;544    {
;;;545        uint8_t tmp;
;;;546        
;;;547        URTX->CR1.B[2] = (URT_InitStruct->URT_TX_DataLength | URT_InitStruct->URT_TX_DataOrder | URT_InitStruct->URT_TX_Parity | URT_InitStruct->URT_TX_StopBits);
000002  780b              LDRB     r3,[r1,#0]
000004  788c              LDRB     r4,[r1,#2]
000006  4323              ORRS     r3,r3,r4
000008  798c              LDRB     r4,[r1,#6]
00000a  4323              ORRS     r3,r3,r4
00000c  790c              LDRB     r4,[r1,#4]
00000e  4323              ORRS     r3,r3,r4
000010  7583              STRB     r3,[r0,#0x16]
;;;548        URTX->CR1.B[0] = (URT_InitStruct->URT_RX_DataLength | URT_InitStruct->URT_RX_DataOrder | URT_InitStruct->URT_RX_Parity | URT_InitStruct->URT_RX_StopBits);
000012  784b              LDRB     r3,[r1,#1]
000014  78cc              LDRB     r4,[r1,#3]
000016  4323              ORRS     r3,r3,r4
000018  79cc              LDRB     r4,[r1,#7]
00001a  4323              ORRS     r3,r3,r4
00001c  794c              LDRB     r4,[r1,#5]
00001e  4323              ORRS     r3,r3,r4
000020  7503              STRB     r3,[r0,#0x14]
;;;549    
;;;550        tmp = URTX->CR4.B[0] & (~(URT_CR4_RDAT_INV_mask_b0|URT_CR4_TDAT_INV_mask_b0));
000022  2320              MOVS     r3,#0x20
000024  5c1b              LDRB     r3,[r3,r0]
000026  2430              MOVS     r4,#0x30
000028  43a3              BICS     r3,r3,r4
00002a  461a              MOV      r2,r3
;;;551        tmp = tmp | ((URT_InitStruct->URT_RX_DataInverse<<4 )| ( URT_InitStruct->URT_TX_DataInverse << 5));
00002c  7a4b              LDRB     r3,[r1,#9]
00002e  011b              LSLS     r3,r3,#4
000030  7a0c              LDRB     r4,[r1,#8]
000032  0164              LSLS     r4,r4,#5
000034  4323              ORRS     r3,r3,r4
000036  4313              ORRS     r3,r3,r2
000038  b2da              UXTB     r2,r3
;;;552        URTX->CR4.B[0] = tmp;
00003a  2320              MOVS     r3,#0x20
00003c  541a              STRB     r2,[r3,r0]
;;;553        
;;;554        
;;;555    }
00003e  bd10              POP      {r4,pc}
;;;556    
                          ENDP


                          AREA ||i.URT_DataLine_Select||, CODE, READONLY, ALIGN=1

                  URT_DataLine_Select PROC
;;;614     */
;;;615    void URT_DataLine_Select( URT_Struct* URTX, URT_DataLine_TypeDef URT_DAT_LINE)
000000  6902              LDR      r2,[r0,#0x10]
;;;616    {   
;;;617        URTX->CR0.W = ((URTX->CR0.W & (~URT_CR0_DAT_LINE_mask_w)) | URT_DAT_LINE);
000002  2308              MOVS     r3,#8
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  6102              STR      r2,[r0,#0x10]
;;;618    }
00000a  4770              BX       lr
;;;619    
                          ENDP


                          AREA ||i.URT_ExtraBreakBit_Select||, CODE, READONLY, ALIGN=1

                  URT_ExtraBreakBit_Select PROC
;;;3020    */
;;;3021   void URT_ExtraBreakBit_Select( URT_Struct* URTX , URT_ExtraBK_TypeDef URT_DET_BK)
000000  69c2              LDR      r2,[r0,#0x1c]
;;;3022   {
;;;3023       URTX->CR3.W = ((URTX->CR3.W & (~URT_CR3_DET_BK_mask_w)) | URT_DET_BK);
000002  2310              MOVS     r3,#0x10
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  61c2              STR      r2,[r0,#0x1c]
;;;3024   }
00000a  4770              BX       lr
;;;3025   
                          ENDP


                          AREA ||i.URT_GetBaudRateGeneratorCount||, CODE, READONLY, ALIGN=1

                  URT_GetBaudRateGeneratorCount PROC
;;;1064    */
;;;1065   uint8_t URT_GetBaudRateGeneratorCount( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;1066   {
;;;1067       return(URTX->CNT.B[0]);
000002  2028              MOVS     r0,#0x28
000004  5c40              LDRB     r0,[r0,r1]
;;;1068   }
000006  4770              BX       lr
;;;1069   
                          ENDP


                          AREA ||i.URT_GetBaudRateGeneratorCountReload||, CODE, READONLY, ALIGN=1

                  URT_GetBaudRateGeneratorCountReload PROC
;;;1017    */
;;;1018   uint8_t URT_GetBaudRateGeneratorCountReload( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;1019   {
;;;1020       return(URTX->RLR.B[0]);
000002  2024              MOVS     r0,#0x24
000004  5c40              LDRB     r0,[r0,r1]
;;;1021   }
000006  4770              BX       lr
;;;1022   
                          ENDP


                          AREA ||i.URT_GetBaudRateGeneratorPre||, CODE, READONLY, ALIGN=1

                  URT_GetBaudRateGeneratorPre PROC
;;;1041    */
;;;1042   uint8_t URT_GetBaudRateGeneratorPre( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;1043   {
;;;1044       return(URTX->CNT.B[1]);
000002  2029              MOVS     r0,#0x29
000004  5c40              LDRB     r0,[r0,r1]
;;;1045   }
000006  4770              BX       lr
;;;1046   
                          ENDP


                          AREA ||i.URT_GetBaudRateGeneratorPreReload||, CODE, READONLY, ALIGN=1

                  URT_GetBaudRateGeneratorPreReload PROC
;;;994     */
;;;995    uint8_t URT_GetBaudRateGeneratorPreReload( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;996    {
;;;997        return(URTX->RLR.B[1]);
000002  2025              MOVS     r0,#0x25
000004  5c40              LDRB     r0,[r0,r1]
;;;998    }
000006  4770              BX       lr
;;;999    
                          ENDP


                          AREA ||i.URT_GetBreakBusyFlag||, CODE, READONLY, ALIGN=1

                  URT_GetBreakBusyFlag PROC
;;;412     */
;;;413    DRV_Return URT_GetBreakBusyFlag( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;414    {
;;;415        if((URTX->STA2.W & URT_EVENT_BKBF)==0)
000002  68c8              LDR      r0,[r1,#0xc]
000004  2240              MOVS     r2,#0x40
000006  4010              ANDS     r0,r0,r2
000008  2800              CMP      r0,#0
00000a  d100              BNE      |L40.14|
                  |L40.12|
;;;416        {
;;;417            return(DRV_UnHappened);
;;;418        }
;;;419        return(DRV_Happened);   
;;;420        
;;;421    }
00000c  4770              BX       lr
                  |L40.14|
00000e  2001              MOVS     r0,#1                 ;419
000010  e7fc              B        |L40.12|
;;;422    
                          ENDP


                          AREA ||i.URT_GetCTSLineStatus||, CODE, READONLY, ALIGN=1

                  URT_GetCTSLineStatus PROC
;;;2283    */
;;;2284   DRV_Return URT_GetCTSLineStatus( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;2285   {
;;;2286       uint32_t tmp;
;;;2287       
;;;2288       tmp = URTX->STA2.W;
000002  68ca              LDR      r2,[r1,#0xc]
;;;2289       if( (tmp & URT_STA2_CTS_mask_w) == 0)
000004  2001              MOVS     r0,#1
000006  0300              LSLS     r0,r0,#12
000008  4010              ANDS     r0,r0,r2
00000a  2800              CMP      r0,#0
00000c  d100              BNE      |L41.16|
                  |L41.14|
;;;2290       {
;;;2291           return(DRV_Logic0);
;;;2292       }
;;;2293       return(DRV_Logic1);
;;;2294   }
00000e  4770              BX       lr
                  |L41.16|
000010  2001              MOVS     r0,#1                 ;2293
000012  e7fc              B        |L41.14|
;;;2295   
                          ENDP


                          AREA ||i.URT_GetCaptureData||, CODE, READONLY, ALIGN=1

                  URT_GetCaptureData PROC
;;;2042    */
;;;2043   uint8_t URT_GetCaptureData( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;2044   {
;;;2045       return(URTX->RCAP.B[0]);
000002  202c              MOVS     r0,#0x2c
000004  5c40              LDRB     r0,[r0,r1]
;;;2046   }
000006  4770              BX       lr
;;;2047   
                          ENDP


                          AREA ||i.URT_GetCaptureStatusBit||, CODE, READONLY, ALIGN=1

                  URT_GetCaptureStatusBit PROC
;;;2069    */
;;;2070   uint8_t URT_GetCaptureStatusBit( URT_Struct* URTX , URT_RCAP_TypeDef URT_RCAP)
000000  4602              MOV      r2,r0
;;;2071   {
;;;2072       if((URTX->RCAP.W & URT_RCAP)==0)
000002  6ad0              LDR      r0,[r2,#0x2c]
000004  4008              ANDS     r0,r0,r1
000006  2800              CMP      r0,#0
000008  d100              BNE      |L43.12|
                  |L43.10|
;;;2073       {
;;;2074           return(0); 
;;;2075       }
;;;2076       return(1);
;;;2077   }
00000a  4770              BX       lr
                  |L43.12|
00000c  2001              MOVS     r0,#1                 ;2076
00000e  e7fc              B        |L43.10|
;;;2078   
                          ENDP


                          AREA ||i.URT_GetITAllFlagStatus||, CODE, READONLY, ALIGN=1

                  URT_GetITAllFlagStatus PROC
;;;165     */
;;;166    uint32_t URT_GetITAllFlagStatus( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;167    {
;;;168        uint32_t tmp;
;;;169        
;;;170        tmp = URTX->STA.W;
000002  6808              LDR      r0,[r1,#0]
;;;171        tmp = tmp & (~(URT_EVENT_RXDF | URT_EVENT_RHF));
000004  2321              MOVS     r3,#0x21
000006  4602              MOV      r2,r0
000008  439a              BICS     r2,r2,r3
00000a  4610              MOV      r0,r2
;;;172        
;;;173        
;;;174        return(tmp);
;;;175    }
00000c  4770              BX       lr
;;;176    
                          ENDP


                          AREA ||i.URT_GetITSingleFlagStatus||, CODE, READONLY, ALIGN=2

                  URT_GetITSingleFlagStatus PROC
;;;219     */
;;;220    DRV_Return URT_GetITSingleFlagStatus( URT_Struct* URTX , uint32_t URT_ITFlag)
000000  4602              MOV      r2,r0
;;;221    {
;;;222       
;;;223        if((URT_ITFlag & (~URT_IT_Mask))!=0)              /*!< URT_ITFlag value over range */
000002  4806              LDR      r0,|L45.28|
000004  4008              ANDS     r0,r0,r1
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L45.14|
;;;224        {
;;;225            return(DRV_UnHappened);
00000a  2000              MOVS     r0,#0
                  |L45.12|
;;;226        }
;;;227        if((URTX->STA.W & URT_ITFlag)==0)
;;;228        {
;;;229            return(DRV_UnHappened);
;;;230        }
;;;231        return(DRV_Happened);    
;;;232    }
00000c  4770              BX       lr
                  |L45.14|
00000e  6810              LDR      r0,[r2,#0]            ;227
000010  4008              ANDS     r0,r0,r1              ;227
000012  2800              CMP      r0,#0                 ;227
000014  d100              BNE      |L45.24|
000016  e7f9              B        |L45.12|
                  |L45.24|
000018  2001              MOVS     r0,#1                 ;231
00001a  e7f7              B        |L45.12|
;;;233    
                          ENDP

                  |L45.28|
                          DCD      0x8408c321

                          AREA ||i.URT_GetITStatus||, CODE, READONLY, ALIGN=1

                  URT_GetITStatus PROC
;;;114     */
;;;115    uint32_t URT_GetITStatus(URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;116    {
;;;117        return(URTX->INT.W);
000002  6848              LDR      r0,[r1,#4]
;;;118    }
000004  4770              BX       lr
;;;119    
                          ENDP


                          AREA ||i.URT_GetIrDaBusyFlag||, CODE, READONLY, ALIGN=1

                  URT_GetIrDaBusyFlag PROC
;;;385     */
;;;386    DRV_Return URT_GetIrDaBusyFlag( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;387    {
;;;388        if((URTX->STA2.W & URT_EVENT_IRBUSYF)==0)
000002  68c8              LDR      r0,[r1,#0xc]
000004  2280              MOVS     r2,#0x80
000006  4010              ANDS     r0,r0,r2
000008  2800              CMP      r0,#0
00000a  d100              BNE      |L47.14|
                  |L47.12|
;;;389        {
;;;390            return(DRV_UnHappened);
;;;391        }
;;;392        return(DRV_Happened);
;;;393    }
00000c  4770              BX       lr
                  |L47.14|
00000e  2001              MOVS     r0,#1                 ;392
000010  e7fc              B        |L47.12|
;;;394    
                          ENDP


                          AREA ||i.URT_GetRXData||, CODE, READONLY, ALIGN=1

                  URT_GetRXData PROC
;;;2019    */
;;;2020   uint32_t URT_GetRXData( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;2021   {
;;;2022       return(URTX->RDAT.W);
000002  6b08              LDR      r0,[r1,#0x30]
;;;2023   }
000004  4770              BX       lr
;;;2024   
                          ENDP


                          AREA ||i.URT_GetRXDataRegLevel||, CODE, READONLY, ALIGN=1

                  URT_GetRXDataRegLevel PROC
;;;1995    */
;;;1996   uint8_t URT_GetRXDataRegLevel( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;1997   {
;;;1998       return(URTX->CR4.MBIT.RNUM);
000002  2021              MOVS     r0,#0x21
000004  5c40              LDRB     r0,[r0,r1]
000006  0740              LSLS     r0,r0,#29
000008  0f40              LSRS     r0,r0,#29
;;;1999   }
00000a  4770              BX       lr
;;;2000   
                          ENDP


                          AREA ||i.URT_GetRXShadowBufferLevel||, CODE, READONLY, ALIGN=1

                  URT_GetRXShadowBufferLevel PROC
;;;1869    */
;;;1870   uint8_t URT_GetRXShadowBufferLevel( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;1871   {
;;;1872       return(URTX->STA2.MBIT.RX_LVL);
000002  7bc8              LDRB     r0,[r1,#0xf]
000004  0740              LSLS     r0,r0,#29
000006  0f40              LSRS     r0,r0,#29
;;;1873   }
000008  4770              BX       lr
;;;1874   
                          ENDP


                          AREA ||i.URT_GetRXShiftBufferData||, CODE, READONLY, ALIGN=1

                  URT_GetRXShiftBufferData PROC
;;;2149    */
;;;2150   uint8_t URT_GetRXShiftBufferData( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;2151   {
;;;2152       return(URTX->SBUF.B[0]);    
000002  203c              MOVS     r0,#0x3c
000004  5c40              LDRB     r0,[r0,r1]
;;;2153   }
000006  4770              BX       lr
;;;2154   
                          ENDP


                          AREA ||i.URT_GetRXShiftBufferStatusBit||, CODE, READONLY, ALIGN=1

                  URT_GetRXShiftBufferStatusBit PROC
;;;2099    */
;;;2100   uint8_t URT_GetRXShiftBufferStatusBit( URT_Struct* URTX , URT_SBUFBit_TypeDef URT_SBF_StatusBit)
000000  4602              MOV      r2,r0
;;;2101   {
;;;2102       if((URTX->STA2.W & URT_SBF_StatusBit)==0)
000002  68d0              LDR      r0,[r2,#0xc]
000004  4008              ANDS     r0,r0,r1
000006  2800              CMP      r0,#0
000008  d100              BNE      |L52.12|
                  |L52.10|
;;;2103       {
;;;2104           return(0);
;;;2105       }
;;;2106       return(1);
;;;2107   }
00000a  4770              BX       lr
                  |L52.12|
00000c  2001              MOVS     r0,#1                 ;2106
00000e  e7fc              B        |L52.10|
;;;2108   
                          ENDP


                          AREA ||i.URT_GetRxBusyFlag||, CODE, READONLY, ALIGN=1

                  URT_GetRxBusyFlag PROC
;;;441     */
;;;442    DRV_Return URT_GetRxBusyFlag( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;443    {
;;;444        if((URTX->STA2.W & URT_EVENT_RXBUSYF) ==0)
000002  68c8              LDR      r0,[r1,#0xc]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
000008  2800              CMP      r0,#0
00000a  d100              BNE      |L53.14|
                  |L53.12|
;;;445        {
;;;446            return(DRV_UnHappened);
;;;447        }
;;;448        return(DRV_Happened);
;;;449    }
00000c  4770              BX       lr
                  |L53.14|
00000e  2001              MOVS     r0,#1                 ;448
000010  e7fc              B        |L53.12|
;;;450    
                          ENDP


                          AREA ||i.URT_GetRxDifferentFlag||, CODE, READONLY, ALIGN=1

                  URT_GetRxDifferentFlag PROC
;;;306     */
;;;307    DRV_Return URT_GetRxDifferentFlag( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;308    {
;;;309        if((URTX->STA.W & URT_EVENT_RXDF)==0)
000002  6808              LDR      r0,[r1,#0]
000004  2220              MOVS     r2,#0x20
000006  4010              ANDS     r0,r0,r2
000008  2800              CMP      r0,#0
00000a  d100              BNE      |L54.14|
                  |L54.12|
;;;310        {
;;;311            return(DRV_UnHappened);
;;;312        }
;;;313        return(DRV_Happened);
;;;314    }
00000c  4770              BX       lr
                  |L54.14|
00000e  2001              MOVS     r0,#1                 ;313
000010  e7fc              B        |L54.12|
;;;315    
                          ENDP


                          AREA ||i.URT_GetRxHoldFlag||, CODE, READONLY, ALIGN=1

                  URT_GetRxHoldFlag PROC
;;;334     */
;;;335    DRV_Return URT_GetRxHoldFlag( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;336    {
;;;337        if((URTX->STA.W & URT_EVENT_RHF)==0)
000002  6808              LDR      r0,[r1,#0]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
000008  2800              CMP      r0,#0
00000a  d100              BNE      |L55.14|
                  |L55.12|
;;;338        {
;;;339            return(DRV_UnHappened);
;;;340        }
;;;341        return(DRV_Happened);
;;;342    }
00000c  4770              BX       lr
                  |L55.14|
00000e  2001              MOVS     r0,#1                 ;341
000010  e7fc              B        |L55.12|
;;;343    
                          ENDP


                          AREA ||i.URT_GetRxNoiseFlag||, CODE, READONLY, ALIGN=1

                  URT_GetRxNoiseFlag PROC
;;;468     */
;;;469    DRV_Return URT_GetRxNoiseFlag( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;470    {
;;;471        if((URTX->STA2.W & URT_EVENT_NCF)==0)
000002  68c8              LDR      r0,[r1,#0xc]
000004  2220              MOVS     r2,#0x20
000006  4010              ANDS     r0,r0,r2
000008  2800              CMP      r0,#0
00000a  d100              BNE      |L56.14|
                  |L56.12|
;;;472        {
;;;473            return(DRV_UnHappened);
;;;474        }
;;;475        return(DRV_Happened);
;;;476        
;;;477        
;;;478    }
00000c  4770              BX       lr
                  |L56.14|
00000e  2001              MOVS     r0,#1                 ;475
000010  e7fc              B        |L56.12|
;;;479    ///@}
                          ENDP


                          AREA ||i.URT_GetTXDataRegLevel||, CODE, READONLY, ALIGN=1

                  URT_GetTXDataRegLevel PROC
;;;1942    */
;;;1943   uint8_t URT_GetTXDataRegLevel( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;1944   {
;;;1945       return(URTX->CR4.MBIT.TNUM);
000002  2021              MOVS     r0,#0x21
000004  5c40              LDRB     r0,[r0,r1]
000006  0640              LSLS     r0,r0,#25
000008  0f40              LSRS     r0,r0,#29
;;;1946   }
00000a  4770              BX       lr
;;;1947   
                          ENDP


                          AREA ||i.URT_GetTXShadowBufferLevel||, CODE, READONLY, ALIGN=1

                  URT_GetTXShadowBufferLevel PROC
;;;1846    */
;;;1847   uint8_t URT_GetTXShadowBufferLevel( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;1848   {
;;;1849       return(URTX->STA2.MBIT.TX_LVL);
000002  7bc8              LDRB     r0,[r1,#0xf]
000004  0640              LSLS     r0,r0,#25
000006  0f40              LSRS     r0,r0,#29
;;;1850   }
000008  4770              BX       lr
;;;1851   
                          ENDP


                          AREA ||i.URT_GetTXShiftBufferData||, CODE, READONLY, ALIGN=1

                  URT_GetTXShiftBufferData PROC
;;;2126    */
;;;2127   uint8_t URT_GetTXShiftBufferData( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;2128   {
;;;2129       return(URTX->SBUF.B[1]);
000002  203d              MOVS     r0,#0x3d
000004  5c40              LDRB     r0,[r0,r1]
;;;2130   }
000006  4770              BX       lr
;;;2131   
                          ENDP


                          AREA ||i.URT_GetTimeoutTimerCounter||, CODE, READONLY, ALIGN=1

                  URT_GetTimeoutTimerCounter PROC
;;;1731    */
;;;1732   uint16_t URT_GetTimeoutTimerCounter( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;1733   {
;;;1734       return(URTX->TMOUT2.H[1]);
000002  2046              MOVS     r0,#0x46
000004  5a40              LDRH     r0,[r0,r1]
;;;1735   }
000006  4770              BX       lr
;;;1736   
                          ENDP


                          AREA ||i.URT_GetTimeoutTimerReload||, CODE, READONLY, ALIGN=1

                  URT_GetTimeoutTimerReload PROC
;;;1780    */
;;;1781   uint16_t URT_GetTimeoutTimerReload( URT_Struct* URTX)
000000  4601              MOV      r1,r0
;;;1782   {
;;;1783       return(URTX->TMOUT2.H[0]);
000002  2044              MOVS     r0,#0x44
000004  5a40              LDRH     r0,[r0,r1]
;;;1784   }
000006  4770              BX       lr
;;;1785   
                          ENDP


                          AREA ||i.URT_GlobalAddress_Cmd||, CODE, READONLY, ALIGN=1

                  URT_GlobalAddress_Cmd PROC
;;;2845    */
;;;2846   void URT_GlobalAddress_Cmd( URT_Struct* URTX , FunctionalState URT_GSA_EN)
000000  6902              LDR      r2,[r0,#0x10]
;;;2847   {
;;;2848       URTX->CR0.W = (URTX->CR0.W & (~URT_CR0_GSA_EN_mask_w)) | (URT_CR0_GSA_EN_mask_w*URT_GSA_EN);
000002  2380              MOVS     r3,#0x80
000004  439a              BICS     r2,r2,r3
000006  01cb              LSLS     r3,r1,#7
000008  431a              ORRS     r2,r2,r3
00000a  6102              STR      r2,[r0,#0x10]
;;;2849   }
00000c  4770              BX       lr
;;;2850   /**
                          ENDP


                          AREA ||i.URT_HalfDuplexMode_Cmd||, CODE, READONLY, ALIGN=1

                  URT_HalfDuplexMode_Cmd PROC
;;;640     */
;;;641    void URT_HalfDuplexMode_Cmd( URT_Struct* URTX, FunctionalState URT_HDX_EN)
000000  6902              LDR      r2,[r0,#0x10]
;;;642    {
;;;643     
;;;644        URTX->CR0.W = ((URTX->CR0.W & (~URT_CR0_HDX_EN_mask_w)) | ( URT_CR0_HDX_EN_mask_w * URT_HDX_EN));
000002  2304              MOVS     r3,#4
000004  439a              BICS     r2,r2,r3
000006  008b              LSLS     r3,r1,#2
000008  431a              ORRS     r2,r2,r3
00000a  6102              STR      r2,[r0,#0x10]
;;;645    }
00000c  4770              BX       lr
;;;646    
                          ENDP


                          AREA ||i.URT_ITEA_Cmd||, CODE, READONLY, ALIGN=1

                  URT_ITEA_Cmd PROC
;;;141     */
;;;142    void URT_ITEA_Cmd( URT_Struct* URTX , FunctionalState URT_ITEA_State)
000000  6842              LDR      r2,[r0,#4]
;;;143    {
;;;144        URTX->INT.W =  ((URTX->INT.W & (~URT_INT_IEA_mask_w)) | (URT_INT_IEA_mask_w * URT_ITEA_State));
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  430a              ORRS     r2,r2,r1
000008  6042              STR      r2,[r0,#4]
;;;145    }
00000a  4770              BX       lr
;;;146    
                          ENDP


                          AREA ||i.URT_IT_Config||, CODE, READONLY, ALIGN=1

                  URT_IT_Config PROC
;;;89      */
;;;90     void URT_IT_Config( URT_Struct* URTX , uint32_t URT_IT, FunctionalState URT_IT_State)
000000  b510              PUSH     {r4,lr}
;;;91     {
;;;92     
;;;93         URTX->INT.W = (( URTX->INT.W & (~URT_IT) ) | ( URT_IT * URT_IT_State));
000002  6843              LDR      r3,[r0,#4]
000004  438b              BICS     r3,r3,r1
000006  460c              MOV      r4,r1
000008  4354              MULS     r4,r2,r4
00000a  4323              ORRS     r3,r3,r4
00000c  6043              STR      r3,[r0,#4]
;;;94     }
00000e  bd10              POP      {r4,pc}
;;;95     
                          ENDP


                          AREA ||i.URT_IdleDetect_Select||, CODE, READONLY, ALIGN=1

                  URT_IdleDetect_Select PROC
;;;1493    */
;;;1494   void URT_IdleDetect_Select( URT_Struct* URTX , uint8_t URT_DET_IDLE)
000000  7741              STRB     r1,[r0,#0x1d]
;;;1495   {
;;;1496       URTX->CR3.B[1] = URT_DET_IDLE;
;;;1497   }
000002  4770              BX       lr
;;;1498   
                          ENDP


                          AREA ||i.URT_IdleTimeoutDetect_Config||, CODE, READONLY, ALIGN=1

                  URT_IdleTimeoutDetect_Config PROC
;;;1529    */
;;;1530   void URT_IdleTimeoutDetect_Config( URT_Struct* URTX , FunctionalState URT_IDTMO_EN , uint16_t URT_IDTMO_TH)
000000  b510              PUSH     {r4,lr}
;;;1531   { 
;;;1532       if(URT_IDTMO_EN == DISABLE)
000002  2900              CMP      r1,#0
000004  d104              BNE      |L67.16|
;;;1533       {
;;;1534           URTX->TMOUT.W = URTX->TMOUT.W & (~URT_TMOUT_IDTMO_EN_mask_w);
000006  6c03              LDR      r3,[r0,#0x40]
000008  2410              MOVS     r4,#0x10
00000a  43a3              BICS     r3,r3,r4
00000c  6403              STR      r3,[r0,#0x40]
                  |L67.14|
;;;1535           return;
;;;1536       }
;;;1537       URTX->TMOUT2.H[0] = URT_IDTMO_TH;
;;;1538       URTX->TMOUT.W = URTX->TMOUT.W | (URT_TMOUT_IDTMO_EN_mask_w);
;;;1539   }
00000e  bd10              POP      {r4,pc}
                  |L67.16|
000010  2344              MOVS     r3,#0x44              ;1537
000012  521a              STRH     r2,[r3,r0]            ;1537
000014  6c03              LDR      r3,[r0,#0x40]         ;1538
000016  2410              MOVS     r4,#0x10              ;1538
000018  4323              ORRS     r3,r3,r4              ;1538
00001a  6403              STR      r3,[r0,#0x40]         ;1538
00001c  bf00              NOP      
00001e  e7f6              B        |L67.14|
;;;1540   
                          ENDP


                          AREA ||i.URT_IdlehandleMode_Select||, CODE, READONLY, ALIGN=1

                  URT_IdlehandleMode_Select PROC
;;;2425    */
;;;2426   void URT_IdlehandleMode_Select( URT_Struct* URTX , URT_IDLEMOde_TypeDef URT_IDL_MDS)
000000  6902              LDR      r2,[r0,#0x10]
;;;2427   {
;;;2428   
;;;2429       URTX->CR0.W = ((URTX->CR0.W & (~URT_CR0_IDL_MDS_mask_w)) | URT_IDL_MDS);
000002  2301              MOVS     r3,#1
000004  051b              LSLS     r3,r3,#20
000006  439a              BICS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  6102              STR      r2,[r0,#0x10]
;;;2430   }
00000c  4770              BX       lr
;;;2431   
                          ENDP


                          AREA ||i.URT_IrDA_Cmd||, CODE, READONLY, ALIGN=1

                  URT_IrDA_Cmd PROC
;;;3313    */
;;;3314   void URT_IrDA_Cmd( URT_Struct* URTX , FunctionalState URT_IR_EN)
000000  6d42              LDR      r2,[r0,#0x54]
;;;3315   {
;;;3316       URTX->IRDA.W = (( URTX->IRDA.W & (~URT_IRDA_IR_EN_mask_w )) | ( URT_IRDA_IR_EN_mask_w * URT_IR_EN));
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  430a              ORRS     r2,r2,r1
000008  6542              STR      r2,[r0,#0x54]
;;;3317   }
00000a  4770              BX       lr
;;;3318   
                          ENDP


                          AREA ||i.URT_IrDA_Config||, CODE, READONLY, ALIGN=1

                  URT_IrDA_Config PROC
;;;3283    */
;;;3284   void URT_IrDA_Config( URT_Struct* URTX , URT_IrDA_TypeDef* URT_IRDA)
000000  6d42              LDR      r2,[r0,#0x54]
;;;3285   {
;;;3286   
;;;3287       URTX->IRDA.W = ((URTX->IRDA.W & (~(URT_IRDA_IR_PW_mask_w) )) |
000002  230f              MOVS     r3,#0xf
000004  021b              LSLS     r3,r3,#8
000006  439a              BICS     r2,r2,r3
000008  780b              LDRB     r3,[r1,#0]
00000a  021b              LSLS     r3,r3,#8
00000c  431a              ORRS     r2,r2,r3
00000e  6542              STR      r2,[r0,#0x54]
;;;3288                      ((URT_IRDA->URT_IrDaPulseWidth <<8) ));
;;;3289       
;;;3290   }
000010  4770              BX       lr
;;;3291   
                          ENDP


                          AREA ||i.URT_LoopBackMode_Cmd||, CODE, READONLY, ALIGN=1

                  URT_LoopBackMode_Cmd PROC
;;;669     */
;;;670    void URT_LoopBackMode_Cmd( URT_Struct* URTX , FunctionalState URT_LBM_EN)
000000  6902              LDR      r2,[r0,#0x10]
;;;671    {
;;;672         
;;;673        URTX->CR0.W = ((URTX->CR0.W & (~URT_CR0_LBM_EN_mask_w)) | ( URT_CR0_LBM_EN_mask_w * URT_LBM_EN));
000002  2301              MOVS     r3,#1
000004  05db              LSLS     r3,r3,#23
000006  439a              BICS     r2,r2,r3
000008  05cb              LSLS     r3,r1,#23
00000a  431a              ORRS     r2,r2,r3
00000c  6102              STR      r2,[r0,#0x10]
;;;674        
;;;675    }
00000e  4770              BX       lr
;;;676    /**
                          ENDP


                          AREA ||i.URT_Mode_Select||, CODE, READONLY, ALIGN=1

                  URT_Mode_Select PROC
;;;579     */
;;;580    void URT_Mode_Select( URT_Struct* URTX , URT_Mode_TypeDef URT_MDS)
000000  6902              LDR      r2,[r0,#0x10]
;;;581    {    
;;;582        URTX->CR0.W = (URTX->CR0.W & (~URT_CR0_MDS_mask_w) ) | URT_MDS; 
000002  2370              MOVS     r3,#0x70
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  6102              STR      r2,[r0,#0x10]
;;;583        
;;;584        if(URT_MDS == URT_ADR_mode || URT_MDS == URT_IDLE_mode)
00000a  2930              CMP      r1,#0x30
00000c  d001              BEQ      |L72.18|
00000e  2920              CMP      r1,#0x20
000010  d104              BNE      |L72.28|
                  |L72.18|
;;;585        {
;;;586            URTX->MUTE.W = URTX->MUTE.W | URT_MUTE_MUTE_EN_mask_w;
000012  6dc2              LDR      r2,[r0,#0x5c]
000014  2301              MOVS     r3,#1
000016  431a              ORRS     r2,r2,r3
000018  65c2              STR      r2,[r0,#0x5c]
00001a  e003              B        |L72.36|
                  |L72.28|
;;;587        }
;;;588        else
;;;589        {
;;;590            URTX->MUTE.W = URTX->MUTE.W & (~URT_MUTE_MUTE_EN_mask_w);
00001c  6dc2              LDR      r2,[r0,#0x5c]
00001e  0852              LSRS     r2,r2,#1
000020  0052              LSLS     r2,r2,#1
000022  65c2              STR      r2,[r0,#0x5c]
                  |L72.36|
;;;591        }
;;;592    }
000024  4770              BX       lr
;;;593    
                          ENDP


                          AREA ||i.URT_Mute_Cmd||, CODE, READONLY, ALIGN=1

                  URT_Mute_Cmd PROC
;;;3406    */
;;;3407   void URT_Mute_Cmd( URT_Struct* URTX , FunctionalState URT_Mute_EN)
000000  6dc2              LDR      r2,[r0,#0x5c]
;;;3408   {
;;;3409       
;;;3410       URTX->MUTE.W = (( URTX->MUTE.W & (~URT_MUTE_MUTE_EN_mask_w)) | (URT_MUTE_MUTE_EN_mask_w * URT_Mute_EN));
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  430a              ORRS     r2,r2,r1
000008  65c2              STR      r2,[r0,#0x5c]
;;;3411   }
00000a  4770              BX       lr
;;;3412   
                          ENDP


                          AREA ||i.URT_NoiseDataSkip_Cmd||, CODE, READONLY, ALIGN=1

                  URT_NoiseDataSkip_Cmd PROC
;;;802     */
;;;803    void URT_NoiseDataSkip_Cmd(URT_Struct* URTX, FunctionalState URT_NCHAR_DIS)
000000  6902              LDR      r2,[r0,#0x10]
;;;804    {
;;;805        URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_NCHAR_DIS_mask_w)) | (URT_CR0_NCHAR_DIS_mask_w * URT_NCHAR_DIS));
000002  2301              MOVS     r3,#1
000004  059b              LSLS     r3,r3,#22
000006  439a              BICS     r2,r2,r3
000008  058b              LSLS     r3,r1,#22
00000a  431a              ORRS     r2,r2,r3
00000c  6102              STR      r2,[r0,#0x10]
;;;806        
;;;807        
;;;808    }
00000e  4770              BX       lr
;;;809    
                          ENDP


                          AREA ||i.URT_NssInverse_Cmd||, CODE, READONLY, ALIGN=1

                  URT_NssInverse_Cmd PROC
;;;2614    */
;;;2615   void URT_NssInverse_Cmd( URT_Struct* URTX , FunctionalState URT_NSS_INV)
000000  6982              LDR      r2,[r0,#0x18]
;;;2616   {   
;;;2617       #if defined(URT_CR2_NSSI_INV_mask_w)
;;;2618           URTX->CR2.W = (( URTX->CR2.W & (~(URT_CR2_NSS_INV_mask_w | URT_CR2_NSSI_INV_mask_w))) | ( (URT_CR2_NSS_INV_mask_w | URT_CR2_NSSI_INV_mask_w) * URT_NSS_INV));   
;;;2619       #else
;;;2620           URTX->CR2.W = (( URTX->CR2.W & (~(URT_CR2_NSS_INV_mask_w))) | ( (URT_CR2_NSS_INV_mask_w) * URT_NSS_INV)); 
000002  2301              MOVS     r3,#1
000004  065b              LSLS     r3,r3,#25
000006  439a              BICS     r2,r2,r3
000008  064b              LSLS     r3,r1,#25
00000a  431a              ORRS     r2,r2,r3
00000c  6182              STR      r2,[r0,#0x18]
;;;2621       #endif 
;;;2622   }
00000e  4770              BX       lr
;;;2623   
                          ENDP


                          AREA ||i.URT_NssSW_Cmd||, CODE, READONLY, ALIGN=1

                  URT_NssSW_Cmd PROC
;;;2646    */
;;;2647   void URT_NssSW_Cmd( URT_Struct* URTX , FunctionalState URT_NSS_SWEN)
000000  6982              LDR      r2,[r0,#0x18]
;;;2648   {
;;;2649       URTX->CR2.W = (( URTX->CR2.W & (~URT_CR2_NSS_SWEN_mask_w)) | ( URT_CR2_NSS_SWEN_mask_w * URT_NSS_SWEN));
000002  2301              MOVS     r3,#1
000004  069b              LSLS     r3,r3,#26
000006  439a              BICS     r2,r2,r3
000008  068b              LSLS     r3,r1,#26
00000a  431a              ORRS     r2,r2,r3
00000c  6182              STR      r2,[r0,#0x18]
;;;2650   }
00000e  4770              BX       lr
;;;2651   
                          ENDP


                          AREA ||i.URT_RTSInverse_Cmd||, CODE, READONLY, ALIGN=1

                  URT_RTSInverse_Cmd PROC
;;;2203    */
;;;2204   void URT_RTSInverse_Cmd( URT_Struct* URTX, FunctionalState URT_RTS_INV)
000000  6d82              LDR      r2,[r0,#0x58]
;;;2205   {    
;;;2206       URTX->HFC.W = (( URTX->HFC.W & (~URT_HFC_RTS_INV_mask_w)) | (URT_HFC_RTS_INV_mask_w * URT_RTS_INV));
000002  2308              MOVS     r3,#8
000004  439a              BICS     r2,r2,r3
000006  00cb              LSLS     r3,r1,#3
000008  431a              ORRS     r2,r2,r3
00000a  6582              STR      r2,[r0,#0x58]
;;;2207   }
00000c  4770              BX       lr
;;;2208   
                          ENDP


                          AREA ||i.URT_RTS_Cmd||, CODE, READONLY, ALIGN=1

                  URT_RTS_Cmd PROC
;;;2177    */
;;;2178   void URT_RTS_Cmd( URT_Struct* URTX, FunctionalState  URT_RTS_EN) 
000000  6d82              LDR      r2,[r0,#0x58]
;;;2179   {
;;;2180       URTX->HFC.W = (( URTX->HFC.W & (~URT_HFC_RTS_EN_mask_w)) | (URT_HFC_RTS_EN_mask_w * URT_RTS_EN));
000002  2302              MOVS     r3,#2
000004  439a              BICS     r2,r2,r3
000006  004b              LSLS     r3,r1,#1
000008  431a              ORRS     r2,r2,r3
00000a  6582              STR      r2,[r0,#0x58]
;;;2181   }
00000c  4770              BX       lr
;;;2182   
                          ENDP


                          AREA ||i.URT_RXClockSource_Select||, CODE, READONLY, ALIGN=1

                  URT_RXClockSource_Select PROC
;;;1252    */
;;;1253   void URT_RXClockSource_Select( URT_Struct* URTX , URT_RXClock_TypeDef URT_RX_CKS)
000000  6882              LDR      r2,[r0,#8]
;;;1254   {   
;;;1255       URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_RX_CKS_mask_w)) | URT_RX_CKS);
000002  2303              MOVS     r3,#3
000004  041b              LSLS     r3,r3,#16
000006  439a              BICS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  6082              STR      r2,[r0,#8]
;;;1256   }
00000c  4770              BX       lr
;;;1257   
                          ENDP


                          AREA ||i.URT_RXDMA_Cmd||, CODE, READONLY, ALIGN=1

                  URT_RXDMA_Cmd PROC
;;;3180    */
;;;3181   void URT_RXDMA_Cmd( URT_Struct* URTX , FunctionalState URT_DMA_RXEN)
000000  6982              LDR      r2,[r0,#0x18]
;;;3182   {
;;;3183       if((URTX->CR2.W & URT_CR2_RX_EN_mask_w) !=0)
000002  2304              MOVS     r3,#4
000004  401a              ANDS     r2,r2,r3
000006  2a00              CMP      r2,#0
000008  d013              BEQ      |L80.50|
;;;3184       {
;;;3185           URTX->CR2.W = URTX->CR2.W & (~URT_CR2_RX_EN_mask_w);
00000a  6982              LDR      r2,[r0,#0x18]
00000c  439a              BICS     r2,r2,r3
00000e  6182              STR      r2,[r0,#0x18]
;;;3186           if(URT_DMA_RXEN==ENABLE)
000010  2901              CMP      r1,#1
000012  d104              BNE      |L80.30|
;;;3187           {
;;;3188               URTX->CR0.W = URTX->CR0.W | URT_CR0_DMA_RXEN_mask_w;
000014  6902              LDR      r2,[r0,#0x10]
000016  078b              LSLS     r3,r1,#30
000018  431a              ORRS     r2,r2,r3
00001a  6102              STR      r2,[r0,#0x10]
00001c  e004              B        |L80.40|
                  |L80.30|
;;;3189           }
;;;3190           else
;;;3191           {
;;;3192               URTX->CR0.W = URTX->CR0.W & (~URT_CR0_DMA_RXEN_mask_w);   
00001e  6902              LDR      r2,[r0,#0x10]
000020  2301              MOVS     r3,#1
000022  079b              LSLS     r3,r3,#30
000024  439a              BICS     r2,r2,r3
000026  6102              STR      r2,[r0,#0x10]
                  |L80.40|
;;;3193           }
;;;3194           URTX->CR2.W = URTX->CR2.W | URT_CR2_RX_EN_mask_w;
000028  6982              LDR      r2,[r0,#0x18]
00002a  2304              MOVS     r3,#4
00002c  431a              ORRS     r2,r2,r3
00002e  6182              STR      r2,[r0,#0x18]
000030  e00b              B        |L80.74|
                  |L80.50|
;;;3195       }
;;;3196       else
;;;3197       {
;;;3198           if(URT_DMA_RXEN==ENABLE)
000032  2901              CMP      r1,#1
000034  d104              BNE      |L80.64|
;;;3199           {
;;;3200               URTX->CR0.W = URTX->CR0.W | URT_CR0_DMA_RXEN_mask_w;
000036  6902              LDR      r2,[r0,#0x10]
000038  078b              LSLS     r3,r1,#30
00003a  431a              ORRS     r2,r2,r3
00003c  6102              STR      r2,[r0,#0x10]
00003e  e004              B        |L80.74|
                  |L80.64|
;;;3201           }
;;;3202           else
;;;3203           {
;;;3204               URTX->CR0.W = URTX->CR0.W & (~URT_CR0_DMA_RXEN_mask_w);   
000040  6902              LDR      r2,[r0,#0x10]
000042  2301              MOVS     r3,#1
000044  079b              LSLS     r3,r3,#30
000046  439a              BICS     r2,r2,r3
000048  6102              STR      r2,[r0,#0x10]
                  |L80.74|
;;;3205           }
;;;3206       }    
;;;3207   }
00004a  4770              BX       lr
;;;3208   
                          ENDP


                          AREA ||i.URT_RXInverse_Cmd||, CODE, READONLY, ALIGN=1

                  URT_RXInverse_Cmd PROC
;;;748     */
;;;749    void URT_RXInverse_Cmd(URT_Struct* URTX , FunctionalState URT_RX_INV)
000000  6902              LDR      r2,[r0,#0x10]
;;;750    {
;;;751        URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_RX_INV_mask_w)) | ( URT_CR0_RX_INV_mask_w * URT_RX_INV));
000002  2301              MOVS     r3,#1
000004  029b              LSLS     r3,r3,#10
000006  439a              BICS     r2,r2,r3
000008  028b              LSLS     r3,r1,#10
00000a  431a              ORRS     r2,r2,r3
00000c  6102              STR      r2,[r0,#0x10]
;;;752    }
00000e  4770              BX       lr
;;;753    
                          ENDP


                          AREA ||i.URT_RXOverSamplingMode_Select||, CODE, READONLY, ALIGN=1

                  URT_RXOverSamplingMode_Select PROC
;;;1350    */
;;;1351   void URT_RXOverSamplingMode_Select( URT_Struct* URTX , URT_RXSMP_TypeDef URT_OS_MDS)
000000  6902              LDR      r2,[r0,#0x10]
;;;1352   {
;;;1353       URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_OS_MDS_mask_w)) | URT_OS_MDS);
000002  2302              MOVS     r3,#2
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  6102              STR      r2,[r0,#0x10]
;;;1354   }
00000a  4770              BX       lr
;;;1355   
                          ENDP


                          AREA ||i.URT_RXOverSamplingSampleNumber_Select||, CODE, READONLY, ALIGN=1

                  URT_RXOverSamplingSampleNumber_Select PROC
;;;1318    */
;;;1319   DRV_Return URT_RXOverSamplingSampleNumber_Select( URT_Struct* URTX , uint8_t URT_RXOS_NUM)
000000  4602              MOV      r2,r0
;;;1320   {
;;;1321       if(URT_RXOS_NUM>31)
000002  291f              CMP      r1,#0x1f
000004  dd01              BLE      |L83.10|
;;;1322       {
;;;1323           return(DRV_Failure);
000006  2001              MOVS     r0,#1
                  |L83.8|
;;;1324       }
;;;1325       URTX->CR1.B[1] = URT_RXOS_NUM;
;;;1326       return(DRV_Success);
;;;1327   }    
000008  4770              BX       lr
                  |L83.10|
00000a  7551              STRB     r1,[r2,#0x15]         ;1325
00000c  2000              MOVS     r0,#0                 ;1326
00000e  e7fb              B        |L83.8|
;;;1328   
                          ENDP


                          AREA ||i.URT_RXParityError_Config||, CODE, READONLY, ALIGN=2

                  URT_RXParityError_Config PROC
;;;3457    */
;;;3458   void URT_RXParityError_Config( URT_Struct* URTX , URT_RXParityError_TypeDef*  URT_RXPE)
000000  b510              PUSH     {r4,lr}
;;;3459   {
;;;3460       URTX->SC.W = (URTX->SC.W & (~(URT_SC_RXE_MDS_mask_w | URT_SC_RXE_LEN_mask_w | URT_SC_RXE_NUM_mask_w))) |  
000002  780a              LDRB     r2,[r1,#0]
000004  784b              LDRB     r3,[r1,#1]
000006  431a              ORRS     r2,r2,r3
000008  884b              LDRH     r3,[r1,#2]
00000a  431a              ORRS     r2,r2,r3
00000c  6c83              LDR      r3,[r0,#0x48]
00000e  4c02              LDR      r4,|L84.24|
000010  4023              ANDS     r3,r3,r4
000012  431a              ORRS     r2,r2,r3
000014  6482              STR      r2,[r0,#0x48]
;;;3461                    (URT_RXPE->URT_RXPERetryMode | URT_RXPE->URT_RXErrorSignal | URT_RXPE->URT_RXPERetryTime);
;;;3462   }
000016  bd10              POP      {r4,pc}
;;;3463   
                          ENDP

                  |L84.24|
                          DCD      0xffff8fec

                          AREA ||i.URT_RXShadowBufferThreshold_Select||, CODE, READONLY, ALIGN=1

                  URT_RXShadowBufferThreshold_Select PROC
;;;1971    */
;;;1972   void URT_RXShadowBufferThreshold_Select( URT_Struct* URTX , URT_RXTH_TypeDef URT_RX_TH)
000000  6902              LDR      r2,[r0,#0x10]
;;;1973   {
;;;1974       URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_RX_TH_mask_w)) | URT_RX_TH);    
000002  2303              MOVS     r3,#3
000004  041b              LSLS     r3,r3,#16
000006  439a              BICS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  6102              STR      r2,[r0,#0x10]
;;;1975   }
00000c  4770              BX       lr
;;;1976   
                          ENDP


                          AREA ||i.URT_RXTimeoutDetect_Config||, CODE, READONLY, ALIGN=1

                  URT_RXTimeoutDetect_Config PROC
;;;1570    */
;;;1571   void URT_RXTimeoutDetect_Config( URT_Struct* URTX , FunctionalState URT_RXTMO_EN , uint8_t URT_RXTMO_TH)
000000  b510              PUSH     {r4,lr}
;;;1572   {
;;;1573       if(URT_RXTMO_EN == DISABLE)
000002  2900              CMP      r1,#0
000004  d104              BNE      |L86.16|
;;;1574       { 
;;;1575           URTX->TMOUT.W = URTX->TMOUT.W & (~URT_TMOUT_RXTMO_EN_mask_w);
000006  6c03              LDR      r3,[r0,#0x40]
000008  2420              MOVS     r4,#0x20
00000a  43a3              BICS     r3,r3,r4
00000c  6403              STR      r3,[r0,#0x40]
                  |L86.14|
;;;1576           return;
;;;1577       }
;;;1578       URTX->TMOUT.B[2] = URT_RXTMO_TH;
;;;1579       URTX->TMOUT.W = URTX->TMOUT.W | URT_TMOUT_RXTMO_EN_mask_w;
;;;1580       
;;;1581       
;;;1582   }
00000e  bd10              POP      {r4,pc}
                  |L86.16|
000010  2342              MOVS     r3,#0x42              ;1578
000012  541a              STRB     r2,[r3,r0]            ;1578
000014  6c03              LDR      r3,[r0,#0x40]         ;1579
000016  2420              MOVS     r4,#0x20              ;1579
000018  4323              ORRS     r3,r3,r4              ;1579
00001a  6403              STR      r3,[r0,#0x40]         ;1579
00001c  bf00              NOP      
00001e  e7f6              B        |L86.14|
;;;1583   
                          ENDP


                          AREA ||i.URT_RX_Cmd||, CODE, READONLY, ALIGN=1

                  URT_RX_Cmd PROC
;;;722     */
;;;723    void URT_RX_Cmd( URT_Struct* URTX , FunctionalState URT_RX_EN)
000000  6982              LDR      r2,[r0,#0x18]
;;;724    {    
;;;725        URTX->CR2.W = (( URTX->CR2.W & (~URT_CR2_RX_EN_mask_w)) | (URT_CR2_RX_EN_mask_w * URT_RX_EN));
000002  2304              MOVS     r3,#4
000004  439a              BICS     r2,r2,r3
000006  008b              LSLS     r3,r1,#2
000008  431a              ORRS     r2,r2,r3
00000a  6182              STR      r2,[r0,#0x18]
;;;726    }
00000c  4770              BX       lr
;;;727    
                          ENDP


                          AREA ||i.URT_RxTxSwap_Cmd||, CODE, READONLY, ALIGN=1

                  URT_RxTxSwap_Cmd PROC
;;;3548    */
;;;3549   void URT_RxTxSwap_Cmd(URT_Struct* URTX , FunctionalState URT_IO_SWP)
000000  6902              LDR      r2,[r0,#0x10]
;;;3550   {
;;;3551       URTX->CR0.W = (URTX->CR0.W & (~URT_CR0_IO_SWP_mask_w)) | (URT_CR0_IO_SWP_mask_w * URT_IO_SWP);
000002  23ff              MOVS     r3,#0xff
000004  3301              ADDS     r3,#1
000006  439a              BICS     r2,r2,r3
000008  020b              LSLS     r3,r1,#8
00000a  431a              ORRS     r2,r2,r3
00000c  6102              STR      r2,[r0,#0x10]
;;;3552   }
00000e  4770              BX       lr
;;;3553   
                          ENDP


                          AREA ||i.URT_SendAddress||, CODE, READONLY, ALIGN=1

                  URT_SendAddress PROC
;;;2868    */
;;;2869   void URT_SendAddress( URT_Struct* URTX , uint8_t URT_ADR_TX)
000000  6982              LDR      r2,[r0,#0x18]
;;;2870   {
;;;2871       URTX->CR2.W = URTX->CR2.W | URT_CR2_ADR_TX_mask_w;
000002  2302              MOVS     r3,#2
000004  431a              ORRS     r2,r2,r3
000006  6182              STR      r2,[r0,#0x18]
;;;2872       URTX->TDAT.B[0] = URT_ADR_TX;
000008  2234              MOVS     r2,#0x34
00000a  5411              STRB     r1,[r2,r0]
;;;2873   }
00000c  4770              BX       lr
;;;2874   
                          ENDP


                          AREA ||i.URT_SendBreak||, CODE, READONLY, ALIGN=1

                  URT_SendBreak PROC
;;;3043    */
;;;3044   void URT_SendBreak( URT_Struct* URTX)
000000  6981              LDR      r1,[r0,#0x18]
;;;3045   {
;;;3046       URTX->CR2.W = URTX->CR2.W | URT_CR2_BK_TX_mask_w;
000002  2201              MOVS     r2,#1
000004  4311              ORRS     r1,r1,r2
000006  6181              STR      r1,[r0,#0x18]
;;;3047       URTX->TDAT.B[0] = 0x48;
000008  2248              MOVS     r2,#0x48
00000a  2134              MOVS     r1,#0x34
00000c  540a              STRB     r2,[r1,r0]
;;;3048   }
00000e  4770              BX       lr
;;;3049   
                          ENDP


                          AREA ||i.URT_SetSlaveAddress||, CODE, READONLY, ALIGN=1

                  URT_SetSlaveAddress PROC
;;;2819    */
;;;2820   void URT_SetSlaveAddress( URT_Struct* URTX , uint8_t URT_SA_RX)
000000  224c              MOVS     r2,#0x4c
;;;2821   { 
;;;2822       URTX->SADR.B[0] = URT_SA_RX;
000002  5411              STRB     r1,[r2,r0]
;;;2823   }
000004  4770              BX       lr
;;;2824   
                          ENDP


                          AREA ||i.URT_SetSlaveAddressMask||, CODE, READONLY, ALIGN=1

                  URT_SetSlaveAddressMask PROC
;;;2795    */
;;;2796   void URT_SetSlaveAddressMask( URT_Struct* URTX , uint8_t URT_SA_MSK)
000000  224d              MOVS     r2,#0x4d
;;;2797   {
;;;2798       URTX->SADR.B[1] = URT_SA_MSK;
000002  5411              STRB     r1,[r2,r0]
;;;2799   }
000004  4770              BX       lr
;;;2800   
                          ENDP


                          AREA ||i.URT_SetTXData||, CODE, READONLY, ALIGN=1

                  URT_SetTXData PROC
;;;2510    */
;;;2511   DRV_Return URT_SetTXData( URT_Struct* URTX , uint8_t Data_len , uint32_t URT_TDAT)
000000  b510              PUSH     {r4,lr}
;;;2512   {
000002  4603              MOV      r3,r0
;;;2513       switch(Data_len)
000004  2901              CMP      r1,#1
000006  d006              BEQ      |L93.22|
000008  2902              CMP      r1,#2
00000a  d007              BEQ      |L93.28|
00000c  2903              CMP      r1,#3
00000e  d007              BEQ      |L93.32|
000010  2904              CMP      r1,#4
000012  d109              BNE      |L93.40|
000014  e006              B        |L93.36|
                  |L93.22|
;;;2514       {
;;;2515           case 1:
;;;2516                    URTX->TDAT.B[0] = (uint8_t) URT_TDAT;
000016  2034              MOVS     r0,#0x34
000018  54c2              STRB     r2,[r0,r3]
;;;2517                    break;
00001a  e007              B        |L93.44|
                  |L93.28|
;;;2518           case 2:
;;;2519                    URTX->TDAT.H[0] = (uint16_t) URT_TDAT;
00001c  869a              STRH     r2,[r3,#0x34]
;;;2520                    break;
00001e  e005              B        |L93.44|
                  |L93.32|
;;;2521           case 3:
;;;2522                    URTX->TDAT3.W = URT_TDAT;
000020  639a              STR      r2,[r3,#0x38]
;;;2523                    break;
000022  e003              B        |L93.44|
                  |L93.36|
;;;2524           case 4:
;;;2525                    URTX->TDAT.W = URT_TDAT;
000024  635a              STR      r2,[r3,#0x34]
;;;2526                    break;
000026  e001              B        |L93.44|
                  |L93.40|
;;;2527           default:
;;;2528                    return(DRV_Failure);
000028  2001              MOVS     r0,#1
                  |L93.42|
;;;2529       }
;;;2530       return(DRV_Success);
;;;2531   }
00002a  bd10              POP      {r4,pc}
                  |L93.44|
00002c  bf00              NOP                            ;2517
00002e  2000              MOVS     r0,#0                 ;2530
000030  e7fb              B        |L93.42|
;;;2532   
                          ENDP


                          AREA ||i.URT_SetTimeoutTimerCompare||, CODE, READONLY, ALIGN=1

                  URT_SetTimeoutTimerCompare PROC
;;;1804    */
;;;1805   void URT_SetTimeoutTimerCompare( URT_Struct* URTX, uint16_t URT_TMO_RELOAD)
000000  2244              MOVS     r2,#0x44
;;;1806   {
;;;1807       URTX->TMOUT2.H[0] = URT_TMO_RELOAD;
000002  5211              STRH     r1,[r2,r0]
;;;1808   }
000004  4770              BX       lr
;;;1809   ///@}
                          ENDP


                          AREA ||i.URT_SetTimeoutTimerCounter||, CODE, READONLY, ALIGN=1

                  URT_SetTimeoutTimerCounter PROC
;;;1755    */
;;;1756   void URT_SetTimeoutTimerCounter( URT_Struct* URTX, uint16_t URT_TMO_CNT)
000000  2246              MOVS     r2,#0x46
;;;1757   {
;;;1758       URTX->TMOUT2.H[1] = URT_TMO_CNT;
000002  5211              STRH     r1,[r2,r0]
;;;1759   }
000004  4770              BX       lr
;;;1760   
                          ENDP


                          AREA ||i.URT_TXClockSource_Select||, CODE, READONLY, ALIGN=1

                  URT_TXClockSource_Select PROC
;;;1224    */
;;;1225   void URT_TXClockSource_Select( URT_Struct* URTX , URT_TXClock_TypeDef URT_TX_CKS)
000000  6882              LDR      r2,[r0,#8]
;;;1226   {
;;;1227       URTX->CLK.W = (( URTX->CLK.W & (~URT_CLK_TX_CKS_mask_w)) | URT_TX_CKS);
000002  2303              MOVS     r3,#3
000004  051b              LSLS     r3,r3,#20
000006  439a              BICS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  6082              STR      r2,[r0,#8]
;;;1228   }
00000c  4770              BX       lr
;;;1229   
                          ENDP


                          AREA ||i.URT_TXDMA_Cmd||, CODE, READONLY, ALIGN=1

                  URT_TXDMA_Cmd PROC
;;;3131    */
;;;3132   void URT_TXDMA_Cmd( URT_Struct* URTX, FunctionalState URT_DMA_TXEN)
000000  6982              LDR      r2,[r0,#0x18]
;;;3133   {
;;;3134       if((URTX->CR2.W & URT_CR2_TX_EN_mask_w) !=0)
000002  2308              MOVS     r3,#8
000004  401a              ANDS     r2,r2,r3
000006  2a00              CMP      r2,#0
000008  d012              BEQ      |L97.48|
;;;3135       {
;;;3136           URTX->CR2.W = URTX->CR2.W & (~URT_CR2_TX_EN_mask_w);
00000a  6982              LDR      r2,[r0,#0x18]
00000c  439a              BICS     r2,r2,r3
00000e  6182              STR      r2,[r0,#0x18]
;;;3137           if(URT_DMA_TXEN==ENABLE)
000010  2901              CMP      r1,#1
000012  d104              BNE      |L97.30|
;;;3138           {
;;;3139               URTX->CR0.W = URTX->CR0.W | URT_CR0_DMA_TXEN_mask_w;
000014  6902              LDR      r2,[r0,#0x10]
000016  07cb              LSLS     r3,r1,#31
000018  431a              ORRS     r2,r2,r3
00001a  6102              STR      r2,[r0,#0x10]
00001c  e003              B        |L97.38|
                  |L97.30|
;;;3140           }
;;;3141           else
;;;3142           {
;;;3143               URTX->CR0.W = URTX->CR0.W & (~URT_CR0_DMA_TXEN_mask_w); 
00001e  6902              LDR      r2,[r0,#0x10]
000020  0052              LSLS     r2,r2,#1
000022  0852              LSRS     r2,r2,#1
000024  6102              STR      r2,[r0,#0x10]
                  |L97.38|
;;;3144           }
;;;3145           URTX->CR2.W = URTX->CR2.W | URT_CR2_TX_EN_mask_w;
000026  6982              LDR      r2,[r0,#0x18]
000028  2308              MOVS     r3,#8
00002a  431a              ORRS     r2,r2,r3
00002c  6182              STR      r2,[r0,#0x18]
00002e  e00a              B        |L97.70|
                  |L97.48|
;;;3146       }
;;;3147       else
;;;3148       {
;;;3149           if(URT_DMA_TXEN==ENABLE)
000030  2901              CMP      r1,#1
000032  d104              BNE      |L97.62|
;;;3150           {
;;;3151               URTX->CR0.W = URTX->CR0.W | URT_CR0_DMA_TXEN_mask_w;
000034  6902              LDR      r2,[r0,#0x10]
000036  07cb              LSLS     r3,r1,#31
000038  431a              ORRS     r2,r2,r3
00003a  6102              STR      r2,[r0,#0x10]
00003c  e003              B        |L97.70|
                  |L97.62|
;;;3152           }
;;;3153           else
;;;3154           {
;;;3155               URTX->CR0.W = URTX->CR0.W & (~URT_CR0_DMA_TXEN_mask_w); 
00003e  6902              LDR      r2,[r0,#0x10]
000040  0052              LSLS     r2,r2,#1
000042  0852              LSRS     r2,r2,#1
000044  6102              STR      r2,[r0,#0x10]
                  |L97.70|
;;;3156           }
;;;3157       }
;;;3158   }
000046  4770              BX       lr
;;;3159       
                          ENDP


                          AREA ||i.URT_TXErrorDetectMode_Select||, CODE, READONLY, ALIGN=1

                  URT_TXErrorDetectMode_Select PROC
;;;3486    */
;;;3487   void URT_TXErrorDetectMode_Select( URT_Struct* URTX , URT_TXErrorMode_TypeDef URT_TXE_MDS)
000000  6c82              LDR      r2,[r0,#0x48]
;;;3488   {
;;;3489       URTX->SC.W = (URTX->SC.W & (~URT_SC_TXE_MDS_mask_w)) | URT_TXE_MDS;
000002  230c              MOVS     r3,#0xc
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  6482              STR      r2,[r0,#0x48]
;;;3490   }
00000a  4770              BX       lr
;;;3491   
                          ENDP


                          AREA ||i.URT_TXErrorResendTime_Select||, CODE, READONLY, ALIGN=1

                  URT_TXErrorResendTime_Select PROC
;;;3513    */
;;;3514   void URT_TXErrorResendTime_Select( URT_Struct* URTX , URT_TXErrorReSendTime_TypeDef URT_TXE_NUM)
000000  6c82              LDR      r2,[r0,#0x48]
;;;3515   {
;;;3516       URTX->SC.W = (( URTX->SC.W & (~URT_SC_TXE_NUM_mask_w)) | URT_TXE_NUM);
000002  2307              MOVS     r3,#7
000004  021b              LSLS     r3,r3,#8
000006  439a              BICS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  6482              STR      r2,[r0,#0x48]
;;;3517   }
00000c  4770              BX       lr
;;;3518   
                          ENDP


                          AREA ||i.URT_TXGuardTime_Select||, CODE, READONLY, ALIGN=1

                  URT_TXGuardTime_Select PROC
;;;2483    */
;;;2484   void URT_TXGuardTime_Select( URT_Struct* URTX , uint8_t URT_TXGT_LEN)
000000  7781              STRB     r1,[r0,#0x1e]
;;;2485   {
;;;2486       URTX->CR3.B[2] = URT_TXGT_LEN;
;;;2487   }
000002  4770              BX       lr
;;;2488   
                          ENDP


                          AREA ||i.URT_TXHalt_Cmd||, CODE, READONLY, ALIGN=1

                  URT_TXHalt_Cmd PROC
;;;2453    */
;;;2454   void URT_TXHalt_Cmd(URT_Struct* URTX , FunctionalState URT_TX_HALT)
000000  6982              LDR      r2,[r0,#0x18]
;;;2455   {
;;;2456       URTX->CR2.W = ((URTX->CR2.W & (~URT_CR2_TX_HALT_mask_w)) | (URT_CR2_TX_HALT_mask_w * URT_TX_HALT));
000002  2310              MOVS     r3,#0x10
000004  439a              BICS     r2,r2,r3
000006  010b              LSLS     r3,r1,#4
000008  431a              ORRS     r2,r2,r3
00000a  6182              STR      r2,[r0,#0x18]
;;;2457   }
00000c  4770              BX       lr
;;;2458   ///@}
                          ENDP


                          AREA ||i.URT_TXInverse_Cmd||, CODE, READONLY, ALIGN=1

                  URT_TXInverse_Cmd PROC
;;;774     */
;;;775    void URT_TXInverse_Cmd( URT_Struct* URTX , FunctionalState URT_TX_INV)
000000  6902              LDR      r2,[r0,#0x10]
;;;776    {
;;;777        URTX->CR0.W = (( URTX->CR0.W & (~URT_CR0_TX_INV_mask_w)) | (URT_CR0_TX_INV_mask_w * URT_TX_INV));
000002  2301              MOVS     r3,#1
000004  02db              LSLS     r3,r3,#11
000006  439a              BICS     r2,r2,r3
000008  02cb              LSLS     r3,r1,#11
00000a  431a              ORRS     r2,r2,r3
00000c  6102              STR      r2,[r0,#0x10]
;;;778    }
00000e  4770              BX       lr
;;;779    
                          ENDP


                          AREA ||i.URT_TXOverSamplingSampleNumber_Select||, CODE, READONLY, ALIGN=1

                  URT_TXOverSamplingSampleNumber_Select PROC
;;;1282    */
;;;1283   DRV_Return URT_TXOverSamplingSampleNumber_Select( URT_Struct* URTX , uint8_t URT_TXOS_NUM)
000000  4602              MOV      r2,r0
;;;1284   {
;;;1285       if(URT_TXOS_NUM>31)
000002  291f              CMP      r1,#0x1f
000004  dd01              BLE      |L103.10|
;;;1286       {
;;;1287           return(DRV_Failure);
000006  2001              MOVS     r0,#1
                  |L103.8|
;;;1288       }
;;;1289       URTX->CR1.B[3] = URT_TXOS_NUM;
;;;1290       return(DRV_Success);
;;;1291   }
000008  4770              BX       lr
                  |L103.10|
00000a  75d1              STRB     r1,[r2,#0x17]         ;1289
00000c  2000              MOVS     r0,#0                 ;1290
00000e  e7fb              B        |L103.8|
;;;1292   
                          ENDP


                          AREA ||i.URT_TX_Cmd||, CODE, READONLY, ALIGN=1

                  URT_TX_Cmd PROC
;;;696     */
;;;697    void URT_TX_Cmd( URT_Struct* URTX , FunctionalState URT_TX_EN)
000000  6982              LDR      r2,[r0,#0x18]
;;;698    {    
;;;699        URTX->CR2.W = (( URTX->CR2.W & (~URT_CR2_TX_EN_mask_w)) | (URT_CR2_TX_EN_mask_w * URT_TX_EN));
000002  2308              MOVS     r3,#8
000004  439a              BICS     r2,r2,r3
000006  00cb              LSLS     r3,r1,#3
000008  431a              ORRS     r2,r2,r3
00000a  6182              STR      r2,[r0,#0x18]
;;;700    }
00000c  4770              BX       lr
;;;701    
                          ENDP


                          AREA ||i.URT_TimeoutMode_Select||, CODE, READONLY, ALIGN=1

                  URT_TimeoutMode_Select PROC
;;;1439    */
;;;1440   void URT_TimeoutMode_Select( URT_Struct* URTX , URT_TMOMDS_TypeDef URT_TMO_MDS)
000000  6c02              LDR      r2,[r0,#0x40]
;;;1441   {
;;;1442       URTX->TMOUT.W = (( URTX->TMOUT.W & (~URT_TMOUT_TMO_MDS_mask_w)) | URT_TMO_MDS);
000002  230c              MOVS     r3,#0xc
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  6402              STR      r2,[r0,#0x40]
;;;1443   }
00000a  4770              BX       lr
;;;1444   
                          ENDP


                          AREA ||i.URT_TimeoutTimerClockSource_Select||, CODE, READONLY, ALIGN=1

                  URT_TimeoutTimerClockSource_Select PROC
;;;1466    */
;;;1467   void URT_TimeoutTimerClockSource_Select( URT_Struct* URTX , URT_TMOCLK_TypeDef URT_TMO_CKS)
000000  6c02              LDR      r2,[r0,#0x40]
;;;1468   {
;;;1469       URTX->TMOUT.W = (( URTX->TMOUT.W & (~URT_TMOUT_TMO_CKS_mask_w)) | URT_TMO_CKS); 
000002  2307              MOVS     r3,#7
000004  021b              LSLS     r3,r3,#8
000006  439a              BICS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  6402              STR      r2,[r0,#0x40]
;;;1470   }
00000c  4770              BX       lr
;;;1471   
                          ENDP


                          AREA ||i.URT_TimeroutTimer_Cmd||, CODE, READONLY, ALIGN=1

                  URT_TimeroutTimer_Cmd PROC
;;;1389    */
;;;1390   void URT_TimeroutTimer_Cmd( URT_Struct* URTX , FunctionalState URT_TMO_EN)
000000  6c02              LDR      r2,[r0,#0x40]
;;;1391   { 
;;;1392       URTX->TMOUT.W = (( URTX->TMOUT.W & (~URT_TMOUT_TMO_EN_mask_w)) | (URT_TMOUT_TMO_EN_mask_w * URT_TMO_EN));
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  430a              ORRS     r2,r2,r1
000008  6402              STR      r2,[r0,#0x40]
;;;1393   }
00000a  4770              BX       lr
;;;1394   
                          ENDP


                          AREA ||i.URT_TriggerTimeoutTimerRst_SW||, CODE, READONLY, ALIGN=1

                  URT_TriggerTimeoutTimerRst_SW PROC
;;;1412    */
;;;1413   void URT_TriggerTimeoutTimerRst_SW( URT_Struct* URTX )
000000  6c01              LDR      r1,[r0,#0x40]
;;;1414   {    
;;;1415       URTX->TMOUT.W = (URTX->TMOUT.W | URT_TMOUT_TMO_RST_mask_w);
000002  2202              MOVS     r2,#2
000004  4311              ORRS     r1,r1,r2
000006  6401              STR      r1,[r0,#0x40]
;;;1416   }
000008  4770              BX       lr
;;;1417   
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Driver\\Source\\MG32x02z_URT_DRV.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_URT_DRV_c_5fcd2fc7____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_URT_DRV_c_5fcd2fc7____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_URT_DRV_c_5fcd2fc7____REVSH|
#line 496
|__asm___18_MG32x02z_URT_DRV_c_5fcd2fc7____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
