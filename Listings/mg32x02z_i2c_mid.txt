; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\mg32x02z_i2c_mid.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mg32x02z_i2c_mid.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\UserLib\Inc -I.\Main\Inc -I.\MGLib\Inc -I.\ProjectLib\Inc -I.\RTE\MG32x02z_ChipInit_Wizard\MG32F02A132 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A132\MG32x02z_ConfigerWizard\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Driver\Include -IC:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Sample\Middleware\Include -D__UVISION_VERSION=534 -D_RTE_ -DMG32F02A132 -D_RTE_ --omf_browse=.\objects\mg32x02z_i2c_mid.crf C:\Keil_v5\ARM\PACK\Megawin\CM0_DFP\2.0.4\Device\MG32x02z\MG32F02A_Middleware\Source\MG32x02z_I2C_MID.c]
                          THUMB

                          AREA ||i.I2C_BytemodeMasterEventHandle||, CODE, READONLY, ALIGN=2

                  I2C_BytemodeMasterEventHandle PROC
;;;3087    */
;;;3088   static MID_StatusTypeDef I2C_BytemodeMasterEventHandle(I2C_HandleTypeDef *mI2C)
000000  b570              PUSH     {r4-r6,lr}
;;;3089   {
000002  4604              MOV      r4,r0
;;;3090       uint8_t lState;
;;;3091   
;;;3092       if((mI2C->Instance->STA2.W & I2C_STA2_EVENTF2_mask_w) == 0)
000004  6820              LDR      r0,[r4,#0]
000006  6a80              LDR      r0,[r0,#0x28]
000008  21ff              MOVS     r1,#0xff
00000a  3101              ADDS     r1,#1
00000c  4008              ANDS     r0,r0,r1
00000e  2800              CMP      r0,#0
000010  d100              BNE      |L1.20|
                  |L1.18|
;;;3093           return MID_OK;
;;;3094   
;;;3095       lState = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;3096       switch(lState){
;;;3097           case 0x00:  // Bus Error
;;;3098               mI2C->ErrorCode = MID_I2C_ERROR_BERR;
;;;3099               mI2C->State |= MID_I2C_STATE_ERROR;
;;;3100   
;;;3101               if((mI2C->Instance->INT.W & I2C_IT_EVENT) != 0)
;;;3102                   MID_I2C_ErrorCallback(mI2C);
;;;3103   
;;;3104               __DRV_I2C_CLEAR_FLAG(mI2C, I2C_FLAG_BERR | I2C_FLAG_ERR);
;;;3105               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3106               while(__DRV_I2C_GET_EVENTCODE(mI2C) != 0xF8);
;;;3107               __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3108               mI2C->State &= (~MID_I2C_STATE_BUSY);
;;;3109               I2C_ListenP(mI2C);
;;;3110               break;
;;;3111   
;;;3112           case 0x08:  // A START condition has been transmitted
;;;3113           case 0x10:  // Repeated start condition
;;;3114               __DRV_I2C_STA_0(mI2C);
;;;3115               __DRV_I2C_WRITE_SBUF(mI2C, ((uint8_t)mI2C->DevAddress));
;;;3116               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3117               break;
;;;3118   
;;;3119           case 0x20:  // MT SLA+W sent NACK received 
;;;3120               if((mI2C->Mode & MID_I2C_MODE_NACKNext) == 0)
;;;3121               {
;;;3122                   __DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_NACK | I2C_FLAG_ERR);
;;;3123                   __DRV_I2C_STA_STO_AA_010(mI2C);
;;;3124                   __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3125                   while(__DRV_I2C_GET_EVENTCODE(mI2C) != 0xF8);
;;;3126   
;;;3127                   __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3128                   I2C_ListenP(mI2C);
;;;3129                   mI2C->ErrorCode = MID_I2C_ERROR_NACKF;
;;;3130                   mI2C->State |= MID_I2C_STATE_ERROR_TX;
;;;3131                   break;
;;;3132               }
;;;3133   
;;;3134           case 0x18:  // MT SLA+W sent and ACK received
;;;3135               mI2C->State &= ~MID_I2C_STATE_LISTEN;
;;;3136               if((mI2C->Mode & MID_I2C_MODE_DMA_MTX) != 0)
;;;3137               {
;;;3138                   __DRV_I2C_PSTA_PSTO_PAA_000(mI2C);
;;;3139                   mI2C->Instance->CR0.W |= I2C_CR0_DMA_TXEN_enable_w;
;;;3140                   __ISB();
;;;3141                   break;
;;;3142               }
;;;3143               goto EventCode0x28;
;;;3144   
;;;3145           case 0x30:  // MT DATA sent NACK received
;;;3146               if((mI2C->Mode & MID_I2C_MODE_NACKNext) == 0)
;;;3147               {
;;;3148                   if((mI2C->Mode & MID_I2C_MODE_DMA_MTX) != 0)
;;;3149                   {
;;;3150                       mI2C->Mode &= ~MID_I2C_MODE_DMA_MTX;
;;;3151                       mI2C->XferCount = (mI2C->XferSize - mI2C->hdmatx->Instance->CH0CNT.W);
;;;3152                   }
;;;3153                   if(mI2C->XferCount < mI2C->XferSize)
;;;3154                   {
;;;3155                       mI2C->XferCount++;
;;;3156                       mI2C->ErrorCode = MID_I2C_ERROR_NACKF;
;;;3157                       mI2C->State |= MID_I2C_STATE_ERROR;
;;;3158                   }
;;;3159                   __DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_NACK | I2C_FLAG_ERR);
;;;3160                   __DRV_I2C_STA_STO_AA_010(mI2C);
;;;3161                   __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3162                   while(__DRV_I2C_GET_EVENTCODE(mI2C) != 0xF8);
;;;3163       
;;;3164                   __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3165                   I2C_ListenP(mI2C);
;;;3166                   mI2C->State &= ~MID_I2C_STATE_BUSY;
;;;3167                   break;
;;;3168               }
;;;3169   
;;;3170         EventCode0x28:
;;;3171           case 0x28:  // MT DATA sent and ACK received
;;;3172               if(mI2C->XferCount == mI2C->XferSize)
;;;3173               {
;;;3174                   if((mI2C->Mode & MID_I2C_MODE_MASK) == MID_I2C_MODE_RREPEATSTART)
;;;3175                   {
;;;3176                       __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3177                       __DRV_I2C_STA_STO_AA_100(mI2C);
;;;3178                       __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3179                       while(__DRV_I2C_GET_EVENTCODE(mI2C) != 0x10);
;;;3180                   }
;;;3181   
;;;3182                   if((mI2C->Mode & MID_I2C_MODE_MASK) == MID_I2C_MODE_STOP)
;;;3183                   {
;;;3184                       __DRV_I2C_STA_STO_AA_010(mI2C);
;;;3185                       __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3186                       while(__DRV_I2C_GET_EVENTCODE(mI2C) != 0xF8);
;;;3187                   }
;;;3188   
;;;3189                   __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3190                   I2C_ListenP(mI2C);
;;;3191                   mI2C->State &= ~MID_I2C_STATE_BUSY;
;;;3192   
;;;3193                   if((mI2C->Instance->INT.W & I2C_IT_EVENT) != 0)
;;;3194                       MID_I2C_MasterTxCpltCallback(mI2C);
;;;3195   
;;;3196                   break;
;;;3197               }
;;;3198   
;;;3199               __DRV_I2C_WRITE_SBUF(mI2C, mI2C->pBuffPtr[mI2C->XferCount]);
;;;3200               mI2C->XferCount ++;
;;;3201               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3202               break;
;;;3203   
;;;3204           case 0x38:  // Arbitration lost
;;;3205               mI2C->ErrorCode = MID_I2C_ERROR_ARLO;
;;;3206               mI2C->State |= MID_I2C_STATE_ERROR;
;;;3207   
;;;3208               if((mI2C->Instance->INT.W & I2C_IT_EVENT) != 0)
;;;3209                   MID_I2C_ErrorCallback(mI2C);
;;;3210   
;;;3211               __DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_ALOS | I2C_FLAG_ERR);
;;;3212               __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3213               I2C_ListenP(mI2C);
;;;3214               mI2C->State &= (~MID_I2C_STATE_BUSY);
;;;3215               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3216               break;
;;;3217   
;;;3218           case 0x40:  // SLA+R sent and ACK received
;;;3219               mI2C->State &= ~MID_I2C_STATE_LISTEN;
;;;3220               __DRV_I2C_STA_STO_AA_001(mI2C);
;;;3221               if(mI2C->XferCount >= (mI2C->XferSize - 1))
;;;3222               {
;;;3223                   __DRV_I2C_STA_STO_AA_000(mI2C);
;;;3224                   __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3225                   break;
;;;3226               }
;;;3227   
;;;3228               if((mI2C->Mode & MID_I2C_MODE_DMA_MRX) != 0)
;;;3229               {
;;;3230                   //if((mI2C->Mode.H & Sample_I2C_XferNext_Mask) == Sample_I2C_XferNext_RepeatStart)
;;;3231                   //    PreI2C_STA_STO_AA_100(mI2C->Instance);
;;;3232                   //else
;;;3233                   //    PreI2C_STA_STO_AA_010(mI2C->Instance);
;;;3234   
;;;3235                   __DRV_I2C_PSTA_PSTO_PAA_000(mI2C);
;;;3236                   mI2C->Instance->CR0.W |= I2C_CR0_DMA_RXEN_mask_w;
;;;3237                   __ISB();
;;;3238                   break;
;;;3239               }
;;;3240               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3241               break;
;;;3242   
;;;3243           case 0x48:  // MR SLA+R sent NACK received
;;;3244               mI2C->ErrorCode = MID_I2C_ERROR_NACKF;
;;;3245               mI2C->State |= MID_I2C_STATE_ERROR;
;;;3246               __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3247               __DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_NACK | I2C_FLAG_ERR);
;;;3248               __DRV_I2C_STA_STO_AA_010(mI2C);
;;;3249               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3250               while(__DRV_I2C_GET_EVENTCODE(mI2C) != 0xF8);
;;;3251               I2C_ListenP(mI2C);
;;;3252               mI2C->State &= ~MID_I2C_STATE_BUSY;
;;;3253               break;
;;;3254   
;;;3255           case 0x50:  // Data Received and ACK sent
;;;3256               mI2C->pBuffPtr[mI2C->XferCount] = __DRV_I2C_READ_SBUF(mI2C);
;;;3257               mI2C->XferCount++;
;;;3258               if(mI2C->XferCount >= (mI2C->XferSize - 1))
;;;3259                   __DRV_I2C_STA_STO_AA_000(mI2C);
;;;3260               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3261               break;
;;;3262   
;;;3263           case 0x58:  // Data Received and NACK sent
;;;3264               mI2C->pBuffPtr[mI2C->XferCount] = __DRV_I2C_READ_SBUF(mI2C);
;;;3265               mI2C->XferCount++;
;;;3266               __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3267               if((mI2C->Mode & MID_I2C_MODE_MASK) == MID_I2C_MODE_RREPEATSTART)
;;;3268               {
;;;3269                   __DRV_I2C_STA_STO_AA_100(mI2C);
;;;3270                   __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3271                   while(__DRV_I2C_GET_EVENTCODE(mI2C) != 0x10);
;;;3272               }
;;;3273               else
;;;3274               {
;;;3275                   __DRV_I2C_STA_STO_AA_010(mI2C);
;;;3276                   __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3277                   while(__DRV_I2C_GET_EVENTCODE(mI2C) != 0xF8);
;;;3278               }
;;;3279               I2C_ListenP(mI2C);
;;;3280               mI2C->State &= ~MID_I2C_STATE_BUSY;
;;;3281   
;;;3282               if((mI2C->Instance->INT.W & I2C_IT_EVENT) != 0)
;;;3283                   MID_I2C_MasterRxCpltCallback(mI2C);
;;;3284   
;;;3285               break;
;;;3286   
;;;3287           case 0x68:  // Arbitration lost in SLA+R/W as master,
;;;3288                       // Own SLA+W has been Received ACK has bee returned
;;;3289           case 0x78:  // Arbitration lost in SLA+R/W as master,
;;;3290                       // General Call address has been received ACK has been returned
;;;3291               mI2C->ErrorCode = MID_I2C_ERROR_ARLO;
;;;3292               mI2C->State |= (MID_I2C_STATE_LISTEN | MID_I2C_STATE_ERROR);
;;;3293   
;;;3294               if((mI2C->Instance->INT.W & I2C_IT_EVENT) != 0)
;;;3295                   MID_I2C_AddrCallback(mI2C, I2C_DIRECTION_RECEIVE, (mI2C->Instance->SAC.H[0] & 0xFFFE));
;;;3296   
;;;3297               __DRV_I2C_STA_STO_AA_001(mI2C);
;;;3298               __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3299               __DRV_I2C_CLEAR_FLAG(mI2C, I2C_FLAG_ALOS | I2C_FLAG_ERR);
;;;3300               mI2C->State &= ~MID_I2C_STATE_BUSY;
;;;3301               break;
;;;3302   
;;;3303           case 0xB0:  // Arbitration lost in SLA+R/W as master,
;;;3304                   // Own SLA+R has been Received ACK has bee returned
;;;3305               mI2C->ErrorCode = MID_I2C_ERROR_ARLO;
;;;3306               mI2C->State |= (MID_I2C_STATE_LISTEN | MID_I2C_STATE_ERROR);
;;;3307   
;;;3308               if((mI2C->Instance->INT.W & I2C_IT_EVENT) != 0)
;;;3309                   MID_I2C_AddrCallback(mI2C, I2C_DIRECTION_TRANSMIT, (mI2C->Instance->SAC.H[0] & 0xFFFE));
;;;3310   
;;;3311               __DRV_I2C_STA_STO_AA_001(mI2C);
;;;3312               __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3313               __DRV_I2C_CLEAR_FLAG(mI2C, I2C_FLAG_ALOS | I2C_FLAG_ERR);
;;;3314               mI2C->State &= ~MID_I2C_STATE_BUSY;
;;;3315               break;
;;;3316       }
;;;3317       return MID_OK;
;;;3318   }
000012  bd70              POP      {r4-r6,pc}
                  |L1.20|
000014  6820              LDR      r0,[r4,#0]            ;3095
000016  3020              ADDS     r0,r0,#0x20           ;3095
000018  7a05              LDRB     r5,[r0,#8]            ;3095
00001a  21f8              MOVS     r1,#0xf8              ;3095
00001c  400d              ANDS     r5,r5,r1              ;3095
00001e  0768              LSLS     r0,r5,#29             ;3096
000020  0f40              LSRS     r0,r0,#29             ;3096
000022  2800              CMP      r0,#0                 ;3096
000024  d13f              BNE      |L1.166|
000026  10e8              ASRS     r0,r5,#3              ;3096
000028  0003              MOVS     r3,r0                 ;3096
00002a  f7fffffe          BL       __ARM_common_switch8
00002e  170d              DCB      0x17,0x0d
000030  3d3e744b          DCB      0x3d,0x3e,0x74,0x4b
000034  d38efefd          DCB      0xd3,0x8e,0xfe,0xfd
000038  fcfbfa3c          DCB      0xfc,0xfb,0xfa,0x3c
00003c  f93cf83c          DCB      0xf9,0x3c,0xf8,0x3c
000040  3c3c3c3c          DCB      0x3c,0x3c,0x3c,0x3c
000044  3cf73c00          DCB      0x3c,0xf7,0x3c,0x00
000048  2001              MOVS     r0,#1                 ;3098
00004a  86e0              STRH     r0,[r4,#0x36]         ;3098
00004c  2034              MOVS     r0,#0x34              ;3099
00004e  5d00              LDRB     r0,[r0,r4]            ;3099
000050  2110              MOVS     r1,#0x10              ;3099
000052  4308              ORRS     r0,r0,r1              ;3099
000054  2134              MOVS     r1,#0x34              ;3099
000056  5508              STRB     r0,[r1,r4]            ;3099
000058  6820              LDR      r0,[r4,#0]            ;3101
00005a  6840              LDR      r0,[r0,#4]            ;3101
00005c  2102              MOVS     r1,#2                 ;3101
00005e  4008              ANDS     r0,r0,r1              ;3101
000060  2800              CMP      r0,#0                 ;3101
000062  d002              BEQ      |L1.106|
000064  4620              MOV      r0,r4                 ;3102
000066  f7fffffe          BL       MID_I2C_ErrorCallback
                  |L1.106|
00006a  48fd              LDR      r0,|L1.1120|
00006c  6821              LDR      r1,[r4,#0]            ;3104
00006e  6008              STR      r0,[r1,#0]            ;3104
000070  2101              MOVS     r1,#1                 ;3105
000072  6820              LDR      r0,[r4,#0]            ;3105
000074  3028              ADDS     r0,r0,#0x28           ;3105
000076  7041              STRB     r1,[r0,#1]            ;3105
000078  bf00              NOP                            ;3106
                  |L1.122|
00007a  6820              LDR      r0,[r4,#0]            ;3106
00007c  3020              ADDS     r0,r0,#0x20           ;3106
00007e  7a00              LDRB     r0,[r0,#8]            ;3106
000080  21f8              MOVS     r1,#0xf8              ;3106
000082  4008              ANDS     r0,r0,r1              ;3106
000084  28f8              CMP      r0,#0xf8              ;3106
000086  d1f8              BNE      |L1.122|
000088  6820              LDR      r0,[r4,#0]            ;3107
00008a  6840              LDR      r0,[r0,#4]            ;3107
00008c  2102              MOVS     r1,#2                 ;3107
00008e  4388              BICS     r0,r0,r1              ;3107
000090  6821              LDR      r1,[r4,#0]            ;3107
000092  6048              STR      r0,[r1,#4]            ;3107
000094  2034              MOVS     r0,#0x34              ;3108
000096  5d00              LDRB     r0,[r0,r4]            ;3108
000098  0841              LSRS     r1,r0,#1              ;3108
00009a  0049              LSLS     r1,r1,#1              ;3108
00009c  2034              MOVS     r0,#0x34              ;3108
00009e  5501              STRB     r1,[r0,r4]            ;3108
0000a0  4620              MOV      r0,r4                 ;3109
0000a2  f7fffffe          BL       I2C_ListenP
                  |L1.166|
0000a6  e232              B        |L1.1294|
0000a8  bf00              NOP                            ;3113
0000aa  2010              MOVS     r0,#0x10              ;3114
0000ac  6821              LDR      r1,[r4,#0]            ;3114
0000ae  7608              STRB     r0,[r1,#0x18]         ;3114
0000b0  8ba0              LDRH     r0,[r4,#0x1c]         ;3115
0000b2  b2c1              UXTB     r1,r0                 ;3115
0000b4  6820              LDR      r0,[r4,#0]            ;3115
0000b6  3020              ADDS     r0,r0,#0x20           ;3115
0000b8  7301              STRB     r1,[r0,#0xc]          ;3115
0000ba  2101              MOVS     r1,#1                 ;3116
0000bc  6820              LDR      r0,[r4,#0]            ;3116
0000be  3028              ADDS     r0,r0,#0x28           ;3116
0000c0  7041              STRB     r1,[r0,#1]            ;3116
0000c2  e224              B        |L1.1294|
0000c4  8e60              LDRH     r0,[r4,#0x32]         ;3120
0000c6  2180              MOVS     r1,#0x80              ;3120
0000c8  4008              ANDS     r0,r0,r1              ;3120
0000ca  2800              CMP      r0,#0                 ;3120
0000cc  d122              BNE      |L1.276|
0000ce  6820              LDR      r0,[r4,#0]            ;3122
0000d0  6800              LDR      r0,[r0,#0]            ;3122
0000d2  2072              MOVS     r0,#0x72              ;3123
0000d4  6821              LDR      r1,[r4,#0]            ;3123
0000d6  7608              STRB     r0,[r1,#0x18]         ;3123
0000d8  2101              MOVS     r1,#1                 ;3124
0000da  6820              LDR      r0,[r4,#0]            ;3124
0000dc  3028              ADDS     r0,r0,#0x28           ;3124
0000de  7041              STRB     r1,[r0,#1]            ;3124
0000e0  bf00              NOP                            ;3125
                  |L1.226|
0000e2  6820              LDR      r0,[r4,#0]            ;3125
0000e4  3020              ADDS     r0,r0,#0x20           ;3125
0000e6  7a00              LDRB     r0,[r0,#8]            ;3125
0000e8  21f8              MOVS     r1,#0xf8              ;3125
0000ea  4008              ANDS     r0,r0,r1              ;3125
0000ec  28f8              CMP      r0,#0xf8              ;3125
0000ee  d1f8              BNE      |L1.226|
0000f0  6820              LDR      r0,[r4,#0]            ;3127
0000f2  6840              LDR      r0,[r0,#4]            ;3127
0000f4  2102              MOVS     r1,#2                 ;3127
0000f6  4388              BICS     r0,r0,r1              ;3127
0000f8  6821              LDR      r1,[r4,#0]            ;3127
0000fa  6048              STR      r0,[r1,#4]            ;3127
0000fc  4620              MOV      r0,r4                 ;3128
0000fe  f7fffffe          BL       I2C_ListenP
000102  2004              MOVS     r0,#4                 ;3129
000104  86e0              STRH     r0,[r4,#0x36]         ;3129
000106  2034              MOVS     r0,#0x34              ;3130
000108  5d00              LDRB     r0,[r0,r4]            ;3130
00010a  2192              MOVS     r1,#0x92              ;3130
00010c  4308              ORRS     r0,r0,r1              ;3130
00010e  2134              MOVS     r1,#0x34              ;3130
000110  5508              STRB     r0,[r1,r4]            ;3130
000112  e1fc              B        |L1.1294|
                  |L1.276|
000114  bf00              NOP                            ;3134
000116  2034              MOVS     r0,#0x34              ;3135
000118  5d00              LDRB     r0,[r0,r4]            ;3135
00011a  2120              MOVS     r1,#0x20              ;3135
00011c  4388              BICS     r0,r0,r1              ;3135
00011e  2134              MOVS     r1,#0x34              ;3135
000120  5508              STRB     r0,[r1,r4]            ;3135
000122  8e60              LDRH     r0,[r4,#0x32]         ;3136
000124  2101              MOVS     r1,#1                 ;3136
000126  03c9              LSLS     r1,r1,#15             ;3136
000128  4008              ANDS     r0,r0,r1              ;3136
00012a  2800              CMP      r0,#0                 ;3136
00012c  d00c              BEQ      |L1.328|
00012e  2078              MOVS     r0,#0x78              ;3138
000130  6821              LDR      r1,[r4,#0]            ;3138
000132  7608              STRB     r0,[r1,#0x18]         ;3138
000134  6820              LDR      r0,[r4,#0]            ;3139
000136  6900              LDR      r0,[r0,#0x10]         ;3139
000138  2101              MOVS     r1,#1                 ;3139
00013a  07c9              LSLS     r1,r1,#31             ;3139
00013c  4308              ORRS     r0,r0,r1              ;3139
00013e  6821              LDR      r1,[r4,#0]            ;3139
000140  6108              STR      r0,[r1,#0x10]         ;3139
000142  f3bf8f6f          ISB                            ;3140
000146  e1e2              B        |L1.1294|
                  |L1.328|
000148  e043              B        |L1.466|
00014a  8e60              LDRH     r0,[r4,#0x32]         ;3146
00014c  2180              MOVS     r1,#0x80              ;3146
00014e  4008              ANDS     r0,r0,r1              ;3146
000150  2800              CMP      r0,#0                 ;3146
000152  d13d              BNE      |L1.464|
000154  8e60              LDRH     r0,[r4,#0x32]         ;3148
000156  0209              LSLS     r1,r1,#8              ;3148
000158  4008              ANDS     r0,r0,r1              ;3148
00015a  2800              CMP      r0,#0                 ;3148
00015c  d008              BEQ      |L1.368|
00015e  8e60              LDRH     r0,[r4,#0x32]         ;3150
000160  4388              BICS     r0,r0,r1              ;3150
000162  8660              STRH     r0,[r4,#0x32]         ;3150
000164  8be0              LDRH     r0,[r4,#0x1e]         ;3151
000166  6aa1              LDR      r1,[r4,#0x28]         ;3151
000168  6809              LDR      r1,[r1,#0]            ;3151
00016a  6ac9              LDR      r1,[r1,#0x2c]         ;3151
00016c  1a40              SUBS     r0,r0,r1              ;3151
00016e  8420              STRH     r0,[r4,#0x20]         ;3151
                  |L1.368|
000170  8c20              LDRH     r0,[r4,#0x20]         ;3153
000172  8be1              LDRH     r1,[r4,#0x1e]         ;3153
000174  4288              CMP      r0,r1                 ;3153
000176  da0a              BGE      |L1.398|
000178  8c20              LDRH     r0,[r4,#0x20]         ;3155
00017a  1c40              ADDS     r0,r0,#1              ;3155
00017c  8420              STRH     r0,[r4,#0x20]         ;3155
00017e  2004              MOVS     r0,#4                 ;3156
000180  86e0              STRH     r0,[r4,#0x36]         ;3156
000182  2034              MOVS     r0,#0x34              ;3157
000184  5d00              LDRB     r0,[r0,r4]            ;3157
000186  2110              MOVS     r1,#0x10              ;3157
000188  4308              ORRS     r0,r0,r1              ;3157
00018a  2134              MOVS     r1,#0x34              ;3157
00018c  5508              STRB     r0,[r1,r4]            ;3157
                  |L1.398|
00018e  6820              LDR      r0,[r4,#0]            ;3159
000190  6800              LDR      r0,[r0,#0]            ;3159
000192  2072              MOVS     r0,#0x72              ;3160
000194  6821              LDR      r1,[r4,#0]            ;3160
000196  7608              STRB     r0,[r1,#0x18]         ;3160
000198  2101              MOVS     r1,#1                 ;3161
00019a  6820              LDR      r0,[r4,#0]            ;3161
00019c  3028              ADDS     r0,r0,#0x28           ;3161
00019e  7041              STRB     r1,[r0,#1]            ;3161
0001a0  bf00              NOP                            ;3162
                  |L1.418|
0001a2  6820              LDR      r0,[r4,#0]            ;3162
0001a4  3020              ADDS     r0,r0,#0x20           ;3162
0001a6  7a00              LDRB     r0,[r0,#8]            ;3162
0001a8  21f8              MOVS     r1,#0xf8              ;3162
0001aa  4008              ANDS     r0,r0,r1              ;3162
0001ac  28f8              CMP      r0,#0xf8              ;3162
0001ae  d1f8              BNE      |L1.418|
0001b0  6820              LDR      r0,[r4,#0]            ;3164
0001b2  6840              LDR      r0,[r0,#4]            ;3164
0001b4  2102              MOVS     r1,#2                 ;3164
0001b6  4388              BICS     r0,r0,r1              ;3164
0001b8  6821              LDR      r1,[r4,#0]            ;3164
0001ba  6048              STR      r0,[r1,#4]            ;3164
0001bc  4620              MOV      r0,r4                 ;3165
0001be  f7fffffe          BL       I2C_ListenP
0001c2  2034              MOVS     r0,#0x34              ;3166
0001c4  5d00              LDRB     r0,[r0,r4]            ;3166
0001c6  0841              LSRS     r1,r0,#1              ;3166
0001c8  0049              LSLS     r1,r1,#1              ;3166
0001ca  2034              MOVS     r0,#0x34              ;3166
0001cc  5501              STRB     r1,[r0,r4]            ;3166
0001ce  e19e              B        |L1.1294|
                  |L1.464|
0001d0  bf00              NOP                            ;3170
                  |L1.466|
0001d2  bf00              NOP                            ;3171
0001d4  8c20              LDRH     r0,[r4,#0x20]         ;3172
0001d6  8be1              LDRH     r1,[r4,#0x1e]         ;3172
0001d8  4288              CMP      r0,r1                 ;3172
0001da  d155              BNE      |L1.648|
0001dc  8e60              LDRH     r0,[r4,#0x32]         ;3174
0001de  2103              MOVS     r1,#3                 ;3174
0001e0  0209              LSLS     r1,r1,#8              ;3174
0001e2  4008              ANDS     r0,r0,r1              ;3174
0001e4  21ff              MOVS     r1,#0xff              ;3174
0001e6  3101              ADDS     r1,#1                 ;3174
0001e8  4288              CMP      r0,r1                 ;3174
0001ea  d114              BNE      |L1.534|
0001ec  6820              LDR      r0,[r4,#0]            ;3176
0001ee  6840              LDR      r0,[r0,#4]            ;3176
0001f0  2102              MOVS     r1,#2                 ;3176
0001f2  4388              BICS     r0,r0,r1              ;3176
0001f4  6821              LDR      r1,[r4,#0]            ;3176
0001f6  6048              STR      r0,[r1,#4]            ;3176
0001f8  2071              MOVS     r0,#0x71              ;3177
0001fa  6821              LDR      r1,[r4,#0]            ;3177
0001fc  7608              STRB     r0,[r1,#0x18]         ;3177
0001fe  2101              MOVS     r1,#1                 ;3178
000200  6820              LDR      r0,[r4,#0]            ;3178
000202  3028              ADDS     r0,r0,#0x28           ;3178
000204  7041              STRB     r1,[r0,#1]            ;3178
000206  bf00              NOP                            ;3179
                  |L1.520|
000208  6820              LDR      r0,[r4,#0]            ;3179
00020a  3020              ADDS     r0,r0,#0x20           ;3179
00020c  7a00              LDRB     r0,[r0,#8]            ;3179
00020e  21f8              MOVS     r1,#0xf8              ;3179
000210  4008              ANDS     r0,r0,r1              ;3179
000212  2810              CMP      r0,#0x10              ;3179
000214  d1f8              BNE      |L1.520|
                  |L1.534|
000216  8e60              LDRH     r0,[r4,#0x32]         ;3182
000218  2103              MOVS     r1,#3                 ;3182
00021a  e007              B        |L1.556|
00021c  e14d              B        |L1.1210|
00021e  e122              B        |L1.1126|
000220  e120              B        |L1.1124|
000222  e0d3              B        |L1.972|
000224  e0bc              B        |L1.928|
000226  e092              B        |L1.846|
000228  e063              B        |L1.754|
00022a  e03b              B        |L1.676|
                  |L1.556|
00022c  0209              LSLS     r1,r1,#8              ;3182
00022e  4008              ANDS     r0,r0,r1              ;3182
000230  2101              MOVS     r1,#1                 ;3182
000232  0249              LSLS     r1,r1,#9              ;3182
000234  4288              CMP      r0,r1                 ;3182
000236  d10e              BNE      |L1.598|
000238  2072              MOVS     r0,#0x72              ;3184
00023a  6821              LDR      r1,[r4,#0]            ;3184
00023c  7608              STRB     r0,[r1,#0x18]         ;3184
00023e  2101              MOVS     r1,#1                 ;3185
000240  6820              LDR      r0,[r4,#0]            ;3185
000242  3028              ADDS     r0,r0,#0x28           ;3185
000244  7041              STRB     r1,[r0,#1]            ;3185
000246  bf00              NOP                            ;3186
                  |L1.584|
000248  6820              LDR      r0,[r4,#0]            ;3186
00024a  3020              ADDS     r0,r0,#0x20           ;3186
00024c  7a00              LDRB     r0,[r0,#8]            ;3186
00024e  21f8              MOVS     r1,#0xf8              ;3186
000250  4008              ANDS     r0,r0,r1              ;3186
000252  28f8              CMP      r0,#0xf8              ;3186
000254  d1f8              BNE      |L1.584|
                  |L1.598|
000256  6820              LDR      r0,[r4,#0]            ;3189
000258  6840              LDR      r0,[r0,#4]            ;3189
00025a  2102              MOVS     r1,#2                 ;3189
00025c  4388              BICS     r0,r0,r1              ;3189
00025e  6821              LDR      r1,[r4,#0]            ;3189
000260  6048              STR      r0,[r1,#4]            ;3189
000262  4620              MOV      r0,r4                 ;3190
000264  f7fffffe          BL       I2C_ListenP
000268  2034              MOVS     r0,#0x34              ;3191
00026a  5d00              LDRB     r0,[r0,r4]            ;3191
00026c  0841              LSRS     r1,r0,#1              ;3191
00026e  0049              LSLS     r1,r1,#1              ;3191
000270  2034              MOVS     r0,#0x34              ;3191
000272  5501              STRB     r1,[r0,r4]            ;3191
000274  6820              LDR      r0,[r4,#0]            ;3193
000276  6840              LDR      r0,[r0,#4]            ;3193
000278  2102              MOVS     r1,#2                 ;3193
00027a  4008              ANDS     r0,r0,r1              ;3193
00027c  2800              CMP      r0,#0                 ;3193
00027e  d002              BEQ      |L1.646|
000280  4620              MOV      r0,r4                 ;3194
000282  f7fffffe          BL       MID_I2C_MasterTxCpltCallback
                  |L1.646|
000286  e142              B        |L1.1294|
                  |L1.648|
000288  8c21              LDRH     r1,[r4,#0x20]         ;3199
00028a  69a0              LDR      r0,[r4,#0x18]         ;3199
00028c  5c41              LDRB     r1,[r0,r1]            ;3199
00028e  6820              LDR      r0,[r4,#0]            ;3199
000290  3020              ADDS     r0,r0,#0x20           ;3199
000292  7301              STRB     r1,[r0,#0xc]          ;3199
000294  8c20              LDRH     r0,[r4,#0x20]         ;3200
000296  1c40              ADDS     r0,r0,#1              ;3200
000298  8420              STRH     r0,[r4,#0x20]         ;3200
00029a  2101              MOVS     r1,#1                 ;3201
00029c  6820              LDR      r0,[r4,#0]            ;3201
00029e  3028              ADDS     r0,r0,#0x28           ;3201
0002a0  7041              STRB     r1,[r0,#1]            ;3201
0002a2  e134              B        |L1.1294|
                  |L1.676|
0002a4  2002              MOVS     r0,#2                 ;3205
0002a6  86e0              STRH     r0,[r4,#0x36]         ;3205
0002a8  2034              MOVS     r0,#0x34              ;3206
0002aa  5d00              LDRB     r0,[r0,r4]            ;3206
0002ac  2110              MOVS     r1,#0x10              ;3206
0002ae  4308              ORRS     r0,r0,r1              ;3206
0002b0  2134              MOVS     r1,#0x34              ;3206
0002b2  5508              STRB     r0,[r1,r4]            ;3206
0002b4  6820              LDR      r0,[r4,#0]            ;3208
0002b6  6840              LDR      r0,[r0,#4]            ;3208
0002b8  2102              MOVS     r1,#2                 ;3208
0002ba  4008              ANDS     r0,r0,r1              ;3208
0002bc  2800              CMP      r0,#0                 ;3208
0002be  d002              BEQ      |L1.710|
0002c0  4620              MOV      r0,r4                 ;3209
0002c2  f7fffffe          BL       MID_I2C_ErrorCallback
                  |L1.710|
0002c6  6820              LDR      r0,[r4,#0]            ;3211
0002c8  6800              LDR      r0,[r0,#0]            ;3211
0002ca  6820              LDR      r0,[r4,#0]            ;3212
0002cc  6840              LDR      r0,[r0,#4]            ;3212
0002ce  2102              MOVS     r1,#2                 ;3212
0002d0  4388              BICS     r0,r0,r1              ;3212
0002d2  6821              LDR      r1,[r4,#0]            ;3212
0002d4  6048              STR      r0,[r1,#4]            ;3212
0002d6  4620              MOV      r0,r4                 ;3213
0002d8  f7fffffe          BL       I2C_ListenP
0002dc  2034              MOVS     r0,#0x34              ;3214
0002de  5d00              LDRB     r0,[r0,r4]            ;3214
0002e0  0841              LSRS     r1,r0,#1              ;3214
0002e2  0049              LSLS     r1,r1,#1              ;3214
0002e4  2034              MOVS     r0,#0x34              ;3214
0002e6  5501              STRB     r1,[r0,r4]            ;3214
0002e8  2101              MOVS     r1,#1                 ;3215
0002ea  6820              LDR      r0,[r4,#0]            ;3215
0002ec  3028              ADDS     r0,r0,#0x28           ;3215
0002ee  7041              STRB     r1,[r0,#1]            ;3215
0002f0  e10d              B        |L1.1294|
                  |L1.754|
0002f2  2034              MOVS     r0,#0x34              ;3219
0002f4  5d00              LDRB     r0,[r0,r4]            ;3219
0002f6  2120              MOVS     r1,#0x20              ;3219
0002f8  4388              BICS     r0,r0,r1              ;3219
0002fa  2134              MOVS     r1,#0x34              ;3219
0002fc  5508              STRB     r0,[r1,r4]            ;3219
0002fe  2074              MOVS     r0,#0x74              ;3220
000300  6821              LDR      r1,[r4,#0]            ;3220
000302  7608              STRB     r0,[r1,#0x18]         ;3220
000304  8c21              LDRH     r1,[r4,#0x20]         ;3221
000306  8be0              LDRH     r0,[r4,#0x1e]         ;3221
000308  1e40              SUBS     r0,r0,#1              ;3221
00030a  4281              CMP      r1,r0                 ;3221
00030c  db07              BLT      |L1.798|
00030e  2070              MOVS     r0,#0x70              ;3223
000310  6821              LDR      r1,[r4,#0]            ;3223
000312  7608              STRB     r0,[r1,#0x18]         ;3223
000314  2101              MOVS     r1,#1                 ;3224
000316  6820              LDR      r0,[r4,#0]            ;3224
000318  3028              ADDS     r0,r0,#0x28           ;3224
00031a  7041              STRB     r1,[r0,#1]            ;3224
00031c  e0f7              B        |L1.1294|
                  |L1.798|
00031e  8e60              LDRH     r0,[r4,#0x32]         ;3228
000320  2101              MOVS     r1,#1                 ;3228
000322  0389              LSLS     r1,r1,#14             ;3228
000324  4008              ANDS     r0,r0,r1              ;3228
000326  2800              CMP      r0,#0                 ;3228
000328  d00c              BEQ      |L1.836|
00032a  2078              MOVS     r0,#0x78              ;3235
00032c  6821              LDR      r1,[r4,#0]            ;3235
00032e  7608              STRB     r0,[r1,#0x18]         ;3235
000330  6820              LDR      r0,[r4,#0]            ;3236
000332  6900              LDR      r0,[r0,#0x10]         ;3236
000334  2101              MOVS     r1,#1                 ;3236
000336  0789              LSLS     r1,r1,#30             ;3236
000338  4308              ORRS     r0,r0,r1              ;3236
00033a  6821              LDR      r1,[r4,#0]            ;3236
00033c  6108              STR      r0,[r1,#0x10]         ;3236
00033e  f3bf8f6f          ISB                            ;3237
000342  e0e4              B        |L1.1294|
                  |L1.836|
000344  2101              MOVS     r1,#1                 ;3240
000346  6820              LDR      r0,[r4,#0]            ;3240
000348  3028              ADDS     r0,r0,#0x28           ;3240
00034a  7041              STRB     r1,[r0,#1]            ;3240
00034c  e0df              B        |L1.1294|
                  |L1.846|
00034e  2004              MOVS     r0,#4                 ;3244
000350  86e0              STRH     r0,[r4,#0x36]         ;3244
000352  2034              MOVS     r0,#0x34              ;3245
000354  5d00              LDRB     r0,[r0,r4]            ;3245
000356  2110              MOVS     r1,#0x10              ;3245
000358  4308              ORRS     r0,r0,r1              ;3245
00035a  2134              MOVS     r1,#0x34              ;3245
00035c  5508              STRB     r0,[r1,r4]            ;3245
00035e  6820              LDR      r0,[r4,#0]            ;3246
000360  6840              LDR      r0,[r0,#4]            ;3246
000362  2102              MOVS     r1,#2                 ;3246
000364  4388              BICS     r0,r0,r1              ;3246
000366  6821              LDR      r1,[r4,#0]            ;3246
000368  6048              STR      r0,[r1,#4]            ;3246
00036a  6820              LDR      r0,[r4,#0]            ;3247
00036c  6800              LDR      r0,[r0,#0]            ;3247
00036e  2072              MOVS     r0,#0x72              ;3248
000370  6821              LDR      r1,[r4,#0]            ;3248
000372  7608              STRB     r0,[r1,#0x18]         ;3248
000374  2101              MOVS     r1,#1                 ;3249
000376  6820              LDR      r0,[r4,#0]            ;3249
000378  3028              ADDS     r0,r0,#0x28           ;3249
00037a  7041              STRB     r1,[r0,#1]            ;3249
00037c  bf00              NOP                            ;3250
                  |L1.894|
00037e  6820              LDR      r0,[r4,#0]            ;3250
000380  3020              ADDS     r0,r0,#0x20           ;3250
000382  7a00              LDRB     r0,[r0,#8]            ;3250
000384  21f8              MOVS     r1,#0xf8              ;3250
000386  4008              ANDS     r0,r0,r1              ;3250
000388  28f8              CMP      r0,#0xf8              ;3250
00038a  d1f8              BNE      |L1.894|
00038c  4620              MOV      r0,r4                 ;3251
00038e  f7fffffe          BL       I2C_ListenP
000392  2034              MOVS     r0,#0x34              ;3252
000394  5d00              LDRB     r0,[r0,r4]            ;3252
000396  0841              LSRS     r1,r0,#1              ;3252
000398  0049              LSLS     r1,r1,#1              ;3252
00039a  2034              MOVS     r0,#0x34              ;3252
00039c  5501              STRB     r1,[r0,r4]            ;3252
00039e  e0b6              B        |L1.1294|
                  |L1.928|
0003a0  6820              LDR      r0,[r4,#0]            ;3256
0003a2  3020              ADDS     r0,r0,#0x20           ;3256
0003a4  7b00              LDRB     r0,[r0,#0xc]          ;3256
0003a6  8c22              LDRH     r2,[r4,#0x20]         ;3256
0003a8  69a1              LDR      r1,[r4,#0x18]         ;3256
0003aa  5488              STRB     r0,[r1,r2]            ;3256
0003ac  8c20              LDRH     r0,[r4,#0x20]         ;3257
0003ae  1c40              ADDS     r0,r0,#1              ;3257
0003b0  8420              STRH     r0,[r4,#0x20]         ;3257
0003b2  8c21              LDRH     r1,[r4,#0x20]         ;3258
0003b4  8be0              LDRH     r0,[r4,#0x1e]         ;3258
0003b6  1e40              SUBS     r0,r0,#1              ;3258
0003b8  4281              CMP      r1,r0                 ;3258
0003ba  db02              BLT      |L1.962|
0003bc  2070              MOVS     r0,#0x70              ;3259
0003be  6821              LDR      r1,[r4,#0]            ;3259
0003c0  7608              STRB     r0,[r1,#0x18]         ;3259
                  |L1.962|
0003c2  2101              MOVS     r1,#1                 ;3260
0003c4  6820              LDR      r0,[r4,#0]            ;3260
0003c6  3028              ADDS     r0,r0,#0x28           ;3260
0003c8  7041              STRB     r1,[r0,#1]            ;3260
0003ca  e0a0              B        |L1.1294|
                  |L1.972|
0003cc  6820              LDR      r0,[r4,#0]            ;3264
0003ce  3020              ADDS     r0,r0,#0x20           ;3264
0003d0  7b00              LDRB     r0,[r0,#0xc]          ;3264
0003d2  8c22              LDRH     r2,[r4,#0x20]         ;3264
0003d4  69a1              LDR      r1,[r4,#0x18]         ;3264
0003d6  5488              STRB     r0,[r1,r2]            ;3264
0003d8  8c20              LDRH     r0,[r4,#0x20]         ;3265
0003da  1c40              ADDS     r0,r0,#1              ;3265
0003dc  8420              STRH     r0,[r4,#0x20]         ;3265
0003de  6820              LDR      r0,[r4,#0]            ;3266
0003e0  6840              LDR      r0,[r0,#4]            ;3266
0003e2  2102              MOVS     r1,#2                 ;3266
0003e4  4388              BICS     r0,r0,r1              ;3266
0003e6  6821              LDR      r1,[r4,#0]            ;3266
0003e8  6048              STR      r0,[r1,#4]            ;3266
0003ea  8e60              LDRH     r0,[r4,#0x32]         ;3267
0003ec  2103              MOVS     r1,#3                 ;3267
0003ee  0209              LSLS     r1,r1,#8              ;3267
0003f0  4008              ANDS     r0,r0,r1              ;3267
0003f2  21ff              MOVS     r1,#0xff              ;3267
0003f4  3101              ADDS     r1,#1                 ;3267
0003f6  4288              CMP      r0,r1                 ;3267
0003f8  d10f              BNE      |L1.1050|
0003fa  2071              MOVS     r0,#0x71              ;3269
0003fc  6821              LDR      r1,[r4,#0]            ;3269
0003fe  7608              STRB     r0,[r1,#0x18]         ;3269
000400  2101              MOVS     r1,#1                 ;3270
000402  6820              LDR      r0,[r4,#0]            ;3270
000404  3028              ADDS     r0,r0,#0x28           ;3270
000406  7041              STRB     r1,[r0,#1]            ;3270
000408  bf00              NOP                            ;3271
                  |L1.1034|
00040a  6820              LDR      r0,[r4,#0]            ;3271
00040c  3020              ADDS     r0,r0,#0x20           ;3271
00040e  7a00              LDRB     r0,[r0,#8]            ;3271
000410  21f8              MOVS     r1,#0xf8              ;3271
000412  4008              ANDS     r0,r0,r1              ;3271
000414  2810              CMP      r0,#0x10              ;3271
000416  d1f8              BNE      |L1.1034|
000418  e00e              B        |L1.1080|
                  |L1.1050|
00041a  2072              MOVS     r0,#0x72              ;3275
00041c  6821              LDR      r1,[r4,#0]            ;3275
00041e  7608              STRB     r0,[r1,#0x18]         ;3275
000420  2101              MOVS     r1,#1                 ;3276
000422  6820              LDR      r0,[r4,#0]            ;3276
000424  3028              ADDS     r0,r0,#0x28           ;3276
000426  7041              STRB     r1,[r0,#1]            ;3276
000428  bf00              NOP                            ;3277
                  |L1.1066|
00042a  6820              LDR      r0,[r4,#0]            ;3277
00042c  3020              ADDS     r0,r0,#0x20           ;3277
00042e  7a00              LDRB     r0,[r0,#8]            ;3277
000430  21f8              MOVS     r1,#0xf8              ;3277
000432  4008              ANDS     r0,r0,r1              ;3277
000434  28f8              CMP      r0,#0xf8              ;3277
000436  d1f8              BNE      |L1.1066|
                  |L1.1080|
000438  4620              MOV      r0,r4                 ;3279
00043a  f7fffffe          BL       I2C_ListenP
00043e  2034              MOVS     r0,#0x34              ;3280
000440  5d00              LDRB     r0,[r0,r4]            ;3280
000442  0841              LSRS     r1,r0,#1              ;3280
000444  0049              LSLS     r1,r1,#1              ;3280
000446  2034              MOVS     r0,#0x34              ;3280
000448  5501              STRB     r1,[r0,r4]            ;3280
00044a  6820              LDR      r0,[r4,#0]            ;3282
00044c  6840              LDR      r0,[r0,#4]            ;3282
00044e  2102              MOVS     r1,#2                 ;3282
000450  4008              ANDS     r0,r0,r1              ;3282
000452  2800              CMP      r0,#0                 ;3282
000454  d002              BEQ      |L1.1116|
000456  4620              MOV      r0,r4                 ;3283
000458  f7fffffe          BL       MID_I2C_MasterRxCpltCallback
                  |L1.1116|
00045c  e057              B        |L1.1294|
00045e  0000              DCW      0x0000
                  |L1.1120|
                          DCD      0x00800008
                  |L1.1124|
000464  bf00              NOP                            ;3289
                  |L1.1126|
000466  2002              MOVS     r0,#2                 ;3291
000468  86e0              STRH     r0,[r4,#0x36]         ;3291
00046a  2034              MOVS     r0,#0x34              ;3292
00046c  5d00              LDRB     r0,[r0,r4]            ;3292
00046e  2130              MOVS     r1,#0x30              ;3292
000470  4308              ORRS     r0,r0,r1              ;3292
000472  2134              MOVS     r1,#0x34              ;3292
000474  5508              STRB     r0,[r1,r4]            ;3292
000476  6820              LDR      r0,[r4,#0]            ;3294
000478  6840              LDR      r0,[r0,#4]            ;3294
00047a  2102              MOVS     r1,#2                 ;3294
00047c  4008              ANDS     r0,r0,r1              ;3294
00047e  2800              CMP      r0,#0                 ;3294
000480  d008              BEQ      |L1.1172|
000482  6820              LDR      r0,[r4,#0]            ;3295
000484  8980              LDRH     r0,[r0,#0xc]          ;3295
000486  4923              LDR      r1,|L1.1300|
000488  4008              ANDS     r0,r0,r1              ;3295
00048a  4602              MOV      r2,r0                 ;3295
00048c  2101              MOVS     r1,#1                 ;3295
00048e  4620              MOV      r0,r4                 ;3295
000490  f7fffffe          BL       MID_I2C_AddrCallback
                  |L1.1172|
000494  2074              MOVS     r0,#0x74              ;3297
000496  6821              LDR      r1,[r4,#0]            ;3297
000498  7608              STRB     r0,[r1,#0x18]         ;3297
00049a  6820              LDR      r0,[r4,#0]            ;3298
00049c  6840              LDR      r0,[r0,#4]            ;3298
00049e  2102              MOVS     r1,#2                 ;3298
0004a0  4388              BICS     r0,r0,r1              ;3298
0004a2  6821              LDR      r1,[r4,#0]            ;3298
0004a4  6048              STR      r0,[r1,#4]            ;3298
0004a6  481c              LDR      r0,|L1.1304|
0004a8  6821              LDR      r1,[r4,#0]            ;3299
0004aa  6008              STR      r0,[r1,#0]            ;3299
0004ac  2034              MOVS     r0,#0x34              ;3300
0004ae  5d00              LDRB     r0,[r0,r4]            ;3300
0004b0  0841              LSRS     r1,r0,#1              ;3300
0004b2  0049              LSLS     r1,r1,#1              ;3300
0004b4  2034              MOVS     r0,#0x34              ;3300
0004b6  5501              STRB     r1,[r0,r4]            ;3300
0004b8  e029              B        |L1.1294|
                  |L1.1210|
0004ba  2002              MOVS     r0,#2                 ;3305
0004bc  86e0              STRH     r0,[r4,#0x36]         ;3305
0004be  2034              MOVS     r0,#0x34              ;3306
0004c0  5d00              LDRB     r0,[r0,r4]            ;3306
0004c2  2130              MOVS     r1,#0x30              ;3306
0004c4  4308              ORRS     r0,r0,r1              ;3306
0004c6  2134              MOVS     r1,#0x34              ;3306
0004c8  5508              STRB     r0,[r1,r4]            ;3306
0004ca  6820              LDR      r0,[r4,#0]            ;3308
0004cc  6840              LDR      r0,[r0,#4]            ;3308
0004ce  2102              MOVS     r1,#2                 ;3308
0004d0  4008              ANDS     r0,r0,r1              ;3308
0004d2  2800              CMP      r0,#0                 ;3308
0004d4  d008              BEQ      |L1.1256|
0004d6  6820              LDR      r0,[r4,#0]            ;3309
0004d8  8980              LDRH     r0,[r0,#0xc]          ;3309
0004da  490e              LDR      r1,|L1.1300|
0004dc  4008              ANDS     r0,r0,r1              ;3309
0004de  4602              MOV      r2,r0                 ;3309
0004e0  2100              MOVS     r1,#0                 ;3309
0004e2  4620              MOV      r0,r4                 ;3309
0004e4  f7fffffe          BL       MID_I2C_AddrCallback
                  |L1.1256|
0004e8  2074              MOVS     r0,#0x74              ;3311
0004ea  6821              LDR      r1,[r4,#0]            ;3311
0004ec  7608              STRB     r0,[r1,#0x18]         ;3311
0004ee  6820              LDR      r0,[r4,#0]            ;3312
0004f0  6840              LDR      r0,[r0,#4]            ;3312
0004f2  2102              MOVS     r1,#2                 ;3312
0004f4  4388              BICS     r0,r0,r1              ;3312
0004f6  6821              LDR      r1,[r4,#0]            ;3312
0004f8  6048              STR      r0,[r1,#4]            ;3312
0004fa  4807              LDR      r0,|L1.1304|
0004fc  6821              LDR      r1,[r4,#0]            ;3313
0004fe  6008              STR      r0,[r1,#0]            ;3313
000500  2034              MOVS     r0,#0x34              ;3314
000502  5d00              LDRB     r0,[r0,r4]            ;3314
000504  0841              LSRS     r1,r0,#1              ;3314
000506  0049              LSLS     r1,r1,#1              ;3314
000508  2034              MOVS     r0,#0x34              ;3314
00050a  5501              STRB     r1,[r0,r4]            ;3314
00050c  bf00              NOP                            ;3315
                  |L1.1294|
00050e  bf00              NOP                            ;3110
000510  2000              MOVS     r0,#0                 ;3317
000512  e57e              B        |L1.18|
;;;3319   
                          ENDP

                  |L1.1300|
                          DCD      0x0000fffe
                  |L1.1304|
                          DCD      0x00400008

                          AREA ||i.I2C_BytemodeSlaveEventHandle||, CODE, READONLY, ALIGN=2

                  I2C_BytemodeSlaveEventHandle PROC
;;;3362    */
;;;3363   static MID_StatusTypeDef I2C_BytemodeSlaveEventHandle(I2C_HandleTypeDef *mI2C)
000000  b570              PUSH     {r4-r6,lr}
;;;3364   {
000002  4604              MOV      r4,r0
;;;3365       uint8_t lState;
;;;3366   
;;;3367       if((mI2C->Instance->STA2.W & I2C_STA2_EVENTF2_mask_w) == 0)
000004  6820              LDR      r0,[r4,#0]
000006  6a80              LDR      r0,[r0,#0x28]
000008  21ff              MOVS     r1,#0xff
00000a  3101              ADDS     r1,#1
00000c  4008              ANDS     r0,r0,r1
00000e  2800              CMP      r0,#0
000010  d100              BNE      |L2.20|
                  |L2.18|
;;;3368           return MID_OK;
;;;3369   
;;;3370       lState = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;3371       switch(lState){
;;;3372           case 0x00:  // Bus Error
;;;3373               mI2C->ErrorCode = MID_I2C_ERROR_BERR;
;;;3374               mI2C->State |= MID_I2C_STATE_ERROR;
;;;3375   
;;;3376               if((mI2C->Instance->INT.W & I2C_IT_EVENT) != 0)
;;;3377                   MID_I2C_ErrorCallback(mI2C);
;;;3378   
;;;3379               __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3380               __DRV_I2C_CLEAR_FLAG(mI2C, I2C_FLAG_BERR | I2C_FLAG_ERR);
;;;3381               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3382               I2C_ListenP(mI2C);
;;;3383               mI2C->State &= ~MID_I2C_STATE_BUSY;
;;;3384               break;
;;;3385   
;;;3386           case 0x38:  // Arbitration lost
;;;3387               mI2C->ErrorCode = MID_I2C_ERROR_ARLO;
;;;3388               mI2C->State |= MID_I2C_STATE_ERROR;
;;;3389   
;;;3390               if((mI2C->Instance->INT.W & I2C_IT_EVENT) != 0)
;;;3391                   MID_I2C_ErrorCallback(mI2C);
;;;3392   
;;;3393               __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3394               __DRV_I2C_CLEAR_FLAG(mI2C, I2C_FLAG_ALOS | I2C_FLAG_ERR);
;;;3395               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3396               I2C_ListenP(mI2C);
;;;3397               mI2C->State &= ~MID_I2C_STATE_BUSY;
;;;3398               break;
;;;3399   
;;;3400           case 0x68:  // Arbitration lost in SLA+R/W as master,
;;;3401                       // Own SLA+W has been Received ACK has bee returned
;;;3402           case 0x78:  // Arbitration lost in SLA+R/W as master,
;;;3403                       // General Call address has been received ACK has been returned
;;;3404           case 0x60:  // Own SLA+W has bee Received ACK has been returned
;;;3405           case 0x70:  // General Call address has been received ACK has been returned
;;;3406               if((mI2C->Instance->INT.W & I2C_IT_EVENT) != 0)
;;;3407                   MID_I2C_AddrCallback(mI2C, I2C_DIRECTION_RECEIVE, (mI2C->Instance->SAC.H[0] & 0xFFFE));
;;;3408   
;;;3409               if(mI2C->XferCount != 0)
;;;3410               {
;;;3411                   __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3412                   break;
;;;3413               }
;;;3414               mI2C->State &= ~MID_I2C_STATE_LISTEN;
;;;3415               if((mI2C->Mode & MID_I2C_MODE_DMA_SRX) != 0)
;;;3416               {
;;;3417                   __DRV_I2C_PSTA_PSTO_PAA_001(mI2C);
;;;3418                   mI2C->Instance->CR0.W |= I2C_CR0_DMA_RXEN_mask_w;
;;;3419                   __ISB();
;;;3420               }
;;;3421               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3422               break;
;;;3423   
;;;3424           case 0x80:  // Data byte has been received ACK has been return
;;;3425           case 0x90:  // Previously address with General Call address
;;;3426                       // Data byte has been received ACK has been return
;;;3427               mI2C->pBuffPtr[mI2C->XferCount] = __DRV_I2C_READ_SBUF(mI2C);
;;;3428               mI2C->XferCount++;
;;;3429               if(mI2C->XferCount >= (mI2C->XferSize))
;;;3430                   __DRV_I2C_STA_STO_AA_000(mI2C);
;;;3431               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3432               break;
;;;3433   
;;;3434           case 0x88:  // Data byte has been received Not ACK has been return
;;;3435           case 0x98:  // Previously address with General Call address
;;;3436                       // Data byte has been received Not ACK has been return
;;;3437               mI2C->XferCount++;
;;;3438               mI2C->ErrorCode = MID_I2C_ERROR_OVR;
;;;3439               mI2C->State |= MID_I2C_STATE_ERROR;
;;;3440               __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3441               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3442               I2C_ListenP(mI2C);
;;;3443               mI2C->State &= ~MID_I2C_STATE_BUSY;
;;;3444               break;
;;;3445   
;;;3446           case 0xA0:  // A STOP or repeated START has been received while will addressed as SLV/REC
;;;3447               if((mI2C->Mode & (MID_I2C_MODE_DMA_SRX | MID_I2C_MODE_DMA_STX)) != 0)
;;;3448               {
;;;3449                   if((mI2C->hdmarx->Instance->CH0CNT.W == 0) && ((mI2C->hdmarx->Instance->CH0A.W & DMA_CH0A_CH0_REQ_enable_w) != 0))
;;;3450                       mI2C->XferCount = mI2C->hdmarx->Instance->CH0CNT.W;
;;;3451                   else
;;;3452                       mI2C->XferCount = (mI2C->XferSize - mI2C->hdmarx->Instance->CH0CNT.W);
;;;3453               }
;;;3454   
;;;3455               if (mI2C->XferCount == 0)
;;;3456               {
;;;3457                   mI2C->State |= MID_I2C_STATE_LISTEN;
;;;3458                   __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3459                   break;
;;;3460               }
;;;3461   
;;;3462               if(mI2C->XferCount < (mI2C->XferSize - 1))
;;;3463               {
;;;3464                   mI2C->ErrorCode = MID_I2C_ERROR_NACKF;
;;;3465                   //mI2C->State.B |= MID_I2C_STATE_ERROR;
;;;3466               }
;;;3467   
;;;3468               __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3469               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3470               I2C_ListenP(mI2C);
;;;3471               mI2C->State &= ~MID_I2C_STATE_BUSY;
;;;3472               break;
;;;3473   
;;;3474           case 0xA8:  // Own SLA+R has bee Received ACK has been returned
;;;3475           case 0xB0:  // Arbitration lost in SLA+R/W as master,
;;;3476                       // Own SLA+R has been Received ACK has bee returned
;;;3477               if((mI2C->Instance->INT.W & I2C_IT_EVENT) != 0)
;;;3478                   MID_I2C_AddrCallback(mI2C, I2C_DIRECTION_TRANSMIT, (mI2C->Instance->SAC.H[0] & 0xFFFE));
;;;3479   
;;;3480               if(mI2C->XferCount != 0)
;;;3481               {
;;;3482                   __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3483                   break;
;;;3484               }
;;;3485   
;;;3486               mI2C->State &= ~MID_I2C_STATE_LISTEN;
;;;3487               if((mI2C->Mode & MID_I2C_MODE_DMA_STX) != 0)
;;;3488               {
;;;3489                   __DRV_I2C_PSTA_PSTO_PAA_000(mI2C);
;;;3490                   mI2C->Instance->CR0.W |= I2C_CR0_DMA_TXEN_mask_w;
;;;3491                   __ISB();
;;;3492                   break;
;;;3493               }
;;;3494   
;;;3495           case 0xB8:  // Data byte in SIDAT has been transmitted ACK has been received
;;;3496               if(mI2C->XferCount < mI2C->XferSize)
;;;3497               {
;;;3498                   __DRV_I2C_WRITE_SBUF(mI2C, (mI2C->pBuffPtr[mI2C->XferCount]));
;;;3499                   mI2C->XferCount ++;
;;;3500               }
;;;3501               else
;;;3502               {
;;;3503                   mI2C->ErrorCode = MID_I2C_ERROR_OVR;
;;;3504                   mI2C->State |= MID_I2C_STATE_ERROR;
;;;3505                   __DRV_I2C_STA_STO_AA_000(mI2C);
;;;3506                   __DRV_I2C_WRITE_SBUF(mI2C, 0xFF);
;;;3507               }
;;;3508               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3509               break;
;;;3510   
;;;3511           case 0xC0:  // Data byte or Last data byte in SIDAT has been transmitted Not ACK has been received
;;;3512               if((mI2C->Mode & MID_I2C_MODE_DMA_STX) != 0)
;;;3513                   mI2C->XferCount = (mI2C->XferSize - mI2C->hdmatx->Instance->CH0CNT.H[0]);
;;;3514   
;;;3515               if(mI2C->XferCount < (mI2C->XferSize))
;;;3516               {
;;;3517                   mI2C->ErrorCode = MID_I2C_ERROR_NACKF;
;;;3518                   mI2C->State |= MID_I2C_STATE_ERROR;
;;;3519               }
;;;3520               __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3521               __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ERR));
;;;3522               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3523               I2C_ListenP(mI2C);
;;;3524               mI2C->State &= ~MID_I2C_STATE_BUSY;
;;;3525               break;
;;;3526   
;;;3527           case 0xC8:  // Last Data byte in SIDAT has been transmitted ACK has been received
;;;3528               if(mI2C->XferCount >= (mI2C->XferSize - 1))
;;;3529               {
;;;3530                   mI2C->ErrorCode = MID_I2C_ERROR_OVR;
;;;3531                   mI2C->State |= MID_I2C_STATE_ERROR;
;;;3532               }
;;;3533   
;;;3534               do{
;;;3535                   if((mI2C->Instance->STA2.B[1] & I2C_STA2_EVENTF2_mask_b1) != 0)
;;;3536                   {
;;;3537                       mI2C->XferCount ++;
;;;3538                       __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3539                   }
;;;3540               }while(__DRV_I2C_GET_EVENTCODE(mI2C) == 0xC8);
;;;3541   
;;;3542               __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_EVENT);
;;;3543               __DRV_I2C_CLEAR_EVENT_FLAG(mI2C);
;;;3544               I2C_ListenP(mI2C);
;;;3545               mI2C->State &= ~MID_I2C_STATE_BUSY;
;;;3546               break;
;;;3547       }
;;;3548       return MID_OK;
;;;3549   }
000012  bd70              POP      {r4-r6,pc}
                  |L2.20|
000014  6820              LDR      r0,[r4,#0]            ;3370
000016  3020              ADDS     r0,r0,#0x20           ;3370
000018  7a05              LDRB     r5,[r0,#8]            ;3370
00001a  21f8              MOVS     r1,#0xf8              ;3370
00001c  400d              ANDS     r5,r5,r1              ;3370
00001e  0768              LSLS     r0,r5,#29             ;3371
000020  0f40              LSRS     r0,r0,#29             ;3371
000022  2800              CMP      r0,#0                 ;3371
000024  d138              BNE      |L2.152|
000026  10e8              ASRS     r0,r5,#3              ;3371
000028  0003              MOVS     r3,r0                 ;3371
00002a  f7fffffe          BL       __ARM_common_switch8
00002e  1a0e              DCB      0x1a,0x0e
000030  35353535          DCB      0x35,0x35,0x35,0x35
000034  35353635          DCB      0x35,0x35,0x36,0x35
000038  35353560          DCB      0x35,0x35,0x35,0x60
00003c  5e615f97          DCB      0x5e,0x61,0x5f,0x97
000040  ad98aecd          DCB      0xad,0x98,0xae,0xcd
000044  fdfcfbfa          DCB      0xfd,0xfc,0xfb,0xfa
000048  f935              DCB      0xf9,0x35
00004a  2001              MOVS     r0,#1                 ;3373
00004c  86e0              STRH     r0,[r4,#0x36]         ;3373
00004e  2034              MOVS     r0,#0x34              ;3374
000050  5d00              LDRB     r0,[r0,r4]            ;3374
000052  2110              MOVS     r1,#0x10              ;3374
000054  4308              ORRS     r0,r0,r1              ;3374
000056  2134              MOVS     r1,#0x34              ;3374
000058  5508              STRB     r0,[r1,r4]            ;3374
00005a  6820              LDR      r0,[r4,#0]            ;3376
00005c  6840              LDR      r0,[r0,#4]            ;3376
00005e  2102              MOVS     r1,#2                 ;3376
000060  4008              ANDS     r0,r0,r1              ;3376
000062  2800              CMP      r0,#0                 ;3376
000064  d002              BEQ      |L2.108|
000066  4620              MOV      r0,r4                 ;3377
000068  f7fffffe          BL       MID_I2C_ErrorCallback
                  |L2.108|
00006c  6820              LDR      r0,[r4,#0]            ;3379
00006e  6840              LDR      r0,[r0,#4]            ;3379
000070  2102              MOVS     r1,#2                 ;3379
000072  4388              BICS     r0,r0,r1              ;3379
000074  6821              LDR      r1,[r4,#0]            ;3379
000076  6048              STR      r0,[r1,#4]            ;3379
000078  48d9              LDR      r0,|L2.992|
00007a  6821              LDR      r1,[r4,#0]            ;3380
00007c  6008              STR      r0,[r1,#0]            ;3380
00007e  2101              MOVS     r1,#1                 ;3381
000080  6820              LDR      r0,[r4,#0]            ;3381
000082  3028              ADDS     r0,r0,#0x28           ;3381
000084  7041              STRB     r1,[r0,#1]            ;3381
000086  4620              MOV      r0,r4                 ;3382
000088  f7fffffe          BL       I2C_ListenP
00008c  2034              MOVS     r0,#0x34              ;3383
00008e  5d00              LDRB     r0,[r0,r4]            ;3383
000090  0841              LSRS     r1,r0,#1              ;3383
000092  0049              LSLS     r1,r1,#1              ;3383
000094  2034              MOVS     r0,#0x34              ;3383
000096  5501              STRB     r1,[r0,r4]            ;3383
                  |L2.152|
000098  e19e              B        |L2.984|
00009a  2002              MOVS     r0,#2                 ;3387
00009c  86e0              STRH     r0,[r4,#0x36]         ;3387
00009e  2034              MOVS     r0,#0x34              ;3388
0000a0  5d00              LDRB     r0,[r0,r4]            ;3388
0000a2  2110              MOVS     r1,#0x10              ;3388
0000a4  4308              ORRS     r0,r0,r1              ;3388
0000a6  2134              MOVS     r1,#0x34              ;3388
0000a8  5508              STRB     r0,[r1,r4]            ;3388
0000aa  6820              LDR      r0,[r4,#0]            ;3390
0000ac  6840              LDR      r0,[r0,#4]            ;3390
0000ae  2102              MOVS     r1,#2                 ;3390
0000b0  4008              ANDS     r0,r0,r1              ;3390
0000b2  2800              CMP      r0,#0                 ;3390
0000b4  d002              BEQ      |L2.188|
0000b6  4620              MOV      r0,r4                 ;3391
0000b8  f7fffffe          BL       MID_I2C_ErrorCallback
                  |L2.188|
0000bc  6820              LDR      r0,[r4,#0]            ;3393
0000be  6840              LDR      r0,[r0,#4]            ;3393
0000c0  2102              MOVS     r1,#2                 ;3393
0000c2  4388              BICS     r0,r0,r1              ;3393
0000c4  6821              LDR      r1,[r4,#0]            ;3393
0000c6  6048              STR      r0,[r1,#4]            ;3393
0000c8  48c6              LDR      r0,|L2.996|
0000ca  6821              LDR      r1,[r4,#0]            ;3394
0000cc  6008              STR      r0,[r1,#0]            ;3394
0000ce  2101              MOVS     r1,#1                 ;3395
0000d0  6820              LDR      r0,[r4,#0]            ;3395
0000d2  3028              ADDS     r0,r0,#0x28           ;3395
0000d4  7041              STRB     r1,[r0,#1]            ;3395
0000d6  4620              MOV      r0,r4                 ;3396
0000d8  f7fffffe          BL       I2C_ListenP
0000dc  2034              MOVS     r0,#0x34              ;3397
0000de  5d00              LDRB     r0,[r0,r4]            ;3397
0000e0  0841              LSRS     r1,r0,#1              ;3397
0000e2  0049              LSLS     r1,r1,#1              ;3397
0000e4  2034              MOVS     r0,#0x34              ;3397
0000e6  5501              STRB     r1,[r0,r4]            ;3397
0000e8  e176              B        |L2.984|
0000ea  bf00              NOP                            ;3402
0000ec  bf00              NOP                            ;3404
0000ee  bf00              NOP                            ;3405
0000f0  6820              LDR      r0,[r4,#0]            ;3406
0000f2  6840              LDR      r0,[r0,#4]            ;3406
0000f4  2102              MOVS     r1,#2                 ;3406
0000f6  4008              ANDS     r0,r0,r1              ;3406
0000f8  2800              CMP      r0,#0                 ;3406
0000fa  d008              BEQ      |L2.270|
0000fc  6820              LDR      r0,[r4,#0]            ;3407
0000fe  8980              LDRH     r0,[r0,#0xc]          ;3407
000100  49b9              LDR      r1,|L2.1000|
000102  4008              ANDS     r0,r0,r1              ;3407
000104  4602              MOV      r2,r0                 ;3407
000106  2101              MOVS     r1,#1                 ;3407
000108  4620              MOV      r0,r4                 ;3407
00010a  f7fffffe          BL       MID_I2C_AddrCallback
                  |L2.270|
00010e  8c20              LDRH     r0,[r4,#0x20]         ;3409
000110  2800              CMP      r0,#0                 ;3409
000112  d006              BEQ      |L2.290|
000114  6820              LDR      r0,[r4,#0]            ;3411
000116  6840              LDR      r0,[r0,#4]            ;3411
000118  2102              MOVS     r1,#2                 ;3411
00011a  4388              BICS     r0,r0,r1              ;3411
00011c  6821              LDR      r1,[r4,#0]            ;3411
00011e  6048              STR      r0,[r1,#4]            ;3411
000120  e15a              B        |L2.984|
                  |L2.290|
000122  2034              MOVS     r0,#0x34              ;3414
000124  5d00              LDRB     r0,[r0,r4]            ;3414
000126  2120              MOVS     r1,#0x20              ;3414
000128  4388              BICS     r0,r0,r1              ;3414
00012a  2134              MOVS     r1,#0x34              ;3414
00012c  5508              STRB     r0,[r1,r4]            ;3414
00012e  8e60              LDRH     r0,[r4,#0x32]         ;3415
000130  2101              MOVS     r1,#1                 ;3415
000132  0349              LSLS     r1,r1,#13             ;3415
000134  4008              ANDS     r0,r0,r1              ;3415
000136  2800              CMP      r0,#0                 ;3415
000138  d00b              BEQ      |L2.338|
00013a  207c              MOVS     r0,#0x7c              ;3417
00013c  6821              LDR      r1,[r4,#0]            ;3417
00013e  7608              STRB     r0,[r1,#0x18]         ;3417
000140  6820              LDR      r0,[r4,#0]            ;3418
000142  6900              LDR      r0,[r0,#0x10]         ;3418
000144  2101              MOVS     r1,#1                 ;3418
000146  0789              LSLS     r1,r1,#30             ;3418
000148  4308              ORRS     r0,r0,r1              ;3418
00014a  6821              LDR      r1,[r4,#0]            ;3418
00014c  6108              STR      r0,[r1,#0x10]         ;3418
00014e  f3bf8f6f          ISB                            ;3419
                  |L2.338|
000152  2101              MOVS     r1,#1                 ;3421
000154  6820              LDR      r0,[r4,#0]            ;3421
000156  3028              ADDS     r0,r0,#0x28           ;3421
000158  7041              STRB     r1,[r0,#1]            ;3421
00015a  e13d              B        |L2.984|
00015c  bf00              NOP                            ;3425
00015e  6820              LDR      r0,[r4,#0]            ;3427
000160  3020              ADDS     r0,r0,#0x20           ;3427
000162  7b00              LDRB     r0,[r0,#0xc]          ;3427
000164  8c22              LDRH     r2,[r4,#0x20]         ;3427
000166  69a1              LDR      r1,[r4,#0x18]         ;3427
000168  5488              STRB     r0,[r1,r2]            ;3427
00016a  8c20              LDRH     r0,[r4,#0x20]         ;3428
00016c  1c40              ADDS     r0,r0,#1              ;3428
00016e  8420              STRH     r0,[r4,#0x20]         ;3428
000170  8c20              LDRH     r0,[r4,#0x20]         ;3429
000172  8be1              LDRH     r1,[r4,#0x1e]         ;3429
000174  4288              CMP      r0,r1                 ;3429
000176  db02              BLT      |L2.382|
000178  2070              MOVS     r0,#0x70              ;3430
00017a  6821              LDR      r1,[r4,#0]            ;3430
00017c  7608              STRB     r0,[r1,#0x18]         ;3430
                  |L2.382|
00017e  2101              MOVS     r1,#1                 ;3431
000180  6820              LDR      r0,[r4,#0]            ;3431
000182  3028              ADDS     r0,r0,#0x28           ;3431
000184  7041              STRB     r1,[r0,#1]            ;3431
000186  e127              B        |L2.984|
000188  bf00              NOP                            ;3435
00018a  8c20              LDRH     r0,[r4,#0x20]         ;3437
00018c  1c40              ADDS     r0,r0,#1              ;3437
00018e  8420              STRH     r0,[r4,#0x20]         ;3437
000190  2008              MOVS     r0,#8                 ;3438
000192  86e0              STRH     r0,[r4,#0x36]         ;3438
000194  2034              MOVS     r0,#0x34              ;3439
000196  5d00              LDRB     r0,[r0,r4]            ;3439
000198  2110              MOVS     r1,#0x10              ;3439
00019a  4308              ORRS     r0,r0,r1              ;3439
00019c  2134              MOVS     r1,#0x34              ;3439
00019e  5508              STRB     r0,[r1,r4]            ;3439
0001a0  6820              LDR      r0,[r4,#0]            ;3440
0001a2  6840              LDR      r0,[r0,#4]            ;3440
0001a4  2102              MOVS     r1,#2                 ;3440
0001a6  4388              BICS     r0,r0,r1              ;3440
0001a8  6821              LDR      r1,[r4,#0]            ;3440
0001aa  6048              STR      r0,[r1,#4]            ;3440
0001ac  2101              MOVS     r1,#1                 ;3441
0001ae  6820              LDR      r0,[r4,#0]            ;3441
0001b0  3028              ADDS     r0,r0,#0x28           ;3441
0001b2  7041              STRB     r1,[r0,#1]            ;3441
0001b4  4620              MOV      r0,r4                 ;3442
0001b6  f7fffffe          BL       I2C_ListenP
0001ba  2034              MOVS     r0,#0x34              ;3443
0001bc  5d00              LDRB     r0,[r0,r4]            ;3443
0001be  0841              LSRS     r1,r0,#1              ;3443
0001c0  0049              LSLS     r1,r1,#1              ;3443
0001c2  2034              MOVS     r0,#0x34              ;3443
0001c4  5501              STRB     r1,[r0,r4]            ;3443
0001c6  e107              B        |L2.984|
0001c8  8e60              LDRH     r0,[r4,#0x32]         ;3447
0001ca  2103              MOVS     r1,#3                 ;3447
0001cc  0309              LSLS     r1,r1,#12             ;3447
0001ce  4008              ANDS     r0,r0,r1              ;3447
0001d0  2800              CMP      r0,#0                 ;3447
0001d2  d017              BEQ      |L2.516|
0001d4  6ae0              LDR      r0,[r4,#0x2c]         ;3449
0001d6  6800              LDR      r0,[r0,#0]            ;3449
0001d8  6ac0              LDR      r0,[r0,#0x2c]         ;3449
0001da  2800              CMP      r0,#0                 ;3449
0001dc  d10c              BNE      |L2.504|
0001de  6ae0              LDR      r0,[r4,#0x2c]         ;3449
0001e0  6800              LDR      r0,[r0,#0]            ;3449
0001e2  6a00              LDR      r0,[r0,#0x20]         ;3449
0001e4  2101              MOVS     r1,#1                 ;3449
0001e6  03c9              LSLS     r1,r1,#15             ;3449
0001e8  4008              ANDS     r0,r0,r1              ;3449
0001ea  2800              CMP      r0,#0                 ;3449
0001ec  d004              BEQ      |L2.504|
0001ee  6ae0              LDR      r0,[r4,#0x2c]         ;3450
0001f0  6800              LDR      r0,[r0,#0]            ;3450
0001f2  6ac0              LDR      r0,[r0,#0x2c]         ;3450
0001f4  8420              STRH     r0,[r4,#0x20]         ;3450
0001f6  e005              B        |L2.516|
                  |L2.504|
0001f8  8be0              LDRH     r0,[r4,#0x1e]         ;3452
0001fa  6ae1              LDR      r1,[r4,#0x2c]         ;3452
0001fc  6809              LDR      r1,[r1,#0]            ;3452
0001fe  6ac9              LDR      r1,[r1,#0x2c]         ;3452
000200  1a40              SUBS     r0,r0,r1              ;3452
000202  8420              STRH     r0,[r4,#0x20]         ;3452
                  |L2.516|
000204  8c20              LDRH     r0,[r4,#0x20]         ;3455
000206  2800              CMP      r0,#0                 ;3455
000208  d10f              BNE      |L2.554|
00020a  2034              MOVS     r0,#0x34              ;3457
00020c  5d00              LDRB     r0,[r0,r4]            ;3457
00020e  2120              MOVS     r1,#0x20              ;3457
000210  4308              ORRS     r0,r0,r1              ;3457
000212  2134              MOVS     r1,#0x34              ;3457
000214  5508              STRB     r0,[r1,r4]            ;3457
000216  2101              MOVS     r1,#1                 ;3458
000218  6820              LDR      r0,[r4,#0]            ;3458
00021a  3028              ADDS     r0,r0,#0x28           ;3458
00021c  7041              STRB     r1,[r0,#1]            ;3458
00021e  e0db              B        |L2.984|
000220  e0a3              B        |L2.874|
000222  e073              B        |L2.780|
000224  e050              B        |L2.712|
000226  e01c              B        |L2.610|
000228  e01a              B        |L2.608|
                  |L2.554|
00022a  8c21              LDRH     r1,[r4,#0x20]         ;3462
00022c  8be0              LDRH     r0,[r4,#0x1e]         ;3462
00022e  1e40              SUBS     r0,r0,#1              ;3462
000230  4281              CMP      r1,r0                 ;3462
000232  da01              BGE      |L2.568|
000234  2004              MOVS     r0,#4                 ;3464
000236  86e0              STRH     r0,[r4,#0x36]         ;3464
                  |L2.568|
000238  6820              LDR      r0,[r4,#0]            ;3468
00023a  6840              LDR      r0,[r0,#4]            ;3468
00023c  2102              MOVS     r1,#2                 ;3468
00023e  4388              BICS     r0,r0,r1              ;3468
000240  6821              LDR      r1,[r4,#0]            ;3468
000242  6048              STR      r0,[r1,#4]            ;3468
000244  2101              MOVS     r1,#1                 ;3469
000246  6820              LDR      r0,[r4,#0]            ;3469
000248  3028              ADDS     r0,r0,#0x28           ;3469
00024a  7041              STRB     r1,[r0,#1]            ;3469
00024c  4620              MOV      r0,r4                 ;3470
00024e  f7fffffe          BL       I2C_ListenP
000252  2034              MOVS     r0,#0x34              ;3471
000254  5d00              LDRB     r0,[r0,r4]            ;3471
000256  0841              LSRS     r1,r0,#1              ;3471
000258  0049              LSLS     r1,r1,#1              ;3471
00025a  2034              MOVS     r0,#0x34              ;3471
00025c  5501              STRB     r1,[r0,r4]            ;3471
00025e  e0bb              B        |L2.984|
                  |L2.608|
000260  bf00              NOP                            ;3475
                  |L2.610|
000262  6820              LDR      r0,[r4,#0]            ;3477
000264  6840              LDR      r0,[r0,#4]            ;3477
000266  2102              MOVS     r1,#2                 ;3477
000268  4008              ANDS     r0,r0,r1              ;3477
00026a  2800              CMP      r0,#0                 ;3477
00026c  d008              BEQ      |L2.640|
00026e  6820              LDR      r0,[r4,#0]            ;3478
000270  8980              LDRH     r0,[r0,#0xc]          ;3478
000272  495d              LDR      r1,|L2.1000|
000274  4008              ANDS     r0,r0,r1              ;3478
000276  4602              MOV      r2,r0                 ;3478
000278  2100              MOVS     r1,#0                 ;3478
00027a  4620              MOV      r0,r4                 ;3478
00027c  f7fffffe          BL       MID_I2C_AddrCallback
                  |L2.640|
000280  8c20              LDRH     r0,[r4,#0x20]         ;3480
000282  2800              CMP      r0,#0                 ;3480
000284  d006              BEQ      |L2.660|
000286  6820              LDR      r0,[r4,#0]            ;3482
000288  6840              LDR      r0,[r0,#4]            ;3482
00028a  2102              MOVS     r1,#2                 ;3482
00028c  4388              BICS     r0,r0,r1              ;3482
00028e  6821              LDR      r1,[r4,#0]            ;3482
000290  6048              STR      r0,[r1,#4]            ;3482
000292  e0a1              B        |L2.984|
                  |L2.660|
000294  2034              MOVS     r0,#0x34              ;3486
000296  5d00              LDRB     r0,[r0,r4]            ;3486
000298  2120              MOVS     r1,#0x20              ;3486
00029a  4388              BICS     r0,r0,r1              ;3486
00029c  2134              MOVS     r1,#0x34              ;3486
00029e  5508              STRB     r0,[r1,r4]            ;3486
0002a0  8e60              LDRH     r0,[r4,#0x32]         ;3487
0002a2  2101              MOVS     r1,#1                 ;3487
0002a4  0309              LSLS     r1,r1,#12             ;3487
0002a6  4008              ANDS     r0,r0,r1              ;3487
0002a8  2800              CMP      r0,#0                 ;3487
0002aa  d00c              BEQ      |L2.710|
0002ac  2078              MOVS     r0,#0x78              ;3489
0002ae  6821              LDR      r1,[r4,#0]            ;3489
0002b0  7608              STRB     r0,[r1,#0x18]         ;3489
0002b2  6820              LDR      r0,[r4,#0]            ;3490
0002b4  6900              LDR      r0,[r0,#0x10]         ;3490
0002b6  2101              MOVS     r1,#1                 ;3490
0002b8  07c9              LSLS     r1,r1,#31             ;3490
0002ba  4308              ORRS     r0,r0,r1              ;3490
0002bc  6821              LDR      r1,[r4,#0]            ;3490
0002be  6108              STR      r0,[r1,#0x10]         ;3490
0002c0  f3bf8f6f          ISB                            ;3491
0002c4  e088              B        |L2.984|
                  |L2.710|
0002c6  bf00              NOP                            ;3495
                  |L2.712|
0002c8  8c20              LDRH     r0,[r4,#0x20]         ;3496
0002ca  8be1              LDRH     r1,[r4,#0x1e]         ;3496
0002cc  4288              CMP      r0,r1                 ;3496
0002ce  da09              BGE      |L2.740|
0002d0  8c21              LDRH     r1,[r4,#0x20]         ;3498
0002d2  69a0              LDR      r0,[r4,#0x18]         ;3498
0002d4  5c41              LDRB     r1,[r0,r1]            ;3498
0002d6  6820              LDR      r0,[r4,#0]            ;3498
0002d8  3020              ADDS     r0,r0,#0x20           ;3498
0002da  7301              STRB     r1,[r0,#0xc]          ;3498
0002dc  8c20              LDRH     r0,[r4,#0x20]         ;3499
0002de  1c40              ADDS     r0,r0,#1              ;3499
0002e0  8420              STRH     r0,[r4,#0x20]         ;3499
0002e2  e00e              B        |L2.770|
                  |L2.740|
0002e4  2008              MOVS     r0,#8                 ;3503
0002e6  86e0              STRH     r0,[r4,#0x36]         ;3503
0002e8  2034              MOVS     r0,#0x34              ;3504
0002ea  5d00              LDRB     r0,[r0,r4]            ;3504
0002ec  2110              MOVS     r1,#0x10              ;3504
0002ee  4308              ORRS     r0,r0,r1              ;3504
0002f0  2134              MOVS     r1,#0x34              ;3504
0002f2  5508              STRB     r0,[r1,r4]            ;3504
0002f4  2070              MOVS     r0,#0x70              ;3505
0002f6  6821              LDR      r1,[r4,#0]            ;3505
0002f8  7608              STRB     r0,[r1,#0x18]         ;3505
0002fa  21ff              MOVS     r1,#0xff              ;3506
0002fc  6820              LDR      r0,[r4,#0]            ;3506
0002fe  3020              ADDS     r0,r0,#0x20           ;3506
000300  7301              STRB     r1,[r0,#0xc]          ;3506
                  |L2.770|
000302  2101              MOVS     r1,#1                 ;3508
000304  6820              LDR      r0,[r4,#0]            ;3508
000306  3028              ADDS     r0,r0,#0x28           ;3508
000308  7041              STRB     r1,[r0,#1]            ;3508
00030a  e065              B        |L2.984|
                  |L2.780|
00030c  8e60              LDRH     r0,[r4,#0x32]         ;3512
00030e  2101              MOVS     r1,#1                 ;3512
000310  0309              LSLS     r1,r1,#12             ;3512
000312  4008              ANDS     r0,r0,r1              ;3512
000314  2800              CMP      r0,#0                 ;3512
000316  d005              BEQ      |L2.804|
000318  8be0              LDRH     r0,[r4,#0x1e]         ;3513
00031a  6aa1              LDR      r1,[r4,#0x28]         ;3513
00031c  6809              LDR      r1,[r1,#0]            ;3513
00031e  8d89              LDRH     r1,[r1,#0x2c]         ;3513
000320  1a40              SUBS     r0,r0,r1              ;3513
000322  8420              STRH     r0,[r4,#0x20]         ;3513
                  |L2.804|
000324  8c20              LDRH     r0,[r4,#0x20]         ;3515
000326  8be1              LDRH     r1,[r4,#0x1e]         ;3515
000328  4288              CMP      r0,r1                 ;3515
00032a  da07              BGE      |L2.828|
00032c  2004              MOVS     r0,#4                 ;3517
00032e  86e0              STRH     r0,[r4,#0x36]         ;3517
000330  2034              MOVS     r0,#0x34              ;3518
000332  5d00              LDRB     r0,[r0,r4]            ;3518
000334  2110              MOVS     r1,#0x10              ;3518
000336  4308              ORRS     r0,r0,r1              ;3518
000338  2134              MOVS     r1,#0x34              ;3518
00033a  5508              STRB     r0,[r1,r4]            ;3518
                  |L2.828|
00033c  6820              LDR      r0,[r4,#0]            ;3520
00033e  6840              LDR      r0,[r0,#4]            ;3520
000340  2102              MOVS     r1,#2                 ;3520
000342  4388              BICS     r0,r0,r1              ;3520
000344  6821              LDR      r1,[r4,#0]            ;3520
000346  6048              STR      r0,[r1,#4]            ;3520
000348  4828              LDR      r0,|L2.1004|
00034a  6821              LDR      r1,[r4,#0]            ;3521
00034c  6008              STR      r0,[r1,#0]            ;3521
00034e  2101              MOVS     r1,#1                 ;3522
000350  6820              LDR      r0,[r4,#0]            ;3522
000352  3028              ADDS     r0,r0,#0x28           ;3522
000354  7041              STRB     r1,[r0,#1]            ;3522
000356  4620              MOV      r0,r4                 ;3523
000358  f7fffffe          BL       I2C_ListenP
00035c  2034              MOVS     r0,#0x34              ;3524
00035e  5d00              LDRB     r0,[r0,r4]            ;3524
000360  0841              LSRS     r1,r0,#1              ;3524
000362  0049              LSLS     r1,r1,#1              ;3524
000364  2034              MOVS     r0,#0x34              ;3524
000366  5501              STRB     r1,[r0,r4]            ;3524
000368  e036              B        |L2.984|
                  |L2.874|
00036a  8c21              LDRH     r1,[r4,#0x20]         ;3528
00036c  8be0              LDRH     r0,[r4,#0x1e]         ;3528
00036e  1e40              SUBS     r0,r0,#1              ;3528
000370  4281              CMP      r1,r0                 ;3528
000372  db07              BLT      |L2.900|
000374  2008              MOVS     r0,#8                 ;3530
000376  86e0              STRH     r0,[r4,#0x36]         ;3530
000378  2034              MOVS     r0,#0x34              ;3531
00037a  5d00              LDRB     r0,[r0,r4]            ;3531
00037c  2110              MOVS     r1,#0x10              ;3531
00037e  4308              ORRS     r0,r0,r1              ;3531
000380  2134              MOVS     r1,#0x34              ;3531
000382  5508              STRB     r0,[r1,r4]            ;3531
                  |L2.900|
000384  bf00              NOP                            ;3534
                  |L2.902|
000386  6820              LDR      r0,[r4,#0]            ;3535
000388  3028              ADDS     r0,r0,#0x28           ;3535
00038a  7840              LDRB     r0,[r0,#1]            ;3535
00038c  07c0              LSLS     r0,r0,#31             ;3535
00038e  0fc0              LSRS     r0,r0,#31             ;3535
000390  2800              CMP      r0,#0                 ;3535
000392  d006              BEQ      |L2.930|
000394  8c20              LDRH     r0,[r4,#0x20]         ;3537
000396  1c40              ADDS     r0,r0,#1              ;3537
000398  8420              STRH     r0,[r4,#0x20]         ;3537
00039a  2101              MOVS     r1,#1                 ;3538
00039c  6820              LDR      r0,[r4,#0]            ;3538
00039e  3028              ADDS     r0,r0,#0x28           ;3538
0003a0  7041              STRB     r1,[r0,#1]            ;3538
                  |L2.930|
0003a2  6820              LDR      r0,[r4,#0]            ;3540
0003a4  3020              ADDS     r0,r0,#0x20           ;3540
0003a6  7a00              LDRB     r0,[r0,#8]            ;3540
0003a8  21f8              MOVS     r1,#0xf8              ;3540
0003aa  4008              ANDS     r0,r0,r1              ;3540
0003ac  28c8              CMP      r0,#0xc8              ;3540
0003ae  d0ea              BEQ      |L2.902|
0003b0  6820              LDR      r0,[r4,#0]            ;3542
0003b2  6840              LDR      r0,[r0,#4]            ;3542
0003b4  2102              MOVS     r1,#2                 ;3542
0003b6  4388              BICS     r0,r0,r1              ;3542
0003b8  6821              LDR      r1,[r4,#0]            ;3542
0003ba  6048              STR      r0,[r1,#4]            ;3542
0003bc  2101              MOVS     r1,#1                 ;3543
0003be  6820              LDR      r0,[r4,#0]            ;3543
0003c0  3028              ADDS     r0,r0,#0x28           ;3543
0003c2  7041              STRB     r1,[r0,#1]            ;3543
0003c4  4620              MOV      r0,r4                 ;3544
0003c6  f7fffffe          BL       I2C_ListenP
0003ca  2034              MOVS     r0,#0x34              ;3545
0003cc  5d00              LDRB     r0,[r0,r4]            ;3545
0003ce  0841              LSRS     r1,r0,#1              ;3545
0003d0  0049              LSLS     r1,r1,#1              ;3545
0003d2  2034              MOVS     r0,#0x34              ;3545
0003d4  5501              STRB     r1,[r0,r4]            ;3545
0003d6  bf00              NOP                            ;3546
                  |L2.984|
0003d8  bf00              NOP                            ;3384
0003da  2000              MOVS     r0,#0                 ;3548
0003dc  e619              B        |L2.18|
;;;3550   
                          ENDP

0003de  0000              DCW      0x0000
                  |L2.992|
                          DCD      0x00800008
                  |L2.996|
                          DCD      0x00400008
                  |L2.1000|
                          DCD      0x0000fffe
                  |L2.1004|
                          DCD      0x00200008

                          AREA ||i.I2C_DMACplt||, CODE, READONLY, ALIGN=1

                  I2C_DMACplt PROC
;;;3630    */
;;;3631   static void I2C_DMACplt(DMA_HandleTypeDef *mDMA)
000000  4601              MOV      r1,r0
;;;3632   {
;;;3633       I2C_HandleTypeDef *lmI2C = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)mDMA)->Parent);
000002  6a88              LDR      r0,[r1,#0x28]
;;;3634   
;;;3635       if((lmI2C->Mode & MID_I2C_MODE_DMA_SRX) != 0)
000004  8e42              LDRH     r2,[r0,#0x32]
000006  2301              MOVS     r3,#1
000008  035b              LSLS     r3,r3,#13
00000a  401a              ANDS     r2,r2,r3
00000c  2a00              CMP      r2,#0
00000e  d003              BEQ      |L3.24|
;;;3636           lmI2C->XferCount = lmI2C->XferSize - 1;
000010  8bc2              LDRH     r2,[r0,#0x1e]
000012  1e52              SUBS     r2,r2,#1
000014  8402              STRH     r2,[r0,#0x20]
000016  e001              B        |L3.28|
                  |L3.24|
;;;3637       else
;;;3638           lmI2C->XferCount = lmI2C->XferSize;
000018  8bc2              LDRH     r2,[r0,#0x1e]
00001a  8402              STRH     r2,[r0,#0x20]
                  |L3.28|
;;;3639   
;;;3640       lmI2C->Mode &= ~(MID_I2C_MODE_DMA_MTX | MID_I2C_MODE_DMA_MRX | MID_I2C_MODE_DMA_SRX | MID_I2C_MODE_DMA_STX);
00001c  8e42              LDRH     r2,[r0,#0x32]
00001e  230f              MOVS     r3,#0xf
000020  031b              LSLS     r3,r3,#12
000022  439a              BICS     r2,r2,r3
000024  8642              STRH     r2,[r0,#0x32]
;;;3641   }
000026  4770              BX       lr
;;;3642   
                          ENDP


                          AREA ||i.I2C_DMAError||, CODE, READONLY, ALIGN=1

                  I2C_DMAError PROC
;;;3649    */
;;;3650   static void I2C_DMAError(DMA_HandleTypeDef *mDMA)
000000  6a81              LDR      r1,[r0,#0x28]
;;;3651   {
;;;3652       I2C_HandleTypeDef *lmI2C = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)mDMA)->Parent);
;;;3653   
;;;3654       lmI2C->XferCount = (uint16_t)mDMA->DMAChannelIndex->CNT.W;
000002  6c02              LDR      r2,[r0,#0x40]
000004  68d2              LDR      r2,[r2,#0xc]
000006  840a              STRH     r2,[r1,#0x20]
;;;3655   
;;;3656       lmI2C->Mode &= ~(MID_I2C_MODE_DMA_MTX | MID_I2C_MODE_DMA_MRX | MID_I2C_MODE_DMA_SRX | MID_I2C_MODE_DMA_STX);
000008  8e4a              LDRH     r2,[r1,#0x32]
00000a  230f              MOVS     r3,#0xf
00000c  031b              LSLS     r3,r3,#12
00000e  439a              BICS     r2,r2,r3
000010  864a              STRH     r2,[r1,#0x32]
;;;3657   }
000012  4770              BX       lr
;;;3658   
                          ENDP


                          AREA ||i.I2C_ListenP||, CODE, READONLY, ALIGN=1

                  I2C_ListenP PROC
;;;3068   */
;;;3069   static void I2C_ListenP(I2C_HandleTypeDef *mI2C)
000000  6801              LDR      r1,[r0,#0]
;;;3070   {
;;;3071       if((mI2C->Instance->CR0.B[0] & (I2C_CR0_SADR_EN_mask_b0 | I2C_CR0_SADR2_EN_mask_b0 | I2C_CR0_GC_EN_mask_b0)) != 0)
000002  7c09              LDRB     r1,[r1,#0x10]
000004  2286              MOVS     r2,#0x86
000006  4011              ANDS     r1,r1,r2
000008  2900              CMP      r1,#0
00000a  d009              BEQ      |L5.32|
;;;3072       {
;;;3073           __DRV_I2C_STA_STO_AA_001(mI2C);
00000c  2174              MOVS     r1,#0x74
00000e  6802              LDR      r2,[r0,#0]
000010  7611              STRB     r1,[r2,#0x18]
;;;3074           mI2C->State |= MID_I2C_STATE_LISTEN;
000012  2134              MOVS     r1,#0x34
000014  5c09              LDRB     r1,[r1,r0]
000016  2220              MOVS     r2,#0x20
000018  4311              ORRS     r1,r1,r2
00001a  2234              MOVS     r2,#0x34
00001c  5411              STRB     r1,[r2,r0]
00001e  e002              B        |L5.38|
                  |L5.32|
;;;3075       }
;;;3076       else
;;;3077           __DRV_I2C_STA_STO_AA_000(mI2C);
000020  2170              MOVS     r1,#0x70
000022  6802              LDR      r2,[r0,#0]
000024  7611              STRB     r1,[r2,#0x18]
                  |L5.38|
;;;3078   }
000026  4770              BX       lr
;;;3079   
                          ENDP


                          AREA ||i.I2C_Master_ISR_IT||, CODE, READONLY, ALIGN=1

                  I2C_Master_ISR_IT PROC
;;;3329    */
;;;3330   static MID_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *mI2C, uint32_t ITFlags, uint32_t ITSources)
000000  b570              PUSH     {r4-r6,lr}
;;;3331   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;3332       //uint32_t tmpITFlags = ITFlags;
;;;3333       //uint16_t devaddress = 0U;
;;;3334       //uint8_t lState;
;;;3335   
;;;3336       /* Process Locked */
;;;3337       __MID_LOCK(mI2C);
000008  bf00              NOP      
00000a  2030              MOVS     r0,#0x30
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L6.22|
000012  2002              MOVS     r0,#2
                  |L6.20|
;;;3338   
;;;3339       if(((mI2C->Instance->CR0.W & I2C_CR0_BUF_EN_mask_w) == 0) && ((ITFlags & I2C_FLAG_EVENT) != 0))
;;;3340       {
;;;3341           I2C_BytemodeMasterEventHandle(mI2C);
;;;3342       }
;;;3343   
;;;3344       if(((ITFlags & I2C_FLAG_TMOUT) != 0) && ((ITSources & I2C_IT_TMOUT) != 0))
;;;3345       {
;;;3346   
;;;3347       }
;;;3348   
;;;3349       /* Process Unlocked */
;;;3350       __MID_UNLOCK(mI2C);
;;;3351   
;;;3352       return MID_OK;
;;;3353   }
000014  bd70              POP      {r4-r6,pc}
                  |L6.22|
000016  2101              MOVS     r1,#1                 ;3337
000018  2030              MOVS     r0,#0x30              ;3337
00001a  5501              STRB     r1,[r0,r4]            ;3337
00001c  bf00              NOP                            ;3337
00001e  6820              LDR      r0,[r4,#0]            ;3339
000020  6900              LDR      r0,[r0,#0x10]         ;3339
000022  2140              MOVS     r1,#0x40              ;3339
000024  4008              ANDS     r0,r0,r1              ;3339
000026  2800              CMP      r0,#0                 ;3339
000028  d106              BNE      |L6.56|
00002a  2002              MOVS     r0,#2                 ;3339
00002c  4028              ANDS     r0,r0,r5              ;3339
00002e  2800              CMP      r0,#0                 ;3339
000030  d002              BEQ      |L6.56|
000032  4620              MOV      r0,r4                 ;3341
000034  f7fffffe          BL       I2C_BytemodeMasterEventHandle
                  |L6.56|
000038  bf00              NOP                            ;3350
00003a  2100              MOVS     r1,#0                 ;3350
00003c  2030              MOVS     r0,#0x30              ;3350
00003e  5501              STRB     r1,[r0,r4]            ;3350
000040  bf00              NOP                            ;3350
000042  2000              MOVS     r0,#0                 ;3352
000044  e7e6              B        |L6.20|
;;;3354   
                          ENDP


                          AREA ||i.I2C_Slave_ISR_IT||, CODE, READONLY, ALIGN=1

                  I2C_Slave_ISR_IT PROC
;;;3560    */
;;;3561   static MID_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *mI2C, uint32_t ITFlags, uint32_t ITSources)
000000  b570              PUSH     {r4-r6,lr}
;;;3562   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;3563       //uint32_t tmpITFlags = ITFlags;
;;;3564       //uint16_t devaddress = 0U;
;;;3565       //uint8_t lState;
;;;3566   
;;;3567       /* Process Locked */
;;;3568       __MID_LOCK(mI2C);
000008  bf00              NOP      
00000a  2030              MOVS     r0,#0x30
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L7.22|
000012  2002              MOVS     r0,#2
                  |L7.20|
;;;3569   
;;;3570       if(((mI2C->Instance->CR0.W & I2C_CR0_BUF_EN_mask_w) == 0) && ((ITFlags & I2C_FLAG_EVENT) != 0))
;;;3571       {
;;;3572           I2C_BytemodeSlaveEventHandle(mI2C);
;;;3573       }
;;;3574   
;;;3575       if(((ITFlags & I2C_FLAG_TMOUT) != 0) && ((ITSources & I2C_IT_TMOUT) != 0))
;;;3576       {
;;;3577   
;;;3578       }
;;;3579   
;;;3580       /* Process Unlocked */
;;;3581       __MID_UNLOCK(mI2C);
;;;3582   
;;;3583       return MID_OK;
;;;3584   }
000014  bd70              POP      {r4-r6,pc}
                  |L7.22|
000016  2101              MOVS     r1,#1                 ;3568
000018  2030              MOVS     r0,#0x30              ;3568
00001a  5501              STRB     r1,[r0,r4]            ;3568
00001c  bf00              NOP                            ;3568
00001e  6820              LDR      r0,[r4,#0]            ;3570
000020  6900              LDR      r0,[r0,#0x10]         ;3570
000022  2140              MOVS     r1,#0x40              ;3570
000024  4008              ANDS     r0,r0,r1              ;3570
000026  2800              CMP      r0,#0                 ;3570
000028  d106              BNE      |L7.56|
00002a  2002              MOVS     r0,#2                 ;3570
00002c  4028              ANDS     r0,r0,r5              ;3570
00002e  2800              CMP      r0,#0                 ;3570
000030  d002              BEQ      |L7.56|
000032  4620              MOV      r0,r4                 ;3572
000034  f7fffffe          BL       I2C_BytemodeSlaveEventHandle
                  |L7.56|
000038  bf00              NOP                            ;3581
00003a  2100              MOVS     r1,#0                 ;3581
00003c  2030              MOVS     r0,#0x30              ;3581
00003e  5501              STRB     r1,[r0,r4]            ;3581
000040  bf00              NOP                            ;3581
000042  2000              MOVS     r0,#0                 ;3583
000044  e7e6              B        |L7.20|
;;;3585   
                          ENDP


                          AREA ||i.I2C_WaitOnEVENTFlagUntilTimeout||, CODE, READONLY, ALIGN=1

                  I2C_WaitOnEVENTFlagUntilTimeout PROC
;;;3595    */
;;;3596   static MID_StatusTypeDef I2C_WaitOnEVENTFlagUntilTimeout(I2C_HandleTypeDef *mI2C, uint32_t Timeout, uint32_t Tickstart)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3597   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;3598       uint32_t ltemp32;
;;;3599       while(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) == CLR)
000008  e012              B        |L8.48|
                  |L8.10|
;;;3600       {
;;;3601          // /* Check if a NACK is detected */
;;;3602          // if(I2C_IsAcknowledgeFailed(mI2C, Timeout, Tickstart) != MID_OK)
;;;3603          // {
;;;3604          //     return MID_ERROR;
;;;3605          // }
;;;3606   
;;;3607           /* Check for the Timeout */
;;;3608           if((Timeout != MID_MAX_DELAY) && (Timeout != 0U))
00000a  1c68              ADDS     r0,r5,#1
00000c  2800              CMP      r0,#0
00000e  d00f              BEQ      |L8.48|
000010  2d00              CMP      r5,#0
000012  d00d              BEQ      |L8.48|
;;;3609           {
;;;3610               ltemp32 = (MID_GetTick() - Tickstart);
000014  f7fffffe          BL       MID_GetTick
000018  1b87              SUBS     r7,r0,r6
;;;3611               if(ltemp32 > Timeout)
00001a  42af              CMP      r7,r5
00001c  d908              BLS      |L8.48|
;;;3612               {
;;;3613                   mI2C->ErrorCode = MID_I2C_ERROR_TIMEOUT;
00001e  2020              MOVS     r0,#0x20
000020  86e0              STRH     r0,[r4,#0x36]
;;;3614                   mI2C->State = MID_I2C_STATE_READY;
000022  2180              MOVS     r1,#0x80
000024  2034              MOVS     r0,#0x34
000026  5501              STRB     r1,[r0,r4]
;;;3615                   mI2C->Mode = MID_I2C_MODE_NONE;
000028  2000              MOVS     r0,#0
00002a  8660              STRH     r0,[r4,#0x32]
;;;3616   
;;;3617                   return MID_ERROR;
00002c  2001              MOVS     r0,#1
                  |L8.46|
;;;3618               }
;;;3619           }
;;;3620       }
;;;3621       return MID_OK;
;;;3622   }
00002e  bdf8              POP      {r3-r7,pc}
                  |L8.48|
000030  6820              LDR      r0,[r4,#0]            ;3599
000032  6800              LDR      r0,[r0,#0]            ;3599
000034  2102              MOVS     r1,#2                 ;3599
000036  4008              ANDS     r0,r0,r1              ;3599
000038  0840              LSRS     r0,r0,#1              ;3599
00003a  2800              CMP      r0,#0                 ;3599
00003c  d0e5              BEQ      |L8.10|
00003e  2000              MOVS     r0,#0                 ;3621
000040  e7f5              B        |L8.46|
;;;3623   
                          ENDP


                          AREA ||i.MID_I2C_AddrCallback||, CODE, READONLY, ALIGN=1

                  MID_I2C_AddrCallback PROC
;;;2959    */
;;;2960   __weak void MID_I2C_AddrCallback(I2C_HandleTypeDef *mI2C, uint8_t TransferDirection, uint16_t AddrMatchCode)
000000  4770              BX       lr
;;;2961   {
;;;2962     /* Prevent unused argument(s) compilation warning */
;;;2963     UNUSED(mI2C);
;;;2964     UNUSED(TransferDirection);
;;;2965     UNUSED(AddrMatchCode);
;;;2966   
;;;2967     /* NOTE : This function should not be modified, when the callback is needed,
;;;2968               the MID_I2C_AddrCallback() could be implemented in the user file
;;;2969     */
;;;2970   }
;;;2971   
                          ENDP


                          AREA ||i.MID_I2C_DeInit||, CODE, READONLY, ALIGN=1

                  MID_I2C_DeInit PROC
;;;477     */
;;;478    MID_StatusTypeDef MID_I2C_DeInit(I2C_HandleTypeDef *mI2C)
000000  b510              PUSH     {r4,lr}
;;;479    {
000002  4604              MOV      r4,r0
;;;480        /* Check the I2C handle allocation */
;;;481        if(mI2C == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L10.12|
;;;482        {
;;;483            return MID_ERROR;
000008  2001              MOVS     r0,#1
                  |L10.10|
;;;484        }
;;;485    
;;;486        /* Check the parameters */
;;;487        assert_param(IS_I2C_ALL_INSTANCE(mI2C->Instance));
;;;488    
;;;489        mI2C->State = MID_I2C_STATE_BUSY;
;;;490    
;;;491        /* Disable the I2C Peripheral Clock */
;;;492        __DRV_I2C_DISABLE(mI2C);
;;;493    
;;;494        /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;495        MID_I2C_MspDeInit(mI2C);
;;;496    
;;;497        mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;498        mI2C->State = MID_I2C_STATE_RESET;
;;;499        mI2C->Mode = MID_I2C_MODE_NONE;
;;;500    
;;;501        /* Release Lock */
;;;502        __MID_UNLOCK(mI2C);
;;;503    
;;;504      return MID_OK;
;;;505    }
00000a  bd10              POP      {r4,pc}
                  |L10.12|
00000c  2101              MOVS     r1,#1                 ;489
00000e  2034              MOVS     r0,#0x34              ;489
000010  5501              STRB     r1,[r0,r4]            ;489
000012  6820              LDR      r0,[r4,#0]            ;492
000014  6900              LDR      r0,[r0,#0x10]         ;492
000016  4388              BICS     r0,r0,r1              ;492
000018  6821              LDR      r1,[r4,#0]            ;492
00001a  6108              STR      r0,[r1,#0x10]         ;492
00001c  4620              MOV      r0,r4                 ;495
00001e  f7fffffe          BL       MID_I2C_MspDeInit
000022  2000              MOVS     r0,#0                 ;497
000024  86e0              STRH     r0,[r4,#0x36]         ;497
000026  2100              MOVS     r1,#0                 ;498
000028  2034              MOVS     r0,#0x34              ;498
00002a  5501              STRB     r1,[r0,r4]            ;498
00002c  2000              MOVS     r0,#0                 ;499
00002e  8660              STRH     r0,[r4,#0x32]         ;499
000030  bf00              NOP                            ;502
000032  2030              MOVS     r0,#0x30              ;502
000034  5501              STRB     r1,[r0,r4]            ;502
000036  bf00              NOP                            ;502
000038  2000              MOVS     r0,#0                 ;504
00003a  e7e6              B        |L10.10|
;;;506    
                          ENDP


                          AREA ||i.MID_I2C_ErrorCallback||, CODE, READONLY, ALIGN=1

                  MID_I2C_ErrorCallback PROC
;;;2979    */
;;;2980   __weak void MID_I2C_ErrorCallback(I2C_HandleTypeDef *mI2C)
000000  4770              BX       lr
;;;2981   {
;;;2982     /* Prevent unused argument(s) compilation warning */
;;;2983     UNUSED(mI2C);
;;;2984   
;;;2985     /* NOTE : This function should not be modified, when the callback is needed,
;;;2986               the MID_I2C_ErrorCallback could be implemented in the user file
;;;2987     */
;;;2988   }
;;;2989   
                          ENDP


                          AREA ||i.MID_I2C_GetError||, CODE, READONLY, ALIGN=1

                  MID_I2C_GetError PROC
;;;3043   */
;;;3044   MID_I2C_ErrorTypeDef MID_I2C_GetError(I2C_HandleTypeDef *mI2C)
000000  4601              MOV      r1,r0
;;;3045   {
;;;3046       return mI2C->ErrorCode;
000002  8ec8              LDRH     r0,[r1,#0x36]
;;;3047   }
000004  4770              BX       lr
;;;3048   
                          ENDP


                          AREA ||i.MID_I2C_GetInitTiming||, CODE, READONLY, ALIGN=2

                  MID_I2C_GetInitTiming PROC
;;;273     */
;;;274    uint32_t MID_I2C_GetInitTiming(I2C_HandleTypeDef *mI2C, uint32_t SCLClock)  
000000  b5f0              PUSH     {r4-r7,lr}
;;;275    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;276        __IO uint32_t lI2Cx_CK_PRFreq;
;;;277        __IO uint32_t lI2C_PSC = 1;
000008  2001              MOVS     r0,#1
00000a  9005              STR      r0,[sp,#0x14]
;;;278        __IO uint32_t lI2C_DIV = 1;
00000c  9004              STR      r0,[sp,#0x10]
;;;279        __IO uint32_t lI2C_DIV_CNT = 0;
00000e  2000              MOVS     r0,#0
000010  9003              STR      r0,[sp,#0xc]
;;;280        __IO uint32_t lI2C_HT_LT;
;;;281    
;;;282        union{
;;;283            uint32_t W;
;;;284            struct {
;;;285                uint32_t                    :2;
;;;286                uint32_t CLKSource          :2;
;;;287                uint32_t Divider            :3;
;;;288                uint32_t                    :1;
;;;289                uint32_t Prescal            :4;
;;;290                uint32_t TimeoutClockSource :1;
;;;291                uint32_t                    :3;
;;;292                uint32_t LowTime            :8;
;;;293                uint32_t HighTime           :8;
;;;294            }Struct;
;;;295        }I2C_CLK_Config;
;;;296    
;;;297        /* Check the I2C handle allocation */
;;;298        if(mI2C == NULL)
000012  2c00              CMP      r4,#0
000014  d102              BNE      |L13.28|
;;;299        {
;;;300            return MID_ERROR;
000016  2001              MOVS     r0,#1
                  |L13.24|
;;;301        }
;;;302    
;;;303        I2C_CLK_Config.W = 0UL;
;;;304    
;;;305        if(mI2C->Instance == I2C0)
;;;306        {
;;;307            lI2Cx_CK_PRFreq = MID_CSC_GetCK_PRFreq(MID_CSC_CK_PR_I2C0);
;;;308        }
;;;309    
;;;310      #if defined(I2C1)
;;;311        if(mI2C->Instance == I2C1)
;;;312        {
;;;313            lI2Cx_CK_PRFreq = MID_CSC_GetCK_PRFreq(MID_CSC_CK_PR_I2C0);
;;;314        }
;;;315      #endif
;;;316    
;;;317        if(lI2Cx_CK_PRFreq <= 900000)
;;;318        {
;;;319            lI2C_PSC = 1;
;;;320            lI2C_DIV = 1;
;;;321            lI2C_HT_LT = 9;
;;;322        }
;;;323        else
;;;324        {
;;;325          #if defined(MG32_1ST)
;;;326            do{           
;;;327                lI2C_HT_LT = lI2Cx_CK_PRFreq / SCLClock / lI2C_PSC / lI2C_DIV;
;;;328                if((lI2C_HT_LT >= 32) || (lI2C_HT_LT <= 9))
;;;329                {
;;;330                    lI2C_PSC ++;
;;;331                    if(lI2C_PSC > 8)
;;;332                    {
;;;333                        lI2C_PSC = 1;
;;;334                        lI2C_DIV += lI2C_DIV;
;;;335                    }
;;;336                }
;;;337            }while((lI2C_HT_LT >= 32) || (lI2C_HT_LT <= 9));
;;;338          #else
;;;339            do{
;;;340                lI2C_HT_LT = lI2Cx_CK_PRFreq / SCLClock / lI2C_PSC / lI2C_DIV;
;;;341                if((lI2C_HT_LT >= 64) || (lI2C_HT_LT <= 9)) 
;;;342                {
;;;343                    lI2C_PSC ++;
;;;344                    if(lI2C_PSC > 8)
;;;345                    {
;;;346                        lI2C_PSC = 1;
;;;347                        lI2C_DIV += lI2C_DIV;
;;;348                    }
;;;349                }
;;;350            }while((lI2C_HT_LT >= 64) || (lI2C_HT_LT <= 9));
;;;351          #endif
;;;352        }
;;;353    
;;;354        if(lI2C_DIV == 1)
;;;355            lI2C_DIV_CNT = 0;
;;;356        else
;;;357        {
;;;358            lI2C_DIV = (lI2C_DIV >> 1);
;;;359            do{
;;;360                lI2C_DIV_CNT ++;
;;;361                lI2C_DIV = (lI2C_DIV >> 1);
;;;362            }while(lI2C_DIV != 0);
;;;363        }
;;;364        I2C_CLK_Config.Struct.CLKSource = 0;
;;;365        I2C_CLK_Config.Struct.Prescal = lI2C_PSC - 1;
;;;366        I2C_CLK_Config.Struct.Divider = lI2C_DIV_CNT;
;;;367        I2C_CLK_Config.Struct.LowTime = (lI2C_HT_LT >> 1) - 1;
;;;368        I2C_CLK_Config.Struct.HighTime = (lI2C_HT_LT - (lI2C_HT_LT >> 1));
;;;369    
;;;370        return I2C_CLK_Config.W;
;;;371    }
000018  b007              ADD      sp,sp,#0x1c
00001a  bdf0              POP      {r4-r7,pc}
                  |L13.28|
00001c  2000              MOVS     r0,#0                 ;303
00001e  9001              STR      r0,[sp,#4]            ;303
000020  2151              MOVS     r1,#0x51              ;305
000022  0609              LSLS     r1,r1,#24             ;305
000024  6820              LDR      r0,[r4,#0]            ;305
000026  4288              CMP      r0,r1                 ;305
000028  d103              BNE      |L13.50|
00002a  20f0              MOVS     r0,#0xf0              ;307
00002c  f7fffffe          BL       MID_CSC_GetCK_PRFreq
000030  9006              STR      r0,[sp,#0x18]         ;307
                  |L13.50|
000032  493e              LDR      r1,|L13.300|
000034  6820              LDR      r0,[r4,#0]            ;311
000036  4288              CMP      r0,r1                 ;311
000038  d103              BNE      |L13.66|
00003a  20f0              MOVS     r0,#0xf0              ;313
00003c  f7fffffe          BL       MID_CSC_GetCK_PRFreq
000040  9006              STR      r0,[sp,#0x18]         ;313
                  |L13.66|
000042  493b              LDR      r1,|L13.304|
000044  9806              LDR      r0,[sp,#0x18]         ;317
000046  4288              CMP      r0,r1                 ;317
000048  d805              BHI      |L13.86|
00004a  2001              MOVS     r0,#1                 ;319
00004c  9005              STR      r0,[sp,#0x14]         ;319
00004e  9004              STR      r0,[sp,#0x10]         ;320
000050  2009              MOVS     r0,#9                 ;321
000052  9002              STR      r0,[sp,#8]            ;321
000054  e024              B        |L13.160|
                  |L13.86|
000056  bf00              NOP                            ;326
                  |L13.88|
000058  4629              MOV      r1,r5                 ;327
00005a  9806              LDR      r0,[sp,#0x18]         ;327
00005c  f7fffffe          BL       __aeabi_uidivmod
000060  4607              MOV      r7,r0                 ;327
000062  9905              LDR      r1,[sp,#0x14]         ;327
000064  f7fffffe          BL       __aeabi_uidivmod
000068  4606              MOV      r6,r0                 ;327
00006a  9904              LDR      r1,[sp,#0x10]         ;327
00006c  f7fffffe          BL       __aeabi_uidivmod
000070  9002              STR      r0,[sp,#8]            ;327
000072  9802              LDR      r0,[sp,#8]            ;328
000074  2820              CMP      r0,#0x20              ;328
000076  d202              BCS      |L13.126|
000078  9802              LDR      r0,[sp,#8]            ;328
00007a  2809              CMP      r0,#9                 ;328
00007c  d80a              BHI      |L13.148|
                  |L13.126|
00007e  9805              LDR      r0,[sp,#0x14]         ;330
000080  1c40              ADDS     r0,r0,#1              ;330
000082  9005              STR      r0,[sp,#0x14]         ;330
000084  9805              LDR      r0,[sp,#0x14]         ;331
000086  2808              CMP      r0,#8                 ;331
000088  d904              BLS      |L13.148|
00008a  2001              MOVS     r0,#1                 ;333
00008c  9005              STR      r0,[sp,#0x14]         ;333
00008e  9804              LDR      r0,[sp,#0x10]         ;334
000090  0040              LSLS     r0,r0,#1              ;334
000092  9004              STR      r0,[sp,#0x10]         ;334
                  |L13.148|
000094  9802              LDR      r0,[sp,#8]            ;337
000096  2820              CMP      r0,#0x20              ;337
000098  d2de              BCS      |L13.88|
00009a  9802              LDR      r0,[sp,#8]            ;337
00009c  2809              CMP      r0,#9                 ;337
00009e  d9db              BLS      |L13.88|
                  |L13.160|
0000a0  9804              LDR      r0,[sp,#0x10]         ;354
0000a2  2801              CMP      r0,#1                 ;354
0000a4  d102              BNE      |L13.172|
0000a6  2000              MOVS     r0,#0                 ;355
0000a8  9003              STR      r0,[sp,#0xc]          ;355
0000aa  e00c              B        |L13.198|
                  |L13.172|
0000ac  9804              LDR      r0,[sp,#0x10]         ;358
0000ae  0840              LSRS     r0,r0,#1              ;358
0000b0  9004              STR      r0,[sp,#0x10]         ;358
0000b2  bf00              NOP                            ;359
                  |L13.180|
0000b4  9803              LDR      r0,[sp,#0xc]          ;360
0000b6  1c40              ADDS     r0,r0,#1              ;360
0000b8  9003              STR      r0,[sp,#0xc]          ;360
0000ba  9804              LDR      r0,[sp,#0x10]         ;361
0000bc  0840              LSRS     r0,r0,#1              ;361
0000be  9004              STR      r0,[sp,#0x10]         ;361
0000c0  9804              LDR      r0,[sp,#0x10]         ;362
0000c2  2800              CMP      r0,#0                 ;362
0000c4  d1f6              BNE      |L13.180|
                  |L13.198|
0000c6  210c              MOVS     r1,#0xc               ;364
0000c8  9801              LDR      r0,[sp,#4]            ;364
0000ca  4388              BICS     r0,r0,r1              ;364
0000cc  9001              STR      r0,[sp,#4]            ;364
0000ce  9905              LDR      r1,[sp,#0x14]         ;365
0000d0  1e49              SUBS     r1,r1,#1              ;365
0000d2  0209              LSLS     r1,r1,#8              ;365
0000d4  220f              MOVS     r2,#0xf               ;365
0000d6  0212              LSLS     r2,r2,#8              ;365
0000d8  4011              ANDS     r1,r1,r2              ;365
0000da  4608              MOV      r0,r1                 ;365
0000dc  9901              LDR      r1,[sp,#4]            ;365
0000de  4391              BICS     r1,r1,r2              ;365
0000e0  4301              ORRS     r1,r1,r0              ;365
0000e2  9101              STR      r1,[sp,#4]            ;365
0000e4  9903              LDR      r1,[sp,#0xc]          ;366
0000e6  0109              LSLS     r1,r1,#4              ;366
0000e8  2270              MOVS     r2,#0x70              ;366
0000ea  4011              ANDS     r1,r1,r2              ;366
0000ec  4608              MOV      r0,r1                 ;366
0000ee  9901              LDR      r1,[sp,#4]            ;366
0000f0  4391              BICS     r1,r1,r2              ;366
0000f2  4301              ORRS     r1,r1,r0              ;366
0000f4  9101              STR      r1,[sp,#4]            ;366
0000f6  9902              LDR      r1,[sp,#8]            ;367
0000f8  0849              LSRS     r1,r1,#1              ;367
0000fa  1e49              SUBS     r1,r1,#1              ;367
0000fc  0409              LSLS     r1,r1,#16             ;367
0000fe  22ff              MOVS     r2,#0xff              ;367
000100  0412              LSLS     r2,r2,#16             ;367
000102  4011              ANDS     r1,r1,r2              ;367
000104  4608              MOV      r0,r1                 ;367
000106  9901              LDR      r1,[sp,#4]            ;367
000108  4391              BICS     r1,r1,r2              ;367
00010a  4301              ORRS     r1,r1,r0              ;367
00010c  9101              STR      r1,[sp,#4]            ;367
00010e  9902              LDR      r1,[sp,#8]            ;368
000110  0849              LSRS     r1,r1,#1              ;368
000112  9a02              LDR      r2,[sp,#8]            ;368
000114  1a51              SUBS     r1,r2,r1              ;368
000116  0609              LSLS     r1,r1,#24             ;368
000118  0e08              LSRS     r0,r1,#24             ;368
00011a  0600              LSLS     r0,r0,#24             ;368
00011c  9901              LDR      r1,[sp,#4]            ;368
00011e  0209              LSLS     r1,r1,#8              ;368
000120  0a09              LSRS     r1,r1,#8              ;368
000122  4301              ORRS     r1,r1,r0              ;368
000124  9101              STR      r1,[sp,#4]            ;368
000126  9801              LDR      r0,[sp,#4]            ;370
000128  e776              B        |L13.24|
;;;372    
                          ENDP

00012a  0000              DCW      0x0000
                  |L13.300|
                          DCD      0x51010000
                  |L13.304|
                          DCD      0x000dbba0

                          AREA ||i.MID_I2C_GetMode||, CODE, READONLY, ALIGN=1

                  MID_I2C_GetMode PROC
;;;3030    */
;;;3031   MID_I2C_ModeTypeDef MID_I2C_GetMode(I2C_HandleTypeDef *mI2C)
000000  4601              MOV      r1,r0
;;;3032   {
;;;3033       return mI2C->Mode;
000002  8e48              LDRH     r0,[r1,#0x32]
;;;3034   }
000004  4770              BX       lr
;;;3035   
                          ENDP


                          AREA ||i.MID_I2C_GetState||, CODE, READONLY, ALIGN=1

                  MID_I2C_GetState PROC
;;;3016    */
;;;3017   MID_I2C_StateTypeDef MID_I2C_GetState(I2C_HandleTypeDef *mI2C)
000000  4601              MOV      r1,r0
;;;3018   {
;;;3019       /* Return I2C handle state */
;;;3020       return mI2C->State;
000002  2034              MOVS     r0,#0x34
000004  5c40              LDRB     r0,[r0,r1]
;;;3021   }
000006  4770              BX       lr
;;;3022   
                          ENDP


                          AREA ||i.MID_I2C_IRQHandler||, CODE, READONLY, ALIGN=1

                  MID_I2C_IRQHandler PROC
;;;2864    */
;;;2865   void MID_I2C_IRQHandler(I2C_HandleTypeDef *mI2C)
000000  b570              PUSH     {r4-r6,lr}
;;;2866   {
000002  4604              MOV      r4,r0
;;;2867       /* Get current IT Flags and IT sources value */
;;;2868       uint32_t itflags   = READ_REG(mI2C->Instance->STA.W);
000004  6820              LDR      r0,[r4,#0]
000006  6805              LDR      r5,[r0,#0]
;;;2869       uint32_t itsources = READ_REG(mI2C->Instance->INT.W);
000008  6820              LDR      r0,[r4,#0]
00000a  6846              LDR      r6,[r0,#4]
;;;2870   
;;;2871       /* I2C events treatment -------------------------------------*/
;;;2872       if(mI2C->XferISR != NULL)
00000c  6a60              LDR      r0,[r4,#0x24]
00000e  2800              CMP      r0,#0
000010  d004              BEQ      |L16.28|
;;;2873       {
;;;2874           mI2C->XferISR(mI2C, itflags, itsources);
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  6a63              LDR      r3,[r4,#0x24]
00001a  4798              BLX      r3
                  |L16.28|
;;;2875       }
;;;2876   }
00001c  bd70              POP      {r4-r6,pc}
;;;2877   
                          ENDP


                          AREA ||i.MID_I2C_Init||, CODE, READONLY, ALIGN=2

                  MID_I2C_Init PROC
;;;393     */
;;;394    MID_StatusTypeDef MID_I2C_Init(I2C_HandleTypeDef *mI2C)
000000  b510              PUSH     {r4,lr}
;;;395    {
000002  4604              MOV      r4,r0
;;;396        /* Check the I2C handle allocation */
;;;397        if(mI2C == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L17.12|
;;;398        {
;;;399            return MID_ERROR;
000008  2001              MOVS     r0,#1
                  |L17.10|
;;;400        }
;;;401    
;;;402        /* Check the parameters */
;;;403        assert_param(IS_I2C_ALL_INSTANCE(mI2C->Instance));
;;;404        assert_param(IS_I2C_OWN_ADDRESS1(mI2C->Init.OwnAddress1));
;;;405        assert_param(IS_I2C_OWN_ADDRESS1_MASK(mI2C->Init.OwnAddress1Masks));
;;;406        assert_param(IS_I2C_ADDRESSING_MODE(mI2C->Init.AddressingMode));
;;;407        assert_param(IS_I2C_DUAL_ADDRESS(mI2C->Init.DualAddressMode));
;;;408        assert_param(IS_I2C_OWN_ADDRESS2(mI2C->Init.OwnAddress2));
;;;409        assert_param(IS_I2C_GENERAL_CALL(mI2C->Init.GeneralCallMode));
;;;410    
;;;411        if(mI2C->State == MID_I2C_STATE_RESET)
;;;412        {
;;;413            /* Allocate lock resource and initialize it */
;;;414            mI2C->Lock = MID_UnLocked;
;;;415    
;;;416            /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
;;;417            MID_I2C_MspInit(mI2C);
;;;418        }
;;;419    
;;;420        mI2C->State = MID_I2C_STATE_BUSY;
;;;421    
;;;422        /* Disable the selected I2C peripheral */
;;;423        __DRV_I2C_DISABLE(mI2C);
;;;424    
;;;425        /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
;;;426        /* Configure I2Cx: Frequency range */
;;;427        /* Bits[31:24] HT */
;;;428        /* Bits[23:16] LT */
;;;429        /* Bits[12]    Timeout clock source select */
;;;430        /* Bits[27:24] Prescale */
;;;431        /* Bits[23:20] Divider */
;;;432        /* Bits[03:02] CK_I2C0 source select */
;;;433        mI2C->Instance->CLK.W = (mI2C->Init.Timing & (I2C_CLK_TMO_CKS_mask_w | I2C_CLK_CK_PSC_mask_w | I2C_CLK_CK_DIV_mask_w | I2C_CLK_CK_SEL_mask_w));
;;;434        mI2C->Instance->CR1.W = ((mI2C->Init.Timing >> 16) & (I2C_CR1_HT_mask_w | I2C_CR1_LT_mask_w));
;;;435    
;;;436        /*------------------- I2Cx SADR Own Address1 Configuration -----------------*/
;;;437        /* Disable Own Address1 before set the Own Address1 configuration */
;;;438        mI2C->Instance->CR0.W &= ~I2C_CR0_SADR_EN_mask_w;
;;;439    
;;;440        /* Configure I2Cx: Own Address1 */
;;;441        mI2C->Instance->SADR.B[0] = (uint8_t)mI2C->Init.OwnAddress1;
;;;442    
;;;443    #if defined(MG32_2ND) || defined(MG32_3RD)
;;;444        /* Configure I2Cx: Own Address1 Mask */
;;;445        mI2C->Instance->MASK.B[0] = (uint8_t)mI2C->Init.OwnAddress1Masks;
;;;446    #endif
;;;447    
;;;448        /*------------------- I2Cx SADR Own Address2 Configuration -----------------*/
;;;449        /* Disable Own Address2 before set the Own Address2 configuration */
;;;450        mI2C->Instance->CR0.W &= ~I2C_CR0_SADR2_EN_mask_w;
;;;451    
;;;452        /* Configure I2Cx: Own Address2 */
;;;453        mI2C->Instance->SADR.B[1] = (uint8_t)mI2C->Init.OwnAddress2;
;;;454    
;;;455        /*---------------------------- I2Cx CR0 Configuration ----------------------*/
;;;456        /* Configure I2Cx: Generalcall, Dual mode and Enable Own Address1 */
;;;457        mI2C->Instance->CR0.W |= (mI2C->Init.GeneralCallMode | mI2C->Init.DualAddressMode | I2C_CR0_SADR_EN_mask_w);
;;;458        __DRV_I2C_STA_STO_AA_001(mI2C);
;;;459    
;;;460        /* Enable the selected I2C peripheral */
;;;461        __DRV_I2C_ENABLE(mI2C);
;;;462    
;;;463        mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;464        mI2C->State = MID_I2C_STATE_READY;
;;;465        mI2C->Mode = MID_I2C_MODE_NONE;
;;;466    
;;;467        return MID_OK;
;;;468    }
00000a  bd10              POP      {r4,pc}
                  |L17.12|
00000c  2034              MOVS     r0,#0x34              ;411
00000e  5d00              LDRB     r0,[r0,r4]            ;411
000010  2800              CMP      r0,#0                 ;411
000012  d105              BNE      |L17.32|
000014  2100              MOVS     r1,#0                 ;414
000016  2030              MOVS     r0,#0x30              ;414
000018  5501              STRB     r1,[r0,r4]            ;414
00001a  4620              MOV      r0,r4                 ;417
00001c  f7fffffe          BL       MID_I2C_MspInit
                  |L17.32|
000020  2101              MOVS     r1,#1                 ;420
000022  2034              MOVS     r0,#0x34              ;420
000024  5501              STRB     r1,[r0,r4]            ;420
000026  6820              LDR      r0,[r4,#0]            ;423
000028  6900              LDR      r0,[r0,#0x10]         ;423
00002a  4388              BICS     r0,r0,r1              ;423
00002c  6821              LDR      r1,[r4,#0]            ;423
00002e  6108              STR      r0,[r1,#0x10]         ;423
000030  491c              LDR      r1,|L17.164|
000032  6860              LDR      r0,[r4,#4]            ;433
000034  4008              ANDS     r0,r0,r1              ;433
000036  6821              LDR      r1,[r4,#0]            ;433
000038  6088              STR      r0,[r1,#8]            ;433
00003a  6860              LDR      r0,[r4,#4]            ;434
00003c  0c00              LSRS     r0,r0,#16             ;434
00003e  491a              LDR      r1,|L17.168|
000040  4008              ANDS     r0,r0,r1              ;434
000042  6821              LDR      r1,[r4,#0]            ;434
000044  6148              STR      r0,[r1,#0x14]         ;434
000046  6820              LDR      r0,[r4,#0]            ;438
000048  6900              LDR      r0,[r0,#0x10]         ;438
00004a  2102              MOVS     r1,#2                 ;438
00004c  4388              BICS     r0,r0,r1              ;438
00004e  6821              LDR      r1,[r4,#0]            ;438
000050  6108              STR      r0,[r1,#0x10]         ;438
000052  7a20              LDRB     r0,[r4,#8]            ;441
000054  6821              LDR      r1,[r4,#0]            ;441
000056  7708              STRB     r0,[r1,#0x1c]         ;441
000058  6820              LDR      r0,[r4,#0]            ;450
00005a  6900              LDR      r0,[r0,#0x10]         ;450
00005c  2104              MOVS     r1,#4                 ;450
00005e  4388              BICS     r0,r0,r1              ;450
000060  6821              LDR      r1,[r4,#0]            ;450
000062  6108              STR      r0,[r1,#0x10]         ;450
000064  7c21              LDRB     r1,[r4,#0x10]         ;453
000066  6820              LDR      r0,[r4,#0]            ;453
000068  7741              STRB     r1,[r0,#0x1d]         ;453
00006a  68e1              LDR      r1,[r4,#0xc]          ;457
00006c  6960              LDR      r0,[r4,#0x14]         ;457
00006e  4308              ORRS     r0,r0,r1              ;457
000070  2102              MOVS     r1,#2                 ;457
000072  4308              ORRS     r0,r0,r1              ;457
000074  6821              LDR      r1,[r4,#0]            ;457
000076  6909              LDR      r1,[r1,#0x10]         ;457
000078  4308              ORRS     r0,r0,r1              ;457
00007a  6821              LDR      r1,[r4,#0]            ;457
00007c  6108              STR      r0,[r1,#0x10]         ;457
00007e  2074              MOVS     r0,#0x74              ;458
000080  6821              LDR      r1,[r4,#0]            ;458
000082  7608              STRB     r0,[r1,#0x18]         ;458
000084  6820              LDR      r0,[r4,#0]            ;461
000086  6900              LDR      r0,[r0,#0x10]         ;461
000088  2101              MOVS     r1,#1                 ;461
00008a  4308              ORRS     r0,r0,r1              ;461
00008c  6821              LDR      r1,[r4,#0]            ;461
00008e  6108              STR      r0,[r1,#0x10]         ;461
000090  2000              MOVS     r0,#0                 ;463
000092  86e0              STRH     r0,[r4,#0x36]         ;463
000094  2180              MOVS     r1,#0x80              ;464
000096  2034              MOVS     r0,#0x34              ;464
000098  5501              STRB     r1,[r0,r4]            ;464
00009a  2000              MOVS     r0,#0                 ;465
00009c  8660              STRH     r0,[r4,#0x32]         ;465
00009e  bf00              NOP                            ;467
0000a0  e7b3              B        |L17.10|
;;;469    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L17.164|
                          DCD      0x0000177c
                  |L17.168|
                          DCD      0x00000f1f

                          AREA ||i.MID_I2C_IsDeviceReady||, CODE, READONLY, ALIGN=2

                  MID_I2C_IsDeviceReady PROC
;;;609     */
;;;610    MID_StatusTypeDef MID_I2C_IsDeviceReady(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
000000  b5fe              PUSH     {r1-r7,lr}
;;;611    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;612        uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;613        __IO uint8_t lEventTemp;
;;;614    
;;;615        __IO uint32_t I2C_Trials = 0U;
00000e  9000              STR      r0,[sp,#0]
;;;616    
;;;617        if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
000010  2034              MOVS     r0,#0x34
000012  5d00              LDRB     r0,[r0,r4]
000014  2181              MOVS     r1,#0x81
000016  4008              ANDS     r0,r0,r1
000018  2880              CMP      r0,#0x80
00001a  d170              BNE      |L18.254|
;;;618        {
;;;619            if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
00001c  6820              LDR      r0,[r4,#0]
00001e  6800              LDR      r0,[r0,#0]
000020  07c0              LSLS     r0,r0,#31
000022  0fc0              LSRS     r0,r0,#31
000024  2101              MOVS     r1,#1
000026  4048              EORS     r0,r0,r1
000028  4048              EORS     r0,r0,r1
00002a  2800              CMP      r0,#0
00002c  d016              BEQ      |L18.92|
;;;620            {
;;;621                if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
00002e  6820              LDR      r0,[r4,#0]
000030  6800              LDR      r0,[r0,#0]
000032  2102              MOVS     r1,#2
000034  4008              ANDS     r0,r0,r1
000036  0840              LSRS     r0,r0,#1
000038  2800              CMP      r0,#0
00003a  d00f              BEQ      |L18.92|
;;;622                {
;;;623                    lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
00003c  6820              LDR      r0,[r4,#0]
00003e  3020              ADDS     r0,r0,#0x20
000040  7a00              LDRB     r0,[r0,#8]
000042  21f8              MOVS     r1,#0xf8
000044  4008              ANDS     r0,r0,r1
000046  9001              STR      r0,[sp,#4]
;;;624                    if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000048  4669              MOV      r1,sp
00004a  7908              LDRB     r0,[r1,#4]
00004c  2808              CMP      r0,#8
00004e  d005              BEQ      |L18.92|
000050  4668              MOV      r0,sp
000052  7900              LDRB     r0,[r0,#4]
000054  2810              CMP      r0,#0x10
000056  d001              BEQ      |L18.92|
;;;625                        return MID_ERROR;
000058  2001              MOVS     r0,#1
                  |L18.90|
;;;626                }
;;;627            }
;;;628    
;;;629            /* Process Locked */
;;;630            __MID_LOCK(mI2C);
;;;631    
;;;632            I2C_BUFFMODE_DISABLE(mI2C);
;;;633    
;;;634            /* Disable All Interrupt */
;;;635            __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;636    
;;;637            /* Clear I2C Flag */
;;;638            __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;639    
;;;640            do{
;;;641                mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;642                mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;643                mI2C->Mode = MID_I2C_MODE_MASTER_STOP;
;;;644    
;;;645                /* Prepare transfer parameters */
;;;646                mI2C->DevAddress = DevAddress & 0xFFFE;
;;;647                mI2C->pBuffPtr = NULL;
;;;648                mI2C->XferSize = NULL;
;;;649                mI2C->XferCount = NULL;
;;;650                mI2C->XferISR = NULL;
;;;651    
;;;652                /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
;;;653                /* Wait until STOPF flag is set or a NACK flag is set*/
;;;654                tickstart = MID_GetTick();
;;;655    
;;;656                /* Send Bus Start */
;;;657                lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;658                if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;659                    __DRV_I2C_STA_1(mI2C);
;;;660    
;;;661                /* Check if the NACKF flag has not been set */
;;;662                do{
;;;663                    if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, Timeout, tickstart) != MID_OK)
;;;664                    {
;;;665                        /* Process Unlocked */
;;;666                        mI2C->State = MID_I2C_STATE_READY;
;;;667                        __MID_UNLOCK(mI2C);
;;;668                        return MID_ERROR;
;;;669                    }
;;;670                    I2C_BytemodeMasterEventHandle(mI2C);
;;;671                }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;672    
;;;673                if((mI2C->State & MID_I2C_STATE_ERROR) == 0)
;;;674                {
;;;675                    /* Process Unlocked */
;;;676                    mI2C->State = MID_I2C_STATE_READY;
;;;677                    __MID_UNLOCK(mI2C);
;;;678                    return MID_OK;
;;;679                }
;;;680                I2C_Trials ++;
;;;681            }while(I2C_Trials < Trials);
;;;682    
;;;683            mI2C->State = MID_I2C_STATE_READY;
;;;684            /* Process Unlocked */
;;;685            __MID_UNLOCK(mI2C);
;;;686            return MID_ERROR;
;;;687        }
;;;688        else
;;;689        {
;;;690            return MID_BUSY;
;;;691        }
;;;692    }
00005a  bdfe              POP      {r1-r7,pc}
                  |L18.92|
00005c  bf00              NOP                            ;630
00005e  2030              MOVS     r0,#0x30              ;630
000060  5d00              LDRB     r0,[r0,r4]            ;630
000062  2801              CMP      r0,#1                 ;630
000064  d101              BNE      |L18.106|
000066  2002              MOVS     r0,#2                 ;630
000068  e7f7              B        |L18.90|
                  |L18.106|
00006a  2101              MOVS     r1,#1                 ;630
00006c  2030              MOVS     r0,#0x30              ;630
00006e  5501              STRB     r1,[r0,r4]            ;630
000070  bf00              NOP                            ;630
000072  6820              LDR      r0,[r4,#0]            ;632
000074  7c00              LDRB     r0,[r0,#0x10]         ;632
000076  2140              MOVS     r1,#0x40              ;632
000078  4388              BICS     r0,r0,r1              ;632
00007a  6821              LDR      r1,[r4,#0]            ;632
00007c  7408              STRB     r0,[r1,#0x10]         ;632
00007e  6820              LDR      r0,[r4,#0]            ;635
000080  6840              LDR      r0,[r0,#4]            ;635
000082  210e              MOVS     r1,#0xe               ;635
000084  4388              BICS     r0,r0,r1              ;635
000086  6821              LDR      r1,[r4,#0]            ;635
000088  6048              STR      r0,[r1,#4]            ;635
00008a  4833              LDR      r0,|L18.344|
00008c  6821              LDR      r1,[r4,#0]            ;638
00008e  6008              STR      r0,[r1,#0]            ;638
000090  bf00              NOP                            ;640
                  |L18.146|
000092  2000              MOVS     r0,#0                 ;641
000094  86e0              STRH     r0,[r4,#0x36]         ;641
000096  2183              MOVS     r1,#0x83              ;642
000098  2034              MOVS     r0,#0x34              ;642
00009a  5501              STRB     r1,[r0,r4]            ;642
00009c  2003              MOVS     r0,#3                 ;643
00009e  0240              LSLS     r0,r0,#9              ;643
0000a0  8660              STRH     r0,[r4,#0x32]         ;643
0000a2  482e              LDR      r0,|L18.348|
0000a4  4028              ANDS     r0,r0,r5              ;646
0000a6  83a0              STRH     r0,[r4,#0x1c]         ;646
0000a8  2000              MOVS     r0,#0                 ;647
0000aa  61a0              STR      r0,[r4,#0x18]         ;647
0000ac  83e0              STRH     r0,[r4,#0x1e]         ;648
0000ae  8420              STRH     r0,[r4,#0x20]         ;649
0000b0  6260              STR      r0,[r4,#0x24]         ;650
0000b2  f7fffffe          BL       MID_GetTick
0000b6  9002              STR      r0,[sp,#8]            ;654
0000b8  6820              LDR      r0,[r4,#0]            ;657
0000ba  3020              ADDS     r0,r0,#0x20           ;657
0000bc  7a00              LDRB     r0,[r0,#8]            ;657
0000be  21f8              MOVS     r1,#0xf8              ;657
0000c0  4008              ANDS     r0,r0,r1              ;657
0000c2  9001              STR      r0,[sp,#4]            ;657
0000c4  4669              MOV      r1,sp                 ;658
0000c6  7908              LDRB     r0,[r1,#4]            ;658
0000c8  28f8              CMP      r0,#0xf8              ;658
0000ca  d003              BEQ      |L18.212|
0000cc  4668              MOV      r0,sp                 ;658
0000ce  7900              LDRB     r0,[r0,#4]            ;658
0000d0  28a0              CMP      r0,#0xa0              ;658
0000d2  d102              BNE      |L18.218|
                  |L18.212|
0000d4  2011              MOVS     r0,#0x11              ;659
0000d6  6821              LDR      r1,[r4,#0]            ;659
0000d8  7608              STRB     r0,[r1,#0x18]         ;659
                  |L18.218|
0000da  bf00              NOP                            ;662
                  |L18.220|
0000dc  4639              MOV      r1,r7                 ;663
0000de  4620              MOV      r0,r4                 ;663
0000e0  9a02              LDR      r2,[sp,#8]            ;663
0000e2  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
0000e6  2800              CMP      r0,#0                 ;663
0000e8  d00a              BEQ      |L18.256|
0000ea  2180              MOVS     r1,#0x80              ;666
0000ec  2034              MOVS     r0,#0x34              ;666
0000ee  5501              STRB     r1,[r0,r4]            ;666
0000f0  bf00              NOP                            ;667
0000f2  2100              MOVS     r1,#0                 ;667
0000f4  2030              MOVS     r0,#0x30              ;667
0000f6  5501              STRB     r1,[r0,r4]            ;667
0000f8  bf00              NOP                            ;667
0000fa  2001              MOVS     r0,#1                 ;668
0000fc  e7ad              B        |L18.90|
                  |L18.254|
0000fe  e028              B        |L18.338|
                  |L18.256|
000100  4620              MOV      r0,r4                 ;670
000102  f7fffffe          BL       I2C_BytemodeMasterEventHandle
000106  2034              MOVS     r0,#0x34              ;671
000108  5d00              LDRB     r0,[r0,r4]            ;671
00010a  07c0              LSLS     r0,r0,#31             ;671
00010c  0fc0              LSRS     r0,r0,#31             ;671
00010e  2800              CMP      r0,#0                 ;671
000110  d1e4              BNE      |L18.220|
000112  2034              MOVS     r0,#0x34              ;673
000114  5d00              LDRB     r0,[r0,r4]            ;673
000116  2110              MOVS     r1,#0x10              ;673
000118  4008              ANDS     r0,r0,r1              ;673
00011a  2800              CMP      r0,#0                 ;673
00011c  d109              BNE      |L18.306|
00011e  2180              MOVS     r1,#0x80              ;676
000120  2034              MOVS     r0,#0x34              ;676
000122  5501              STRB     r1,[r0,r4]            ;676
000124  bf00              NOP                            ;677
000126  2100              MOVS     r1,#0                 ;677
000128  2030              MOVS     r0,#0x30              ;677
00012a  5501              STRB     r1,[r0,r4]            ;677
00012c  bf00              NOP                            ;677
00012e  2000              MOVS     r0,#0                 ;678
000130  e793              B        |L18.90|
                  |L18.306|
000132  9800              LDR      r0,[sp,#0]            ;680
000134  1c40              ADDS     r0,r0,#1              ;680
000136  9000              STR      r0,[sp,#0]            ;680
000138  9800              LDR      r0,[sp,#0]            ;681
00013a  42b0              CMP      r0,r6                 ;681
00013c  d3a9              BCC      |L18.146|
00013e  2180              MOVS     r1,#0x80              ;683
000140  2034              MOVS     r0,#0x34              ;683
000142  5501              STRB     r1,[r0,r4]            ;683
000144  bf00              NOP                            ;685
000146  2100              MOVS     r1,#0                 ;685
000148  2030              MOVS     r0,#0x30              ;685
00014a  5501              STRB     r1,[r0,r4]            ;685
00014c  bf00              NOP                            ;685
00014e  2001              MOVS     r0,#1                 ;686
000150  e783              B        |L18.90|
                  |L18.338|
000152  2002              MOVS     r0,#2                 ;690
000154  e781              B        |L18.90|
;;;693    
                          ENDP

000156  0000              DCW      0x0000
                  |L18.344|
                          DCD      0x00f80300
                  |L18.348|
                          DCD      0x0000fffe

                          AREA ||i.MID_I2C_MasterRxCpltCallback||, CODE, READONLY, ALIGN=1

                  MID_I2C_MasterRxCpltCallback PROC
;;;2903    */
;;;2904   __weak void MID_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *mI2C)
000000  4770              BX       lr
;;;2905   {
;;;2906     /* Prevent unused argument(s) compilation warning */
;;;2907     UNUSED(mI2C);
;;;2908   
;;;2909     /* NOTE : This function should not be modified, when the callback is needed,
;;;2910               the MID_I2C_MasterRxCpltCallback could be implemented in the user file
;;;2911     */
;;;2912   }
;;;2913   
                          ENDP


                          AREA ||i.MID_I2C_MasterTxCpltCallback||, CODE, READONLY, ALIGN=1

                  MID_I2C_MasterTxCpltCallback PROC
;;;2885    */
;;;2886   __weak void MID_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *mI2C)
000000  4770              BX       lr
;;;2887   {
;;;2888     /* Prevent unused argument(s) compilation warning */
;;;2889     UNUSED(mI2C);
;;;2890   
;;;2891     /* NOTE : This function should not be modified, when the callback is needed,
;;;2892               the MID_I2C_MasterTxCpltCallback could be implemented in the user file
;;;2893     */
;;;2894   }
;;;2895   
                          ENDP


                          AREA ||i.MID_I2C_Master_Receive||, CODE, READONLY, ALIGN=2

                  MID_I2C_Master_Receive PROC
;;;877     */
;;;878    MID_StatusTypeDef MID_I2C_Master_Receive(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  b5fe              PUSH     {r1-r7,lr}
;;;879    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;880        uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;881        __IO uint8_t lEventTemp;
;;;882    
;;;883        if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000e  2034              MOVS     r0,#0x34
000010  5d00              LDRB     r0,[r0,r4]
000012  2181              MOVS     r1,#0x81
000014  4008              ANDS     r0,r0,r1
000016  2880              CMP      r0,#0x80
000018  d17e              BNE      |L21.280|
;;;884        {
;;;885            if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  07c0              LSLS     r0,r0,#31
000020  0fc0              LSRS     r0,r0,#31
000022  2101              MOVS     r1,#1
000024  4048              EORS     r0,r0,r1
000026  4048              EORS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d016              BEQ      |L21.90|
;;;886            {
;;;887                if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
00002c  6820              LDR      r0,[r4,#0]
00002e  6800              LDR      r0,[r0,#0]
000030  2102              MOVS     r1,#2
000032  4008              ANDS     r0,r0,r1
000034  0840              LSRS     r0,r0,#1
000036  2800              CMP      r0,#0
000038  d00f              BEQ      |L21.90|
;;;888                {
;;;889                    lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
00003a  6820              LDR      r0,[r4,#0]
00003c  3020              ADDS     r0,r0,#0x20
00003e  7a00              LDRB     r0,[r0,#8]
000040  21f8              MOVS     r1,#0xf8
000042  4008              ANDS     r0,r0,r1
000044  9000              STR      r0,[sp,#0]
;;;890                    if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000046  4669              MOV      r1,sp
000048  7808              LDRB     r0,[r1,#0]
00004a  2808              CMP      r0,#8
00004c  d005              BEQ      |L21.90|
00004e  4668              MOV      r0,sp
000050  7800              LDRB     r0,[r0,#0]
000052  2810              CMP      r0,#0x10
000054  d001              BEQ      |L21.90|
;;;891                        return MID_ERROR;
000056  2001              MOVS     r0,#1
                  |L21.88|
;;;892                }
;;;893            }
;;;894    
;;;895            /* Process Locked */
;;;896            __MID_LOCK(mI2C);
;;;897    
;;;898            I2C_BUFFMODE_DISABLE(mI2C);
;;;899    
;;;900            /* Disable All Interrupt */
;;;901            __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;902    
;;;903            /* Clear I2C Flag */
;;;904            __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;905    
;;;906            mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;907            mI2C->State = MID_I2C_STATE_BUSY_RX;
;;;908            mI2C->Mode = MID_I2C_MODE_MASTER_STOP;
;;;909    
;;;910            /* Prepare transfer parameters */
;;;911            mI2C->DevAddress = DevAddress | 0x0001;
;;;912            mI2C->pBuffPtr = pData;
;;;913            mI2C->XferSize = Size;
;;;914            mI2C->XferCount = NULL;
;;;915            mI2C->XferISR = NULL;
;;;916    
;;;917            /* Init tickstart for timeout management */
;;;918            tickstart = MID_GetTick();
;;;919    
;;;920            /* Send Bus Start */
;;;921            lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;922            if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;923                __DRV_I2C_STA_1(mI2C);
;;;924    
;;;925            do{
;;;926                if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, Timeout, tickstart) != MID_OK)
;;;927                {
;;;928                    /* Process Unlocked */
;;;929                    __MID_UNLOCK(mI2C);
;;;930                    return MID_ERROR;
;;;931                }
;;;932                I2C_BytemodeMasterEventHandle(mI2C);
;;;933            }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;934    
;;;935            mI2C->State = MID_I2C_STATE_READY;
;;;936            mI2C->Mode = MID_I2C_MODE_NONE;
;;;937    
;;;938            /* Process Unlocked */
;;;939            __MID_UNLOCK(mI2C);
;;;940    
;;;941            if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;942                return MID_ERROR;
;;;943            else
;;;944                return MID_OK;
;;;945        }
;;;946        else
;;;947        {
;;;948            return MID_BUSY;
;;;949        }
;;;950    }
000058  bdfe              POP      {r1-r7,pc}
                  |L21.90|
00005a  bf00              NOP                            ;896
00005c  2030              MOVS     r0,#0x30              ;896
00005e  5d00              LDRB     r0,[r0,r4]            ;896
000060  2801              CMP      r0,#1                 ;896
000062  d101              BNE      |L21.104|
000064  2002              MOVS     r0,#2                 ;896
000066  e7f7              B        |L21.88|
                  |L21.104|
000068  2101              MOVS     r1,#1                 ;896
00006a  2030              MOVS     r0,#0x30              ;896
00006c  5501              STRB     r1,[r0,r4]            ;896
00006e  bf00              NOP                            ;896
000070  6820              LDR      r0,[r4,#0]            ;898
000072  7c00              LDRB     r0,[r0,#0x10]         ;898
000074  2140              MOVS     r1,#0x40              ;898
000076  4388              BICS     r0,r0,r1              ;898
000078  6821              LDR      r1,[r4,#0]            ;898
00007a  7408              STRB     r0,[r1,#0x10]         ;898
00007c  6820              LDR      r0,[r4,#0]            ;901
00007e  6840              LDR      r0,[r0,#4]            ;901
000080  210e              MOVS     r1,#0xe               ;901
000082  4388              BICS     r0,r0,r1              ;901
000084  6821              LDR      r1,[r4,#0]            ;901
000086  6048              STR      r0,[r1,#4]            ;901
000088  4829              LDR      r0,|L21.304|
00008a  6821              LDR      r1,[r4,#0]            ;904
00008c  6008              STR      r0,[r1,#0]            ;904
00008e  2000              MOVS     r0,#0                 ;906
000090  86e0              STRH     r0,[r4,#0x36]         ;906
000092  2185              MOVS     r1,#0x85              ;907
000094  2034              MOVS     r0,#0x34              ;907
000096  5501              STRB     r1,[r0,r4]            ;907
000098  2003              MOVS     r0,#3                 ;908
00009a  0240              LSLS     r0,r0,#9              ;908
00009c  8660              STRH     r0,[r4,#0x32]         ;908
00009e  2001              MOVS     r0,#1                 ;911
0000a0  4328              ORRS     r0,r0,r5              ;911
0000a2  83a0              STRH     r0,[r4,#0x1c]         ;911
0000a4  61a6              STR      r6,[r4,#0x18]         ;912
0000a6  83e7              STRH     r7,[r4,#0x1e]         ;913
0000a8  2000              MOVS     r0,#0                 ;914
0000aa  8420              STRH     r0,[r4,#0x20]         ;914
0000ac  6260              STR      r0,[r4,#0x24]         ;915
0000ae  f7fffffe          BL       MID_GetTick
0000b2  9001              STR      r0,[sp,#4]            ;918
0000b4  6820              LDR      r0,[r4,#0]            ;921
0000b6  3020              ADDS     r0,r0,#0x20           ;921
0000b8  7a00              LDRB     r0,[r0,#8]            ;921
0000ba  21f8              MOVS     r1,#0xf8              ;921
0000bc  4008              ANDS     r0,r0,r1              ;921
0000be  9000              STR      r0,[sp,#0]            ;921
0000c0  4669              MOV      r1,sp                 ;922
0000c2  7808              LDRB     r0,[r1,#0]            ;922
0000c4  28f8              CMP      r0,#0xf8              ;922
0000c6  d003              BEQ      |L21.208|
0000c8  4668              MOV      r0,sp                 ;922
0000ca  7800              LDRB     r0,[r0,#0]            ;922
0000cc  28a0              CMP      r0,#0xa0              ;922
0000ce  d102              BNE      |L21.214|
                  |L21.208|
0000d0  2011              MOVS     r0,#0x11              ;923
0000d2  6821              LDR      r1,[r4,#0]            ;923
0000d4  7608              STRB     r0,[r1,#0x18]         ;923
                  |L21.214|
0000d6  bf00              NOP                            ;925
                  |L21.216|
0000d8  4620              MOV      r0,r4                 ;926
0000da  9a01              LDR      r2,[sp,#4]            ;926
0000dc  9908              LDR      r1,[sp,#0x20]         ;926
0000de  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
0000e2  2800              CMP      r0,#0                 ;926
0000e4  d006              BEQ      |L21.244|
0000e6  bf00              NOP                            ;929
0000e8  2100              MOVS     r1,#0                 ;929
0000ea  2030              MOVS     r0,#0x30              ;929
0000ec  5501              STRB     r1,[r0,r4]            ;929
0000ee  bf00              NOP                            ;929
0000f0  2001              MOVS     r0,#1                 ;930
0000f2  e7b1              B        |L21.88|
                  |L21.244|
0000f4  4620              MOV      r0,r4                 ;932
0000f6  f7fffffe          BL       I2C_BytemodeMasterEventHandle
0000fa  2034              MOVS     r0,#0x34              ;933
0000fc  5d00              LDRB     r0,[r0,r4]            ;933
0000fe  07c0              LSLS     r0,r0,#31             ;933
000100  0fc0              LSRS     r0,r0,#31             ;933
000102  2800              CMP      r0,#0                 ;933
000104  d1e8              BNE      |L21.216|
000106  2180              MOVS     r1,#0x80              ;935
000108  2034              MOVS     r0,#0x34              ;935
00010a  5501              STRB     r1,[r0,r4]            ;935
00010c  2000              MOVS     r0,#0                 ;936
00010e  8660              STRH     r0,[r4,#0x32]         ;936
000110  bf00              NOP                            ;939
000112  2100              MOVS     r1,#0                 ;939
000114  2030              MOVS     r0,#0x30              ;939
000116  e000              B        |L21.282|
                  |L21.280|
000118  e008              B        |L21.300|
                  |L21.282|
00011a  5501              STRB     r1,[r0,r4]            ;939
00011c  bf00              NOP                            ;939
00011e  8ee0              LDRH     r0,[r4,#0x36]         ;941
000120  2800              CMP      r0,#0                 ;941
000122  d001              BEQ      |L21.296|
000124  2001              MOVS     r0,#1                 ;942
000126  e797              B        |L21.88|
                  |L21.296|
000128  2000              MOVS     r0,#0                 ;944
00012a  e795              B        |L21.88|
                  |L21.300|
00012c  2002              MOVS     r0,#2                 ;948
00012e  e793              B        |L21.88|
;;;951    
                          ENDP

                  |L21.304|
                          DCD      0x00f80300

                          AREA ||i.MID_I2C_Master_Receive_DMA||, CODE, READONLY, ALIGN=2

                  MID_I2C_Master_Receive_DMA PROC
;;;1705    */
;;;1706   MID_StatusTypeDef MID_I2C_Master_Receive_DMA(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1707   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
;;;1708       MID_StatusTypeDef lDmaXferStatus;
;;;1709       __IO uint8_t lEventTemp;
;;;1710   
;;;1711       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000a  2034              MOVS     r0,#0x34
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2181              MOVS     r1,#0x81
000010  4008              ANDS     r0,r0,r1
000012  2880              CMP      r0,#0x80
000014  d178              BNE      |L22.264|
;;;1712       {
;;;1713           if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
000016  6820              LDR      r0,[r4,#0]
000018  6800              LDR      r0,[r0,#0]
00001a  07c0              LSLS     r0,r0,#31
00001c  0fc0              LSRS     r0,r0,#31
00001e  2101              MOVS     r1,#1
000020  4048              EORS     r0,r0,r1
000022  4048              EORS     r0,r0,r1
000024  2800              CMP      r0,#0
000026  d017              BEQ      |L22.88|
;;;1714           {
;;;1715               if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
000028  6820              LDR      r0,[r4,#0]
00002a  6800              LDR      r0,[r0,#0]
00002c  2102              MOVS     r1,#2
00002e  4008              ANDS     r0,r0,r1
000030  0840              LSRS     r0,r0,#1
000032  2800              CMP      r0,#0
000034  d010              BEQ      |L22.88|
;;;1716               {
;;;1717                   lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
000036  6820              LDR      r0,[r4,#0]
000038  3020              ADDS     r0,r0,#0x20
00003a  7a00              LDRB     r0,[r0,#8]
00003c  21f8              MOVS     r1,#0xf8
00003e  4008              ANDS     r0,r0,r1
000040  9000              STR      r0,[sp,#0]
;;;1718                   if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000042  4669              MOV      r1,sp
000044  7808              LDRB     r0,[r1,#0]
000046  2808              CMP      r0,#8
000048  d006              BEQ      |L22.88|
00004a  4668              MOV      r0,sp
00004c  7800              LDRB     r0,[r0,#0]
00004e  2810              CMP      r0,#0x10
000050  d002              BEQ      |L22.88|
;;;1719                       return MID_ERROR;
000052  2001              MOVS     r0,#1
                  |L22.84|
;;;1720               }
;;;1721           }
;;;1722   
;;;1723           if((pData == NULL) || (Size == 0U))
;;;1724           {
;;;1725               return  MID_ERROR;
;;;1726           }
;;;1727   
;;;1728           /* Process Locked */
;;;1729           __MID_LOCK(mI2C);
;;;1730   
;;;1731           I2C_BUFFMODE_DISABLE(mI2C);
;;;1732   
;;;1733           /* Disable All Interrupt */
;;;1734           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;1735   
;;;1736           /* Clear I2C Flag */
;;;1737           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;1738   
;;;1739           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;1740           mI2C->State = MID_I2C_STATE_BUSY_RX;
;;;1741           mI2C->Mode = MID_I2C_MODE_MASTER_RECEIVE_DMA_STOP;
;;;1742   
;;;1743           /* Prepare transfer parameters */
;;;1744           mI2C->DevAddress = DevAddress | 0x0001;
;;;1745           mI2C->pBuffPtr = pData;
;;;1746           mI2C->XferSize = Size;
;;;1747           mI2C->XferCount = NULL;
;;;1748           mI2C->XferISR = I2C_Master_ISR_IT;
;;;1749   
;;;1750           if(mI2C->hdmarx != NULL)
;;;1751           {
;;;1752               mI2C->hdmarx->XferCpltCallback = I2C_DMACplt;
;;;1753               mI2C->hdmarx->XferErrorCallback = I2C_DMAError;
;;;1754               mI2C->hdmarx->XferAbortCallback = NULL;
;;;1755               mI2C->hdmarx->XferHalfCpltCallback = NULL;
;;;1756               lDmaXferStatus = MID_DMA_Start_IT(mI2C->hdmarx, (uint32_t)pData, 0, (uint32_t)Size);
;;;1757           }
;;;1758           else
;;;1759           {
;;;1760               mI2C->State = MID_I2C_STATE_READY;
;;;1761               mI2C->Mode = MID_I2C_MODE_NONE;
;;;1762               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;1763               __MID_UNLOCK(mI2C);
;;;1764               return MID_ERROR;
;;;1765           }
;;;1766   
;;;1767           if(lDmaXferStatus == MID_OK)
;;;1768           {
;;;1769               /* Send Bus Start */
;;;1770               lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;1771               if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;1772                   __DRV_I2C_STA_1(mI2C);
;;;1773   
;;;1774               /* Process Unlocked */
;;;1775               __MID_UNLOCK(mI2C);
;;;1776   
;;;1777               /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1778                         to avoid the risk of I2C interrupt handle execution before current
;;;1779                         process unlock */
;;;1780   
;;;1781               /* Enable IEA, EVENT, interrupt */
;;;1782               /* possible to enable all of these */
;;;1783               /* I2C_IT_IEA | I2C_IT_EVENT */
;;;1784               __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;1785   
;;;1786               return MID_OK;
;;;1787           }
;;;1788           else
;;;1789           {
;;;1790               mI2C->State = MID_I2C_STATE_READY;
;;;1791               mI2C->Mode = MID_I2C_MODE_NONE;
;;;1792   
;;;1793               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;1794               __MID_UNLOCK(mI2C);
;;;1795               return MID_ERROR;
;;;1796           }
;;;1797       }
;;;1798       else
;;;1799       {
;;;1800           return MID_BUSY;
;;;1801       }
;;;1802   }
000054  b005              ADD      sp,sp,#0x14
000056  bdf0              POP      {r4-r7,pc}
                  |L22.88|
000058  2d00              CMP      r5,#0                 ;1723
00005a  d001              BEQ      |L22.96|
00005c  2e00              CMP      r6,#0                 ;1723
00005e  d101              BNE      |L22.100|
                  |L22.96|
000060  2001              MOVS     r0,#1                 ;1725
000062  e7f7              B        |L22.84|
                  |L22.100|
000064  bf00              NOP                            ;1729
000066  2030              MOVS     r0,#0x30              ;1729
000068  5d00              LDRB     r0,[r0,r4]            ;1729
00006a  2801              CMP      r0,#1                 ;1729
00006c  d101              BNE      |L22.114|
00006e  2002              MOVS     r0,#2                 ;1729
000070  e7f0              B        |L22.84|
                  |L22.114|
000072  2101              MOVS     r1,#1                 ;1729
000074  2030              MOVS     r0,#0x30              ;1729
000076  5501              STRB     r1,[r0,r4]            ;1729
000078  bf00              NOP                            ;1729
00007a  6820              LDR      r0,[r4,#0]            ;1731
00007c  7c00              LDRB     r0,[r0,#0x10]         ;1731
00007e  2140              MOVS     r1,#0x40              ;1731
000080  4388              BICS     r0,r0,r1              ;1731
000082  6821              LDR      r1,[r4,#0]            ;1731
000084  7408              STRB     r0,[r1,#0x10]         ;1731
000086  6820              LDR      r0,[r4,#0]            ;1734
000088  6840              LDR      r0,[r0,#4]            ;1734
00008a  210e              MOVS     r1,#0xe               ;1734
00008c  4388              BICS     r0,r0,r1              ;1734
00008e  6821              LDR      r1,[r4,#0]            ;1734
000090  6048              STR      r0,[r1,#4]            ;1734
000092  4837              LDR      r0,|L22.368|
000094  6821              LDR      r1,[r4,#0]            ;1737
000096  6008              STR      r0,[r1,#0]            ;1737
000098  2000              MOVS     r0,#0                 ;1739
00009a  86e0              STRH     r0,[r4,#0x36]         ;1739
00009c  2185              MOVS     r1,#0x85              ;1740
00009e  2034              MOVS     r0,#0x34              ;1740
0000a0  5501              STRB     r1,[r0,r4]            ;1740
0000a2  2023              MOVS     r0,#0x23              ;1741
0000a4  0240              LSLS     r0,r0,#9              ;1741
0000a6  8660              STRH     r0,[r4,#0x32]         ;1741
0000a8  2101              MOVS     r1,#1                 ;1744
0000aa  9802              LDR      r0,[sp,#8]            ;1744
0000ac  4308              ORRS     r0,r0,r1              ;1744
0000ae  83a0              STRH     r0,[r4,#0x1c]         ;1744
0000b0  61a5              STR      r5,[r4,#0x18]         ;1745
0000b2  83e6              STRH     r6,[r4,#0x1e]         ;1746
0000b4  2000              MOVS     r0,#0                 ;1747
0000b6  8420              STRH     r0,[r4,#0x20]         ;1747
0000b8  482e              LDR      r0,|L22.372|
0000ba  6260              STR      r0,[r4,#0x24]         ;1748
0000bc  6ae0              LDR      r0,[r4,#0x2c]         ;1750
0000be  2800              CMP      r0,#0                 ;1750
0000c0  d012              BEQ      |L22.232|
0000c2  482d              LDR      r0,|L22.376|
0000c4  6ae1              LDR      r1,[r4,#0x2c]         ;1752
0000c6  62c8              STR      r0,[r1,#0x2c]         ;1752
0000c8  482c              LDR      r0,|L22.380|
0000ca  6ae1              LDR      r1,[r4,#0x2c]         ;1753
0000cc  6348              STR      r0,[r1,#0x34]         ;1753
0000ce  2000              MOVS     r0,#0                 ;1754
0000d0  6ae1              LDR      r1,[r4,#0x2c]         ;1754
0000d2  6388              STR      r0,[r1,#0x38]         ;1754
0000d4  6ae1              LDR      r1,[r4,#0x2c]         ;1755
0000d6  6308              STR      r0,[r1,#0x30]         ;1755
0000d8  4633              MOV      r3,r6                 ;1756
0000da  2200              MOVS     r2,#0                 ;1756
0000dc  4629              MOV      r1,r5                 ;1756
0000de  6ae0              LDR      r0,[r4,#0x2c]         ;1756
0000e0  f7fffffe          BL       MID_DMA_Start_IT
0000e4  4607              MOV      r7,r0                 ;1756
0000e6  e010              B        |L22.266|
                  |L22.232|
0000e8  2180              MOVS     r1,#0x80              ;1760
0000ea  2034              MOVS     r0,#0x34              ;1760
0000ec  5501              STRB     r1,[r0,r4]            ;1760
0000ee  2000              MOVS     r0,#0                 ;1761
0000f0  8660              STRH     r0,[r4,#0x32]         ;1761
0000f2  8ee0              LDRH     r0,[r4,#0x36]         ;1762
0000f4  2140              MOVS     r1,#0x40              ;1762
0000f6  4308              ORRS     r0,r0,r1              ;1762
0000f8  86e0              STRH     r0,[r4,#0x36]         ;1762
0000fa  bf00              NOP                            ;1763
0000fc  2100              MOVS     r1,#0                 ;1763
0000fe  2030              MOVS     r0,#0x30              ;1763
000100  5501              STRB     r1,[r0,r4]            ;1763
000102  bf00              NOP                            ;1763
000104  2001              MOVS     r0,#1                 ;1764
000106  e7a5              B        |L22.84|
                  |L22.264|
000108  e02f              B        |L22.362|
                  |L22.266|
00010a  2f00              CMP      r7,#0                 ;1767
00010c  d11d              BNE      |L22.330|
00010e  6820              LDR      r0,[r4,#0]            ;1770
000110  3020              ADDS     r0,r0,#0x20           ;1770
000112  7a00              LDRB     r0,[r0,#8]            ;1770
000114  21f8              MOVS     r1,#0xf8              ;1770
000116  4008              ANDS     r0,r0,r1              ;1770
000118  9000              STR      r0,[sp,#0]            ;1770
00011a  4669              MOV      r1,sp                 ;1771
00011c  7808              LDRB     r0,[r1,#0]            ;1771
00011e  28f8              CMP      r0,#0xf8              ;1771
000120  d003              BEQ      |L22.298|
000122  4668              MOV      r0,sp                 ;1771
000124  7800              LDRB     r0,[r0,#0]            ;1771
000126  28a0              CMP      r0,#0xa0              ;1771
000128  d102              BNE      |L22.304|
                  |L22.298|
00012a  2011              MOVS     r0,#0x11              ;1772
00012c  6821              LDR      r1,[r4,#0]            ;1772
00012e  7608              STRB     r0,[r1,#0x18]         ;1772
                  |L22.304|
000130  bf00              NOP                            ;1775
000132  2100              MOVS     r1,#0                 ;1775
000134  2030              MOVS     r0,#0x30              ;1775
000136  5501              STRB     r1,[r0,r4]            ;1775
000138  bf00              NOP                            ;1775
00013a  6820              LDR      r0,[r4,#0]            ;1784
00013c  6840              LDR      r0,[r0,#4]            ;1784
00013e  2103              MOVS     r1,#3                 ;1784
000140  4308              ORRS     r0,r0,r1              ;1784
000142  6821              LDR      r1,[r4,#0]            ;1784
000144  6048              STR      r0,[r1,#4]            ;1784
000146  2000              MOVS     r0,#0                 ;1786
000148  e784              B        |L22.84|
                  |L22.330|
00014a  2180              MOVS     r1,#0x80              ;1790
00014c  2034              MOVS     r0,#0x34              ;1790
00014e  5501              STRB     r1,[r0,r4]            ;1790
000150  2000              MOVS     r0,#0                 ;1791
000152  8660              STRH     r0,[r4,#0x32]         ;1791
000154  8ee0              LDRH     r0,[r4,#0x36]         ;1793
000156  2140              MOVS     r1,#0x40              ;1793
000158  4308              ORRS     r0,r0,r1              ;1793
00015a  86e0              STRH     r0,[r4,#0x36]         ;1793
00015c  bf00              NOP                            ;1794
00015e  2100              MOVS     r1,#0                 ;1794
000160  2030              MOVS     r0,#0x30              ;1794
000162  5501              STRB     r1,[r0,r4]            ;1794
000164  bf00              NOP                            ;1794
000166  2001              MOVS     r0,#1                 ;1795
000168  e774              B        |L22.84|
                  |L22.362|
00016a  2002              MOVS     r0,#2                 ;1800
00016c  e772              B        |L22.84|
;;;1803   
                          ENDP

00016e  0000              DCW      0x0000
                  |L22.368|
                          DCD      0x00f80300
                  |L22.372|
                          DCD      I2C_Master_ISR_IT
                  |L22.376|
                          DCD      I2C_DMACplt
                  |L22.380|
                          DCD      I2C_DMAError

                          AREA ||i.MID_I2C_Master_Receive_IT||, CODE, READONLY, ALIGN=2

                  MID_I2C_Master_Receive_IT PROC
;;;1292    */
;;;1293   MID_StatusTypeDef MID_I2C_Master_Receive_IT(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
000000  b538              PUSH     {r3-r5,lr}
;;;1294   {
000002  4604              MOV      r4,r0
;;;1295       __IO uint8_t lEventTemp;
;;;1296   
;;;1297       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
000004  2034              MOVS     r0,#0x34
000006  5d00              LDRB     r0,[r0,r4]
000008  2581              MOVS     r5,#0x81
00000a  4028              ANDS     r0,r0,r5
00000c  2880              CMP      r0,#0x80
00000e  d16f              BNE      |L23.240|
;;;1298       {
;;;1299           if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
000010  6820              LDR      r0,[r4,#0]
000012  6800              LDR      r0,[r0,#0]
000014  07c0              LSLS     r0,r0,#31
000016  0fc0              LSRS     r0,r0,#31
000018  2501              MOVS     r5,#1
00001a  4068              EORS     r0,r0,r5
00001c  4068              EORS     r0,r0,r5
00001e  2800              CMP      r0,#0
000020  d016              BEQ      |L23.80|
;;;1300           {
;;;1301               if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  2502              MOVS     r5,#2
000028  4028              ANDS     r0,r0,r5
00002a  0840              LSRS     r0,r0,#1
00002c  2800              CMP      r0,#0
00002e  d00f              BEQ      |L23.80|
;;;1302               {
;;;1303                   lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
000030  6820              LDR      r0,[r4,#0]
000032  3020              ADDS     r0,r0,#0x20
000034  7a00              LDRB     r0,[r0,#8]
000036  25f8              MOVS     r5,#0xf8
000038  4028              ANDS     r0,r0,r5
00003a  9000              STR      r0,[sp,#0]
;;;1304                   if((lEventTemp != 0x08) && (lEventTemp != 0x10))
00003c  466d              MOV      r5,sp
00003e  7828              LDRB     r0,[r5,#0]
000040  2808              CMP      r0,#8
000042  d005              BEQ      |L23.80|
000044  4668              MOV      r0,sp
000046  7800              LDRB     r0,[r0,#0]
000048  2810              CMP      r0,#0x10
00004a  d001              BEQ      |L23.80|
;;;1305                       return MID_ERROR;
00004c  2001              MOVS     r0,#1
                  |L23.78|
;;;1306               }
;;;1307           }
;;;1308   
;;;1309           if((pData == NULL) || (Size == 0U))
;;;1310           {
;;;1311               return  MID_ERROR;
;;;1312           }
;;;1313   
;;;1314           /* Process Locked */
;;;1315           __MID_LOCK(mI2C);
;;;1316   
;;;1317           I2C_BUFFMODE_DISABLE(mI2C);
;;;1318   
;;;1319           /* Disable All Interrupt */
;;;1320           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;1321   
;;;1322           /* Clear I2C Flag */
;;;1323           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;1324   
;;;1325           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;1326           mI2C->State = MID_I2C_STATE_BUSY_RX;
;;;1327           mI2C->Mode = MID_I2C_MODE_MASTER_STOP;
;;;1328   
;;;1329           /* Prepare transfer parameters */
;;;1330           mI2C->DevAddress = DevAddress | 0x0001;
;;;1331           mI2C->pBuffPtr = pData;
;;;1332           mI2C->XferSize = Size;
;;;1333           mI2C->XferCount = NULL;
;;;1334           mI2C->XferISR = I2C_Master_ISR_IT;
;;;1335   
;;;1336           /* Send Bus Start */
;;;1337           lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;1338           if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;1339               __DRV_I2C_STA_1(mI2C);
;;;1340   
;;;1341           /* Process Unlocked */
;;;1342           __MID_UNLOCK(mI2C);
;;;1343   
;;;1344           /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1345                     to avoid the risk of I2C interrupt handle execution before current
;;;1346                     process unlock */
;;;1347   
;;;1348           /* Enable IEA, EVENT, interrupt */
;;;1349           /* possible to enable all of these */
;;;1350           /* I2C_IT_IEA | I2C_IT_EVENT */
;;;1351           __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;1352   
;;;1353           return MID_OK;
;;;1354       }
;;;1355       else
;;;1356       {
;;;1357           return MID_BUSY;
;;;1358       }
;;;1359   }
00004e  bd38              POP      {r3-r5,pc}
                  |L23.80|
000050  2a00              CMP      r2,#0                 ;1309
000052  d001              BEQ      |L23.88|
000054  2b00              CMP      r3,#0                 ;1309
000056  d101              BNE      |L23.92|
                  |L23.88|
000058  2001              MOVS     r0,#1                 ;1311
00005a  e7f8              B        |L23.78|
                  |L23.92|
00005c  bf00              NOP                            ;1315
00005e  2030              MOVS     r0,#0x30              ;1315
000060  5d00              LDRB     r0,[r0,r4]            ;1315
000062  2801              CMP      r0,#1                 ;1315
000064  d101              BNE      |L23.106|
000066  2002              MOVS     r0,#2                 ;1315
000068  e7f1              B        |L23.78|
                  |L23.106|
00006a  2501              MOVS     r5,#1                 ;1315
00006c  2030              MOVS     r0,#0x30              ;1315
00006e  5505              STRB     r5,[r0,r4]            ;1315
000070  bf00              NOP                            ;1315
000072  6820              LDR      r0,[r4,#0]            ;1317
000074  7c00              LDRB     r0,[r0,#0x10]         ;1317
000076  2540              MOVS     r5,#0x40              ;1317
000078  43a8              BICS     r0,r0,r5              ;1317
00007a  6825              LDR      r5,[r4,#0]            ;1317
00007c  7428              STRB     r0,[r5,#0x10]         ;1317
00007e  6820              LDR      r0,[r4,#0]            ;1320
000080  6840              LDR      r0,[r0,#4]            ;1320
000082  250e              MOVS     r5,#0xe               ;1320
000084  43a8              BICS     r0,r0,r5              ;1320
000086  6825              LDR      r5,[r4,#0]            ;1320
000088  6068              STR      r0,[r5,#4]            ;1320
00008a  481a              LDR      r0,|L23.244|
00008c  6825              LDR      r5,[r4,#0]            ;1323
00008e  6028              STR      r0,[r5,#0]            ;1323
000090  2000              MOVS     r0,#0                 ;1325
000092  86e0              STRH     r0,[r4,#0x36]         ;1325
000094  2585              MOVS     r5,#0x85              ;1326
000096  2034              MOVS     r0,#0x34              ;1326
000098  5505              STRB     r5,[r0,r4]            ;1326
00009a  2003              MOVS     r0,#3                 ;1327
00009c  0240              LSLS     r0,r0,#9              ;1327
00009e  8660              STRH     r0,[r4,#0x32]         ;1327
0000a0  2001              MOVS     r0,#1                 ;1330
0000a2  4308              ORRS     r0,r0,r1              ;1330
0000a4  83a0              STRH     r0,[r4,#0x1c]         ;1330
0000a6  61a2              STR      r2,[r4,#0x18]         ;1331
0000a8  83e3              STRH     r3,[r4,#0x1e]         ;1332
0000aa  2000              MOVS     r0,#0                 ;1333
0000ac  8420              STRH     r0,[r4,#0x20]         ;1333
0000ae  4812              LDR      r0,|L23.248|
0000b0  6260              STR      r0,[r4,#0x24]         ;1334
0000b2  6820              LDR      r0,[r4,#0]            ;1337
0000b4  3020              ADDS     r0,r0,#0x20           ;1337
0000b6  7a00              LDRB     r0,[r0,#8]            ;1337
0000b8  25f8              MOVS     r5,#0xf8              ;1337
0000ba  4028              ANDS     r0,r0,r5              ;1337
0000bc  9000              STR      r0,[sp,#0]            ;1337
0000be  466d              MOV      r5,sp                 ;1338
0000c0  7828              LDRB     r0,[r5,#0]            ;1338
0000c2  28f8              CMP      r0,#0xf8              ;1338
0000c4  d003              BEQ      |L23.206|
0000c6  4668              MOV      r0,sp                 ;1338
0000c8  7800              LDRB     r0,[r0,#0]            ;1338
0000ca  28a0              CMP      r0,#0xa0              ;1338
0000cc  d102              BNE      |L23.212|
                  |L23.206|
0000ce  2011              MOVS     r0,#0x11              ;1339
0000d0  6825              LDR      r5,[r4,#0]            ;1339
0000d2  7628              STRB     r0,[r5,#0x18]         ;1339
                  |L23.212|
0000d4  bf00              NOP                            ;1342
0000d6  2500              MOVS     r5,#0                 ;1342
0000d8  2030              MOVS     r0,#0x30              ;1342
0000da  5505              STRB     r5,[r0,r4]            ;1342
0000dc  bf00              NOP                            ;1342
0000de  6820              LDR      r0,[r4,#0]            ;1351
0000e0  6840              LDR      r0,[r0,#4]            ;1351
0000e2  2503              MOVS     r5,#3                 ;1351
0000e4  4328              ORRS     r0,r0,r5              ;1351
0000e6  6825              LDR      r5,[r4,#0]            ;1351
0000e8  6068              STR      r0,[r5,#4]            ;1351
0000ea  2000              MOVS     r0,#0                 ;1353
0000ec  e7af              B        |L23.78|
0000ee  e7ff              B        |L23.240|
                  |L23.240|
0000f0  2002              MOVS     r0,#2                 ;1357
0000f2  e7ac              B        |L23.78|
;;;1360   
                          ENDP

                  |L23.244|
                          DCD      0x00f80300
                  |L23.248|
                          DCD      I2C_Master_ISR_IT

                          AREA ||i.MID_I2C_Master_Transmit||, CODE, READONLY, ALIGN=2

                  MID_I2C_Master_Transmit PROC
;;;705     */
;;;706    MID_StatusTypeDef MID_I2C_Master_Transmit(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  b5fe              PUSH     {r1-r7,lr}
;;;707    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;708        uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;709        __IO uint8_t lEventTemp;
;;;710    
;;;711        if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000e  2034              MOVS     r0,#0x34
000010  5d00              LDRB     r0,[r0,r4]
000012  2181              MOVS     r1,#0x81
000014  4008              ANDS     r0,r0,r1
000016  2880              CMP      r0,#0x80
000018  d17e              BNE      |L24.280|
;;;712        {
;;;713            if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  07c0              LSLS     r0,r0,#31
000020  0fc0              LSRS     r0,r0,#31
000022  2101              MOVS     r1,#1
000024  4048              EORS     r0,r0,r1
000026  4048              EORS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d016              BEQ      |L24.90|
;;;714            {
;;;715                if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
00002c  6820              LDR      r0,[r4,#0]
00002e  6800              LDR      r0,[r0,#0]
000030  2102              MOVS     r1,#2
000032  4008              ANDS     r0,r0,r1
000034  0840              LSRS     r0,r0,#1
000036  2800              CMP      r0,#0
000038  d00f              BEQ      |L24.90|
;;;716                {
;;;717                    lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
00003a  6820              LDR      r0,[r4,#0]
00003c  3020              ADDS     r0,r0,#0x20
00003e  7a00              LDRB     r0,[r0,#8]
000040  21f8              MOVS     r1,#0xf8
000042  4008              ANDS     r0,r0,r1
000044  9000              STR      r0,[sp,#0]
;;;718                    if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000046  4669              MOV      r1,sp
000048  7808              LDRB     r0,[r1,#0]
00004a  2808              CMP      r0,#8
00004c  d005              BEQ      |L24.90|
00004e  4668              MOV      r0,sp
000050  7800              LDRB     r0,[r0,#0]
000052  2810              CMP      r0,#0x10
000054  d001              BEQ      |L24.90|
;;;719                        return MID_ERROR;
000056  2001              MOVS     r0,#1
                  |L24.88|
;;;720                }
;;;721            }
;;;722    
;;;723            /* Process Locked */
;;;724            __MID_LOCK(mI2C);
;;;725    
;;;726            I2C_BUFFMODE_DISABLE(mI2C);
;;;727    
;;;728            /* Disable All Interrupt */
;;;729            __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;730    
;;;731            /* Clear I2C Flag */
;;;732            __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;733    
;;;734            mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;735            mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;736            mI2C->Mode = MID_I2C_MODE_MASTER_STOP;
;;;737    
;;;738            /* Prepare transfer parameters */
;;;739            mI2C->DevAddress = DevAddress & 0xFFFE;
;;;740            mI2C->pBuffPtr = pData;
;;;741            mI2C->XferSize = Size;
;;;742            mI2C->XferCount = NULL;
;;;743            mI2C->XferISR = NULL;
;;;744    
;;;745            /* Init tickstart for timeout management */
;;;746            tickstart = MID_GetTick();
;;;747    
;;;748            /* Send Bus Start */
;;;749            lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;750            if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;751                __DRV_I2C_STA_1(mI2C);
;;;752    
;;;753            do{
;;;754                if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, Timeout, tickstart) != MID_OK)
;;;755                {
;;;756                    /* Process Unlocked */
;;;757                    __MID_UNLOCK(mI2C);
;;;758                    return MID_ERROR;
;;;759                }
;;;760                I2C_BytemodeMasterEventHandle(mI2C);
;;;761            }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;762    
;;;763            mI2C->State = MID_I2C_STATE_READY;
;;;764            mI2C->Mode = MID_I2C_MODE_NONE;
;;;765    
;;;766            /* Process Unlocked */
;;;767            __MID_UNLOCK(mI2C);
;;;768    
;;;769            if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;770                return MID_ERROR;
;;;771            else
;;;772                return MID_OK;
;;;773        }
;;;774        else
;;;775        {
;;;776            return MID_BUSY;
;;;777        }
;;;778    }
000058  bdfe              POP      {r1-r7,pc}
                  |L24.90|
00005a  bf00              NOP                            ;724
00005c  2030              MOVS     r0,#0x30              ;724
00005e  5d00              LDRB     r0,[r0,r4]            ;724
000060  2801              CMP      r0,#1                 ;724
000062  d101              BNE      |L24.104|
000064  2002              MOVS     r0,#2                 ;724
000066  e7f7              B        |L24.88|
                  |L24.104|
000068  2101              MOVS     r1,#1                 ;724
00006a  2030              MOVS     r0,#0x30              ;724
00006c  5501              STRB     r1,[r0,r4]            ;724
00006e  bf00              NOP                            ;724
000070  6820              LDR      r0,[r4,#0]            ;726
000072  7c00              LDRB     r0,[r0,#0x10]         ;726
000074  2140              MOVS     r1,#0x40              ;726
000076  4388              BICS     r0,r0,r1              ;726
000078  6821              LDR      r1,[r4,#0]            ;726
00007a  7408              STRB     r0,[r1,#0x10]         ;726
00007c  6820              LDR      r0,[r4,#0]            ;729
00007e  6840              LDR      r0,[r0,#4]            ;729
000080  210e              MOVS     r1,#0xe               ;729
000082  4388              BICS     r0,r0,r1              ;729
000084  6821              LDR      r1,[r4,#0]            ;729
000086  6048              STR      r0,[r1,#4]            ;729
000088  4829              LDR      r0,|L24.304|
00008a  6821              LDR      r1,[r4,#0]            ;732
00008c  6008              STR      r0,[r1,#0]            ;732
00008e  2000              MOVS     r0,#0                 ;734
000090  86e0              STRH     r0,[r4,#0x36]         ;734
000092  2183              MOVS     r1,#0x83              ;735
000094  2034              MOVS     r0,#0x34              ;735
000096  5501              STRB     r1,[r0,r4]            ;735
000098  2003              MOVS     r0,#3                 ;736
00009a  0240              LSLS     r0,r0,#9              ;736
00009c  8660              STRH     r0,[r4,#0x32]         ;736
00009e  4825              LDR      r0,|L24.308|
0000a0  4028              ANDS     r0,r0,r5              ;739
0000a2  83a0              STRH     r0,[r4,#0x1c]         ;739
0000a4  61a6              STR      r6,[r4,#0x18]         ;740
0000a6  83e7              STRH     r7,[r4,#0x1e]         ;741
0000a8  2000              MOVS     r0,#0                 ;742
0000aa  8420              STRH     r0,[r4,#0x20]         ;742
0000ac  6260              STR      r0,[r4,#0x24]         ;743
0000ae  f7fffffe          BL       MID_GetTick
0000b2  9001              STR      r0,[sp,#4]            ;746
0000b4  6820              LDR      r0,[r4,#0]            ;749
0000b6  3020              ADDS     r0,r0,#0x20           ;749
0000b8  7a00              LDRB     r0,[r0,#8]            ;749
0000ba  21f8              MOVS     r1,#0xf8              ;749
0000bc  4008              ANDS     r0,r0,r1              ;749
0000be  9000              STR      r0,[sp,#0]            ;749
0000c0  4669              MOV      r1,sp                 ;750
0000c2  7808              LDRB     r0,[r1,#0]            ;750
0000c4  28f8              CMP      r0,#0xf8              ;750
0000c6  d003              BEQ      |L24.208|
0000c8  4668              MOV      r0,sp                 ;750
0000ca  7800              LDRB     r0,[r0,#0]            ;750
0000cc  28a0              CMP      r0,#0xa0              ;750
0000ce  d102              BNE      |L24.214|
                  |L24.208|
0000d0  2011              MOVS     r0,#0x11              ;751
0000d2  6821              LDR      r1,[r4,#0]            ;751
0000d4  7608              STRB     r0,[r1,#0x18]         ;751
                  |L24.214|
0000d6  bf00              NOP                            ;753
                  |L24.216|
0000d8  4620              MOV      r0,r4                 ;754
0000da  9a01              LDR      r2,[sp,#4]            ;754
0000dc  9908              LDR      r1,[sp,#0x20]         ;754
0000de  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
0000e2  2800              CMP      r0,#0                 ;754
0000e4  d006              BEQ      |L24.244|
0000e6  bf00              NOP                            ;757
0000e8  2100              MOVS     r1,#0                 ;757
0000ea  2030              MOVS     r0,#0x30              ;757
0000ec  5501              STRB     r1,[r0,r4]            ;757
0000ee  bf00              NOP                            ;757
0000f0  2001              MOVS     r0,#1                 ;758
0000f2  e7b1              B        |L24.88|
                  |L24.244|
0000f4  4620              MOV      r0,r4                 ;760
0000f6  f7fffffe          BL       I2C_BytemodeMasterEventHandle
0000fa  2034              MOVS     r0,#0x34              ;761
0000fc  5d00              LDRB     r0,[r0,r4]            ;761
0000fe  07c0              LSLS     r0,r0,#31             ;761
000100  0fc0              LSRS     r0,r0,#31             ;761
000102  2800              CMP      r0,#0                 ;761
000104  d1e8              BNE      |L24.216|
000106  2180              MOVS     r1,#0x80              ;763
000108  2034              MOVS     r0,#0x34              ;763
00010a  5501              STRB     r1,[r0,r4]            ;763
00010c  2000              MOVS     r0,#0                 ;764
00010e  8660              STRH     r0,[r4,#0x32]         ;764
000110  bf00              NOP                            ;767
000112  2100              MOVS     r1,#0                 ;767
000114  2030              MOVS     r0,#0x30              ;767
000116  e000              B        |L24.282|
                  |L24.280|
000118  e008              B        |L24.300|
                  |L24.282|
00011a  5501              STRB     r1,[r0,r4]            ;767
00011c  bf00              NOP                            ;767
00011e  8ee0              LDRH     r0,[r4,#0x36]         ;769
000120  2800              CMP      r0,#0                 ;769
000122  d001              BEQ      |L24.296|
000124  2001              MOVS     r0,#1                 ;770
000126  e797              B        |L24.88|
                  |L24.296|
000128  2000              MOVS     r0,#0                 ;772
00012a  e795              B        |L24.88|
                  |L24.300|
00012c  2002              MOVS     r0,#2                 ;776
00012e  e793              B        |L24.88|
;;;779    
                          ENDP

                  |L24.304|
                          DCD      0x00f80300
                  |L24.308|
                          DCD      0x0000fffe

                          AREA ||i.MID_I2C_Master_Transmit_DMA||, CODE, READONLY, ALIGN=2

                  MID_I2C_Master_Transmit_DMA PROC
;;;1497    */
;;;1498   MID_StatusTypeDef MID_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1499   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;1500       MID_StatusTypeDef lDmaXferStatus;
;;;1501       __IO uint8_t lEventTemp;
;;;1502   
;;;1503       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000a  2034              MOVS     r0,#0x34
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2181              MOVS     r1,#0x81
000010  4008              ANDS     r0,r0,r1
000012  2880              CMP      r0,#0x80
000014  d172              BNE      |L25.252|
;;;1504       {
;;;1505           if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
000016  6820              LDR      r0,[r4,#0]
000018  6800              LDR      r0,[r0,#0]
00001a  07c0              LSLS     r0,r0,#31
00001c  0fc0              LSRS     r0,r0,#31
00001e  2101              MOVS     r1,#1
000020  4048              EORS     r0,r0,r1
000022  4048              EORS     r0,r0,r1
000024  2800              CMP      r0,#0
000026  d017              BEQ      |L25.88|
;;;1506           {
;;;1507               if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
000028  6820              LDR      r0,[r4,#0]
00002a  6800              LDR      r0,[r0,#0]
00002c  2102              MOVS     r1,#2
00002e  4008              ANDS     r0,r0,r1
000030  0840              LSRS     r0,r0,#1
000032  2800              CMP      r0,#0
000034  d010              BEQ      |L25.88|
;;;1508               {
;;;1509                   lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
000036  6820              LDR      r0,[r4,#0]
000038  3020              ADDS     r0,r0,#0x20
00003a  7a00              LDRB     r0,[r0,#8]
00003c  21f8              MOVS     r1,#0xf8
00003e  4008              ANDS     r0,r0,r1
000040  9000              STR      r0,[sp,#0]
;;;1510                   if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000042  4669              MOV      r1,sp
000044  7808              LDRB     r0,[r1,#0]
000046  2808              CMP      r0,#8
000048  d006              BEQ      |L25.88|
00004a  4668              MOV      r0,sp
00004c  7800              LDRB     r0,[r0,#0]
00004e  2810              CMP      r0,#0x10
000050  d002              BEQ      |L25.88|
;;;1511                       return MID_ERROR;
000052  2001              MOVS     r0,#1
                  |L25.84|
;;;1512               }
;;;1513           }
;;;1514   
;;;1515           /* Process Locked */
;;;1516           __MID_LOCK(mI2C);
;;;1517   
;;;1518           I2C_BUFFMODE_DISABLE(mI2C);
;;;1519   
;;;1520           /* Disable All Interrupt */
;;;1521           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;1522   
;;;1523           /* Clear I2C Flag */
;;;1524           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;1525   
;;;1526           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;1527           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;1528           mI2C->Mode = MID_I2C_MODE_MASTER_TRANSMIT_DMA_STOP;
;;;1529   
;;;1530           /* Prepare transfer parameters */
;;;1531           mI2C->DevAddress = DevAddress & 0xFFFE;
;;;1532           mI2C->pBuffPtr = pData;
;;;1533           mI2C->XferSize = Size;
;;;1534           mI2C->XferCount = NULL;
;;;1535           mI2C->XferISR = I2C_Master_ISR_IT;
;;;1536   
;;;1537           if(mI2C->hdmatx != NULL)
;;;1538           {
;;;1539               mI2C->hdmatx->XferCpltCallback = I2C_DMACplt;
;;;1540               mI2C->hdmatx->XferErrorCallback = I2C_DMAError;
;;;1541               mI2C->hdmatx->XferAbortCallback = NULL;
;;;1542               mI2C->hdmatx->XferHalfCpltCallback = NULL;
;;;1543               lDmaXferStatus = MID_DMA_Start_IT(mI2C->hdmatx, (uint32_t)pData, 0, (uint32_t)Size);
;;;1544           }
;;;1545           else
;;;1546           {
;;;1547               mI2C->State = MID_I2C_STATE_READY;
;;;1548               mI2C->Mode = MID_I2C_MODE_NONE;
;;;1549               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;1550               __MID_UNLOCK(mI2C);
;;;1551               return MID_ERROR;
;;;1552           }
;;;1553   
;;;1554           if(lDmaXferStatus == MID_OK)
;;;1555           {
;;;1556               /* Send Bus Start */
;;;1557               lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;1558               if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;1559                   __DRV_I2C_STA_1(mI2C);
;;;1560   
;;;1561               /* Process Unlocked */
;;;1562               __MID_UNLOCK(mI2C);
;;;1563   
;;;1564               /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1565                       to avoid the risk of I2C interrupt handle execution before current
;;;1566                       process unlock */
;;;1567   
;;;1568               /* Enable IEA, EVENT, interrupt */
;;;1569               /* possible to enable all of these */
;;;1570               /* I2C_IT_IEA | I2C_IT_EVENT */
;;;1571               __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;1572   
;;;1573               return MID_OK;
;;;1574           }
;;;1575           else
;;;1576           {
;;;1577               mI2C->State = MID_I2C_STATE_READY;
;;;1578               mI2C->Mode = MID_I2C_MODE_NONE;
;;;1579   
;;;1580               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;1581               __MID_UNLOCK(mI2C);
;;;1582               return MID_ERROR;
;;;1583           }
;;;1584       }
;;;1585       else
;;;1586       {
;;;1587           return MID_BUSY;
;;;1588       }
;;;1589   }
000054  b005              ADD      sp,sp,#0x14
000056  bdf0              POP      {r4-r7,pc}
                  |L25.88|
000058  bf00              NOP                            ;1516
00005a  2030              MOVS     r0,#0x30              ;1516
00005c  5d00              LDRB     r0,[r0,r4]            ;1516
00005e  2801              CMP      r0,#1                 ;1516
000060  d101              BNE      |L25.102|
000062  2002              MOVS     r0,#2                 ;1516
000064  e7f6              B        |L25.84|
                  |L25.102|
000066  2101              MOVS     r1,#1                 ;1516
000068  2030              MOVS     r0,#0x30              ;1516
00006a  5501              STRB     r1,[r0,r4]            ;1516
00006c  bf00              NOP                            ;1516
00006e  6820              LDR      r0,[r4,#0]            ;1518
000070  7c00              LDRB     r0,[r0,#0x10]         ;1518
000072  2140              MOVS     r1,#0x40              ;1518
000074  4388              BICS     r0,r0,r1              ;1518
000076  6821              LDR      r1,[r4,#0]            ;1518
000078  7408              STRB     r0,[r1,#0x10]         ;1518
00007a  6820              LDR      r0,[r4,#0]            ;1521
00007c  6840              LDR      r0,[r0,#4]            ;1521
00007e  210e              MOVS     r1,#0xe               ;1521
000080  4388              BICS     r0,r0,r1              ;1521
000082  6821              LDR      r1,[r4,#0]            ;1521
000084  6048              STR      r0,[r1,#4]            ;1521
000086  4837              LDR      r0,|L25.356|
000088  6821              LDR      r1,[r4,#0]            ;1524
00008a  6008              STR      r0,[r1,#0]            ;1524
00008c  2000              MOVS     r0,#0                 ;1526
00008e  86e0              STRH     r0,[r4,#0x36]         ;1526
000090  2183              MOVS     r1,#0x83              ;1527
000092  2034              MOVS     r0,#0x34              ;1527
000094  5501              STRB     r1,[r0,r4]            ;1527
000096  2043              MOVS     r0,#0x43              ;1528
000098  0240              LSLS     r0,r0,#9              ;1528
00009a  8660              STRH     r0,[r4,#0x32]         ;1528
00009c  4832              LDR      r0,|L25.360|
00009e  4038              ANDS     r0,r0,r7              ;1531
0000a0  83a0              STRH     r0,[r4,#0x1c]         ;1531
0000a2  61a5              STR      r5,[r4,#0x18]         ;1532
0000a4  9804              LDR      r0,[sp,#0x10]         ;1533
0000a6  83e0              STRH     r0,[r4,#0x1e]         ;1533
0000a8  2000              MOVS     r0,#0                 ;1534
0000aa  8420              STRH     r0,[r4,#0x20]         ;1534
0000ac  482f              LDR      r0,|L25.364|
0000ae  6260              STR      r0,[r4,#0x24]         ;1535
0000b0  6aa0              LDR      r0,[r4,#0x28]         ;1537
0000b2  2800              CMP      r0,#0                 ;1537
0000b4  d012              BEQ      |L25.220|
0000b6  482e              LDR      r0,|L25.368|
0000b8  6aa1              LDR      r1,[r4,#0x28]         ;1539
0000ba  62c8              STR      r0,[r1,#0x2c]         ;1539
0000bc  482d              LDR      r0,|L25.372|
0000be  6aa1              LDR      r1,[r4,#0x28]         ;1540
0000c0  6348              STR      r0,[r1,#0x34]         ;1540
0000c2  2000              MOVS     r0,#0                 ;1541
0000c4  6aa1              LDR      r1,[r4,#0x28]         ;1541
0000c6  6388              STR      r0,[r1,#0x38]         ;1541
0000c8  6aa1              LDR      r1,[r4,#0x28]         ;1542
0000ca  6308              STR      r0,[r1,#0x30]         ;1542
0000cc  6aa0              LDR      r0,[r4,#0x28]         ;1543
0000ce  2200              MOVS     r2,#0                 ;1543
0000d0  4629              MOV      r1,r5                 ;1543
0000d2  9b04              LDR      r3,[sp,#0x10]         ;1543
0000d4  f7fffffe          BL       MID_DMA_Start_IT
0000d8  4606              MOV      r6,r0                 ;1543
0000da  e010              B        |L25.254|
                  |L25.220|
0000dc  2180              MOVS     r1,#0x80              ;1547
0000de  2034              MOVS     r0,#0x34              ;1547
0000e0  5501              STRB     r1,[r0,r4]            ;1547
0000e2  2000              MOVS     r0,#0                 ;1548
0000e4  8660              STRH     r0,[r4,#0x32]         ;1548
0000e6  8ee0              LDRH     r0,[r4,#0x36]         ;1549
0000e8  2140              MOVS     r1,#0x40              ;1549
0000ea  4308              ORRS     r0,r0,r1              ;1549
0000ec  86e0              STRH     r0,[r4,#0x36]         ;1549
0000ee  bf00              NOP                            ;1550
0000f0  2100              MOVS     r1,#0                 ;1550
0000f2  2030              MOVS     r0,#0x30              ;1550
0000f4  5501              STRB     r1,[r0,r4]            ;1550
0000f6  bf00              NOP                            ;1550
0000f8  2001              MOVS     r0,#1                 ;1551
0000fa  e7ab              B        |L25.84|
                  |L25.252|
0000fc  e02f              B        |L25.350|
                  |L25.254|
0000fe  2e00              CMP      r6,#0                 ;1554
000100  d11d              BNE      |L25.318|
000102  6820              LDR      r0,[r4,#0]            ;1557
000104  3020              ADDS     r0,r0,#0x20           ;1557
000106  7a00              LDRB     r0,[r0,#8]            ;1557
000108  21f8              MOVS     r1,#0xf8              ;1557
00010a  4008              ANDS     r0,r0,r1              ;1557
00010c  9000              STR      r0,[sp,#0]            ;1557
00010e  4669              MOV      r1,sp                 ;1558
000110  7808              LDRB     r0,[r1,#0]            ;1558
000112  28f8              CMP      r0,#0xf8              ;1558
000114  d003              BEQ      |L25.286|
000116  4668              MOV      r0,sp                 ;1558
000118  7800              LDRB     r0,[r0,#0]            ;1558
00011a  28a0              CMP      r0,#0xa0              ;1558
00011c  d102              BNE      |L25.292|
                  |L25.286|
00011e  2011              MOVS     r0,#0x11              ;1559
000120  6821              LDR      r1,[r4,#0]            ;1559
000122  7608              STRB     r0,[r1,#0x18]         ;1559
                  |L25.292|
000124  bf00              NOP                            ;1562
000126  2100              MOVS     r1,#0                 ;1562
000128  2030              MOVS     r0,#0x30              ;1562
00012a  5501              STRB     r1,[r0,r4]            ;1562
00012c  bf00              NOP                            ;1562
00012e  6820              LDR      r0,[r4,#0]            ;1571
000130  6840              LDR      r0,[r0,#4]            ;1571
000132  2103              MOVS     r1,#3                 ;1571
000134  4308              ORRS     r0,r0,r1              ;1571
000136  6821              LDR      r1,[r4,#0]            ;1571
000138  6048              STR      r0,[r1,#4]            ;1571
00013a  2000              MOVS     r0,#0                 ;1573
00013c  e78a              B        |L25.84|
                  |L25.318|
00013e  2180              MOVS     r1,#0x80              ;1577
000140  2034              MOVS     r0,#0x34              ;1577
000142  5501              STRB     r1,[r0,r4]            ;1577
000144  2000              MOVS     r0,#0                 ;1578
000146  8660              STRH     r0,[r4,#0x32]         ;1578
000148  8ee0              LDRH     r0,[r4,#0x36]         ;1580
00014a  2140              MOVS     r1,#0x40              ;1580
00014c  4308              ORRS     r0,r0,r1              ;1580
00014e  86e0              STRH     r0,[r4,#0x36]         ;1580
000150  bf00              NOP                            ;1581
000152  2100              MOVS     r1,#0                 ;1581
000154  2030              MOVS     r0,#0x30              ;1581
000156  5501              STRB     r1,[r0,r4]            ;1581
000158  bf00              NOP                            ;1581
00015a  2001              MOVS     r0,#1                 ;1582
00015c  e77a              B        |L25.84|
                  |L25.350|
00015e  2002              MOVS     r0,#2                 ;1587
000160  e778              B        |L25.84|
;;;1590   
                          ENDP

000162  0000              DCW      0x0000
                  |L25.356|
                          DCD      0x00f80300
                  |L25.360|
                          DCD      0x0000fffe
                  |L25.364|
                          DCD      I2C_Master_ISR_IT
                  |L25.368|
                          DCD      I2C_DMACplt
                  |L25.372|
                          DCD      I2C_DMAError

                          AREA ||i.MID_I2C_Master_Transmit_IT||, CODE, READONLY, ALIGN=2

                  MID_I2C_Master_Transmit_IT PROC
;;;1144    */
;;;1145   MID_StatusTypeDef MID_I2C_Master_Transmit_IT(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
000000  b538              PUSH     {r3-r5,lr}
;;;1146   {
000002  4604              MOV      r4,r0
;;;1147       __IO uint8_t lEventTemp;
;;;1148   
;;;1149       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
000004  2034              MOVS     r0,#0x34
000006  5d00              LDRB     r0,[r0,r4]
000008  2581              MOVS     r5,#0x81
00000a  4028              ANDS     r0,r0,r5
00000c  2880              CMP      r0,#0x80
00000e  d168              BNE      |L26.226|
;;;1150       {
;;;1151           if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
000010  6820              LDR      r0,[r4,#0]
000012  6800              LDR      r0,[r0,#0]
000014  07c0              LSLS     r0,r0,#31
000016  0fc0              LSRS     r0,r0,#31
000018  2501              MOVS     r5,#1
00001a  4068              EORS     r0,r0,r5
00001c  4068              EORS     r0,r0,r5
00001e  2800              CMP      r0,#0
000020  d016              BEQ      |L26.80|
;;;1152           {
;;;1153               if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  2502              MOVS     r5,#2
000028  4028              ANDS     r0,r0,r5
00002a  0840              LSRS     r0,r0,#1
00002c  2800              CMP      r0,#0
00002e  d00f              BEQ      |L26.80|
;;;1154               {
;;;1155                   lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
000030  6820              LDR      r0,[r4,#0]
000032  3020              ADDS     r0,r0,#0x20
000034  7a00              LDRB     r0,[r0,#8]
000036  25f8              MOVS     r5,#0xf8
000038  4028              ANDS     r0,r0,r5
00003a  9000              STR      r0,[sp,#0]
;;;1156                   if((lEventTemp != 0x08) && (lEventTemp != 0x10))
00003c  466d              MOV      r5,sp
00003e  7828              LDRB     r0,[r5,#0]
000040  2808              CMP      r0,#8
000042  d005              BEQ      |L26.80|
000044  4668              MOV      r0,sp
000046  7800              LDRB     r0,[r0,#0]
000048  2810              CMP      r0,#0x10
00004a  d001              BEQ      |L26.80|
;;;1157                       return MID_ERROR;
00004c  2001              MOVS     r0,#1
                  |L26.78|
;;;1158               }
;;;1159           }
;;;1160   
;;;1161           /* Process Locked */
;;;1162           __MID_LOCK(mI2C);
;;;1163   
;;;1164           I2C_BUFFMODE_DISABLE(mI2C);
;;;1165   
;;;1166           /* Disable All Interrupt */
;;;1167           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;1168   
;;;1169           /* Clear I2C Flag */
;;;1170           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;1171   
;;;1172           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;1173           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;1174           mI2C->Mode = MID_I2C_MODE_MASTER_STOP;
;;;1175   
;;;1176           /* Prepare transfer parameters */
;;;1177           mI2C->DevAddress = DevAddress & 0xFFFE;
;;;1178           mI2C->pBuffPtr = pData;
;;;1179           mI2C->XferSize = Size;
;;;1180           mI2C->XferCount = NULL;
;;;1181           mI2C->XferISR = I2C_Master_ISR_IT;
;;;1182   
;;;1183           /* Send Bus Start */
;;;1184           lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;1185           if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;1186               __DRV_I2C_STA_1(mI2C);
;;;1187   
;;;1188           /* Process Unlocked */
;;;1189           __MID_UNLOCK(mI2C);
;;;1190   
;;;1191           /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1192                     to avoid the risk of I2C interrupt handle execution before current
;;;1193                     process unlock */
;;;1194   
;;;1195           /* Enable IEA, EVENT, interrupt */
;;;1196           /* possible to enable all of these */
;;;1197           /* I2C_IT_IEA | I2C_IT_EVENT */
;;;1198           __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;1199   
;;;1200           return MID_OK;
;;;1201       }
;;;1202       else
;;;1203       {
;;;1204           return MID_BUSY;
;;;1205       }
;;;1206   }
00004e  bd38              POP      {r3-r5,pc}
                  |L26.80|
000050  bf00              NOP                            ;1162
000052  2030              MOVS     r0,#0x30              ;1162
000054  5d00              LDRB     r0,[r0,r4]            ;1162
000056  2801              CMP      r0,#1                 ;1162
000058  d101              BNE      |L26.94|
00005a  2002              MOVS     r0,#2                 ;1162
00005c  e7f7              B        |L26.78|
                  |L26.94|
00005e  2501              MOVS     r5,#1                 ;1162
000060  2030              MOVS     r0,#0x30              ;1162
000062  5505              STRB     r5,[r0,r4]            ;1162
000064  bf00              NOP                            ;1162
000066  6820              LDR      r0,[r4,#0]            ;1164
000068  7c00              LDRB     r0,[r0,#0x10]         ;1164
00006a  2540              MOVS     r5,#0x40              ;1164
00006c  43a8              BICS     r0,r0,r5              ;1164
00006e  6825              LDR      r5,[r4,#0]            ;1164
000070  7428              STRB     r0,[r5,#0x10]         ;1164
000072  6820              LDR      r0,[r4,#0]            ;1167
000074  6840              LDR      r0,[r0,#4]            ;1167
000076  250e              MOVS     r5,#0xe               ;1167
000078  43a8              BICS     r0,r0,r5              ;1167
00007a  6825              LDR      r5,[r4,#0]            ;1167
00007c  6068              STR      r0,[r5,#4]            ;1167
00007e  481a              LDR      r0,|L26.232|
000080  6825              LDR      r5,[r4,#0]            ;1170
000082  6028              STR      r0,[r5,#0]            ;1170
000084  2000              MOVS     r0,#0                 ;1172
000086  86e0              STRH     r0,[r4,#0x36]         ;1172
000088  2583              MOVS     r5,#0x83              ;1173
00008a  2034              MOVS     r0,#0x34              ;1173
00008c  5505              STRB     r5,[r0,r4]            ;1173
00008e  2003              MOVS     r0,#3                 ;1174
000090  0240              LSLS     r0,r0,#9              ;1174
000092  8660              STRH     r0,[r4,#0x32]         ;1174
000094  4815              LDR      r0,|L26.236|
000096  4008              ANDS     r0,r0,r1              ;1177
000098  83a0              STRH     r0,[r4,#0x1c]         ;1177
00009a  61a2              STR      r2,[r4,#0x18]         ;1178
00009c  83e3              STRH     r3,[r4,#0x1e]         ;1179
00009e  2000              MOVS     r0,#0                 ;1180
0000a0  8420              STRH     r0,[r4,#0x20]         ;1180
0000a2  4813              LDR      r0,|L26.240|
0000a4  6260              STR      r0,[r4,#0x24]         ;1181
0000a6  6820              LDR      r0,[r4,#0]            ;1184
0000a8  3020              ADDS     r0,r0,#0x20           ;1184
0000aa  7a00              LDRB     r0,[r0,#8]            ;1184
0000ac  25f8              MOVS     r5,#0xf8              ;1184
0000ae  4028              ANDS     r0,r0,r5              ;1184
0000b0  9000              STR      r0,[sp,#0]            ;1184
0000b2  466d              MOV      r5,sp                 ;1185
0000b4  7828              LDRB     r0,[r5,#0]            ;1185
0000b6  28f8              CMP      r0,#0xf8              ;1185
0000b8  d003              BEQ      |L26.194|
0000ba  4668              MOV      r0,sp                 ;1185
0000bc  7800              LDRB     r0,[r0,#0]            ;1185
0000be  28a0              CMP      r0,#0xa0              ;1185
0000c0  d102              BNE      |L26.200|
                  |L26.194|
0000c2  2011              MOVS     r0,#0x11              ;1186
0000c4  6825              LDR      r5,[r4,#0]            ;1186
0000c6  7628              STRB     r0,[r5,#0x18]         ;1186
                  |L26.200|
0000c8  bf00              NOP                            ;1189
0000ca  2500              MOVS     r5,#0                 ;1189
0000cc  2030              MOVS     r0,#0x30              ;1189
0000ce  5505              STRB     r5,[r0,r4]            ;1189
0000d0  bf00              NOP                            ;1189
0000d2  6820              LDR      r0,[r4,#0]            ;1198
0000d4  6840              LDR      r0,[r0,#4]            ;1198
0000d6  2503              MOVS     r5,#3                 ;1198
0000d8  4328              ORRS     r0,r0,r5              ;1198
0000da  6825              LDR      r5,[r4,#0]            ;1198
0000dc  6068              STR      r0,[r5,#4]            ;1198
0000de  2000              MOVS     r0,#0                 ;1200
0000e0  e7b5              B        |L26.78|
                  |L26.226|
0000e2  2002              MOVS     r0,#2                 ;1204
0000e4  e7b3              B        |L26.78|
;;;1207   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L26.232|
                          DCD      0x00f80300
                  |L26.236|
                          DCD      0x0000fffe
                  |L26.240|
                          DCD      I2C_Master_ISR_IT

                          AREA ||i.MID_I2C_Master_Transmit_RepeatStart||, CODE, READONLY, ALIGN=2

                  MID_I2C_Master_Transmit_RepeatStart PROC
;;;791     */
;;;792    MID_StatusTypeDef MID_I2C_Master_Transmit_RepeatStart(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  b5fe              PUSH     {r1-r7,lr}
;;;793    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;794        uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;795        __IO uint8_t lEventTemp;
;;;796    
;;;797        if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000e  2034              MOVS     r0,#0x34
000010  5d00              LDRB     r0,[r0,r4]
000012  2181              MOVS     r1,#0x81
000014  4008              ANDS     r0,r0,r1
000016  2880              CMP      r0,#0x80
000018  d17e              BNE      |L27.280|
;;;798        {
;;;799            if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  07c0              LSLS     r0,r0,#31
000020  0fc0              LSRS     r0,r0,#31
000022  2101              MOVS     r1,#1
000024  4048              EORS     r0,r0,r1
000026  4048              EORS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d016              BEQ      |L27.90|
;;;800            {
;;;801                if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
00002c  6820              LDR      r0,[r4,#0]
00002e  6800              LDR      r0,[r0,#0]
000030  2102              MOVS     r1,#2
000032  4008              ANDS     r0,r0,r1
000034  0840              LSRS     r0,r0,#1
000036  2800              CMP      r0,#0
000038  d00f              BEQ      |L27.90|
;;;802                {
;;;803                    lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
00003a  6820              LDR      r0,[r4,#0]
00003c  3020              ADDS     r0,r0,#0x20
00003e  7a00              LDRB     r0,[r0,#8]
000040  21f8              MOVS     r1,#0xf8
000042  4008              ANDS     r0,r0,r1
000044  9000              STR      r0,[sp,#0]
;;;804                    if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000046  4669              MOV      r1,sp
000048  7808              LDRB     r0,[r1,#0]
00004a  2808              CMP      r0,#8
00004c  d005              BEQ      |L27.90|
00004e  4668              MOV      r0,sp
000050  7800              LDRB     r0,[r0,#0]
000052  2810              CMP      r0,#0x10
000054  d001              BEQ      |L27.90|
;;;805                        return MID_ERROR;
000056  2001              MOVS     r0,#1
                  |L27.88|
;;;806                }
;;;807            }
;;;808    
;;;809            /* Process Locked */
;;;810            __MID_LOCK(mI2C);
;;;811    
;;;812            I2C_BUFFMODE_DISABLE(mI2C);
;;;813    
;;;814            /* Disable All Interrupt */
;;;815            __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;816    
;;;817            /* Clear I2C Flag */
;;;818            __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;819    
;;;820            mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;821            mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;822            mI2C->Mode = MID_I2C_MODE_MASTER_RREPEATSTART;
;;;823    
;;;824            /* Prepare transfer parameters */
;;;825            mI2C->DevAddress = DevAddress & 0xFFFE;
;;;826            mI2C->pBuffPtr = pData;
;;;827            mI2C->XferSize = Size;
;;;828            mI2C->XferCount = NULL;
;;;829            mI2C->XferISR = NULL;
;;;830    
;;;831            /* Init tickstart for timeout management */
;;;832            tickstart = MID_GetTick();
;;;833    
;;;834            /* Send Bus Start */
;;;835            lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;836            if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;837                __DRV_I2C_STA_1(mI2C);
;;;838    
;;;839            do{
;;;840                if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, Timeout, tickstart) != MID_OK)
;;;841                {
;;;842                    /* Process Unlocked */
;;;843                    __MID_UNLOCK(mI2C);
;;;844                    return MID_ERROR;
;;;845                }
;;;846                I2C_BytemodeMasterEventHandle(mI2C);
;;;847            }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;848    
;;;849            mI2C->State = MID_I2C_STATE_READY;
;;;850            mI2C->Mode = MID_I2C_MODE_NONE;
;;;851    
;;;852            /* Process Unlocked */
;;;853            __MID_UNLOCK(mI2C);
;;;854    
;;;855            if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;856                return MID_ERROR;
;;;857            else
;;;858                return MID_OK;
;;;859        }
;;;860        else
;;;861        {
;;;862            return MID_BUSY;
;;;863        }
;;;864    }
000058  bdfe              POP      {r1-r7,pc}
                  |L27.90|
00005a  bf00              NOP                            ;810
00005c  2030              MOVS     r0,#0x30              ;810
00005e  5d00              LDRB     r0,[r0,r4]            ;810
000060  2801              CMP      r0,#1                 ;810
000062  d101              BNE      |L27.104|
000064  2002              MOVS     r0,#2                 ;810
000066  e7f7              B        |L27.88|
                  |L27.104|
000068  2101              MOVS     r1,#1                 ;810
00006a  2030              MOVS     r0,#0x30              ;810
00006c  5501              STRB     r1,[r0,r4]            ;810
00006e  bf00              NOP                            ;810
000070  6820              LDR      r0,[r4,#0]            ;812
000072  7c00              LDRB     r0,[r0,#0x10]         ;812
000074  2140              MOVS     r1,#0x40              ;812
000076  4388              BICS     r0,r0,r1              ;812
000078  6821              LDR      r1,[r4,#0]            ;812
00007a  7408              STRB     r0,[r1,#0x10]         ;812
00007c  6820              LDR      r0,[r4,#0]            ;815
00007e  6840              LDR      r0,[r0,#4]            ;815
000080  210e              MOVS     r1,#0xe               ;815
000082  4388              BICS     r0,r0,r1              ;815
000084  6821              LDR      r1,[r4,#0]            ;815
000086  6048              STR      r0,[r1,#4]            ;815
000088  4829              LDR      r0,|L27.304|
00008a  6821              LDR      r1,[r4,#0]            ;818
00008c  6008              STR      r0,[r1,#0]            ;818
00008e  2000              MOVS     r0,#0                 ;820
000090  86e0              STRH     r0,[r4,#0x36]         ;820
000092  2183              MOVS     r1,#0x83              ;821
000094  2034              MOVS     r0,#0x34              ;821
000096  5501              STRB     r1,[r0,r4]            ;821
000098  2005              MOVS     r0,#5                 ;822
00009a  0200              LSLS     r0,r0,#8              ;822
00009c  8660              STRH     r0,[r4,#0x32]         ;822
00009e  4825              LDR      r0,|L27.308|
0000a0  4028              ANDS     r0,r0,r5              ;825
0000a2  83a0              STRH     r0,[r4,#0x1c]         ;825
0000a4  61a6              STR      r6,[r4,#0x18]         ;826
0000a6  83e7              STRH     r7,[r4,#0x1e]         ;827
0000a8  2000              MOVS     r0,#0                 ;828
0000aa  8420              STRH     r0,[r4,#0x20]         ;828
0000ac  6260              STR      r0,[r4,#0x24]         ;829
0000ae  f7fffffe          BL       MID_GetTick
0000b2  9001              STR      r0,[sp,#4]            ;832
0000b4  6820              LDR      r0,[r4,#0]            ;835
0000b6  3020              ADDS     r0,r0,#0x20           ;835
0000b8  7a00              LDRB     r0,[r0,#8]            ;835
0000ba  21f8              MOVS     r1,#0xf8              ;835
0000bc  4008              ANDS     r0,r0,r1              ;835
0000be  9000              STR      r0,[sp,#0]            ;835
0000c0  4669              MOV      r1,sp                 ;836
0000c2  7808              LDRB     r0,[r1,#0]            ;836
0000c4  28f8              CMP      r0,#0xf8              ;836
0000c6  d003              BEQ      |L27.208|
0000c8  4668              MOV      r0,sp                 ;836
0000ca  7800              LDRB     r0,[r0,#0]            ;836
0000cc  28a0              CMP      r0,#0xa0              ;836
0000ce  d102              BNE      |L27.214|
                  |L27.208|
0000d0  2011              MOVS     r0,#0x11              ;837
0000d2  6821              LDR      r1,[r4,#0]            ;837
0000d4  7608              STRB     r0,[r1,#0x18]         ;837
                  |L27.214|
0000d6  bf00              NOP                            ;839
                  |L27.216|
0000d8  4620              MOV      r0,r4                 ;840
0000da  9a01              LDR      r2,[sp,#4]            ;840
0000dc  9908              LDR      r1,[sp,#0x20]         ;840
0000de  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
0000e2  2800              CMP      r0,#0                 ;840
0000e4  d006              BEQ      |L27.244|
0000e6  bf00              NOP                            ;843
0000e8  2100              MOVS     r1,#0                 ;843
0000ea  2030              MOVS     r0,#0x30              ;843
0000ec  5501              STRB     r1,[r0,r4]            ;843
0000ee  bf00              NOP                            ;843
0000f0  2001              MOVS     r0,#1                 ;844
0000f2  e7b1              B        |L27.88|
                  |L27.244|
0000f4  4620              MOV      r0,r4                 ;846
0000f6  f7fffffe          BL       I2C_BytemodeMasterEventHandle
0000fa  2034              MOVS     r0,#0x34              ;847
0000fc  5d00              LDRB     r0,[r0,r4]            ;847
0000fe  07c0              LSLS     r0,r0,#31             ;847
000100  0fc0              LSRS     r0,r0,#31             ;847
000102  2800              CMP      r0,#0                 ;847
000104  d1e8              BNE      |L27.216|
000106  2180              MOVS     r1,#0x80              ;849
000108  2034              MOVS     r0,#0x34              ;849
00010a  5501              STRB     r1,[r0,r4]            ;849
00010c  2000              MOVS     r0,#0                 ;850
00010e  8660              STRH     r0,[r4,#0x32]         ;850
000110  bf00              NOP                            ;853
000112  2100              MOVS     r1,#0                 ;853
000114  2030              MOVS     r0,#0x30              ;853
000116  e000              B        |L27.282|
                  |L27.280|
000118  e008              B        |L27.300|
                  |L27.282|
00011a  5501              STRB     r1,[r0,r4]            ;853
00011c  bf00              NOP                            ;853
00011e  8ee0              LDRH     r0,[r4,#0x36]         ;855
000120  2800              CMP      r0,#0                 ;855
000122  d001              BEQ      |L27.296|
000124  2001              MOVS     r0,#1                 ;856
000126  e797              B        |L27.88|
                  |L27.296|
000128  2000              MOVS     r0,#0                 ;858
00012a  e795              B        |L27.88|
                  |L27.300|
00012c  2002              MOVS     r0,#2                 ;862
00012e  e793              B        |L27.88|
;;;865    
                          ENDP

                  |L27.304|
                          DCD      0x00f80300
                  |L27.308|
                          DCD      0x0000fffe

                          AREA ||i.MID_I2C_Master_Transmit_RepeatStart_DMA||, CODE, READONLY, ALIGN=2

                  MID_I2C_Master_Transmit_RepeatStart_DMA PROC
;;;1601    */
;;;1602   MID_StatusTypeDef MID_I2C_Master_Transmit_RepeatStart_DMA(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1603   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;1604       MID_StatusTypeDef lDmaXferStatus;
;;;1605       __IO uint8_t lEventTemp;
;;;1606   
;;;1607       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000a  2034              MOVS     r0,#0x34
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2181              MOVS     r1,#0x81
000010  4008              ANDS     r0,r0,r1
000012  2880              CMP      r0,#0x80
000014  d172              BNE      |L28.252|
;;;1608       {
;;;1609           if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
000016  6820              LDR      r0,[r4,#0]
000018  6800              LDR      r0,[r0,#0]
00001a  07c0              LSLS     r0,r0,#31
00001c  0fc0              LSRS     r0,r0,#31
00001e  2101              MOVS     r1,#1
000020  4048              EORS     r0,r0,r1
000022  4048              EORS     r0,r0,r1
000024  2800              CMP      r0,#0
000026  d017              BEQ      |L28.88|
;;;1610           {
;;;1611               if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
000028  6820              LDR      r0,[r4,#0]
00002a  6800              LDR      r0,[r0,#0]
00002c  2102              MOVS     r1,#2
00002e  4008              ANDS     r0,r0,r1
000030  0840              LSRS     r0,r0,#1
000032  2800              CMP      r0,#0
000034  d010              BEQ      |L28.88|
;;;1612               {
;;;1613                   lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
000036  6820              LDR      r0,[r4,#0]
000038  3020              ADDS     r0,r0,#0x20
00003a  7a00              LDRB     r0,[r0,#8]
00003c  21f8              MOVS     r1,#0xf8
00003e  4008              ANDS     r0,r0,r1
000040  9000              STR      r0,[sp,#0]
;;;1614                   if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000042  4669              MOV      r1,sp
000044  7808              LDRB     r0,[r1,#0]
000046  2808              CMP      r0,#8
000048  d006              BEQ      |L28.88|
00004a  4668              MOV      r0,sp
00004c  7800              LDRB     r0,[r0,#0]
00004e  2810              CMP      r0,#0x10
000050  d002              BEQ      |L28.88|
;;;1615                       return MID_ERROR;
000052  2001              MOVS     r0,#1
                  |L28.84|
;;;1616               }
;;;1617           }
;;;1618   
;;;1619           /* Process Locked */
;;;1620           __MID_LOCK(mI2C);
;;;1621   
;;;1622           I2C_BUFFMODE_DISABLE(mI2C);
;;;1623   
;;;1624           /* Disable All Interrupt */
;;;1625           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;1626   
;;;1627           /* Clear I2C Flag */
;;;1628           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;1629   
;;;1630           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;1631           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;1632           mI2C->Mode = MID_I2C_MODE_MASTER_TRANSMIT_DMA_RREPEATSTART;
;;;1633   
;;;1634           /* Prepare transfer parameters */
;;;1635           mI2C->DevAddress = DevAddress & 0xFFFE;
;;;1636           mI2C->pBuffPtr = pData;
;;;1637           mI2C->XferSize = Size;
;;;1638           mI2C->XferCount = NULL;
;;;1639           mI2C->XferISR = I2C_Master_ISR_IT;
;;;1640   
;;;1641           if(mI2C->hdmatx != NULL)
;;;1642           {
;;;1643               mI2C->hdmatx->XferCpltCallback = I2C_DMACplt;
;;;1644               mI2C->hdmatx->XferErrorCallback = I2C_DMAError;
;;;1645               mI2C->hdmatx->XferAbortCallback = NULL;
;;;1646               mI2C->hdmatx->XferHalfCpltCallback = NULL;
;;;1647               lDmaXferStatus = MID_DMA_Start_IT(mI2C->hdmatx, (uint32_t)pData, 0, (uint32_t)Size);
;;;1648           }
;;;1649           else
;;;1650           {
;;;1651               mI2C->State = MID_I2C_STATE_READY;
;;;1652               mI2C->Mode = MID_I2C_MODE_NONE;
;;;1653               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;1654               __MID_UNLOCK(mI2C);
;;;1655               return MID_ERROR;
;;;1656           }
;;;1657   
;;;1658           if(lDmaXferStatus == MID_OK)
;;;1659           {
;;;1660               /* Send Bus Start */
;;;1661               lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;1662               if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;1663                   __DRV_I2C_STA_1(mI2C);
;;;1664   
;;;1665               /* Process Unlocked */
;;;1666               __MID_UNLOCK(mI2C);
;;;1667   
;;;1668               /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1669                       to avoid the risk of I2C interrupt handle execution before current
;;;1670                       process unlock */
;;;1671   
;;;1672               /* Enable IEA, EVENT, interrupt */
;;;1673               /* possible to enable all of these */
;;;1674               /* I2C_IT_IEA | I2C_IT_EVENT */
;;;1675               __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;1676   
;;;1677               return MID_OK;
;;;1678           }
;;;1679           else
;;;1680           {
;;;1681               mI2C->State = MID_I2C_STATE_READY;
;;;1682               mI2C->Mode = MID_I2C_MODE_NONE;
;;;1683   
;;;1684               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;1685               __MID_UNLOCK(mI2C);
;;;1686               return MID_ERROR;
;;;1687           }
;;;1688       }
;;;1689       else
;;;1690       {
;;;1691           return MID_BUSY;
;;;1692       }
;;;1693   }
000054  b005              ADD      sp,sp,#0x14
000056  bdf0              POP      {r4-r7,pc}
                  |L28.88|
000058  bf00              NOP                            ;1620
00005a  2030              MOVS     r0,#0x30              ;1620
00005c  5d00              LDRB     r0,[r0,r4]            ;1620
00005e  2801              CMP      r0,#1                 ;1620
000060  d101              BNE      |L28.102|
000062  2002              MOVS     r0,#2                 ;1620
000064  e7f6              B        |L28.84|
                  |L28.102|
000066  2101              MOVS     r1,#1                 ;1620
000068  2030              MOVS     r0,#0x30              ;1620
00006a  5501              STRB     r1,[r0,r4]            ;1620
00006c  bf00              NOP                            ;1620
00006e  6820              LDR      r0,[r4,#0]            ;1622
000070  7c00              LDRB     r0,[r0,#0x10]         ;1622
000072  2140              MOVS     r1,#0x40              ;1622
000074  4388              BICS     r0,r0,r1              ;1622
000076  6821              LDR      r1,[r4,#0]            ;1622
000078  7408              STRB     r0,[r1,#0x10]         ;1622
00007a  6820              LDR      r0,[r4,#0]            ;1625
00007c  6840              LDR      r0,[r0,#4]            ;1625
00007e  210e              MOVS     r1,#0xe               ;1625
000080  4388              BICS     r0,r0,r1              ;1625
000082  6821              LDR      r1,[r4,#0]            ;1625
000084  6048              STR      r0,[r1,#4]            ;1625
000086  4837              LDR      r0,|L28.356|
000088  6821              LDR      r1,[r4,#0]            ;1628
00008a  6008              STR      r0,[r1,#0]            ;1628
00008c  2000              MOVS     r0,#0                 ;1630
00008e  86e0              STRH     r0,[r4,#0x36]         ;1630
000090  2183              MOVS     r1,#0x83              ;1631
000092  2034              MOVS     r0,#0x34              ;1631
000094  5501              STRB     r1,[r0,r4]            ;1631
000096  2085              MOVS     r0,#0x85              ;1632
000098  0200              LSLS     r0,r0,#8              ;1632
00009a  8660              STRH     r0,[r4,#0x32]         ;1632
00009c  4832              LDR      r0,|L28.360|
00009e  4038              ANDS     r0,r0,r7              ;1635
0000a0  83a0              STRH     r0,[r4,#0x1c]         ;1635
0000a2  61a5              STR      r5,[r4,#0x18]         ;1636
0000a4  9804              LDR      r0,[sp,#0x10]         ;1637
0000a6  83e0              STRH     r0,[r4,#0x1e]         ;1637
0000a8  2000              MOVS     r0,#0                 ;1638
0000aa  8420              STRH     r0,[r4,#0x20]         ;1638
0000ac  482f              LDR      r0,|L28.364|
0000ae  6260              STR      r0,[r4,#0x24]         ;1639
0000b0  6aa0              LDR      r0,[r4,#0x28]         ;1641
0000b2  2800              CMP      r0,#0                 ;1641
0000b4  d012              BEQ      |L28.220|
0000b6  482e              LDR      r0,|L28.368|
0000b8  6aa1              LDR      r1,[r4,#0x28]         ;1643
0000ba  62c8              STR      r0,[r1,#0x2c]         ;1643
0000bc  482d              LDR      r0,|L28.372|
0000be  6aa1              LDR      r1,[r4,#0x28]         ;1644
0000c0  6348              STR      r0,[r1,#0x34]         ;1644
0000c2  2000              MOVS     r0,#0                 ;1645
0000c4  6aa1              LDR      r1,[r4,#0x28]         ;1645
0000c6  6388              STR      r0,[r1,#0x38]         ;1645
0000c8  6aa1              LDR      r1,[r4,#0x28]         ;1646
0000ca  6308              STR      r0,[r1,#0x30]         ;1646
0000cc  6aa0              LDR      r0,[r4,#0x28]         ;1647
0000ce  2200              MOVS     r2,#0                 ;1647
0000d0  4629              MOV      r1,r5                 ;1647
0000d2  9b04              LDR      r3,[sp,#0x10]         ;1647
0000d4  f7fffffe          BL       MID_DMA_Start_IT
0000d8  4606              MOV      r6,r0                 ;1647
0000da  e010              B        |L28.254|
                  |L28.220|
0000dc  2180              MOVS     r1,#0x80              ;1651
0000de  2034              MOVS     r0,#0x34              ;1651
0000e0  5501              STRB     r1,[r0,r4]            ;1651
0000e2  2000              MOVS     r0,#0                 ;1652
0000e4  8660              STRH     r0,[r4,#0x32]         ;1652
0000e6  8ee0              LDRH     r0,[r4,#0x36]         ;1653
0000e8  2140              MOVS     r1,#0x40              ;1653
0000ea  4308              ORRS     r0,r0,r1              ;1653
0000ec  86e0              STRH     r0,[r4,#0x36]         ;1653
0000ee  bf00              NOP                            ;1654
0000f0  2100              MOVS     r1,#0                 ;1654
0000f2  2030              MOVS     r0,#0x30              ;1654
0000f4  5501              STRB     r1,[r0,r4]            ;1654
0000f6  bf00              NOP                            ;1654
0000f8  2001              MOVS     r0,#1                 ;1655
0000fa  e7ab              B        |L28.84|
                  |L28.252|
0000fc  e02f              B        |L28.350|
                  |L28.254|
0000fe  2e00              CMP      r6,#0                 ;1658
000100  d11d              BNE      |L28.318|
000102  6820              LDR      r0,[r4,#0]            ;1661
000104  3020              ADDS     r0,r0,#0x20           ;1661
000106  7a00              LDRB     r0,[r0,#8]            ;1661
000108  21f8              MOVS     r1,#0xf8              ;1661
00010a  4008              ANDS     r0,r0,r1              ;1661
00010c  9000              STR      r0,[sp,#0]            ;1661
00010e  4669              MOV      r1,sp                 ;1662
000110  7808              LDRB     r0,[r1,#0]            ;1662
000112  28f8              CMP      r0,#0xf8              ;1662
000114  d003              BEQ      |L28.286|
000116  4668              MOV      r0,sp                 ;1662
000118  7800              LDRB     r0,[r0,#0]            ;1662
00011a  28a0              CMP      r0,#0xa0              ;1662
00011c  d102              BNE      |L28.292|
                  |L28.286|
00011e  2011              MOVS     r0,#0x11              ;1663
000120  6821              LDR      r1,[r4,#0]            ;1663
000122  7608              STRB     r0,[r1,#0x18]         ;1663
                  |L28.292|
000124  bf00              NOP                            ;1666
000126  2100              MOVS     r1,#0                 ;1666
000128  2030              MOVS     r0,#0x30              ;1666
00012a  5501              STRB     r1,[r0,r4]            ;1666
00012c  bf00              NOP                            ;1666
00012e  6820              LDR      r0,[r4,#0]            ;1675
000130  6840              LDR      r0,[r0,#4]            ;1675
000132  2103              MOVS     r1,#3                 ;1675
000134  4308              ORRS     r0,r0,r1              ;1675
000136  6821              LDR      r1,[r4,#0]            ;1675
000138  6048              STR      r0,[r1,#4]            ;1675
00013a  2000              MOVS     r0,#0                 ;1677
00013c  e78a              B        |L28.84|
                  |L28.318|
00013e  2180              MOVS     r1,#0x80              ;1681
000140  2034              MOVS     r0,#0x34              ;1681
000142  5501              STRB     r1,[r0,r4]            ;1681
000144  2000              MOVS     r0,#0                 ;1682
000146  8660              STRH     r0,[r4,#0x32]         ;1682
000148  8ee0              LDRH     r0,[r4,#0x36]         ;1684
00014a  2140              MOVS     r1,#0x40              ;1684
00014c  4308              ORRS     r0,r0,r1              ;1684
00014e  86e0              STRH     r0,[r4,#0x36]         ;1684
000150  bf00              NOP                            ;1685
000152  2100              MOVS     r1,#0                 ;1685
000154  2030              MOVS     r0,#0x30              ;1685
000156  5501              STRB     r1,[r0,r4]            ;1685
000158  bf00              NOP                            ;1685
00015a  2001              MOVS     r0,#1                 ;1686
00015c  e77a              B        |L28.84|
                  |L28.350|
00015e  2002              MOVS     r0,#2                 ;1691
000160  e778              B        |L28.84|
;;;1694   
                          ENDP

000162  0000              DCW      0x0000
                  |L28.356|
                          DCD      0x00f80300
                  |L28.360|
                          DCD      0x0000fffe
                  |L28.364|
                          DCD      I2C_Master_ISR_IT
                  |L28.368|
                          DCD      I2C_DMACplt
                  |L28.372|
                          DCD      I2C_DMAError

                          AREA ||i.MID_I2C_Master_Transmit_RepeatStart_IT||, CODE, READONLY, ALIGN=2

                  MID_I2C_Master_Transmit_RepeatStart_IT PROC
;;;1218    */
;;;1219   MID_StatusTypeDef MID_I2C_Master_Transmit_RepeatStart_IT(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
000000  b538              PUSH     {r3-r5,lr}
;;;1220   {
000002  4604              MOV      r4,r0
;;;1221       __IO uint8_t lEventTemp;
;;;1222   
;;;1223       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
000004  2034              MOVS     r0,#0x34
000006  5d00              LDRB     r0,[r0,r4]
000008  2581              MOVS     r5,#0x81
00000a  4028              ANDS     r0,r0,r5
00000c  2880              CMP      r0,#0x80
00000e  d168              BNE      |L29.226|
;;;1224       {
;;;1225           if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
000010  6820              LDR      r0,[r4,#0]
000012  6800              LDR      r0,[r0,#0]
000014  07c0              LSLS     r0,r0,#31
000016  0fc0              LSRS     r0,r0,#31
000018  2501              MOVS     r5,#1
00001a  4068              EORS     r0,r0,r5
00001c  4068              EORS     r0,r0,r5
00001e  2800              CMP      r0,#0
000020  d016              BEQ      |L29.80|
;;;1226           {
;;;1227               if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  2502              MOVS     r5,#2
000028  4028              ANDS     r0,r0,r5
00002a  0840              LSRS     r0,r0,#1
00002c  2800              CMP      r0,#0
00002e  d00f              BEQ      |L29.80|
;;;1228               {
;;;1229                   lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
000030  6820              LDR      r0,[r4,#0]
000032  3020              ADDS     r0,r0,#0x20
000034  7a00              LDRB     r0,[r0,#8]
000036  25f8              MOVS     r5,#0xf8
000038  4028              ANDS     r0,r0,r5
00003a  9000              STR      r0,[sp,#0]
;;;1230                   if((lEventTemp != 0x08) && (lEventTemp != 0x10))
00003c  466d              MOV      r5,sp
00003e  7828              LDRB     r0,[r5,#0]
000040  2808              CMP      r0,#8
000042  d005              BEQ      |L29.80|
000044  4668              MOV      r0,sp
000046  7800              LDRB     r0,[r0,#0]
000048  2810              CMP      r0,#0x10
00004a  d001              BEQ      |L29.80|
;;;1231                       return MID_ERROR;
00004c  2001              MOVS     r0,#1
                  |L29.78|
;;;1232               }
;;;1233           }
;;;1234   
;;;1235           /* Process Locked */
;;;1236           __MID_LOCK(mI2C);
;;;1237   
;;;1238           I2C_BUFFMODE_DISABLE(mI2C);
;;;1239   
;;;1240           /* Disable All Interrupt */
;;;1241           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;1242   
;;;1243           /* Clear I2C Flag */
;;;1244           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;1245   
;;;1246           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;1247           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;1248           mI2C->Mode = MID_I2C_MODE_MASTER_RREPEATSTART;
;;;1249   
;;;1250           /* Prepare transfer parameters */
;;;1251           mI2C->DevAddress = DevAddress & 0xFFFE;
;;;1252           mI2C->pBuffPtr = pData;
;;;1253           mI2C->XferSize = Size;
;;;1254           mI2C->XferCount = NULL;
;;;1255           mI2C->XferISR = I2C_Master_ISR_IT;
;;;1256   
;;;1257           /* Send Bus Start */
;;;1258           lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;1259           if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;1260               __DRV_I2C_STA_1(mI2C);
;;;1261   
;;;1262           /* Process Unlocked */
;;;1263           __MID_UNLOCK(mI2C);
;;;1264   
;;;1265           /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1266                     to avoid the risk of I2C interrupt handle execution before current
;;;1267                     process unlock */
;;;1268   
;;;1269           /* Enable IEA, EVENT, interrupt */
;;;1270           /* possible to enable all of these */
;;;1271           /* I2C_IT_IEA | I2C_IT_EVENT */
;;;1272           __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;1273   
;;;1274           return MID_OK;
;;;1275       }
;;;1276       else
;;;1277       {
;;;1278           return MID_BUSY;
;;;1279       }
;;;1280   }
00004e  bd38              POP      {r3-r5,pc}
                  |L29.80|
000050  bf00              NOP                            ;1236
000052  2030              MOVS     r0,#0x30              ;1236
000054  5d00              LDRB     r0,[r0,r4]            ;1236
000056  2801              CMP      r0,#1                 ;1236
000058  d101              BNE      |L29.94|
00005a  2002              MOVS     r0,#2                 ;1236
00005c  e7f7              B        |L29.78|
                  |L29.94|
00005e  2501              MOVS     r5,#1                 ;1236
000060  2030              MOVS     r0,#0x30              ;1236
000062  5505              STRB     r5,[r0,r4]            ;1236
000064  bf00              NOP                            ;1236
000066  6820              LDR      r0,[r4,#0]            ;1238
000068  7c00              LDRB     r0,[r0,#0x10]         ;1238
00006a  2540              MOVS     r5,#0x40              ;1238
00006c  43a8              BICS     r0,r0,r5              ;1238
00006e  6825              LDR      r5,[r4,#0]            ;1238
000070  7428              STRB     r0,[r5,#0x10]         ;1238
000072  6820              LDR      r0,[r4,#0]            ;1241
000074  6840              LDR      r0,[r0,#4]            ;1241
000076  250e              MOVS     r5,#0xe               ;1241
000078  43a8              BICS     r0,r0,r5              ;1241
00007a  6825              LDR      r5,[r4,#0]            ;1241
00007c  6068              STR      r0,[r5,#4]            ;1241
00007e  481a              LDR      r0,|L29.232|
000080  6825              LDR      r5,[r4,#0]            ;1244
000082  6028              STR      r0,[r5,#0]            ;1244
000084  2000              MOVS     r0,#0                 ;1246
000086  86e0              STRH     r0,[r4,#0x36]         ;1246
000088  2583              MOVS     r5,#0x83              ;1247
00008a  2034              MOVS     r0,#0x34              ;1247
00008c  5505              STRB     r5,[r0,r4]            ;1247
00008e  2005              MOVS     r0,#5                 ;1248
000090  0200              LSLS     r0,r0,#8              ;1248
000092  8660              STRH     r0,[r4,#0x32]         ;1248
000094  4815              LDR      r0,|L29.236|
000096  4008              ANDS     r0,r0,r1              ;1251
000098  83a0              STRH     r0,[r4,#0x1c]         ;1251
00009a  61a2              STR      r2,[r4,#0x18]         ;1252
00009c  83e3              STRH     r3,[r4,#0x1e]         ;1253
00009e  2000              MOVS     r0,#0                 ;1254
0000a0  8420              STRH     r0,[r4,#0x20]         ;1254
0000a2  4813              LDR      r0,|L29.240|
0000a4  6260              STR      r0,[r4,#0x24]         ;1255
0000a6  6820              LDR      r0,[r4,#0]            ;1258
0000a8  3020              ADDS     r0,r0,#0x20           ;1258
0000aa  7a00              LDRB     r0,[r0,#8]            ;1258
0000ac  25f8              MOVS     r5,#0xf8              ;1258
0000ae  4028              ANDS     r0,r0,r5              ;1258
0000b0  9000              STR      r0,[sp,#0]            ;1258
0000b2  466d              MOV      r5,sp                 ;1259
0000b4  7828              LDRB     r0,[r5,#0]            ;1259
0000b6  28f8              CMP      r0,#0xf8              ;1259
0000b8  d003              BEQ      |L29.194|
0000ba  4668              MOV      r0,sp                 ;1259
0000bc  7800              LDRB     r0,[r0,#0]            ;1259
0000be  28a0              CMP      r0,#0xa0              ;1259
0000c0  d102              BNE      |L29.200|
                  |L29.194|
0000c2  2011              MOVS     r0,#0x11              ;1260
0000c4  6825              LDR      r5,[r4,#0]            ;1260
0000c6  7628              STRB     r0,[r5,#0x18]         ;1260
                  |L29.200|
0000c8  bf00              NOP                            ;1263
0000ca  2500              MOVS     r5,#0                 ;1263
0000cc  2030              MOVS     r0,#0x30              ;1263
0000ce  5505              STRB     r5,[r0,r4]            ;1263
0000d0  bf00              NOP                            ;1263
0000d2  6820              LDR      r0,[r4,#0]            ;1272
0000d4  6840              LDR      r0,[r0,#4]            ;1272
0000d6  2503              MOVS     r5,#3                 ;1272
0000d8  4328              ORRS     r0,r0,r5              ;1272
0000da  6825              LDR      r5,[r4,#0]            ;1272
0000dc  6068              STR      r0,[r5,#4]            ;1272
0000de  2000              MOVS     r0,#0                 ;1274
0000e0  e7b5              B        |L29.78|
                  |L29.226|
0000e2  2002              MOVS     r0,#2                 ;1278
0000e4  e7b3              B        |L29.78|
;;;1281   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L29.232|
                          DCD      0x00f80300
                  |L29.236|
                          DCD      0x0000fffe
                  |L29.240|
                          DCD      I2C_Master_ISR_IT

                          AREA ||i.MID_I2C_Mem_Read||, CODE, READONLY, ALIGN=2

                  MID_I2C_Mem_Read PROC
;;;2152    */
;;;2153   MID_StatusTypeDef MID_I2C_Mem_Read(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  b5fe              PUSH     {r1-r7,lr}
;;;2154   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;2155       uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;2156       __IO uint8_t lEventTemp;
;;;2157       union{
;;;2158           uint8_t B[2];
;;;2159           uint16_t H;
;;;2160       }lMemAddress;
;;;2161   
;;;2162       /* Check the parameters */
;;;2163       assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
;;;2164   
;;;2165       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000e  2034              MOVS     r0,#0x34
000010  5d00              LDRB     r0,[r0,r4]
000012  2181              MOVS     r1,#0x81
000014  4008              ANDS     r0,r0,r1
000016  2880              CMP      r0,#0x80
000018  d175              BNE      |L30.262|
;;;2166       {
;;;2167           if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  07c0              LSLS     r0,r0,#31
000020  0fc0              LSRS     r0,r0,#31
000022  2101              MOVS     r1,#1
000024  4048              EORS     r0,r0,r1
000026  4048              EORS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d016              BEQ      |L30.90|
;;;2168           {
;;;2169               if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
00002c  6820              LDR      r0,[r4,#0]
00002e  6800              LDR      r0,[r0,#0]
000030  2102              MOVS     r1,#2
000032  4008              ANDS     r0,r0,r1
000034  0840              LSRS     r0,r0,#1
000036  2800              CMP      r0,#0
000038  d00f              BEQ      |L30.90|
;;;2170               {
;;;2171                   lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
00003a  6820              LDR      r0,[r4,#0]
00003c  3020              ADDS     r0,r0,#0x20
00003e  7a00              LDRB     r0,[r0,#8]
000040  21f8              MOVS     r1,#0xf8
000042  4008              ANDS     r0,r0,r1
000044  9001              STR      r0,[sp,#4]
;;;2172                   if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000046  4669              MOV      r1,sp
000048  7908              LDRB     r0,[r1,#4]
00004a  2808              CMP      r0,#8
00004c  d005              BEQ      |L30.90|
00004e  4668              MOV      r0,sp
000050  7900              LDRB     r0,[r0,#4]
000052  2810              CMP      r0,#0x10
000054  d001              BEQ      |L30.90|
;;;2173                       return MID_ERROR;
000056  2001              MOVS     r0,#1
                  |L30.88|
;;;2174               }
;;;2175           }
;;;2176   
;;;2177           /* Process Locked */
;;;2178           __MID_LOCK(mI2C);
;;;2179   
;;;2180           I2C_BUFFMODE_DISABLE(mI2C);
;;;2181   
;;;2182           if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
;;;2183           {
;;;2184               lMemAddress.H = MemAddress;
;;;2185           }
;;;2186           else
;;;2187           {
;;;2188               lMemAddress.B[0] = (uint8_t)(MemAddress >> 8);
;;;2189               lMemAddress.B[1] = (uint8_t)MemAddress; 
;;;2190           }
;;;2191   
;;;2192           /* Disable All Interrupt */
;;;2193           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;2194   
;;;2195           /* Clear I2C Flag */
;;;2196           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;2197   
;;;2198           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;2199           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;2200           mI2C->Mode = MID_I2C_MODE_MASTER_RREPEATSTART;
;;;2201   
;;;2202           /* Prepare transfer parameters */
;;;2203           mI2C->DevAddress = DevAddress & 0xFFFE;
;;;2204           mI2C->pBuffPtr = (uint8_t *)(&lMemAddress);
;;;2205           mI2C->XferSize = MemAddSize;
;;;2206           mI2C->XferCount = NULL;
;;;2207           mI2C->XferISR = NULL;
;;;2208   
;;;2209           /* Init tickstart for timeout management*/
;;;2210           tickstart = MID_GetTick();
;;;2211   
;;;2212           /* Send Bus Start */
;;;2213           lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;2214           if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;2215               __DRV_I2C_STA_1(mI2C);
;;;2216   
;;;2217           do{
;;;2218               if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, Timeout, tickstart) != MID_OK)
;;;2219               {
;;;2220                   /* Process Unlocked */
;;;2221                   __MID_UNLOCK(mI2C);
;;;2222                   return MID_ERROR;
;;;2223               }
;;;2224               I2C_BytemodeMasterEventHandle(mI2C);
;;;2225           }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;2226   
;;;2227           if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;2228           {
;;;2229               /* Process Unlocked */
;;;2230               __MID_UNLOCK(mI2C);
;;;2231               return MID_ERROR;
;;;2232           }
;;;2233   
;;;2234           /* Clear I2C Flag */
;;;2235           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;2236   
;;;2237           // mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;2238           mI2C->State = MID_I2C_STATE_BUSY_RX;
;;;2239           mI2C->Mode = MID_I2C_MODE_MASTER_STOP;
;;;2240   
;;;2241           /* Prepare transfer parameters */
;;;2242           mI2C->DevAddress = DevAddress | 0x0001;
;;;2243           mI2C->pBuffPtr = pData;
;;;2244           mI2C->XferSize = Size;
;;;2245           mI2C->XferCount = NULL;
;;;2246           mI2C->XferISR = NULL;
;;;2247   
;;;2248           do{
;;;2249               if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, Timeout, tickstart) != MID_OK)
;;;2250               {
;;;2251                   /* Process Unlocked */
;;;2252                   __MID_UNLOCK(mI2C);
;;;2253                   return MID_ERROR;
;;;2254               }
;;;2255               I2C_BytemodeMasterEventHandle(mI2C);
;;;2256           }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;2257   
;;;2258           mI2C->State = MID_I2C_STATE_READY;
;;;2259           mI2C->Mode = MID_I2C_MODE_NONE;
;;;2260   
;;;2261           /* Process Unlocked */
;;;2262           __MID_UNLOCK(mI2C);
;;;2263   
;;;2264           if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;2265               return MID_ERROR;
;;;2266           else
;;;2267               return MID_OK;
;;;2268       }
;;;2269       else
;;;2270       {
;;;2271           return MID_BUSY;
;;;2272       }
;;;2273   }
000058  bdfe              POP      {r1-r7,pc}
                  |L30.90|
00005a  bf00              NOP                            ;2178
00005c  2030              MOVS     r0,#0x30              ;2178
00005e  5d00              LDRB     r0,[r0,r4]            ;2178
000060  2801              CMP      r0,#1                 ;2178
000062  d101              BNE      |L30.104|
000064  2002              MOVS     r0,#2                 ;2178
000066  e7f7              B        |L30.88|
                  |L30.104|
000068  2101              MOVS     r1,#1                 ;2178
00006a  2030              MOVS     r0,#0x30              ;2178
00006c  5501              STRB     r1,[r0,r4]            ;2178
00006e  bf00              NOP                            ;2178
000070  6820              LDR      r0,[r4,#0]            ;2180
000072  7c00              LDRB     r0,[r0,#0x10]         ;2180
000074  2140              MOVS     r1,#0x40              ;2180
000076  4388              BICS     r0,r0,r1              ;2180
000078  6821              LDR      r1,[r4,#0]            ;2180
00007a  7408              STRB     r0,[r1,#0x10]         ;2180
00007c  2f01              CMP      r7,#1                 ;2182
00007e  d101              BNE      |L30.132|
000080  9500              STR      r5,[sp,#0]            ;2184
000082  e003              B        |L30.140|
                  |L30.132|
000084  1229              ASRS     r1,r5,#8              ;2188
000086  4668              MOV      r0,sp                 ;2188
000088  7001              STRB     r1,[r0,#0]            ;2188
00008a  7045              STRB     r5,[r0,#1]            ;2189
                  |L30.140|
00008c  6820              LDR      r0,[r4,#0]            ;2193
00008e  6840              LDR      r0,[r0,#4]            ;2193
000090  210e              MOVS     r1,#0xe               ;2193
000092  4388              BICS     r0,r0,r1              ;2193
000094  6821              LDR      r1,[r4,#0]            ;2193
000096  6048              STR      r0,[r1,#4]            ;2193
000098  4844              LDR      r0,|L30.428|
00009a  6821              LDR      r1,[r4,#0]            ;2196
00009c  6008              STR      r0,[r1,#0]            ;2196
00009e  2000              MOVS     r0,#0                 ;2198
0000a0  86e0              STRH     r0,[r4,#0x36]         ;2198
0000a2  2183              MOVS     r1,#0x83              ;2199
0000a4  2034              MOVS     r0,#0x34              ;2199
0000a6  5501              STRB     r1,[r0,r4]            ;2199
0000a8  2005              MOVS     r0,#5                 ;2200
0000aa  0200              LSLS     r0,r0,#8              ;2200
0000ac  8660              STRH     r0,[r4,#0x32]         ;2200
0000ae  4840              LDR      r0,|L30.432|
0000b0  4030              ANDS     r0,r0,r6              ;2203
0000b2  83a0              STRH     r0,[r4,#0x1c]         ;2203
0000b4  4668              MOV      r0,sp                 ;2204
0000b6  61a0              STR      r0,[r4,#0x18]         ;2204
0000b8  83e7              STRH     r7,[r4,#0x1e]         ;2205
0000ba  2000              MOVS     r0,#0                 ;2206
0000bc  8420              STRH     r0,[r4,#0x20]         ;2206
0000be  6260              STR      r0,[r4,#0x24]         ;2207
0000c0  f7fffffe          BL       MID_GetTick
0000c4  9002              STR      r0,[sp,#8]            ;2210
0000c6  6820              LDR      r0,[r4,#0]            ;2213
0000c8  3020              ADDS     r0,r0,#0x20           ;2213
0000ca  7a00              LDRB     r0,[r0,#8]            ;2213
0000cc  21f8              MOVS     r1,#0xf8              ;2213
0000ce  4008              ANDS     r0,r0,r1              ;2213
0000d0  9001              STR      r0,[sp,#4]            ;2213
0000d2  4669              MOV      r1,sp                 ;2214
0000d4  7908              LDRB     r0,[r1,#4]            ;2214
0000d6  28f8              CMP      r0,#0xf8              ;2214
0000d8  d003              BEQ      |L30.226|
0000da  4668              MOV      r0,sp                 ;2214
0000dc  7900              LDRB     r0,[r0,#4]            ;2214
0000de  28a0              CMP      r0,#0xa0              ;2214
0000e0  d102              BNE      |L30.232|
                  |L30.226|
0000e2  2011              MOVS     r0,#0x11              ;2215
0000e4  6821              LDR      r1,[r4,#0]            ;2215
0000e6  7608              STRB     r0,[r1,#0x18]         ;2215
                  |L30.232|
0000e8  bf00              NOP                            ;2217
                  |L30.234|
0000ea  4620              MOV      r0,r4                 ;2218
0000ec  9a02              LDR      r2,[sp,#8]            ;2218
0000ee  990a              LDR      r1,[sp,#0x28]         ;2218
0000f0  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
0000f4  2800              CMP      r0,#0                 ;2218
0000f6  d007              BEQ      |L30.264|
0000f8  bf00              NOP                            ;2221
0000fa  2100              MOVS     r1,#0                 ;2221
0000fc  2030              MOVS     r0,#0x30              ;2221
0000fe  5501              STRB     r1,[r0,r4]            ;2221
000100  bf00              NOP                            ;2221
000102  2001              MOVS     r0,#1                 ;2222
000104  e7a8              B        |L30.88|
                  |L30.262|
000106  e04e              B        |L30.422|
                  |L30.264|
000108  4620              MOV      r0,r4                 ;2224
00010a  f7fffffe          BL       I2C_BytemodeMasterEventHandle
00010e  2034              MOVS     r0,#0x34              ;2225
000110  5d00              LDRB     r0,[r0,r4]            ;2225
000112  07c0              LSLS     r0,r0,#31             ;2225
000114  0fc0              LSRS     r0,r0,#31             ;2225
000116  2800              CMP      r0,#0                 ;2225
000118  d1e7              BNE      |L30.234|
00011a  8ee0              LDRH     r0,[r4,#0x36]         ;2227
00011c  2800              CMP      r0,#0                 ;2227
00011e  d006              BEQ      |L30.302|
000120  bf00              NOP                            ;2230
000122  2100              MOVS     r1,#0                 ;2230
000124  2030              MOVS     r0,#0x30              ;2230
000126  5501              STRB     r1,[r0,r4]            ;2230
000128  bf00              NOP                            ;2230
00012a  2001              MOVS     r0,#1                 ;2231
00012c  e794              B        |L30.88|
                  |L30.302|
00012e  481f              LDR      r0,|L30.428|
000130  6821              LDR      r1,[r4,#0]            ;2235
000132  6008              STR      r0,[r1,#0]            ;2235
000134  2185              MOVS     r1,#0x85              ;2238
000136  2034              MOVS     r0,#0x34              ;2238
000138  5501              STRB     r1,[r0,r4]            ;2238
00013a  2003              MOVS     r0,#3                 ;2239
00013c  0240              LSLS     r0,r0,#9              ;2239
00013e  8660              STRH     r0,[r4,#0x32]         ;2239
000140  2001              MOVS     r0,#1                 ;2242
000142  4330              ORRS     r0,r0,r6              ;2242
000144  83a0              STRH     r0,[r4,#0x1c]         ;2242
000146  9808              LDR      r0,[sp,#0x20]         ;2243
000148  61a0              STR      r0,[r4,#0x18]         ;2243
00014a  9809              LDR      r0,[sp,#0x24]         ;2244
00014c  83e0              STRH     r0,[r4,#0x1e]         ;2244
00014e  2000              MOVS     r0,#0                 ;2245
000150  8420              STRH     r0,[r4,#0x20]         ;2245
000152  6260              STR      r0,[r4,#0x24]         ;2246
000154  bf00              NOP                            ;2248
                  |L30.342|
000156  4620              MOV      r0,r4                 ;2249
000158  9a02              LDR      r2,[sp,#8]            ;2249
00015a  990a              LDR      r1,[sp,#0x28]         ;2249
00015c  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
000160  2800              CMP      r0,#0                 ;2249
000162  d006              BEQ      |L30.370|
000164  bf00              NOP                            ;2252
000166  2100              MOVS     r1,#0                 ;2252
000168  2030              MOVS     r0,#0x30              ;2252
00016a  5501              STRB     r1,[r0,r4]            ;2252
00016c  bf00              NOP                            ;2252
00016e  2001              MOVS     r0,#1                 ;2253
000170  e772              B        |L30.88|
                  |L30.370|
000172  4620              MOV      r0,r4                 ;2255
000174  f7fffffe          BL       I2C_BytemodeMasterEventHandle
000178  2034              MOVS     r0,#0x34              ;2256
00017a  5d00              LDRB     r0,[r0,r4]            ;2256
00017c  07c0              LSLS     r0,r0,#31             ;2256
00017e  0fc0              LSRS     r0,r0,#31             ;2256
000180  2800              CMP      r0,#0                 ;2256
000182  d1e8              BNE      |L30.342|
000184  2180              MOVS     r1,#0x80              ;2258
000186  2034              MOVS     r0,#0x34              ;2258
000188  5501              STRB     r1,[r0,r4]            ;2258
00018a  2000              MOVS     r0,#0                 ;2259
00018c  8660              STRH     r0,[r4,#0x32]         ;2259
00018e  bf00              NOP                            ;2262
000190  2100              MOVS     r1,#0                 ;2262
000192  2030              MOVS     r0,#0x30              ;2262
000194  5501              STRB     r1,[r0,r4]            ;2262
000196  bf00              NOP                            ;2262
000198  8ee0              LDRH     r0,[r4,#0x36]         ;2264
00019a  2800              CMP      r0,#0                 ;2264
00019c  d001              BEQ      |L30.418|
00019e  2001              MOVS     r0,#1                 ;2265
0001a0  e75a              B        |L30.88|
                  |L30.418|
0001a2  2000              MOVS     r0,#0                 ;2267
0001a4  e758              B        |L30.88|
                  |L30.422|
0001a6  2002              MOVS     r0,#2                 ;2271
0001a8  e756              B        |L30.88|
;;;2274   
                          ENDP

0001aa  0000              DCW      0x0000
                  |L30.428|
                          DCD      0x00f80300
                  |L30.432|
                          DCD      0x0000fffe

                          AREA ||i.MID_I2C_Mem_Read_DMA||, CODE, READONLY, ALIGN=2

                  MID_I2C_Mem_Read_DMA PROC
;;;2703    */
;;;2704   MID_StatusTypeDef MID_I2C_Mem_Read_DMA(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
000000  b5f0              PUSH     {r4-r7,lr}
;;;2705   {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;2706       MID_StatusTypeDef lDmaXferStatus;
;;;2707       uint32_t tickstart = 0U;
00000c  2000              MOVS     r0,#0
00000e  9003              STR      r0,[sp,#0xc]
;;;2708       __IO uint8_t lEventTemp;
;;;2709       union{
;;;2710           uint8_t B[2];
;;;2711           uint16_t H;
;;;2712       }lMemAddress;
;;;2713   
;;;2714       /* Check the parameters */
;;;2715       assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
;;;2716   
;;;2717       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
000010  2034              MOVS     r0,#0x34
000012  5d00              LDRB     r0,[r0,r4]
000014  2181              MOVS     r1,#0x81
000016  4008              ANDS     r0,r0,r1
000018  2880              CMP      r0,#0x80
00001a  d17d              BNE      |L31.280|
;;;2718       {
;;;2719           if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
00001c  6820              LDR      r0,[r4,#0]
00001e  6800              LDR      r0,[r0,#0]
000020  07c0              LSLS     r0,r0,#31
000022  0fc0              LSRS     r0,r0,#31
000024  2101              MOVS     r1,#1
000026  4048              EORS     r0,r0,r1
000028  4048              EORS     r0,r0,r1
00002a  2800              CMP      r0,#0
00002c  d017              BEQ      |L31.94|
;;;2720           {
;;;2721               if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
00002e  6820              LDR      r0,[r4,#0]
000030  6800              LDR      r0,[r0,#0]
000032  2102              MOVS     r1,#2
000034  4008              ANDS     r0,r0,r1
000036  0840              LSRS     r0,r0,#1
000038  2800              CMP      r0,#0
00003a  d010              BEQ      |L31.94|
;;;2722               {
;;;2723                   lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
00003c  6820              LDR      r0,[r4,#0]
00003e  3020              ADDS     r0,r0,#0x20
000040  7a00              LDRB     r0,[r0,#8]
000042  21f8              MOVS     r1,#0xf8
000044  4008              ANDS     r0,r0,r1
000046  9002              STR      r0,[sp,#8]
;;;2724                   if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000048  4669              MOV      r1,sp
00004a  7a08              LDRB     r0,[r1,#8]
00004c  2808              CMP      r0,#8
00004e  d006              BEQ      |L31.94|
000050  4668              MOV      r0,sp
000052  7a00              LDRB     r0,[r0,#8]
000054  2810              CMP      r0,#0x10
000056  d002              BEQ      |L31.94|
;;;2725                       return MID_ERROR;
000058  2001              MOVS     r0,#1
                  |L31.90|
;;;2726               }
;;;2727           }
;;;2728   
;;;2729           if(mI2C->hdmarx == NULL)
;;;2730           {
;;;2731               mI2C->State = MID_I2C_STATE_READY;
;;;2732               mI2C->Mode = MID_I2C_MODE_NONE;
;;;2733               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;2734               return MID_ERROR;
;;;2735           }
;;;2736   
;;;2737           /* Process Locked */
;;;2738           __MID_LOCK(mI2C);
;;;2739   
;;;2740           I2C_BUFFMODE_DISABLE(mI2C);
;;;2741   
;;;2742           if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
;;;2743           {
;;;2744               lMemAddress.H = MemAddress;
;;;2745           }
;;;2746           else
;;;2747           {
;;;2748               lMemAddress.B[0] = (uint8_t)(MemAddress >> 8);
;;;2749               lMemAddress.B[1] = (uint8_t)MemAddress; 
;;;2750           }
;;;2751   
;;;2752           /* Disable All Interrupt */
;;;2753           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;2754   
;;;2755           /* Clear I2C Flag */
;;;2756           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;2757   
;;;2758           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;2759           mI2C->State = MID_I2C_STATE_BUSY_RX;
;;;2760           mI2C->Mode = MID_I2C_MODE_MASTER_RREPEATSTART;
;;;2761   
;;;2762           /* Prepare transfer parameters */
;;;2763           mI2C->DevAddress = DevAddress & 0xFFFE;
;;;2764           mI2C->pBuffPtr = (uint8_t *)(&lMemAddress);
;;;2765           mI2C->XferSize = MemAddSize;
;;;2766           mI2C->XferCount = NULL;
;;;2767           mI2C->XferISR = NULL;
;;;2768   
;;;2769           mI2C->hdmarx->XferCpltCallback = I2C_DMACplt;
;;;2770           mI2C->hdmarx->XferErrorCallback = I2C_DMAError;
;;;2771           mI2C->hdmarx->XferAbortCallback = NULL;
;;;2772           mI2C->hdmarx->XferHalfCpltCallback = NULL;
;;;2773           lDmaXferStatus = MID_DMA_Start_IT(mI2C->hdmarx, 0, (uint32_t)pData, (uint32_t)Size);
;;;2774   
;;;2775           if(lDmaXferStatus != MID_OK)
;;;2776           {
;;;2777               mI2C->State = MID_I2C_STATE_READY;
;;;2778               mI2C->Mode = MID_I2C_MODE_NONE;
;;;2779   
;;;2780               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;2781               __MID_UNLOCK(mI2C);
;;;2782               return MID_ERROR;
;;;2783           }
;;;2784   
;;;2785           /* Init tickstart for timeout management*/
;;;2786           tickstart = MID_GetTick();
;;;2787   
;;;2788           /* Send Bus Start */
;;;2789           lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;2790           if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;2791               __DRV_I2C_STA_1(mI2C);
;;;2792   
;;;2793           do{
;;;2794               if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, I2C_TIMEOUT_FLAG, tickstart) != MID_OK)
;;;2795               {
;;;2796                   /* Process Unlocked */
;;;2797                   __MID_UNLOCK(mI2C);
;;;2798                   return MID_ERROR;
;;;2799               }
;;;2800               I2C_BytemodeMasterEventHandle(mI2C);
;;;2801           }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;2802   
;;;2803           if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;2804           {
;;;2805               /* Process Unlocked */
;;;2806               __MID_UNLOCK(mI2C);
;;;2807               return MID_ERROR;
;;;2808           }
;;;2809   
;;;2810           /* Clear I2C Flag */
;;;2811           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;2812   
;;;2813           // mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;2814           mI2C->State = MID_I2C_STATE_BUSY_RX;
;;;2815           mI2C->Mode = MID_I2C_MODE_MASTER_RECEIVE_DMA_STOP;
;;;2816   
;;;2817           /* Prepare transfer parameters */
;;;2818           mI2C->DevAddress = DevAddress | 0x0001;
;;;2819           mI2C->pBuffPtr = pData;
;;;2820           mI2C->XferSize = Size;
;;;2821           mI2C->XferCount = NULL;
;;;2822           mI2C->XferISR = I2C_Master_ISR_IT;
;;;2823   
;;;2824           /* Send Bus Start */
;;;2825           lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;2826           if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;2827               __DRV_I2C_STA_1(mI2C);
;;;2828   
;;;2829           /* Process Unlocked */
;;;2830           __MID_UNLOCK(mI2C);
;;;2831   
;;;2832           /* Note : The I2C interrupts must be enabled after unlocking current process
;;;2833                     to avoid the risk of I2C interrupt handle execution before current
;;;2834                     process unlock */
;;;2835   
;;;2836           /* Enable IEA, EVENT, interrupt */
;;;2837           /* possible to enable all of these */
;;;2838           /* I2C_IT_IEA | I2C_IT_EVENT */
;;;2839           __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;2840   
;;;2841           return MID_OK;
;;;2842       }
;;;2843       else
;;;2844       {
;;;2845           return MID_BUSY;
;;;2846       }
;;;2847   }
00005a  b005              ADD      sp,sp,#0x14
00005c  bdf0              POP      {r4-r7,pc}
                  |L31.94|
00005e  6ae0              LDR      r0,[r4,#0x2c]         ;2729
000060  2800              CMP      r0,#0                 ;2729
000062  d10a              BNE      |L31.122|
000064  2180              MOVS     r1,#0x80              ;2731
000066  2034              MOVS     r0,#0x34              ;2731
000068  5501              STRB     r1,[r0,r4]            ;2731
00006a  2000              MOVS     r0,#0                 ;2732
00006c  8660              STRH     r0,[r4,#0x32]         ;2732
00006e  8ee0              LDRH     r0,[r4,#0x36]         ;2733
000070  2140              MOVS     r1,#0x40              ;2733
000072  4308              ORRS     r0,r0,r1              ;2733
000074  86e0              STRH     r0,[r4,#0x36]         ;2733
000076  2001              MOVS     r0,#1                 ;2734
000078  e7ef              B        |L31.90|
                  |L31.122|
00007a  bf00              NOP                            ;2738
00007c  2030              MOVS     r0,#0x30              ;2738
00007e  5d00              LDRB     r0,[r0,r4]            ;2738
000080  2801              CMP      r0,#1                 ;2738
000082  d101              BNE      |L31.136|
000084  2002              MOVS     r0,#2                 ;2738
000086  e7e8              B        |L31.90|
                  |L31.136|
000088  2101              MOVS     r1,#1                 ;2738
00008a  2030              MOVS     r0,#0x30              ;2738
00008c  5501              STRB     r1,[r0,r4]            ;2738
00008e  bf00              NOP                            ;2738
000090  6820              LDR      r0,[r4,#0]            ;2740
000092  7c00              LDRB     r0,[r0,#0x10]         ;2740
000094  2140              MOVS     r1,#0x40              ;2740
000096  4388              BICS     r0,r0,r1              ;2740
000098  6821              LDR      r1,[r4,#0]            ;2740
00009a  7408              STRB     r0,[r1,#0x10]         ;2740
00009c  2f01              CMP      r7,#1                 ;2742
00009e  d101              BNE      |L31.164|
0000a0  9501              STR      r5,[sp,#4]            ;2744
0000a2  e003              B        |L31.172|
                  |L31.164|
0000a4  1229              ASRS     r1,r5,#8              ;2748
0000a6  4668              MOV      r0,sp                 ;2748
0000a8  7101              STRB     r1,[r0,#4]            ;2748
0000aa  7145              STRB     r5,[r0,#5]            ;2749
                  |L31.172|
0000ac  6820              LDR      r0,[r4,#0]            ;2753
0000ae  6840              LDR      r0,[r0,#4]            ;2753
0000b0  210e              MOVS     r1,#0xe               ;2753
0000b2  4388              BICS     r0,r0,r1              ;2753
0000b4  6821              LDR      r1,[r4,#0]            ;2753
0000b6  6048              STR      r0,[r1,#4]            ;2753
0000b8  4852              LDR      r0,|L31.516|
0000ba  6821              LDR      r1,[r4,#0]            ;2756
0000bc  6008              STR      r0,[r1,#0]            ;2756
0000be  2000              MOVS     r0,#0                 ;2758
0000c0  86e0              STRH     r0,[r4,#0x36]         ;2758
0000c2  2185              MOVS     r1,#0x85              ;2759
0000c4  2034              MOVS     r0,#0x34              ;2759
0000c6  5501              STRB     r1,[r0,r4]            ;2759
0000c8  2005              MOVS     r0,#5                 ;2760
0000ca  0200              LSLS     r0,r0,#8              ;2760
0000cc  8660              STRH     r0,[r4,#0x32]         ;2760
0000ce  484e              LDR      r0,|L31.520|
0000d0  4030              ANDS     r0,r0,r6              ;2763
0000d2  83a0              STRH     r0,[r4,#0x1c]         ;2763
0000d4  a801              ADD      r0,sp,#4              ;2764
0000d6  61a0              STR      r0,[r4,#0x18]         ;2764
0000d8  83e7              STRH     r7,[r4,#0x1e]         ;2765
0000da  2000              MOVS     r0,#0                 ;2766
0000dc  8420              STRH     r0,[r4,#0x20]         ;2766
0000de  6260              STR      r0,[r4,#0x24]         ;2767
0000e0  484a              LDR      r0,|L31.524|
0000e2  6ae1              LDR      r1,[r4,#0x2c]         ;2769
0000e4  62c8              STR      r0,[r1,#0x2c]         ;2769
0000e6  484a              LDR      r0,|L31.528|
0000e8  6ae1              LDR      r1,[r4,#0x2c]         ;2770
0000ea  6348              STR      r0,[r1,#0x34]         ;2770
0000ec  2000              MOVS     r0,#0                 ;2771
0000ee  6ae1              LDR      r1,[r4,#0x2c]         ;2771
0000f0  6388              STR      r0,[r1,#0x38]         ;2771
0000f2  6ae1              LDR      r1,[r4,#0x2c]         ;2772
0000f4  6308              STR      r0,[r1,#0x30]         ;2772
0000f6  6ae0              LDR      r0,[r4,#0x2c]         ;2773
0000f8  9000              STR      r0,[sp,#0]            ;2773
0000fa  2100              MOVS     r1,#0                 ;2773
0000fc  9b0b              LDR      r3,[sp,#0x2c]         ;2773
0000fe  9a0a              LDR      r2,[sp,#0x28]         ;2773
000100  f7fffffe          BL       MID_DMA_Start_IT
000104  9004              STR      r0,[sp,#0x10]         ;2773
000106  9804              LDR      r0,[sp,#0x10]         ;2775
000108  2800              CMP      r0,#0                 ;2775
00010a  d011              BEQ      |L31.304|
00010c  2180              MOVS     r1,#0x80              ;2777
00010e  2034              MOVS     r0,#0x34              ;2777
000110  5501              STRB     r1,[r0,r4]            ;2777
000112  2000              MOVS     r0,#0                 ;2778
000114  8660              STRH     r0,[r4,#0x32]         ;2778
000116  e000              B        |L31.282|
                  |L31.280|
000118  e072              B        |L31.512|
                  |L31.282|
00011a  8ee0              LDRH     r0,[r4,#0x36]         ;2780
00011c  2140              MOVS     r1,#0x40              ;2780
00011e  4308              ORRS     r0,r0,r1              ;2780
000120  86e0              STRH     r0,[r4,#0x36]         ;2780
000122  bf00              NOP                            ;2781
000124  2100              MOVS     r1,#0                 ;2781
000126  2030              MOVS     r0,#0x30              ;2781
000128  5501              STRB     r1,[r0,r4]            ;2781
00012a  bf00              NOP                            ;2781
00012c  2001              MOVS     r0,#1                 ;2782
00012e  e794              B        |L31.90|
                  |L31.304|
000130  f7fffffe          BL       MID_GetTick
000134  9003              STR      r0,[sp,#0xc]          ;2786
000136  6820              LDR      r0,[r4,#0]            ;2789
000138  3020              ADDS     r0,r0,#0x20           ;2789
00013a  7a00              LDRB     r0,[r0,#8]            ;2789
00013c  21f8              MOVS     r1,#0xf8              ;2789
00013e  4008              ANDS     r0,r0,r1              ;2789
000140  9002              STR      r0,[sp,#8]            ;2789
000142  4669              MOV      r1,sp                 ;2790
000144  7a08              LDRB     r0,[r1,#8]            ;2790
000146  28f8              CMP      r0,#0xf8              ;2790
000148  d003              BEQ      |L31.338|
00014a  4668              MOV      r0,sp                 ;2790
00014c  7a00              LDRB     r0,[r0,#8]            ;2790
00014e  28a0              CMP      r0,#0xa0              ;2790
000150  d102              BNE      |L31.344|
                  |L31.338|
000152  2011              MOVS     r0,#0x11              ;2791
000154  6821              LDR      r1,[r4,#0]            ;2791
000156  7608              STRB     r0,[r1,#0x18]         ;2791
                  |L31.344|
000158  bf00              NOP                            ;2793
                  |L31.346|
00015a  2119              MOVS     r1,#0x19              ;2794
00015c  4620              MOV      r0,r4                 ;2794
00015e  9a03              LDR      r2,[sp,#0xc]          ;2794
000160  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
000164  2800              CMP      r0,#0                 ;2794
000166  d006              BEQ      |L31.374|
000168  bf00              NOP                            ;2797
00016a  2100              MOVS     r1,#0                 ;2797
00016c  2030              MOVS     r0,#0x30              ;2797
00016e  5501              STRB     r1,[r0,r4]            ;2797
000170  bf00              NOP                            ;2797
000172  2001              MOVS     r0,#1                 ;2798
000174  e771              B        |L31.90|
                  |L31.374|
000176  4620              MOV      r0,r4                 ;2800
000178  f7fffffe          BL       I2C_BytemodeMasterEventHandle
00017c  2034              MOVS     r0,#0x34              ;2801
00017e  5d00              LDRB     r0,[r0,r4]            ;2801
000180  07c0              LSLS     r0,r0,#31             ;2801
000182  0fc0              LSRS     r0,r0,#31             ;2801
000184  2800              CMP      r0,#0                 ;2801
000186  d1e8              BNE      |L31.346|
000188  8ee0              LDRH     r0,[r4,#0x36]         ;2803
00018a  2800              CMP      r0,#0                 ;2803
00018c  d006              BEQ      |L31.412|
00018e  bf00              NOP                            ;2806
000190  2100              MOVS     r1,#0                 ;2806
000192  2030              MOVS     r0,#0x30              ;2806
000194  5501              STRB     r1,[r0,r4]            ;2806
000196  bf00              NOP                            ;2806
000198  2001              MOVS     r0,#1                 ;2807
00019a  e75e              B        |L31.90|
                  |L31.412|
00019c  4819              LDR      r0,|L31.516|
00019e  6821              LDR      r1,[r4,#0]            ;2811
0001a0  6008              STR      r0,[r1,#0]            ;2811
0001a2  2185              MOVS     r1,#0x85              ;2814
0001a4  2034              MOVS     r0,#0x34              ;2814
0001a6  5501              STRB     r1,[r0,r4]            ;2814
0001a8  2023              MOVS     r0,#0x23              ;2815
0001aa  0240              LSLS     r0,r0,#9              ;2815
0001ac  8660              STRH     r0,[r4,#0x32]         ;2815
0001ae  2001              MOVS     r0,#1                 ;2818
0001b0  4330              ORRS     r0,r0,r6              ;2818
0001b2  83a0              STRH     r0,[r4,#0x1c]         ;2818
0001b4  980a              LDR      r0,[sp,#0x28]         ;2819
0001b6  61a0              STR      r0,[r4,#0x18]         ;2819
0001b8  980b              LDR      r0,[sp,#0x2c]         ;2820
0001ba  83e0              STRH     r0,[r4,#0x1e]         ;2820
0001bc  2000              MOVS     r0,#0                 ;2821
0001be  8420              STRH     r0,[r4,#0x20]         ;2821
0001c0  4814              LDR      r0,|L31.532|
0001c2  6260              STR      r0,[r4,#0x24]         ;2822
0001c4  6820              LDR      r0,[r4,#0]            ;2825
0001c6  3020              ADDS     r0,r0,#0x20           ;2825
0001c8  7a00              LDRB     r0,[r0,#8]            ;2825
0001ca  21f8              MOVS     r1,#0xf8              ;2825
0001cc  4008              ANDS     r0,r0,r1              ;2825
0001ce  9002              STR      r0,[sp,#8]            ;2825
0001d0  4669              MOV      r1,sp                 ;2826
0001d2  7a08              LDRB     r0,[r1,#8]            ;2826
0001d4  28f8              CMP      r0,#0xf8              ;2826
0001d6  d003              BEQ      |L31.480|
0001d8  4668              MOV      r0,sp                 ;2826
0001da  7a00              LDRB     r0,[r0,#8]            ;2826
0001dc  28a0              CMP      r0,#0xa0              ;2826
0001de  d102              BNE      |L31.486|
                  |L31.480|
0001e0  2011              MOVS     r0,#0x11              ;2827
0001e2  6821              LDR      r1,[r4,#0]            ;2827
0001e4  7608              STRB     r0,[r1,#0x18]         ;2827
                  |L31.486|
0001e6  bf00              NOP                            ;2830
0001e8  2100              MOVS     r1,#0                 ;2830
0001ea  2030              MOVS     r0,#0x30              ;2830
0001ec  5501              STRB     r1,[r0,r4]            ;2830
0001ee  bf00              NOP                            ;2830
0001f0  6820              LDR      r0,[r4,#0]            ;2839
0001f2  6840              LDR      r0,[r0,#4]            ;2839
0001f4  2103              MOVS     r1,#3                 ;2839
0001f6  4308              ORRS     r0,r0,r1              ;2839
0001f8  6821              LDR      r1,[r4,#0]            ;2839
0001fa  6048              STR      r0,[r1,#4]            ;2839
0001fc  2000              MOVS     r0,#0                 ;2841
0001fe  e72c              B        |L31.90|
                  |L31.512|
000200  2002              MOVS     r0,#2                 ;2845
000202  e72a              B        |L31.90|
;;;2848   
                          ENDP

                  |L31.516|
                          DCD      0x00f80300
                  |L31.520|
                          DCD      0x0000fffe
                  |L31.524|
                          DCD      I2C_DMACplt
                  |L31.528|
                          DCD      I2C_DMAError
                  |L31.532|
                          DCD      I2C_Master_ISR_IT

                          AREA ||i.MID_I2C_Mem_Read_IT||, CODE, READONLY, ALIGN=2

                  MID_I2C_Mem_Read_IT PROC
;;;2414    */
;;;2415   MID_StatusTypeDef MID_I2C_Mem_Read_IT(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
000000  b5fe              PUSH     {r1-r7,lr}
;;;2416   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;2417       uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;2418       __IO uint8_t lEventTemp;
;;;2419       union{
;;;2420           uint8_t B[2];
;;;2421           uint16_t H;
;;;2422       }lMemAddress;
;;;2423   
;;;2424       /* Check the parameters */
;;;2425       assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
;;;2426   
;;;2427       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000e  2034              MOVS     r0,#0x34
000010  5d00              LDRB     r0,[r0,r4]
000012  2181              MOVS     r1,#0x81
000014  4008              ANDS     r0,r0,r1
000016  2880              CMP      r0,#0x80
000018  d175              BNE      |L32.262|
;;;2428       {
;;;2429           if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  07c0              LSLS     r0,r0,#31
000020  0fc0              LSRS     r0,r0,#31
000022  2101              MOVS     r1,#1
000024  4048              EORS     r0,r0,r1
000026  4048              EORS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d016              BEQ      |L32.90|
;;;2430           {
;;;2431               if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
00002c  6820              LDR      r0,[r4,#0]
00002e  6800              LDR      r0,[r0,#0]
000030  2102              MOVS     r1,#2
000032  4008              ANDS     r0,r0,r1
000034  0840              LSRS     r0,r0,#1
000036  2800              CMP      r0,#0
000038  d00f              BEQ      |L32.90|
;;;2432               {
;;;2433                   lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
00003a  6820              LDR      r0,[r4,#0]
00003c  3020              ADDS     r0,r0,#0x20
00003e  7a00              LDRB     r0,[r0,#8]
000040  21f8              MOVS     r1,#0xf8
000042  4008              ANDS     r0,r0,r1
000044  9001              STR      r0,[sp,#4]
;;;2434                   if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000046  4669              MOV      r1,sp
000048  7908              LDRB     r0,[r1,#4]
00004a  2808              CMP      r0,#8
00004c  d005              BEQ      |L32.90|
00004e  4668              MOV      r0,sp
000050  7900              LDRB     r0,[r0,#4]
000052  2810              CMP      r0,#0x10
000054  d001              BEQ      |L32.90|
;;;2435                       return MID_ERROR;
000056  2001              MOVS     r0,#1
                  |L32.88|
;;;2436               }
;;;2437           }
;;;2438   
;;;2439           /* Process Locked */
;;;2440           __MID_LOCK(mI2C);
;;;2441   
;;;2442           I2C_BUFFMODE_DISABLE(mI2C);
;;;2443   
;;;2444           if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
;;;2445           {
;;;2446               lMemAddress.H = MemAddress;
;;;2447           }
;;;2448           else
;;;2449           {
;;;2450               lMemAddress.B[0] = (uint8_t)(MemAddress >> 8);
;;;2451               lMemAddress.B[1] = (uint8_t)MemAddress; 
;;;2452           }
;;;2453   
;;;2454           /* Disable All Interrupt */
;;;2455           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;2456   
;;;2457           /* Clear I2C Flag */
;;;2458           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;2459   
;;;2460           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;2461           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;2462           mI2C->Mode = MID_I2C_MODE_MASTER_RREPEATSTART;
;;;2463   
;;;2464           /* Prepare transfer parameters */
;;;2465           mI2C->DevAddress = DevAddress & 0xFFFE;
;;;2466           mI2C->pBuffPtr = (uint8_t *)(&lMemAddress);
;;;2467           mI2C->XferSize = MemAddSize;
;;;2468           mI2C->XferCount = NULL;
;;;2469           mI2C->XferISR = NULL;
;;;2470   
;;;2471           /* Init tickstart for timeout management*/
;;;2472           tickstart = MID_GetTick();
;;;2473   
;;;2474           /* Send Bus Start */
;;;2475           lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;2476           if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;2477               __DRV_I2C_STA_1(mI2C);
;;;2478   
;;;2479           do{
;;;2480               if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, I2C_TIMEOUT_FLAG, tickstart) != MID_OK)
;;;2481               {
;;;2482                   /* Process Unlocked */
;;;2483                   __MID_UNLOCK(mI2C);
;;;2484                   return MID_ERROR;
;;;2485               }
;;;2486               I2C_BytemodeMasterEventHandle(mI2C);
;;;2487           }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;2488   
;;;2489           if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;2490           {
;;;2491               /* Process Unlocked */
;;;2492               __MID_UNLOCK(mI2C);
;;;2493               return MID_ERROR;
;;;2494           }
;;;2495   
;;;2496           /* Clear I2C Flag */
;;;2497           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;2498   
;;;2499           // mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;2500           mI2C->State = MID_I2C_STATE_BUSY_RX;
;;;2501           mI2C->Mode = MID_I2C_MODE_MASTER_STOP;
;;;2502   
;;;2503           /* Prepare transfer parameters */
;;;2504           mI2C->DevAddress = DevAddress | 0x0001;
;;;2505           mI2C->pBuffPtr = pData;
;;;2506           mI2C->XferSize = Size;
;;;2507           mI2C->XferCount = NULL;
;;;2508           mI2C->XferISR = I2C_Master_ISR_IT;
;;;2509   
;;;2510           /* Send Bus Start */
;;;2511           lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;2512           if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;2513               __DRV_I2C_STA_1(mI2C);
;;;2514   
;;;2515           /* Process Unlocked */
;;;2516           __MID_UNLOCK(mI2C);
;;;2517   
;;;2518           /* Note : The I2C interrupts must be enabled after unlocking current process
;;;2519                     to avoid the risk of I2C interrupt handle execution before current
;;;2520                     process unlock */
;;;2521   
;;;2522           /* Enable IEA, EVENT, interrupt */
;;;2523           /* possible to enable all of these */
;;;2524           /* I2C_IT_IEA | I2C_IT_EVENT */
;;;2525           __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;2526   
;;;2527           return MID_OK;
;;;2528       }
;;;2529       else
;;;2530       {
;;;2531           return MID_BUSY;
;;;2532       }
;;;2533   }
000058  bdfe              POP      {r1-r7,pc}
                  |L32.90|
00005a  bf00              NOP                            ;2440
00005c  2030              MOVS     r0,#0x30              ;2440
00005e  5d00              LDRB     r0,[r0,r4]            ;2440
000060  2801              CMP      r0,#1                 ;2440
000062  d101              BNE      |L32.104|
000064  2002              MOVS     r0,#2                 ;2440
000066  e7f7              B        |L32.88|
                  |L32.104|
000068  2101              MOVS     r1,#1                 ;2440
00006a  2030              MOVS     r0,#0x30              ;2440
00006c  5501              STRB     r1,[r0,r4]            ;2440
00006e  bf00              NOP                            ;2440
000070  6820              LDR      r0,[r4,#0]            ;2442
000072  7c00              LDRB     r0,[r0,#0x10]         ;2442
000074  2140              MOVS     r1,#0x40              ;2442
000076  4388              BICS     r0,r0,r1              ;2442
000078  6821              LDR      r1,[r4,#0]            ;2442
00007a  7408              STRB     r0,[r1,#0x10]         ;2442
00007c  2f01              CMP      r7,#1                 ;2444
00007e  d101              BNE      |L32.132|
000080  9500              STR      r5,[sp,#0]            ;2446
000082  e003              B        |L32.140|
                  |L32.132|
000084  1229              ASRS     r1,r5,#8              ;2450
000086  4668              MOV      r0,sp                 ;2450
000088  7001              STRB     r1,[r0,#0]            ;2450
00008a  7045              STRB     r5,[r0,#1]            ;2451
                  |L32.140|
00008c  6820              LDR      r0,[r4,#0]            ;2455
00008e  6840              LDR      r0,[r0,#4]            ;2455
000090  210e              MOVS     r1,#0xe               ;2455
000092  4388              BICS     r0,r0,r1              ;2455
000094  6821              LDR      r1,[r4,#0]            ;2455
000096  6048              STR      r0,[r1,#4]            ;2455
000098  483f              LDR      r0,|L32.408|
00009a  6821              LDR      r1,[r4,#0]            ;2458
00009c  6008              STR      r0,[r1,#0]            ;2458
00009e  2000              MOVS     r0,#0                 ;2460
0000a0  86e0              STRH     r0,[r4,#0x36]         ;2460
0000a2  2183              MOVS     r1,#0x83              ;2461
0000a4  2034              MOVS     r0,#0x34              ;2461
0000a6  5501              STRB     r1,[r0,r4]            ;2461
0000a8  2005              MOVS     r0,#5                 ;2462
0000aa  0200              LSLS     r0,r0,#8              ;2462
0000ac  8660              STRH     r0,[r4,#0x32]         ;2462
0000ae  483b              LDR      r0,|L32.412|
0000b0  4030              ANDS     r0,r0,r6              ;2465
0000b2  83a0              STRH     r0,[r4,#0x1c]         ;2465
0000b4  4668              MOV      r0,sp                 ;2466
0000b6  61a0              STR      r0,[r4,#0x18]         ;2466
0000b8  83e7              STRH     r7,[r4,#0x1e]         ;2467
0000ba  2000              MOVS     r0,#0                 ;2468
0000bc  8420              STRH     r0,[r4,#0x20]         ;2468
0000be  6260              STR      r0,[r4,#0x24]         ;2469
0000c0  f7fffffe          BL       MID_GetTick
0000c4  9002              STR      r0,[sp,#8]            ;2472
0000c6  6820              LDR      r0,[r4,#0]            ;2475
0000c8  3020              ADDS     r0,r0,#0x20           ;2475
0000ca  7a00              LDRB     r0,[r0,#8]            ;2475
0000cc  21f8              MOVS     r1,#0xf8              ;2475
0000ce  4008              ANDS     r0,r0,r1              ;2475
0000d0  9001              STR      r0,[sp,#4]            ;2475
0000d2  4669              MOV      r1,sp                 ;2476
0000d4  7908              LDRB     r0,[r1,#4]            ;2476
0000d6  28f8              CMP      r0,#0xf8              ;2476
0000d8  d003              BEQ      |L32.226|
0000da  4668              MOV      r0,sp                 ;2476
0000dc  7900              LDRB     r0,[r0,#4]            ;2476
0000de  28a0              CMP      r0,#0xa0              ;2476
0000e0  d102              BNE      |L32.232|
                  |L32.226|
0000e2  2011              MOVS     r0,#0x11              ;2477
0000e4  6821              LDR      r1,[r4,#0]            ;2477
0000e6  7608              STRB     r0,[r1,#0x18]         ;2477
                  |L32.232|
0000e8  bf00              NOP                            ;2479
                  |L32.234|
0000ea  2119              MOVS     r1,#0x19              ;2480
0000ec  4620              MOV      r0,r4                 ;2480
0000ee  9a02              LDR      r2,[sp,#8]            ;2480
0000f0  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
0000f4  2800              CMP      r0,#0                 ;2480
0000f6  d007              BEQ      |L32.264|
0000f8  bf00              NOP                            ;2483
0000fa  2100              MOVS     r1,#0                 ;2483
0000fc  2030              MOVS     r0,#0x30              ;2483
0000fe  5501              STRB     r1,[r0,r4]            ;2483
000100  bf00              NOP                            ;2483
000102  2001              MOVS     r0,#1                 ;2484
000104  e7a8              B        |L32.88|
                  |L32.262|
000106  e044              B        |L32.402|
                  |L32.264|
000108  4620              MOV      r0,r4                 ;2486
00010a  f7fffffe          BL       I2C_BytemodeMasterEventHandle
00010e  2034              MOVS     r0,#0x34              ;2487
000110  5d00              LDRB     r0,[r0,r4]            ;2487
000112  07c0              LSLS     r0,r0,#31             ;2487
000114  0fc0              LSRS     r0,r0,#31             ;2487
000116  2800              CMP      r0,#0                 ;2487
000118  d1e7              BNE      |L32.234|
00011a  8ee0              LDRH     r0,[r4,#0x36]         ;2489
00011c  2800              CMP      r0,#0                 ;2489
00011e  d006              BEQ      |L32.302|
000120  bf00              NOP                            ;2492
000122  2100              MOVS     r1,#0                 ;2492
000124  2030              MOVS     r0,#0x30              ;2492
000126  5501              STRB     r1,[r0,r4]            ;2492
000128  bf00              NOP                            ;2492
00012a  2001              MOVS     r0,#1                 ;2493
00012c  e794              B        |L32.88|
                  |L32.302|
00012e  481a              LDR      r0,|L32.408|
000130  6821              LDR      r1,[r4,#0]            ;2497
000132  6008              STR      r0,[r1,#0]            ;2497
000134  2185              MOVS     r1,#0x85              ;2500
000136  2034              MOVS     r0,#0x34              ;2500
000138  5501              STRB     r1,[r0,r4]            ;2500
00013a  2003              MOVS     r0,#3                 ;2501
00013c  0240              LSLS     r0,r0,#9              ;2501
00013e  8660              STRH     r0,[r4,#0x32]         ;2501
000140  2001              MOVS     r0,#1                 ;2504
000142  4330              ORRS     r0,r0,r6              ;2504
000144  83a0              STRH     r0,[r4,#0x1c]         ;2504
000146  9808              LDR      r0,[sp,#0x20]         ;2505
000148  61a0              STR      r0,[r4,#0x18]         ;2505
00014a  9809              LDR      r0,[sp,#0x24]         ;2506
00014c  83e0              STRH     r0,[r4,#0x1e]         ;2506
00014e  2000              MOVS     r0,#0                 ;2507
000150  8420              STRH     r0,[r4,#0x20]         ;2507
000152  4813              LDR      r0,|L32.416|
000154  6260              STR      r0,[r4,#0x24]         ;2508
000156  6820              LDR      r0,[r4,#0]            ;2511
000158  3020              ADDS     r0,r0,#0x20           ;2511
00015a  7a00              LDRB     r0,[r0,#8]            ;2511
00015c  21f8              MOVS     r1,#0xf8              ;2511
00015e  4008              ANDS     r0,r0,r1              ;2511
000160  9001              STR      r0,[sp,#4]            ;2511
000162  4669              MOV      r1,sp                 ;2512
000164  7908              LDRB     r0,[r1,#4]            ;2512
000166  28f8              CMP      r0,#0xf8              ;2512
000168  d003              BEQ      |L32.370|
00016a  4668              MOV      r0,sp                 ;2512
00016c  7900              LDRB     r0,[r0,#4]            ;2512
00016e  28a0              CMP      r0,#0xa0              ;2512
000170  d102              BNE      |L32.376|
                  |L32.370|
000172  2011              MOVS     r0,#0x11              ;2513
000174  6821              LDR      r1,[r4,#0]            ;2513
000176  7608              STRB     r0,[r1,#0x18]         ;2513
                  |L32.376|
000178  bf00              NOP                            ;2516
00017a  2100              MOVS     r1,#0                 ;2516
00017c  2030              MOVS     r0,#0x30              ;2516
00017e  5501              STRB     r1,[r0,r4]            ;2516
000180  bf00              NOP                            ;2516
000182  6820              LDR      r0,[r4,#0]            ;2525
000184  6840              LDR      r0,[r0,#4]            ;2525
000186  2103              MOVS     r1,#3                 ;2525
000188  4308              ORRS     r0,r0,r1              ;2525
00018a  6821              LDR      r1,[r4,#0]            ;2525
00018c  6048              STR      r0,[r1,#4]            ;2525
00018e  2000              MOVS     r0,#0                 ;2527
000190  e762              B        |L32.88|
                  |L32.402|
000192  2002              MOVS     r0,#2                 ;2531
000194  e760              B        |L32.88|
;;;2534   
                          ENDP

000196  0000              DCW      0x0000
                  |L32.408|
                          DCD      0x00f80300
                  |L32.412|
                          DCD      0x0000fffe
                  |L32.416|
                          DCD      I2C_Master_ISR_IT

                          AREA ||i.MID_I2C_Mem_Write||, CODE, READONLY, ALIGN=2

                  MID_I2C_Mem_Write PROC
;;;2017    */
;;;2018   MID_StatusTypeDef MID_I2C_Mem_Write(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  b5fe              PUSH     {r1-r7,lr}
;;;2019   {
000002  4604              MOV      r4,r0
000004  460f              MOV      r7,r1
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
;;;2020       uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;2021       __IO uint8_t lEventTemp;
;;;2022       union{
;;;2023           uint8_t B[2];
;;;2024           uint16_t H;
;;;2025       }lMemAddress;
;;;2026   
;;;2027       /* Check the parameters */
;;;2028       assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
;;;2029   
;;;2030       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000e  2034              MOVS     r0,#0x34
000010  5d00              LDRB     r0,[r0,r4]
000012  2181              MOVS     r1,#0x81
000014  4008              ANDS     r0,r0,r1
000016  2880              CMP      r0,#0x80
000018  d174              BNE      |L33.260|
;;;2031       {
;;;2032           if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  07c0              LSLS     r0,r0,#31
000020  0fc0              LSRS     r0,r0,#31
000022  2101              MOVS     r1,#1
000024  4048              EORS     r0,r0,r1
000026  4048              EORS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d016              BEQ      |L33.90|
;;;2033           {
;;;2034               if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
00002c  6820              LDR      r0,[r4,#0]
00002e  6800              LDR      r0,[r0,#0]
000030  2102              MOVS     r1,#2
000032  4008              ANDS     r0,r0,r1
000034  0840              LSRS     r0,r0,#1
000036  2800              CMP      r0,#0
000038  d00f              BEQ      |L33.90|
;;;2035               {
;;;2036                   lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
00003a  6820              LDR      r0,[r4,#0]
00003c  3020              ADDS     r0,r0,#0x20
00003e  7a00              LDRB     r0,[r0,#8]
000040  21f8              MOVS     r1,#0xf8
000042  4008              ANDS     r0,r0,r1
000044  9001              STR      r0,[sp,#4]
;;;2037                   if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000046  4669              MOV      r1,sp
000048  7908              LDRB     r0,[r1,#4]
00004a  2808              CMP      r0,#8
00004c  d005              BEQ      |L33.90|
00004e  4668              MOV      r0,sp
000050  7900              LDRB     r0,[r0,#4]
000052  2810              CMP      r0,#0x10
000054  d001              BEQ      |L33.90|
;;;2038                       return MID_ERROR;
000056  2001              MOVS     r0,#1
                  |L33.88|
;;;2039               }
;;;2040           }
;;;2041   
;;;2042           /* Process Locked */
;;;2043           __MID_LOCK(mI2C);
;;;2044   
;;;2045           I2C_BUFFMODE_DISABLE(mI2C);
;;;2046   
;;;2047           if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
;;;2048           {
;;;2049               lMemAddress.H = MemAddress;
;;;2050           }
;;;2051           else
;;;2052           {
;;;2053               lMemAddress.B[0] = (uint8_t)(MemAddress >> 8);
;;;2054               lMemAddress.B[1] = (uint8_t)MemAddress; 
;;;2055           }
;;;2056   
;;;2057           /* Disable All Interrupt */
;;;2058           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;2059   
;;;2060           /* Clear I2C Flag */
;;;2061           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;2062   
;;;2063           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;2064           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;2065           mI2C->Mode = MID_I2C_MODE_MASTER_NONE;
;;;2066   
;;;2067           /* Prepare transfer parameters */
;;;2068           mI2C->DevAddress = DevAddress & 0xFFFE;
;;;2069           mI2C->pBuffPtr = (uint8_t *)(&lMemAddress);
;;;2070           mI2C->XferSize = MemAddSize;
;;;2071           mI2C->XferCount = NULL;
;;;2072           mI2C->XferISR = NULL;
;;;2073   
;;;2074           /* Init tickstart for timeout management*/
;;;2075           tickstart = MID_GetTick();
;;;2076   
;;;2077           /* Send Bus Start */
;;;2078           lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;2079           if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;2080               __DRV_I2C_STA_1(mI2C);
;;;2081   
;;;2082           do{
;;;2083               if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, Timeout, tickstart) != MID_OK)
;;;2084               {
;;;2085                   /* Process Unlocked */
;;;2086                   __MID_UNLOCK(mI2C);
;;;2087                   return MID_ERROR;
;;;2088               }
;;;2089               I2C_BytemodeMasterEventHandle(mI2C);
;;;2090           }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;2091   
;;;2092           if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;2093           {
;;;2094               /* Process Unlocked */
;;;2095               __MID_UNLOCK(mI2C);
;;;2096               return MID_ERROR;
;;;2097           }
;;;2098   
;;;2099           /* Clear I2C Flag */
;;;2100           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;2101   
;;;2102           // mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;2103           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;2104           mI2C->Mode = MID_I2C_MODE_MASTER_STOP;
;;;2105   
;;;2106           /* Prepare transfer parameters */
;;;2107           mI2C->pBuffPtr = pData;
;;;2108           mI2C->XferSize = Size;
;;;2109           mI2C->XferCount = NULL;
;;;2110           mI2C->XferISR = NULL;
;;;2111   
;;;2112           do{
;;;2113               if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, Timeout, tickstart) != MID_OK)
;;;2114               {
;;;2115                   /* Process Unlocked */
;;;2116                   __MID_UNLOCK(mI2C);
;;;2117                   return MID_ERROR;
;;;2118               }
;;;2119               I2C_BytemodeMasterEventHandle(mI2C);
;;;2120           }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;2121   
;;;2122           mI2C->State = MID_I2C_STATE_READY;
;;;2123           mI2C->Mode  = MID_I2C_MODE_NONE;
;;;2124   
;;;2125           /* Process Unlocked */
;;;2126           __MID_UNLOCK(mI2C);
;;;2127   
;;;2128           if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;2129               return MID_ERROR;
;;;2130           else
;;;2131               return MID_OK;
;;;2132       }
;;;2133       else
;;;2134       {
;;;2135           return MID_BUSY;
;;;2136       }
;;;2137   }
000058  bdfe              POP      {r1-r7,pc}
                  |L33.90|
00005a  bf00              NOP                            ;2043
00005c  2030              MOVS     r0,#0x30              ;2043
00005e  5d00              LDRB     r0,[r0,r4]            ;2043
000060  2801              CMP      r0,#1                 ;2043
000062  d101              BNE      |L33.104|
000064  2002              MOVS     r0,#2                 ;2043
000066  e7f7              B        |L33.88|
                  |L33.104|
000068  2101              MOVS     r1,#1                 ;2043
00006a  2030              MOVS     r0,#0x30              ;2043
00006c  5501              STRB     r1,[r0,r4]            ;2043
00006e  bf00              NOP                            ;2043
000070  6820              LDR      r0,[r4,#0]            ;2045
000072  7c00              LDRB     r0,[r0,#0x10]         ;2045
000074  2140              MOVS     r1,#0x40              ;2045
000076  4388              BICS     r0,r0,r1              ;2045
000078  6821              LDR      r1,[r4,#0]            ;2045
00007a  7408              STRB     r0,[r1,#0x10]         ;2045
00007c  2e01              CMP      r6,#1                 ;2047
00007e  d101              BNE      |L33.132|
000080  9500              STR      r5,[sp,#0]            ;2049
000082  e003              B        |L33.140|
                  |L33.132|
000084  1229              ASRS     r1,r5,#8              ;2053
000086  4668              MOV      r0,sp                 ;2053
000088  7001              STRB     r1,[r0,#0]            ;2053
00008a  7045              STRB     r5,[r0,#1]            ;2054
                  |L33.140|
00008c  6820              LDR      r0,[r4,#0]            ;2058
00008e  6840              LDR      r0,[r0,#4]            ;2058
000090  210e              MOVS     r1,#0xe               ;2058
000092  4388              BICS     r0,r0,r1              ;2058
000094  6821              LDR      r1,[r4,#0]            ;2058
000096  6048              STR      r0,[r1,#4]            ;2058
000098  4842              LDR      r0,|L33.420|
00009a  6821              LDR      r1,[r4,#0]            ;2061
00009c  6008              STR      r0,[r1,#0]            ;2061
00009e  2000              MOVS     r0,#0                 ;2063
0000a0  86e0              STRH     r0,[r4,#0x36]         ;2063
0000a2  2183              MOVS     r1,#0x83              ;2064
0000a4  2034              MOVS     r0,#0x34              ;2064
0000a6  5501              STRB     r1,[r0,r4]            ;2064
0000a8  2000              MOVS     r0,#0                 ;2065
0000aa  8660              STRH     r0,[r4,#0x32]         ;2065
0000ac  483e              LDR      r0,|L33.424|
0000ae  4038              ANDS     r0,r0,r7              ;2068
0000b0  83a0              STRH     r0,[r4,#0x1c]         ;2068
0000b2  4668              MOV      r0,sp                 ;2069
0000b4  61a0              STR      r0,[r4,#0x18]         ;2069
0000b6  83e6              STRH     r6,[r4,#0x1e]         ;2070
0000b8  2000              MOVS     r0,#0                 ;2071
0000ba  8420              STRH     r0,[r4,#0x20]         ;2071
0000bc  6260              STR      r0,[r4,#0x24]         ;2072
0000be  f7fffffe          BL       MID_GetTick
0000c2  9002              STR      r0,[sp,#8]            ;2075
0000c4  6820              LDR      r0,[r4,#0]            ;2078
0000c6  3020              ADDS     r0,r0,#0x20           ;2078
0000c8  7a00              LDRB     r0,[r0,#8]            ;2078
0000ca  21f8              MOVS     r1,#0xf8              ;2078
0000cc  4008              ANDS     r0,r0,r1              ;2078
0000ce  9001              STR      r0,[sp,#4]            ;2078
0000d0  4669              MOV      r1,sp                 ;2079
0000d2  7908              LDRB     r0,[r1,#4]            ;2079
0000d4  28f8              CMP      r0,#0xf8              ;2079
0000d6  d003              BEQ      |L33.224|
0000d8  4668              MOV      r0,sp                 ;2079
0000da  7900              LDRB     r0,[r0,#4]            ;2079
0000dc  28a0              CMP      r0,#0xa0              ;2079
0000de  d102              BNE      |L33.230|
                  |L33.224|
0000e0  2011              MOVS     r0,#0x11              ;2080
0000e2  6821              LDR      r1,[r4,#0]            ;2080
0000e4  7608              STRB     r0,[r1,#0x18]         ;2080
                  |L33.230|
0000e6  bf00              NOP                            ;2082
                  |L33.232|
0000e8  4620              MOV      r0,r4                 ;2083
0000ea  9a02              LDR      r2,[sp,#8]            ;2083
0000ec  990a              LDR      r1,[sp,#0x28]         ;2083
0000ee  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
0000f2  2800              CMP      r0,#0                 ;2083
0000f4  d007              BEQ      |L33.262|
0000f6  bf00              NOP                            ;2086
0000f8  2100              MOVS     r1,#0                 ;2086
0000fa  2030              MOVS     r0,#0x30              ;2086
0000fc  5501              STRB     r1,[r0,r4]            ;2086
0000fe  bf00              NOP                            ;2086
000100  2001              MOVS     r0,#1                 ;2087
000102  e7a9              B        |L33.88|
                  |L33.260|
000104  e04b              B        |L33.414|
                  |L33.262|
000106  4620              MOV      r0,r4                 ;2089
000108  f7fffffe          BL       I2C_BytemodeMasterEventHandle
00010c  2034              MOVS     r0,#0x34              ;2090
00010e  5d00              LDRB     r0,[r0,r4]            ;2090
000110  07c0              LSLS     r0,r0,#31             ;2090
000112  0fc0              LSRS     r0,r0,#31             ;2090
000114  2800              CMP      r0,#0                 ;2090
000116  d1e7              BNE      |L33.232|
000118  8ee0              LDRH     r0,[r4,#0x36]         ;2092
00011a  2800              CMP      r0,#0                 ;2092
00011c  d006              BEQ      |L33.300|
00011e  bf00              NOP                            ;2095
000120  2100              MOVS     r1,#0                 ;2095
000122  2030              MOVS     r0,#0x30              ;2095
000124  5501              STRB     r1,[r0,r4]            ;2095
000126  bf00              NOP                            ;2095
000128  2001              MOVS     r0,#1                 ;2096
00012a  e795              B        |L33.88|
                  |L33.300|
00012c  481d              LDR      r0,|L33.420|
00012e  6821              LDR      r1,[r4,#0]            ;2100
000130  6008              STR      r0,[r1,#0]            ;2100
000132  2183              MOVS     r1,#0x83              ;2103
000134  2034              MOVS     r0,#0x34              ;2103
000136  5501              STRB     r1,[r0,r4]            ;2103
000138  2003              MOVS     r0,#3                 ;2104
00013a  0240              LSLS     r0,r0,#9              ;2104
00013c  8660              STRH     r0,[r4,#0x32]         ;2104
00013e  9808              LDR      r0,[sp,#0x20]         ;2107
000140  61a0              STR      r0,[r4,#0x18]         ;2107
000142  9809              LDR      r0,[sp,#0x24]         ;2108
000144  83e0              STRH     r0,[r4,#0x1e]         ;2108
000146  2000              MOVS     r0,#0                 ;2109
000148  8420              STRH     r0,[r4,#0x20]         ;2109
00014a  6260              STR      r0,[r4,#0x24]         ;2110
00014c  bf00              NOP                            ;2112
                  |L33.334|
00014e  4620              MOV      r0,r4                 ;2113
000150  9a02              LDR      r2,[sp,#8]            ;2113
000152  990a              LDR      r1,[sp,#0x28]         ;2113
000154  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
000158  2800              CMP      r0,#0                 ;2113
00015a  d006              BEQ      |L33.362|
00015c  bf00              NOP                            ;2116
00015e  2100              MOVS     r1,#0                 ;2116
000160  2030              MOVS     r0,#0x30              ;2116
000162  5501              STRB     r1,[r0,r4]            ;2116
000164  bf00              NOP                            ;2116
000166  2001              MOVS     r0,#1                 ;2117
000168  e776              B        |L33.88|
                  |L33.362|
00016a  4620              MOV      r0,r4                 ;2119
00016c  f7fffffe          BL       I2C_BytemodeMasterEventHandle
000170  2034              MOVS     r0,#0x34              ;2120
000172  5d00              LDRB     r0,[r0,r4]            ;2120
000174  07c0              LSLS     r0,r0,#31             ;2120
000176  0fc0              LSRS     r0,r0,#31             ;2120
000178  2800              CMP      r0,#0                 ;2120
00017a  d1e8              BNE      |L33.334|
00017c  2180              MOVS     r1,#0x80              ;2122
00017e  2034              MOVS     r0,#0x34              ;2122
000180  5501              STRB     r1,[r0,r4]            ;2122
000182  2000              MOVS     r0,#0                 ;2123
000184  8660              STRH     r0,[r4,#0x32]         ;2123
000186  bf00              NOP                            ;2126
000188  2100              MOVS     r1,#0                 ;2126
00018a  2030              MOVS     r0,#0x30              ;2126
00018c  5501              STRB     r1,[r0,r4]            ;2126
00018e  bf00              NOP                            ;2126
000190  8ee0              LDRH     r0,[r4,#0x36]         ;2128
000192  2800              CMP      r0,#0                 ;2128
000194  d001              BEQ      |L33.410|
000196  2001              MOVS     r0,#1                 ;2129
000198  e75e              B        |L33.88|
                  |L33.410|
00019a  2000              MOVS     r0,#0                 ;2131
00019c  e75c              B        |L33.88|
                  |L33.414|
00019e  2002              MOVS     r0,#2                 ;2135
0001a0  e75a              B        |L33.88|
;;;2138   
                          ENDP

0001a2  0000              DCW      0x0000
                  |L33.420|
                          DCD      0x00f80300
                  |L33.424|
                          DCD      0x0000fffe

                          AREA ||i.MID_I2C_Mem_Write_DMA||, CODE, READONLY, ALIGN=2

                  MID_I2C_Mem_Write_DMA PROC
;;;2547    */
;;;2548   MID_StatusTypeDef MID_I2C_Mem_Write_DMA(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
000000  b5ff              PUSH     {r0-r7,lr}
;;;2549   {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
;;;2550       MID_StatusTypeDef lDmaXferStatus;
;;;2551       uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9004              STR      r0,[sp,#0x10]
;;;2552       __IO uint8_t lEventTemp;
;;;2553       union{
;;;2554           uint8_t B[2];
;;;2555           uint16_t H;
;;;2556       }lMemAddress;
;;;2557   
;;;2558       /* Check the parameters */
;;;2559       assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
;;;2560   
;;;2561       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000e  2034              MOVS     r0,#0x34
000010  5d00              LDRB     r0,[r0,r4]
000012  2181              MOVS     r1,#0x81
000014  4008              ANDS     r0,r0,r1
000016  2880              CMP      r0,#0x80
000018  d17e              BNE      |L34.280|
;;;2562       {
;;;2563           if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  07c0              LSLS     r0,r0,#31
000020  0fc0              LSRS     r0,r0,#31
000022  2101              MOVS     r1,#1
000024  4048              EORS     r0,r0,r1
000026  4048              EORS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d017              BEQ      |L34.92|
;;;2564           {
;;;2565               if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
00002c  6820              LDR      r0,[r4,#0]
00002e  6800              LDR      r0,[r0,#0]
000030  2102              MOVS     r1,#2
000032  4008              ANDS     r0,r0,r1
000034  0840              LSRS     r0,r0,#1
000036  2800              CMP      r0,#0
000038  d010              BEQ      |L34.92|
;;;2566               {
;;;2567                   lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
00003a  6820              LDR      r0,[r4,#0]
00003c  3020              ADDS     r0,r0,#0x20
00003e  7a00              LDRB     r0,[r0,#8]
000040  21f8              MOVS     r1,#0xf8
000042  4008              ANDS     r0,r0,r1
000044  9003              STR      r0,[sp,#0xc]
;;;2568                   if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000046  4669              MOV      r1,sp
000048  7b08              LDRB     r0,[r1,#0xc]
00004a  2808              CMP      r0,#8
00004c  d006              BEQ      |L34.92|
00004e  4668              MOV      r0,sp
000050  7b00              LDRB     r0,[r0,#0xc]
000052  2810              CMP      r0,#0x10
000054  d002              BEQ      |L34.92|
;;;2569                       return MID_ERROR;
000056  2001              MOVS     r0,#1
                  |L34.88|
;;;2570               }
;;;2571           }
;;;2572   
;;;2573           if(mI2C->hdmatx == NULL)
;;;2574           {
;;;2575               mI2C->State = MID_I2C_STATE_READY;
;;;2576               mI2C->Mode = MID_I2C_MODE_NONE;
;;;2577               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;2578               return MID_ERROR;
;;;2579           }
;;;2580   
;;;2581           /* Process Locked */
;;;2582           __MID_LOCK(mI2C);
;;;2583   
;;;2584           I2C_BUFFMODE_DISABLE(mI2C);
;;;2585   
;;;2586           if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
;;;2587           {
;;;2588               lMemAddress.H = MemAddress;
;;;2589           }
;;;2590           else
;;;2591           {
;;;2592               lMemAddress.B[0] = (uint8_t)(MemAddress >> 8);
;;;2593               lMemAddress.B[1] = (uint8_t)MemAddress; 
;;;2594           }
;;;2595   
;;;2596           /* Disable All Interrupt */
;;;2597           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;2598   
;;;2599           /* Clear I2C Flag */
;;;2600           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;2601   
;;;2602           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;2603           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;2604           mI2C->Mode = MID_I2C_MODE_MASTER_NONE;
;;;2605   
;;;2606           /* Prepare transfer parameters */
;;;2607           mI2C->DevAddress = DevAddress & 0xFFFE;
;;;2608           mI2C->pBuffPtr = (uint8_t *)(&lMemAddress);
;;;2609           mI2C->XferSize = MemAddSize;
;;;2610           mI2C->XferCount = NULL;
;;;2611           mI2C->XferISR = NULL;
;;;2612   
;;;2613           mI2C->hdmatx->XferCpltCallback = I2C_DMACplt;
;;;2614           mI2C->hdmatx->XferErrorCallback = I2C_DMAError;
;;;2615           mI2C->hdmatx->XferAbortCallback = NULL;
;;;2616           mI2C->hdmatx->XferHalfCpltCallback = NULL;
;;;2617           lDmaXferStatus = MID_DMA_Start_IT(mI2C->hdmatx, (uint32_t)pData, 0, (uint32_t)Size);
;;;2618   
;;;2619           if(lDmaXferStatus != MID_OK)
;;;2620           {
;;;2621               mI2C->State = MID_I2C_STATE_READY;
;;;2622               mI2C->Mode = MID_I2C_MODE_NONE;
;;;2623   
;;;2624               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;2625               __MID_UNLOCK(mI2C);
;;;2626               return MID_ERROR;
;;;2627           }
;;;2628   
;;;2629           /* Init tickstart for timeout management*/
;;;2630           tickstart = MID_GetTick();
;;;2631   
;;;2632           /* Send Bus Start */
;;;2633           lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;2634           if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;2635               __DRV_I2C_STA_1(mI2C);
;;;2636   
;;;2637           do{
;;;2638               if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, I2C_TIMEOUT_FLAG, tickstart) != MID_OK)
;;;2639               {
;;;2640                   /* Process Unlocked */
;;;2641                   __MID_UNLOCK(mI2C);
;;;2642                   return MID_ERROR;
;;;2643               }
;;;2644               I2C_BytemodeMasterEventHandle(mI2C);
;;;2645           }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;2646   
;;;2647           if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;2648           {
;;;2649               /* Process Unlocked */
;;;2650               __MID_UNLOCK(mI2C);
;;;2651               return MID_ERROR;
;;;2652           }
;;;2653   
;;;2654           /* Clear I2C Flag */
;;;2655           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;2656   
;;;2657           // mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;2658           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;2659           mI2C->Mode = MID_I2C_MODE_MASTER_TRANSMIT_DMA_STOP;
;;;2660   
;;;2661           /* Prepare transfer parameters */
;;;2662           mI2C->pBuffPtr = pData;
;;;2663           mI2C->XferSize = Size;
;;;2664           mI2C->XferCount = NULL;
;;;2665           mI2C->XferISR = I2C_Master_ISR_IT;
;;;2666   
;;;2667           /* Process Unlocked */
;;;2668           __MID_UNLOCK(mI2C);
;;;2669   
;;;2670           /* Note : The I2C interrupts must be enabled after unlocking current process
;;;2671                     to avoid the risk of I2C interrupt handle execution before current
;;;2672                     process unlock */
;;;2673   
;;;2674           __DRV_I2C_PSTA_PSTO_PAA_000(mI2C);
;;;2675           mI2C->Instance->CR0.W |= I2C_CR0_DMA_TXEN_enable_w;
;;;2676           while((mI2C->Instance->STA2.B[1] & I2C_STA2_EVENTF2_mask_b1) != 0);
;;;2677   
;;;2678           /* Enable IEA, EVENT, interrupt */
;;;2679           /* possible to enable all of these */
;;;2680           /* I2C_IT_IEA | I2C_IT_EVENT */
;;;2681           __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;2682   
;;;2683           return MID_OK;
;;;2684       }
;;;2685       else
;;;2686       {
;;;2687           return MID_BUSY;
;;;2688       }
;;;2689   }
000058  b009              ADD      sp,sp,#0x24
00005a  bdf0              POP      {r4-r7,pc}
                  |L34.92|
00005c  6aa0              LDR      r0,[r4,#0x28]         ;2573
00005e  2800              CMP      r0,#0                 ;2573
000060  d10a              BNE      |L34.120|
000062  2180              MOVS     r1,#0x80              ;2575
000064  2034              MOVS     r0,#0x34              ;2575
000066  5501              STRB     r1,[r0,r4]            ;2575
000068  2000              MOVS     r0,#0                 ;2576
00006a  8660              STRH     r0,[r4,#0x32]         ;2576
00006c  8ee0              LDRH     r0,[r4,#0x36]         ;2577
00006e  2140              MOVS     r1,#0x40              ;2577
000070  4308              ORRS     r0,r0,r1              ;2577
000072  86e0              STRH     r0,[r4,#0x36]         ;2577
000074  2001              MOVS     r0,#1                 ;2578
000076  e7ef              B        |L34.88|
                  |L34.120|
000078  bf00              NOP                            ;2582
00007a  2030              MOVS     r0,#0x30              ;2582
00007c  5d00              LDRB     r0,[r0,r4]            ;2582
00007e  2801              CMP      r0,#1                 ;2582
000080  d101              BNE      |L34.134|
000082  2002              MOVS     r0,#2                 ;2582
000084  e7e8              B        |L34.88|
                  |L34.134|
000086  2101              MOVS     r1,#1                 ;2582
000088  2030              MOVS     r0,#0x30              ;2582
00008a  5501              STRB     r1,[r0,r4]            ;2582
00008c  bf00              NOP                            ;2582
00008e  6820              LDR      r0,[r4,#0]            ;2584
000090  7c00              LDRB     r0,[r0,#0x10]         ;2584
000092  2140              MOVS     r1,#0x40              ;2584
000094  4388              BICS     r0,r0,r1              ;2584
000096  6821              LDR      r1,[r4,#0]            ;2584
000098  7408              STRB     r0,[r1,#0x10]         ;2584
00009a  2e01              CMP      r6,#1                 ;2586
00009c  d101              BNE      |L34.162|
00009e  9502              STR      r5,[sp,#8]            ;2588
0000a0  e003              B        |L34.170|
                  |L34.162|
0000a2  1229              ASRS     r1,r5,#8              ;2592
0000a4  4668              MOV      r0,sp                 ;2592
0000a6  7201              STRB     r1,[r0,#8]            ;2592
0000a8  7245              STRB     r5,[r0,#9]            ;2593
                  |L34.170|
0000aa  6820              LDR      r0,[r4,#0]            ;2597
0000ac  6840              LDR      r0,[r0,#4]            ;2597
0000ae  210e              MOVS     r1,#0xe               ;2597
0000b0  4388              BICS     r0,r0,r1              ;2597
0000b2  6821              LDR      r1,[r4,#0]            ;2597
0000b4  6048              STR      r0,[r1,#4]            ;2597
0000b6  4851              LDR      r0,|L34.508|
0000b8  6821              LDR      r1,[r4,#0]            ;2600
0000ba  6008              STR      r0,[r1,#0]            ;2600
0000bc  2000              MOVS     r0,#0                 ;2602
0000be  86e0              STRH     r0,[r4,#0x36]         ;2602
0000c0  2183              MOVS     r1,#0x83              ;2603
0000c2  2034              MOVS     r0,#0x34              ;2603
0000c4  5501              STRB     r1,[r0,r4]            ;2603
0000c6  2000              MOVS     r0,#0                 ;2604
0000c8  8660              STRH     r0,[r4,#0x32]         ;2604
0000ca  494d              LDR      r1,|L34.512|
0000cc  9806              LDR      r0,[sp,#0x18]         ;2607
0000ce  4008              ANDS     r0,r0,r1              ;2607
0000d0  83a0              STRH     r0,[r4,#0x1c]         ;2607
0000d2  a802              ADD      r0,sp,#8              ;2608
0000d4  61a0              STR      r0,[r4,#0x18]         ;2608
0000d6  83e6              STRH     r6,[r4,#0x1e]         ;2609
0000d8  2000              MOVS     r0,#0                 ;2610
0000da  8420              STRH     r0,[r4,#0x20]         ;2610
0000dc  6260              STR      r0,[r4,#0x24]         ;2611
0000de  4849              LDR      r0,|L34.516|
0000e0  6aa1              LDR      r1,[r4,#0x28]         ;2613
0000e2  62c8              STR      r0,[r1,#0x2c]         ;2613
0000e4  4848              LDR      r0,|L34.520|
0000e6  6aa1              LDR      r1,[r4,#0x28]         ;2614
0000e8  6348              STR      r0,[r1,#0x34]         ;2614
0000ea  2000              MOVS     r0,#0                 ;2615
0000ec  6aa1              LDR      r1,[r4,#0x28]         ;2615
0000ee  6388              STR      r0,[r1,#0x38]         ;2615
0000f0  6aa1              LDR      r1,[r4,#0x28]         ;2616
0000f2  6308              STR      r0,[r1,#0x30]         ;2616
0000f4  6aa0              LDR      r0,[r4,#0x28]         ;2617
0000f6  9001              STR      r0,[sp,#4]            ;2617
0000f8  2200              MOVS     r2,#0                 ;2617
0000fa  9b0f              LDR      r3,[sp,#0x3c]         ;2617
0000fc  990e              LDR      r1,[sp,#0x38]         ;2617
0000fe  f7fffffe          BL       MID_DMA_Start_IT
000102  4607              MOV      r7,r0                 ;2617
000104  2f00              CMP      r7,#0                 ;2619
000106  d011              BEQ      |L34.300|
000108  2180              MOVS     r1,#0x80              ;2621
00010a  2034              MOVS     r0,#0x34              ;2621
00010c  5501              STRB     r1,[r0,r4]            ;2621
00010e  2000              MOVS     r0,#0                 ;2622
000110  8660              STRH     r0,[r4,#0x32]         ;2622
000112  8ee0              LDRH     r0,[r4,#0x36]         ;2624
000114  2140              MOVS     r1,#0x40              ;2624
000116  e000              B        |L34.282|
                  |L34.280|
000118  e06e              B        |L34.504|
                  |L34.282|
00011a  4308              ORRS     r0,r0,r1              ;2624
00011c  86e0              STRH     r0,[r4,#0x36]         ;2624
00011e  bf00              NOP                            ;2625
000120  2100              MOVS     r1,#0                 ;2625
000122  2030              MOVS     r0,#0x30              ;2625
000124  5501              STRB     r1,[r0,r4]            ;2625
000126  bf00              NOP                            ;2625
000128  2001              MOVS     r0,#1                 ;2626
00012a  e795              B        |L34.88|
                  |L34.300|
00012c  f7fffffe          BL       MID_GetTick
000130  9004              STR      r0,[sp,#0x10]         ;2630
000132  6820              LDR      r0,[r4,#0]            ;2633
000134  3020              ADDS     r0,r0,#0x20           ;2633
000136  7a00              LDRB     r0,[r0,#8]            ;2633
000138  21f8              MOVS     r1,#0xf8              ;2633
00013a  4008              ANDS     r0,r0,r1              ;2633
00013c  9003              STR      r0,[sp,#0xc]          ;2633
00013e  4669              MOV      r1,sp                 ;2634
000140  7b08              LDRB     r0,[r1,#0xc]          ;2634
000142  28f8              CMP      r0,#0xf8              ;2634
000144  d003              BEQ      |L34.334|
000146  4668              MOV      r0,sp                 ;2634
000148  7b00              LDRB     r0,[r0,#0xc]          ;2634
00014a  28a0              CMP      r0,#0xa0              ;2634
00014c  d102              BNE      |L34.340|
                  |L34.334|
00014e  2011              MOVS     r0,#0x11              ;2635
000150  6821              LDR      r1,[r4,#0]            ;2635
000152  7608              STRB     r0,[r1,#0x18]         ;2635
                  |L34.340|
000154  bf00              NOP                            ;2637
                  |L34.342|
000156  2119              MOVS     r1,#0x19              ;2638
000158  4620              MOV      r0,r4                 ;2638
00015a  9a04              LDR      r2,[sp,#0x10]         ;2638
00015c  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
000160  2800              CMP      r0,#0                 ;2638
000162  d006              BEQ      |L34.370|
000164  bf00              NOP                            ;2641
000166  2100              MOVS     r1,#0                 ;2641
000168  2030              MOVS     r0,#0x30              ;2641
00016a  5501              STRB     r1,[r0,r4]            ;2641
00016c  bf00              NOP                            ;2641
00016e  2001              MOVS     r0,#1                 ;2642
000170  e772              B        |L34.88|
                  |L34.370|
000172  4620              MOV      r0,r4                 ;2644
000174  f7fffffe          BL       I2C_BytemodeMasterEventHandle
000178  2034              MOVS     r0,#0x34              ;2645
00017a  5d00              LDRB     r0,[r0,r4]            ;2645
00017c  07c0              LSLS     r0,r0,#31             ;2645
00017e  0fc0              LSRS     r0,r0,#31             ;2645
000180  2800              CMP      r0,#0                 ;2645
000182  d1e8              BNE      |L34.342|
000184  8ee0              LDRH     r0,[r4,#0x36]         ;2647
000186  2800              CMP      r0,#0                 ;2647
000188  d006              BEQ      |L34.408|
00018a  bf00              NOP                            ;2650
00018c  2100              MOVS     r1,#0                 ;2650
00018e  2030              MOVS     r0,#0x30              ;2650
000190  5501              STRB     r1,[r0,r4]            ;2650
000192  bf00              NOP                            ;2650
000194  2001              MOVS     r0,#1                 ;2651
000196  e75f              B        |L34.88|
                  |L34.408|
000198  4818              LDR      r0,|L34.508|
00019a  6821              LDR      r1,[r4,#0]            ;2655
00019c  6008              STR      r0,[r1,#0]            ;2655
00019e  2183              MOVS     r1,#0x83              ;2658
0001a0  2034              MOVS     r0,#0x34              ;2658
0001a2  5501              STRB     r1,[r0,r4]            ;2658
0001a4  2043              MOVS     r0,#0x43              ;2659
0001a6  0240              LSLS     r0,r0,#9              ;2659
0001a8  8660              STRH     r0,[r4,#0x32]         ;2659
0001aa  980e              LDR      r0,[sp,#0x38]         ;2662
0001ac  61a0              STR      r0,[r4,#0x18]         ;2662
0001ae  980f              LDR      r0,[sp,#0x3c]         ;2663
0001b0  83e0              STRH     r0,[r4,#0x1e]         ;2663
0001b2  2000              MOVS     r0,#0                 ;2664
0001b4  8420              STRH     r0,[r4,#0x20]         ;2664
0001b6  4815              LDR      r0,|L34.524|
0001b8  6260              STR      r0,[r4,#0x24]         ;2665
0001ba  bf00              NOP                            ;2668
0001bc  2100              MOVS     r1,#0                 ;2668
0001be  2030              MOVS     r0,#0x30              ;2668
0001c0  5501              STRB     r1,[r0,r4]            ;2668
0001c2  bf00              NOP                            ;2668
0001c4  2078              MOVS     r0,#0x78              ;2674
0001c6  6821              LDR      r1,[r4,#0]            ;2674
0001c8  7608              STRB     r0,[r1,#0x18]         ;2674
0001ca  6820              LDR      r0,[r4,#0]            ;2675
0001cc  6900              LDR      r0,[r0,#0x10]         ;2675
0001ce  2101              MOVS     r1,#1                 ;2675
0001d0  07c9              LSLS     r1,r1,#31             ;2675
0001d2  4308              ORRS     r0,r0,r1              ;2675
0001d4  6821              LDR      r1,[r4,#0]            ;2675
0001d6  6108              STR      r0,[r1,#0x10]         ;2675
0001d8  bf00              NOP                            ;2676
                  |L34.474|
0001da  6820              LDR      r0,[r4,#0]            ;2676
0001dc  3028              ADDS     r0,r0,#0x28           ;2676
0001de  7840              LDRB     r0,[r0,#1]            ;2676
0001e0  07c0              LSLS     r0,r0,#31             ;2676
0001e2  0fc0              LSRS     r0,r0,#31             ;2676
0001e4  2800              CMP      r0,#0                 ;2676
0001e6  d1f8              BNE      |L34.474|
0001e8  6820              LDR      r0,[r4,#0]            ;2681
0001ea  6840              LDR      r0,[r0,#4]            ;2681
0001ec  2103              MOVS     r1,#3                 ;2681
0001ee  4308              ORRS     r0,r0,r1              ;2681
0001f0  6821              LDR      r1,[r4,#0]            ;2681
0001f2  6048              STR      r0,[r1,#4]            ;2681
0001f4  2000              MOVS     r0,#0                 ;2683
0001f6  e72f              B        |L34.88|
                  |L34.504|
0001f8  2002              MOVS     r0,#2                 ;2687
0001fa  e72d              B        |L34.88|
;;;2690   
                          ENDP

                  |L34.508|
                          DCD      0x00f80300
                  |L34.512|
                          DCD      0x0000fffe
                  |L34.516|
                          DCD      I2C_DMACplt
                  |L34.520|
                          DCD      I2C_DMAError
                  |L34.524|
                          DCD      I2C_Master_ISR_IT

                          AREA ||i.MID_I2C_Mem_Write_IT||, CODE, READONLY, ALIGN=2

                  MID_I2C_Mem_Write_IT PROC
;;;2287    */
;;;2288   MID_StatusTypeDef MID_I2C_Mem_Write_IT(I2C_HandleTypeDef *mI2C, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
000000  b5fe              PUSH     {r1-r7,lr}
;;;2289   {
000002  4604              MOV      r4,r0
000004  460f              MOV      r7,r1
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
;;;2290       uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;2291       __IO uint8_t lEventTemp;
;;;2292       union{
;;;2293           uint8_t B[2];
;;;2294           uint16_t H;
;;;2295       }lMemAddress;
;;;2296   
;;;2297       /* Check the parameters */
;;;2298       assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
;;;2299   
;;;2300       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000e  2034              MOVS     r0,#0x34
000010  5d00              LDRB     r0,[r0,r4]
000012  2181              MOVS     r1,#0x81
000014  4008              ANDS     r0,r0,r1
000016  2880              CMP      r0,#0x80
000018  d174              BNE      |L35.260|
;;;2301       {
;;;2302           if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_BUSY) != CLR)
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  07c0              LSLS     r0,r0,#31
000020  0fc0              LSRS     r0,r0,#31
000022  2101              MOVS     r1,#1
000024  4048              EORS     r0,r0,r1
000026  4048              EORS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d016              BEQ      |L35.90|
;;;2303           {
;;;2304               if(__DRV_I2C_GET_FLAG(mI2C, I2C_FLAG_EVENT) != CLR)
00002c  6820              LDR      r0,[r4,#0]
00002e  6800              LDR      r0,[r0,#0]
000030  2102              MOVS     r1,#2
000032  4008              ANDS     r0,r0,r1
000034  0840              LSRS     r0,r0,#1
000036  2800              CMP      r0,#0
000038  d00f              BEQ      |L35.90|
;;;2305               {
;;;2306                   lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
00003a  6820              LDR      r0,[r4,#0]
00003c  3020              ADDS     r0,r0,#0x20
00003e  7a00              LDRB     r0,[r0,#8]
000040  21f8              MOVS     r1,#0xf8
000042  4008              ANDS     r0,r0,r1
000044  9001              STR      r0,[sp,#4]
;;;2307                   if((lEventTemp != 0x08) && (lEventTemp != 0x10))
000046  4669              MOV      r1,sp
000048  7908              LDRB     r0,[r1,#4]
00004a  2808              CMP      r0,#8
00004c  d005              BEQ      |L35.90|
00004e  4668              MOV      r0,sp
000050  7900              LDRB     r0,[r0,#4]
000052  2810              CMP      r0,#0x10
000054  d001              BEQ      |L35.90|
;;;2308                       return MID_ERROR;
000056  2001              MOVS     r0,#1
                  |L35.88|
;;;2309               }
;;;2310           }
;;;2311   
;;;2312           /* Process Locked */
;;;2313           __MID_LOCK(mI2C);
;;;2314   
;;;2315           I2C_BUFFMODE_DISABLE(mI2C);
;;;2316   
;;;2317           if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
;;;2318           {
;;;2319               lMemAddress.H = MemAddress;
;;;2320           }
;;;2321           else
;;;2322           {
;;;2323               lMemAddress.B[0] = (uint8_t)(MemAddress >> 8);
;;;2324               lMemAddress.B[1] = (uint8_t)MemAddress; 
;;;2325           }
;;;2326   
;;;2327           /* Disable All Interrupt */
;;;2328           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;2329   
;;;2330           /* Clear I2C Flag */
;;;2331           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;2332   
;;;2333           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;2334           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;2335           mI2C->Mode = MID_I2C_MODE_MASTER_NONE;
;;;2336   
;;;2337           /* Prepare transfer parameters */
;;;2338           mI2C->DevAddress = DevAddress & 0xFFFE;
;;;2339           mI2C->pBuffPtr = (uint8_t *)(&lMemAddress);
;;;2340           mI2C->XferSize = MemAddSize;
;;;2341           mI2C->XferCount = NULL;
;;;2342           mI2C->XferISR = NULL;
;;;2343   
;;;2344           /* Init tickstart for timeout management*/
;;;2345           tickstart = MID_GetTick();
;;;2346   
;;;2347           /* Send Bus Start */
;;;2348           lEventTemp = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;2349           if((lEventTemp == 0xF8) || (lEventTemp == 0xA0))
;;;2350               __DRV_I2C_STA_1(mI2C);
;;;2351   
;;;2352           do{
;;;2353               if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, I2C_TIMEOUT_FLAG, tickstart) != MID_OK)
;;;2354               {
;;;2355                   /* Process Unlocked */
;;;2356                   __MID_UNLOCK(mI2C);
;;;2357                   return MID_ERROR;
;;;2358               }
;;;2359               I2C_BytemodeMasterEventHandle(mI2C);
;;;2360           }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;2361   
;;;2362           if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;2363           {
;;;2364               /* Process Unlocked */
;;;2365               __MID_UNLOCK(mI2C);
;;;2366               return MID_ERROR;
;;;2367           }
;;;2368   
;;;2369           /* Clear I2C Flag */
;;;2370           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;2371   
;;;2372           // mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;2373           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;2374           mI2C->Mode = MID_I2C_MODE_MASTER_STOP;
;;;2375   
;;;2376           /* Prepare transfer parameters */
;;;2377           mI2C->pBuffPtr = pData;
;;;2378           mI2C->XferSize = Size;
;;;2379           mI2C->XferCount = NULL;
;;;2380           mI2C->XferISR = I2C_Master_ISR_IT;
;;;2381   
;;;2382           /* Process Unlocked */
;;;2383           __MID_UNLOCK(mI2C);
;;;2384   
;;;2385           /* Note : The I2C interrupts must be enabled after unlocking current process
;;;2386                     to avoid the risk of I2C interrupt handle execution before current
;;;2387                     process unlock */
;;;2388   
;;;2389           /* Enable IEA, EVENT, interrupt */
;;;2390           /* possible to enable all of these */
;;;2391           /* I2C_IT_IEA | I2C_IT_EVENT */
;;;2392           __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;2393   
;;;2394           return MID_OK;
;;;2395       }
;;;2396       else
;;;2397       {
;;;2398           return MID_BUSY;
;;;2399       }
;;;2400   }
000058  bdfe              POP      {r1-r7,pc}
                  |L35.90|
00005a  bf00              NOP                            ;2313
00005c  2030              MOVS     r0,#0x30              ;2313
00005e  5d00              LDRB     r0,[r0,r4]            ;2313
000060  2801              CMP      r0,#1                 ;2313
000062  d101              BNE      |L35.104|
000064  2002              MOVS     r0,#2                 ;2313
000066  e7f7              B        |L35.88|
                  |L35.104|
000068  2101              MOVS     r1,#1                 ;2313
00006a  2030              MOVS     r0,#0x30              ;2313
00006c  5501              STRB     r1,[r0,r4]            ;2313
00006e  bf00              NOP                            ;2313
000070  6820              LDR      r0,[r4,#0]            ;2315
000072  7c00              LDRB     r0,[r0,#0x10]         ;2315
000074  2140              MOVS     r1,#0x40              ;2315
000076  4388              BICS     r0,r0,r1              ;2315
000078  6821              LDR      r1,[r4,#0]            ;2315
00007a  7408              STRB     r0,[r1,#0x10]         ;2315
00007c  2e01              CMP      r6,#1                 ;2317
00007e  d101              BNE      |L35.132|
000080  9500              STR      r5,[sp,#0]            ;2319
000082  e003              B        |L35.140|
                  |L35.132|
000084  1229              ASRS     r1,r5,#8              ;2323
000086  4668              MOV      r0,sp                 ;2323
000088  7001              STRB     r1,[r0,#0]            ;2323
00008a  7045              STRB     r5,[r0,#1]            ;2324
                  |L35.140|
00008c  6820              LDR      r0,[r4,#0]            ;2328
00008e  6840              LDR      r0,[r0,#4]            ;2328
000090  210e              MOVS     r1,#0xe               ;2328
000092  4388              BICS     r0,r0,r1              ;2328
000094  6821              LDR      r1,[r4,#0]            ;2328
000096  6048              STR      r0,[r1,#4]            ;2328
000098  4834              LDR      r0,|L35.364|
00009a  6821              LDR      r1,[r4,#0]            ;2331
00009c  6008              STR      r0,[r1,#0]            ;2331
00009e  2000              MOVS     r0,#0                 ;2333
0000a0  86e0              STRH     r0,[r4,#0x36]         ;2333
0000a2  2183              MOVS     r1,#0x83              ;2334
0000a4  2034              MOVS     r0,#0x34              ;2334
0000a6  5501              STRB     r1,[r0,r4]            ;2334
0000a8  2000              MOVS     r0,#0                 ;2335
0000aa  8660              STRH     r0,[r4,#0x32]         ;2335
0000ac  4830              LDR      r0,|L35.368|
0000ae  4038              ANDS     r0,r0,r7              ;2338
0000b0  83a0              STRH     r0,[r4,#0x1c]         ;2338
0000b2  4668              MOV      r0,sp                 ;2339
0000b4  61a0              STR      r0,[r4,#0x18]         ;2339
0000b6  83e6              STRH     r6,[r4,#0x1e]         ;2340
0000b8  2000              MOVS     r0,#0                 ;2341
0000ba  8420              STRH     r0,[r4,#0x20]         ;2341
0000bc  6260              STR      r0,[r4,#0x24]         ;2342
0000be  f7fffffe          BL       MID_GetTick
0000c2  9002              STR      r0,[sp,#8]            ;2345
0000c4  6820              LDR      r0,[r4,#0]            ;2348
0000c6  3020              ADDS     r0,r0,#0x20           ;2348
0000c8  7a00              LDRB     r0,[r0,#8]            ;2348
0000ca  21f8              MOVS     r1,#0xf8              ;2348
0000cc  4008              ANDS     r0,r0,r1              ;2348
0000ce  9001              STR      r0,[sp,#4]            ;2348
0000d0  4669              MOV      r1,sp                 ;2349
0000d2  7908              LDRB     r0,[r1,#4]            ;2349
0000d4  28f8              CMP      r0,#0xf8              ;2349
0000d6  d003              BEQ      |L35.224|
0000d8  4668              MOV      r0,sp                 ;2349
0000da  7900              LDRB     r0,[r0,#4]            ;2349
0000dc  28a0              CMP      r0,#0xa0              ;2349
0000de  d102              BNE      |L35.230|
                  |L35.224|
0000e0  2011              MOVS     r0,#0x11              ;2350
0000e2  6821              LDR      r1,[r4,#0]            ;2350
0000e4  7608              STRB     r0,[r1,#0x18]         ;2350
                  |L35.230|
0000e6  bf00              NOP                            ;2352
                  |L35.232|
0000e8  2119              MOVS     r1,#0x19              ;2353
0000ea  4620              MOV      r0,r4                 ;2353
0000ec  9a02              LDR      r2,[sp,#8]            ;2353
0000ee  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
0000f2  2800              CMP      r0,#0                 ;2353
0000f4  d007              BEQ      |L35.262|
0000f6  bf00              NOP                            ;2356
0000f8  2100              MOVS     r1,#0                 ;2356
0000fa  2030              MOVS     r0,#0x30              ;2356
0000fc  5501              STRB     r1,[r0,r4]            ;2356
0000fe  bf00              NOP                            ;2356
000100  2001              MOVS     r0,#1                 ;2357
000102  e7a9              B        |L35.88|
                  |L35.260|
000104  e030              B        |L35.360|
                  |L35.262|
000106  4620              MOV      r0,r4                 ;2359
000108  f7fffffe          BL       I2C_BytemodeMasterEventHandle
00010c  2034              MOVS     r0,#0x34              ;2360
00010e  5d00              LDRB     r0,[r0,r4]            ;2360
000110  07c0              LSLS     r0,r0,#31             ;2360
000112  0fc0              LSRS     r0,r0,#31             ;2360
000114  2800              CMP      r0,#0                 ;2360
000116  d1e7              BNE      |L35.232|
000118  8ee0              LDRH     r0,[r4,#0x36]         ;2362
00011a  2800              CMP      r0,#0                 ;2362
00011c  d006              BEQ      |L35.300|
00011e  bf00              NOP                            ;2365
000120  2100              MOVS     r1,#0                 ;2365
000122  2030              MOVS     r0,#0x30              ;2365
000124  5501              STRB     r1,[r0,r4]            ;2365
000126  bf00              NOP                            ;2365
000128  2001              MOVS     r0,#1                 ;2366
00012a  e795              B        |L35.88|
                  |L35.300|
00012c  480f              LDR      r0,|L35.364|
00012e  6821              LDR      r1,[r4,#0]            ;2370
000130  6008              STR      r0,[r1,#0]            ;2370
000132  2183              MOVS     r1,#0x83              ;2373
000134  2034              MOVS     r0,#0x34              ;2373
000136  5501              STRB     r1,[r0,r4]            ;2373
000138  2003              MOVS     r0,#3                 ;2374
00013a  0240              LSLS     r0,r0,#9              ;2374
00013c  8660              STRH     r0,[r4,#0x32]         ;2374
00013e  9808              LDR      r0,[sp,#0x20]         ;2377
000140  61a0              STR      r0,[r4,#0x18]         ;2377
000142  9809              LDR      r0,[sp,#0x24]         ;2378
000144  83e0              STRH     r0,[r4,#0x1e]         ;2378
000146  2000              MOVS     r0,#0                 ;2379
000148  8420              STRH     r0,[r4,#0x20]         ;2379
00014a  480a              LDR      r0,|L35.372|
00014c  6260              STR      r0,[r4,#0x24]         ;2380
00014e  bf00              NOP                            ;2383
000150  2100              MOVS     r1,#0                 ;2383
000152  2030              MOVS     r0,#0x30              ;2383
000154  5501              STRB     r1,[r0,r4]            ;2383
000156  bf00              NOP                            ;2383
000158  6820              LDR      r0,[r4,#0]            ;2392
00015a  6840              LDR      r0,[r0,#4]            ;2392
00015c  2103              MOVS     r1,#3                 ;2392
00015e  4308              ORRS     r0,r0,r1              ;2392
000160  6821              LDR      r1,[r4,#0]            ;2392
000162  6048              STR      r0,[r1,#4]            ;2392
000164  2000              MOVS     r0,#0                 ;2394
000166  e777              B        |L35.88|
                  |L35.360|
000168  2002              MOVS     r0,#2                 ;2398
00016a  e775              B        |L35.88|
;;;2401   
                          ENDP

                  |L35.364|
                          DCD      0x00f80300
                  |L35.368|
                          DCD      0x0000fffe
                  |L35.372|
                          DCD      I2C_Master_ISR_IT

                          AREA ||i.MID_I2C_MspDeInit||, CODE, READONLY, ALIGN=1

                  MID_I2C_MspDeInit PROC
;;;532     */
;;;533    __weak void MID_I2C_MspDeInit(I2C_HandleTypeDef *mI2C)
000000  4770              BX       lr
;;;534    {
;;;535      /* Prevent unused argument(s) compilation warning */
;;;536      UNUSED(mI2C);
;;;537    
;;;538      /* NOTE : This function should not be modified, when the callback is needed,
;;;539                the MID_I2C_MspDeInit could be implemented in the user file
;;;540      */
;;;541    }
;;;542    
                          ENDP


                          AREA ||i.MID_I2C_MspInit||, CODE, READONLY, ALIGN=1

                  MID_I2C_MspInit PROC
;;;514     */
;;;515    __weak void MID_I2C_MspInit(I2C_HandleTypeDef *mI2C)
000000  4770              BX       lr
;;;516    {
;;;517      /* Prevent unused argument(s) compilation warning */
;;;518      UNUSED(mI2C);
;;;519    
;;;520      /* NOTE : This function should not be modified, when the callback is needed,
;;;521                the MID_I2C_MspInit could be implemented in the user file
;;;522      */
;;;523    }
;;;524    
                          ENDP


                          AREA ||i.MID_I2C_SlaveRxCpltCallback||, CODE, READONLY, ALIGN=1

                  MID_I2C_SlaveRxCpltCallback PROC
;;;2939    */
;;;2940   __weak void MID_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *mI2C)
000000  4770              BX       lr
;;;2941   {
;;;2942     /* Prevent unused argument(s) compilation warning */
;;;2943     UNUSED(mI2C);
;;;2944   
;;;2945     /* NOTE : This function should not be modified, when the callback is needed,
;;;2946               the MID_I2C_SlaveRxCpltCallback could be implemented in the user file
;;;2947     */
;;;2948   }
;;;2949   
                          ENDP


                          AREA ||i.MID_I2C_SlaveTxCpltCallback||, CODE, READONLY, ALIGN=1

                  MID_I2C_SlaveTxCpltCallback PROC
;;;2921    */
;;;2922   __weak void MID_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *mI2C)
000000  4770              BX       lr
;;;2923   {
;;;2924     /* Prevent unused argument(s) compilation warning */
;;;2925     UNUSED(mI2C);
;;;2926   
;;;2927     /* NOTE : This function should not be modified, when the callback is needed,
;;;2928               the MID_I2C_SlaveTxCpltCallback could be implemented in the user file
;;;2929     */
;;;2930   }
;;;2931   
                          ENDP


                          AREA ||i.MID_I2C_Slave_Receive||, CODE, READONLY, ALIGN=2

                  MID_I2C_Slave_Receive PROC
;;;1052    */
;;;1053   MID_StatusTypeDef MID_I2C_Slave_Receive(I2C_HandleTypeDef *mI2C, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1054   {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1055       uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;1056       uint8_t lEventCode;
;;;1057   
;;;1058       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000e  2034              MOVS     r0,#0x34
000010  5d00              LDRB     r0,[r0,r4]
000012  2181              MOVS     r1,#0x81
000014  4008              ANDS     r0,r0,r1
000016  2880              CMP      r0,#0x80
000018  d17e              BNE      |L40.280|
;;;1059       {
;;;1060           if((pData == NULL) || (Size == 0U))
00001a  2e00              CMP      r6,#0
00001c  d001              BEQ      |L40.34|
00001e  2f00              CMP      r7,#0
000020  d102              BNE      |L40.40|
                  |L40.34|
;;;1061           {
;;;1062               return  MID_ERROR;
000022  2001              MOVS     r0,#1
                  |L40.36|
;;;1063           }
;;;1064           /* Process Locked */
;;;1065           __MID_LOCK(mI2C);
;;;1066   
;;;1067           /* Disable All Interrupt */
;;;1068           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;1069   
;;;1070           /* Clear I2C Flag */
;;;1071           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;1072   
;;;1073           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;1074           mI2C->State = MID_I2C_STATE_BUSY_RX;
;;;1075           mI2C->Mode = MID_I2C_MODE_SLAVE;
;;;1076   
;;;1077           /* Prepare transfer parameters */
;;;1078           mI2C->DevAddress = NULL;
;;;1079           mI2C->pBuffPtr = pData;
;;;1080           mI2C->XferSize = Size;
;;;1081           mI2C->XferCount = NULL;
;;;1082           mI2C->XferISR = NULL;
;;;1083   
;;;1084           /* Init tickstart for timeout management*/
;;;1085           tickstart = MID_GetTick();
;;;1086   
;;;1087           /* Enable Address Acknowledge */
;;;1088           mI2C->Instance->CR0.W |= (I2C_CR0_SADR_EN_mask_w | mI2C->Init.DualAddressMode | mI2C->Init.GeneralCallMode);
;;;1089           __DRV_I2C_STA_STO_AA_001(mI2C);
;;;1090   
;;;1091           /* Wait until match own Address */
;;;1092           do{
;;;1093               if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, Timeout, tickstart) != MID_OK)
;;;1094               {
;;;1095                   /* Process Unlocked */
;;;1096                   __MID_UNLOCK(mI2C);
;;;1097                   return MID_ERROR;
;;;1098               }
;;;1099               lEventCode = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;1100           }while((lEventCode != 0x60) && (lEventCode != 0x68) && (lEventCode != 0x70) && (lEventCode != 0x78));
;;;1101           I2C_BytemodeSlaveEventHandle(mI2C);
;;;1102   
;;;1103           /* Wait until Data Transfor to Stop */
;;;1104           do{
;;;1105               if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, Timeout, tickstart) != MID_OK)
;;;1106               {
;;;1107                   /* Process Unlocked */
;;;1108                   __MID_UNLOCK(mI2C);
;;;1109                   return MID_TIMEOUT;
;;;1110               }
;;;1111               I2C_BytemodeSlaveEventHandle(mI2C);
;;;1112           }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;1113   
;;;1114           // /* Disable Address Acknowledge */
;;;1115           // mI2C->Instance->CR2 |= I2C_CR2_NACK;
;;;1116   
;;;1117           mI2C->State = MID_I2C_STATE_READY;
;;;1118           mI2C->Mode = MID_I2C_MODE_NONE;
;;;1119   
;;;1120           /* Process Unlocked */
;;;1121           __MID_UNLOCK(mI2C);
;;;1122   
;;;1123           if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;1124               return MID_ERROR;
;;;1125           else
;;;1126               return MID_OK;
;;;1127       }
;;;1128       else
;;;1129       {
;;;1130           return MID_BUSY;
;;;1131       }
;;;1132   }
000024  b005              ADD      sp,sp,#0x14
000026  bdf0              POP      {r4-r7,pc}
                  |L40.40|
000028  bf00              NOP                            ;1065
00002a  2030              MOVS     r0,#0x30              ;1065
00002c  5d00              LDRB     r0,[r0,r4]            ;1065
00002e  2801              CMP      r0,#1                 ;1065
000030  d101              BNE      |L40.54|
000032  2002              MOVS     r0,#2                 ;1065
000034  e7f6              B        |L40.36|
                  |L40.54|
000036  2101              MOVS     r1,#1                 ;1065
000038  2030              MOVS     r0,#0x30              ;1065
00003a  5501              STRB     r1,[r0,r4]            ;1065
00003c  bf00              NOP                            ;1065
00003e  6820              LDR      r0,[r4,#0]            ;1068
000040  6840              LDR      r0,[r0,#4]            ;1068
000042  210e              MOVS     r1,#0xe               ;1068
000044  4388              BICS     r0,r0,r1              ;1068
000046  6821              LDR      r1,[r4,#0]            ;1068
000048  6048              STR      r0,[r1,#4]            ;1068
00004a  4836              LDR      r0,|L40.292|
00004c  6821              LDR      r1,[r4,#0]            ;1071
00004e  6008              STR      r0,[r1,#0]            ;1071
000050  2000              MOVS     r0,#0                 ;1073
000052  86e0              STRH     r0,[r4,#0x36]         ;1073
000054  2185              MOVS     r1,#0x85              ;1074
000056  2034              MOVS     r0,#0x34              ;1074
000058  5501              STRB     r1,[r0,r4]            ;1074
00005a  2001              MOVS     r0,#1                 ;1075
00005c  02c0              LSLS     r0,r0,#11             ;1075
00005e  8660              STRH     r0,[r4,#0x32]         ;1075
000060  2000              MOVS     r0,#0                 ;1078
000062  83a0              STRH     r0,[r4,#0x1c]         ;1078
000064  61a6              STR      r6,[r4,#0x18]         ;1079
000066  83e7              STRH     r7,[r4,#0x1e]         ;1080
000068  8420              STRH     r0,[r4,#0x20]         ;1081
00006a  6260              STR      r0,[r4,#0x24]         ;1082
00006c  f7fffffe          BL       MID_GetTick
000070  9000              STR      r0,[sp,#0]            ;1085
000072  2102              MOVS     r1,#2                 ;1088
000074  68e0              LDR      r0,[r4,#0xc]          ;1088
000076  4308              ORRS     r0,r0,r1              ;1088
000078  6961              LDR      r1,[r4,#0x14]         ;1088
00007a  4308              ORRS     r0,r0,r1              ;1088
00007c  6821              LDR      r1,[r4,#0]            ;1088
00007e  6909              LDR      r1,[r1,#0x10]         ;1088
000080  4308              ORRS     r0,r0,r1              ;1088
000082  6821              LDR      r1,[r4,#0]            ;1088
000084  6108              STR      r0,[r1,#0x10]         ;1088
000086  2074              MOVS     r0,#0x74              ;1089
000088  6821              LDR      r1,[r4,#0]            ;1089
00008a  7608              STRB     r0,[r1,#0x18]         ;1089
00008c  bf00              NOP                            ;1092
                  |L40.142|
00008e  4620              MOV      r0,r4                 ;1093
000090  9a00              LDR      r2,[sp,#0]            ;1093
000092  9904              LDR      r1,[sp,#0x10]         ;1093
000094  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
000098  2800              CMP      r0,#0                 ;1093
00009a  d006              BEQ      |L40.170|
00009c  bf00              NOP                            ;1096
00009e  2100              MOVS     r1,#0                 ;1096
0000a0  2030              MOVS     r0,#0x30              ;1096
0000a2  5501              STRB     r1,[r0,r4]            ;1096
0000a4  bf00              NOP                            ;1096
0000a6  2001              MOVS     r0,#1                 ;1097
0000a8  e7bc              B        |L40.36|
                  |L40.170|
0000aa  6820              LDR      r0,[r4,#0]            ;1099
0000ac  3020              ADDS     r0,r0,#0x20           ;1099
0000ae  7a05              LDRB     r5,[r0,#8]            ;1099
0000b0  21f8              MOVS     r1,#0xf8              ;1099
0000b2  400d              ANDS     r5,r5,r1              ;1099
0000b4  2d60              CMP      r5,#0x60              ;1100
0000b6  d005              BEQ      |L40.196|
0000b8  2d68              CMP      r5,#0x68              ;1100
0000ba  d003              BEQ      |L40.196|
0000bc  2d70              CMP      r5,#0x70              ;1100
0000be  d001              BEQ      |L40.196|
0000c0  2d78              CMP      r5,#0x78              ;1100
0000c2  d1e4              BNE      |L40.142|
                  |L40.196|
0000c4  4620              MOV      r0,r4                 ;1101
0000c6  f7fffffe          BL       I2C_BytemodeSlaveEventHandle
0000ca  bf00              NOP                            ;1104
                  |L40.204|
0000cc  4620              MOV      r0,r4                 ;1105
0000ce  9a00              LDR      r2,[sp,#0]            ;1105
0000d0  9904              LDR      r1,[sp,#0x10]         ;1105
0000d2  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
0000d6  2800              CMP      r0,#0                 ;1105
0000d8  d006              BEQ      |L40.232|
0000da  bf00              NOP                            ;1108
0000dc  2100              MOVS     r1,#0                 ;1108
0000de  2030              MOVS     r0,#0x30              ;1108
0000e0  5501              STRB     r1,[r0,r4]            ;1108
0000e2  bf00              NOP                            ;1108
0000e4  2003              MOVS     r0,#3                 ;1109
0000e6  e79d              B        |L40.36|
                  |L40.232|
0000e8  4620              MOV      r0,r4                 ;1111
0000ea  f7fffffe          BL       I2C_BytemodeSlaveEventHandle
0000ee  2034              MOVS     r0,#0x34              ;1112
0000f0  5d00              LDRB     r0,[r0,r4]            ;1112
0000f2  07c0              LSLS     r0,r0,#31             ;1112
0000f4  0fc0              LSRS     r0,r0,#31             ;1112
0000f6  2800              CMP      r0,#0                 ;1112
0000f8  d1e8              BNE      |L40.204|
0000fa  2180              MOVS     r1,#0x80              ;1117
0000fc  2034              MOVS     r0,#0x34              ;1117
0000fe  5501              STRB     r1,[r0,r4]            ;1117
000100  2000              MOVS     r0,#0                 ;1118
000102  8660              STRH     r0,[r4,#0x32]         ;1118
000104  bf00              NOP                            ;1121
000106  2100              MOVS     r1,#0                 ;1121
000108  2030              MOVS     r0,#0x30              ;1121
00010a  5501              STRB     r1,[r0,r4]            ;1121
00010c  bf00              NOP                            ;1121
00010e  8ee0              LDRH     r0,[r4,#0x36]         ;1123
000110  2800              CMP      r0,#0                 ;1123
000112  d002              BEQ      |L40.282|
000114  2001              MOVS     r0,#1                 ;1124
000116  e785              B        |L40.36|
                  |L40.280|
000118  e001              B        |L40.286|
                  |L40.282|
00011a  2000              MOVS     r0,#0                 ;1126
00011c  e782              B        |L40.36|
                  |L40.286|
00011e  2002              MOVS     r0,#2                 ;1130
000120  e780              B        |L40.36|
;;;1133   
                          ENDP

000122  0000              DCW      0x0000
                  |L40.292|
                          DCD      0x00f80300

                          AREA ||i.MID_I2C_Slave_Receive_DMA||, CODE, READONLY, ALIGN=2

                  MID_I2C_Slave_Receive_DMA PROC
;;;1920    */
;;;1921   MID_StatusTypeDef MID_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *mI2C, uint8_t *pData, uint16_t Size)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1922   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1923       MID_StatusTypeDef lDmaXferStatus;
;;;1924   
;;;1925       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
000008  2034              MOVS     r0,#0x34
00000a  5d00              LDRB     r0,[r0,r4]
00000c  2181              MOVS     r1,#0x81
00000e  4008              ANDS     r0,r0,r1
000010  2880              CMP      r0,#0x80
000012  d17b              BNE      |L41.268|
;;;1926       {
;;;1927           if((pData == NULL) || (Size == 0U))
000014  2e00              CMP      r6,#0
000016  d001              BEQ      |L41.28|
000018  2d00              CMP      r5,#0
00001a  d101              BNE      |L41.32|
                  |L41.28|
;;;1928           {
;;;1929               return  MID_ERROR;
00001c  2001              MOVS     r0,#1
                  |L41.30|
;;;1930           }
;;;1931   
;;;1932           /* Process Locked */
;;;1933           __MID_LOCK(mI2C);
;;;1934   
;;;1935           /* Disable All Interrupt */
;;;1936           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;1937   
;;;1938           /* Clear I2C Flag */
;;;1939           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;1940   
;;;1941           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;1942           mI2C->State = MID_I2C_STATE_BUSY_RX;
;;;1943           mI2C->Mode = MID_I2C_MODE_SLAVE;
;;;1944   
;;;1945           /* Prepare transfer parameters */
;;;1946           mI2C->DevAddress = NULL;
;;;1947           mI2C->pBuffPtr = pData;
;;;1948           mI2C->XferSize = Size;
;;;1949           mI2C->XferCount = NULL;
;;;1950           mI2C->XferISR = I2C_Slave_ISR_IT;
;;;1951   
;;;1952           /* Enable Address Acknowledge */
;;;1953           mI2C->Instance->CR0.W |= (I2C_CR0_SADR_EN_mask_w | mI2C->Init.DualAddressMode | mI2C->Init.GeneralCallMode);
;;;1954           __DRV_I2C_STA_STO_AA_001(mI2C);
;;;1955   
;;;1956           if(mI2C->hdmarx != NULL)
;;;1957           {
;;;1958               mI2C->hdmarx->XferCpltCallback = I2C_DMACplt;
;;;1959               mI2C->hdmarx->XferErrorCallback = I2C_DMAError;
;;;1960               mI2C->hdmarx->XferAbortCallback = NULL;
;;;1961               mI2C->hdmarx->XferHalfCpltCallback = NULL;
;;;1962               lDmaXferStatus = MID_DMA_Start_IT(mI2C->hdmarx, (uint32_t)pData, 0, (uint32_t)Size);
;;;1963           }
;;;1964           else
;;;1965           {
;;;1966               mI2C->State = MID_I2C_STATE_READY;
;;;1967               mI2C->Mode = MID_I2C_MODE_NONE;
;;;1968               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;1969               __MID_UNLOCK(mI2C);
;;;1970               return MID_ERROR;
;;;1971           }
;;;1972   
;;;1973           if(lDmaXferStatus == MID_OK)
;;;1974           {
;;;1975               /* Process Unlocked */
;;;1976               __MID_UNLOCK(mI2C);
;;;1977   
;;;1978               /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1979                         to avoid the risk of I2C interrupt handle execution before current
;;;1980                         process unlock */
;;;1981   
;;;1982               /* Enable IEA, EVENT, interrupt */
;;;1983               /* possible to enable all of these */
;;;1984               /* I2C_IT_IEA | I2C_IT_EVENT */
;;;1985               __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;1986   
;;;1987               return MID_OK;
;;;1988           }
;;;1989           else
;;;1990           {
;;;1991               mI2C->State = MID_I2C_STATE_READY;
;;;1992               mI2C->Mode = MID_I2C_MODE_NONE;
;;;1993               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;1994               __MID_UNLOCK(mI2C);
;;;1995               return MID_ERROR;
;;;1996           }
;;;1997       }
;;;1998       else
;;;1999       {
;;;2000           return MID_BUSY;
;;;2001       }
;;;2002   }
00001e  bdf8              POP      {r3-r7,pc}
                  |L41.32|
000020  bf00              NOP                            ;1933
000022  2030              MOVS     r0,#0x30              ;1933
000024  5d00              LDRB     r0,[r0,r4]            ;1933
000026  2801              CMP      r0,#1                 ;1933
000028  d101              BNE      |L41.46|
00002a  2002              MOVS     r0,#2                 ;1933
00002c  e7f7              B        |L41.30|
                  |L41.46|
00002e  2101              MOVS     r1,#1                 ;1933
000030  2030              MOVS     r0,#0x30              ;1933
000032  5501              STRB     r1,[r0,r4]            ;1933
000034  bf00              NOP                            ;1933
000036  6820              LDR      r0,[r4,#0]            ;1936
000038  6840              LDR      r0,[r0,#4]            ;1936
00003a  210e              MOVS     r1,#0xe               ;1936
00003c  4388              BICS     r0,r0,r1              ;1936
00003e  6821              LDR      r1,[r4,#0]            ;1936
000040  6048              STR      r0,[r1,#4]            ;1936
000042  4833              LDR      r0,|L41.272|
000044  6821              LDR      r1,[r4,#0]            ;1939
000046  6008              STR      r0,[r1,#0]            ;1939
000048  2000              MOVS     r0,#0                 ;1941
00004a  86e0              STRH     r0,[r4,#0x36]         ;1941
00004c  2185              MOVS     r1,#0x85              ;1942
00004e  2034              MOVS     r0,#0x34              ;1942
000050  5501              STRB     r1,[r0,r4]            ;1942
000052  2001              MOVS     r0,#1                 ;1943
000054  02c0              LSLS     r0,r0,#11             ;1943
000056  8660              STRH     r0,[r4,#0x32]         ;1943
000058  2000              MOVS     r0,#0                 ;1946
00005a  83a0              STRH     r0,[r4,#0x1c]         ;1946
00005c  61a6              STR      r6,[r4,#0x18]         ;1947
00005e  83e5              STRH     r5,[r4,#0x1e]         ;1948
000060  8420              STRH     r0,[r4,#0x20]         ;1949
000062  482c              LDR      r0,|L41.276|
000064  6260              STR      r0,[r4,#0x24]         ;1950
000066  2102              MOVS     r1,#2                 ;1953
000068  68e0              LDR      r0,[r4,#0xc]          ;1953
00006a  4308              ORRS     r0,r0,r1              ;1953
00006c  6961              LDR      r1,[r4,#0x14]         ;1953
00006e  4308              ORRS     r0,r0,r1              ;1953
000070  6821              LDR      r1,[r4,#0]            ;1953
000072  6909              LDR      r1,[r1,#0x10]         ;1953
000074  4308              ORRS     r0,r0,r1              ;1953
000076  6821              LDR      r1,[r4,#0]            ;1953
000078  6108              STR      r0,[r1,#0x10]         ;1953
00007a  2074              MOVS     r0,#0x74              ;1954
00007c  6821              LDR      r1,[r4,#0]            ;1954
00007e  7608              STRB     r0,[r1,#0x18]         ;1954
000080  6ae0              LDR      r0,[r4,#0x2c]         ;1956
000082  2800              CMP      r0,#0                 ;1956
000084  d012              BEQ      |L41.172|
000086  4824              LDR      r0,|L41.280|
000088  6ae1              LDR      r1,[r4,#0x2c]         ;1958
00008a  62c8              STR      r0,[r1,#0x2c]         ;1958
00008c  4823              LDR      r0,|L41.284|
00008e  6ae1              LDR      r1,[r4,#0x2c]         ;1959
000090  6348              STR      r0,[r1,#0x34]         ;1959
000092  2000              MOVS     r0,#0                 ;1960
000094  6ae1              LDR      r1,[r4,#0x2c]         ;1960
000096  6388              STR      r0,[r1,#0x38]         ;1960
000098  6ae1              LDR      r1,[r4,#0x2c]         ;1961
00009a  6308              STR      r0,[r1,#0x30]         ;1961
00009c  462b              MOV      r3,r5                 ;1962
00009e  2200              MOVS     r2,#0                 ;1962
0000a0  4631              MOV      r1,r6                 ;1962
0000a2  6ae0              LDR      r0,[r4,#0x2c]         ;1962
0000a4  f7fffffe          BL       MID_DMA_Start_IT
0000a8  4607              MOV      r7,r0                 ;1962
0000aa  e00f              B        |L41.204|
                  |L41.172|
0000ac  2180              MOVS     r1,#0x80              ;1966
0000ae  2034              MOVS     r0,#0x34              ;1966
0000b0  5501              STRB     r1,[r0,r4]            ;1966
0000b2  2000              MOVS     r0,#0                 ;1967
0000b4  8660              STRH     r0,[r4,#0x32]         ;1967
0000b6  8ee0              LDRH     r0,[r4,#0x36]         ;1968
0000b8  2140              MOVS     r1,#0x40              ;1968
0000ba  4308              ORRS     r0,r0,r1              ;1968
0000bc  86e0              STRH     r0,[r4,#0x36]         ;1968
0000be  bf00              NOP                            ;1969
0000c0  2100              MOVS     r1,#0                 ;1969
0000c2  2030              MOVS     r0,#0x30              ;1969
0000c4  5501              STRB     r1,[r0,r4]            ;1969
0000c6  bf00              NOP                            ;1969
0000c8  2001              MOVS     r0,#1                 ;1970
0000ca  e7a8              B        |L41.30|
                  |L41.204|
0000cc  2f00              CMP      r7,#0                 ;1973
0000ce  d10c              BNE      |L41.234|
0000d0  bf00              NOP                            ;1976
0000d2  2100              MOVS     r1,#0                 ;1976
0000d4  2030              MOVS     r0,#0x30              ;1976
0000d6  5501              STRB     r1,[r0,r4]            ;1976
0000d8  bf00              NOP                            ;1976
0000da  6820              LDR      r0,[r4,#0]            ;1985
0000dc  6840              LDR      r0,[r0,#4]            ;1985
0000de  2103              MOVS     r1,#3                 ;1985
0000e0  4308              ORRS     r0,r0,r1              ;1985
0000e2  6821              LDR      r1,[r4,#0]            ;1985
0000e4  6048              STR      r0,[r1,#4]            ;1985
0000e6  2000              MOVS     r0,#0                 ;1987
0000e8  e799              B        |L41.30|
                  |L41.234|
0000ea  2180              MOVS     r1,#0x80              ;1991
0000ec  2034              MOVS     r0,#0x34              ;1991
0000ee  5501              STRB     r1,[r0,r4]            ;1991
0000f0  2000              MOVS     r0,#0                 ;1992
0000f2  8660              STRH     r0,[r4,#0x32]         ;1992
0000f4  8ee0              LDRH     r0,[r4,#0x36]         ;1993
0000f6  2140              MOVS     r1,#0x40              ;1993
0000f8  4308              ORRS     r0,r0,r1              ;1993
0000fa  86e0              STRH     r0,[r4,#0x36]         ;1993
0000fc  bf00              NOP                            ;1994
0000fe  2100              MOVS     r1,#0                 ;1994
000100  2030              MOVS     r0,#0x30              ;1994
000102  5501              STRB     r1,[r0,r4]            ;1994
000104  bf00              NOP                            ;1994
000106  2001              MOVS     r0,#1                 ;1995
000108  e789              B        |L41.30|
00010a  e7ff              B        |L41.268|
                  |L41.268|
00010c  2002              MOVS     r0,#2                 ;2000
00010e  e786              B        |L41.30|
;;;2003   
                          ENDP

                  |L41.272|
                          DCD      0x00f80300
                  |L41.276|
                          DCD      I2C_Slave_ISR_IT
                  |L41.280|
                          DCD      I2C_DMACplt
                  |L41.284|
                          DCD      I2C_DMAError

                          AREA ||i.MID_I2C_Slave_Receive_IT||, CODE, READONLY, ALIGN=2

                  MID_I2C_Slave_Receive_IT PROC
;;;1433    */
;;;1434   MID_StatusTypeDef MID_I2C_Slave_Receive_IT(I2C_HandleTypeDef *mI2C, uint8_t *pData, uint16_t Size)
000000  b510              PUSH     {r4,lr}
;;;1435   {
000002  4603              MOV      r3,r0
;;;1436       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
000004  2034              MOVS     r0,#0x34
000006  5cc0              LDRB     r0,[r0,r3]
000008  2481              MOVS     r4,#0x81
00000a  4020              ANDS     r0,r0,r4
00000c  2880              CMP      r0,#0x80
00000e  d142              BNE      |L42.150|
;;;1437       {
;;;1438           if((pData == NULL) || (Size == 0U))
000010  2900              CMP      r1,#0
000012  d001              BEQ      |L42.24|
000014  2a00              CMP      r2,#0
000016  d101              BNE      |L42.28|
                  |L42.24|
;;;1439           {
;;;1440               return  MID_ERROR;
000018  2001              MOVS     r0,#1
                  |L42.26|
;;;1441           }
;;;1442   
;;;1443           /* Process Locked */
;;;1444           __MID_LOCK(mI2C);
;;;1445   
;;;1446           /* Disable All Interrupt */
;;;1447           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;1448   
;;;1449           /* Clear I2C Flag */
;;;1450           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;1451   
;;;1452           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;1453           mI2C->State = MID_I2C_STATE_BUSY_RX;
;;;1454           mI2C->Mode = MID_I2C_MODE_SLAVE;
;;;1455   
;;;1456           /* Prepare transfer parameters */
;;;1457           mI2C->DevAddress = NULL;
;;;1458           mI2C->pBuffPtr = pData;
;;;1459           mI2C->XferSize = Size;
;;;1460           mI2C->XferCount = NULL;
;;;1461           mI2C->XferISR = I2C_Slave_ISR_IT;
;;;1462   
;;;1463           /* Enable Address Acknowledge */
;;;1464           mI2C->Instance->CR0.W |= (I2C_CR0_SADR_EN_mask_w | mI2C->Init.DualAddressMode | mI2C->Init.GeneralCallMode);
;;;1465           __DRV_I2C_STA_STO_AA_001(mI2C);
;;;1466   
;;;1467           /* Process Unlocked */
;;;1468           __MID_UNLOCK(mI2C);
;;;1469   
;;;1470           /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1471                     to avoid the risk of I2C interrupt handle execution before current
;;;1472                     process unlock */
;;;1473   
;;;1474           /* Enable IEA, EVENT, interrupt */
;;;1475           /* possible to enable all of these */
;;;1476           /* I2C_IT_IEA | I2C_IT_EVENT */
;;;1477           __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;1478   
;;;1479           return MID_OK;
;;;1480       }
;;;1481       else
;;;1482       {
;;;1483           return MID_BUSY;
;;;1484       }
;;;1485   }
00001a  bd10              POP      {r4,pc}
                  |L42.28|
00001c  bf00              NOP                            ;1444
00001e  2030              MOVS     r0,#0x30              ;1444
000020  5cc0              LDRB     r0,[r0,r3]            ;1444
000022  2801              CMP      r0,#1                 ;1444
000024  d101              BNE      |L42.42|
000026  2002              MOVS     r0,#2                 ;1444
000028  e7f7              B        |L42.26|
                  |L42.42|
00002a  2401              MOVS     r4,#1                 ;1444
00002c  2030              MOVS     r0,#0x30              ;1444
00002e  54c4              STRB     r4,[r0,r3]            ;1444
000030  bf00              NOP                            ;1444
000032  6818              LDR      r0,[r3,#0]            ;1447
000034  6840              LDR      r0,[r0,#4]            ;1447
000036  240e              MOVS     r4,#0xe               ;1447
000038  43a0              BICS     r0,r0,r4              ;1447
00003a  681c              LDR      r4,[r3,#0]            ;1447
00003c  6060              STR      r0,[r4,#4]            ;1447
00003e  4817              LDR      r0,|L42.156|
000040  681c              LDR      r4,[r3,#0]            ;1450
000042  6020              STR      r0,[r4,#0]            ;1450
000044  2000              MOVS     r0,#0                 ;1452
000046  86d8              STRH     r0,[r3,#0x36]         ;1452
000048  2485              MOVS     r4,#0x85              ;1453
00004a  2034              MOVS     r0,#0x34              ;1453
00004c  54c4              STRB     r4,[r0,r3]            ;1453
00004e  2001              MOVS     r0,#1                 ;1454
000050  02c0              LSLS     r0,r0,#11             ;1454
000052  8658              STRH     r0,[r3,#0x32]         ;1454
000054  2000              MOVS     r0,#0                 ;1457
000056  8398              STRH     r0,[r3,#0x1c]         ;1457
000058  6199              STR      r1,[r3,#0x18]         ;1458
00005a  83da              STRH     r2,[r3,#0x1e]         ;1459
00005c  8418              STRH     r0,[r3,#0x20]         ;1460
00005e  4810              LDR      r0,|L42.160|
000060  6258              STR      r0,[r3,#0x24]         ;1461
000062  2402              MOVS     r4,#2                 ;1464
000064  68d8              LDR      r0,[r3,#0xc]          ;1464
000066  4320              ORRS     r0,r0,r4              ;1464
000068  695c              LDR      r4,[r3,#0x14]         ;1464
00006a  4320              ORRS     r0,r0,r4              ;1464
00006c  681c              LDR      r4,[r3,#0]            ;1464
00006e  6924              LDR      r4,[r4,#0x10]         ;1464
000070  4320              ORRS     r0,r0,r4              ;1464
000072  681c              LDR      r4,[r3,#0]            ;1464
000074  6120              STR      r0,[r4,#0x10]         ;1464
000076  2074              MOVS     r0,#0x74              ;1465
000078  681c              LDR      r4,[r3,#0]            ;1465
00007a  7620              STRB     r0,[r4,#0x18]         ;1465
00007c  bf00              NOP                            ;1468
00007e  2400              MOVS     r4,#0                 ;1468
000080  2030              MOVS     r0,#0x30              ;1468
000082  54c4              STRB     r4,[r0,r3]            ;1468
000084  bf00              NOP                            ;1468
000086  6818              LDR      r0,[r3,#0]            ;1477
000088  6840              LDR      r0,[r0,#4]            ;1477
00008a  2403              MOVS     r4,#3                 ;1477
00008c  4320              ORRS     r0,r0,r4              ;1477
00008e  681c              LDR      r4,[r3,#0]            ;1477
000090  6060              STR      r0,[r4,#4]            ;1477
000092  2000              MOVS     r0,#0                 ;1479
000094  e7c1              B        |L42.26|
                  |L42.150|
000096  2002              MOVS     r0,#2                 ;1483
000098  e7bf              B        |L42.26|
;;;1486   
                          ENDP

00009a  0000              DCW      0x0000
                  |L42.156|
                          DCD      0x00f80300
                  |L42.160|
                          DCD      I2C_Slave_ISR_IT

                          AREA ||i.MID_I2C_Slave_Transmit||, CODE, READONLY, ALIGN=2

                  MID_I2C_Slave_Transmit PROC
;;;962     */
;;;963    MID_StatusTypeDef MID_I2C_Slave_Transmit(I2C_HandleTypeDef *mI2C, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  b5f8              PUSH     {r3-r7,lr}
;;;964    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;965        uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;966    ////    uint8_t lEventCode;
;;;967    
;;;968        if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
00000e  2034              MOVS     r0,#0x34
000010  5d00              LDRB     r0,[r0,r4]
000012  2181              MOVS     r1,#0x81
000014  4008              ANDS     r0,r0,r1
000016  2880              CMP      r0,#0x80
000018  d160              BNE      |L43.220|
;;;969        {
;;;970            if((pData == NULL) || (Size == 0U))
00001a  2d00              CMP      r5,#0
00001c  d001              BEQ      |L43.34|
00001e  2e00              CMP      r6,#0
000020  d101              BNE      |L43.38|
                  |L43.34|
;;;971            {
;;;972                return  MID_ERROR;
000022  2001              MOVS     r0,#1
                  |L43.36|
;;;973            }
;;;974            /* Process Locked */
;;;975            __MID_LOCK(mI2C);
;;;976    
;;;977            /* Disable All Interrupt */
;;;978            __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;979    
;;;980            /* Clear I2C Flag */
;;;981            __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;982    
;;;983            mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;984            mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;985            mI2C->Mode = MID_I2C_MODE_SLAVE;
;;;986    
;;;987            /* Prepare transfer parameters */
;;;988            mI2C->DevAddress = NULL;
;;;989            mI2C->pBuffPtr = pData;
;;;990            mI2C->XferSize = Size;
;;;991            mI2C->XferCount = NULL;
;;;992            mI2C->XferISR = NULL;
;;;993    
;;;994            /* Init tickstart for timeout management*/
;;;995            tickstart = MID_GetTick();
;;;996    
;;;997            /* Enable Address Acknowledge */
;;;998            mI2C->Instance->CR0.W |= (I2C_CR0_SADR_EN_mask_w | mI2C->Init.DualAddressMode | mI2C->Init.GeneralCallMode);
;;;999            __DRV_I2C_STA_STO_AA_001(mI2C);
;;;1000   
;;;1001   ////        /* Wait until match own Address */
;;;1002   ////        do{
;;;1003   ////            if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, Timeout, tickstart) != MID_OK)
;;;1004   ////            {
;;;1005   ////                /* Process Unlocked */
;;;1006   ////                __MID_UNLOCK(mI2C);
;;;1007   ////                return MID_ERROR;
;;;1008   ////            }
;;;1009   ////            lEventCode = __DRV_I2C_GET_EVENTCODE(mI2C);
;;;1010   ////        }while((lEventCode != 0xA8) && (lEventCode != 0xB0));
;;;1011   ////        I2C_BytemodeSlaveEventHandle(mI2C);
;;;1012   
;;;1013           /* Wait until Data Transfor to Stop */
;;;1014           do{
;;;1015               if(I2C_WaitOnEVENTFlagUntilTimeout(mI2C, Timeout, tickstart) != MID_OK)
;;;1016               {
;;;1017                   /* Process Unlocked */
;;;1018                   __MID_UNLOCK(mI2C);
;;;1019                   return MID_TIMEOUT;
;;;1020               }
;;;1021               I2C_BytemodeSlaveEventHandle(mI2C);
;;;1022           }while((mI2C->State & MID_I2C_STATE_BUSY) != 0);
;;;1023   
;;;1024           /* Disable Address Acknowledge */
;;;1025           mI2C->State = MID_I2C_STATE_READY;
;;;1026           mI2C->Mode  = MID_I2C_MODE_NONE;
;;;1027   
;;;1028           /* Process Unlocked */
;;;1029           __MID_UNLOCK(mI2C);
;;;1030   
;;;1031           if(mI2C->ErrorCode != MID_I2C_ERROR_NONE)
;;;1032               return MID_ERROR;
;;;1033           else
;;;1034               return MID_OK;
;;;1035       }
;;;1036       else
;;;1037       {
;;;1038           return MID_BUSY;
;;;1039       }
;;;1040   }
000024  bdf8              POP      {r3-r7,pc}
                  |L43.38|
000026  bf00              NOP                            ;975
000028  2030              MOVS     r0,#0x30              ;975
00002a  5d00              LDRB     r0,[r0,r4]            ;975
00002c  2801              CMP      r0,#1                 ;975
00002e  d101              BNE      |L43.52|
000030  2002              MOVS     r0,#2                 ;975
000032  e7f7              B        |L43.36|
                  |L43.52|
000034  2101              MOVS     r1,#1                 ;975
000036  2030              MOVS     r0,#0x30              ;975
000038  5501              STRB     r1,[r0,r4]            ;975
00003a  bf00              NOP                            ;975
00003c  6820              LDR      r0,[r4,#0]            ;978
00003e  6840              LDR      r0,[r0,#4]            ;978
000040  210e              MOVS     r1,#0xe               ;978
000042  4388              BICS     r0,r0,r1              ;978
000044  6821              LDR      r1,[r4,#0]            ;978
000046  6048              STR      r0,[r1,#4]            ;978
000048  4825              LDR      r0,|L43.224|
00004a  6821              LDR      r1,[r4,#0]            ;981
00004c  6008              STR      r0,[r1,#0]            ;981
00004e  2000              MOVS     r0,#0                 ;983
000050  86e0              STRH     r0,[r4,#0x36]         ;983
000052  2183              MOVS     r1,#0x83              ;984
000054  2034              MOVS     r0,#0x34              ;984
000056  5501              STRB     r1,[r0,r4]            ;984
000058  2001              MOVS     r0,#1                 ;985
00005a  02c0              LSLS     r0,r0,#11             ;985
00005c  8660              STRH     r0,[r4,#0x32]         ;985
00005e  2000              MOVS     r0,#0                 ;988
000060  83a0              STRH     r0,[r4,#0x1c]         ;988
000062  61a5              STR      r5,[r4,#0x18]         ;989
000064  83e6              STRH     r6,[r4,#0x1e]         ;990
000066  8420              STRH     r0,[r4,#0x20]         ;991
000068  6260              STR      r0,[r4,#0x24]         ;992
00006a  f7fffffe          BL       MID_GetTick
00006e  9000              STR      r0,[sp,#0]            ;995
000070  2102              MOVS     r1,#2                 ;998
000072  68e0              LDR      r0,[r4,#0xc]          ;998
000074  4308              ORRS     r0,r0,r1              ;998
000076  6961              LDR      r1,[r4,#0x14]         ;998
000078  4308              ORRS     r0,r0,r1              ;998
00007a  6821              LDR      r1,[r4,#0]            ;998
00007c  6909              LDR      r1,[r1,#0x10]         ;998
00007e  4308              ORRS     r0,r0,r1              ;998
000080  6821              LDR      r1,[r4,#0]            ;998
000082  6108              STR      r0,[r1,#0x10]         ;998
000084  2074              MOVS     r0,#0x74              ;999
000086  6821              LDR      r1,[r4,#0]            ;999
000088  7608              STRB     r0,[r1,#0x18]         ;999
00008a  bf00              NOP                            ;1014
                  |L43.140|
00008c  4639              MOV      r1,r7                 ;1015
00008e  4620              MOV      r0,r4                 ;1015
000090  9a00              LDR      r2,[sp,#0]            ;1015
000092  f7fffffe          BL       I2C_WaitOnEVENTFlagUntilTimeout
000096  2800              CMP      r0,#0                 ;1015
000098  d006              BEQ      |L43.168|
00009a  bf00              NOP                            ;1018
00009c  2100              MOVS     r1,#0                 ;1018
00009e  2030              MOVS     r0,#0x30              ;1018
0000a0  5501              STRB     r1,[r0,r4]            ;1018
0000a2  bf00              NOP                            ;1018
0000a4  2003              MOVS     r0,#3                 ;1019
0000a6  e7bd              B        |L43.36|
                  |L43.168|
0000a8  4620              MOV      r0,r4                 ;1021
0000aa  f7fffffe          BL       I2C_BytemodeSlaveEventHandle
0000ae  2034              MOVS     r0,#0x34              ;1022
0000b0  5d00              LDRB     r0,[r0,r4]            ;1022
0000b2  07c0              LSLS     r0,r0,#31             ;1022
0000b4  0fc0              LSRS     r0,r0,#31             ;1022
0000b6  2800              CMP      r0,#0                 ;1022
0000b8  d1e8              BNE      |L43.140|
0000ba  2180              MOVS     r1,#0x80              ;1025
0000bc  2034              MOVS     r0,#0x34              ;1025
0000be  5501              STRB     r1,[r0,r4]            ;1025
0000c0  2000              MOVS     r0,#0                 ;1026
0000c2  8660              STRH     r0,[r4,#0x32]         ;1026
0000c4  bf00              NOP                            ;1029
0000c6  2100              MOVS     r1,#0                 ;1029
0000c8  2030              MOVS     r0,#0x30              ;1029
0000ca  5501              STRB     r1,[r0,r4]            ;1029
0000cc  bf00              NOP                            ;1029
0000ce  8ee0              LDRH     r0,[r4,#0x36]         ;1031
0000d0  2800              CMP      r0,#0                 ;1031
0000d2  d001              BEQ      |L43.216|
0000d4  2001              MOVS     r0,#1                 ;1032
0000d6  e7a5              B        |L43.36|
                  |L43.216|
0000d8  2000              MOVS     r0,#0                 ;1034
0000da  e7a3              B        |L43.36|
                  |L43.220|
0000dc  2002              MOVS     r0,#2                 ;1038
0000de  e7a1              B        |L43.36|
;;;1041   
                          ENDP

                  |L43.224|
                          DCD      0x00f80300

                          AREA ||i.MID_I2C_Slave_Transmit_DMA||, CODE, READONLY, ALIGN=2

                  MID_I2C_Slave_Transmit_DMA PROC
;;;1813    */
;;;1814   MID_StatusTypeDef MID_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *mI2C, uint8_t *pData, uint16_t Size)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1815   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1816       MID_StatusTypeDef lDmaXferStatus;
;;;1817   
;;;1818       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
000008  2034              MOVS     r0,#0x34
00000a  5d00              LDRB     r0,[r0,r4]
00000c  2181              MOVS     r1,#0x81
00000e  4008              ANDS     r0,r0,r1
000010  2880              CMP      r0,#0x80
000012  d17b              BNE      |L44.268|
;;;1819       {
;;;1820           if((pData == NULL) || (Size == 0U))
000014  2e00              CMP      r6,#0
000016  d001              BEQ      |L44.28|
000018  2d00              CMP      r5,#0
00001a  d101              BNE      |L44.32|
                  |L44.28|
;;;1821           {
;;;1822               return  MID_ERROR;
00001c  2001              MOVS     r0,#1
                  |L44.30|
;;;1823           }
;;;1824   
;;;1825           /* Process Locked */
;;;1826           __MID_LOCK(mI2C);
;;;1827   
;;;1828           /* Disable All Interrupt */
;;;1829           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;1830   
;;;1831           /* Clear I2C Flag */
;;;1832           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;1833   
;;;1834           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;1835           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;1836           mI2C->Mode = MID_I2C_MODE_SLAVE;
;;;1837   
;;;1838           /* Prepare transfer parameters */
;;;1839           mI2C->DevAddress = NULL;
;;;1840           mI2C->pBuffPtr = pData;
;;;1841           mI2C->XferSize = Size;
;;;1842           mI2C->XferCount = NULL;
;;;1843           mI2C->XferISR = I2C_Slave_ISR_IT;
;;;1844   
;;;1845           /* Enable Address Acknowledge */
;;;1846           mI2C->Instance->CR0.W |= (I2C_CR0_SADR_EN_mask_w | mI2C->Init.DualAddressMode | mI2C->Init.GeneralCallMode);
;;;1847           __DRV_I2C_STA_STO_AA_001(mI2C);
;;;1848   
;;;1849           if(mI2C->hdmatx != NULL)
;;;1850           {
;;;1851               /* Set the I2C DMA transfer complete callback */
;;;1852               mI2C->hdmatx->XferCpltCallback = I2C_DMACplt;
;;;1853   
;;;1854               /* Set the DMA error callback */
;;;1855               mI2C->hdmatx->XferErrorCallback = I2C_DMAError;
;;;1856   
;;;1857               /* Set the unused DMA callbacks to NULL */
;;;1858               mI2C->hdmatx->XferAbortCallback = NULL;
;;;1859               mI2C->hdmatx->XferHalfCpltCallback = NULL;
;;;1860   
;;;1861               /* Enable the DMA channel */
;;;1862               lDmaXferStatus = MID_DMA_Start_IT(mI2C->hdmatx, (uint32_t)pData, 0, (uint32_t)Size);
;;;1863           }
;;;1864           else
;;;1865           {
;;;1866               /* Update I2C state */
;;;1867               mI2C->State = MID_I2C_STATE_READY;
;;;1868               mI2C->Mode = MID_I2C_MODE_NONE;
;;;1869   
;;;1870               /* Update I2C error code */
;;;1871               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;1872   
;;;1873               /* Process Unlocked */
;;;1874               __MID_UNLOCK(mI2C);
;;;1875   
;;;1876               return MID_ERROR;
;;;1877           }
;;;1878   
;;;1879           if(lDmaXferStatus == MID_OK)
;;;1880           {
;;;1881               /* Process Unlocked */
;;;1882               __MID_UNLOCK(mI2C);
;;;1883   
;;;1884               /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1885                         to avoid the risk of I2C interrupt handle execution before current
;;;1886                         process unlock */
;;;1887   
;;;1888               /* Enable IEA, EVENT, interrupt */
;;;1889               /* possible to enable all of these */
;;;1890               /* I2C_IT_IEA | I2C_IT_EVENT */
;;;1891               __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;1892   
;;;1893               return MID_OK;
;;;1894           }
;;;1895           else
;;;1896           {
;;;1897               mI2C->State = MID_I2C_STATE_READY;
;;;1898               mI2C->Mode = MID_I2C_MODE_NONE;
;;;1899   
;;;1900               mI2C->ErrorCode |= MID_I2C_ERROR_DMA_PARAM;
;;;1901               __MID_UNLOCK(mI2C);
;;;1902               return MID_ERROR;
;;;1903           }
;;;1904       }
;;;1905       else
;;;1906       {
;;;1907           return MID_BUSY;
;;;1908       }
;;;1909   }
00001e  bdf8              POP      {r3-r7,pc}
                  |L44.32|
000020  bf00              NOP                            ;1826
000022  2030              MOVS     r0,#0x30              ;1826
000024  5d00              LDRB     r0,[r0,r4]            ;1826
000026  2801              CMP      r0,#1                 ;1826
000028  d101              BNE      |L44.46|
00002a  2002              MOVS     r0,#2                 ;1826
00002c  e7f7              B        |L44.30|
                  |L44.46|
00002e  2101              MOVS     r1,#1                 ;1826
000030  2030              MOVS     r0,#0x30              ;1826
000032  5501              STRB     r1,[r0,r4]            ;1826
000034  bf00              NOP                            ;1826
000036  6820              LDR      r0,[r4,#0]            ;1829
000038  6840              LDR      r0,[r0,#4]            ;1829
00003a  210e              MOVS     r1,#0xe               ;1829
00003c  4388              BICS     r0,r0,r1              ;1829
00003e  6821              LDR      r1,[r4,#0]            ;1829
000040  6048              STR      r0,[r1,#4]            ;1829
000042  4833              LDR      r0,|L44.272|
000044  6821              LDR      r1,[r4,#0]            ;1832
000046  6008              STR      r0,[r1,#0]            ;1832
000048  2000              MOVS     r0,#0                 ;1834
00004a  86e0              STRH     r0,[r4,#0x36]         ;1834
00004c  2183              MOVS     r1,#0x83              ;1835
00004e  2034              MOVS     r0,#0x34              ;1835
000050  5501              STRB     r1,[r0,r4]            ;1835
000052  2001              MOVS     r0,#1                 ;1836
000054  02c0              LSLS     r0,r0,#11             ;1836
000056  8660              STRH     r0,[r4,#0x32]         ;1836
000058  2000              MOVS     r0,#0                 ;1839
00005a  83a0              STRH     r0,[r4,#0x1c]         ;1839
00005c  61a6              STR      r6,[r4,#0x18]         ;1840
00005e  83e5              STRH     r5,[r4,#0x1e]         ;1841
000060  8420              STRH     r0,[r4,#0x20]         ;1842
000062  482c              LDR      r0,|L44.276|
000064  6260              STR      r0,[r4,#0x24]         ;1843
000066  2102              MOVS     r1,#2                 ;1846
000068  68e0              LDR      r0,[r4,#0xc]          ;1846
00006a  4308              ORRS     r0,r0,r1              ;1846
00006c  6961              LDR      r1,[r4,#0x14]         ;1846
00006e  4308              ORRS     r0,r0,r1              ;1846
000070  6821              LDR      r1,[r4,#0]            ;1846
000072  6909              LDR      r1,[r1,#0x10]         ;1846
000074  4308              ORRS     r0,r0,r1              ;1846
000076  6821              LDR      r1,[r4,#0]            ;1846
000078  6108              STR      r0,[r1,#0x10]         ;1846
00007a  2074              MOVS     r0,#0x74              ;1847
00007c  6821              LDR      r1,[r4,#0]            ;1847
00007e  7608              STRB     r0,[r1,#0x18]         ;1847
000080  6aa0              LDR      r0,[r4,#0x28]         ;1849
000082  2800              CMP      r0,#0                 ;1849
000084  d012              BEQ      |L44.172|
000086  4824              LDR      r0,|L44.280|
000088  6aa1              LDR      r1,[r4,#0x28]         ;1852
00008a  62c8              STR      r0,[r1,#0x2c]         ;1852
00008c  4823              LDR      r0,|L44.284|
00008e  6aa1              LDR      r1,[r4,#0x28]         ;1855
000090  6348              STR      r0,[r1,#0x34]         ;1855
000092  2000              MOVS     r0,#0                 ;1858
000094  6aa1              LDR      r1,[r4,#0x28]         ;1858
000096  6388              STR      r0,[r1,#0x38]         ;1858
000098  6aa1              LDR      r1,[r4,#0x28]         ;1859
00009a  6308              STR      r0,[r1,#0x30]         ;1859
00009c  462b              MOV      r3,r5                 ;1862
00009e  2200              MOVS     r2,#0                 ;1862
0000a0  4631              MOV      r1,r6                 ;1862
0000a2  6aa0              LDR      r0,[r4,#0x28]         ;1862
0000a4  f7fffffe          BL       MID_DMA_Start_IT
0000a8  4607              MOV      r7,r0                 ;1862
0000aa  e00f              B        |L44.204|
                  |L44.172|
0000ac  2180              MOVS     r1,#0x80              ;1867
0000ae  2034              MOVS     r0,#0x34              ;1867
0000b0  5501              STRB     r1,[r0,r4]            ;1867
0000b2  2000              MOVS     r0,#0                 ;1868
0000b4  8660              STRH     r0,[r4,#0x32]         ;1868
0000b6  8ee0              LDRH     r0,[r4,#0x36]         ;1871
0000b8  2140              MOVS     r1,#0x40              ;1871
0000ba  4308              ORRS     r0,r0,r1              ;1871
0000bc  86e0              STRH     r0,[r4,#0x36]         ;1871
0000be  bf00              NOP                            ;1874
0000c0  2100              MOVS     r1,#0                 ;1874
0000c2  2030              MOVS     r0,#0x30              ;1874
0000c4  5501              STRB     r1,[r0,r4]            ;1874
0000c6  bf00              NOP                            ;1874
0000c8  2001              MOVS     r0,#1                 ;1876
0000ca  e7a8              B        |L44.30|
                  |L44.204|
0000cc  2f00              CMP      r7,#0                 ;1879
0000ce  d10c              BNE      |L44.234|
0000d0  bf00              NOP                            ;1882
0000d2  2100              MOVS     r1,#0                 ;1882
0000d4  2030              MOVS     r0,#0x30              ;1882
0000d6  5501              STRB     r1,[r0,r4]            ;1882
0000d8  bf00              NOP                            ;1882
0000da  6820              LDR      r0,[r4,#0]            ;1891
0000dc  6840              LDR      r0,[r0,#4]            ;1891
0000de  2103              MOVS     r1,#3                 ;1891
0000e0  4308              ORRS     r0,r0,r1              ;1891
0000e2  6821              LDR      r1,[r4,#0]            ;1891
0000e4  6048              STR      r0,[r1,#4]            ;1891
0000e6  2000              MOVS     r0,#0                 ;1893
0000e8  e799              B        |L44.30|
                  |L44.234|
0000ea  2180              MOVS     r1,#0x80              ;1897
0000ec  2034              MOVS     r0,#0x34              ;1897
0000ee  5501              STRB     r1,[r0,r4]            ;1897
0000f0  2000              MOVS     r0,#0                 ;1898
0000f2  8660              STRH     r0,[r4,#0x32]         ;1898
0000f4  8ee0              LDRH     r0,[r4,#0x36]         ;1900
0000f6  2140              MOVS     r1,#0x40              ;1900
0000f8  4308              ORRS     r0,r0,r1              ;1900
0000fa  86e0              STRH     r0,[r4,#0x36]         ;1900
0000fc  bf00              NOP                            ;1901
0000fe  2100              MOVS     r1,#0                 ;1901
000100  2030              MOVS     r0,#0x30              ;1901
000102  5501              STRB     r1,[r0,r4]            ;1901
000104  bf00              NOP                            ;1901
000106  2001              MOVS     r0,#1                 ;1902
000108  e789              B        |L44.30|
00010a  e7ff              B        |L44.268|
                  |L44.268|
00010c  2002              MOVS     r0,#2                 ;1907
00010e  e786              B        |L44.30|
;;;1910   
                          ENDP

                  |L44.272|
                          DCD      0x00f80300
                  |L44.276|
                          DCD      I2C_Slave_ISR_IT
                  |L44.280|
                          DCD      I2C_DMACplt
                  |L44.284|
                          DCD      I2C_DMAError

                          AREA ||i.MID_I2C_Slave_Transmit_IT||, CODE, READONLY, ALIGN=2

                  MID_I2C_Slave_Transmit_IT PROC
;;;1370    */
;;;1371   MID_StatusTypeDef MID_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *mI2C, uint8_t *pData, uint16_t Size)
000000  b510              PUSH     {r4,lr}
;;;1372   {
000002  4603              MOV      r3,r0
;;;1373       if((mI2C->State & (MID_I2C_STATE_READY | MID_I2C_STATE_BUSY)) == MID_I2C_STATE_READY)
000004  2034              MOVS     r0,#0x34
000006  5cc0              LDRB     r0,[r0,r3]
000008  2481              MOVS     r4,#0x81
00000a  4020              ANDS     r0,r0,r4
00000c  2880              CMP      r0,#0x80
00000e  d142              BNE      |L45.150|
;;;1374       {
;;;1375           if((pData == NULL) || (Size == 0U))
000010  2900              CMP      r1,#0
000012  d001              BEQ      |L45.24|
000014  2a00              CMP      r2,#0
000016  d101              BNE      |L45.28|
                  |L45.24|
;;;1376           {
;;;1377               return  MID_ERROR;
000018  2001              MOVS     r0,#1
                  |L45.26|
;;;1378           }
;;;1379   
;;;1380           /* Process Locked */
;;;1381           __MID_LOCK(mI2C);
;;;1382   
;;;1383           /* Disable All Interrupt */
;;;1384           __DRV_I2C_DISABLE_IT(mI2C, I2C_IT_ERR | I2C_IT_BUF | I2C_IT_EVENT); // Disable Interrupt
;;;1385   
;;;1386           /* Clear I2C Flag */
;;;1387           __DRV_I2C_CLEAR_FLAG(mI2C, (I2C_FLAG_NACK | I2C_FLAG_ALOS | I2C_FLAG_BERR | I2C_FLAG_ROVR | I2C_FLAG_TOVR | I2C_FLAG_STOP | I2C_FLAG_RSTR));
;;;1388   
;;;1389           mI2C->ErrorCode = MID_I2C_ERROR_NONE;
;;;1390           mI2C->State = MID_I2C_STATE_BUSY_TX;
;;;1391           mI2C->Mode = MID_I2C_MODE_SLAVE;
;;;1392   
;;;1393           /* Prepare transfer parameters */
;;;1394           mI2C->DevAddress = NULL;
;;;1395           mI2C->pBuffPtr = pData;
;;;1396           mI2C->XferSize = Size;
;;;1397           mI2C->XferCount = NULL;
;;;1398           mI2C->XferISR = I2C_Slave_ISR_IT;
;;;1399   
;;;1400           /* Enable Address Acknowledge */
;;;1401           mI2C->Instance->CR0.W |= (I2C_CR0_SADR_EN_mask_w | mI2C->Init.DualAddressMode | mI2C->Init.GeneralCallMode);
;;;1402           __DRV_I2C_STA_STO_AA_001(mI2C);
;;;1403   
;;;1404           /* Process Unlocked */
;;;1405           __MID_UNLOCK(mI2C);
;;;1406   
;;;1407           /* Note : The I2C interrupts must be enabled after unlocking current process
;;;1408                     to avoid the risk of I2C interrupt handle execution before current
;;;1409                     process unlock */
;;;1410   
;;;1411           /* Enable IEA, EVENT, interrupt */
;;;1412           /* possible to enable all of these */
;;;1413           /* I2C_IT_IEA | I2C_IT_EVENT */
;;;1414           __DRV_I2C_ENABLE_IT(mI2C, (I2C_IT_IEA | I2C_IT_EVENT)); // Enable Interrupt
;;;1415   
;;;1416           return MID_OK;
;;;1417       }
;;;1418       else
;;;1419       {
;;;1420           return MID_BUSY;
;;;1421       }
;;;1422   }
00001a  bd10              POP      {r4,pc}
                  |L45.28|
00001c  bf00              NOP                            ;1381
00001e  2030              MOVS     r0,#0x30              ;1381
000020  5cc0              LDRB     r0,[r0,r3]            ;1381
000022  2801              CMP      r0,#1                 ;1381
000024  d101              BNE      |L45.42|
000026  2002              MOVS     r0,#2                 ;1381
000028  e7f7              B        |L45.26|
                  |L45.42|
00002a  2401              MOVS     r4,#1                 ;1381
00002c  2030              MOVS     r0,#0x30              ;1381
00002e  54c4              STRB     r4,[r0,r3]            ;1381
000030  bf00              NOP                            ;1381
000032  6818              LDR      r0,[r3,#0]            ;1384
000034  6840              LDR      r0,[r0,#4]            ;1384
000036  240e              MOVS     r4,#0xe               ;1384
000038  43a0              BICS     r0,r0,r4              ;1384
00003a  681c              LDR      r4,[r3,#0]            ;1384
00003c  6060              STR      r0,[r4,#4]            ;1384
00003e  4817              LDR      r0,|L45.156|
000040  681c              LDR      r4,[r3,#0]            ;1387
000042  6020              STR      r0,[r4,#0]            ;1387
000044  2000              MOVS     r0,#0                 ;1389
000046  86d8              STRH     r0,[r3,#0x36]         ;1389
000048  2483              MOVS     r4,#0x83              ;1390
00004a  2034              MOVS     r0,#0x34              ;1390
00004c  54c4              STRB     r4,[r0,r3]            ;1390
00004e  2001              MOVS     r0,#1                 ;1391
000050  02c0              LSLS     r0,r0,#11             ;1391
000052  8658              STRH     r0,[r3,#0x32]         ;1391
000054  2000              MOVS     r0,#0                 ;1394
000056  8398              STRH     r0,[r3,#0x1c]         ;1394
000058  6199              STR      r1,[r3,#0x18]         ;1395
00005a  83da              STRH     r2,[r3,#0x1e]         ;1396
00005c  8418              STRH     r0,[r3,#0x20]         ;1397
00005e  4810              LDR      r0,|L45.160|
000060  6258              STR      r0,[r3,#0x24]         ;1398
000062  2402              MOVS     r4,#2                 ;1401
000064  68d8              LDR      r0,[r3,#0xc]          ;1401
000066  4320              ORRS     r0,r0,r4              ;1401
000068  695c              LDR      r4,[r3,#0x14]         ;1401
00006a  4320              ORRS     r0,r0,r4              ;1401
00006c  681c              LDR      r4,[r3,#0]            ;1401
00006e  6924              LDR      r4,[r4,#0x10]         ;1401
000070  4320              ORRS     r0,r0,r4              ;1401
000072  681c              LDR      r4,[r3,#0]            ;1401
000074  6120              STR      r0,[r4,#0x10]         ;1401
000076  2074              MOVS     r0,#0x74              ;1402
000078  681c              LDR      r4,[r3,#0]            ;1402
00007a  7620              STRB     r0,[r4,#0x18]         ;1402
00007c  bf00              NOP                            ;1405
00007e  2400              MOVS     r4,#0                 ;1405
000080  2030              MOVS     r0,#0x30              ;1405
000082  54c4              STRB     r4,[r0,r3]            ;1405
000084  bf00              NOP                            ;1405
000086  6818              LDR      r0,[r3,#0]            ;1414
000088  6840              LDR      r0,[r0,#4]            ;1414
00008a  2403              MOVS     r4,#3                 ;1414
00008c  4320              ORRS     r0,r0,r4              ;1414
00008e  681c              LDR      r4,[r3,#0]            ;1414
000090  6060              STR      r0,[r4,#4]            ;1414
000092  2000              MOVS     r0,#0                 ;1416
000094  e7c1              B        |L45.26|
                  |L45.150|
000096  2002              MOVS     r0,#2                 ;1420
000098  e7bf              B        |L45.26|
;;;1423   
                          ENDP

00009a  0000              DCW      0x0000
                  |L45.156|
                          DCD      0x00f80300
                  |L45.160|
                          DCD      I2C_Slave_ISR_IT

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CSC_InitConfig
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00010000
                          DCD      0x00000000
                          DCD      0x00000210
                          DCD      0x00000001
                          DCD      0x00000008
                          DCD      0x0000911f
                          DCD      0x000f13ed
                          DCD      0x00008993
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00b71b00
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L271.24|
                  |L271.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L271.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L271.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "C:\\Keil_v5\\ARM\\PACK\\Megawin\\CM0_DFP\\2.0.4\\Device\\MG32x02z\\MG32F02A_Middleware\\Source\\MG32x02z_I2C_MID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_I2C_MID_c_4cb66bc7____REV16|
#line 481 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___18_MG32x02z_I2C_MID_c_4cb66bc7____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_MG32x02z_I2C_MID_c_4cb66bc7____REVSH|
#line 496
|__asm___18_MG32x02z_I2C_MID_c_4cb66bc7____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
